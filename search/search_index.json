{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u4e0d\u662f\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u50cf\u6211\u8fd9\u6837\u53bb\u5efa\u9020\u4e00\u5ea7\u6c34\u6676\u5927\u6559\u5802\uff0c\u4f46\u662f\u6bcf\u4e2a\u4eba\u90fd\u5e94\u8be5\u62e5\u6709\u81ea\u5df1\u7684\u68a6\u60f3\uff0c\u8bbe\u8ba1\u81ea\u5df1\u7684\u68a6\u60f3\uff0c\u8ffd\u6c42\u81ea\u5df1\u7684\u68a6\u60f3\uff0c\u5b9e\u73b0\u81ea\u5df1\u7684\u68a6\u60f3\u3002\u68a6\u60f3\u662f\u751f\u547d\u7684\u7075\u9b42\uff0c\u662f\u5fc3\u7075\u7684\u706f\u5854\uff0c\u662f\u5f15\u5bfc\u4eba\u8d70\u5411\u6210\u529f\u7684\u4fe1\u4ef0\u3002\u6709\u4e86\u5d07\u9ad8\u7684\u68a6\u60f3\uff0c\u53ea\u8981\u77e2\u5fd7\u4e0d\u6e1d\u5730\u8ffd\u6c42\uff0c\u68a6\u60f3\u5c31\u4f1a\u6210\u4e3a\u73b0\u5b9e\uff0c\u594b\u6597\u5c31\u4f1a\u53d8\u6210\u58ee\u4e3e\uff0c\u751f\u547d\u5c31\u4f1a\u521b\u9020\u5947\u8ff9\u3002 \u2014\u2014\u7f57\u4f2f\u00b7\u8212\u4e50","title":"Home"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","text":"\u57fa\u4e8e\u56de\u5f52\u7684\u6587\u5b57\u68c0\u6d4b \uff1a\u4f18\u70b9->\u5bf9\u89c4\u5219\u5f62\u72b6\u6587\u5b57\u68c0\u6d4b\u6548\u679c\u8f83\u597d\uff1b\u7f3a\u70b9->\u65e0\u6cd5\u51c6\u786e\u68c0\u6d4b\u4e0d\u89c4\u5219\u5f62\u72b6\u6587\u672c\u3002 CTPN(16/09) \u00b6 \u8bba\u6587 | \u4ee3\u7801 | RNN, Seq2Seq, Attention\u89e3\u6790 | LSTM\u89e3\u6790 \u7f51\u7edc\u7ed3\u6784 CTPN **\u53ea\u68c0\u6d4b\u6a2a\u5411\u6392\u5217**\u7684\u6587\u5b57\uff0c\u7c7b\u4f3c Faster R-CNN \uff0c\u4f46\u52a0\u5165\u4e86 LSTM Conv5 \u6bcf\u70b9\u8981\u7ed3\u5408\u5468\u56f4 3x3 \u533a\u57df\u7279\u5f81\u83b7\u5f97\u4e00\u4e2a\u957f\u5ea6\u662f 3x3xC \u7684\u7279\u5f81\u5411\u91cf\uff0c\u8f93\u51fa N*9C*H*W N*9C*H*W-->reshape-->(NH)*W*9C--> \u4ee5 Batch=NH \u4e14\u6700\u5927\u65f6\u95f4\u957f\u5ea6 T_max=W \u7684\u6570\u636e\u6d41\u8f93\u5165\u5230\u53cc\u5411 LSTM \uff0c\u5b66\u4e60\u6bcf\u4e00\u884c\u7684\u5e8f\u5217\u7279\u5f81\uff0c\u53cc\u5411 LSTM \u8f93\u51fa (NH)*W*256-->reshape-->N*256*H*W \u6700\u540e\u7684\u8f93\u51fa\u7279\u5f81\uff0c\u7279\u5f81\u65e2\u5305\u542b**\u7a7a\u95f4\u7279\u5f81**( CNN\u5b66\u4e60 )\uff0c\u4e5f\u5305\u542b**\u5e8f\u5217\u7279\u5f81(lstm\u5b66\u4e60)**\uff0c\u56e0\u4e3a\u6587\u5b57\u662f\u8fde\u7eed\u7684\uff1f \u7279\u5f81\u56fe: N*256*H*W \u2192 fc \u2192 N*512*H*W \u2192 \u7c7bRPN \u2192 text proposal(\u5efa\u8bae\u6846) \u8fb9\u754c\u6846\u56de\u5f52\u65b9\u5f0f \u7ed3\u679c\u5904\u7406 :\u4f7f\u7528 \u6587\u672c\u7ebf\u6784\u9020\u7b97\u6cd5 \u6765\u751f\u6210\u771f\u6b63\u7684\u68c0\u6d4b\u6846\u3002 R2CNN(17/06) \u00b6 \u8bba\u6587 | code \u4e0d\u76f4\u63a5\u56de\u5f52\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6( -90~90 \u76f8\u540c\u77e9\u5f62\u76f8\u4f3c, 0~180 \u76f8\u4f3c)\uff0c\u659c\u6846\u56de\u5f52\u7528 (x1,y1,x2,y2,h) \u8868\u793a\uff1a \u987a\u65f6\u9488\u65b9\u5411\u4e24\u4e2a\u76f8\u90bb\u70b9\u5750\u6807\u548c\u9ad8\u6765\u5b9a\u4e49\u4e00\u4e2a\u503e\u659c\u77e9\u5f62\u6846 \uff0c\u56de\u5f52\u8fd9\u4e94\u4e2a\u503c\u5c31\u5bb9\u6613\u56de\u5f52\u4e86\u3002 \u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u65cb\u8f6c\u6587\u672c\u7684\u68c0\u6d4b\uff0c\u4e3b\u8981\u662f\u5728Faster RCNN\u7684\u7b97\u6cd5\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u4e9b\u4fee\u6539 \u901a\u8fc7 RPN \u7f51\u7edc\uff0c\u5f97\u5230\u6b63\u6846\u7684Proposal\u3002\u7531\u4e8e\u5f88\u591a\u6587\u5b57\u662f\u5f88\u5c0f\u7684\uff0c\u56e0\u6b64\u5c06Faster RCNN\u4e2d\u7684anchor scale (8,16,32) \u6539\u4e3a (4,8,16,32) \u3002\u5b9e\u9a8c\u8bc1\u660e\u589e\u52a0\u4e86\u5c0f\u7684\u5c3a\u5ea6\u540e\u68c0\u6d4b\u6548\u679c\u660e\u663e\u63d0\u5347\u3002 ROI Pooling \u65f6\u7684\u5c3a\u5bf8\u9664\u4e86 7*7 \u5916\uff0c\u8fd8\u6709\u4e24\u79cd\u957f\u5bbd\u4e0d\u4e00\u81f4\u7684\u5c3a\u5bf8\uff1a 3*11 \u548c 11*3 \uff0c\u8fd9\u79cd\u8bbe\u7f6e\u7684\u7528\u610f\u4e5f\u975e\u5e38\u660e\u663e\uff0c\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u6c34\u5e73\u548c\u7ad6\u76f4\u957f\u6587\u672c\u7684\u68c0\u6d4b\u3002\u7136\u540e\u5bf9\u4e8e\u63d0\u53d6\u5230\u7684ROI\u7279\u5f81\u505acancat\u64cd\u4f5c\u8fdb\u884c\u878d\u5408\u4f5c\u4e3a\u540e\u7eed\u9884\u6d4b\u652f\u8def\u7684\u8f93\u5165\u3002 \u9884\u6d4b\u8f93\u51fa\u67093\u4e2a\u652f\u8def \u7b2c\u4e00\u4e2a\u652f\u8def\u662f**\u6709\u65e0\u6587\u672c\u7684\u4e8c\u5206\u7c7b**\uff0c\u8fd9\u4e2a\u548c\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u76ee\u6807\u5206\u7c7b\u7c7b\u4f3c\u3002 \u7b2c\u4e8c\u4e2a\u652f\u8def\u662f**\u6c34\u5e73\u6846\uff08axis-aligned box\uff09\u7684\u9884\u6d4b**\uff0c\u8fd9\u4e2a\u548c\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u6846\u9884\u6d4b\u4e00\u6837\u3002 \u7b2c\u4e09\u4e2a\u652f\u8def\u65f6**\u503e\u659c\u6846\uff08inclined box\uff09\u7684\u9884\u6d4b**\uff0c\u8fd9\u90e8\u5206\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4eae\u70b9\uff0c\u800c\u4e14\u8be5\u652f\u8def\u540e\u9762\u8ddf\u4e00\u4e2a\u659c\u6846NMS\u8fdb\u884c\u5904\u7406\u5f97\u5230\u6700\u540e\u7ed3\u679c\u3002 \u867d\u7136\u503e\u659c\u6846\u652f\u8def\u4e5f\u80fd\u9884\u6d4b\u6c34\u5e73\u6846\uff0c\u4f46\u662f\u4f5c\u8005\u8ba4\u4e3a\u7b2c\u4e8c\u4e2a\u652f\u8def\u7684\u5b58\u5728\u5bf9\u6700\u540e\u7ed3\u679c\u5e2e\u52a9\u8f83\u5927\u3002 \u91c7\u7528\u503e\u659c\u6846\u7684NMS\u7b97\u6cd5\u5904\u7406(a)\u4e2d\u7684\u9884\u6d4b\u6846\u540e\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u6bd4\u8f83\u597d\uff0c\u57fa\u4e8e\u503e\u659c\u6846\u7684NMS\u7b97\u6cd5\u548c\u4f20\u7edf\u7684\u57fa\u4e8e\u6c34\u5e73\u77e9\u5f62\u6846\u7684NMS\u7b97\u6cd5\u5dee\u522b\u4e0d\u5927\uff0c\u53ea\u4e0d\u8fc7\u8ba1\u7b97\u5bf9\u8c61\u6362\u6210\u4e24\u4e2a\u503e\u659c\u6846 \u635f\u5931\u51fd\u6570(3\u90e8\u5206) \u6709\u65e0\u6587\u672c\u7684\u4e8c\u5206\u7c7b\u635f\u5931Lcls \u6c34\u5e73\u6846\u7684\u56de\u5f52\u635f\u5931Lreg(vi,vi*)\u3002 \u503e\u659c\u6846\u7684\u56de\u5f52\u635f\u5931Lreg(ui,ui*)\u3002 \u540e\u9762\u4e24\u90e8\u5206\u90fd\u662f\u91c7\u7528\u76ee\u6807\u68c0\u6d4b\u4e2d\u5e38\u7528\u7684smooth L1\u635f\u5931\u51fd\u6570\uff0c\u6240\u4ee5\u635f\u5931\u51fd\u6570\u65b9\u9762\u6ca1\u6709\u592a\u5927\u7684\u6539\u52a8\u3002 SegLink(17/03) \u00b6 | code | SSD \u6539\u8fdb \u76f4\u63a5\u56de\u5f52\u65cb\u8f6c\u8fb9\u6846\u65cb\u8f6c\u89d2\u5ea6\u96be\u56de\u5f52\uff0c( -90~90 \u76f8\u540c\u77e9\u5f62\u76f8\u4f3c, 0~180 \u76f8\u4f3c) \u4e0d\u80fd\u68c0\u6d4b\u5f88\u5927\u7684\u6587\u672c\uff0c\u8fd9\u662f\u56e0\u4e3a link \u4e3b\u8981\u662f\u7528\u4e8e\u8fde\u63a5\u76f8\u90bb\u7684 segments \uff0c\u800c\u4e0d\u80fd\u7528\u4e8e\u68c0\u6d4b\u76f8\u8ddd\u8f83\u8fdc\u7684\u6587\u672c\u884c \u4e0d\u80fd\u68c0\u6d4b\u5f62\u53d8\u6216\u8005\u66f2\u7ebf\u6587\u672c\uff0c\u8fd9\u662f\u56e0\u4e3a segments combining \u7b97\u6cd5\u5728\u5408\u5e76\u7684\u65f6\u5019\u91c7\u7528\u7684\u662f\u76f4\u7ebf\u62df\u5408\uff0e\u8fd9\u91cc\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5408\u5e76\u7b97\u6cd5\uff0c\u6765\u68c0\u6d4b\u53d8\u5f62\u6216\u66f2\u7ebf\u6587\u672c \u68c0\u6d4b\u8fc7\u7a0b \u9996\u5148\u662f\u68c0\u6d4b\u751f\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684 segment \uff08\u5207\u7247\uff09\uff0c\u5982\u4e0a\u56fe\u9ec4\u8272\u6846\uff0c\u8fd9\u4e9b segment \uff08\u5207\u7247\uff09\u662f\u6587\u672c\u884c\uff08\u6216\u5355\u8bcd\uff09\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u6216\u8005\u662f\u51e0\u4e2a\u5b57\u7b26 \u901a\u8fc7link\uff08\u94fe\u63a5\uff09\u5c06\u5c5e\u4e8e\u540c\u4e00\u4e2a\u6587\u672c\u884c\uff08\u6216\u8005\u5355\u8bcd\uff09\u7684 segment \uff08\u5207\u7247\uff09\u8fde\u63a5\u8d77\u6765\uff0c\u5982\u4e0a\u56fe\u7eff\u8272\u7ebf\u6761\u3002 link \uff08\u94fe\u63a5\uff09\u662f\u5728\u4e24\u4e2a\u6709\u91cd\u53e0 segment \u7684\u4e2d\u5fc3\u70b9\u8fdb\u884c\u76f8\u8fde \u901a\u8fc7\u5408\u5e76\u7b97\u6cd5\uff0c\u5c06\u8fd9\u4e9b segment \uff08\u5207\u7247\uff09\u3001 link \uff08\u94fe\u63a5\uff09\u5408\u5e76\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u672c\u884c\uff0c\u5f97\u51fa\u5b8c\u6574\u6587\u672c\u884c\u7684**\u68c0\u6d4b\u6846\u4f4d\u7f6e\u548c\u65cb\u8f6c\u89d2\u5ea6**\u3002 \u6a21\u578b\u7ed3\u6784 6\u4e2a \u4e0d\u540c\u5c3a\u5ea6\u7684\u7279\u5f81\u56fe\u4e0a\u5f97\u5230\u5404\u81ea\u7684 segment \u548c link \uff0c \u5927feature\u68c0\u6d4b\u5c0f\u76ee\u6807\uff0c\u5c0ffeature\u68c0\u6d4b\u5927\u76ee\u6807 \u6ce8\u610f\u8fd9\u91cc\u6bcf\u4e2a feature map \u7684\u6bcf\u4e2a\u4f4d\u7f6e**\u53ea\u91c7\u7528\u4e86\u4e00\u4e2aaspect ratio=1\u7684default box**(\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u4ea7\u751f\u4e00\u4e2a anchor )\uff0c\u800cSSD\u4e2d\u662f\u4e00\u7cfb\u5217(1, 2, 3, \u00bd, \u2153)\uff1b\u5173\u4e8e default box \u7684 scale size \uff0c\u672c\u6587: a_l = \u03b3 w_i/w_l , where \u03b3 = 1.5,\u8f93\u5165\u56fe\u50cf\u5bbdw_i,\u5f53\u524dfeature\u5bbdw_l \uff0cssd\u4e2d\u662f\u4eba\u4e3a\u8bbe\u7f6e\u7684\u3002 segment\u68c0\u6d4b(\u589e\u52a0\u4e86\u89d2\u5ea6\u56de\u5f52) \uff1a\u6bcf\u4e2a\u7279\u5f81\u56fe\u7684 segment \u5bf9\u5e94\u7684\u8f93\u51fa\u901a\u9053\u662f 7 :\u5176\u4e2d\u4e24\u4e2a\u8868\u793a segment \u662f\u5426\u4e3a\u6587\u5b57\u7684\u7f6e\u4fe1\u5ea6\u503c\u4e3a (0,1) \uff0c\u5269\u4e0b\u7684\u4e94\u4e2a\u4e3a segment \u76f8\u5bf9\u4e8e\u5bf9\u5e94\u4f4d\u7f6e\u7684 default box \u7684\u4e94\u4e2a\u504f\u79fb\u91cf [center_x,center_y,w,h,\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6\u03b8] \uff0c\u9884\u6d4b offsets (\u504f\u79fb\u91cf): [\u0394x, \u0394y, \u0394w, \u0394h,\u0394\u03b8] link\u68c0\u6d4b \u5c42\u5185\u94fe\u63a5\u68c0\u6d4b\uff1a\u8868\u793a\u540c\u4e00\u7279\u5f81\u5c42\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u9884\u6d4b\u4e00\u4e2a segment \u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u5f53\u524d segment \u4e0e 8\u90bb\u57df \u5185\u7684 segment \u7684\u8fde\u63a5\u72b6\u51b5\uff0c\u6bcf\u4e2a link \u6709\u4e24\u4e2a\u5206\u6570\uff1a\u6b63\u5206\u3001\u8d1f\u5206 \u6b63\u5206\u8868\u793a\u4e8c\u8005\u5c5e\u4e8e\u540c\u4e00\u4e2a\u6587\u672c\uff08\u5e94\u8be5\u8fde\u63a5\uff09 \u8d1f\u5206\u8868\u793a\u4e8c\u8005\u5c5e\u4e8e\u4e0d\u540c\u6587\u672c\uff08\u5e94\u8be5\u65ad\u5f00\u8fde\u63a5\uff09 \u6240\u4ee5\uff0c\u6bcf\u4e2a segment \u7684 link \u5e94\u8be5\u662f**2*8=16**\u7ef4\u7684\u5411\u91cf \u8de8\u5c42\u94fe\u63a5\u68c0\u6d4b:\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u540c\u4e00\u6587\u672c\u7684 segment \u5728\u4e0d\u540c\u5c42\u88ab\u68c0\u6d4b\u5230\uff0c\u9020\u6210\u91cd\u590d\u68c0\u6d4b\u3001\u5197\u4f59\u7684\u95ee\u9898\uff1b \u4e3b\u8981\u4f5c\u7528\u4e8e\u8fde\u7eed\u4e24\u5c42\u8f93\u51fa\u7279\u5f81\u56fe( ocnv4_3 \u4e0d\u4e0e\u5176\u4ed6\u7279\u5f81\u5c42\u8fde\u7eed\uff0c\u4e0d\u505a cross-layer-links )\uff0c\u5bf9\u4e8e feature map \u7684\u6bcf\u4e2a\u4f4d\u7f6e\u9700\u8981\u9884\u6d4b**2*4=8**,\u8fd9\u91cc \uff14 \u8868\u793a\u7684\u662f\u4e0e\u4e0a\u4e00\u5c42\u7684 \uff14 \u4e2a\u90bb\u57df\uff0c\u5c31\u662f\u5bf9\u5e94\u524d\u4e00\u5c42\u7684\u611f\u53d7\u91ce \u603b\u7ed3\u6765\u8bf4\uff1a \u5bf9\u4e8econv4_3\u5c42\uff0c\u5176link\u8f93\u51fa\u7684\u7ef4\u5ea6\u4e3a2x8=16\uff1b\u5bf9\u4e8econv7, conv8_2, conv9_2, conv10_2, conv11\u5176\u8f93\u51fa\u7684link\u7ef4\u5ea6\u4e3a2x8+2x4=24 \u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6 \u5408\u5e76\u7b97\u6cd5 \u9996\u5148\u901a\u8fc7\u4eba\u5de5\u8bbe\u5b9a\u7684 \u03b1 \u548c\u03b2 (\u8fd9\u4e24\u4e2a\u503c\u662f\u91c7\u7528\u7f51\u683c\u641c\u7d22\u627e\u5230\u6700\u4f18\uff0c\u8fd9\u91cc\u91c7\u7528 0.1step \u8fdb\u884c\u8d85\u53c2\u6570\u7a77\u4e3e\u641c\u7d22)\uff0c\u5bf9\u7f51\u7edc\u9884\u6d4b\u7684 segments \u548c links \u8fdb\u884c\u6ee4\u9664 \u5c06\u6bcf\u4e2a segment \u770b\u6210 node \uff0c link \u770b\u6210 edge \uff0c\u5efa\u7acb\u56fe\u6a21\u578b\uff0c\u518d\u7528 DFS ( \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 )\u627e\u5230\u8fde\u901a\u5206\u91cf\uff0c\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u5305\u542b\u4e00\u7cfb\u5217 segments (\u7528B\u8868\u793a)\uff0c\u7136\u540e\u901a\u8fc7\u4e0b\u9762\u6d41\u7a0b\u5f97\u5230\u68c0\u6d4b\u6846\u548c\u89d2\u5ea6\u3002 \u8bad\u7ec3 \u5982\u4f55\u751f\u6210 segments \u548c links \u7684 ground truth \uff0c\u5373 default box \u7684 label \uff0c\u504f\u79fb (x, y, w, h, \u03b8) \uff0c \u5c42\u5185link \u53ca \u8de8\u5c42link\u7684label \u5982\u4f55\u786e\u5b9a default box \u4e3a\u6b63\u6837\u672c\u8fd8\u662f\u8d1f\u6837\u672c\u5462\uff1f\u56fe\u50cf\u53ea\u6709\u4e00\u4e2a\u6587\u672c\u884c\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u662f\u6b63\u6837\u672c\uff0c\u5f53\u6709\u591a\u4e2a\u6587\u672c\u884c\u65f6\u6b63\u6837\u672c\u8fd8\u9700\u4e0e a_l/h \u6700\u5c0f\u7684\u6587\u672c\u884c\u5339\u914d\u3002 default box \u7684\u4e2d\u5fc3\u5728\u5f53\u524d\u6587\u672c\u884c\u5185\uff1b default box \u7684 size \u4e0e\u6587\u672c\u884c\u7684\u9ad8\u5ea6\u6bd4\u5fc5\u987b\u6ee1\u8db3\uff1a max(a_l/h,h/a_l)<=1.5 \u5982\u4f55\u786e\u5b9a\u6b63\u6837\u672c\u7684 offset \u504f\u7f6e\uff1f \u5982\u4f55\u786e\u5b9a within-layer link \u548c cross-layer link \u7684 label \u662f positive \u8fd8\u662f negative ? \u4e24\u4e2a default boxes connect it \u4e24\u4e2a default box \u5fc5\u987b\u5c5e\u4e8e\u7edf\u4e00\u6587\u672c\u884c \u76ee\u6807\u51fd\u6570 Textboxes(16/11) \u00b6 TextBoxes\u53ea\u53ef\u4ee5\u68c0\u6d4b\u6c34\u5e73\u6587\u672c \u8bba\u6587 | code |ssd\u6539\u8fdb \u591a\u5c3a\u5ea6\u8f93\u5165( 300*300, 700*700, 300*700, 500*700, and 1600*1600 )\uff0c\u4ee5\u9632\u6b62\u8fc7\u957f\u6587\u672c\u7684\u6846\u8d85\u8fc7\u4e86\u9ed8\u8ba4\u6846\u7684\u6700\u5927\u6bd4\u4f8b\uff0c\u4ece\u800c\u5bfc\u81f4\u68c0\u6d4b\u4e0d\u5230\u7684\u60c5\u51b5\u3002 \u8bba\u6587\u4e2d\u8bbe\u8ba1\u4e86**\u957f\u5bbd\u6bd4\u5206\u522b\u662f1\u30012\u30013\u30015\u30017\u300110\u7684default box**(\u5373\u957f\u6761\u5f62\u7684 default box \uff0c\u9002\u5e94\u957f\u6587\u672c)\uff0c\u4f46\u5782\u76f4\u65b9\u5411\u7684\u6587\u672c\u5c31\u68c0\u6d4b\u4e0d\u51fa\u6765\u4e86\u3002\u4f5c\u8005\u4e3a\u89e3\u51b3\u6c34\u5e73\u65b9\u5411\u6846\u6392\u5217\u5bc6\u96c6\u548c\u5782\u76f4\u65b9\u5411\u6846\u6392\u5217\u7a00\u758f\u95ee\u9898\uff0c\u628a\u6c34\u5e73\u65b9\u5411\u7684\u6846**\u5168\u90e8\u5411\u4e0b\u5e73\u79fb\u534a\u4e2a\u533a\u57df\u7684\u5355\u4f4d**\uff0c\u8fd9\u6837\u5c31\u6709 12\u4e2aanchor \u5f15\u5165 text-box layers \u5c42\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u7279\u5f81\u56fe\u518d\u7528 1x5 \u7684\u5377\u79ef\u6838\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c\uff0c\u4ee3\u66ff SSD \u7684 3x3 \u5377\u79ef\uff0c\u8fd9\u5c31\u4ea7\u751f\u4e86\u77e9\u5f62\u611f\u53d7\u91ce\uff0c\u66f4\u9002\u5408\u7528\u4e8e\u6587\u5b57\u68c0\u6d4b\u3002 \u8f93\u51fa\u7ef4\u5ea6\uff0c\u6bcf\u4e2a\u4f4d\u7f6e 12anchors \u2192 12*(2+4) \uff0c 2:\u6587\u672c/\u975e\u6587\u672c \uff0c 4:(x,y,w,h) \u635f\u5931\u51fd\u6570: TextBoxes++(18/01) \u00b6 \u8bba\u6587 | code TextBoxes++\u53ef\u4ee5\u68c0\u6d4b\u591a\u89d2\u5ea6\u7684\u6587\u672c \uff0c\u4e3b\u8981\u8ba8\u8bba\u4e86\u6587\u672c\u6846\u7684\u4e24\u79cd\u8868\u793a\u65b9\u5f0f\uff0c\u8ba4\u4e3a**\u56db\u4e2a\u5750\u6807\u7684\u8868\u793a**\u66f4\u4f18 \u987a\u65f6\u9488\u7684\u56db\u4e2a\u70b9\u5750\u6807\u8868\u793a: \uff08x1,y1,x2,y2,x3,y3,x4,y4\uff09 R2CNN \u7684\u6846\u8868\u793a:\u987a\u65f6\u9488\u76f8\u90bb\u4e24\u4e2a\u5750\u6807\u70b9\u548c\u9ad8 (x1,y1,x2,y2,h) \u7f51\u7edc\u7ed3\u6784(\u6ca1\u5565\u53d8\u5316) TextBoxes\u6539\u8fdb\u70b9 \u957f\u5bbd\u6bd4: 1\u30012\u30013\u30015\u30011/2\u30011/3\u30011/5 \uff0c\u8fd9\u6837\u5c31\u517c\u987e\u4e86\u5782\u76f4\u6587\u672c\u7684\u68c0\u6d4b\u3002 \u5c06 1*5 \u7684\u5377\u79ef\u6838\u6539\u4e3a 3*5 \u7528\u6765\u751f\u6210 text box layers \uff1a\u5bf9\u5bbd\u6587\u672c\u4e5f\u53cb\u597d\u3002 \u6539\u8fdb\u7f51\u7edc\u8f93\u51fa\uff0c\u7528\u4e8e\u9002\u5e94\u4e8e\u591a\u89d2\u5ea6\u6587\u672c\u3002 \u7eff\u8272\u865a\u7ebf\u8868\u793a\u4e0e ground truth \u5339\u914d\u7684 default box \u9ec4\u8272\u6846\u8868\u793a ground truth \u7ea2\u8272\u7bad\u5934\u8868\u793a\u56de\u5f52\u7684\u65b9\u5411 \u9ed1\u8272\u6846\u8868\u793a\u672a\u5339\u914d\u5230\u771f\u503c\u7684 default box \uff0c \u7eff\u8272\u5b9e\u7ebf\u6846\u8868\u793a\u5bf9\u5e94\u4e0e ground truth \u7684\u5916\u63a5\u77e9\u5f62\u6846\u3002 offset \u504f\u7f6e\u8f93\u51fa \u56db\u70b9\u7684\u504f\u7f6e\u8f93\u51fa \u76f8\u90bb\u4e24\u70b9+\u9ad8\u7684\u504f\u7f6e\u8f93\u51fa \u6587\u672c\u5b9a\u4f4d\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u6587\u5b57\u8bc6\u522b(\u7528\u7684CRNN\u7f51\u7edc)\u7684\u8fc7\u7a0b\uff0c\u6839\u636e\u6587\u672c\u8bc6\u522b\u7684\u6548\u679c\uff0c\u53cd\u9988\u7ed9detection\u7f51\u7edc\uff0c\u5e2e\u52a9\u66f4\u597d\u7684detection\u3002\u6bd4\u5982\u786e\u5b9a\u4e0d\u662f\u6587\u5b57\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u4ece\u7ed3\u679c\u4e2d\u5220\u9664\uff0c \u7528\u4e8e\u8f85\u52a9\u8bad\u7ec3 \u3002 \u635f\u5931\u51fd\u6570 East(17/04 \u50cf\u7d20\u7ea7\u7684\u56de\u5f52) \u00b6 \u8bba\u6587 | tensorflow code | pytorch code \u7ecf\u8fc7 backbone \u540e\u62bd\u53d6\u4e0d\u540c level \u7684 feature map (\u4ed6\u4eec\u7684\u5c3a\u5bf8\u5206\u522b\u662f input_image \u7684 1/32,1/16,1/8,1/4 )\uff0c\u8fd9\u6837 ealy stage \u53ef\u7528\u4e8e\u9884\u6d4b\u5c0f\u7684\u6587\u672c\u884c\uff0c late-stage \u53ef\u7528\u4e8e\u9884\u6d4b\u5927\u7684\u6587\u672c\u884c\uff0e \u5408\u5e76\u7279\u5f81\u56fe\u5e76\u8f93\u51fa\u7ed3\u679c\uff1a \u8f93\u51fa\u7ed3\u679c\u89e3\u91ca\uff1a \u6846\u7684\u5f97\u5206\uff0c\u8bba\u6587\u4e2d\u7528 score map \u8868\u793a angle \u51e0\u4f55\u56fe \u8f93\u51fa RBOX (\u56db\u901a\u9053\u51e0\u4f55\u56fe)\uff1a \u56db\u4e2alocation\u56fe(\u56db\u901a\u9053\u8868\u793a)(\u6bcf\u4e2a\u50cf\u7d20\u7684top\u504f\u79fb\uff0cright\u504f\u79fb\uff0cbottom\u504f\u79fb\uff0cleft\u504f\u79fb\u7ec4\u6210(d)) QUAD : 8 \u4e2a\u901a\u9053\u5206\u522b\u8868\u793a\u4ece\u77e9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5230\u50cf\u7d20\u4f4d\u7f6e\u7684\u5750\u6807\u504f\u79fb\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8ddd\u79bb\u504f\u79fb\u91cf\u90fd\u5305\u542b\u4e24\u4e2a\u6570\u5b57\uff08\u0394xi;\u0394yi\uff09 Loss \u51fd\u6570 Ls ( score map )\u7684 loss \u8ba1\u7b97 RBOX \u7684\u51e0\u4f55\u56fe loss \u8ba1\u7b97:\u5305\u542b\u56db\u4e2a locatioin \u56fe\u7684\u635f\u5931( L_AABB )+ angle \u56fe\u7684\u635f\u5931 L_\u03b8 QUAD \u7684 loss \u8ba1\u7b97:\u4f7f\u7528\u5f52\u4e00\u5316\u7684 smooth l1 loss \u4f7f\u7528 locality NMS \u904d\u5386\u6bcf\u4e2a\u9884\u6d4b\u7684\u6846\uff0c\u7136\u540e\u6309\u7167\u4ea4\u96c6\u5927\u4e8e\u67d0\u4e2a k \u5c31\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u4e2a\u6846\u3002\u5c0f\u95ee\u9898:\u4e3a\u4ec0\u4e48\u8981\u5408\u5e76\u6846\uff1f \u6bcf\u4e2a\u50cf\u7d20\u90fd\u8981\u9884\u6d4b\u56db\u4e2a\u8ddd\u79bb(\u5373\u4e00\u4e2a\u6846)\uff0c\u6240\u4ee5\u4e00\u4e2a\u76ee\u6807\u6709\u51e0\u767e\u4e0a\u5343\u4e2a\u6846\u90fd\u662f\u91cd\u5408\u7684\uff0c\u6240\u4ee5\u8981\u5408\u5e76\u3002 \u5982\u4f55\u5408\u5e76\uff1f \u901a\u8fc7\u4e24\u4e2a\u7ed9\u5b9a\u56db\u8fb9\u5f62\u7684\u5206\u6570\u8fdb\u884c\u52a0\u6743\u5e73\u5747 \u3002 \u5408\u5e76\u5b8c\u540e\u518d\u6309\u7167\u6b63\u5e38 NMS \u6d88\u9664\u4e0d\u5408\u7406\u7684\u6846\u5c31\u884c\u4e86\u3002 \u7f3a\u70b9\uff1aEAST\u5728\u957f\u6587\u672c\u9884\u6d4b\u6548\u679c\u8f83\u5dee Advanced EAST \u00b6 code EAST\u7b97\u6cd5\u7684\u6539\u8fdb\u7248\uff0c\u5bf9EAST\u5728**\u957f\u6587\u672c\u68c0\u6d4b\u5730\u65b9\u7684\u7f3a\u9677**\u8fdb\u884c\u4e86\u91cd\u5927\u6539\u8fdb\uff0c\u4f7f\u957f\u6587\u672c\u9884\u6d4b\u66f4\u52a0\u51c6\u786e\u3002 score map \uff1a\u548c EAST \u4e00\u6837\uff0c\u70b9\u5728\u6587\u672c\u5185\u7684\u7f6e\u4fe1\u5ea6\uff1b vertex code \uff1a\u7b2c\u4e00\u901a\u9053\u8868\u793a\u662f\u5426\u662f\u8fb9\u754c\u5143\u7d20\u7684\u7f6e\u4fe1\u5ea6\u3002\u7b2c\u4e8c\u901a\u9053\u8868\u793a\u662f\u5934/\u5c3e\u5143\u7d20\uff0c0\u8868\u793a\u5934\u90e8\u5143\u7d20\uff0c1\u8868\u793a\u5c3e\u90e8\u5143\u7d20\uff1b vertex geo \uff1a4\u901a\u5206\u522b\u4ee3\u8868\u5de6\u4e0a(\u53f3\u4e0a)X\u3001\u5de6\u4e0a(\u53f3\u4e0a)Y\u3001\u5de6\u4e0b(\u53f3\u4e0b)X\u3001\u5de6\u4e0b(\u53f3\u4e0b)Y\uff0c\u8fd9\u91cc\u4e0d\u662f\u771f\u6b63\u7684X\\Y\u5750\u6807\uff0c\u800c\u662f\u6839\u636e\u5f53\u524d\u70b9\u5750\u6807\u7684X/Y\u504f\u79fb\u91cf( \u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3East\u611f\u53d7\u91ce\u95ee\u9898 )\uff1b**AdvancedEast\u4e0d\u518d\u7528\u6240\u6709\u7684\u70b9\u8fdb\u884c\u9884\u6d4b\u9876\u70b9\u4e86\uff0c\u800c\u662f\u7528\u5934\u90e8\u5143\u7d20\u9884\u6d4b\u5de6\u4e0a\u3001\u5de6\u4e0b\u70b9\uff0c\u5c3e\u90e8\u5143\u7d20\u9884\u6d4b\u53f3\u4e0a\u53f3\u4e0b\u70b9\u3002**\u4e14\u6839\u636e\u9884\u6d4b\u51fa\u7684\u5934/\u5c3e\u5143\u7d20\u8fdb\u884c\u52a0\u6743\u5e73\u5747\u5f97\u52304\u4e2a\u9876\u70b9\u3002 \u9884\u6d4b\u8fc7\u7a0b \u7f51\u7edc\u8f93\u51fa\u4e00\u4e2a feature map \u6709 7 \u4e2a\u901a\u9053( score map\u3001vertex code\u3001vertex geo ) \u7b5b\u9009\u51fa score map \u503c\u9ad8\u4e8e threshole \u7684\u70b9\uff0c\u5f97\u5230 activation point (\u6fc0\u6d3b\u5143\u7d20) \u904d\u5386\u4e0a\u4e00\u6b65\u83b7\u5f97\u7684\u6240\u6709 activation point \uff0c\u5c06\u5728 feature map \u4e2d\u5de6\u53f3\u76f8\u90bb(X\u5750\u6807\u76f8\u5dee 1 \uff0cY\u5750\u6807\u76f8\u540c)\u7684 activation point \u8fdb\u884c\u5408\u5e76\uff0c\u5f97\u5230\u82e5\u5e72 region list \u904d\u5386\u4e0a\u4e00\u6b65\u5f97\u5230\u7684 region list \uff0c\u5c06 feature map \u4e2d\u4e0a\u4e0b\u76f8\u90bb\u7684 region list \u8fdb\u884c\u5408\u5e76\u6210\u4e3a region group \uff0c\u5177\u4f53\u4e0a\u4e0b\u76f8\u90bb\u89c4\u5219\u662f\u5982\u679c region list1 \u4e2d\u6240\u6709\u5143\u7d20\u5411\u4e0b\u5e73\u79fb\u4e00\u4e2a\u5355\u4f4d\u540e\uff0c\u548c\u5176\u4ed6\u7684 region list \u6709\u91cd\u5408\u70b9\uff0c\u5219\u8fdb\u884c\u5408\u5e76\uff0c\u5426\u5219\u4e0d\u8fdb\u884c\u5408\u5e76\u3002 \u904d\u5386\u6bcf\u4e2a region group \u4e2d\u7684\u70b9\uff0c\u6839\u636e vertex code \u8f93\u51fa\u7684\u503c\u627e\u5230\u5176\u4e2d\u7684\u5934/\u5c3e\u5143\u7d20\uff0c\u5934/\u5c3e\u9700\u8981\u6ee1\u8db3\u7684\u89c4\u5219\u662f vertex code \u4e2d\u7b2c\u4e00\u901a\u9053\u8f93\u51fa\u7684\u662f\u5426\u662f\u8fb9\u754c\u5143\u7d20\u7f6e\u4fe1\u5ea6\u7684\u503c\u9ad8\u4e8e\u9608\u503c\uff0c\u4e14 vertex code \u4e2d\u7684\u5206\u7c7b\u7f6e\u4fe1\u5ea6\u6ee1\u8db3\u9608\u503c(\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9608\u503c\u4e3a0-0.1\u8868\u793a\u5934\u90e8\u5143\u7d20,0.9-1\u8868\u793a\u5c3e\u90e8\u5143\u7d20) \u73b0\u5728\u786e\u5b9a\u4e86\u6bcf\u4e2a region group \u4e2d\u7684\u5934\u5c3e\u5143\u7d20\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6839\u636e\u5934\u90e8(\u5c3e\u90e8)\u5143\u7d20\u6240\u9884\u6d4b\u7684\u5de6\u4e0a(\u53f3\u4e0a)X\u3001\u5de6\u4e0a(\u53f3\u4e0a)Y\u3001\u5de6\u4e0b(\u53f3\u4e0b)X\u3001\u5de6\u4e0b(\u53f3\u4e0b)Y\u504f\u79fb\u91cf\u8fdb\u884c\u52a0\u6743\u5e73\u5747\uff0c\u786e\u5b9a\u6700\u7ec8\u9884\u6d4b\u76844\u4e2a\u9876\u70b9\u3002\u5177\u4f53\u7684\u52a0\u6743\u5e73\u5747\u7684\u65b9\u5f0f\u5982\u4e0b, n \u8868\u793a\u5f53\u524d\u6587\u672c\u57df\u5185\u8fb9\u754c\u5143\u7d20\u6570\u91cf\u3002 \u57fa\u4e8e\u5206\u5272\u7684\u6587\u5b57\u68c0\u6d4b \uff1a\u4f18\u70b9->\u5bf9\u4e0d\u540c\u5f62\u72b6\u6587\u672c\u7684\u68c0\u6d4b\u6548\u679c\u90fd\u6bd4\u8f83\u597d\uff1b\u7f3a\u70b9->\u540e\u5904\u7406\u8017\u65f6\u591a\uff0c\u91cd\u53e0\u6587\u672c\u6548\u679c\u5dee\u3002 pixelLink(18/01) \u00b6 \u8bba\u6587 | code \u6807\u6ce8\u89c4\u5219 \u5728\u6587\u672c\u5b9e\u4f8b\u5185\u90e8\u50cf\u7d20\u6807\u4e3a positive \uff0c\u5176\u4f59\u7684\u6807\u4e3a negative \u3002 \u7f51\u7edc\u7ed3\u6784 \u8f93\u51fa\u7ed3\u679c\u5171\u6709\u4e24\u90e8\u5206: text/no-test \u548c link \u9884\u6d4b\u3002\u53d7 SegLink \u542f\u53d1\uff0c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6709 8 \u4e2a\u90bb\u5c45\u3002\u7ed9\u5b9a\u4e00\u4e2a\u50cf\u7d20\u70b9\u4ee5\u53ca\u5b83\u7684\u4e00\u4e2a\u90bb\u5c45\u70b9\uff0c\u5982\u679c\u5b83\u4eec\u540c\u5c5e\u4e8e\u4e00\u4e2a\u6587\u672c\u5b9e\u4f8b\uff0c\u5219\u5b83\u4eec\u4e4b\u95f4\u7684 link \u4e3a positive \u3002 \u6700\u540e\u5f97\u5230 pixels \u548c links \uff0c\u7136\u540e\u6839\u636e link positive \u5c06 pixel positive \u8fdb\u884c\u8fde\u63a5\uff0c\u5f97\u5230 Cs(conected compoents) \u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u7684\u5c31\u662f\u6587\u672c\u5b9e\u4f8b\u3002\u4e24\u4e2a pixel \u9700\u8981\u8fde\u63a5\u7684\u524d\u63d0\u6761\u4ef6\uff1a two link \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a link positive \uff0e\u8fde\u63a5\u7684\u89c4\u5219\u91c7\u7528\u7684\u662f Disjoint set data structure (\u5e76\u67e5\u96c6)\u7684\u65b9\u6cd5\u3002 \u57fa\u4e8e\u4e0a\u8ff0 CCs \u96c6\u5408\uff0c\u76f4\u63a5\u6389\u8c03\u7528 opencv \u7684 minAreaRect \u63d0\u53d6\u5e26\u65b9\u5411\u4fe1\u606f\u7684\u77e9\u5f62\u6846\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u8fd8\u8981\u6839\u636e\u5728\u8bad\u7ec3\u96c6\u4e0a\u7edf\u8ba1\u7684\u4fe1\u606f\uff0c\u8fdb\u884c\u8fc7\u6ee4\uff0c\u53bb\u6389\u566a\u58f0\u3002 Loss\u51fd\u6570 L_pixel \u5206\u7c7b\u635f\u5931\u66f4\u91cd\u8981 \u03bb =2.0 W \u8868\u793a\u9884\u6d4b\u7684 pixel \u5206\u7c7b\u7684\u6743\u503c\u77e9\u9635\uff0c r \u8868\u793a\u8d1f\u6b63\u6837\u672c\u6bd4\u4f8b\uff0c\u8bba\u6587\u4e2d r=3 \uff0c S \u8868\u793a\u6bcf\u4e2a\u6587\u672c\u5b9e\u4f8b\u7684\u9762\u79ef \u5f53\u6587\u672c\u5b9e\u4f8b\u7684\u9762\u79ef\u6bd4\u8f83\u5927\uff0c\u5360\u7684 loss \u635f\u5931\u5c31\u4f1a\u88ab\u76f8\u5bf9\u62c9\u5c0f\uff0c\u6587\u672c\u5b9e\u4f8b\u7684\u9762\u79ef\u6bd4\u8f83\u5c0f\uff0c\u5360\u7684 loss \u635f\u5931\u5c31\u4f1a\u88ab\u76f8\u5bf9\u62c9\u5927\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u5c31\u662f\u4f7f\u5f97\u5c0f\u7684\u6587\u672c\u5b9e\u4f8b\u4e0d\u4f1a\u88ab\u5927\u7684\u6587\u672c\u5b9e\u4f8b\u7684 loss \u63a9\u76d6\u6389\uff0c\u4e5f\u53ef\u4ee5\u6709 loss \u56de\u4f20\u3002 \u540c\u65f6 pixel \u5206\u7c7b\u4efb\u52a1\u8fd8\u4f7f\u7528\u4e86 OHEM \u7b56\u7565\uff0c\u6bcf\u6b21\u56de\u4f20 S \uff08\u6b63\u6837\u672c\u5b9e\u4f8b\u50cf\u7d20\u548c\uff09+ r*S \uff08\u8d1f\u6837\u672c\u50cf\u7d20\u548c\uff09\u7684 loss \uff0c\u66f4\u52a0\u6709\u5229\u4e8e\u5206\u7c7b\u4efb\u52a1\u7684\u5b66\u4e60\u3002\u8fd9\u70b9\u6539\u8fdb\u6bd4 EAST \u4e2d\u6240\u6709\u50cf\u7d20\u7684 loss \u90fd\u56de\u4f20\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5206\u7c7b\u7ed3\u679c\uff0c\u800c\u4e0d\u662f\u50cf EAST \u90a3\u6837\uff0c\u4e00\u4e2a\u5b9e\u4f8b\u4e2d\u95f4\u7684\u50cf\u7d20\u5206\u7c7b\u7684\u597d\uff0c\u8fb9\u7f18\u7684\u50cf\u7d20\u5206\u7c7b\u7684\u5dee\u7684\u60c5\u51b5\u3002 L_link \u5206\u7c7b\u635f\u5931 SPCNet(18/11) \u00b6 \u8bba\u6587 | code \u7f51\u7edc\u7ed3\u6784 TCM\u6a21\u5757 FPN \u5f97\u5230\u7684\u6bcf\u4e00\u4e2a stage \u7684\u7279\u5f81\u7528\u84dd\u8272\u8868\u793a\uff0c\u7ecf\u8fc7\u4e0a\u9762\u4e00\u652f\u7684\u4e09\u4e2a\u5377\u79ef\u53ef\u4ee5\u76f4\u63a5\u9884\u6d4b\u6587\u5b57**\u5206\u5272**\u7ed3\u679c\uff0c\u800c 1x1 \u5377\u79ef\u4e4b\u540e\u7684\u5206\u5272\u56fe\u53ef\u4ee5\u4f5c\u4e3a attention \u4e58\u56de\u539f\u56fe\uff0c\u53bb\u589e\u5f3a\u68c0\u6d4b\u7279\u5f81\u4e2d\u7684\u6587\u5b57\u533a\u57df\uff0c\u5e76\u4e14\u4e2d\u95f4\u4ea7\u751f\u7684\u7279\u5f81\u53ef\u4ee5\u76f8\u52a0\u5f97\u5230**\u7eff\u8272\u7279\u5f81**(\u5c06\u68c0\u6d4b\u7684\u7279\u5f81\u548c\u5206\u5272\u7684\u7279\u5f81\u878d\u5408\u8d77\u6765\uff0c\u5f97\u5230\u66f4\u4e3a\u4e30\u5bcc\u7684\u7279\u5f81\u8868\u8fbe) RS\u6a21\u5757 \u4f5c\u7528:\u5bf9\u4e8e\u503e\u659c\u6587\u5b57\u6216\u8005\u5f2f\u66f2\u6587\u5b57 maskrcnn \u68c0\u6d4b\u6846\u5f97\u5206\u8f83\u4f4e(\u5927\u90e8\u5206\u90fd\u662f\u80cc\u666f)\uff0c\u4f46\u5728\u8bed\u4e49\u5206\u5272\u56fe\u4e0a\u5b83\u4eec\u5177\u6709\u8f83\u9ad8\u7684\u54cd\u5e94\uff1b\u4e00\u4e9b\u9519\u8bef\u6837\u672c\u5177\u6709\u8f83\u9ad8\u7684\u68c0\u6d4b\u5f97\u5206\uff0c\u4f46\u662f\u5728\u8bed\u4e49\u5206\u5272\u56fe\u4e0a\u7684\u54cd\u5e94\u8f83\u4f4e\u3002 \u4f5c\u8005\u8003\u8651\u5c06\u5b9e\u4f8b\u5206\u5272\u548c\u8bed\u4e49\u5206\u5272\u7684\u7ed3\u679c\u76f8\u878d\u5408\uff0c\u901a\u8fc7\u91cd\u65b0\u8ba1\u7b97\u5408\u7406\u7684\u5206\u6570\uff0c\u4ece\u800c\u964d\u4f4e\u9519\u8bef\u6837\u672c\u68c0\u6d4b\u3002 \u6807\u7b7e\u751f\u6210 PSENet(19/03) \u00b6 \u8bba\u6587 | code \u4f20\u7edf\u6587\u5b57\u68c0\u6d4b\u5bf9\u5f2f\u66f2\u6587\u5b57\u5757\u8868\u73b0\u4e0d\u597d\uff0c\u76f4\u63a5\u4f7f\u7528\u8bed\u4e49\u5206\u5272\u5f88\u96be\u5206\u79bb\u9760\u7684\u5f88\u8fd1\u7684\u6587\u672c\u3002 \u672c\u6587\u63d0\u51fa\u5148\u589e\u5927\u6587\u5b57\u5757\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u901a\u8fc7\u6e10\u8fdb\u6269\u5c55\u7b97\u6cd5\u6765\u6784\u5efa\u5b8c\u6574\u7684\u6587\u5b57\u5757 n\u4e2a\u4e8c\u503c\u56fe\u4ea7\u751f\u516c\u5f0f \u6838\u5fc3\u7b97\u6cd5:PSE(\u6e10\u8fdb\u5c3a\u5ea6\u6269\u5f20\u7b97\u6cd5:Progressive Scale Expansion) PSE \u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u5229\u7528 BFS \uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u7b97\u6cd5\uff0c\u9010\u6e10\u6269\u5c55 kernel \uff08\u5c31\u662f\u4e0b\u56fe\u4e2d\u7684\u767d\u8272\u7684\u90e8\u5206\uff0c\u9884\u6d4b\u7684\u6587\u672c\u884c\u533a\u57df\uff09\u7684\u5927\u5c0f\uff0c\u6700\u7ec8\u6269\u589e\u5230\u539f\u59cb\u6587\u672c\u884c\u5927\u5c0f\uff08\u5982 S3 \uff09 \u635f\u5931\u51fd\u6570 \u901a\u5e38\u6587\u672c\u5b9e\u4f8b\u53ef\u80fd\u53ea\u5360\u81ea\u7136\u573a\u666f\u5f88\u5c0f\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5982\u679c\u91c7\u7528\u4e8c\u8fdb\u5236\u4ea4\u53c9\u71b5\u635f\u5931\u4f1a\u9020\u6210\u9884\u6d4b\u7ed3\u679c\u66f4\u52a0\u504f\u5411\u4e8e\u975e\u6587\u672c\u533a\u57df(\u5373\u6587\u5b57\u548c\u975e\u6587\u5b57\u50cf\u7d20\u5341\u5206\u4e0d\u5e73\u8861)\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 dice coefficient \u635f\u5931\u51fd\u6570\uff1a PAN(19/08) \u00b6 \u8bba\u6587 | code |\u50cf\u7d20\u805a\u5408\u7f51\u7edc: PSENet \u7684\u6539\u8fdb\u7248 \u7f51\u7edc\u7ed3\u6784 FPEM\u6a21\u5757 FFM\u878d\u5408\u6a21\u5757 \u50cf\u7d20\u805a\u5408\u601d\u8def \u635f\u5931\u51fd\u6570 DB(19/11) \u00b6 \u8bba\u6587 | code |\u4e2d\u6587\u68c0\u6d4b\u4e0a DB \u4f18\u4e8e EAST \u5728\u57fa\u4e8e\u5206\u5272\u7684\u6587\u672c\u68c0\u6d4b\u7f51\u7edc\u4e2d\uff0c\u6700\u7ec8\u7684\u4e8c\u503c\u5316map\u90fd\u662f\u4f7f\u7528\u56fa\u5b9a\u9608\u503c\u6765\u83b7\u53d6\uff0c\u5e76\u4e14\u9608\u503c\u4e0d\u540c\u5bf9\u6027\u80fd\u5f71\u54cd\u8f83\u5927\u3002 \u672c\u6587\u4e2d\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u81ea\u9002\u5e94\u4e8c\u503c\u5316\uff0c\u4e8c\u503c\u5316\u9608\u503c\u7531\u7f51\u7edc\u5b66\u4e60\u5f97\u5230\uff0c\u5f7b\u5e95\u5c06\u4e8c\u503c\u5316\u8fd9\u4e00\u6b65\u9aa4\u52a0\u5165\u5230\u7f51\u7edc\u91cc\u4e00\u8d77\u8bad\u7ec3\uff0c\u8fd9\u6837\u6700\u7ec8\u7684\u8f93\u51fa\u56fe\u5bf9\u4e8e\u9608\u503c\u5c31\u4f1a\u975e\u5e38\u9c81\u68d2\u3002 \u7f51\u7edc \u6807\u7b7e\u751f\u6210 P\u56fe :\u6709\u6587\u5b57\u7684\u533a\u57df\u6709\u503c\uff0c\u65e0\u6587\u5b57\u533a\u57df\u9ed1\u8272\uff0c\u4e3a 0 . T\u56fe :\u53ea\u6709\u6587\u5b57\u8fb9\u754c\u7ebf\u6709\u503c\uff0c\u5176\u4ed6\u5730\u65b9\u4e3a 0 .\u5176\u5b9e\u5c31\u662f\u5c06\u6587\u672c\u6846\u5411\u5185+\u5411\u5916\u6536\u7f29\u548c\u6269\u62db d \u4e2a\u50cf\u7d20,\u7136\u540e\u8ba1\u7b97\u6536\u7f29\u6846\u548c\u6269\u5f20\u6846\u4e4b\u95f4\u5dee\u96c6\u90e8\u5206\u91cc\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5230\u539f\u59cb\u56fe\u50cf\u8fb9\u754c\u7684\u5f52\u4e00\u5316\u8ddd\u79bb\u3002 T \u56fe\u975e\u6587\u5b57\u8fb9\u754c\u662f\u7070\u8272\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u7edf\u4e00\u52a0\u4e86 0.3 \uff0c\u6240\u6709\u6700\u5c0f\u503c\u662f 0.3 \uff0c\u8fd9\u662f\u4e3a\u4e86\u540e\u9762\u6709\u7528\u7684. \u53ef\u5fae\u5206\u4e8c\u503c\u5316 \u7ed3\u5408\u6982\u7387\u56fe P_i,j \u548c\u9608\u503c\u56fe T_i,j \uff0c\u5c31\u80fd\u5f97\u5230\u4e8c\u503c\u56fe B^_i,j B \u56fe\u7684\u8ba1\u7b97\u548c T \u56fe 0.3 \u7684\u7528\u5904\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u533a\u5206(\u4f8b\u5982,\u975e\u6587\u5b57\u5757\u533a\u57df: x=p-T<0 \u8fd9\u6837\u62c9\u5230\u8d1f\u534a\u8f74\u66f4\u6709\u5229\u4e8e\u533a\u5206) \u635f\u5931\u51fd\u6570 Ls,Lb \u90fd\u662f binary cross-entropy (BCE) ,\u540c\u65f6\u4e3a\u4e86\u89e3\u51b3\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u4f7f\u7528 hard negative mining ,\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c 1:3 Lt \u662f\u9884\u6d4b\u7ed3\u679c\u548c\u6807\u7b7e\u4e4b\u95f4\u7684 L1 \u8ddd\u79bb\uff0c\u5176\u4e2d Rd \u662f\u5728\u81a8\u80c0 Gd \u5185\u50cf\u7d20\u7684\u7d22\u5f15\uff0c y* \u662f\u9608\u503c map \u7684\u6807\u7b7e\u3002 \u63a8\u7406\u6d41\u7a0b \u5728\u63a8\u7406\u65f6\u53ef\u4ee5\u91c7\u7528\u6982\u7387\u56fe\u6216\u8fd1\u4f3c\u4e8c\u503c\u56fe\u6765\u751f\u6210\u6587\u672c\u6846\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4f5c\u8005\u9009\u62e9\u4e86\u6982\u7387\u56fe\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b: \u4e8c\u503c\u56fe\u786e\u5b9a: \u4f7f\u7528**\u8fd1\u4f3c\u4e8c\u503c\u56feB**\uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef \u4f7f\u7528**\u6982\u7387\u56feP**\uff1a\u4f7f\u7528\u56fa\u5b9a\u9608\u503c 0.2 \u5c06\u6982\u7387\u56fe\u505a\u4e8c\u503c\u5316\u5f97\u5230\u4e8c\u503c\u5316\u56fe\uff0c\u7531\u4e8c\u503c\u5316\u56fe\u5f97\u5230\u6536\u7f29\u6587\u5b57\u533a\u57df(\u4f5c\u8005\u63a8\u8350) \u5c06\u6536\u7f29\u6587\u5b57\u533a\u57df\u6309 Vatti clipping \u7b97\u6cd5( PSENet )\u7684\u504f\u79fb\u7cfb\u6570 D' \u8fdb\u884c\u6269\u5f20\u5f97\u5230\u6700\u7ec8\u6587\u672c\u6846","title":"OCR\u65b9\u5411\u8bba\u6587\u89e3\u8bfb"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ctpn1609","text":"\u8bba\u6587 | \u4ee3\u7801 | RNN, Seq2Seq, Attention\u89e3\u6790 | LSTM\u89e3\u6790 \u7f51\u7edc\u7ed3\u6784 CTPN **\u53ea\u68c0\u6d4b\u6a2a\u5411\u6392\u5217**\u7684\u6587\u5b57\uff0c\u7c7b\u4f3c Faster R-CNN \uff0c\u4f46\u52a0\u5165\u4e86 LSTM Conv5 \u6bcf\u70b9\u8981\u7ed3\u5408\u5468\u56f4 3x3 \u533a\u57df\u7279\u5f81\u83b7\u5f97\u4e00\u4e2a\u957f\u5ea6\u662f 3x3xC \u7684\u7279\u5f81\u5411\u91cf\uff0c\u8f93\u51fa N*9C*H*W N*9C*H*W-->reshape-->(NH)*W*9C--> \u4ee5 Batch=NH \u4e14\u6700\u5927\u65f6\u95f4\u957f\u5ea6 T_max=W \u7684\u6570\u636e\u6d41\u8f93\u5165\u5230\u53cc\u5411 LSTM \uff0c\u5b66\u4e60\u6bcf\u4e00\u884c\u7684\u5e8f\u5217\u7279\u5f81\uff0c\u53cc\u5411 LSTM \u8f93\u51fa (NH)*W*256-->reshape-->N*256*H*W \u6700\u540e\u7684\u8f93\u51fa\u7279\u5f81\uff0c\u7279\u5f81\u65e2\u5305\u542b**\u7a7a\u95f4\u7279\u5f81**( CNN\u5b66\u4e60 )\uff0c\u4e5f\u5305\u542b**\u5e8f\u5217\u7279\u5f81(lstm\u5b66\u4e60)**\uff0c\u56e0\u4e3a\u6587\u5b57\u662f\u8fde\u7eed\u7684\uff1f \u7279\u5f81\u56fe: N*256*H*W \u2192 fc \u2192 N*512*H*W \u2192 \u7c7bRPN \u2192 text proposal(\u5efa\u8bae\u6846) \u8fb9\u754c\u6846\u56de\u5f52\u65b9\u5f0f \u7ed3\u679c\u5904\u7406 :\u4f7f\u7528 \u6587\u672c\u7ebf\u6784\u9020\u7b97\u6cd5 \u6765\u751f\u6210\u771f\u6b63\u7684\u68c0\u6d4b\u6846\u3002","title":"CTPN(16/09)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#r2cnn1706","text":"\u8bba\u6587 | code \u4e0d\u76f4\u63a5\u56de\u5f52\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6( -90~90 \u76f8\u540c\u77e9\u5f62\u76f8\u4f3c, 0~180 \u76f8\u4f3c)\uff0c\u659c\u6846\u56de\u5f52\u7528 (x1,y1,x2,y2,h) \u8868\u793a\uff1a \u987a\u65f6\u9488\u65b9\u5411\u4e24\u4e2a\u76f8\u90bb\u70b9\u5750\u6807\u548c\u9ad8\u6765\u5b9a\u4e49\u4e00\u4e2a\u503e\u659c\u77e9\u5f62\u6846 \uff0c\u56de\u5f52\u8fd9\u4e94\u4e2a\u503c\u5c31\u5bb9\u6613\u56de\u5f52\u4e86\u3002 \u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u65cb\u8f6c\u6587\u672c\u7684\u68c0\u6d4b\uff0c\u4e3b\u8981\u662f\u5728Faster RCNN\u7684\u7b97\u6cd5\u57fa\u7840\u4e0a\u505a\u4e86\u4e00\u4e9b\u4fee\u6539 \u901a\u8fc7 RPN \u7f51\u7edc\uff0c\u5f97\u5230\u6b63\u6846\u7684Proposal\u3002\u7531\u4e8e\u5f88\u591a\u6587\u5b57\u662f\u5f88\u5c0f\u7684\uff0c\u56e0\u6b64\u5c06Faster RCNN\u4e2d\u7684anchor scale (8,16,32) \u6539\u4e3a (4,8,16,32) \u3002\u5b9e\u9a8c\u8bc1\u660e\u589e\u52a0\u4e86\u5c0f\u7684\u5c3a\u5ea6\u540e\u68c0\u6d4b\u6548\u679c\u660e\u663e\u63d0\u5347\u3002 ROI Pooling \u65f6\u7684\u5c3a\u5bf8\u9664\u4e86 7*7 \u5916\uff0c\u8fd8\u6709\u4e24\u79cd\u957f\u5bbd\u4e0d\u4e00\u81f4\u7684\u5c3a\u5bf8\uff1a 3*11 \u548c 11*3 \uff0c\u8fd9\u79cd\u8bbe\u7f6e\u7684\u7528\u610f\u4e5f\u975e\u5e38\u660e\u663e\uff0c\u5c31\u662f\u4e3a\u4e86\u89e3\u51b3\u6c34\u5e73\u548c\u7ad6\u76f4\u957f\u6587\u672c\u7684\u68c0\u6d4b\u3002\u7136\u540e\u5bf9\u4e8e\u63d0\u53d6\u5230\u7684ROI\u7279\u5f81\u505acancat\u64cd\u4f5c\u8fdb\u884c\u878d\u5408\u4f5c\u4e3a\u540e\u7eed\u9884\u6d4b\u652f\u8def\u7684\u8f93\u5165\u3002 \u9884\u6d4b\u8f93\u51fa\u67093\u4e2a\u652f\u8def \u7b2c\u4e00\u4e2a\u652f\u8def\u662f**\u6709\u65e0\u6587\u672c\u7684\u4e8c\u5206\u7c7b**\uff0c\u8fd9\u4e2a\u548c\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u76ee\u6807\u5206\u7c7b\u7c7b\u4f3c\u3002 \u7b2c\u4e8c\u4e2a\u652f\u8def\u662f**\u6c34\u5e73\u6846\uff08axis-aligned box\uff09\u7684\u9884\u6d4b**\uff0c\u8fd9\u4e2a\u548c\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u6846\u9884\u6d4b\u4e00\u6837\u3002 \u7b2c\u4e09\u4e2a\u652f\u8def\u65f6**\u503e\u659c\u6846\uff08inclined box\uff09\u7684\u9884\u6d4b**\uff0c\u8fd9\u90e8\u5206\u662f\u8fd9\u7bc7\u6587\u7ae0\u7684\u4eae\u70b9\uff0c\u800c\u4e14\u8be5\u652f\u8def\u540e\u9762\u8ddf\u4e00\u4e2a\u659c\u6846NMS\u8fdb\u884c\u5904\u7406\u5f97\u5230\u6700\u540e\u7ed3\u679c\u3002 \u867d\u7136\u503e\u659c\u6846\u652f\u8def\u4e5f\u80fd\u9884\u6d4b\u6c34\u5e73\u6846\uff0c\u4f46\u662f\u4f5c\u8005\u8ba4\u4e3a\u7b2c\u4e8c\u4e2a\u652f\u8def\u7684\u5b58\u5728\u5bf9\u6700\u540e\u7ed3\u679c\u5e2e\u52a9\u8f83\u5927\u3002 \u91c7\u7528\u503e\u659c\u6846\u7684NMS\u7b97\u6cd5\u5904\u7406(a)\u4e2d\u7684\u9884\u6d4b\u6846\u540e\u5f97\u5230\u7684\u7ed3\u679c\uff0c\u53ef\u4ee5\u770b\u5230\u7ed3\u679c\u6bd4\u8f83\u597d\uff0c\u57fa\u4e8e\u503e\u659c\u6846\u7684NMS\u7b97\u6cd5\u548c\u4f20\u7edf\u7684\u57fa\u4e8e\u6c34\u5e73\u77e9\u5f62\u6846\u7684NMS\u7b97\u6cd5\u5dee\u522b\u4e0d\u5927\uff0c\u53ea\u4e0d\u8fc7\u8ba1\u7b97\u5bf9\u8c61\u6362\u6210\u4e24\u4e2a\u503e\u659c\u6846 \u635f\u5931\u51fd\u6570(3\u90e8\u5206) \u6709\u65e0\u6587\u672c\u7684\u4e8c\u5206\u7c7b\u635f\u5931Lcls \u6c34\u5e73\u6846\u7684\u56de\u5f52\u635f\u5931Lreg(vi,vi*)\u3002 \u503e\u659c\u6846\u7684\u56de\u5f52\u635f\u5931Lreg(ui,ui*)\u3002 \u540e\u9762\u4e24\u90e8\u5206\u90fd\u662f\u91c7\u7528\u76ee\u6807\u68c0\u6d4b\u4e2d\u5e38\u7528\u7684smooth L1\u635f\u5931\u51fd\u6570\uff0c\u6240\u4ee5\u635f\u5931\u51fd\u6570\u65b9\u9762\u6ca1\u6709\u592a\u5927\u7684\u6539\u52a8\u3002","title":"R2CNN(17/06)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#seglink1703","text":"| code | SSD \u6539\u8fdb \u76f4\u63a5\u56de\u5f52\u65cb\u8f6c\u8fb9\u6846\u65cb\u8f6c\u89d2\u5ea6\u96be\u56de\u5f52\uff0c( -90~90 \u76f8\u540c\u77e9\u5f62\u76f8\u4f3c, 0~180 \u76f8\u4f3c) \u4e0d\u80fd\u68c0\u6d4b\u5f88\u5927\u7684\u6587\u672c\uff0c\u8fd9\u662f\u56e0\u4e3a link \u4e3b\u8981\u662f\u7528\u4e8e\u8fde\u63a5\u76f8\u90bb\u7684 segments \uff0c\u800c\u4e0d\u80fd\u7528\u4e8e\u68c0\u6d4b\u76f8\u8ddd\u8f83\u8fdc\u7684\u6587\u672c\u884c \u4e0d\u80fd\u68c0\u6d4b\u5f62\u53d8\u6216\u8005\u66f2\u7ebf\u6587\u672c\uff0c\u8fd9\u662f\u56e0\u4e3a segments combining \u7b97\u6cd5\u5728\u5408\u5e76\u7684\u65f6\u5019\u91c7\u7528\u7684\u662f\u76f4\u7ebf\u62df\u5408\uff0e\u8fd9\u91cc\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539\u5408\u5e76\u7b97\u6cd5\uff0c\u6765\u68c0\u6d4b\u53d8\u5f62\u6216\u66f2\u7ebf\u6587\u672c \u68c0\u6d4b\u8fc7\u7a0b \u9996\u5148\u662f\u68c0\u6d4b\u751f\u6210\u4e00\u4e2a\u4e00\u4e2a\u7684 segment \uff08\u5207\u7247\uff09\uff0c\u5982\u4e0a\u56fe\u9ec4\u8272\u6846\uff0c\u8fd9\u4e9b segment \uff08\u5207\u7247\uff09\u662f\u6587\u672c\u884c\uff08\u6216\u5355\u8bcd\uff09\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5b57\u7b26\uff0c\u6216\u8005\u662f\u4e00\u4e2a\u5355\u8bcd\uff0c\u6216\u8005\u662f\u51e0\u4e2a\u5b57\u7b26 \u901a\u8fc7link\uff08\u94fe\u63a5\uff09\u5c06\u5c5e\u4e8e\u540c\u4e00\u4e2a\u6587\u672c\u884c\uff08\u6216\u8005\u5355\u8bcd\uff09\u7684 segment \uff08\u5207\u7247\uff09\u8fde\u63a5\u8d77\u6765\uff0c\u5982\u4e0a\u56fe\u7eff\u8272\u7ebf\u6761\u3002 link \uff08\u94fe\u63a5\uff09\u662f\u5728\u4e24\u4e2a\u6709\u91cd\u53e0 segment \u7684\u4e2d\u5fc3\u70b9\u8fdb\u884c\u76f8\u8fde \u901a\u8fc7\u5408\u5e76\u7b97\u6cd5\uff0c\u5c06\u8fd9\u4e9b segment \uff08\u5207\u7247\uff09\u3001 link \uff08\u94fe\u63a5\uff09\u5408\u5e76\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u6587\u672c\u884c\uff0c\u5f97\u51fa\u5b8c\u6574\u6587\u672c\u884c\u7684**\u68c0\u6d4b\u6846\u4f4d\u7f6e\u548c\u65cb\u8f6c\u89d2\u5ea6**\u3002 \u6a21\u578b\u7ed3\u6784 6\u4e2a \u4e0d\u540c\u5c3a\u5ea6\u7684\u7279\u5f81\u56fe\u4e0a\u5f97\u5230\u5404\u81ea\u7684 segment \u548c link \uff0c \u5927feature\u68c0\u6d4b\u5c0f\u76ee\u6807\uff0c\u5c0ffeature\u68c0\u6d4b\u5927\u76ee\u6807 \u6ce8\u610f\u8fd9\u91cc\u6bcf\u4e2a feature map \u7684\u6bcf\u4e2a\u4f4d\u7f6e**\u53ea\u91c7\u7528\u4e86\u4e00\u4e2aaspect ratio=1\u7684default box**(\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u4ea7\u751f\u4e00\u4e2a anchor )\uff0c\u800cSSD\u4e2d\u662f\u4e00\u7cfb\u5217(1, 2, 3, \u00bd, \u2153)\uff1b\u5173\u4e8e default box \u7684 scale size \uff0c\u672c\u6587: a_l = \u03b3 w_i/w_l , where \u03b3 = 1.5,\u8f93\u5165\u56fe\u50cf\u5bbdw_i,\u5f53\u524dfeature\u5bbdw_l \uff0cssd\u4e2d\u662f\u4eba\u4e3a\u8bbe\u7f6e\u7684\u3002 segment\u68c0\u6d4b(\u589e\u52a0\u4e86\u89d2\u5ea6\u56de\u5f52) \uff1a\u6bcf\u4e2a\u7279\u5f81\u56fe\u7684 segment \u5bf9\u5e94\u7684\u8f93\u51fa\u901a\u9053\u662f 7 :\u5176\u4e2d\u4e24\u4e2a\u8868\u793a segment \u662f\u5426\u4e3a\u6587\u5b57\u7684\u7f6e\u4fe1\u5ea6\u503c\u4e3a (0,1) \uff0c\u5269\u4e0b\u7684\u4e94\u4e2a\u4e3a segment \u76f8\u5bf9\u4e8e\u5bf9\u5e94\u4f4d\u7f6e\u7684 default box \u7684\u4e94\u4e2a\u504f\u79fb\u91cf [center_x,center_y,w,h,\u6846\u7684\u65cb\u8f6c\u89d2\u5ea6\u03b8] \uff0c\u9884\u6d4b offsets (\u504f\u79fb\u91cf): [\u0394x, \u0394y, \u0394w, \u0394h,\u0394\u03b8] link\u68c0\u6d4b \u5c42\u5185\u94fe\u63a5\u68c0\u6d4b\uff1a\u8868\u793a\u540c\u4e00\u7279\u5f81\u5c42\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u9884\u6d4b\u4e00\u4e2a segment \u6240\u4ee5\u53ea\u9700\u8981\u8003\u8651\u5f53\u524d segment \u4e0e 8\u90bb\u57df \u5185\u7684 segment \u7684\u8fde\u63a5\u72b6\u51b5\uff0c\u6bcf\u4e2a link \u6709\u4e24\u4e2a\u5206\u6570\uff1a\u6b63\u5206\u3001\u8d1f\u5206 \u6b63\u5206\u8868\u793a\u4e8c\u8005\u5c5e\u4e8e\u540c\u4e00\u4e2a\u6587\u672c\uff08\u5e94\u8be5\u8fde\u63a5\uff09 \u8d1f\u5206\u8868\u793a\u4e8c\u8005\u5c5e\u4e8e\u4e0d\u540c\u6587\u672c\uff08\u5e94\u8be5\u65ad\u5f00\u8fde\u63a5\uff09 \u6240\u4ee5\uff0c\u6bcf\u4e2a segment \u7684 link \u5e94\u8be5\u662f**2*8=16**\u7ef4\u7684\u5411\u91cf \u8de8\u5c42\u94fe\u63a5\u68c0\u6d4b:\u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3\u540c\u4e00\u6587\u672c\u7684 segment \u5728\u4e0d\u540c\u5c42\u88ab\u68c0\u6d4b\u5230\uff0c\u9020\u6210\u91cd\u590d\u68c0\u6d4b\u3001\u5197\u4f59\u7684\u95ee\u9898\uff1b \u4e3b\u8981\u4f5c\u7528\u4e8e\u8fde\u7eed\u4e24\u5c42\u8f93\u51fa\u7279\u5f81\u56fe( ocnv4_3 \u4e0d\u4e0e\u5176\u4ed6\u7279\u5f81\u5c42\u8fde\u7eed\uff0c\u4e0d\u505a cross-layer-links )\uff0c\u5bf9\u4e8e feature map \u7684\u6bcf\u4e2a\u4f4d\u7f6e\u9700\u8981\u9884\u6d4b**2*4=8**,\u8fd9\u91cc \uff14 \u8868\u793a\u7684\u662f\u4e0e\u4e0a\u4e00\u5c42\u7684 \uff14 \u4e2a\u90bb\u57df\uff0c\u5c31\u662f\u5bf9\u5e94\u524d\u4e00\u5c42\u7684\u611f\u53d7\u91ce \u603b\u7ed3\u6765\u8bf4\uff1a \u5bf9\u4e8econv4_3\u5c42\uff0c\u5176link\u8f93\u51fa\u7684\u7ef4\u5ea6\u4e3a2x8=16\uff1b\u5bf9\u4e8econv7, conv8_2, conv9_2, conv10_2, conv11\u5176\u8f93\u51fa\u7684link\u7ef4\u5ea6\u4e3a2x8+2x4=24 \u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6 \u5408\u5e76\u7b97\u6cd5 \u9996\u5148\u901a\u8fc7\u4eba\u5de5\u8bbe\u5b9a\u7684 \u03b1 \u548c\u03b2 (\u8fd9\u4e24\u4e2a\u503c\u662f\u91c7\u7528\u7f51\u683c\u641c\u7d22\u627e\u5230\u6700\u4f18\uff0c\u8fd9\u91cc\u91c7\u7528 0.1step \u8fdb\u884c\u8d85\u53c2\u6570\u7a77\u4e3e\u641c\u7d22)\uff0c\u5bf9\u7f51\u7edc\u9884\u6d4b\u7684 segments \u548c links \u8fdb\u884c\u6ee4\u9664 \u5c06\u6bcf\u4e2a segment \u770b\u6210 node \uff0c link \u770b\u6210 edge \uff0c\u5efa\u7acb\u56fe\u6a21\u578b\uff0c\u518d\u7528 DFS ( \u6df1\u5ea6\u4f18\u5148\u641c\u7d22 )\u627e\u5230\u8fde\u901a\u5206\u91cf\uff0c\u6bcf\u4e2a\u8fde\u901a\u5206\u91cf\u5305\u542b\u4e00\u7cfb\u5217 segments (\u7528B\u8868\u793a)\uff0c\u7136\u540e\u901a\u8fc7\u4e0b\u9762\u6d41\u7a0b\u5f97\u5230\u68c0\u6d4b\u6846\u548c\u89d2\u5ea6\u3002 \u8bad\u7ec3 \u5982\u4f55\u751f\u6210 segments \u548c links \u7684 ground truth \uff0c\u5373 default box \u7684 label \uff0c\u504f\u79fb (x, y, w, h, \u03b8) \uff0c \u5c42\u5185link \u53ca \u8de8\u5c42link\u7684label \u5982\u4f55\u786e\u5b9a default box \u4e3a\u6b63\u6837\u672c\u8fd8\u662f\u8d1f\u6837\u672c\u5462\uff1f\u56fe\u50cf\u53ea\u6709\u4e00\u4e2a\u6587\u672c\u884c\u6ee1\u8db3\u4e0b\u9762\u6761\u4ef6\u5c31\u662f\u6b63\u6837\u672c\uff0c\u5f53\u6709\u591a\u4e2a\u6587\u672c\u884c\u65f6\u6b63\u6837\u672c\u8fd8\u9700\u4e0e a_l/h \u6700\u5c0f\u7684\u6587\u672c\u884c\u5339\u914d\u3002 default box \u7684\u4e2d\u5fc3\u5728\u5f53\u524d\u6587\u672c\u884c\u5185\uff1b default box \u7684 size \u4e0e\u6587\u672c\u884c\u7684\u9ad8\u5ea6\u6bd4\u5fc5\u987b\u6ee1\u8db3\uff1a max(a_l/h,h/a_l)<=1.5 \u5982\u4f55\u786e\u5b9a\u6b63\u6837\u672c\u7684 offset \u504f\u7f6e\uff1f \u5982\u4f55\u786e\u5b9a within-layer link \u548c cross-layer link \u7684 label \u662f positive \u8fd8\u662f negative ? \u4e24\u4e2a default boxes connect it \u4e24\u4e2a default box \u5fc5\u987b\u5c5e\u4e8e\u7edf\u4e00\u6587\u672c\u884c \u76ee\u6807\u51fd\u6570","title":"SegLink(17/03)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#textboxes1611","text":"TextBoxes\u53ea\u53ef\u4ee5\u68c0\u6d4b\u6c34\u5e73\u6587\u672c \u8bba\u6587 | code |ssd\u6539\u8fdb \u591a\u5c3a\u5ea6\u8f93\u5165( 300*300, 700*700, 300*700, 500*700, and 1600*1600 )\uff0c\u4ee5\u9632\u6b62\u8fc7\u957f\u6587\u672c\u7684\u6846\u8d85\u8fc7\u4e86\u9ed8\u8ba4\u6846\u7684\u6700\u5927\u6bd4\u4f8b\uff0c\u4ece\u800c\u5bfc\u81f4\u68c0\u6d4b\u4e0d\u5230\u7684\u60c5\u51b5\u3002 \u8bba\u6587\u4e2d\u8bbe\u8ba1\u4e86**\u957f\u5bbd\u6bd4\u5206\u522b\u662f1\u30012\u30013\u30015\u30017\u300110\u7684default box**(\u5373\u957f\u6761\u5f62\u7684 default box \uff0c\u9002\u5e94\u957f\u6587\u672c)\uff0c\u4f46\u5782\u76f4\u65b9\u5411\u7684\u6587\u672c\u5c31\u68c0\u6d4b\u4e0d\u51fa\u6765\u4e86\u3002\u4f5c\u8005\u4e3a\u89e3\u51b3\u6c34\u5e73\u65b9\u5411\u6846\u6392\u5217\u5bc6\u96c6\u548c\u5782\u76f4\u65b9\u5411\u6846\u6392\u5217\u7a00\u758f\u95ee\u9898\uff0c\u628a\u6c34\u5e73\u65b9\u5411\u7684\u6846**\u5168\u90e8\u5411\u4e0b\u5e73\u79fb\u534a\u4e2a\u533a\u57df\u7684\u5355\u4f4d**\uff0c\u8fd9\u6837\u5c31\u6709 12\u4e2aanchor \u5f15\u5165 text-box layers \u5c42\uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u7279\u5f81\u56fe\u518d\u7528 1x5 \u7684\u5377\u79ef\u6838\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c\uff0c\u4ee3\u66ff SSD \u7684 3x3 \u5377\u79ef\uff0c\u8fd9\u5c31\u4ea7\u751f\u4e86\u77e9\u5f62\u611f\u53d7\u91ce\uff0c\u66f4\u9002\u5408\u7528\u4e8e\u6587\u5b57\u68c0\u6d4b\u3002 \u8f93\u51fa\u7ef4\u5ea6\uff0c\u6bcf\u4e2a\u4f4d\u7f6e 12anchors \u2192 12*(2+4) \uff0c 2:\u6587\u672c/\u975e\u6587\u672c \uff0c 4:(x,y,w,h) \u635f\u5931\u51fd\u6570:","title":"Textboxes(16/11)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#textboxes1801","text":"\u8bba\u6587 | code TextBoxes++\u53ef\u4ee5\u68c0\u6d4b\u591a\u89d2\u5ea6\u7684\u6587\u672c \uff0c\u4e3b\u8981\u8ba8\u8bba\u4e86\u6587\u672c\u6846\u7684\u4e24\u79cd\u8868\u793a\u65b9\u5f0f\uff0c\u8ba4\u4e3a**\u56db\u4e2a\u5750\u6807\u7684\u8868\u793a**\u66f4\u4f18 \u987a\u65f6\u9488\u7684\u56db\u4e2a\u70b9\u5750\u6807\u8868\u793a: \uff08x1,y1,x2,y2,x3,y3,x4,y4\uff09 R2CNN \u7684\u6846\u8868\u793a:\u987a\u65f6\u9488\u76f8\u90bb\u4e24\u4e2a\u5750\u6807\u70b9\u548c\u9ad8 (x1,y1,x2,y2,h) \u7f51\u7edc\u7ed3\u6784(\u6ca1\u5565\u53d8\u5316) TextBoxes\u6539\u8fdb\u70b9 \u957f\u5bbd\u6bd4: 1\u30012\u30013\u30015\u30011/2\u30011/3\u30011/5 \uff0c\u8fd9\u6837\u5c31\u517c\u987e\u4e86\u5782\u76f4\u6587\u672c\u7684\u68c0\u6d4b\u3002 \u5c06 1*5 \u7684\u5377\u79ef\u6838\u6539\u4e3a 3*5 \u7528\u6765\u751f\u6210 text box layers \uff1a\u5bf9\u5bbd\u6587\u672c\u4e5f\u53cb\u597d\u3002 \u6539\u8fdb\u7f51\u7edc\u8f93\u51fa\uff0c\u7528\u4e8e\u9002\u5e94\u4e8e\u591a\u89d2\u5ea6\u6587\u672c\u3002 \u7eff\u8272\u865a\u7ebf\u8868\u793a\u4e0e ground truth \u5339\u914d\u7684 default box \u9ec4\u8272\u6846\u8868\u793a ground truth \u7ea2\u8272\u7bad\u5934\u8868\u793a\u56de\u5f52\u7684\u65b9\u5411 \u9ed1\u8272\u6846\u8868\u793a\u672a\u5339\u914d\u5230\u771f\u503c\u7684 default box \uff0c \u7eff\u8272\u5b9e\u7ebf\u6846\u8868\u793a\u5bf9\u5e94\u4e0e ground truth \u7684\u5916\u63a5\u77e9\u5f62\u6846\u3002 offset \u504f\u7f6e\u8f93\u51fa \u56db\u70b9\u7684\u504f\u7f6e\u8f93\u51fa \u76f8\u90bb\u4e24\u70b9+\u9ad8\u7684\u504f\u7f6e\u8f93\u51fa \u6587\u672c\u5b9a\u4f4d\u4e4b\u540e\u6dfb\u52a0\u4e00\u4e2a\u6587\u5b57\u8bc6\u522b(\u7528\u7684CRNN\u7f51\u7edc)\u7684\u8fc7\u7a0b\uff0c\u6839\u636e\u6587\u672c\u8bc6\u522b\u7684\u6548\u679c\uff0c\u53cd\u9988\u7ed9detection\u7f51\u7edc\uff0c\u5e2e\u52a9\u66f4\u597d\u7684detection\u3002\u6bd4\u5982\u786e\u5b9a\u4e0d\u662f\u6587\u5b57\u7684\u90e8\u5206\uff0c\u53ef\u4ee5\u4ece\u7ed3\u679c\u4e2d\u5220\u9664\uff0c \u7528\u4e8e\u8f85\u52a9\u8bad\u7ec3 \u3002 \u635f\u5931\u51fd\u6570","title":"TextBoxes++(18/01)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#east1704","text":"\u8bba\u6587 | tensorflow code | pytorch code \u7ecf\u8fc7 backbone \u540e\u62bd\u53d6\u4e0d\u540c level \u7684 feature map (\u4ed6\u4eec\u7684\u5c3a\u5bf8\u5206\u522b\u662f input_image \u7684 1/32,1/16,1/8,1/4 )\uff0c\u8fd9\u6837 ealy stage \u53ef\u7528\u4e8e\u9884\u6d4b\u5c0f\u7684\u6587\u672c\u884c\uff0c late-stage \u53ef\u7528\u4e8e\u9884\u6d4b\u5927\u7684\u6587\u672c\u884c\uff0e \u5408\u5e76\u7279\u5f81\u56fe\u5e76\u8f93\u51fa\u7ed3\u679c\uff1a \u8f93\u51fa\u7ed3\u679c\u89e3\u91ca\uff1a \u6846\u7684\u5f97\u5206\uff0c\u8bba\u6587\u4e2d\u7528 score map \u8868\u793a angle \u51e0\u4f55\u56fe \u8f93\u51fa RBOX (\u56db\u901a\u9053\u51e0\u4f55\u56fe)\uff1a \u56db\u4e2alocation\u56fe(\u56db\u901a\u9053\u8868\u793a)(\u6bcf\u4e2a\u50cf\u7d20\u7684top\u504f\u79fb\uff0cright\u504f\u79fb\uff0cbottom\u504f\u79fb\uff0cleft\u504f\u79fb\u7ec4\u6210(d)) QUAD : 8 \u4e2a\u901a\u9053\u5206\u522b\u8868\u793a\u4ece\u77e9\u5f62\u7684\u56db\u4e2a\u9876\u70b9\u5230\u50cf\u7d20\u4f4d\u7f6e\u7684\u5750\u6807\u504f\u79fb\uff0c\u7531\u4e8e\u6bcf\u4e2a\u8ddd\u79bb\u504f\u79fb\u91cf\u90fd\u5305\u542b\u4e24\u4e2a\u6570\u5b57\uff08\u0394xi;\u0394yi\uff09 Loss \u51fd\u6570 Ls ( score map )\u7684 loss \u8ba1\u7b97 RBOX \u7684\u51e0\u4f55\u56fe loss \u8ba1\u7b97:\u5305\u542b\u56db\u4e2a locatioin \u56fe\u7684\u635f\u5931( L_AABB )+ angle \u56fe\u7684\u635f\u5931 L_\u03b8 QUAD \u7684 loss \u8ba1\u7b97:\u4f7f\u7528\u5f52\u4e00\u5316\u7684 smooth l1 loss \u4f7f\u7528 locality NMS \u904d\u5386\u6bcf\u4e2a\u9884\u6d4b\u7684\u6846\uff0c\u7136\u540e\u6309\u7167\u4ea4\u96c6\u5927\u4e8e\u67d0\u4e2a k \u5c31\u5408\u5e76\u76f8\u90bb\u7684\u4e24\u4e2a\u6846\u3002\u5c0f\u95ee\u9898:\u4e3a\u4ec0\u4e48\u8981\u5408\u5e76\u6846\uff1f \u6bcf\u4e2a\u50cf\u7d20\u90fd\u8981\u9884\u6d4b\u56db\u4e2a\u8ddd\u79bb(\u5373\u4e00\u4e2a\u6846)\uff0c\u6240\u4ee5\u4e00\u4e2a\u76ee\u6807\u6709\u51e0\u767e\u4e0a\u5343\u4e2a\u6846\u90fd\u662f\u91cd\u5408\u7684\uff0c\u6240\u4ee5\u8981\u5408\u5e76\u3002 \u5982\u4f55\u5408\u5e76\uff1f \u901a\u8fc7\u4e24\u4e2a\u7ed9\u5b9a\u56db\u8fb9\u5f62\u7684\u5206\u6570\u8fdb\u884c\u52a0\u6743\u5e73\u5747 \u3002 \u5408\u5e76\u5b8c\u540e\u518d\u6309\u7167\u6b63\u5e38 NMS \u6d88\u9664\u4e0d\u5408\u7406\u7684\u6846\u5c31\u884c\u4e86\u3002 \u7f3a\u70b9\uff1aEAST\u5728\u957f\u6587\u672c\u9884\u6d4b\u6548\u679c\u8f83\u5dee","title":"East(17/04 \u50cf\u7d20\u7ea7\u7684\u56de\u5f52)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#advanced-east","text":"code EAST\u7b97\u6cd5\u7684\u6539\u8fdb\u7248\uff0c\u5bf9EAST\u5728**\u957f\u6587\u672c\u68c0\u6d4b\u5730\u65b9\u7684\u7f3a\u9677**\u8fdb\u884c\u4e86\u91cd\u5927\u6539\u8fdb\uff0c\u4f7f\u957f\u6587\u672c\u9884\u6d4b\u66f4\u52a0\u51c6\u786e\u3002 score map \uff1a\u548c EAST \u4e00\u6837\uff0c\u70b9\u5728\u6587\u672c\u5185\u7684\u7f6e\u4fe1\u5ea6\uff1b vertex code \uff1a\u7b2c\u4e00\u901a\u9053\u8868\u793a\u662f\u5426\u662f\u8fb9\u754c\u5143\u7d20\u7684\u7f6e\u4fe1\u5ea6\u3002\u7b2c\u4e8c\u901a\u9053\u8868\u793a\u662f\u5934/\u5c3e\u5143\u7d20\uff0c0\u8868\u793a\u5934\u90e8\u5143\u7d20\uff0c1\u8868\u793a\u5c3e\u90e8\u5143\u7d20\uff1b vertex geo \uff1a4\u901a\u5206\u522b\u4ee3\u8868\u5de6\u4e0a(\u53f3\u4e0a)X\u3001\u5de6\u4e0a(\u53f3\u4e0a)Y\u3001\u5de6\u4e0b(\u53f3\u4e0b)X\u3001\u5de6\u4e0b(\u53f3\u4e0b)Y\uff0c\u8fd9\u91cc\u4e0d\u662f\u771f\u6b63\u7684X\\Y\u5750\u6807\uff0c\u800c\u662f\u6839\u636e\u5f53\u524d\u70b9\u5750\u6807\u7684X/Y\u504f\u79fb\u91cf( \u4e3b\u8981\u662f\u4e3a\u4e86\u89e3\u51b3East\u611f\u53d7\u91ce\u95ee\u9898 )\uff1b**AdvancedEast\u4e0d\u518d\u7528\u6240\u6709\u7684\u70b9\u8fdb\u884c\u9884\u6d4b\u9876\u70b9\u4e86\uff0c\u800c\u662f\u7528\u5934\u90e8\u5143\u7d20\u9884\u6d4b\u5de6\u4e0a\u3001\u5de6\u4e0b\u70b9\uff0c\u5c3e\u90e8\u5143\u7d20\u9884\u6d4b\u53f3\u4e0a\u53f3\u4e0b\u70b9\u3002**\u4e14\u6839\u636e\u9884\u6d4b\u51fa\u7684\u5934/\u5c3e\u5143\u7d20\u8fdb\u884c\u52a0\u6743\u5e73\u5747\u5f97\u52304\u4e2a\u9876\u70b9\u3002 \u9884\u6d4b\u8fc7\u7a0b \u7f51\u7edc\u8f93\u51fa\u4e00\u4e2a feature map \u6709 7 \u4e2a\u901a\u9053( score map\u3001vertex code\u3001vertex geo ) \u7b5b\u9009\u51fa score map \u503c\u9ad8\u4e8e threshole \u7684\u70b9\uff0c\u5f97\u5230 activation point (\u6fc0\u6d3b\u5143\u7d20) \u904d\u5386\u4e0a\u4e00\u6b65\u83b7\u5f97\u7684\u6240\u6709 activation point \uff0c\u5c06\u5728 feature map \u4e2d\u5de6\u53f3\u76f8\u90bb(X\u5750\u6807\u76f8\u5dee 1 \uff0cY\u5750\u6807\u76f8\u540c)\u7684 activation point \u8fdb\u884c\u5408\u5e76\uff0c\u5f97\u5230\u82e5\u5e72 region list \u904d\u5386\u4e0a\u4e00\u6b65\u5f97\u5230\u7684 region list \uff0c\u5c06 feature map \u4e2d\u4e0a\u4e0b\u76f8\u90bb\u7684 region list \u8fdb\u884c\u5408\u5e76\u6210\u4e3a region group \uff0c\u5177\u4f53\u4e0a\u4e0b\u76f8\u90bb\u89c4\u5219\u662f\u5982\u679c region list1 \u4e2d\u6240\u6709\u5143\u7d20\u5411\u4e0b\u5e73\u79fb\u4e00\u4e2a\u5355\u4f4d\u540e\uff0c\u548c\u5176\u4ed6\u7684 region list \u6709\u91cd\u5408\u70b9\uff0c\u5219\u8fdb\u884c\u5408\u5e76\uff0c\u5426\u5219\u4e0d\u8fdb\u884c\u5408\u5e76\u3002 \u904d\u5386\u6bcf\u4e2a region group \u4e2d\u7684\u70b9\uff0c\u6839\u636e vertex code \u8f93\u51fa\u7684\u503c\u627e\u5230\u5176\u4e2d\u7684\u5934/\u5c3e\u5143\u7d20\uff0c\u5934/\u5c3e\u9700\u8981\u6ee1\u8db3\u7684\u89c4\u5219\u662f vertex code \u4e2d\u7b2c\u4e00\u901a\u9053\u8f93\u51fa\u7684\u662f\u5426\u662f\u8fb9\u754c\u5143\u7d20\u7f6e\u4fe1\u5ea6\u7684\u503c\u9ad8\u4e8e\u9608\u503c\uff0c\u4e14 vertex code \u4e2d\u7684\u5206\u7c7b\u7f6e\u4fe1\u5ea6\u6ee1\u8db3\u9608\u503c(\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u9608\u503c\u4e3a0-0.1\u8868\u793a\u5934\u90e8\u5143\u7d20,0.9-1\u8868\u793a\u5c3e\u90e8\u5143\u7d20) \u73b0\u5728\u786e\u5b9a\u4e86\u6bcf\u4e2a region group \u4e2d\u7684\u5934\u5c3e\u5143\u7d20\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6839\u636e\u5934\u90e8(\u5c3e\u90e8)\u5143\u7d20\u6240\u9884\u6d4b\u7684\u5de6\u4e0a(\u53f3\u4e0a)X\u3001\u5de6\u4e0a(\u53f3\u4e0a)Y\u3001\u5de6\u4e0b(\u53f3\u4e0b)X\u3001\u5de6\u4e0b(\u53f3\u4e0b)Y\u504f\u79fb\u91cf\u8fdb\u884c\u52a0\u6743\u5e73\u5747\uff0c\u786e\u5b9a\u6700\u7ec8\u9884\u6d4b\u76844\u4e2a\u9876\u70b9\u3002\u5177\u4f53\u7684\u52a0\u6743\u5e73\u5747\u7684\u65b9\u5f0f\u5982\u4e0b, n \u8868\u793a\u5f53\u524d\u6587\u672c\u57df\u5185\u8fb9\u754c\u5143\u7d20\u6570\u91cf\u3002 \u57fa\u4e8e\u5206\u5272\u7684\u6587\u5b57\u68c0\u6d4b \uff1a\u4f18\u70b9->\u5bf9\u4e0d\u540c\u5f62\u72b6\u6587\u672c\u7684\u68c0\u6d4b\u6548\u679c\u90fd\u6bd4\u8f83\u597d\uff1b\u7f3a\u70b9->\u540e\u5904\u7406\u8017\u65f6\u591a\uff0c\u91cd\u53e0\u6587\u672c\u6548\u679c\u5dee\u3002","title":"Advanced EAST"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#pixellink1801","text":"\u8bba\u6587 | code \u6807\u6ce8\u89c4\u5219 \u5728\u6587\u672c\u5b9e\u4f8b\u5185\u90e8\u50cf\u7d20\u6807\u4e3a positive \uff0c\u5176\u4f59\u7684\u6807\u4e3a negative \u3002 \u7f51\u7edc\u7ed3\u6784 \u8f93\u51fa\u7ed3\u679c\u5171\u6709\u4e24\u90e8\u5206: text/no-test \u548c link \u9884\u6d4b\u3002\u53d7 SegLink \u542f\u53d1\uff0c\u6bcf\u4e2a\u50cf\u7d20\u70b9\u6709 8 \u4e2a\u90bb\u5c45\u3002\u7ed9\u5b9a\u4e00\u4e2a\u50cf\u7d20\u70b9\u4ee5\u53ca\u5b83\u7684\u4e00\u4e2a\u90bb\u5c45\u70b9\uff0c\u5982\u679c\u5b83\u4eec\u540c\u5c5e\u4e8e\u4e00\u4e2a\u6587\u672c\u5b9e\u4f8b\uff0c\u5219\u5b83\u4eec\u4e4b\u95f4\u7684 link \u4e3a positive \u3002 \u6700\u540e\u5f97\u5230 pixels \u548c links \uff0c\u7136\u540e\u6839\u636e link positive \u5c06 pixel positive \u8fdb\u884c\u8fde\u63a5\uff0c\u5f97\u5230 Cs(conected compoents) \u96c6\u5408\uff0c\u96c6\u5408\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4ee3\u8868\u7684\u5c31\u662f\u6587\u672c\u5b9e\u4f8b\u3002\u4e24\u4e2a pixel \u9700\u8981\u8fde\u63a5\u7684\u524d\u63d0\u6761\u4ef6\uff1a two link \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a link positive \uff0e\u8fde\u63a5\u7684\u89c4\u5219\u91c7\u7528\u7684\u662f Disjoint set data structure (\u5e76\u67e5\u96c6)\u7684\u65b9\u6cd5\u3002 \u57fa\u4e8e\u4e0a\u8ff0 CCs \u96c6\u5408\uff0c\u76f4\u63a5\u6389\u8c03\u7528 opencv \u7684 minAreaRect \u63d0\u53d6\u5e26\u65b9\u5411\u4fe1\u606f\u7684\u77e9\u5f62\u6846\u3002\u5728\u6b64\u4e4b\u540e\uff0c\u8fd8\u8981\u6839\u636e\u5728\u8bad\u7ec3\u96c6\u4e0a\u7edf\u8ba1\u7684\u4fe1\u606f\uff0c\u8fdb\u884c\u8fc7\u6ee4\uff0c\u53bb\u6389\u566a\u58f0\u3002 Loss\u51fd\u6570 L_pixel \u5206\u7c7b\u635f\u5931\u66f4\u91cd\u8981 \u03bb =2.0 W \u8868\u793a\u9884\u6d4b\u7684 pixel \u5206\u7c7b\u7684\u6743\u503c\u77e9\u9635\uff0c r \u8868\u793a\u8d1f\u6b63\u6837\u672c\u6bd4\u4f8b\uff0c\u8bba\u6587\u4e2d r=3 \uff0c S \u8868\u793a\u6bcf\u4e2a\u6587\u672c\u5b9e\u4f8b\u7684\u9762\u79ef \u5f53\u6587\u672c\u5b9e\u4f8b\u7684\u9762\u79ef\u6bd4\u8f83\u5927\uff0c\u5360\u7684 loss \u635f\u5931\u5c31\u4f1a\u88ab\u76f8\u5bf9\u62c9\u5c0f\uff0c\u6587\u672c\u5b9e\u4f8b\u7684\u9762\u79ef\u6bd4\u8f83\u5c0f\uff0c\u5360\u7684 loss \u635f\u5931\u5c31\u4f1a\u88ab\u76f8\u5bf9\u62c9\u5927\u3002\u8fd9\u6837\u505a\u7684\u597d\u5904\u5c31\u662f\u4f7f\u5f97\u5c0f\u7684\u6587\u672c\u5b9e\u4f8b\u4e0d\u4f1a\u88ab\u5927\u7684\u6587\u672c\u5b9e\u4f8b\u7684 loss \u63a9\u76d6\u6389\uff0c\u4e5f\u53ef\u4ee5\u6709 loss \u56de\u4f20\u3002 \u540c\u65f6 pixel \u5206\u7c7b\u4efb\u52a1\u8fd8\u4f7f\u7528\u4e86 OHEM \u7b56\u7565\uff0c\u6bcf\u6b21\u56de\u4f20 S \uff08\u6b63\u6837\u672c\u5b9e\u4f8b\u50cf\u7d20\u548c\uff09+ r*S \uff08\u8d1f\u6837\u672c\u50cf\u7d20\u548c\uff09\u7684 loss \uff0c\u66f4\u52a0\u6709\u5229\u4e8e\u5206\u7c7b\u4efb\u52a1\u7684\u5b66\u4e60\u3002\u8fd9\u70b9\u6539\u8fdb\u6bd4 EAST \u4e2d\u6240\u6709\u50cf\u7d20\u7684 loss \u90fd\u56de\u4f20\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5206\u7c7b\u7ed3\u679c\uff0c\u800c\u4e0d\u662f\u50cf EAST \u90a3\u6837\uff0c\u4e00\u4e2a\u5b9e\u4f8b\u4e2d\u95f4\u7684\u50cf\u7d20\u5206\u7c7b\u7684\u597d\uff0c\u8fb9\u7f18\u7684\u50cf\u7d20\u5206\u7c7b\u7684\u5dee\u7684\u60c5\u51b5\u3002 L_link \u5206\u7c7b\u635f\u5931","title":"pixelLink(18/01)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#spcnet1811","text":"\u8bba\u6587 | code \u7f51\u7edc\u7ed3\u6784 TCM\u6a21\u5757 FPN \u5f97\u5230\u7684\u6bcf\u4e00\u4e2a stage \u7684\u7279\u5f81\u7528\u84dd\u8272\u8868\u793a\uff0c\u7ecf\u8fc7\u4e0a\u9762\u4e00\u652f\u7684\u4e09\u4e2a\u5377\u79ef\u53ef\u4ee5\u76f4\u63a5\u9884\u6d4b\u6587\u5b57**\u5206\u5272**\u7ed3\u679c\uff0c\u800c 1x1 \u5377\u79ef\u4e4b\u540e\u7684\u5206\u5272\u56fe\u53ef\u4ee5\u4f5c\u4e3a attention \u4e58\u56de\u539f\u56fe\uff0c\u53bb\u589e\u5f3a\u68c0\u6d4b\u7279\u5f81\u4e2d\u7684\u6587\u5b57\u533a\u57df\uff0c\u5e76\u4e14\u4e2d\u95f4\u4ea7\u751f\u7684\u7279\u5f81\u53ef\u4ee5\u76f8\u52a0\u5f97\u5230**\u7eff\u8272\u7279\u5f81**(\u5c06\u68c0\u6d4b\u7684\u7279\u5f81\u548c\u5206\u5272\u7684\u7279\u5f81\u878d\u5408\u8d77\u6765\uff0c\u5f97\u5230\u66f4\u4e3a\u4e30\u5bcc\u7684\u7279\u5f81\u8868\u8fbe) RS\u6a21\u5757 \u4f5c\u7528:\u5bf9\u4e8e\u503e\u659c\u6587\u5b57\u6216\u8005\u5f2f\u66f2\u6587\u5b57 maskrcnn \u68c0\u6d4b\u6846\u5f97\u5206\u8f83\u4f4e(\u5927\u90e8\u5206\u90fd\u662f\u80cc\u666f)\uff0c\u4f46\u5728\u8bed\u4e49\u5206\u5272\u56fe\u4e0a\u5b83\u4eec\u5177\u6709\u8f83\u9ad8\u7684\u54cd\u5e94\uff1b\u4e00\u4e9b\u9519\u8bef\u6837\u672c\u5177\u6709\u8f83\u9ad8\u7684\u68c0\u6d4b\u5f97\u5206\uff0c\u4f46\u662f\u5728\u8bed\u4e49\u5206\u5272\u56fe\u4e0a\u7684\u54cd\u5e94\u8f83\u4f4e\u3002 \u4f5c\u8005\u8003\u8651\u5c06\u5b9e\u4f8b\u5206\u5272\u548c\u8bed\u4e49\u5206\u5272\u7684\u7ed3\u679c\u76f8\u878d\u5408\uff0c\u901a\u8fc7\u91cd\u65b0\u8ba1\u7b97\u5408\u7406\u7684\u5206\u6570\uff0c\u4ece\u800c\u964d\u4f4e\u9519\u8bef\u6837\u672c\u68c0\u6d4b\u3002 \u6807\u7b7e\u751f\u6210","title":"SPCNet(18/11)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#psenet1903","text":"\u8bba\u6587 | code \u4f20\u7edf\u6587\u5b57\u68c0\u6d4b\u5bf9\u5f2f\u66f2\u6587\u5b57\u5757\u8868\u73b0\u4e0d\u597d\uff0c\u76f4\u63a5\u4f7f\u7528\u8bed\u4e49\u5206\u5272\u5f88\u96be\u5206\u79bb\u9760\u7684\u5f88\u8fd1\u7684\u6587\u672c\u3002 \u672c\u6587\u63d0\u51fa\u5148\u589e\u5927\u6587\u5b57\u5757\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u7136\u540e\u901a\u8fc7\u6e10\u8fdb\u6269\u5c55\u7b97\u6cd5\u6765\u6784\u5efa\u5b8c\u6574\u7684\u6587\u5b57\u5757 n\u4e2a\u4e8c\u503c\u56fe\u4ea7\u751f\u516c\u5f0f \u6838\u5fc3\u7b97\u6cd5:PSE(\u6e10\u8fdb\u5c3a\u5ea6\u6269\u5f20\u7b97\u6cd5:Progressive Scale Expansion) PSE \u7b97\u6cd5\u7684\u4e3b\u8981\u601d\u60f3\u5c31\u662f\u5229\u7528 BFS \uff08\u5e7f\u5ea6\u4f18\u5148\u641c\u7d22\uff09\u7b97\u6cd5\uff0c\u9010\u6e10\u6269\u5c55 kernel \uff08\u5c31\u662f\u4e0b\u56fe\u4e2d\u7684\u767d\u8272\u7684\u90e8\u5206\uff0c\u9884\u6d4b\u7684\u6587\u672c\u884c\u533a\u57df\uff09\u7684\u5927\u5c0f\uff0c\u6700\u7ec8\u6269\u589e\u5230\u539f\u59cb\u6587\u672c\u884c\u5927\u5c0f\uff08\u5982 S3 \uff09 \u635f\u5931\u51fd\u6570 \u901a\u5e38\u6587\u672c\u5b9e\u4f8b\u53ef\u80fd\u53ea\u5360\u81ea\u7136\u573a\u666f\u5f88\u5c0f\u7684\u4e00\u90e8\u5206\uff0c\u56e0\u6b64\u5982\u679c\u91c7\u7528\u4e8c\u8fdb\u5236\u4ea4\u53c9\u71b5\u635f\u5931\u4f1a\u9020\u6210\u9884\u6d4b\u7ed3\u679c\u66f4\u52a0\u504f\u5411\u4e8e\u975e\u6587\u672c\u533a\u57df(\u5373\u6587\u5b57\u548c\u975e\u6587\u5b57\u50cf\u7d20\u5341\u5206\u4e0d\u5e73\u8861)\u3002\u8fd9\u91cc\u6211\u4eec\u91c7\u7528 dice coefficient \u635f\u5931\u51fd\u6570\uff1a","title":"PSENet(19/03)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#pan1908","text":"\u8bba\u6587 | code |\u50cf\u7d20\u805a\u5408\u7f51\u7edc: PSENet \u7684\u6539\u8fdb\u7248 \u7f51\u7edc\u7ed3\u6784 FPEM\u6a21\u5757 FFM\u878d\u5408\u6a21\u5757 \u50cf\u7d20\u805a\u5408\u601d\u8def \u635f\u5931\u51fd\u6570","title":"PAN(19/08)"},{"location":"OCR%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#db1911","text":"\u8bba\u6587 | code |\u4e2d\u6587\u68c0\u6d4b\u4e0a DB \u4f18\u4e8e EAST \u5728\u57fa\u4e8e\u5206\u5272\u7684\u6587\u672c\u68c0\u6d4b\u7f51\u7edc\u4e2d\uff0c\u6700\u7ec8\u7684\u4e8c\u503c\u5316map\u90fd\u662f\u4f7f\u7528\u56fa\u5b9a\u9608\u503c\u6765\u83b7\u53d6\uff0c\u5e76\u4e14\u9608\u503c\u4e0d\u540c\u5bf9\u6027\u80fd\u5f71\u54cd\u8f83\u5927\u3002 \u672c\u6587\u4e2d\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u50cf\u7d20\u70b9\u8fdb\u884c\u81ea\u9002\u5e94\u4e8c\u503c\u5316\uff0c\u4e8c\u503c\u5316\u9608\u503c\u7531\u7f51\u7edc\u5b66\u4e60\u5f97\u5230\uff0c\u5f7b\u5e95\u5c06\u4e8c\u503c\u5316\u8fd9\u4e00\u6b65\u9aa4\u52a0\u5165\u5230\u7f51\u7edc\u91cc\u4e00\u8d77\u8bad\u7ec3\uff0c\u8fd9\u6837\u6700\u7ec8\u7684\u8f93\u51fa\u56fe\u5bf9\u4e8e\u9608\u503c\u5c31\u4f1a\u975e\u5e38\u9c81\u68d2\u3002 \u7f51\u7edc \u6807\u7b7e\u751f\u6210 P\u56fe :\u6709\u6587\u5b57\u7684\u533a\u57df\u6709\u503c\uff0c\u65e0\u6587\u5b57\u533a\u57df\u9ed1\u8272\uff0c\u4e3a 0 . T\u56fe :\u53ea\u6709\u6587\u5b57\u8fb9\u754c\u7ebf\u6709\u503c\uff0c\u5176\u4ed6\u5730\u65b9\u4e3a 0 .\u5176\u5b9e\u5c31\u662f\u5c06\u6587\u672c\u6846\u5411\u5185+\u5411\u5916\u6536\u7f29\u548c\u6269\u62db d \u4e2a\u50cf\u7d20,\u7136\u540e\u8ba1\u7b97\u6536\u7f29\u6846\u548c\u6269\u5f20\u6846\u4e4b\u95f4\u5dee\u96c6\u90e8\u5206\u91cc\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5230\u539f\u59cb\u56fe\u50cf\u8fb9\u754c\u7684\u5f52\u4e00\u5316\u8ddd\u79bb\u3002 T \u56fe\u975e\u6587\u5b57\u8fb9\u754c\u662f\u7070\u8272\u7684\uff0c\u8fd9\u662f\u56e0\u4e3a\u7edf\u4e00\u52a0\u4e86 0.3 \uff0c\u6240\u6709\u6700\u5c0f\u503c\u662f 0.3 \uff0c\u8fd9\u662f\u4e3a\u4e86\u540e\u9762\u6709\u7528\u7684. \u53ef\u5fae\u5206\u4e8c\u503c\u5316 \u7ed3\u5408\u6982\u7387\u56fe P_i,j \u548c\u9608\u503c\u56fe T_i,j \uff0c\u5c31\u80fd\u5f97\u5230\u4e8c\u503c\u56fe B^_i,j B \u56fe\u7684\u8ba1\u7b97\u548c T \u56fe 0.3 \u7684\u7528\u5904\u662f\u4e3a\u4e86\u66f4\u597d\u7684\u533a\u5206(\u4f8b\u5982,\u975e\u6587\u5b57\u5757\u533a\u57df: x=p-T<0 \u8fd9\u6837\u62c9\u5230\u8d1f\u534a\u8f74\u66f4\u6709\u5229\u4e8e\u533a\u5206) \u635f\u5931\u51fd\u6570 Ls,Lb \u90fd\u662f binary cross-entropy (BCE) ,\u540c\u65f6\u4e3a\u4e86\u89e3\u51b3\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u4f7f\u7528 hard negative mining ,\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c 1:3 Lt \u662f\u9884\u6d4b\u7ed3\u679c\u548c\u6807\u7b7e\u4e4b\u95f4\u7684 L1 \u8ddd\u79bb\uff0c\u5176\u4e2d Rd \u662f\u5728\u81a8\u80c0 Gd \u5185\u50cf\u7d20\u7684\u7d22\u5f15\uff0c y* \u662f\u9608\u503c map \u7684\u6807\u7b7e\u3002 \u63a8\u7406\u6d41\u7a0b \u5728\u63a8\u7406\u65f6\u53ef\u4ee5\u91c7\u7528\u6982\u7387\u56fe\u6216\u8fd1\u4f3c\u4e8c\u503c\u56fe\u6765\u751f\u6210\u6587\u672c\u6846\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4f5c\u8005\u9009\u62e9\u4e86\u6982\u7387\u56fe\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b: \u4e8c\u503c\u56fe\u786e\u5b9a: \u4f7f\u7528**\u8fd1\u4f3c\u4e8c\u503c\u56feB**\uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef \u4f7f\u7528**\u6982\u7387\u56feP**\uff1a\u4f7f\u7528\u56fa\u5b9a\u9608\u503c 0.2 \u5c06\u6982\u7387\u56fe\u505a\u4e8c\u503c\u5316\u5f97\u5230\u4e8c\u503c\u5316\u56fe\uff0c\u7531\u4e8c\u503c\u5316\u56fe\u5f97\u5230\u6536\u7f29\u6587\u5b57\u533a\u57df(\u4f5c\u8005\u63a8\u8350) \u5c06\u6536\u7f29\u6587\u5b57\u533a\u57df\u6309 Vatti clipping \u7b97\u6cd5( PSENet )\u7684\u504f\u79fb\u7cfb\u6570 D' \u8fdb\u884c\u6269\u5f20\u5f97\u5230\u6700\u7ec8\u6587\u672c\u6846","title":"DB(19/11)"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/","text":"\u57fa\u672c\u7b80\u4ecb \u00b6 \u73b0\u5728 PaddlePaddle \u4e3b\u63a8 v2.0+ \uff0c\u4e3b\u63a8\u52a8\u6001\u56fe\uff0c\u5f53\u7136\u52a8\u6001\u56fe\u4e5f\u80fd\u8f6c\u4e3a\u9759\u6001\u56fe\uff0c\u8f6c\u6362\u65b9\u5f0f \u7b14\u8bb0 \u52a8\u6001\u56fe\u548c\u9759\u6001\u56fe\u4e0d\u540c \u52a8\u6001\u56fe \u52a8\u6001\u56fe\u6709\u8bf8\u591a\u4f18\u70b9\uff0c\u5305\u62ec\u6613\u7528\u7684\u63a5\u53e3\uff0cPython\u98ce\u683c\u7684\u7f16\u7a0b\u4f53\u9a8c\uff0c\u53cb\u597d\u7684debug\u4ea4\u4e92\u673a\u5236\u7b49\u3002\u5728\u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\uff0c\u4ee3\u7801\u662f\u6309\u7167\u6211\u4eec\u7f16\u5199\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u3002\u8fd9\u79cd\u673a\u5236\u66f4\u7b26\u5408Python\u7a0b\u5e8f\u5458\u7684\u4e60 \u60ef\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5c06\u5927\u8111\u4e2d\u7684\u60f3\u6cd5\u5feb\u901f\u5730\u8f6c\u5316\u4e3a\u5b9e\u9645\u4ee3\u7801\uff0c\u4e5f\u66f4\u5bb9\u6613\u8c03\u8bd5\u3002 \u4f46\u5728\u6027\u80fd\u65b9\u9762\uff0c Python\u6267\u884c\u5f00\u9500\u8f83\u5927\uff0c\u4e0eC++\u6709\u4e00\u5b9a\u5dee\u8ddd\u3002\u56e0\u6b64\u5728\u5de5\u4e1a\u754c\u7684\u8bb8\u591a\u90e8\u7f72\u573a\u666f\u4e2d\uff08\u5982\u5927\u578b\u63a8\u8350\u7cfb\u7edf\u3001\u79fb\u52a8\u7aef\uff09\u90fd\u503e\u5411\u4e8e\u76f4\u63a5\u4f7f\u7528C++\u6765\u63d0\u901f\u3002 \u9759\u6001\u56fe \u9759\u6001\u56fe\u5728\u90e8\u7f72\u65b9\u9762\u66f4\u5177\u6709\u6027\u80fd\u7684\u4f18\u52bf\u3002\u9759\u6001\u56fe\u7a0b\u5e8f\u5728\u7f16\u8bd1\u6267\u884c\u65f6\uff0c\u5148\u642d\u5efa\u6a21\u578b \u7684\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\uff0c\u7136\u540e\u518d\u5bf9\u795e\u7ecf\u7f51\u7edc\u6267\u884c\u8ba1\u7b97\u64cd\u4f5c\u3002\u9884\u5148\u642d\u5efa\u597d\u7684\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u8131\u79bbPython\u4f9d\u8d56\uff0c\u5728C++\u7aef\u88ab\u91cd\u65b0\u89e3\u6790\u6267\u884c\uff0c\u800c\u4e14\u62e5\u6709\u6574\u4f53\u7f51\u7edc\u7ed3\u6784\u4e5f\u80fd\u8fdb\u884c\u4e00\u4e9b\u7f51\u7edc\u7ed3\u6784\u7684\u4f18\u5316\u3002 \u52a8\u6001\u56fe\u4ee3\u7801\u66f4\u6613\u7f16\u5199\u548cdebug\uff0c\u4f46\u5728\u90e8\u7f72\u6027\u80fd\u4e0a\uff0c\u9759\u6001\u56fe\u66f4\u5177\u4f18\u52bf\u3002 \u57fa\u672c\u4f7f\u7528 \u00b6 import paddle # 1.\u521b\u5efatensor # return -->Tensor(shape=[3], dtype=float64, place=CUDAPlace(0)/CPUPlace, stop_gradient=True,[2., 3., 4.]) # \u4e0a\u9762\u8fd9\u4e9b\u5c5e\u6027\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\uff0c\u4f8b\u5982data.shape data = paddle . to_tensor ([ 2.0 , 3.0 , 4.0 ], dtype = 'float64' ) # \u9ed8\u8ba4\u521b\u5efafloat32\u7c7b\u578b cpu_tensor = paddle . to_tensor ( 1 , place = paddle . CPUPlace ()) # \u6570\u636e\u653e\u5728cpu\u4e0a gpu_tensor = paddle . to_tensor ( 1 , place = paddle . CUDAPlace ( 0 )) # \u6570\u636e\u653e\u5728gpu\u4e0a pin_memory_tensor = paddle . to_tensor ( 1 , place = paddle . CUDAPinnedPlace ()) # \u6570\u636e\u56fa\u5b9a\u5728\u5185\u5b58\u4e0a # 2.\u5e38\u7528\u5c5e\u6027 data . name # \u8be5tensor\u7684\u552f\u4e00id\uff0c\u662f\u72ec\u4e00\u65e0\u4e8c\u7684 # 'bool'\uff0c'float16'\uff0c'float32'\uff0c'float64'\uff0c'uint8'\uff0c'int8'\uff0c'int16'\uff0c'int32'\uff0c'int64' data . dtype # int64\u9ed8\u8ba4\uff0cfloat32\u9ed8\u8ba4\uff0cpaddle.cast(data, dtype='float64') # \u901a\u8fc7\u8be5\u51fd\u6570\u53ef\u4ee5\u6539\u53d8\u6570\u636e\u7c7b\u578b data . place # \u67e5\u770btensor\u5728cpu/gpu\u4e0a # paddle.to_tensor([1.0, 2.0, 3.0], stop_gradient=False) # \u5c06b\u8bbe\u7f6e\u4e3a\u9700\u8981\u8ba1\u7b97\u68af\u5ea6\u7684\u5c5e\u6027 data . stop_gradient # \u67e5\u770b\u4e00\u4e2aTensor\u662f\u5426\u8ba1\u7b97\u5e76\u4f20\u64ad\u68af\u5ea6,\u9ed8\u8ba4True:\u4e0d\u8ba1\u7b97\u68af\u5ea6\uff0cFalse\u8ba1\u7b97\u68af\u5ea6 data . shape # \u63cf\u8ff0\u4e86tensor\u7684\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u7684\u6570\u91cf\uff0c\u5217\u8868 data . size # \u6307tensor\u4e2d\u5168\u90e8\u5143\u7d20\u7684\u4e2a\u6570 data . ndim # tensor\u7684\u7ef4\u5ea6\u6570\u91cf # axis\u6216\u8005dimension\uff1a\u6307tensor\u67d0\u4e2a\u7279\u5b9a\u7684\u7ef4\u5ea6 data . reshape ([ m , n , ... , - 1 ]) # 3.numpy\u548ctensor\u4e92\u76f8\u8f6c\u6362 data . numpy () # tensor->numpy,\u5e38\u7528\u6b64\u6765\u83b7\u53d6\u6570\u503c paddle . to_tensor ( np . array ([ 2.0 , 3.0 , 4.0 ]) . astype ( np . float32 )) # numpy->tensor # 4.\u5e38\u7528\u51fd\u6570 paddle . get_device () # \u8fd4\u56decp/gpu:0\u7b49\u5b57\u7b26\u4e32 paddle . zeros ([ m , n ]) # \u521b\u5efa\u6570\u636e\u5168\u4e3a0\uff0cshape\u4e3a[m, n]\u7684Tensor paddle . ones ([ m , n ]) # \u521b\u5efa\u6570\u636e\u5168\u4e3a1\uff0cshape\u4e3a[m, n]\u7684Tensor paddle . full ([ m , n ], 10 ) # \u521b\u5efa\u6570\u636e\u5168\u4e3a10\uff0cshape\u4e3a[m, n]\u7684Tensor paddle . arange ( start , end , step ) # \u521b\u5efa\u4ece[start,end]\uff0c\u6b65\u957f\u4e3astep\u7684Tensor paddle . linspace ( start , end , num ) # \u521b\u5efa\u4ecestart\u5230end\uff0c\u5143\u7d20\u4e2a\u6570\u56fa\u5b9a\u4e3anum\u7684Tensor,\u7b49\u8ddd\u5207\u5206 paddle . rand ( shape , dtype = None ) # \u8303\u56f4\u5728[0, 1)\u7684\u7b26\u5408\u5747\u5300\u5206\u5e03\u7684Tensor paddle . randn ( shape , dtype = None ) # \u6807\u51c6\u6b63\u6001\u5206\u5e03\uff08\u5747\u503c\u4e3a0\uff0c\u6807\u51c6\u5dee\u4e3a1\u7684\u6b63\u6001\u968f\u673a\u5206\u5e03\uff09\u7684\u968f\u673aTensor paddle . randint ( low = 0 , high = None , shape = [ 1 ], dtype = None ) # [low, high)\u7684\u968f\u673a\u5747\u5300\u5206\u5e03Tensor,\u5982\u679chigh=None,\u8303\u56f4\u662f[0,low) paddle . randperm ( n , dtype = None ) # [0,n-1]\u968f\u673a\u6392\u5217\u7684tensor paddle . sort ( x , axis =- 1 , descending = False ) # \u9ed8\u8ba4\u5347\u5e8f\uff0c\u7ed9\u5b9a\u7ef4\u5ea6\u6392\u5e8f\uff0c\u8fd4\u56de\u6392\u597d\u5e8f\u7684tensor paddle . transpose ( data , perm = [ 1 , 0 , 2 ]) # \u7ef4\u5ea6\u8f6c\u6362 paddle . squeeze ( a , axis = None ) # \u5220\u9664\u8f93\u5165Tensor\u7684Shape\u4e2d\u5c3a\u5bf8\u4e3a1\u7684\u7ef4\u5ea6,\u9ed8\u8ba4\u5168\u90e8\u5220\u9664 paddle . unsqueeze ( x , axes ) # \u5411\u8f93\u5165Tensor\u7684Shape\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u4f4d\u7f6e\uff08axis\uff09\u63d2\u5165\u5c3a\u5bf8\u4e3a1\u7684\u7ef4\u5ea6 paddle . where ( condition , x , y ) # condition=True->x,else y paddle . topk ( data , k = 3 ) # return (values,indexs) paddle . multiply ( x , y ) # x,y\u9010\u5143\u7d20\u76f8\u4e58\uff0cx/y\u7ef4\u5ea6\u76f8\u540c # 5.\u7d22\u5f15\u4e0e\u5207\u7247\uff0c\u540cnumpy\uff0c\u5207\u7247\u8d4b\u503c\u64cd\u4f5c\u4e5f\u662f\u76f8\u540c\u7684\uff0c\u4e14\u652f\u6301\u5e7f\u64ad\u673a\u5236 # 6.\u6570\u5b66\u8fd0\u7b97\u7b26\uff0cpaddle.add(data1,data2) == data1.add(data2)\uff0cPaddle\u4e2dTensor\u7684\u64cd\u4f5c\u7b26\u5747\u4e3a\u975einplace\u64cd\u4f5c\uff0c\u5fc5\u987b\u6709\u8fd4\u56de\u503c data . abs () #\u9010\u5143\u7d20\u53d6\u7edd\u5bf9\u503c data . ceil () #\u9010\u5143\u7d20\u5411\u4e0a\u53d6\u6574 data . floor () #\u9010\u5143\u7d20\u5411\u4e0b\u53d6\u6574 data . round () #\u9010\u5143\u7d20\u56db\u820d\u4e94\u5165 data . exp () #\u9010\u5143\u7d20\u8ba1\u7b97\u81ea\u7136\u5e38\u6570\u4e3a\u5e95\u7684\u6307\u6570 data . log () #\u9010\u5143\u7d20\u8ba1\u7b97x\u7684\u81ea\u7136\u5bf9\u6570 data . reciprocal () #\u9010\u5143\u7d20\u6c42\u5012\u6570 data . square () #\u9010\u5143\u7d20\u8ba1\u7b97\u5e73\u65b9 data . sqrt () #\u9010\u5143\u7d20\u8ba1\u7b97\u5e73\u65b9\u6839 data . sin () #\u9010\u5143\u7d20\u8ba1\u7b97\u6b63\u5f26 data . cos () #\u9010\u5143\u7d20\u8ba1\u7b97\u4f59\u5f26 data . add ( y ) #\u9010\u5143\u7d20\u76f8\u52a0 data . subtract ( y ) #\u9010\u5143\u7d20\u76f8\u51cf data . multiply ( y ) #\u9010\u5143\u7d20\u76f8\u4e58 data . divide ( y ) #\u9010\u5143\u7d20\u76f8\u9664 data . mod ( y ) #\u9010\u5143\u7d20\u76f8\u9664\u5e76\u53d6\u4f59 data . pow ( y ) #\u9010\u5143\u7d20\u5e42\u8fd0\u7b97 data . max () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u6700\u5927\u503c\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 data . min () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u6700\u5c0f\u503c\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 data . prod () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u7d2f\u4e58\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 data . sum () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u7684\u548c\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 # \u4e0b\u9762\u7b80\u5316\u7248\u672c\u4e5f\u7b49\u4ef7 x + y -> x . add ( y ) #\u9010\u5143\u7d20\u76f8\u52a0 x - y -> x . subtract ( y ) #\u9010\u5143\u7d20\u76f8\u51cf x * y -> x . multiply ( y ) #\u9010\u5143\u7d20\u76f8\u4e58 x / y -> x . divide ( y ) #\u9010\u5143\u7d20\u76f8\u9664 x % y -> x . mod ( y ) #\u9010\u5143\u7d20\u76f8\u9664\u5e76\u53d6\u4f59 x ** y -> x . pow ( y ) #\u9010\u5143\u7d20\u5e42\u8fd0\u7b97 # 6.1 \u4e0b\u9762\u662f\u903b\u8f91\u8fd0\u7b97\u7b26 data . isfinite () #\u5224\u65adtensor\u4e2d\u5143\u7d20\u662f\u5426\u662f\u6709\u9650\u7684\u6570\u5b57\uff0c\u5373\u4e0d\u5305\u62ecinf\u4e0enan data . equal_all ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u5168\u90e8\u5143\u7d20\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u8fd4\u56deshape\u4e3a[1]\u7684bool Tensor data . equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u8fd4\u56deshape\u76f8\u540c\u7684bool Tensor data . not_equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u4e0d\u76f8\u7b49 data . less_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . less_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . greater_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . greater_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . allclose ( y ) #\u5224\u65adtensor x\u7684\u5168\u90e8\u5143\u7d20\u662f\u5426\u4e0etensor y\u7684\u5168\u90e8\u5143\u7d20\u63a5\u8fd1\uff0c\u5e76\u8fd4\u56deshape\u4e3a[1]\u7684bool Tensor # \u7b49\u4ef7\u64cd\u4f5c x == y -> x . equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u76f8\u7b49 x != y -> x . not_equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u4e0d\u76f8\u7b49 x < y -> x . less_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 x <= y -> x . less_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 x > y -> x . greater_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 x >= y -> x . greater_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 # 6.2 \u4e0b\u9762\u64cd\u4f5c\u4ec5\u9488\u5bf9bool\u578bTensor x . logical_and ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u4e0e\u64cd\u4f5c x . logical_or ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u6216\u64cd\u4f5c x . logical_xor ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u4ea6\u6216\u64cd\u4f5c x . logical_not ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u975e\u64cd\u4f5c # 6.3 \u7ebf\u6027\u4ee3\u6570\u76f8\u5173 x . cholesky () #\u77e9\u9635\u7684cholesky\u5206\u89e3 x . t () #\u77e9\u9635\u8f6c\u7f6e x . transpose ([ 1 , 0 ]) #\u4ea4\u6362axis 0 \u4e0eaxis 1\u7684\u987a\u5e8f x . norm ( 'fro' ) #\u77e9\u9635\u7684Frobenius \u8303\u6570 x . dist ( y , p = 2 ) #\u77e9\u9635\uff08x-y\uff09\u76842\u8303\u6570 x . matmul ( y ) #\u77e9\u9635\u4e58\u6cd5 \u81ea\u52a8\u5fae\u5206 import paddle # 1.\u5c0f\u4f8b\u5b50 x = paddle . to_tensor ([ 1.0 , 2.0 , 3.0 ], stop_gradient = False ) y = paddle . to_tensor ([ 4.0 , 5.0 , 6.0 ], stop_gradient = False ) z = x ** 2 + 4 * y # \u9ed8\u8ba4\u4f1a\u91ca\u653e\u53cd\u5411\u8ba1\u7b97\u56fe\u3002\u5982\u679c\u5728backward()\u4e4b\u540e\u7ee7\u7eed\u6dfb\u52a0OP\uff0c\u9700\u8981\u5c06backward()\u4e2d\u7684retain_graph\u53c2\u6570\u8bbe\u7f6e\u4e3aTrue\uff0c\u6b64\u65f6\u4e4b\u524d\u7684\u53cd\u5411\u8ba1\u7b97\u56fe\u4f1a\u4fdd\u7559\u3002 z . backward () # z.backward(retain_graph=True) x . grad # 2x->[2.,4.,6.] y . grad # 4->[4.,4.,4.] # 2.backward()\u4f1a\u7d2f\u79ef\u68af\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528clear_grad()\u51fd\u6570\u6765\u6e05\u9664\u5f53\u524dTensor\u7684\u68af\u5ea6 loss . backward () # print(loss.gradient()) # [1.0] loss . clear_grad () # print(loss.gradient()) # [0.0] \u5feb\u901f\u4e0a\u624b \u00b6 \u6570\u636e\u96c6\u7684\u5b9a\u4e49\u4e0e\u52a0\u8f7d import paddle from paddle.vision.transforms import ToTensor # 1.\u81ea\u8eab\u643a\u5e26\u6570\u636e print ( '\u89c6\u89c9\u76f8\u5173\u6570\u636e\u96c6\uff1a' , paddle . vision . datasets . __all__ ) print ( '\u81ea\u7136\u8bed\u8a00\u76f8\u5173\u6570\u636e\u96c6\uff1a' , paddle . text . datasets . __all__ ) #\u89c6\u89c9\u76f8\u5173\u6570\u636e\u96c6\uff1a ['DatasetFolder', 'ImageFolder', 'MNIST', 'FashionMNIST', 'Flowers', 'Cifar10', 'Cifar100', 'VOC2012'] #\u81ea\u7136\u8bed\u8a00\u76f8\u5173\u6570\u636e\u96c6\uff1a ['Conll05st', 'Imdb', 'Imikolov', 'Movielens', 'UCIHousing', 'WMT14', 'WMT16'] # \u4e3e\u4f8b\u8bf4\u660e\uff0c\u9ed8\u8ba4\u4e0b\u8f7d\u5230 ~/.cache/paddle/dataset train_dataset = paddle . vision . datasets . MNIST ( mode = 'train' , transform = ToTensor ()) val_dataset = paddle . vision . datasets . MNIST ( mode = 'test' , transform = ToTensor ()) # 2.\u81ea\u5b9a\u4e49\u6570\u636e\u96c6 paddle.io.Dataset\u57fa\u7c7b import paddle from paddle.io import Dataset class MyDataset ( Dataset ): \"\"\" \u6b65\u9aa4\u4e00\uff1a\u7ee7\u627fpaddle.io.Dataset\u7c7b \"\"\" def __init__ ( self , num_samples ): \"\"\" \u6b65\u9aa4\u4e8c\uff1a\u5b9e\u73b0\u6784\u9020\u51fd\u6570\uff0c\u5b9a\u4e49\u6570\u636e\u96c6\u5927\u5c0f \"\"\" super ( MyDataset , self ) . __init__ () self . num_samples = num_samples def __getitem__ ( self , index ): \"\"\" \u6b65\u9aa4\u4e09\uff1a\u5b9e\u73b0__getitem__\u65b9\u6cd5\uff0c\u5b9a\u4e49\u6307\u5b9aindex\u65f6\u5982\u4f55\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u8fd4\u56de\u5355\u6761\u6570\u636e\uff08\u8bad\u7ec3\u6570\u636e\uff0c\u5bf9\u5e94\u7684\u6807\u7b7e\uff09 \"\"\" data = paddle . uniform ( IMAGE_SIZE , dtype = 'float32' ) label = paddle . randint ( 0 , CLASS_NUM - 1 , dtype = 'int64' ) return data , label def __len__ ( self ): \"\"\" \u6b65\u9aa4\u56db\uff1a\u5b9e\u73b0__len__\u65b9\u6cd5\uff0c\u8fd4\u56de\u6570\u636e\u96c6\u603b\u6570\u76ee \"\"\" return self . num_samples custom_dataset = MyDataset ( BATCH_SIZE * BATCH_NUM ) # \u6d4b\u8bd5\u5b9a\u4e49\u7684\u6570\u636e\u96c6 # \u6570\u636e\u52a0\u8f7d,DataLoader \u9ed8\u8ba4\u7528\u5f02\u6b65\u52a0\u8f7d\u6570\u636e\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u63d0\u5347\u6570\u636e\u52a0\u8f7d\u7684\u901f\u5ea6\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u4f1a\u5360\u636e\u66f4\u5c11\u7684\u5185\u5b58\u3002\u5982\u679c\u4f60\u9700\u8981\u540c\u65f6\u52a0\u8f7d\u5168\u90e8\u6570\u636e\u5230\u5185\u5b58\u4e2d\uff0c\u8bf7\u8bbe\u7f6euse_buffer_reader=False\u3002 train_loader = paddle . io . DataLoader ( custom_dataset , batch_size = BATCH_SIZE , shuffle = True ) # \u5982\u679c\u8981\u52a0\u8f7d\u5185\u7f6e\u6570\u636e\u96c6\uff0c\u5c06 custom_dataset \u6362\u4e3a train_dataset \u5373\u53ef for batch_id , ( x_data , y_data ) in enumerate ( train_loader ()): print ( x_data . shape , y_data . shape ) \u6570\u636e\u9884\u5904\u7406 import paddle # \u6570\u636e\u5904\u7406\u65b9\u6cd5\uff1a ['BaseTransform', 'Compose', 'Resize', 'RandomResizedCrop', 'CenterCrop', 'RandomHorizontalFlip', 'RandomVerticalFlip', 'Transpose', 'Normalize', 'BrightnessTransform', 'SaturationTransform', 'ContrastTransform', 'HueTransform', 'ColorJitter', 'RandomCrop', 'Pad', 'RandomRotation', 'Grayscale', 'ToTensor', 'to_tensor', 'hflip', 'vflip', 'resize', 'pad', 'rotate', 'to_grayscale', 'crop', 'center_crop', 'adjust_brightness', 'adjust_contrast', 'adjust_hue', 'normalize'] print ( '\u6570\u636e\u5904\u7406\u65b9\u6cd5\uff1a' , paddle . vision . transforms . __all__ ) # 1.\u4f7f\u7528\u5185\u7f6e\u7684transform\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7c7b\u4e2d\u76f4\u63a5\u5e94\u7528 from paddle.vision.transforms import Compose , Resize , ColorJitter # \u5b9a\u4e49\u60f3\u8981\u4f7f\u7528\u7684\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff0c\u8fd9\u91cc\u5305\u62ec\u968f\u673a\u8c03\u6574\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6\uff0c\u6539\u53d8\u56fe\u7247\u5927\u5c0f transform = Compose ([ ColorJitter (), Resize ( size = 32 ), ]) # \u901a\u8fc7transform\u53c2\u6570\u4f20\u9012\u5b9a\u4e49\u597d\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u5373\u53ef\u5b8c\u6210\u5bf9\u81ea\u5e26\u6570\u636e\u96c6\u7684\u589e\u5f3a train_dataset = paddle . vision . datasets . MNIST ( mode = 'train' , transform = transform ) \u7f51\u7edc\u6784\u6210 import paddle # 1.Sequential \u7ec4\u7f51\uff1a\u9488\u5bf9\u987a\u5e8f\u7684\u7ebf\u6027\u7f51\u7edc\u7ed3\u6784 mnist = paddle . nn . Sequential ( paddle . nn . Flatten (), paddle . nn . Linear ( 784 , 512 ), paddle . nn . ReLU (), paddle . nn . Dropout ( 0.2 ), paddle . nn . Linear ( 512 , 10 ) ) # 2.SubClass\u7ec4\u7f51\uff0c\u9488\u5bf9\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528Layer\u5b50\u7c7b\u5b9a\u4e49\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u6a21\u578b\u4ee3\u7801\u7f16\u5199\uff0c\u5728__init__\u6784\u9020\u51fd\u6570\u4e2d\u8fdb\u884c\u7ec4\u7f51Layer\u7684\u58f0\u660e\uff0c\u5728forward\u4e2d\u4f7f\u7528\u58f0\u660e\u7684Layer\u53d8\u91cf\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u3002\u5b50\u7c7b\u7ec4\u7f51\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u5b9e\u73b0sublayer\u7684\u590d\u7528\uff0c\u9488\u5bf9\u76f8\u540c\u7684layer\u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4e00\u6b21\u6027\u5b9a\u4e49\uff0c\u5728forward\u4e2d\u591a\u6b21\u8c03\u7528\u3002 # Layer\u7c7b\u7ee7\u627f\u65b9\u5f0f\u7ec4\u7f51 class Mnist ( paddle . nn . Layer ): def __init__ ( self ): super ( Mnist , self ) . __init__ () self . flatten = paddle . nn . Flatten () self . linear_1 = paddle . nn . Linear ( 784 , 512 ) self . linear_2 = paddle . nn . Linear ( 512 , 10 ) self . relu = paddle . nn . ReLU () self . dropout = paddle . nn . Dropout ( 0.2 ) def forward ( self , inputs ): y = self . flatten ( inputs ) y = self . linear_1 ( y ) y = self . relu ( y ) y = self . dropout ( y ) y = self . linear_2 ( y ) return y mnist_2 = Mnist () # 3.\u4e0a\u56fe\u662f\u6846\u67b6\u5185\u7f6e\u6a21\u578b import paddle resnet = paddle . vision . models . resnet18 () paddle . summary ( resnet ,( 1 , 3 , 224 , 224 )) # \u6253\u5370\u7f51\u7edc\u7ed3\u6784 \u8bad\u7ec3\u4e0e\u9884\u6d4b \uff1a\u4e24\u79cd\u8bad\u7ec3\u65b9\u5f0f \u4e00\u79cd\u662f\u7528 paddle.Model \u5bf9\u6a21\u578b\u8fdb\u884c\u5c01\u88c5\uff0c\u901a\u8fc7\u9ad8\u5c42API\u5982 Model.fit()\u3001Model.evaluate()\u3001Model.predict() \u7b49\u5b8c\u6210\u6a21\u578b\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b\uff1b \u53e6\u4e00\u79cd\u5c31\u662f\u57fa\u4e8e\u57fa\u7840 API \u5e38\u89c4\u7684\u8bad\u7ec3\u65b9\u5f0f\u3002 net = xxx train_dataset , test_dataset = xxx , xxx # \u7b2c\u4e00\u79cd\u65b9\u5f0f # 1.1 \u4f7f\u7528paddle.Model\u5bf9\u6a21\u578b\u8fdb\u884c\u5c01\u88c5 model = paddle . Model ( net ) # 1.2 \u901a\u8fc7Model.prepare \u5bf9\u6a21\u578b\u8fdb\u884c\u914d\u7f6e\uff0c\u9009\u62e9\u5408\u9002\u7684\u4f18\u5316\u5668\uff0closs\uff0c\u7cbe\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u7b49 model . prepare ( optimizer = paddle . optimizer . Adam ( parameters = model . parameters ()), loss = paddle . nn . CrossEntropyLoss (), metrics = paddle . metric . Accuracy ()) # 1.3 \u8bad\u7ec3\u6a21\u578b Model.fit() model . fit ( train_dataset , # \u6307\u5b9a\u8bad\u7ec3\u6570\u636e\u96c6 epochs = 5 , # \u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21 batch_size = 64 , # \uff0c\u8bbe\u7f6e\u6bcf\u6b21\u6570\u636e\u96c6\u8ba1\u7b97\u7684\u6279\u6b21\u5927\u5c0f verbose = 1 ) # \u8bbe\u7f6e\u65e5\u5fd7\u683c\u5f0f # 1.4 \u8bc4\u4f30\u6a21\u578b\uff0cModel.evaluate() eval_result = model . evaluate ( test_dataset , verbose = 1 ) # \u8fd4\u56de\u8bc4\u4f30\u7684\u5b57\u5178\uff0c\u5305\u542b\u6307\u6807\u662f\u6309\u7167prepare\u4e2d\u5b9a\u4e49\u7684\u8fd4\u56de\uff0c{'loss':xxx}/{'loss':xxx,'metric name1':xxx,'metric name2':xxx} # 1.5 \u6a21\u578b\u63a8\u7406 test_result = model . predict ( test_dataset ) # \u8fd4\u56de\u683c\u5f0f\u662f\u4e00\u4e2alist\uff0c\u5143\u7d20\u6570\u76ee\u5bf9\u5e94\u6a21\u578b\u7684\u8f93\u51fa\u6570\u76ee\uff0c\u5982\u679c\u662f\u591a\u8f93\u51fa\uff0c\u5c31\u662flist\u5305\u88f9\u591a\u4e2a\u8f93\u51fa\uff0c\u5355\u8f93\u51fa\u5c31\u662flist\u5305\u88f9\u5355\u4e2a\u8f93\u51fa # \u7b2c\u4e8c\u79cd\u65b9\u5f0f net . train () # \u5f00\u542f\u8bad\u7ec3\u6a21\u5f0f optim = paddle . optimizer . Adam ( parameters = net . parameters ()) # \u8bbe\u7f6e\u4f18\u5316\u5668 loss_fn = paddle . nn . CrossEntropyLoss () # \u8bbe\u7f6e\u635f\u5931\u51fd\u6570 for epoch in range ( epochs ): for batch_id , ( x_data , y_data ) in enumerate ( train_loader ()): predicts = mnist ( x_data ) # \u9884\u6d4b\u7ed3\u679c acc = paddle . metric . accuracy ( predicts , y_data ) # \u8ba1\u7b97\u7cbe\u5ea6 loss . backward () # \u53cd\u5411\u4f20\u64ad if ( batch_id + 1 ) % 100 == 0 : print ( f \"batch_id: {} loss: { loss . numpy () } acc: { acc . numpy () } \" ) optim . step () # \u66f4\u65b0\u53c2\u6570 optim . clear_grad () net . eval () # \u5f00\u542f\u9a8c\u8bc1\u6a21\u5f0f for batch_id , ( x_data , y_data ) in enumerate ( test_loader ()): predicts = mnist ( x_data ) # \u9884\u6d4b\u7ed3\u679c acc = paddle . metric . accuracy ( predicts , y_data ) # \u9884\u6d4b\u7cbe\u5ea6 print ( acc . numpy ()) \u81ea\u52a8\u6df7\u5408\u8bad\u7ec3 \u00b6 paddle.amp.auto_cast \u548c paddle.amp.GradScaler \u80fd\u591f\u5b9e\u73b0\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 import paddle model = xxx optimizer = paddle . optimizer . SGD ( learning_rate = 0.0001 , parameters = model . parameters ()) # Step1\uff1a\u5b9a\u4e49 GradScaler\uff0c\u7528\u4e8e\u7f29\u653eloss\u6bd4\u4f8b\uff0c\u907f\u514d\u6d6e\u70b9\u6570\u6ea2\u51fa scaler = paddle . amp . GradScaler ( init_loss_scaling = 1024 ) for epoch in range ( epochs ): for i , ( data , label ) in enumerate ( zip ( train_data , labels )): # Step2\uff1a\u521b\u5efaAMP\u4e0a\u4e0b\u6587\u73af\u5883\uff0c\u5f00\u542f\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 with paddle . amp . auto_cast (): output = model ( data ) loss = mse ( output , label ) # Step3\uff1a\u4f7f\u7528 Step1\u4e2d\u5b9a\u4e49\u7684 GradScaler \u5b8c\u6210loss\u7684\u7f29\u653e\uff0c\u7528\u7f29\u653e\u540e\u7684loss\u8fdb\u884c\u53cd\u5411\u4f20\u64ad scaled = scaler . scale ( loss ) scaled . backward () # \u8bad\u7ec3\u6a21\u578b scaler . minimize ( optimizer , scaled ) optimizer . clear_grad () \u8fdb\u9636\u7528\u6cd5\uff0c\u68af\u5ea6\u7d2f\u52a0 :\u591a\u6b21\u5faa\u73af\u540e\u68af\u5ea6\u4e0d\u65ad\u7d2f\u52a0\uff0c\u76f4\u81f3\u8fbe\u5230\u4e00\u5b9a\u6b21\u6570\u540e\uff0c\u7528\u7d2f\u52a0\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u8d77\u5230\u53d8\u76f8\u6269\u5927 batch_size \u7684\u4f5c\u7528\u3002 import paddle model = xxx optimizer = paddle . optimizer . SGD ( learning_rate = 0.0001 , parameters = model . parameters ()) accumulate_batchs_num = 10 # \u68af\u5ea6\u7d2f\u52a0\u4e2d batch \u7684\u6570\u91cf # Step1\uff1a\u5b9a\u4e49 GradScaler\uff0c\u7528\u4e8e\u7f29\u653eloss\u6bd4\u4f8b\uff0c\u907f\u514d\u6d6e\u70b9\u6570\u6ea2\u51fa scaler = paddle . amp . GradScaler ( init_loss_scaling = 1024 ) for epoch in range ( epochs ): for i , ( data , label ) in enumerate ( zip ( train_data , labels )): # Step2\uff1a\u521b\u5efaAMP\u4e0a\u4e0b\u6587\u73af\u5883\uff0c\u5f00\u542f\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 with paddle . amp . auto_cast (): output = model ( data ) loss = mse ( output , label ) # Step3\uff1a\u4f7f\u7528 Step1\u4e2d\u5b9a\u4e49\u7684 GradScaler \u5b8c\u6210loss\u7684\u7f29\u653e\uff0c\u7528\u7f29\u653e\u540e\u7684loss\u8fdb\u884c\u53cd\u5411\u4f20\u64ad scaled = scaler . scale ( loss ) scaled . backward () # \u8bad\u7ec3\u6a21\u578b,\u6bcf\u7d2f\u52a010\u4e2abatch\u624d\u8fdb\u884c\u66f4\u65b0\uff0c\u5e76\u6e05\u9664\u68af\u5ea6 if ( i + 1 ) % accumulate_batchs_num == 0 : scaler . minimize ( optimizer , scaled ) optimizer . clear_grad () \u591a\u5361\u3001\u5206\u5e03\u5f0f\u8bad\u7ec3 \u00b6 \u5355\u673a\u591a\u5361\u8bad\u7ec3 \u5f53\u4f7f\u7528\u65b9\u5f0f\u4e00: paddle.Model\u5c01\u88c5 \u6765\u8bad\u7ec3\u65f6 \uff0c\u60f3\u8981\u542f\u52a8\u5355\u673a\u591a\u5361\u8bad\u7ec3\u975e\u5e38\u7b80\u5355\uff0c\u4ee3\u7801\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u65f6\u589e\u52a0\u4e00\u4e0b\u53c2\u6570 -m paddle.distributed.launch \u3002 # \u5355\u673a\u5355\u5361\u542f\u52a8\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7b2c0\u53f7\u5361 $ python train.py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u53ef\u89c1\u7684\u6240\u6709\u5361 $ python -m paddle.distributed.launch train.py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7684\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ python -m paddle.distributed.launch --gpus = '0,1' train.py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ export CUDA_VISIBLE_DEVICES = 0 ,1 $ python -m paddle.distributed.launch train.py \u5f53\u4f7f\u7528\u65b9\u5f0f\u4e8c:\u57fa\u7840API\u65f6\uff0c\u5355\u673a\u591a\u5361\u4ee3\u7801\u5982\u4e0b import paddle # \u7b2c1\u5904\u6539\u52a8 \u5bfc\u5165\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u9700\u7684\u5305 import paddle.distributed as dist net = xxx train_dataset , test_dataset = xxx , xxx # \u7b2c2\u5904\u6539\u52a8\uff0c\u521d\u59cb\u5316\u5e76\u884c\u73af\u5883,\u6ce8\u610f\uff1a\u5355\u5361\u8bad\u7ec3\u4e0d\u652f\u6301\u8c03\u7528init_parallel_env dist . init_parallel_env () # \u7b2c3\u5904\u6539\u52a8\uff0c\u589e\u52a0paddle.DataParallel\u5c01\u88c5 net = paddle . DataParallel ( net ) net . train () .... # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u53ef\u89c1\u7684\u6240\u6709\u5361 $ python - m paddle . distributed . launch train . py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7684\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ python - m paddle . distributed . launch -- gpus '0,1' train . py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ export CUDA_VISIBLE_DEVICES = 0 , 1 $ python - m paddle . distributed . launch train . py \u5206\u5e03\u5f0f\u8bad\u7ec3 \u63a8\u8350\u4f7f\u7528Fleet API\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3 \u7b14\u8bb0 \u591a\u8fdb\u7a0b\u5904\u7406 \u00b6 import paddle import paddle.nn as nn import paddle.optimizer as opt import paddle.distributed as dist def train ( print_result = False ): # \u4e0a\u9762\u7684\u8bad\u7ec3\u6b65\u9aa4\uff0c\u5355\u5361\u6216\u8005\u591a\u5361\u90fd\u884c # \u4e3e\u4f8b\u5982\u4e0b\uff1a dist . init_parallel_env () # 1. \u521d\u59cb\u5316\u5e76\u884c\u8bad\u7ec3\u73af\u5883 model = xx labels = xx loss_fn = nn . MSELoss () adam = opt . Adam ( learning_rate = 0.001 , parameters = model . parameters ()) loss = loss_fn ( paddle . randn ([ n , 3 , 224 , 224 ], 'float32' ), labels ) if print_result is True : print ( \"loss:\" , loss . numpy ()) loss . backward () adam . step () adam . clear_grad () # \u4f7f\u7528\u65b9\u5f0f1\uff1a\u4ec5\u4f20\u5165\u8bad\u7ec3\u51fd\u6570 # \u9002\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u4e0d\u9700\u8981\u4efb\u4f55\u53c2\u6570\uff0c\u5e76\u4e14\u9700\u8981\u4f7f\u7528\u6240\u6709\u5f53\u524d\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3 if __name__ == '__main__' : dist . spawn ( train ) # \u4f7f\u7528\u65b9\u5f0f2\uff1a\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\u548c\u53c2\u6570 # \u9002\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u9700\u8981\u4e00\u4e9b\u53c2\u6570\uff0c\u5e76\u4e14\u9700\u8981\u4f7f\u7528\u6240\u6709\u5f53\u524d\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3 if __name__ == '__main__' : dist . spawn ( train , args = ( True ,)) # \u4f7f\u7528\u65b9\u5f0f3\uff1a\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\u3001\u53c2\u6570\u5e76\u6307\u5b9a\u5e76\u884c\u8fdb\u7a0b\u6570 # \u9002\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u9700\u8981\u4e00\u4e9b\u53c2\u6570\uff0c\u5e76\u4e14\u4ec5\u9700\u8981\u4f7f\u7528\u90e8\u5206\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3\uff0c\u4f8b\u5982\uff1a # \u5f53\u524d\u673a\u5668\u67098\u5f20GPU\u5361 {0,1,2,3,4,5,6,7}\uff0c\u6b64\u65f6\u4f1a\u4f7f\u7528\u524d\u4e24\u5f20\u5361 {0,1}\uff1b # \u6216\u8005\u5f53\u524d\u673a\u5668\u901a\u8fc7\u914d\u7f6e\u73af\u5883\u53d8\u91cf CUDA_VISIBLE_DEVICES=4,5,6,7\uff0c\u4ec5\u4f7f4\u5f20 # GPU\u5361\u53ef\u89c1\uff0c\u6b64\u65f6\u4f1a\u4f7f\u7528\u53ef\u89c1\u7684\u524d\u4e24\u5f20\u5361 {4,5} if __name__ == '__main__' : dist . spawn ( train , args = ( True ,), nprocs = 2 ) # \u4f7f\u7528\u65b9\u5f0f4\uff1a\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\u3001\u53c2\u6570\u3001\u6307\u5b9a\u8fdb\u7a0b\u6570\u5e76\u6307\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u5361\u53f7 # \u4f7f\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u9700\u8981\u4e00\u4e9b\u53c2\u6570\uff0c\u5e76\u4e14\u4ec5\u9700\u8981\u4f7f\u7528\u90e8\u5206\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3\uff0c\u4f46\u662f # \u53ef\u80fd\u7531\u4e8e\u6743\u9650\u95ee\u9898\uff0c\u65e0\u6743\u914d\u7f6e\u5f53\u524d\u673a\u5668\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a\u5f53\u524d\u673a\u5668\u67098\u5f20GPU\u5361 # {0,1,2,3,4,5,6,7}\uff0c\u4f46\u4f60\u65e0\u6743\u914d\u7f6eCUDA_VISIBLE_DEVICES\uff0c\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7 # \u6307\u5b9a\u53c2\u6570 gpus \u9009\u62e9\u5e0c\u671b\u4f7f\u7528\u7684\u5361\uff0c\u4f8b\u5982 gpus='4,5'\uff0c # \u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u7b2c4\u53f7\u5361\u548c\u7b2c5\u53f7\u5361 if __name__ == '__main__' : dist . spawn ( train , nprocs = 2 , gpus = '4,5' ) \u81ea\u5b9a\u4e49\u6307\u6807+\u53ec\u56de\u51fd\u6570(\u94a9\u5b50\u51fd\u6570) \u00b6 \u81ea\u5b9a\u4e49loss \uff1a\u7ee7\u627f paddle.nn.Layer \u4f46\u9700\u8981\u5b9e\u73b0\u5176 __init__\u3001forward() \u51fd\u6570 class SoftmaxWithCrossEntropy ( paddle . nn . Layer ): def __init__ ( self ): super ( SoftmaxWithCrossEntropy , self ) . __init__ () def forward ( self , input , label ): loss = F . softmax_with_cross_entropy ( input , label , return_softmax = False , axis = 1 ) return paddle . mean ( loss ) **\u81ea\u5b9a\u4e49Metric**\u8bc4\u4f30\u65b9\u6cd5| \u4e3e\u4f8b\u5b50code class SelfDefineMetric ( paddle . metric . Metric ): \"\"\" 1. \u7ee7\u627fpaddle.metric.Metric \"\"\" def __init__ ( self ): \"\"\" 2. \u6784\u9020\u51fd\u6570\u5b9e\u73b0\uff0c\u81ea\u5b9a\u4e49\u53c2\u6570\u5373\u53ef \"\"\" super ( SelfDefineMetric , self ) . __init__ () def name ( self ): \"\"\" 3. \u5b9e\u73b0name\u65b9\u6cd5\uff0c\u8fd4\u56de\u5b9a\u4e49\u7684\u8bc4\u4f30\u6307\u6807\u540d\u5b57 \"\"\" return '\u81ea\u5b9a\u4e49\u8bc4\u4ef7\u6307\u6807\u7684\u540d\u5b57' def compute ( self , ... ) \"\"\" 4. \u672c\u6b65\u9aa4\u53ef\u4ee5\u7701\u7565\uff0c\u5b9e\u73b0compute\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e`update`\u7684\u52a0\u901f\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e00\u4e9bpaddle\u5b9e\u73b0\u597d\u7684Tensor\u8ba1\u7b97API\uff0c\u7f16\u8bd1\u5230\u6a21\u578b\u7f51\u7edc\u4e2d\u4e00\u8d77\u4f7f\u7528\u4f4e\u5c42C++ OP\u8ba1\u7b97\u3002 \"\"\" return \u81ea\u5df1\u60f3\u8981\u8fd4\u56de\u7684\u6570\u636e \uff0c \u4f1a\u505a\u4e3aupdate\u7684\u53c2\u6570\u4f20\u5165 \u3002 def update ( self , ... ): \"\"\" 5. \u5b9e\u73b0update\u65b9\u6cd5\uff0c\u7528\u4e8e\u5355\u4e2abatch\u8bad\u7ec3\u65f6\u8fdb\u884c\u8bc4\u4f30\u6307\u6807\u8ba1\u7b97\u3002 - \u5f53`compute`\u7c7b\u51fd\u6570\u672a\u5b9e\u73b0\u65f6\uff0c\u4f1a\u5c06\u6a21\u578b\u7684\u8ba1\u7b97\u8f93\u51fa\u548c\u6807\u7b7e\u6570\u636e\u7684\u5c55\u5e73\u4f5c\u4e3a`update`\u7684\u53c2\u6570\u4f20\u5165\u3002 - \u5f53`compute`\u7c7b\u51fd\u6570\u505a\u4e86\u5b9e\u73b0\u65f6\uff0c\u4f1a\u5c06compute\u7684\u8fd4\u56de\u7ed3\u679c\u4f5c\u4e3a`update`\u7684\u53c2\u6570\u4f20\u5165\u3002 \"\"\" return acc value def accumulate ( self ): \"\"\" 6. \u5b9e\u73b0accumulate\u65b9\u6cd5\uff0c\u8fd4\u56de\u5386\u53f2batch\u8bad\u7ec3\u79ef\u7d2f\u540e\u8ba1\u7b97\u5f97\u5230\u7684\u8bc4\u4ef7\u6307\u6807\u503c\u3002 \u6bcf\u6b21`update`\u8c03\u7528\u65f6\u8fdb\u884c\u6570\u636e\u79ef\u7d2f\uff0c`accumulate`\u8ba1\u7b97\u65f6\u5bf9\u79ef\u7d2f\u7684\u6240\u6709\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5e76\u8fd4\u56de\u3002 \u7ed3\u7b97\u7ed3\u679c\u4f1a\u5728`fit`\u63a5\u53e3\u7684\u8bad\u7ec3\u65e5\u5fd7\u4e2d\u5448\u73b0\u3002 \"\"\" # \u5229\u7528update\u4e2d\u79ef\u7d2f\u7684\u6210\u5458\u53d8\u91cf\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u540e\u8fd4\u56de return accumulated acc value def reset ( self ): \"\"\" 7. \u5b9e\u73b0reset\u65b9\u6cd5\uff0c\u6bcf\u4e2aEpoch\u7ed3\u675f\u540e\u8fdb\u884c\u8bc4\u4f30\u6307\u6807\u7684\u91cd\u7f6e\uff0c\u8fd9\u6837\u4e0b\u4e2aEpoch\u53ef\u4ee5\u91cd\u65b0\u8fdb\u884c\u8ba1\u7b97\u3002 \"\"\" # do reset action \u81ea\u5b9a\u4e49callback \uff1a\u7528\u6765\u5728\u6bcf\u8f6e\u8bad\u7ec3\u548c\u6bcf\u4e2a batch \u8bad\u7ec3\u524d\u540e\u8fdb\u884c\u8c03\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7 callback \u6536\u96c6\u5230\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u6570\u636e\u548c\u53c2\u6570\uff0c\u6216\u8005\u5b9e\u73b0\u4e00\u4e9b\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002 class SelfDefineCallback ( paddle . callbacks . Callback ): \"\"\" 1. \u7ee7\u627fpaddle.callbacks.Callback 2. \u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u5b9e\u73b0\u4ee5\u4e0b\u7c7b\u6210\u5458\u65b9\u6cd5\uff1a def on_train_begin(self, logs=None) \u8bad\u7ec3\u5f00\u59cb\u524d\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_train_end(self, logs=None) \u8bad\u7ec3\u7ed3\u675f\u540e\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_eval_begin(self, logs=None) \u8bc4\u4f30\u5f00\u59cb\u524d\uff0c`Model.evaluate`\u63a5\u53e3\u8c03\u7528 def on_eval_end(self, logs=None) \u8bc4\u4f30\u7ed3\u675f\u540e\uff0c`Model.evaluate`\u63a5\u53e3\u8c03\u7528 def on_predict_begin(self, logs=None) \u9884\u6d4b\u6d4b\u8bd5\u5f00\u59cb\u524d\uff0c`Model.predict`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_predict_end(self, logs=None) \u9884\u6d4b\u6d4b\u8bd5\u7ed3\u675f\u540e\uff0c`Model.predict`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_epoch_begin(self, epoch, logs=None) \u6bcf\u8f6e\u8bad\u7ec3\u5f00\u59cb\u524d\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_epoch_end(self, epoch, logs=None) \u6bcf\u8f6e\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 # \u5355\u4e2aBatch\u8bad\u7ec3\u5f00\u59cb\u524d\uff0c`Model.fit`\u548c`Model.train_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_train_batch_begin(self, step, logs=None) # \u5355\u4e2aBatch\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c`Model.fit`\u548c`Model.train_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_train_batch_end(self, step, logs=None) # \u5355\u4e2aBatch\u8bc4\u4f30\u5f00\u59cb\u524d\uff0c`Model.evalute`\u548c`Model.eval_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_eval_batch_begin(self, step, logs=None) # \u5355\u4e2aBatch\u8bc4\u4f30\u7ed3\u675f\u540e\uff0c`Model.evalute`\u548c`Model.eval_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_eval_batch_end(self, step, logs=None) # \u5355\u4e2aBatch\u9884\u6d4b\u6d4b\u8bd5\u5f00\u59cb\u524d\uff0c`Model.predict`\u548c`Model.test_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_predict_batch_begin(self, step, logs=None) # \u5355\u4e2aBatch\u9884\u6d4b\u6d4b\u8bd5\u7ed3\u675f\u540e\uff0c`Model.predict`\u548c`Model.test_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_predict_batch_end(self, step, logs=None) \"\"\" def __init__ ( self ): super ( SelfDefineCallback , self ) . __init__ () # \u6309\u7167\u9700\u6c42\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u6210\u5458\u65b9\u6cd5 # \u4e3e\u4f8b\u5b50 class ModelCheckpoint ( Callback ): def __init__ ( self , save_freq = 1 , save_dir = None ): self . save_freq = save_freq self . save_dir = save_dir def on_epoch_begin ( self , epoch = None , logs = None ): self . epoch = epoch def _is_save ( self ): return self . model and self . save_dir and ParallelEnv () . local_rank == 0 def on_epoch_end ( self , epoch , logs = None ): if self . _is_save () and self . epoch % self . save_freq == 0 : path = ' {} / {} ' . format ( self . save_dir , epoch ) print ( 'save checkpoint at {} ' . format ( os . path . abspath ( path ))) self . model . save ( path ) def on_train_end ( self , logs = None ): if self . _is_save (): path = ' {} /final' . format ( self . save_dir ) print ( 'save checkpoint at {} ' . format ( os . path . abspath ( path ))) self . model . save ( path ) \u6a21\u578b\u5b58\u50a8\u4e0e\u52a0\u8f7d \u00b6 \u65e7\u7248\u672c\u548c\u65b0\u7248\u672c(v2.0+)\u517c\u5bb9\u7684\u6a21\u578b\u52a0\u8f7d \u53ea\u5b58\u50a8\u53c2\u6570\uff0c\u7528\u4e8e\u8bad\u7ec3\u8c03\u4f18 # 1.1 \u53c2\u6570\u5b58\u50a8 save,\u5c06state_dict\u5b58\u50a8\u81f3\u78c1\u76d8 paddle . save ( net . state_dict (), \"linear_net.pdparams\" ) paddle . save ( adam . state_dict (), \"adam.pdopt\" ) # 1.2 \u53c2\u6570\u8f7d\u5165 load,\u7531\u78c1\u76d8\u914d\u7f6e\u5230\u76ee\u6807\u5bf9\u8c61\u4e2d layer_state_dict = paddle . load ( \"linear_net.pdparams\" ) opt_state_dict = paddle . load ( \"adam.pdopt\" ) net . set_state_dict ( layer_state_dict ) adam . set_state_dict ( opt_state_dict ) \u540c\u65f6\u5b58\u50a8/\u8f7d\u5165\u6a21\u578b\u7ed3\u6784\u548c\u53c2\u6570 \uff1a\u53ef\u4ee5\u4f7f\u7528 paddle.jit.save/load \u5b9e\u73b0 \u52a8\u8f6c\u9759\u8bad\u7ec3 + \u6a21\u578b&\u53c2\u6570\u5b58\u50a8\uff1a\u52a8\u8f6c\u9759\u8bad\u7ec3\u76f8\u6bd4\u76f4\u63a5\u4f7f\u7528\u52a8\u6001\u56fe\u8bad\u7ec3\u5177\u6709\u66f4\u597d\u7684\u6267\u884c\u6027\u80fd # 1.net\u7684\u5b9e\u73b0\u65f6\uff0cforward\u65b9\u6cd5\u9700\u8981\u7ecf\u7531 paddle.jit.to_static \u88c5\u9970\uff0c\u7ecf\u8fc7\u88c5\u65f6\u540e\uff0c\u4f1a\u5148\u751f\u6210\u63cf\u8ff0\u6a21\u578b\u7684Program\uff0c\u7136\u540e\u901a\u8fc7\u6267\u884cProgram\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) # \u82e5\u6700\u7ec8\u9700\u8981\u751f\u6210\u7684\u63cf\u8ff0\u6a21\u578b\u7684Program\u652f\u6301\u52a8\u6001\u8f93\u5165\uff0c\u53ef\u4ee5\u540c\u65f6\u6307\u660e\u6a21\u578b\u7684 InputSepc # @paddle.jit.to_static(input_spec=[InputSpec(shape=[None, 784], dtype='float32')]) @paddle . jit . to_static def forward ( self , x ): return self . _linear ( x ) # 2. \u786e\u4fddLayer.forward\u65b9\u6cd5\u4e2d\u4ec5\u5b9e\u73b0\u9884\u6d4b\u529f\u80fd\uff0c\u907f\u514d\u5c06\u8bad\u7ec3\u6240\u9700\u7684loss\u8ba1\u7b97\u903b\u8f91\u5199\u5165forward\u65b9\u6cd5,\u5c31\u662f\u4e0d\u8981\u518dforward\u91cc\u9762\u8ba1\u7b97loss\uff0c\u4f1a\u589e\u5927Layer\u4f7f\u7528\u7684\u590d\u6742\u6027\uff0c\u8981\u4fdd\u6301\u7b80\u6d01\u6027 # 3. \u5982\u679c\u4f60\u9700\u8981\u5b58\u50a8\u591a\u4e2a\u65b9\u6cd5\uff0c\u9700\u8981\u7528 paddle.jit.to_static \u88c5\u9970\u6bcf\u4e00\u4e2a\u9700\u8981\u88ab\u5b58\u50a8\u7684\u65b9\u6cd5\uff0c\u547d\u540d\u89c4\u5219\uff1aforward\u7684\u6a21\u578b\u540d\u5b57\u4e3a\uff1a\u6a21\u578b\u540d+\u540e\u7f00\uff0c\u5176\u4ed6\u51fd\u6570\u7684\u6a21\u578b\u540d\u5b57\u4e3a\uff1a\u6a21\u578b\u540d+\u51fd\u6570\u540d+\u540e\u7f00\u3002\u6bcf\u4e2a\u51fd\u6570\u6709\u5404\u81ea\u7684pdmodel\u548cpdiparams\u7684\u6587\u4ef6\uff0c\u6240\u6709\u51fd\u6570\u5171\u7528pdiparams.info\u3002 class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) self . _linear_2 = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) # \u547d\u540d\u89c4\u5219:net.pdiparams,net.pdmodel @paddle . jit . to_static ( input_spec = [ InputSpec ( shape = [ None , IMAGE_SIZE ], dtype = 'float32' )]) def forward ( self , x ): return self . _linear ( x ) # \u547d\u540d\u89c4\u5219:net.another_forward.pdiparams,net.another_forward.pdmodel @paddle . jit . to_static ( input_spec = [ InputSpec ( shape = [ None , IMAGE_SIZE ], dtype = 'float32' )]) def another_forward ( self , x ): return self . _linear_2 ( x ) # 4.\u5982\u4f55\u5b58\u50a8 path = \"example.model/linear\" paddle . jit . save ( net , path ) \u52a8\u6001\u56fe\u8bad\u7ec3 + \u6a21\u578b&\u53c2\u6570\u5b58\u50a8\uff1a\u52a8\u6001\u56fe\u6a21\u5f0f\u76f8\u6bd4\u52a8\u8f6c\u9759\u6a21\u5f0f\u66f4\u52a0\u4fbf\u4e8e\u8c03\u8bd5\uff0c\u5982\u679c\u4f60\u4ecd\u9700\u8981\u4f7f\u7528\u52a8\u6001\u56fe\u76f4\u63a5\u8bad\u7ec3\uff0c\u4e5f\u53ef\u4ee5\u5728\u52a8\u6001\u56fe\u8bad\u7ec3\u5b8c\u6210\u540e\u8c03\u7528 paddle.jit.save \u76f4\u63a5\u5b58\u50a8\u6a21\u578b\u548c\u53c2\u6570\u3002 # save path = \"example.dy_model/linear\" paddle . jit . save ( layer = net , path = path , input_spec = [ InputSpec ( shape = [ None , 784 ], dtype = 'float32' )]) # 1.\u76f8\u6bd4\u52a8\u8f6c\u9759\u8bad\u7ec3\uff0cLayer\u5bf9\u8c61\u7684forward\u65b9\u6cd5\u4e0d\u9700\u8981\u989d\u5916\u88c5\u9970\uff0c\u4fdd\u6301\u539f\u5b9e\u73b0\u5373\u53ef # 2.\u4e0e\u52a8\u8f6c\u9759\u8bad\u7ec3\u76f8\u540c\uff0c\u8bf7\u786e\u4fddLayer.forward\u65b9\u6cd5\u4e2d\u4ec5\u5b9e\u73b0\u9884\u6d4b\u529f\u80fd\uff0c\u907f\u514d\u5c06\u8bad\u7ec3\u6240\u9700\u7684loss\u8ba1\u7b97\u903b\u8f91\u5199\u5165forward\u65b9\u6cd5 # 3.\u5728\u6700\u540e\u4f7f\u7528 paddle.jit.save \u65f6\uff0c\u9700\u8981\u6307\u5b9aLayer\u7684 InputSpec \uff0cLayer\u5bf9\u8c61forward\u65b9\u6cd5\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u5747\u9700\u8981\u5bf9\u5e94\u7684 InputSpec \u8fdb\u884c\u63cf\u8ff0\uff0c\u4e0d\u80fd\u7701\u7565\u3002\u8fd9\u91cc\u7684 input_spec \u53c2\u6570\u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u8f93\u5165 # 4.InputSpec \u5217\u8868:\u4f7f\u7528InputSpec\u63cf\u8ff0forward\u8f93\u5165\u53c2\u6570\u7684shape\uff0cdtype\u548cname\uff0cname\u4e00\u822c\u7701\u7565\uff1b input_spec = [ InputSpec ( shape = [ None , 784 ], dtype = 'float32' )] # \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528DataLoader\u5f97\u5230\u7684image\u4f5c\u4e3a\u8f93\u5165 paddle . jit . save ( layer = net , path = path , input_spec = [ image ]) \u6a21\u578b\u53c2\u6570\u548c\u7ed3\u6784\u8f7d\u5165\uff1a\u4f7f\u7528 paddle.jit.load \u8f7d\u5165\u5373\u53ef\uff0c\u8f7d\u5165\u540e\u5f97\u5230\u7684\u662f\u4e00\u4e2aLayer\u7684\u6d3e\u751f\u7c7b\u5bf9\u8c61 TranslatedLayer \uff0c TranslatedLayer \u5177\u6709Layer\u5177\u6709\u7684\u901a\u7528\u7279\u5f81\uff0c\u652f\u6301\u5207\u6362 train \u6216\u8005 eval \u6a21\u5f0f\uff0c\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8c03\u4f18\u6216\u8005\u9884\u6d4b\u3002 path = \"example.model/linear\" net = paddle . jit . load ( path ) # 1.\u6267\u884c\u63a8\u7406 net . eval () pred = net ( paddle . randn ([ 1 , IMAGE_SIZE ], 'float32' )) # 2.\u6267\u884c\u8bad\u7ec3 fine-tune net . train () .... # \u6b63\u5e38\u8bad\u7ec3\u6b65\u9aa4 # save after fine-tuning paddle . jit . save ( net , \"fine-tune.model/linear\" , input_spec = [ x ]) \u53ea\u8f7d\u5165\u6a21\u578b\u53c2\u6570\uff1a paddle.jit.save \u540c\u65f6\u4fdd\u5b58\u4e86\u6a21\u578b\u548c\u53c2\u6570\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4ece\u5b58\u50a8\u7ed3\u679c\u4e2d\u8f7d\u5165\u6a21\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 paddle.load \u63a5\u53e3\u8f7d\u5165\uff0c\u8fd4\u56de\u6240\u5b58\u50a8\u6a21\u578b\u7684state_dict # 1.\u5b9a\u4e49net\u7ed3\u6784 class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) @paddle . jit . to_static def forward ( self , x ): return self . _linear ( x ) # create network net = LinearNet () # load path = \"example.model/linear\" state_dict = paddle . load ( path ) # inference net . set_state_dict ( state_dict , use_structured_name = False ) net . eval () pred = net ( paddle . randn ([ 1 , IMAGE_SIZE ], 'float32' )) \u6a21\u578b\u8f6cONNX \u00b6 # \u4e3b\u8981\u4f7f\u7528paddle2onnx\u5e93 pip install paddle2onnx onnx onnxruntime - i https : // mirror . baidu . com / pypi / simple # \u5982\u679c\u7f51\u901f\u4e0d\u597d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6e90\u4e0b\u8f7d \u52a8\u6001\u56fe\u5bfc\u51faONNX import paddle from paddle import nn from paddle.static import InputSpec class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( 784 , 10 ) def forward ( self , x ): return self . _linear ( x ) # 1.export to ONNX layer = LinearNet () save_path = 'onnx.save/linear_net' x_spec = InputSpec ([ None , 784 ], 'float32' , 'x' ) paddle . onnx . export ( layer , save_path , input_spec = [ x_spec ]) # 2.check by ONNX import onnx onnx_file = save_path + '.onnx' onnx_model = onnx . load ( onnx_file ) onnx . checker . check_model ( onnx_model ) print ( 'The model is checked!' ) # 3.ONNXRuntime inference import numpy as np import onnxruntime x = np . random . random (( 2 , 784 )) . astype ( 'float32' ) # predict by ONNX Runtime ort_sess = onnxruntime . InferenceSession ( onnx_file ) ort_inputs = { ort_sess . get_inputs ()[ 0 ] . name : x } ort_outs = ort_sess . run ( None , ort_inputs ) print ( \"Exported model has been predicted by ONNXRuntime!\" ) # predict by Paddle layer . eval () paddle_outs = layer ( x ) # compare ONNX Runtime and Paddle results np . testing . assert_allclose ( ort_outs [ 0 ], paddle_outs . numpy (), rtol = 1.0 , atol = 1e-05 ) print ( \"The difference of results between ONNXRuntime and Paddle looks good!\" ) \u53ef\u89c6\u5316\u5de5\u5177VisualDL: \u7b14\u8bb0 \u00b6 \u63a8\u7406\u90e8\u7f72: \u7b14\u8bb0 \u00b6 Paddle-Lite\u7684\u4f7f\u7528 \u6a21\u578b\u538b\u7f29PaddleSlim:\u6a21\u578b\u88c1\u526a\u3001\u5b9a\u70b9\u91cf\u5316(\u5728\u7ebf/\u79bb\u7ebf)\u3001\u77e5\u8bc6\u84b8\u998f\u3001\u53c2\u6570/\u6a21\u578b\u7ed3\u6784\u641c\u7d22 Paddleslim\u4e2d\u6587\u6587\u6863 | PaddleSlim github \u5728\u7ebf\u91cf\u5316\u4f7f\u7528\u793a\u4f8b \u79bb\u7ebf\u91cf\u5316\u4f7f\u7528\u793a\u4f8b","title":"PaddlePaddle\u5feb\u901f\u6559\u7a0b"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_1","text":"\u73b0\u5728 PaddlePaddle \u4e3b\u63a8 v2.0+ \uff0c\u4e3b\u63a8\u52a8\u6001\u56fe\uff0c\u5f53\u7136\u52a8\u6001\u56fe\u4e5f\u80fd\u8f6c\u4e3a\u9759\u6001\u56fe\uff0c\u8f6c\u6362\u65b9\u5f0f \u7b14\u8bb0 \u52a8\u6001\u56fe\u548c\u9759\u6001\u56fe\u4e0d\u540c \u52a8\u6001\u56fe \u52a8\u6001\u56fe\u6709\u8bf8\u591a\u4f18\u70b9\uff0c\u5305\u62ec\u6613\u7528\u7684\u63a5\u53e3\uff0cPython\u98ce\u683c\u7684\u7f16\u7a0b\u4f53\u9a8c\uff0c\u53cb\u597d\u7684debug\u4ea4\u4e92\u673a\u5236\u7b49\u3002\u5728\u52a8\u6001\u56fe\u6a21\u5f0f\u4e0b\uff0c\u4ee3\u7801\u662f\u6309\u7167\u6211\u4eec\u7f16\u5199\u7684\u987a\u5e8f\u4f9d\u6b21\u6267\u884c\u3002\u8fd9\u79cd\u673a\u5236\u66f4\u7b26\u5408Python\u7a0b\u5e8f\u5458\u7684\u4e60 \u60ef\uff0c\u53ef\u4ee5\u5f88\u65b9\u4fbf\u5730\u5c06\u5927\u8111\u4e2d\u7684\u60f3\u6cd5\u5feb\u901f\u5730\u8f6c\u5316\u4e3a\u5b9e\u9645\u4ee3\u7801\uff0c\u4e5f\u66f4\u5bb9\u6613\u8c03\u8bd5\u3002 \u4f46\u5728\u6027\u80fd\u65b9\u9762\uff0c Python\u6267\u884c\u5f00\u9500\u8f83\u5927\uff0c\u4e0eC++\u6709\u4e00\u5b9a\u5dee\u8ddd\u3002\u56e0\u6b64\u5728\u5de5\u4e1a\u754c\u7684\u8bb8\u591a\u90e8\u7f72\u573a\u666f\u4e2d\uff08\u5982\u5927\u578b\u63a8\u8350\u7cfb\u7edf\u3001\u79fb\u52a8\u7aef\uff09\u90fd\u503e\u5411\u4e8e\u76f4\u63a5\u4f7f\u7528C++\u6765\u63d0\u901f\u3002 \u9759\u6001\u56fe \u9759\u6001\u56fe\u5728\u90e8\u7f72\u65b9\u9762\u66f4\u5177\u6709\u6027\u80fd\u7684\u4f18\u52bf\u3002\u9759\u6001\u56fe\u7a0b\u5e8f\u5728\u7f16\u8bd1\u6267\u884c\u65f6\uff0c\u5148\u642d\u5efa\u6a21\u578b \u7684\u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\uff0c\u7136\u540e\u518d\u5bf9\u795e\u7ecf\u7f51\u7edc\u6267\u884c\u8ba1\u7b97\u64cd\u4f5c\u3002\u9884\u5148\u642d\u5efa\u597d\u7684\u795e\u7ecf\u7f51\u7edc\u53ef\u4ee5\u8131\u79bbPython\u4f9d\u8d56\uff0c\u5728C++\u7aef\u88ab\u91cd\u65b0\u89e3\u6790\u6267\u884c\uff0c\u800c\u4e14\u62e5\u6709\u6574\u4f53\u7f51\u7edc\u7ed3\u6784\u4e5f\u80fd\u8fdb\u884c\u4e00\u4e9b\u7f51\u7edc\u7ed3\u6784\u7684\u4f18\u5316\u3002 \u52a8\u6001\u56fe\u4ee3\u7801\u66f4\u6613\u7f16\u5199\u548cdebug\uff0c\u4f46\u5728\u90e8\u7f72\u6027\u80fd\u4e0a\uff0c\u9759\u6001\u56fe\u66f4\u5177\u4f18\u52bf\u3002","title":"\u57fa\u672c\u7b80\u4ecb"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_2","text":"import paddle # 1.\u521b\u5efatensor # return -->Tensor(shape=[3], dtype=float64, place=CUDAPlace(0)/CPUPlace, stop_gradient=True,[2., 3., 4.]) # \u4e0a\u9762\u8fd9\u4e9b\u5c5e\u6027\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6\uff0c\u4f8b\u5982data.shape data = paddle . to_tensor ([ 2.0 , 3.0 , 4.0 ], dtype = 'float64' ) # \u9ed8\u8ba4\u521b\u5efafloat32\u7c7b\u578b cpu_tensor = paddle . to_tensor ( 1 , place = paddle . CPUPlace ()) # \u6570\u636e\u653e\u5728cpu\u4e0a gpu_tensor = paddle . to_tensor ( 1 , place = paddle . CUDAPlace ( 0 )) # \u6570\u636e\u653e\u5728gpu\u4e0a pin_memory_tensor = paddle . to_tensor ( 1 , place = paddle . CUDAPinnedPlace ()) # \u6570\u636e\u56fa\u5b9a\u5728\u5185\u5b58\u4e0a # 2.\u5e38\u7528\u5c5e\u6027 data . name # \u8be5tensor\u7684\u552f\u4e00id\uff0c\u662f\u72ec\u4e00\u65e0\u4e8c\u7684 # 'bool'\uff0c'float16'\uff0c'float32'\uff0c'float64'\uff0c'uint8'\uff0c'int8'\uff0c'int16'\uff0c'int32'\uff0c'int64' data . dtype # int64\u9ed8\u8ba4\uff0cfloat32\u9ed8\u8ba4\uff0cpaddle.cast(data, dtype='float64') # \u901a\u8fc7\u8be5\u51fd\u6570\u53ef\u4ee5\u6539\u53d8\u6570\u636e\u7c7b\u578b data . place # \u67e5\u770btensor\u5728cpu/gpu\u4e0a # paddle.to_tensor([1.0, 2.0, 3.0], stop_gradient=False) # \u5c06b\u8bbe\u7f6e\u4e3a\u9700\u8981\u8ba1\u7b97\u68af\u5ea6\u7684\u5c5e\u6027 data . stop_gradient # \u67e5\u770b\u4e00\u4e2aTensor\u662f\u5426\u8ba1\u7b97\u5e76\u4f20\u64ad\u68af\u5ea6,\u9ed8\u8ba4True:\u4e0d\u8ba1\u7b97\u68af\u5ea6\uff0cFalse\u8ba1\u7b97\u68af\u5ea6 data . shape # \u63cf\u8ff0\u4e86tensor\u7684\u6bcf\u4e2a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u7684\u6570\u91cf\uff0c\u5217\u8868 data . size # \u6307tensor\u4e2d\u5168\u90e8\u5143\u7d20\u7684\u4e2a\u6570 data . ndim # tensor\u7684\u7ef4\u5ea6\u6570\u91cf # axis\u6216\u8005dimension\uff1a\u6307tensor\u67d0\u4e2a\u7279\u5b9a\u7684\u7ef4\u5ea6 data . reshape ([ m , n , ... , - 1 ]) # 3.numpy\u548ctensor\u4e92\u76f8\u8f6c\u6362 data . numpy () # tensor->numpy,\u5e38\u7528\u6b64\u6765\u83b7\u53d6\u6570\u503c paddle . to_tensor ( np . array ([ 2.0 , 3.0 , 4.0 ]) . astype ( np . float32 )) # numpy->tensor # 4.\u5e38\u7528\u51fd\u6570 paddle . get_device () # \u8fd4\u56decp/gpu:0\u7b49\u5b57\u7b26\u4e32 paddle . zeros ([ m , n ]) # \u521b\u5efa\u6570\u636e\u5168\u4e3a0\uff0cshape\u4e3a[m, n]\u7684Tensor paddle . ones ([ m , n ]) # \u521b\u5efa\u6570\u636e\u5168\u4e3a1\uff0cshape\u4e3a[m, n]\u7684Tensor paddle . full ([ m , n ], 10 ) # \u521b\u5efa\u6570\u636e\u5168\u4e3a10\uff0cshape\u4e3a[m, n]\u7684Tensor paddle . arange ( start , end , step ) # \u521b\u5efa\u4ece[start,end]\uff0c\u6b65\u957f\u4e3astep\u7684Tensor paddle . linspace ( start , end , num ) # \u521b\u5efa\u4ecestart\u5230end\uff0c\u5143\u7d20\u4e2a\u6570\u56fa\u5b9a\u4e3anum\u7684Tensor,\u7b49\u8ddd\u5207\u5206 paddle . rand ( shape , dtype = None ) # \u8303\u56f4\u5728[0, 1)\u7684\u7b26\u5408\u5747\u5300\u5206\u5e03\u7684Tensor paddle . randn ( shape , dtype = None ) # \u6807\u51c6\u6b63\u6001\u5206\u5e03\uff08\u5747\u503c\u4e3a0\uff0c\u6807\u51c6\u5dee\u4e3a1\u7684\u6b63\u6001\u968f\u673a\u5206\u5e03\uff09\u7684\u968f\u673aTensor paddle . randint ( low = 0 , high = None , shape = [ 1 ], dtype = None ) # [low, high)\u7684\u968f\u673a\u5747\u5300\u5206\u5e03Tensor,\u5982\u679chigh=None,\u8303\u56f4\u662f[0,low) paddle . randperm ( n , dtype = None ) # [0,n-1]\u968f\u673a\u6392\u5217\u7684tensor paddle . sort ( x , axis =- 1 , descending = False ) # \u9ed8\u8ba4\u5347\u5e8f\uff0c\u7ed9\u5b9a\u7ef4\u5ea6\u6392\u5e8f\uff0c\u8fd4\u56de\u6392\u597d\u5e8f\u7684tensor paddle . transpose ( data , perm = [ 1 , 0 , 2 ]) # \u7ef4\u5ea6\u8f6c\u6362 paddle . squeeze ( a , axis = None ) # \u5220\u9664\u8f93\u5165Tensor\u7684Shape\u4e2d\u5c3a\u5bf8\u4e3a1\u7684\u7ef4\u5ea6,\u9ed8\u8ba4\u5168\u90e8\u5220\u9664 paddle . unsqueeze ( x , axes ) # \u5411\u8f93\u5165Tensor\u7684Shape\u4e2d\u4e00\u4e2a\u6216\u591a\u4e2a\u4f4d\u7f6e\uff08axis\uff09\u63d2\u5165\u5c3a\u5bf8\u4e3a1\u7684\u7ef4\u5ea6 paddle . where ( condition , x , y ) # condition=True->x,else y paddle . topk ( data , k = 3 ) # return (values,indexs) paddle . multiply ( x , y ) # x,y\u9010\u5143\u7d20\u76f8\u4e58\uff0cx/y\u7ef4\u5ea6\u76f8\u540c # 5.\u7d22\u5f15\u4e0e\u5207\u7247\uff0c\u540cnumpy\uff0c\u5207\u7247\u8d4b\u503c\u64cd\u4f5c\u4e5f\u662f\u76f8\u540c\u7684\uff0c\u4e14\u652f\u6301\u5e7f\u64ad\u673a\u5236 # 6.\u6570\u5b66\u8fd0\u7b97\u7b26\uff0cpaddle.add(data1,data2) == data1.add(data2)\uff0cPaddle\u4e2dTensor\u7684\u64cd\u4f5c\u7b26\u5747\u4e3a\u975einplace\u64cd\u4f5c\uff0c\u5fc5\u987b\u6709\u8fd4\u56de\u503c data . abs () #\u9010\u5143\u7d20\u53d6\u7edd\u5bf9\u503c data . ceil () #\u9010\u5143\u7d20\u5411\u4e0a\u53d6\u6574 data . floor () #\u9010\u5143\u7d20\u5411\u4e0b\u53d6\u6574 data . round () #\u9010\u5143\u7d20\u56db\u820d\u4e94\u5165 data . exp () #\u9010\u5143\u7d20\u8ba1\u7b97\u81ea\u7136\u5e38\u6570\u4e3a\u5e95\u7684\u6307\u6570 data . log () #\u9010\u5143\u7d20\u8ba1\u7b97x\u7684\u81ea\u7136\u5bf9\u6570 data . reciprocal () #\u9010\u5143\u7d20\u6c42\u5012\u6570 data . square () #\u9010\u5143\u7d20\u8ba1\u7b97\u5e73\u65b9 data . sqrt () #\u9010\u5143\u7d20\u8ba1\u7b97\u5e73\u65b9\u6839 data . sin () #\u9010\u5143\u7d20\u8ba1\u7b97\u6b63\u5f26 data . cos () #\u9010\u5143\u7d20\u8ba1\u7b97\u4f59\u5f26 data . add ( y ) #\u9010\u5143\u7d20\u76f8\u52a0 data . subtract ( y ) #\u9010\u5143\u7d20\u76f8\u51cf data . multiply ( y ) #\u9010\u5143\u7d20\u76f8\u4e58 data . divide ( y ) #\u9010\u5143\u7d20\u76f8\u9664 data . mod ( y ) #\u9010\u5143\u7d20\u76f8\u9664\u5e76\u53d6\u4f59 data . pow ( y ) #\u9010\u5143\u7d20\u5e42\u8fd0\u7b97 data . max () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u6700\u5927\u503c\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 data . min () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u6700\u5c0f\u503c\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 data . prod () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u7d2f\u4e58\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 data . sum () #\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u5143\u7d20\u7684\u548c\uff0c\u9ed8\u8ba4\u4e3a\u5168\u90e8\u7ef4\u5ea6 # \u4e0b\u9762\u7b80\u5316\u7248\u672c\u4e5f\u7b49\u4ef7 x + y -> x . add ( y ) #\u9010\u5143\u7d20\u76f8\u52a0 x - y -> x . subtract ( y ) #\u9010\u5143\u7d20\u76f8\u51cf x * y -> x . multiply ( y ) #\u9010\u5143\u7d20\u76f8\u4e58 x / y -> x . divide ( y ) #\u9010\u5143\u7d20\u76f8\u9664 x % y -> x . mod ( y ) #\u9010\u5143\u7d20\u76f8\u9664\u5e76\u53d6\u4f59 x ** y -> x . pow ( y ) #\u9010\u5143\u7d20\u5e42\u8fd0\u7b97 # 6.1 \u4e0b\u9762\u662f\u903b\u8f91\u8fd0\u7b97\u7b26 data . isfinite () #\u5224\u65adtensor\u4e2d\u5143\u7d20\u662f\u5426\u662f\u6709\u9650\u7684\u6570\u5b57\uff0c\u5373\u4e0d\u5305\u62ecinf\u4e0enan data . equal_all ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u5168\u90e8\u5143\u7d20\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u8fd4\u56deshape\u4e3a[1]\u7684bool Tensor data . equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u76f8\u7b49\uff0c\u5e76\u8fd4\u56deshape\u76f8\u540c\u7684bool Tensor data . not_equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u4e0d\u76f8\u7b49 data . less_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . less_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . greater_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . greater_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 data . allclose ( y ) #\u5224\u65adtensor x\u7684\u5168\u90e8\u5143\u7d20\u662f\u5426\u4e0etensor y\u7684\u5168\u90e8\u5143\u7d20\u63a5\u8fd1\uff0c\u5e76\u8fd4\u56deshape\u4e3a[1]\u7684bool Tensor # \u7b49\u4ef7\u64cd\u4f5c x == y -> x . equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u76f8\u7b49 x != y -> x . not_equal ( y ) #\u5224\u65ad\u4e24\u4e2atensor\u7684\u6bcf\u4e2a\u5143\u7d20\u662f\u5426\u4e0d\u76f8\u7b49 x < y -> x . less_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 x <= y -> x . less_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5c0f\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 x > y -> x . greater_than ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 x >= y -> x . greater_equal ( y ) #\u5224\u65adtensor x\u7684\u5143\u7d20\u662f\u5426\u5927\u4e8e\u6216\u7b49\u4e8etensor y\u7684\u5bf9\u5e94\u5143\u7d20 # 6.2 \u4e0b\u9762\u64cd\u4f5c\u4ec5\u9488\u5bf9bool\u578bTensor x . logical_and ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u4e0e\u64cd\u4f5c x . logical_or ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u6216\u64cd\u4f5c x . logical_xor ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u4ea6\u6216\u64cd\u4f5c x . logical_not ( y ) #\u5bf9\u4e24\u4e2abool\u578btensor\u9010\u5143\u7d20\u8fdb\u884c\u903b\u8f91\u975e\u64cd\u4f5c # 6.3 \u7ebf\u6027\u4ee3\u6570\u76f8\u5173 x . cholesky () #\u77e9\u9635\u7684cholesky\u5206\u89e3 x . t () #\u77e9\u9635\u8f6c\u7f6e x . transpose ([ 1 , 0 ]) #\u4ea4\u6362axis 0 \u4e0eaxis 1\u7684\u987a\u5e8f x . norm ( 'fro' ) #\u77e9\u9635\u7684Frobenius \u8303\u6570 x . dist ( y , p = 2 ) #\u77e9\u9635\uff08x-y\uff09\u76842\u8303\u6570 x . matmul ( y ) #\u77e9\u9635\u4e58\u6cd5 \u81ea\u52a8\u5fae\u5206 import paddle # 1.\u5c0f\u4f8b\u5b50 x = paddle . to_tensor ([ 1.0 , 2.0 , 3.0 ], stop_gradient = False ) y = paddle . to_tensor ([ 4.0 , 5.0 , 6.0 ], stop_gradient = False ) z = x ** 2 + 4 * y # \u9ed8\u8ba4\u4f1a\u91ca\u653e\u53cd\u5411\u8ba1\u7b97\u56fe\u3002\u5982\u679c\u5728backward()\u4e4b\u540e\u7ee7\u7eed\u6dfb\u52a0OP\uff0c\u9700\u8981\u5c06backward()\u4e2d\u7684retain_graph\u53c2\u6570\u8bbe\u7f6e\u4e3aTrue\uff0c\u6b64\u65f6\u4e4b\u524d\u7684\u53cd\u5411\u8ba1\u7b97\u56fe\u4f1a\u4fdd\u7559\u3002 z . backward () # z.backward(retain_graph=True) x . grad # 2x->[2.,4.,6.] y . grad # 4->[4.,4.,4.] # 2.backward()\u4f1a\u7d2f\u79ef\u68af\u5ea6\uff0c\u53ef\u4ee5\u4f7f\u7528clear_grad()\u51fd\u6570\u6765\u6e05\u9664\u5f53\u524dTensor\u7684\u68af\u5ea6 loss . backward () # print(loss.gradient()) # [1.0] loss . clear_grad () # print(loss.gradient()) # [0.0]","title":"\u57fa\u672c\u4f7f\u7528"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_3","text":"\u6570\u636e\u96c6\u7684\u5b9a\u4e49\u4e0e\u52a0\u8f7d import paddle from paddle.vision.transforms import ToTensor # 1.\u81ea\u8eab\u643a\u5e26\u6570\u636e print ( '\u89c6\u89c9\u76f8\u5173\u6570\u636e\u96c6\uff1a' , paddle . vision . datasets . __all__ ) print ( '\u81ea\u7136\u8bed\u8a00\u76f8\u5173\u6570\u636e\u96c6\uff1a' , paddle . text . datasets . __all__ ) #\u89c6\u89c9\u76f8\u5173\u6570\u636e\u96c6\uff1a ['DatasetFolder', 'ImageFolder', 'MNIST', 'FashionMNIST', 'Flowers', 'Cifar10', 'Cifar100', 'VOC2012'] #\u81ea\u7136\u8bed\u8a00\u76f8\u5173\u6570\u636e\u96c6\uff1a ['Conll05st', 'Imdb', 'Imikolov', 'Movielens', 'UCIHousing', 'WMT14', 'WMT16'] # \u4e3e\u4f8b\u8bf4\u660e\uff0c\u9ed8\u8ba4\u4e0b\u8f7d\u5230 ~/.cache/paddle/dataset train_dataset = paddle . vision . datasets . MNIST ( mode = 'train' , transform = ToTensor ()) val_dataset = paddle . vision . datasets . MNIST ( mode = 'test' , transform = ToTensor ()) # 2.\u81ea\u5b9a\u4e49\u6570\u636e\u96c6 paddle.io.Dataset\u57fa\u7c7b import paddle from paddle.io import Dataset class MyDataset ( Dataset ): \"\"\" \u6b65\u9aa4\u4e00\uff1a\u7ee7\u627fpaddle.io.Dataset\u7c7b \"\"\" def __init__ ( self , num_samples ): \"\"\" \u6b65\u9aa4\u4e8c\uff1a\u5b9e\u73b0\u6784\u9020\u51fd\u6570\uff0c\u5b9a\u4e49\u6570\u636e\u96c6\u5927\u5c0f \"\"\" super ( MyDataset , self ) . __init__ () self . num_samples = num_samples def __getitem__ ( self , index ): \"\"\" \u6b65\u9aa4\u4e09\uff1a\u5b9e\u73b0__getitem__\u65b9\u6cd5\uff0c\u5b9a\u4e49\u6307\u5b9aindex\u65f6\u5982\u4f55\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u8fd4\u56de\u5355\u6761\u6570\u636e\uff08\u8bad\u7ec3\u6570\u636e\uff0c\u5bf9\u5e94\u7684\u6807\u7b7e\uff09 \"\"\" data = paddle . uniform ( IMAGE_SIZE , dtype = 'float32' ) label = paddle . randint ( 0 , CLASS_NUM - 1 , dtype = 'int64' ) return data , label def __len__ ( self ): \"\"\" \u6b65\u9aa4\u56db\uff1a\u5b9e\u73b0__len__\u65b9\u6cd5\uff0c\u8fd4\u56de\u6570\u636e\u96c6\u603b\u6570\u76ee \"\"\" return self . num_samples custom_dataset = MyDataset ( BATCH_SIZE * BATCH_NUM ) # \u6d4b\u8bd5\u5b9a\u4e49\u7684\u6570\u636e\u96c6 # \u6570\u636e\u52a0\u8f7d,DataLoader \u9ed8\u8ba4\u7528\u5f02\u6b65\u52a0\u8f7d\u6570\u636e\u7684\u65b9\u5f0f\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u4e00\u65b9\u9762\u53ef\u4ee5\u63d0\u5347\u6570\u636e\u52a0\u8f7d\u7684\u901f\u5ea6\uff0c\u53e6\u4e00\u65b9\u9762\u4e5f\u4f1a\u5360\u636e\u66f4\u5c11\u7684\u5185\u5b58\u3002\u5982\u679c\u4f60\u9700\u8981\u540c\u65f6\u52a0\u8f7d\u5168\u90e8\u6570\u636e\u5230\u5185\u5b58\u4e2d\uff0c\u8bf7\u8bbe\u7f6euse_buffer_reader=False\u3002 train_loader = paddle . io . DataLoader ( custom_dataset , batch_size = BATCH_SIZE , shuffle = True ) # \u5982\u679c\u8981\u52a0\u8f7d\u5185\u7f6e\u6570\u636e\u96c6\uff0c\u5c06 custom_dataset \u6362\u4e3a train_dataset \u5373\u53ef for batch_id , ( x_data , y_data ) in enumerate ( train_loader ()): print ( x_data . shape , y_data . shape ) \u6570\u636e\u9884\u5904\u7406 import paddle # \u6570\u636e\u5904\u7406\u65b9\u6cd5\uff1a ['BaseTransform', 'Compose', 'Resize', 'RandomResizedCrop', 'CenterCrop', 'RandomHorizontalFlip', 'RandomVerticalFlip', 'Transpose', 'Normalize', 'BrightnessTransform', 'SaturationTransform', 'ContrastTransform', 'HueTransform', 'ColorJitter', 'RandomCrop', 'Pad', 'RandomRotation', 'Grayscale', 'ToTensor', 'to_tensor', 'hflip', 'vflip', 'resize', 'pad', 'rotate', 'to_grayscale', 'crop', 'center_crop', 'adjust_brightness', 'adjust_contrast', 'adjust_hue', 'normalize'] print ( '\u6570\u636e\u5904\u7406\u65b9\u6cd5\uff1a' , paddle . vision . transforms . __all__ ) # 1.\u4f7f\u7528\u5185\u7f6e\u7684transform\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7c7b\u4e2d\u76f4\u63a5\u5e94\u7528 from paddle.vision.transforms import Compose , Resize , ColorJitter # \u5b9a\u4e49\u60f3\u8981\u4f7f\u7528\u7684\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\uff0c\u8fd9\u91cc\u5305\u62ec\u968f\u673a\u8c03\u6574\u4eae\u5ea6\u3001\u5bf9\u6bd4\u5ea6\u548c\u9971\u548c\u5ea6\uff0c\u6539\u53d8\u56fe\u7247\u5927\u5c0f transform = Compose ([ ColorJitter (), Resize ( size = 32 ), ]) # \u901a\u8fc7transform\u53c2\u6570\u4f20\u9012\u5b9a\u4e49\u597d\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\u5373\u53ef\u5b8c\u6210\u5bf9\u81ea\u5e26\u6570\u636e\u96c6\u7684\u589e\u5f3a train_dataset = paddle . vision . datasets . MNIST ( mode = 'train' , transform = transform ) \u7f51\u7edc\u6784\u6210 import paddle # 1.Sequential \u7ec4\u7f51\uff1a\u9488\u5bf9\u987a\u5e8f\u7684\u7ebf\u6027\u7f51\u7edc\u7ed3\u6784 mnist = paddle . nn . Sequential ( paddle . nn . Flatten (), paddle . nn . Linear ( 784 , 512 ), paddle . nn . ReLU (), paddle . nn . Dropout ( 0.2 ), paddle . nn . Linear ( 512 , 10 ) ) # 2.SubClass\u7ec4\u7f51\uff0c\u9488\u5bf9\u4e00\u4e9b\u6bd4\u8f83\u590d\u6742\u7684\u7f51\u7edc\u7ed3\u6784\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528Layer\u5b50\u7c7b\u5b9a\u4e49\u7684\u65b9\u5f0f\u6765\u8fdb\u884c\u6a21\u578b\u4ee3\u7801\u7f16\u5199\uff0c\u5728__init__\u6784\u9020\u51fd\u6570\u4e2d\u8fdb\u884c\u7ec4\u7f51Layer\u7684\u58f0\u660e\uff0c\u5728forward\u4e2d\u4f7f\u7528\u58f0\u660e\u7684Layer\u53d8\u91cf\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\u3002\u5b50\u7c7b\u7ec4\u7f51\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u5b9e\u73b0sublayer\u7684\u590d\u7528\uff0c\u9488\u5bf9\u76f8\u540c\u7684layer\u53ef\u4ee5\u5728\u6784\u9020\u51fd\u6570\u4e2d\u4e00\u6b21\u6027\u5b9a\u4e49\uff0c\u5728forward\u4e2d\u591a\u6b21\u8c03\u7528\u3002 # Layer\u7c7b\u7ee7\u627f\u65b9\u5f0f\u7ec4\u7f51 class Mnist ( paddle . nn . Layer ): def __init__ ( self ): super ( Mnist , self ) . __init__ () self . flatten = paddle . nn . Flatten () self . linear_1 = paddle . nn . Linear ( 784 , 512 ) self . linear_2 = paddle . nn . Linear ( 512 , 10 ) self . relu = paddle . nn . ReLU () self . dropout = paddle . nn . Dropout ( 0.2 ) def forward ( self , inputs ): y = self . flatten ( inputs ) y = self . linear_1 ( y ) y = self . relu ( y ) y = self . dropout ( y ) y = self . linear_2 ( y ) return y mnist_2 = Mnist () # 3.\u4e0a\u56fe\u662f\u6846\u67b6\u5185\u7f6e\u6a21\u578b import paddle resnet = paddle . vision . models . resnet18 () paddle . summary ( resnet ,( 1 , 3 , 224 , 224 )) # \u6253\u5370\u7f51\u7edc\u7ed3\u6784 \u8bad\u7ec3\u4e0e\u9884\u6d4b \uff1a\u4e24\u79cd\u8bad\u7ec3\u65b9\u5f0f \u4e00\u79cd\u662f\u7528 paddle.Model \u5bf9\u6a21\u578b\u8fdb\u884c\u5c01\u88c5\uff0c\u901a\u8fc7\u9ad8\u5c42API\u5982 Model.fit()\u3001Model.evaluate()\u3001Model.predict() \u7b49\u5b8c\u6210\u6a21\u578b\u7684\u8bad\u7ec3\u4e0e\u9884\u6d4b\uff1b \u53e6\u4e00\u79cd\u5c31\u662f\u57fa\u4e8e\u57fa\u7840 API \u5e38\u89c4\u7684\u8bad\u7ec3\u65b9\u5f0f\u3002 net = xxx train_dataset , test_dataset = xxx , xxx # \u7b2c\u4e00\u79cd\u65b9\u5f0f # 1.1 \u4f7f\u7528paddle.Model\u5bf9\u6a21\u578b\u8fdb\u884c\u5c01\u88c5 model = paddle . Model ( net ) # 1.2 \u901a\u8fc7Model.prepare \u5bf9\u6a21\u578b\u8fdb\u884c\u914d\u7f6e\uff0c\u9009\u62e9\u5408\u9002\u7684\u4f18\u5316\u5668\uff0closs\uff0c\u7cbe\u5ea6\u8ba1\u7b97\u65b9\u6cd5\u7b49 model . prepare ( optimizer = paddle . optimizer . Adam ( parameters = model . parameters ()), loss = paddle . nn . CrossEntropyLoss (), metrics = paddle . metric . Accuracy ()) # 1.3 \u8bad\u7ec3\u6a21\u578b Model.fit() model . fit ( train_dataset , # \u6307\u5b9a\u8bad\u7ec3\u6570\u636e\u96c6 epochs = 5 , # \u8bbe\u7f6e\u8bad\u7ec3\u8f6e\u6b21 batch_size = 64 , # \uff0c\u8bbe\u7f6e\u6bcf\u6b21\u6570\u636e\u96c6\u8ba1\u7b97\u7684\u6279\u6b21\u5927\u5c0f verbose = 1 ) # \u8bbe\u7f6e\u65e5\u5fd7\u683c\u5f0f # 1.4 \u8bc4\u4f30\u6a21\u578b\uff0cModel.evaluate() eval_result = model . evaluate ( test_dataset , verbose = 1 ) # \u8fd4\u56de\u8bc4\u4f30\u7684\u5b57\u5178\uff0c\u5305\u542b\u6307\u6807\u662f\u6309\u7167prepare\u4e2d\u5b9a\u4e49\u7684\u8fd4\u56de\uff0c{'loss':xxx}/{'loss':xxx,'metric name1':xxx,'metric name2':xxx} # 1.5 \u6a21\u578b\u63a8\u7406 test_result = model . predict ( test_dataset ) # \u8fd4\u56de\u683c\u5f0f\u662f\u4e00\u4e2alist\uff0c\u5143\u7d20\u6570\u76ee\u5bf9\u5e94\u6a21\u578b\u7684\u8f93\u51fa\u6570\u76ee\uff0c\u5982\u679c\u662f\u591a\u8f93\u51fa\uff0c\u5c31\u662flist\u5305\u88f9\u591a\u4e2a\u8f93\u51fa\uff0c\u5355\u8f93\u51fa\u5c31\u662flist\u5305\u88f9\u5355\u4e2a\u8f93\u51fa # \u7b2c\u4e8c\u79cd\u65b9\u5f0f net . train () # \u5f00\u542f\u8bad\u7ec3\u6a21\u5f0f optim = paddle . optimizer . Adam ( parameters = net . parameters ()) # \u8bbe\u7f6e\u4f18\u5316\u5668 loss_fn = paddle . nn . CrossEntropyLoss () # \u8bbe\u7f6e\u635f\u5931\u51fd\u6570 for epoch in range ( epochs ): for batch_id , ( x_data , y_data ) in enumerate ( train_loader ()): predicts = mnist ( x_data ) # \u9884\u6d4b\u7ed3\u679c acc = paddle . metric . accuracy ( predicts , y_data ) # \u8ba1\u7b97\u7cbe\u5ea6 loss . backward () # \u53cd\u5411\u4f20\u64ad if ( batch_id + 1 ) % 100 == 0 : print ( f \"batch_id: {} loss: { loss . numpy () } acc: { acc . numpy () } \" ) optim . step () # \u66f4\u65b0\u53c2\u6570 optim . clear_grad () net . eval () # \u5f00\u542f\u9a8c\u8bc1\u6a21\u5f0f for batch_id , ( x_data , y_data ) in enumerate ( test_loader ()): predicts = mnist ( x_data ) # \u9884\u6d4b\u7ed3\u679c acc = paddle . metric . accuracy ( predicts , y_data ) # \u9884\u6d4b\u7cbe\u5ea6 print ( acc . numpy ())","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_4","text":"paddle.amp.auto_cast \u548c paddle.amp.GradScaler \u80fd\u591f\u5b9e\u73b0\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 import paddle model = xxx optimizer = paddle . optimizer . SGD ( learning_rate = 0.0001 , parameters = model . parameters ()) # Step1\uff1a\u5b9a\u4e49 GradScaler\uff0c\u7528\u4e8e\u7f29\u653eloss\u6bd4\u4f8b\uff0c\u907f\u514d\u6d6e\u70b9\u6570\u6ea2\u51fa scaler = paddle . amp . GradScaler ( init_loss_scaling = 1024 ) for epoch in range ( epochs ): for i , ( data , label ) in enumerate ( zip ( train_data , labels )): # Step2\uff1a\u521b\u5efaAMP\u4e0a\u4e0b\u6587\u73af\u5883\uff0c\u5f00\u542f\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 with paddle . amp . auto_cast (): output = model ( data ) loss = mse ( output , label ) # Step3\uff1a\u4f7f\u7528 Step1\u4e2d\u5b9a\u4e49\u7684 GradScaler \u5b8c\u6210loss\u7684\u7f29\u653e\uff0c\u7528\u7f29\u653e\u540e\u7684loss\u8fdb\u884c\u53cd\u5411\u4f20\u64ad scaled = scaler . scale ( loss ) scaled . backward () # \u8bad\u7ec3\u6a21\u578b scaler . minimize ( optimizer , scaled ) optimizer . clear_grad () \u8fdb\u9636\u7528\u6cd5\uff0c\u68af\u5ea6\u7d2f\u52a0 :\u591a\u6b21\u5faa\u73af\u540e\u68af\u5ea6\u4e0d\u65ad\u7d2f\u52a0\uff0c\u76f4\u81f3\u8fbe\u5230\u4e00\u5b9a\u6b21\u6570\u540e\uff0c\u7528\u7d2f\u52a0\u7684\u68af\u5ea6\u66f4\u65b0\u53c2\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u8d77\u5230\u53d8\u76f8\u6269\u5927 batch_size \u7684\u4f5c\u7528\u3002 import paddle model = xxx optimizer = paddle . optimizer . SGD ( learning_rate = 0.0001 , parameters = model . parameters ()) accumulate_batchs_num = 10 # \u68af\u5ea6\u7d2f\u52a0\u4e2d batch \u7684\u6570\u91cf # Step1\uff1a\u5b9a\u4e49 GradScaler\uff0c\u7528\u4e8e\u7f29\u653eloss\u6bd4\u4f8b\uff0c\u907f\u514d\u6d6e\u70b9\u6570\u6ea2\u51fa scaler = paddle . amp . GradScaler ( init_loss_scaling = 1024 ) for epoch in range ( epochs ): for i , ( data , label ) in enumerate ( zip ( train_data , labels )): # Step2\uff1a\u521b\u5efaAMP\u4e0a\u4e0b\u6587\u73af\u5883\uff0c\u5f00\u542f\u81ea\u52a8\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 with paddle . amp . auto_cast (): output = model ( data ) loss = mse ( output , label ) # Step3\uff1a\u4f7f\u7528 Step1\u4e2d\u5b9a\u4e49\u7684 GradScaler \u5b8c\u6210loss\u7684\u7f29\u653e\uff0c\u7528\u7f29\u653e\u540e\u7684loss\u8fdb\u884c\u53cd\u5411\u4f20\u64ad scaled = scaler . scale ( loss ) scaled . backward () # \u8bad\u7ec3\u6a21\u578b,\u6bcf\u7d2f\u52a010\u4e2abatch\u624d\u8fdb\u884c\u66f4\u65b0\uff0c\u5e76\u6e05\u9664\u68af\u5ea6 if ( i + 1 ) % accumulate_batchs_num == 0 : scaler . minimize ( optimizer , scaled ) optimizer . clear_grad ()","title":"\u81ea\u52a8\u6df7\u5408\u8bad\u7ec3"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_5","text":"\u5355\u673a\u591a\u5361\u8bad\u7ec3 \u5f53\u4f7f\u7528\u65b9\u5f0f\u4e00: paddle.Model\u5c01\u88c5 \u6765\u8bad\u7ec3\u65f6 \uff0c\u60f3\u8981\u542f\u52a8\u5355\u673a\u591a\u5361\u8bad\u7ec3\u975e\u5e38\u7b80\u5355\uff0c\u4ee3\u7801\u4e0d\u9700\u8981\u505a\u4efb\u4f55\u4fee\u6539\uff0c\u53ea\u9700\u8981\u5728\u542f\u52a8\u65f6\u589e\u52a0\u4e00\u4e0b\u53c2\u6570 -m paddle.distributed.launch \u3002 # \u5355\u673a\u5355\u5361\u542f\u52a8\uff0c\u9ed8\u8ba4\u4f7f\u7528\u7b2c0\u53f7\u5361 $ python train.py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u53ef\u89c1\u7684\u6240\u6709\u5361 $ python -m paddle.distributed.launch train.py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7684\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ python -m paddle.distributed.launch --gpus = '0,1' train.py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ export CUDA_VISIBLE_DEVICES = 0 ,1 $ python -m paddle.distributed.launch train.py \u5f53\u4f7f\u7528\u65b9\u5f0f\u4e8c:\u57fa\u7840API\u65f6\uff0c\u5355\u673a\u591a\u5361\u4ee3\u7801\u5982\u4e0b import paddle # \u7b2c1\u5904\u6539\u52a8 \u5bfc\u5165\u5206\u5e03\u5f0f\u8bad\u7ec3\u6240\u9700\u7684\u5305 import paddle.distributed as dist net = xxx train_dataset , test_dataset = xxx , xxx # \u7b2c2\u5904\u6539\u52a8\uff0c\u521d\u59cb\u5316\u5e76\u884c\u73af\u5883,\u6ce8\u610f\uff1a\u5355\u5361\u8bad\u7ec3\u4e0d\u652f\u6301\u8c03\u7528init_parallel_env dist . init_parallel_env () # \u7b2c3\u5904\u6539\u52a8\uff0c\u589e\u52a0paddle.DataParallel\u5c01\u88c5 net = paddle . DataParallel ( net ) net . train () .... # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u9ed8\u8ba4\u4f7f\u7528\u5f53\u524d\u53ef\u89c1\u7684\u6240\u6709\u5361 $ python - m paddle . distributed . launch train . py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7684\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ python - m paddle . distributed . launch -- gpus '0,1' train . py # \u5355\u673a\u591a\u5361\u542f\u52a8\uff0c\u8bbe\u7f6e\u5f53\u524d\u4f7f\u7528\u7b2c0\u53f7\u548c\u7b2c1\u53f7\u5361 $ export CUDA_VISIBLE_DEVICES = 0 , 1 $ python - m paddle . distributed . launch train . py \u5206\u5e03\u5f0f\u8bad\u7ec3 \u63a8\u8350\u4f7f\u7528Fleet API\u8fdb\u884c\u5206\u5e03\u5f0f\u8bad\u7ec3 \u7b14\u8bb0","title":"\u591a\u5361\u3001\u5206\u5e03\u5f0f\u8bad\u7ec3"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_6","text":"import paddle import paddle.nn as nn import paddle.optimizer as opt import paddle.distributed as dist def train ( print_result = False ): # \u4e0a\u9762\u7684\u8bad\u7ec3\u6b65\u9aa4\uff0c\u5355\u5361\u6216\u8005\u591a\u5361\u90fd\u884c # \u4e3e\u4f8b\u5982\u4e0b\uff1a dist . init_parallel_env () # 1. \u521d\u59cb\u5316\u5e76\u884c\u8bad\u7ec3\u73af\u5883 model = xx labels = xx loss_fn = nn . MSELoss () adam = opt . Adam ( learning_rate = 0.001 , parameters = model . parameters ()) loss = loss_fn ( paddle . randn ([ n , 3 , 224 , 224 ], 'float32' ), labels ) if print_result is True : print ( \"loss:\" , loss . numpy ()) loss . backward () adam . step () adam . clear_grad () # \u4f7f\u7528\u65b9\u5f0f1\uff1a\u4ec5\u4f20\u5165\u8bad\u7ec3\u51fd\u6570 # \u9002\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u4e0d\u9700\u8981\u4efb\u4f55\u53c2\u6570\uff0c\u5e76\u4e14\u9700\u8981\u4f7f\u7528\u6240\u6709\u5f53\u524d\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3 if __name__ == '__main__' : dist . spawn ( train ) # \u4f7f\u7528\u65b9\u5f0f2\uff1a\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\u548c\u53c2\u6570 # \u9002\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u9700\u8981\u4e00\u4e9b\u53c2\u6570\uff0c\u5e76\u4e14\u9700\u8981\u4f7f\u7528\u6240\u6709\u5f53\u524d\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3 if __name__ == '__main__' : dist . spawn ( train , args = ( True ,)) # \u4f7f\u7528\u65b9\u5f0f3\uff1a\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\u3001\u53c2\u6570\u5e76\u6307\u5b9a\u5e76\u884c\u8fdb\u7a0b\u6570 # \u9002\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u9700\u8981\u4e00\u4e9b\u53c2\u6570\uff0c\u5e76\u4e14\u4ec5\u9700\u8981\u4f7f\u7528\u90e8\u5206\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3\uff0c\u4f8b\u5982\uff1a # \u5f53\u524d\u673a\u5668\u67098\u5f20GPU\u5361 {0,1,2,3,4,5,6,7}\uff0c\u6b64\u65f6\u4f1a\u4f7f\u7528\u524d\u4e24\u5f20\u5361 {0,1}\uff1b # \u6216\u8005\u5f53\u524d\u673a\u5668\u901a\u8fc7\u914d\u7f6e\u73af\u5883\u53d8\u91cf CUDA_VISIBLE_DEVICES=4,5,6,7\uff0c\u4ec5\u4f7f4\u5f20 # GPU\u5361\u53ef\u89c1\uff0c\u6b64\u65f6\u4f1a\u4f7f\u7528\u53ef\u89c1\u7684\u524d\u4e24\u5f20\u5361 {4,5} if __name__ == '__main__' : dist . spawn ( train , args = ( True ,), nprocs = 2 ) # \u4f7f\u7528\u65b9\u5f0f4\uff1a\u4f20\u5165\u8bad\u7ec3\u51fd\u6570\u3001\u53c2\u6570\u3001\u6307\u5b9a\u8fdb\u7a0b\u6570\u5e76\u6307\u5b9a\u5f53\u524d\u4f7f\u7528\u7684\u5361\u53f7 # \u4f7f\u7528\u573a\u666f\uff1a\u8bad\u7ec3\u51fd\u6570\u9700\u8981\u4e00\u4e9b\u53c2\u6570\uff0c\u5e76\u4e14\u4ec5\u9700\u8981\u4f7f\u7528\u90e8\u5206\u53ef\u89c1\u7684GPU\u8bbe\u5907\u5e76\u884c\u8bad\u7ec3\uff0c\u4f46\u662f # \u53ef\u80fd\u7531\u4e8e\u6743\u9650\u95ee\u9898\uff0c\u65e0\u6743\u914d\u7f6e\u5f53\u524d\u673a\u5668\u7684\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a\u5f53\u524d\u673a\u5668\u67098\u5f20GPU\u5361 # {0,1,2,3,4,5,6,7}\uff0c\u4f46\u4f60\u65e0\u6743\u914d\u7f6eCUDA_VISIBLE_DEVICES\uff0c\u6b64\u65f6\u53ef\u4ee5\u901a\u8fc7 # \u6307\u5b9a\u53c2\u6570 gpus \u9009\u62e9\u5e0c\u671b\u4f7f\u7528\u7684\u5361\uff0c\u4f8b\u5982 gpus='4,5'\uff0c # \u53ef\u4ee5\u6307\u5b9a\u4f7f\u7528\u7b2c4\u53f7\u5361\u548c\u7b2c5\u53f7\u5361 if __name__ == '__main__' : dist . spawn ( train , nprocs = 2 , gpus = '4,5' )","title":"\u591a\u8fdb\u7a0b\u5904\u7406"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_7","text":"\u81ea\u5b9a\u4e49loss \uff1a\u7ee7\u627f paddle.nn.Layer \u4f46\u9700\u8981\u5b9e\u73b0\u5176 __init__\u3001forward() \u51fd\u6570 class SoftmaxWithCrossEntropy ( paddle . nn . Layer ): def __init__ ( self ): super ( SoftmaxWithCrossEntropy , self ) . __init__ () def forward ( self , input , label ): loss = F . softmax_with_cross_entropy ( input , label , return_softmax = False , axis = 1 ) return paddle . mean ( loss ) **\u81ea\u5b9a\u4e49Metric**\u8bc4\u4f30\u65b9\u6cd5| \u4e3e\u4f8b\u5b50code class SelfDefineMetric ( paddle . metric . Metric ): \"\"\" 1. \u7ee7\u627fpaddle.metric.Metric \"\"\" def __init__ ( self ): \"\"\" 2. \u6784\u9020\u51fd\u6570\u5b9e\u73b0\uff0c\u81ea\u5b9a\u4e49\u53c2\u6570\u5373\u53ef \"\"\" super ( SelfDefineMetric , self ) . __init__ () def name ( self ): \"\"\" 3. \u5b9e\u73b0name\u65b9\u6cd5\uff0c\u8fd4\u56de\u5b9a\u4e49\u7684\u8bc4\u4f30\u6307\u6807\u540d\u5b57 \"\"\" return '\u81ea\u5b9a\u4e49\u8bc4\u4ef7\u6307\u6807\u7684\u540d\u5b57' def compute ( self , ... ) \"\"\" 4. \u672c\u6b65\u9aa4\u53ef\u4ee5\u7701\u7565\uff0c\u5b9e\u73b0compute\u65b9\u6cd5\uff0c\u8fd9\u4e2a\u65b9\u6cd5\u4e3b\u8981\u7528\u4e8e`update`\u7684\u52a0\u901f\uff0c\u53ef\u4ee5\u5728\u8fd9\u4e2a\u65b9\u6cd5\u4e2d\u8c03\u7528\u4e00\u4e9bpaddle\u5b9e\u73b0\u597d\u7684Tensor\u8ba1\u7b97API\uff0c\u7f16\u8bd1\u5230\u6a21\u578b\u7f51\u7edc\u4e2d\u4e00\u8d77\u4f7f\u7528\u4f4e\u5c42C++ OP\u8ba1\u7b97\u3002 \"\"\" return \u81ea\u5df1\u60f3\u8981\u8fd4\u56de\u7684\u6570\u636e \uff0c \u4f1a\u505a\u4e3aupdate\u7684\u53c2\u6570\u4f20\u5165 \u3002 def update ( self , ... ): \"\"\" 5. \u5b9e\u73b0update\u65b9\u6cd5\uff0c\u7528\u4e8e\u5355\u4e2abatch\u8bad\u7ec3\u65f6\u8fdb\u884c\u8bc4\u4f30\u6307\u6807\u8ba1\u7b97\u3002 - \u5f53`compute`\u7c7b\u51fd\u6570\u672a\u5b9e\u73b0\u65f6\uff0c\u4f1a\u5c06\u6a21\u578b\u7684\u8ba1\u7b97\u8f93\u51fa\u548c\u6807\u7b7e\u6570\u636e\u7684\u5c55\u5e73\u4f5c\u4e3a`update`\u7684\u53c2\u6570\u4f20\u5165\u3002 - \u5f53`compute`\u7c7b\u51fd\u6570\u505a\u4e86\u5b9e\u73b0\u65f6\uff0c\u4f1a\u5c06compute\u7684\u8fd4\u56de\u7ed3\u679c\u4f5c\u4e3a`update`\u7684\u53c2\u6570\u4f20\u5165\u3002 \"\"\" return acc value def accumulate ( self ): \"\"\" 6. \u5b9e\u73b0accumulate\u65b9\u6cd5\uff0c\u8fd4\u56de\u5386\u53f2batch\u8bad\u7ec3\u79ef\u7d2f\u540e\u8ba1\u7b97\u5f97\u5230\u7684\u8bc4\u4ef7\u6307\u6807\u503c\u3002 \u6bcf\u6b21`update`\u8c03\u7528\u65f6\u8fdb\u884c\u6570\u636e\u79ef\u7d2f\uff0c`accumulate`\u8ba1\u7b97\u65f6\u5bf9\u79ef\u7d2f\u7684\u6240\u6709\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u5e76\u8fd4\u56de\u3002 \u7ed3\u7b97\u7ed3\u679c\u4f1a\u5728`fit`\u63a5\u53e3\u7684\u8bad\u7ec3\u65e5\u5fd7\u4e2d\u5448\u73b0\u3002 \"\"\" # \u5229\u7528update\u4e2d\u79ef\u7d2f\u7684\u6210\u5458\u53d8\u91cf\u6570\u636e\u8fdb\u884c\u8ba1\u7b97\u540e\u8fd4\u56de return accumulated acc value def reset ( self ): \"\"\" 7. \u5b9e\u73b0reset\u65b9\u6cd5\uff0c\u6bcf\u4e2aEpoch\u7ed3\u675f\u540e\u8fdb\u884c\u8bc4\u4f30\u6307\u6807\u7684\u91cd\u7f6e\uff0c\u8fd9\u6837\u4e0b\u4e2aEpoch\u53ef\u4ee5\u91cd\u65b0\u8fdb\u884c\u8ba1\u7b97\u3002 \"\"\" # do reset action \u81ea\u5b9a\u4e49callback \uff1a\u7528\u6765\u5728\u6bcf\u8f6e\u8bad\u7ec3\u548c\u6bcf\u4e2a batch \u8bad\u7ec3\u524d\u540e\u8fdb\u884c\u8c03\u7528\uff0c\u53ef\u4ee5\u901a\u8fc7 callback \u6536\u96c6\u5230\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684\u4e00\u4e9b\u6570\u636e\u548c\u53c2\u6570\uff0c\u6216\u8005\u5b9e\u73b0\u4e00\u4e9b\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002 class SelfDefineCallback ( paddle . callbacks . Callback ): \"\"\" 1. \u7ee7\u627fpaddle.callbacks.Callback 2. \u6309\u7167\u81ea\u5df1\u7684\u9700\u6c42\u5b9e\u73b0\u4ee5\u4e0b\u7c7b\u6210\u5458\u65b9\u6cd5\uff1a def on_train_begin(self, logs=None) \u8bad\u7ec3\u5f00\u59cb\u524d\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_train_end(self, logs=None) \u8bad\u7ec3\u7ed3\u675f\u540e\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_eval_begin(self, logs=None) \u8bc4\u4f30\u5f00\u59cb\u524d\uff0c`Model.evaluate`\u63a5\u53e3\u8c03\u7528 def on_eval_end(self, logs=None) \u8bc4\u4f30\u7ed3\u675f\u540e\uff0c`Model.evaluate`\u63a5\u53e3\u8c03\u7528 def on_predict_begin(self, logs=None) \u9884\u6d4b\u6d4b\u8bd5\u5f00\u59cb\u524d\uff0c`Model.predict`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_predict_end(self, logs=None) \u9884\u6d4b\u6d4b\u8bd5\u7ed3\u675f\u540e\uff0c`Model.predict`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_epoch_begin(self, epoch, logs=None) \u6bcf\u8f6e\u8bad\u7ec3\u5f00\u59cb\u524d\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_epoch_end(self, epoch, logs=None) \u6bcf\u8f6e\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c`Model.fit`\u63a5\u53e3\u4e2d\u8c03\u7528 # \u5355\u4e2aBatch\u8bad\u7ec3\u5f00\u59cb\u524d\uff0c`Model.fit`\u548c`Model.train_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_train_batch_begin(self, step, logs=None) # \u5355\u4e2aBatch\u8bad\u7ec3\u7ed3\u675f\u540e\uff0c`Model.fit`\u548c`Model.train_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_train_batch_end(self, step, logs=None) # \u5355\u4e2aBatch\u8bc4\u4f30\u5f00\u59cb\u524d\uff0c`Model.evalute`\u548c`Model.eval_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_eval_batch_begin(self, step, logs=None) # \u5355\u4e2aBatch\u8bc4\u4f30\u7ed3\u675f\u540e\uff0c`Model.evalute`\u548c`Model.eval_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_eval_batch_end(self, step, logs=None) # \u5355\u4e2aBatch\u9884\u6d4b\u6d4b\u8bd5\u5f00\u59cb\u524d\uff0c`Model.predict`\u548c`Model.test_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_predict_batch_begin(self, step, logs=None) # \u5355\u4e2aBatch\u9884\u6d4b\u6d4b\u8bd5\u7ed3\u675f\u540e\uff0c`Model.predict`\u548c`Model.test_batch`\u63a5\u53e3\u4e2d\u8c03\u7528 def on_predict_batch_end(self, step, logs=None) \"\"\" def __init__ ( self ): super ( SelfDefineCallback , self ) . __init__ () # \u6309\u7167\u9700\u6c42\u5b9a\u4e49\u81ea\u5df1\u7684\u7c7b\u6210\u5458\u65b9\u6cd5 # \u4e3e\u4f8b\u5b50 class ModelCheckpoint ( Callback ): def __init__ ( self , save_freq = 1 , save_dir = None ): self . save_freq = save_freq self . save_dir = save_dir def on_epoch_begin ( self , epoch = None , logs = None ): self . epoch = epoch def _is_save ( self ): return self . model and self . save_dir and ParallelEnv () . local_rank == 0 def on_epoch_end ( self , epoch , logs = None ): if self . _is_save () and self . epoch % self . save_freq == 0 : path = ' {} / {} ' . format ( self . save_dir , epoch ) print ( 'save checkpoint at {} ' . format ( os . path . abspath ( path ))) self . model . save ( path ) def on_train_end ( self , logs = None ): if self . _is_save (): path = ' {} /final' . format ( self . save_dir ) print ( 'save checkpoint at {} ' . format ( os . path . abspath ( path ))) self . model . save ( path )","title":"\u81ea\u5b9a\u4e49\u6307\u6807+\u53ec\u56de\u51fd\u6570(\u94a9\u5b50\u51fd\u6570)"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_8","text":"\u65e7\u7248\u672c\u548c\u65b0\u7248\u672c(v2.0+)\u517c\u5bb9\u7684\u6a21\u578b\u52a0\u8f7d \u53ea\u5b58\u50a8\u53c2\u6570\uff0c\u7528\u4e8e\u8bad\u7ec3\u8c03\u4f18 # 1.1 \u53c2\u6570\u5b58\u50a8 save,\u5c06state_dict\u5b58\u50a8\u81f3\u78c1\u76d8 paddle . save ( net . state_dict (), \"linear_net.pdparams\" ) paddle . save ( adam . state_dict (), \"adam.pdopt\" ) # 1.2 \u53c2\u6570\u8f7d\u5165 load,\u7531\u78c1\u76d8\u914d\u7f6e\u5230\u76ee\u6807\u5bf9\u8c61\u4e2d layer_state_dict = paddle . load ( \"linear_net.pdparams\" ) opt_state_dict = paddle . load ( \"adam.pdopt\" ) net . set_state_dict ( layer_state_dict ) adam . set_state_dict ( opt_state_dict ) \u540c\u65f6\u5b58\u50a8/\u8f7d\u5165\u6a21\u578b\u7ed3\u6784\u548c\u53c2\u6570 \uff1a\u53ef\u4ee5\u4f7f\u7528 paddle.jit.save/load \u5b9e\u73b0 \u52a8\u8f6c\u9759\u8bad\u7ec3 + \u6a21\u578b&\u53c2\u6570\u5b58\u50a8\uff1a\u52a8\u8f6c\u9759\u8bad\u7ec3\u76f8\u6bd4\u76f4\u63a5\u4f7f\u7528\u52a8\u6001\u56fe\u8bad\u7ec3\u5177\u6709\u66f4\u597d\u7684\u6267\u884c\u6027\u80fd # 1.net\u7684\u5b9e\u73b0\u65f6\uff0cforward\u65b9\u6cd5\u9700\u8981\u7ecf\u7531 paddle.jit.to_static \u88c5\u9970\uff0c\u7ecf\u8fc7\u88c5\u65f6\u540e\uff0c\u4f1a\u5148\u751f\u6210\u63cf\u8ff0\u6a21\u578b\u7684Program\uff0c\u7136\u540e\u901a\u8fc7\u6267\u884cProgram\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) # \u82e5\u6700\u7ec8\u9700\u8981\u751f\u6210\u7684\u63cf\u8ff0\u6a21\u578b\u7684Program\u652f\u6301\u52a8\u6001\u8f93\u5165\uff0c\u53ef\u4ee5\u540c\u65f6\u6307\u660e\u6a21\u578b\u7684 InputSepc # @paddle.jit.to_static(input_spec=[InputSpec(shape=[None, 784], dtype='float32')]) @paddle . jit . to_static def forward ( self , x ): return self . _linear ( x ) # 2. \u786e\u4fddLayer.forward\u65b9\u6cd5\u4e2d\u4ec5\u5b9e\u73b0\u9884\u6d4b\u529f\u80fd\uff0c\u907f\u514d\u5c06\u8bad\u7ec3\u6240\u9700\u7684loss\u8ba1\u7b97\u903b\u8f91\u5199\u5165forward\u65b9\u6cd5,\u5c31\u662f\u4e0d\u8981\u518dforward\u91cc\u9762\u8ba1\u7b97loss\uff0c\u4f1a\u589e\u5927Layer\u4f7f\u7528\u7684\u590d\u6742\u6027\uff0c\u8981\u4fdd\u6301\u7b80\u6d01\u6027 # 3. \u5982\u679c\u4f60\u9700\u8981\u5b58\u50a8\u591a\u4e2a\u65b9\u6cd5\uff0c\u9700\u8981\u7528 paddle.jit.to_static \u88c5\u9970\u6bcf\u4e00\u4e2a\u9700\u8981\u88ab\u5b58\u50a8\u7684\u65b9\u6cd5\uff0c\u547d\u540d\u89c4\u5219\uff1aforward\u7684\u6a21\u578b\u540d\u5b57\u4e3a\uff1a\u6a21\u578b\u540d+\u540e\u7f00\uff0c\u5176\u4ed6\u51fd\u6570\u7684\u6a21\u578b\u540d\u5b57\u4e3a\uff1a\u6a21\u578b\u540d+\u51fd\u6570\u540d+\u540e\u7f00\u3002\u6bcf\u4e2a\u51fd\u6570\u6709\u5404\u81ea\u7684pdmodel\u548cpdiparams\u7684\u6587\u4ef6\uff0c\u6240\u6709\u51fd\u6570\u5171\u7528pdiparams.info\u3002 class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) self . _linear_2 = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) # \u547d\u540d\u89c4\u5219:net.pdiparams,net.pdmodel @paddle . jit . to_static ( input_spec = [ InputSpec ( shape = [ None , IMAGE_SIZE ], dtype = 'float32' )]) def forward ( self , x ): return self . _linear ( x ) # \u547d\u540d\u89c4\u5219:net.another_forward.pdiparams,net.another_forward.pdmodel @paddle . jit . to_static ( input_spec = [ InputSpec ( shape = [ None , IMAGE_SIZE ], dtype = 'float32' )]) def another_forward ( self , x ): return self . _linear_2 ( x ) # 4.\u5982\u4f55\u5b58\u50a8 path = \"example.model/linear\" paddle . jit . save ( net , path ) \u52a8\u6001\u56fe\u8bad\u7ec3 + \u6a21\u578b&\u53c2\u6570\u5b58\u50a8\uff1a\u52a8\u6001\u56fe\u6a21\u5f0f\u76f8\u6bd4\u52a8\u8f6c\u9759\u6a21\u5f0f\u66f4\u52a0\u4fbf\u4e8e\u8c03\u8bd5\uff0c\u5982\u679c\u4f60\u4ecd\u9700\u8981\u4f7f\u7528\u52a8\u6001\u56fe\u76f4\u63a5\u8bad\u7ec3\uff0c\u4e5f\u53ef\u4ee5\u5728\u52a8\u6001\u56fe\u8bad\u7ec3\u5b8c\u6210\u540e\u8c03\u7528 paddle.jit.save \u76f4\u63a5\u5b58\u50a8\u6a21\u578b\u548c\u53c2\u6570\u3002 # save path = \"example.dy_model/linear\" paddle . jit . save ( layer = net , path = path , input_spec = [ InputSpec ( shape = [ None , 784 ], dtype = 'float32' )]) # 1.\u76f8\u6bd4\u52a8\u8f6c\u9759\u8bad\u7ec3\uff0cLayer\u5bf9\u8c61\u7684forward\u65b9\u6cd5\u4e0d\u9700\u8981\u989d\u5916\u88c5\u9970\uff0c\u4fdd\u6301\u539f\u5b9e\u73b0\u5373\u53ef # 2.\u4e0e\u52a8\u8f6c\u9759\u8bad\u7ec3\u76f8\u540c\uff0c\u8bf7\u786e\u4fddLayer.forward\u65b9\u6cd5\u4e2d\u4ec5\u5b9e\u73b0\u9884\u6d4b\u529f\u80fd\uff0c\u907f\u514d\u5c06\u8bad\u7ec3\u6240\u9700\u7684loss\u8ba1\u7b97\u903b\u8f91\u5199\u5165forward\u65b9\u6cd5 # 3.\u5728\u6700\u540e\u4f7f\u7528 paddle.jit.save \u65f6\uff0c\u9700\u8981\u6307\u5b9aLayer\u7684 InputSpec \uff0cLayer\u5bf9\u8c61forward\u65b9\u6cd5\u7684\u6bcf\u4e00\u4e2a\u53c2\u6570\u5747\u9700\u8981\u5bf9\u5e94\u7684 InputSpec \u8fdb\u884c\u63cf\u8ff0\uff0c\u4e0d\u80fd\u7701\u7565\u3002\u8fd9\u91cc\u7684 input_spec \u53c2\u6570\u652f\u6301\u4e24\u79cd\u7c7b\u578b\u7684\u8f93\u5165 # 4.InputSpec \u5217\u8868:\u4f7f\u7528InputSpec\u63cf\u8ff0forward\u8f93\u5165\u53c2\u6570\u7684shape\uff0cdtype\u548cname\uff0cname\u4e00\u822c\u7701\u7565\uff1b input_spec = [ InputSpec ( shape = [ None , 784 ], dtype = 'float32' )] # \u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528DataLoader\u5f97\u5230\u7684image\u4f5c\u4e3a\u8f93\u5165 paddle . jit . save ( layer = net , path = path , input_spec = [ image ]) \u6a21\u578b\u53c2\u6570\u548c\u7ed3\u6784\u8f7d\u5165\uff1a\u4f7f\u7528 paddle.jit.load \u8f7d\u5165\u5373\u53ef\uff0c\u8f7d\u5165\u540e\u5f97\u5230\u7684\u662f\u4e00\u4e2aLayer\u7684\u6d3e\u751f\u7c7b\u5bf9\u8c61 TranslatedLayer \uff0c TranslatedLayer \u5177\u6709Layer\u5177\u6709\u7684\u901a\u7528\u7279\u5f81\uff0c\u652f\u6301\u5207\u6362 train \u6216\u8005 eval \u6a21\u5f0f\uff0c\u53ef\u4ee5\u8fdb\u884c\u6a21\u578b\u8c03\u4f18\u6216\u8005\u9884\u6d4b\u3002 path = \"example.model/linear\" net = paddle . jit . load ( path ) # 1.\u6267\u884c\u63a8\u7406 net . eval () pred = net ( paddle . randn ([ 1 , IMAGE_SIZE ], 'float32' )) # 2.\u6267\u884c\u8bad\u7ec3 fine-tune net . train () .... # \u6b63\u5e38\u8bad\u7ec3\u6b65\u9aa4 # save after fine-tuning paddle . jit . save ( net , \"fine-tune.model/linear\" , input_spec = [ x ]) \u53ea\u8f7d\u5165\u6a21\u578b\u53c2\u6570\uff1a paddle.jit.save \u540c\u65f6\u4fdd\u5b58\u4e86\u6a21\u578b\u548c\u53c2\u6570\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4ece\u5b58\u50a8\u7ed3\u679c\u4e2d\u8f7d\u5165\u6a21\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u4f7f\u7528 paddle.load \u63a5\u53e3\u8f7d\u5165\uff0c\u8fd4\u56de\u6240\u5b58\u50a8\u6a21\u578b\u7684state_dict # 1.\u5b9a\u4e49net\u7ed3\u6784 class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( IMAGE_SIZE , CLASS_NUM ) @paddle . jit . to_static def forward ( self , x ): return self . _linear ( x ) # create network net = LinearNet () # load path = \"example.model/linear\" state_dict = paddle . load ( path ) # inference net . set_state_dict ( state_dict , use_structured_name = False ) net . eval () pred = net ( paddle . randn ([ 1 , IMAGE_SIZE ], 'float32' ))","title":"\u6a21\u578b\u5b58\u50a8\u4e0e\u52a0\u8f7d"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#onnx","text":"# \u4e3b\u8981\u4f7f\u7528paddle2onnx\u5e93 pip install paddle2onnx onnx onnxruntime - i https : // mirror . baidu . com / pypi / simple # \u5982\u679c\u7f51\u901f\u4e0d\u597d\uff0c\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u6e90\u4e0b\u8f7d \u52a8\u6001\u56fe\u5bfc\u51faONNX import paddle from paddle import nn from paddle.static import InputSpec class LinearNet ( nn . Layer ): def __init__ ( self ): super ( LinearNet , self ) . __init__ () self . _linear = nn . Linear ( 784 , 10 ) def forward ( self , x ): return self . _linear ( x ) # 1.export to ONNX layer = LinearNet () save_path = 'onnx.save/linear_net' x_spec = InputSpec ([ None , 784 ], 'float32' , 'x' ) paddle . onnx . export ( layer , save_path , input_spec = [ x_spec ]) # 2.check by ONNX import onnx onnx_file = save_path + '.onnx' onnx_model = onnx . load ( onnx_file ) onnx . checker . check_model ( onnx_model ) print ( 'The model is checked!' ) # 3.ONNXRuntime inference import numpy as np import onnxruntime x = np . random . random (( 2 , 784 )) . astype ( 'float32' ) # predict by ONNX Runtime ort_sess = onnxruntime . InferenceSession ( onnx_file ) ort_inputs = { ort_sess . get_inputs ()[ 0 ] . name : x } ort_outs = ort_sess . run ( None , ort_inputs ) print ( \"Exported model has been predicted by ONNXRuntime!\" ) # predict by Paddle layer . eval () paddle_outs = layer ( x ) # compare ONNX Runtime and Paddle results np . testing . assert_allclose ( ort_outs [ 0 ], paddle_outs . numpy (), rtol = 1.0 , atol = 1e-05 ) print ( \"The difference of results between ONNXRuntime and Paddle looks good!\" )","title":"\u6a21\u578b\u8f6cONNX"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#visualdl","text":"","title":"\u53ef\u89c6\u5316\u5de5\u5177VisualDL:\u7b14\u8bb0"},{"location":"PaddlePaddle%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_9","text":"Paddle-Lite\u7684\u4f7f\u7528 \u6a21\u578b\u538b\u7f29PaddleSlim:\u6a21\u578b\u88c1\u526a\u3001\u5b9a\u70b9\u91cf\u5316(\u5728\u7ebf/\u79bb\u7ebf)\u3001\u77e5\u8bc6\u84b8\u998f\u3001\u53c2\u6570/\u6a21\u578b\u7ed3\u6784\u641c\u7d22 Paddleslim\u4e2d\u6587\u6587\u6863 | PaddleSlim github \u5728\u7ebf\u91cf\u5316\u4f7f\u7528\u793a\u4f8b \u79bb\u7ebf\u91cf\u5316\u4f7f\u7528\u793a\u4f8b","title":"\u63a8\u7406\u90e8\u7f72:\u7b14\u8bb0"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/","text":"Pytorch\u52a0\u901f\u8bad\u7ec3\u5408\u96c6 | Pytorch apachecn\u4e2d\u6587\u6559\u7a0b | whl\u4e0b\u8f7d \u57fa\u7840\u7528\u6cd5 \u00b6 # \u56fa\u5b9a\u968f\u673a\u79cd\u5b50 torch . manual_seed ( 0 ) torch . cuda . manual_seed_all ( 0 ) # \u6307\u5b9aGPU\u663e\u5361 os . environ [ 'CUDA_VISIBLE_DEVICES' ] = '0,1' # \u6570\u636e\u7c7b\u578b # torch.FloatTensor() 32\u4f4d\u6d6e\u70b9\u578b \u9ed8\u8ba4 # torch.cuda.FloatTensor() # torch.DoubleTensor() 64\u4f4d\u6d6e\u70b9\u578b # torch.ShortTensor() 16\u4f4d\u6574\u578b # torch.IntTensor() 32\u4f4d\u6574\u578b # torch.LongTensor() 64\u4f4d\u6574\u578b # \u8865\u51451\uff0c\u8f6c\u6362Tensor\u7684\u6570\u636e\u7c7b\u578b \u6bd4\u5982 a\u662fIntTensor\u7c7b\u578b\uff0c\u53ea\u9700\u8981 a.float() \u5c31\u53ef\u4ee5\u8f6c\u4e3aFloatTensor\u7c7b\u578b tensor = tensor . float () tensor = tensor . long () # \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4tensor\u6570\u636e\u7c7b\u578b torch . set_default_tensor_type ( 'torch.DoubleTensor' ) # \u521b\u5efatensor t . Tensor ( * sizes ) # \u521b\u5efatensor\u65f6\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u9a6c\u4e0a\u5206\u914d\u7a7a\u95f4\uff0c\u53ea\u662f\u4f1a\u8ba1\u7b97\u5269\u4f59\u7684\u5185\u5b58\u662f\u5426\u8db3\u591f\u4f7f\u7528\uff0c\u4f7f\u7528\u5230tensor\u65f6\u624d\u4f1a\u5206\u914d torch . Tensor ( arr ) == torch . tensor ( arr ) # \u57fa\u7840\u6784\u9020\u51fd\u6570 # \u800c\u4e0b\u9762\u7684\u5176\u5b83\u64cd\u4f5c\u90fd\u662f\u5728\u521b\u5efa\u5b8ctensor\u4e4b\u540e\u9a6c\u4e0a\u8fdb\u884c\u7a7a\u95f4\u5206\u914d\u3002\u4f8b\u5982:torch.ones(2,3) # \u4e0b\u9762\u7684\u8fd9\u4e9b\u521b\u5efa\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u521b\u5efa\u7684\u65f6\u5019\u6307\u5b9a\u6570\u636e\u7c7b\u578bdtype\u548c\u5b58\u653edevice(cpu/gpu).\u4f8b\u5982:t.randn(2, 3,device=t.device('cpu')) torch . ones ( 2 , 2 ) # \u51681Tensor \u53c2\u6570:*size torch . zeros (( 3 , 2 )) # \u5168\u96f6\u7684Tensor \u53c2\u6570:*size torch . eye ( * size ) # \u5bf9\u89d2\u7ebf\u4e3a1\uff0c\u5176\u4ed6\u4e3a0 torch . arange ( s , e , step ) # \u4eces\u5230e,\u8303\u56f4[s,e)\uff0c\u6b65\u957f\u4e3astep torch . linspace ( s , e , steps ) # \u4eces\u5230e,\u8303\u56f4[s,e],\u5747\u5300\u5207\u5206\u6210steps\u4efd torch . rand ( * size ) / torch . randn ( * size ) #\u5747\u5300/\u6807\u51c6\u5206\u5e03 torch . normal ( mean , std ) # \u6b63\u6001\u5206\u5e03 torch . uniform ( from , to ) # \u5747\u5300\u5206\u5e03 torch . randperm ( n ) # \u968f\u673a\u6392\u5217,integers:[0,n-1],\u8fd9\u4e9b\u6574\u6570\u968f\u673a\u6392\u5217 # torch.*_like(tensora) \u53ef\u4ee5\u751f\u6210\u548ctensora\u62e5\u6709\u540c\u6837\u5c5e\u6027(\u7c7b\u578b\uff0c\u5f62\u72b6\uff0ccpu/gpu)\u7684\u65b0tensor\u3002 torch . zeros_like ( a ) #\u7b49\u4ef7\u4e8et.zeros(a.shape,dtype=a.dtype,device=a.device) torch . zeros_like ( a , dtype = t . int16 ) #\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5c5e\u6027 torch . rand_like ( a ) # \u548ca\u5c5e\u6027\u4e00\u6837\uff0c\u5c31\u662f\u503c\u4e0d\u540c # tensor.new_*(new_shape) \u65b0\u5efa\u4e00\u4e2a\u4e0d\u540c\u5f62\u72b6\u7684tensor\uff0c\u5c5e\u6027\u5565\u7684\u76f8\u540c a . new_ones ( 4 , 5 , dtype = t . int ) a . new_tensor ([ 3 , 4 ]) # \u5e38\u7528\u5c5e\u6027 tensor_a . shape == tensor_a . size () # \u4e5f\u662f\u8fd4\u56detorch.Size\u5bf9\u8c61 \u7b49\u4ef7\u4e8etensor_a.size() tensor_a . item () # \u53ef\u4ee5\u83b7\u5f97Tensor\u7684\u6570\u503c\uff0c\u800c\u4e0d\u662fTensor\uff0c\u800ctensor_a[0]\u5f97\u5230\u7684\u8fd8\u662ftensor,\u53ea\u4e0d\u8fc7\u662f0-dim\uff0c\u5f53\u7136tensor_a[0].item()\u4e5f\u53ef\u4ee5\uff0c\u73b0\u5728\u5df2\u7ecf\u4e0d\u662f\u7528[0]\u6765\u83b7\u53d6\u503c\u4e86 tensor_a . tolist () # \u628atensor\u8f6c\u4e3alist tensor_a . type () # Tensor\u7684\u6570\u636e\u7c7b\u578b tensor_a . dim () # Tensor\u7684\u7ef4\u5ea6\u4fe1\u606f tensor_a . numel () # Tensor\u4e2d\u5143\u7d20\u4e2a\u6570\u603b\u6570 \u7b49\u4ef7\u4e8etensor_a.nelement() # \u5e38\u7528\u65b9\u6cd5 # \u77e9\u9635\u8ba1\u7b97 torch . mm ( tensor1 , tensor2 ) # (m*n) * (n*p) -> (m*p). torch . bmm ( tensor1 , tensor2 ) # (b*m*n) * (b*n*p) -> (b*m*p). torch . addmm / addbmm / addmv / addr / baddbmm tensor1 * tensor2 # Element-wise multiplication. torch . dot / cross #\u5185\u79ef/\u5916\u79ef torch . inverse #\u6c42\u9006\u77e9\u9635 torch . svd #\u5947\u5f02\u503c\u5206\u89e3 tensor_a . t # \u8f6c\u7f6e # \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u77e9\u9635\u7684\u8f6c\u7f6e\u4f1a\u5bfc\u81f4\u5b58\u50a8\u7a7a\u95f4\u4e0d\u8fde\u7eed\uff0c\u9700\u8c03\u7528\u5b83\u7684.contiguous\u65b9\u6cd5\u5c06\u5176\u8f6c\u4e3a\u8fde\u7eed tensor_a . t () . contiguous () # \u5224\u65ad: tensor_a.t().is_contiguous()\u8fd4\u56deFalse\uff0c\u8f6c\u8fc7\u4e4b\u540e\u8fde\u7eed # \u9010\u5143\u7d20\u64cd\u4f5c torch . add ( x , y ) # x+y \u4e5f\u53ef\u4ee5 \u5f53\u7136 x.add_(y) # \u4e0d\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u5bf9x\u4fee\u6539,\u4e0b\u9762\u7684\u90fd\u53ef\u4ee5\u52a0_,\u4f8b:x.squeeze_(0) torch . mean ( x ) # \u6c42\u5747\u503c torch . matmul ( x , y ) # \u77e9\u9635\u4e58\u6cd5,\u4e5f\u53ef\u4ee5\u7528 torch.mm(x,y) torch . clamp ( x , min , max ) # \u622a\u65ad:\u5c0f\u4e8emin\u7684\u8bbe\u7f6e\u4e3amin\uff0c\u5927\u4e8emax\u7684\u8bbe\u7f6e\u4e3amax # torch.abs/sqrt/div/exp/fmod/log/pow.. \u7edd\u5bf9\u503c/\u5e73\u65b9\u6839/\u9664\u6cd5/\u6307\u6570/\u6c42\u4f59/\u6c42\u5e42.. # torch.cos/sin/asin/atan2/cosh.. \u76f8\u5173\u4e09\u89d2\u51fd\u6570 # torch.ceil/round/floor/trunc \u4e0a\u53d6\u6574/\u56db\u820d\u4e94\u5165/\u4e0b\u53d6\u6574/\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206 # torch.sigmod/tanh.. \u6fc0\u6d3b\u51fd\u6570 # \u603b\u7ed3\u7ecf\u9a8c:\u4e0b\u9762\u7684\u51fd\u6570\u5927\u591a\u90fd\u6709\u4e24\u4e2a\u5c5e\u6027: dim=0/1/..\u8868\u793a\u7ef4\u5ea6 keepdim=True\u4f1a\u4fdd\u7559\u7ef4\u5ea61 \u4f8b\u5982:\u8f93\u5165(m,n,k)->dim=0->\u8f93\u51fa(1, n, k)\u6216\u8005(n, k) # mean/sum/median/mode \u5747\u503c/\u548c/\u4e2d\u4f4d\u6570/\u4f17\u6570 # norm/dist \u8303\u6570/\u8ddd\u79bb # std/var \u6807\u51c6\u5dee/\u65b9\u5dee # cumsum/cumprod \u7d2f\u52a0/\u7d2f\u4e58(\u7279\u6b8a) tensor_a . cumsum ( dim = 1 ) # \u6cbf\u7740\u884c\u8fdb\u884c\u7d2f\u52a0\uff0c\u6ce8\u610f\u662f\u4f7f\u5404\u884c\u4e4b\u95f4\u6ca1\u8054\u7cfb\uff0c\u5404\u52a0\u5404\u7684 values , indexs = torch . topk ( torch . arange ( 10 ), k ) # \u8ba1\u7b97\u524dtopk\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u503c+\u7d22\u5f15 torch . max ( tensor_a ,[ dim ]) / torch . max ( tensor_a , tensor_b ) # \u5927\u5c0f max_value , max_idx = torch . max ( tensor_a , dim = 1 ) #\u5224\u65ad\u5927\u5c0f tensor_a > 1 # \u8fd4\u56de\u4e00\u4e2aByteTensor,\u5927\u4e8e1\u7684\u503c\u4e3a1\uff0c\u5c0f\u4e8e1\u7684\u503c\u4e3a0 tensor_a [ tensor_a > 1 ] # \u8fd4\u56detensor_a\u4e2d\u5927\u4e8e1\u7684tensor\u503c \u7b49\u4ef7\u4e8etensor_a.masked_select(a>1) torch . index_select ( input , dim , index ) # \u5728\u6307\u5b9a\u7ef4\u5ea6dim\u4e0a\u9009\u53d6\uff0c\u6bd4\u5982\u9009\u53d6\u67d0\u4e9b\u884c\u3001\u67d0\u4e9b\u5217 torch . masked_select ( input , mask ) # \u4f8b\u5b50\u5982\u4e0a\uff0ca[a>0]\uff0c\u4f7f\u7528ByteTensor\u8fdb\u884c\u9009\u53d6 torch . non_zero ( input ) # \u975e0\u5143\u7d20\u7684\u4e0b\u6807 torch . gather ( input , dim , index ) # \u6839\u636eindex\uff0c\u5728dim\u7ef4\u5ea6\u4e0a\u9009\u53d6\u6570\u636e\uff0c\u8f93\u51fa\u7684size\u4e0eindex\u4e00\u6837 # gather\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5bf9\u4e00\u4e2a2\u7ef4tensor\uff0c\u8f93\u51fa\u7684\u6bcf\u4e2a\u5143\u7d20\u5982\u4e0b\uff1a # out[i][j] = input[index[i][j]][j] # dim=0 # out[i][j] = input[i][index[i][j]] # dim=1 # \u4e3e\u4f8b\u5b50\uff1atorch.arange(0,16).view(4,4).gather(0,torch.LongTensor([[0,1,2,3]])) # \u53d6\u6b63\u5bf9\u89d2\u7ebf\u5143\u7d20 # gather\u76f8\u5bf9\u5e94\u7684\u9006\u64cd\u4f5c\u662fscatter_\uff0cgather\u628a\u6570\u636e\u4eceinput\u4e2d\u6309index\u53d6\u51fa\uff0c\u800cscatter_\u662f\u628a\u53d6\u51fa\u7684\u6570\u636e\u518d\u653e\u56de\u53bb\u3002\u6ce8\u610fscatter_\u51fd\u6570\u662finplace\u64cd\u4f5c\u3002 out = input . gather ( dim , index ) #-->\u8fd1\u4f3c\u9006\u64cd\u4f5c out = Tensor () out . scatter_ ( dim , index ) # \u64cd\u4f5c\u7ef4\u5ea6 # \u91cd\u70b9\uff0c\u589e\u52a0\u7ef4\u5ea6unsqueeze,\u51cf\u5c11\u7ef4\u5ea6squeeze,\u7ef4\u5ea6\u91cd\u6392 permute\uff0c\u7ef4\u5ea6\u4ea4\u6362 transpose, Tensor\u7684reshape\u64cd\u4f5c==tensor_a.view 0\u7ef4\u662fy\u8f74\uff0c1\u7ef4\u662fx\u8f74 None\u7c7b\u4f3c\u4e8enp . newaxis , \u4e3aa\u65b0\u589e\u4e86\u4e00\u4e2a\u8f74 # tensor_a.shape:(3,4) -> tensor_a[None].shape:(1,3,4) \u56e0\u4e3a\u7b49\u4ef7\u4e8e a[None,:,:] tensor_a . unsqueeze ( 0 ) # \u5728\u7b2c\u4e00\u7ef4\u5ea6\u589e\u52a0 \u53c2\u6570\u662fdim:0\u5f00\u59cb (4,3) -> (1,4,3) \u7b49\u4ef7\u4e8e tensor_a[None,:] ,\u8d1f\u6570\u7ef4\u5ea6\u8868\u793a\u5012\u6570\u7684\u7ef4\u5ea6 tensor_a . squeeze ( 0 ) # \u51cf\u5c11\u7b2c\u4e00\u7ef4\u5ea6 \u53c2\u6570\u662fdim:0\u5f00\u59cb (1,4,3) -> (4,3) tensor_a . squeeze () # \u6ca1\u6709\u53c2\u6570 \u5c06 tensor \u4e2d\u6240\u6709\u7684\u4e00\u7ef4\u5168\u90e8\u90fd\u53bb\u6389 (1,1,4,3) -> (4,3) tensor_a . expand ( * size ) # \u6269\u5927\u5f20\u91cf(\u91cd\u590d),\u4e0d\u4f1a\u5360\u7528\u989d\u5916\u7a7a\u95f4\uff0c\u53ea\u4f1a\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u6269\u5145\uff0c\u53ef\u6781\u5927\u8282\u7701\u5185\u5b58 torch . reshape ( tensor , ( 64 , 512 , 1 , 1 )) . expand ( 64 , 512 , 7 , 7 ) # # \u5f20\u91cf\u6269\u5c55 Expand tensor of shape 64*512 to shape 64*512*7*7. tensor_a . permute ( 1 , 0 , 2 ) # \u7ef4\u5ea6\u91cd\u65b0\u6392\u5217 (3,4,5) -> (4,3,5) tensor_a . transpose ( 0 , 2 ) # \u7ef4\u5ea6\u4ea4\u6362 (3,4,5) -> (5,4,3) tensor_a . view ( - 1 , 5 ) # Tensor reshape (3,4,5) -> (12,5) torch . reshape ( tensor , shape ) # torch.reshape \u53ef\u4ee5\u81ea\u52a8\u5904\u7406\u8f93\u5165\u5f20\u91cf\u4e0d\u8fde\u7eed\u7684\u60c5\u51b5 # \u5982\u679c\u65b0\u5927\u5c0f\u8d85\u8fc7\u4e86\u539f\u5927\u5c0f\uff0c\u4f1a\u81ea\u52a8\u5206\u914d\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u5982\u679c\u65b0\u5927\u5c0f\u5c0f\u4e8e\u539f\u5927\u5c0f\uff0c\u5219\u4e4b\u524d\u7684\u6570\u636e\u4f9d\u65e7\u4f1a\u88ab\u4fdd\u5b58,\u4f46\u662f\u53ea\u663e\u793asize\u5927\u5c0f\u7684\u6570\u636e tensor_a . resize_ () # \u4e0eview\u4e0d\u540c\uff0c\u5b83\u53ef\u4ee5\u4fee\u6539tensor\u7684\u5927\u5c0f # \u5f20\u91cf\u62fc\u63a5\uff0ctorch.cat\u4f1a\u6cbf\u7740\u6307\u5b9a\u7ef4\u5ea6\u62fc\u63a5\uff0ctorch.stack\u4f1a\u589e\u52a0\u4e00\u7ef4 # \u4f8b\u5982\u5f53\u53c2\u6570\u662f 3 \u4e2a 10\u00d75 \u7684\u5f20\u91cf\uff0ctorch.cat \u7684\u7ed3\u679c\u662f 30\u00d75 \u7684\u5f20\u91cf\uff0c\u800c torch.stack \u7684\u7ed3\u679c\u662f 3\u00d710\u00d75 \u7684\u5f20\u91cf torch . cat ( seq , dim = 0 , out = None ) # \u5728\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u62fc\u63a5\u5f20\u91cf,\u7ef4\u5ea6\u4e0d\u4f1a\u589e\u52a0\uff0c\u53ea\u4f1a\u5728\u67d0\u4e00\u7ef4\u5ea6\u8fdb\u884c\u62fc\u63a5 torch . stack (( Tensor ), dim ) # \u4f1a\u589e\u52a0\u4e00\u4e2a\u7ef4\u5ea6 a:(3,3),b:(3,3),torch.stack([a,b],0)->shape:(2,3,3),toch.stack([a,b],1)->shape:(3,2,3) # tensor\u5207\u7247 a [ 0 : 1 ,: 2 ] # \u7b2c0\u884c\uff0c\u524d\u4e24\u5217 tensor([[-0.1855, -0.4570]]) a [ 0 ,: 2 ] # \u6ce8\u610f\u4e24\u8005\u7684\u533a\u522b\uff1a\u5f62\u72b6\u4e0d\u540c tensor([-0.1855, -0.4570]) # \u9ad8\u7ea7\u7d22\u5f15 \u524d\u63d0:x.shape->(3,3,3) x [[ 1 , 2 ], [ 1 , 2 ], [ 2 , 0 ]] # x[1,1,2]\u548cx[2,2,0] x [[ 2 , 1 , 0 ], [ 0 ], [ 1 ]] # x[2,0,1],x[1,0,1],x[0,0,1] x [[ 0 , 2 ], ... ] # x[0] \u548c x[2] # \u5f20\u91cf\u590d\u5236 tensor . clone () # memory:new,still in graph:yes tensor . detach () # memory:shared,still in graph:no tensor . detach () . clone () # memory:new,still in graph:no # numpy & tensor tensor_var . numpy () # CPU:tensor->numpy,GPU\u65f6:tensor_var.cpu().numpy() torch . from_numpy ( tensor_var ) # numpy->tensor # \u6c42\u5bfc\uff0c\u4e09\u53d8\u91cf # x.data -> Variable \u53d8\u4e3aTensor # x.grad -> Variable\u7684\u68af\u5ea6 # x.grad_fn -> Variable\u7684\u68af\u5ea6\u51fd\u6570 tensor_a . backward ( parameters ) # \u53cd\u5411\u4f20\u64ad\u51fd\u6570:\u63a5\u53d7\u7684\u53c2\u6570parameters\u5fc5\u987b\u8981\u548ctensor_a\u7684\u5927\u5c0f\u4e00\u6a21\u4e00\u6837,\u7136\u540e\u4f5c\u4e3atensor_a\u7684\u7cfb\u6570\u4f20\u56de\u53bb # \u4e3e\u4f8b\u5b50 tensor_a . backward ( torch . ones ( tensor_a . size ())) # \u6ce8\u610f\uff1agrad\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u662f\u7d2f\u52a0\u7684(accumulated)\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e00\u6b21\u8fd0\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u68af\u5ea6\u90fd\u4f1a\u7d2f\u52a0\u4e4b\u524d\u7684\u68af\u5ea6\uff0c\u6240\u4ee5\u53cd\u5411\u4f20\u64ad\u4e4b\u524d\u9700\u628a\u68af\u5ea6\u6e05\u96f6\u3002 tensor_a . grad . data . zero_ () # \u4ee5\u4e0b\u5212\u7ebf\u7ed3\u675f\u7684\u51fd\u6570\u662finplace\u64cd\u4f5c\uff0c\u4f1a\u4fee\u6539\u81ea\u8eab\u7684\u503c\uff0c\u5c31\u50cfadd_ # pytorch\u4f7f\u7528GPU model = Net() device = torch . device ( \"cpu\" / \"cuda:x\" ) device = t . device ( \"cuda:0\" if t . cuda . is_available () else \"cpu\" ) model . to ( device ) # \u7b49\u4ef7\u4e8e net = net.to(device) images = images . to ( device ) labels = labels . to ( device ) Pytorch\u6570\u636e\u52a0\u8f7d\u4e0e\u5904\u7406 \u00b6 transforms\u768422\u4e2a\u65b9\u6cd5 \u91cd\u5199\u6570\u636e\u52a0\u8f7d: torch.utils.data.Dataset ,\u5fc5\u987b\u7ee7\u627f\u8fd9\u4e2a\u7c7b\uff0c\u5e76\u4e14\u91cd\u5199\u4e24\u4e2a\u65b9\u6cd5 __getitem__ \uff1a\u8fd4\u56de\u4e00\u6761\u6570\u636e\uff0c\u6216\u4e00\u4e2a\u6837\u672c\u3002 obj[index] \u7b49\u4ef7\u4e8e obj.__getitem__(index) __len__ \uff1a\u8fd4\u56de\u6837\u672c\u7684\u6570\u91cf\u3002len(obj)\u7b49\u4ef7\u4e8e obj.__len__() # \u65b9\u6cd5\u4e00:\u7ee7\u627fdata.Dataset class DogCat ( data . Dataset ): # \u5fc5\u987b\u7ee7\u627fdata.Dataset\u7c7b def __init__ ( self , root , transforms = None ): # root\u662f\u6307\u6839\u76ee\u5f55,\u52a0\u5165\u9884\u5904\u7406 imgs = os . listdir ( root ) #\u6307\u5b9a\u8def\u5f84\uff0c\u65b9\u4fbf\u5728__getitem__\u65b9\u6cd5\u4e2d\u8bfb\u53d6\u56fe\u7247 \u7528\u5217\u8868\u662f\u65b9\u4fbf\u7d22\u5f15 self . imgs = [ os . path . join ( root , img ) for img in imgs ] self . transforms = transforms def __getitem__ ( self , index ): img_path = self . imgs [ index ] # dog->1,cat->0 label = 1 if 'dog' in img_path . split ( '/' )[ - 1 ] . split ( '.' )[ 0 ] else 0 data = Image . open ( img_path ) if self . transforms : # \u6267\u884c\u9884\u5904\u7406\u64cd\u4f5c data = self . transforms ( data ) else : array = np . asarray ( data ) data = torch . from_numpy ( array ) return data , label def __len__ ( self ): return len ( self . imgs ) # \u56fe\u50cf\u589e\u5f3a from torchvision import transforms as T transform = T . Compose ([ T . Resize ( 224 ), # \u7f29\u653e\u56fe\u7247(Image)\uff0c\u4fdd\u6301\u957f\u5bbd\u6bd4\u4e0d\u53d8\uff0c\u6700\u77ed\u8fb9\u4e3a224\u50cf\u7d20 T . CenterCrop ( 224 ), # \u4ece\u56fe\u7247\u4e2d\u95f4\u5207\u51fa224*224\u7684\u56fe\u7247 T . ToTensor (), # \u5c06\u56fe\u7247(Image)\u8f6c\u6210Tensor\uff0c\u5f52\u4e00\u5316\u81f3[0, 1] T . Normalize ( mean = [ . 5 , . 5 , . 5 ], std = [ . 5 , . 5 , . 5 ]) # \u6807\u51c6\u5316\u81f3[-1, 1]\uff0c\u89c4\u5b9a\u5747\u503c\u548c\u6807\u51c6\u5dee ]) dataset = DogCat ( \"./dogs-vs-cats/train/\" , transforms = transform ) img , label = dataset [ 0 ] print ( img . shape , label ) # torch.Size([3, 224, 224]) 1 ImageFolder # \u8bfb\u53d6\u5206\u7c7b\u7684\u76ee\u5f55\u7ed3\u6784 DogCat |- cat / # \u56e0\u4e3aImageFolder\u5b9a\u4e49\u7684\u7c7b\u540d\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u4e00\u822c\u5efa\u8bae\u76f4\u63a5\u628a\u76ee\u5f55\u540d\u6539\u4e3a\u4ece0\u5f00\u59cb |- cat0 . jpg ... |- dog |- dog0 . jpg ... # \u4e00\u4e2a\u65b9\u6cd5: torchvision . datasets . ImageFolder ( root , # \u5728root\u6307\u5b9a\u7684\u8def\u5f84\u4e0b\u5bfb\u627e\u56fe\u7247 transform = None , # \u56fe\u50cf\u589e\u5f3a target_transform = None , # \u5bf9label\u8f6c\u6362 loader =< function default_loader at 0x11ed2b560 > , # \u7ed9\u5b9a\u8def\u5f84\u540e\u5982\u4f55\u8bfb\u53d6\u56fe\u7247\uff0c\u9ed8\u8ba4\u8bfb\u53d6\u4e3aRGB\u683c\u5f0f\u7684PIL Image\u5bf9\u8c61 is_valid_file = None , ) # \u4e09\u4e2a\u53d8\u91cf self . classes # \u7528\u4e00\u4e2alist\u4fdd\u5b58 \u7c7b\u540d self . class_to_idx # {\u7c7b\u540d:\u7c7b\u5e8f\u53f7(\u4ece0\u5f00\u59cb)}->{'cat': 0, 'dog': 1} self . imgs # [(imgpath1,0),(imgpath2,0),(imgpath3,1)...] # ImageFolder\u7684\u8fd4\u56de\u503c\uff0cdataset dataset [ 0 ] # \u7b2c\u4e00\u7ef4\u5ea6\u662f\u7b2c\u51e0\u5f20\u56fe\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b(\u56fe\u7247\u5bf9\u8c61\uff0clabel)\u7684\u5bf9\u8c61,\u5982\u679c\u6ca1\u6709transform\uff0c\u8fd4\u56de\u7684\u8fd8\u662fPIL dataset [ 0 ][ 0 ] # \u56fe\u7247\u5bf9\u8c61 dataset [ 0 ][ 1 ] # label # \u4e00\u4e2a\u5c0f\u4f8b\u5b50 normalize = transforms . Normalize ( mean = [ 0.4 , 0.4 , 0.4 ], std = [ 0.2 , 0.2 , 0.2 ]) transform = transforms . Compose ([ transforms . RandomResizedCrop ( 224 ), transforms . RandomHorizontalFlip (), transforms . ToTensor (), normalize , ]) dataset = ImageFolder ( 'DogCat/' , transform = transform ) dataset [ 0 ][ 0 ] . shape # CxHxW # \u770b\u770b\u56fe\u7247 to_img = transforms . ToPILImage () # 0.2\u548c0.4\u662f\u6807\u51c6\u5dee\u548c\u5747\u503c\u7684\u8fd1\u4f3c to_img ( dataset [ 0 ][ 0 ] * 0.2 + 0.4 ) # \u4f1a\u663e\u793a\u56fe\u7247 Dataset # \u4e0a\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u6b21\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a(img,label),\u8bad\u7ec3\u7684\u65f6\u5019\u4e00\u822c\u662fbatch\uff0c\u6240\u4ee5 torch . utils . data . DataLoader ( dataset , # \u4e0a\u9762\u65b9\u5f0f\u7684\u8fd4\u56de\u503c batch_size = 1 , shuffle = False , sampler = None , # \u6837\u672c\u62bd\u6837 batch_sampler = None , num_workers = 0 , # \u591a\u8fdb\u7a0b collate_fn = None , # \u5c06\u82e5\u5e72\u56fe\u7247\u62fc\u63a5\u4e3a\u4e00\u4e2abatch\u7684\u6570\u636e\u62fc\u63a5\u65b9\u5f0f\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49 pin_memory = False , # \u662f\u5426\u5c06\u6570\u636e\u4fdd\u5b58\u5728pin memory\u533a\uff0cpin memory\u4e2d\u7684\u6570\u636e\u8f6c\u5230GPU\u4f1a\u5feb\u4e00\u4e9b drop_last = False , timeout = 0 , worker_init_fn = None , multiprocessing_context = None , ) # \u5c0f\u4f8b\u5b50 from torch.utils.data import DataLoader # \u5bfc\u5165\u5305\uff0c\u6ce8\u610f\u4f4d\u7f6e dataloader = DataLoader ( dataset , batch_size = 32 , shuffle = True , num_workers = 0 , drop_last = False ) # \u6ce8\u610f:dataloader\u8fd4\u56de\u7684\u662f\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u8fed\u4ee3\u5bf9\u8c61\u5305\u542bbatch_size\u4e2a\u6837\u672c dataiter = iter ( dataloader ) imgs , labels = next ( dataiter ) # batch_size\u4e2a imgs . shape # torch.Size([32, 3, 224, 224]) \u8865\u5145:collate_fn\u51fd\u6570 # \u81ea\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u8f93\u51fa def custom_collate ( batch ): ''' \u56fe\u50cf\u8bc6\u522b:\u8fd9\u4e2abatch\u662f\u4e00\u4e2alist\uff0c\u957f\u5ea6\u662fbatch_size\uff0c\u91cc\u9762\u7684\u5143\u7d20\u662fself.__getitem__(index)\u5f97\u5230\u7684\u5143\u7d20:[(img1,label1),(img2,label2)] \u76ee\u6807\u68c0\u6d4b:\u8fd9\u4e2abatch\u53ef\u80fd\u662f:[{'image': img, 'bboxes': bbox, 'category_id': labels},....] \u603b\u7ed3:\u8fd9\u4e2alist\u91cc\u9762\u662f\u4ec0\u4e48\u5185\u5bb9\uff0c\u53d6\u51b3\u4e8e self.__getitem__(index) return\u7684\u662f\u4ec0\u4e48\u5143\u7d20 ''' # \u4e0b\u9762\u4ee5\u56fe\u50cf\u8bc6\u522b\u8fd4\u56de\u7684[img,label]\u8fdb\u884c\u6539\u5199 batch . sort ( key = lambda x : len ( x [ 1 ]), reverse = True ) # \u5148\u6309label\u957f\u5ea6\u8fdb\u884c\u6392\u5e8f img , label = zip ( * batch ) pad_label = [] lens = [] max_len = len ( label [ 0 ]) # \u8fdb\u884c\u957f\u5ea6\u7684pad for i in range ( len ( label )): temp_label = [ 0 ] * max_len temp_label [: len ( label [ i ])] = label [ i ] pad_label . append ( temp_label ) lens . append ( len ( label [ i ])) return img , pad_label , lens # [img,label,label_len] \u91c7\u6837\u5668Sample \u00b6 \u91c7\u6837Sample\u4ecb\u7ecd: torch.utils.data.sampler.xx \uff0c\u6ce8\u610f\uff0c \u6bcf\u4e2a\u53d6\u6837\u5668\u8fd4\u56de\u7684\u90fd\u662f\u6837\u672c\u5728dataset\u4e2d\u7684\u7d22\u5f15\uff0c\u5e76\u4e0d\u662f\u6837\u672c\u672c\u8eab # 1.SequentialSampler(data_source) # \u987a\u5e8f\u91c7\u6837\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570dataset\u3002\u8fd4\u56de\u4ee5\u4e00\u4e2a\u4e0e\u6570\u636e\u96c6\u7b49\u957f\u7684\u8fed\u4ee3\u5668 # 2.RandomSampler(data_source,replacement=False,num_samples=None) # \u968f\u673a\u91c7\u6837 # 2.1 data_source (Dataset) \u2013 dataset to sample from # 2.2 replacement (bool) \u653e\u56de/\u4e0d\u653e\u56de\u91c7\u6837\uff0c\u9ed8\u8ba4\u4e0d\u653e\u56de # 2.3 num_samples (python:int) \u2013 default=`len(dataset)`.replacement=True\u65f6\u4f7f\u7528\uff1b\u9ed8\u8ba4\u662f\u9009\u62e9\u6240\u6709\u6570\u636e\uff0c\u5f53\u653e\u56de\u91c7\u6837\u65f6\u53ef\u4ee5\u8bbe\u5b9a\u968f\u673a\u9009\u53d6\u591a\u5c11\u4e2a\u6570\u636e\u3002 # 3.WeightedRandomSampler(weights,num_samples,replacement=True) # 3.1 weights (sequence)\u8d4b\u4e88\u6bcf\u4e2a\u6837\u672c\u6743\u91cd\u3002\u4ee3\u8868\u53d6\u5230\u8be5\u6837\u4f8b\u7684\u6982\u7387\u3002\u6570\u636e\u4e0d\u5747\u8861\u65f6\u53ef\u4ee5\u7528\u6765\u63a7\u5236\u4e0d\u540c\u7c7b\u522b\u6837\u672c\u7684\u91c7\u6837\u6743\u91cd # 3.2 num_samples (python:int) \u2013 number of samples to draw # 3.2 replacement (bool) \u2013 if True, samples are drawn with replacement. If not, they are drawn without replacement, which means that when a sample index is drawn for a row, it cannot be drawn again for that row. # final \u914d\u5408DataLoader\u4e00\u8d77\u4f7f\u7528 sample = torch . utils . data . sampler . xx # \u52a0\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u53d6\u6837\uff0c\u4f8b\u5982\u6570\u636e\u662f20\uff0c\u53ef\u4ee5\u5148\u53d6\u683710\uff0c\u5982\u679cbatch_size=2\uff0c\u90a3\u4e48dataloader\u7684len\u662f5 daloloader = torch . utils . data . DataLoader ( data , batch_size = 2 , sampler = sample ) \u6a21\u578b\u591a\u5361\u8bad\u7ec3 \u00b6 \u535a\u5ba2-\u91cd\u8981 | \u4ee3\u7801 Pytorch\u795e\u7ecf\u7f51\u7edc\u6a21\u5757 \u00b6 # \u7b80\u5355\u6982\u8ff0\u4e00\u4e0b import torch.nn.functional as F from torch import nn # \u8fdb\u5165\u795e\u7ecf\u7f51\u7edc\uff0c\u4e0d\u5f97\u4e0d\u63d0 nn.Parameter \u548cVariable\u7c7b\u4f3c\uff0c\u4f46\u662f\u9ed8\u8ba4\u662f\u6c42\u68af\u5ea6\u7684 w = nn . Parameter ( torch . randn ( 2 , 1 )) # \u8fd9\u662fnn.Parameter\u53d8\u91cfw b = nn . Parameter ( torch . zeros ( 1 )) # \u8fd9\u662fnn.Parameter\u53d8\u91cf b # \u795e\u7ecf\u7f51\u7edc\u4e2d\u5e38\u7528\u7684\u53c2\u6570 F . sigmoid ( x ) # \u6c42x\u7684sigmoid\u51fd\u6570 F . tanh ( x ) # tanh\u51fd\u6570 F . relu ( x ) # \u5377\u79ef\u5c42,\u8f93\u5165\u7684shape=(N,C,H,W) \u8f93\u51fa\u76f8\u540cshape torch . nn . Conv2d ( in_channels , # int out_channels , # int kernel_size , # int or tuple stride = 1 , # int or tuple padding = 0 , # int or tuple,\u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570 dilation = 1 , # int or tuple\uff0c\u7a7a\u6d1e\u5377\u79ef\uff0c\u5377\u79ef\u6838\u5143\u7d20\u4e4b\u95f4\u7684\u95f4\u8ddd groups = 1 , # int \u4ece\u8f93\u5165\u901a\u9053\u5230\u8f93\u51fa\u901a\u9053\u7684\u963b\u585e\u8fde\u63a5\u6570 bias = True , # bool padding_mode = 'zeros' , ) # BN\u5c42,\u8f93\u5165\u7684shape=(N,C,H,W) \u8f93\u51fa\u76f8\u540cshape torch . nn . BatchNorm2d ( num_features , # \u8f93\u5165\u7279\u5f81\u56fe(N,C,H,W)\u4e2d\u7684C eps = 1e-05 , # \u4e3a\u4fdd\u8bc1\u6570\u503c\u7a33\u5b9a\u6027\uff08\u5206\u6bcd\u4e0d\u80fd\u8d8b\u8fd1\u6216\u53d60\uff09,\u7ed9\u5206\u6bcd\u52a0\u4e0a\u7684\u503c\u3002\u9ed8\u8ba4\u4e3a1e-5 momentum = 0.1 , # \u52a8\u6001\u5747\u503c\u548c\u52a8\u6001\u65b9\u5dee\u6240\u4f7f\u7528\u7684\u52a8\u91cf\u3002\u9ed8\u8ba4\u4e3a0.1 affine = True , #\u662f\u5426\u9700\u8981\u4eff\u5c04:\u5982\u679cFalse,\u90a3\u4e48gamma=1,beta=0,\u4e14\u4e0d\u4f1a\u88ab\u5b66\u4e60 track_running_stats = True , # # track_running_stats=True\u8868\u793a\u8ddf\u8e2a\u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\uff0c\u5f97\u5230\u65b9\u5dee\u548c\u5747\u503c\uff0c\u800c\u4e0d\u53ea\u662f\u4ec5\u4ec5\u4f9d\u8d56\u4e0e\u5f53\u524d\u8f93\u5165\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\u3002\u76f8\u53cd\u7684\uff0c\u5982\u679ctrack_running_stats=False\u90a3\u4e48\u5c31\u53ea\u662f\u8ba1\u7b97\u5f53\u524d\u8f93\u5165\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\u4e2d\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e86\u3002\u5f53\u5728\u63a8\u7406\u9636\u6bb5\u7684\u65f6\u5019\uff0c\u5982\u679ctrack_running_stats=False\uff0c\u6b64\u65f6\u5982\u679cbatch_size\u6bd4\u8f83\u5c0f\uff0c\u90a3\u4e48\u5176\u7edf\u8ba1\u7279\u6027\u5c31\u4f1a\u548c\u5168\u5c40\u7edf\u8ba1\u7279\u6027\u6709\u7740\u8f83\u5927\u504f\u5dee\uff0c\u53ef\u80fd\u5bfc\u81f4\u7cdf\u7cd5\u7684\u6548\u679c\u3002 ) # \u6c60\u5316\u5c42,\u8f93\u5165\u7684shape=(N,C,H,W) \u8f93\u51fa\u76f8\u540cshape torch . nn . MaxPool2d ( kernel_size , # max pooling \u7684\u7a97\u53e3\u5927\u5c0f stride = None , # \u79fb\u52a8\u6b65\u957f\uff0c\u9ed8\u8ba4\u662fkernel_size padding = 0 , # \u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u586b\u51450\u7684\u5c42\u6570 dilation = 1 , # \u63a7\u5236\u7a97\u53e3\u4e2d\u5143\u7d20\u6b65\u5e45 return_indices = False , # True,\u4f1a\u8fd4\u56de\u8f93\u51fa\u6700\u5927\u503c\u7684\u5e8f\u53f7\uff0c\u5bf9\u4e8e\u4e0a\u91c7\u6837\u64cd\u4f5c\u4f1a\u6709\u5e2e\u52a9 ceil_mode = False # \u5982\u679c\u7b49\u4e8eTrue\uff0c\u8ba1\u7b97\u8f93\u51fa\u4fe1\u53f7\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u4f1a\u4f7f\u7528\u5411\u4e0a\u53d6\u6574\uff0c\u4ee3\u66ff\u9ed8\u8ba4\u7684\u5411\u4e0b\u53d6\u6574\u7684\u64cd\u4f5c ) torch . nn . AvgPool2d ( kernel_size , # \u6c60\u5316\u7a97\u53e3\u5927\u5c0f stride = None , # \u79fb\u52a8\u6b65\u957f padding = 0 , # \u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570 dilation = 1 , # \u4e00\u4e2a\u63a7\u5236\u7a97\u53e3\u4e2d\u5143\u7d20\u6b65\u5e45\u7684\u53c2\u6570 ceil_mode = False , count_include_pad = True ) # \u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42 torch . nn . AdaptiveMaxPool2d ( output_size , # \u8f93\u51fa\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u7528\uff08H,W\uff09\u8868\u793aH*W\u7684\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57H\u8868\u793aH*H\u5927\u5c0f\u7684\u8f93\u51fa return_indices = False ) # \u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u4f1a\u8fd4\u56de\u8f93\u51fa\u7684\u7d22\u5f15 # \u56fe\u7247\u4e0a\u91c7\u6837 torch . nn . functional . interpolate ( input , # \u8f93\u5165 size = None , scale_factor = None , # \u653e\u5927\u7684\u500d\u6570 mode = 'nearest' , # \"nearest\"/\"area\"/\"linear\" align_corners = None , ) # \u8f6c\u7f6e\u5377\u79ef # \u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u8f93\u5165\u8f93\u51fa\u7684\u5c3a\u5bf8\u7684\u516c\u5f0f\u5982\u4e0b:output = (input-1)*stride+outputpadding-2*padding+kernelsize torch . nn . ConvTranspose2d ( in_channels , # int out_channels , # int kernel_size , # int or tuple stride = 1 , # int or tuple,\u5c06\u8981\u8f93\u5165\u6269\u5927\u7684\u500d\u6570 padding = 0 , # int or tuple\uff0c\u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570\uff0c\u9ad8\u5bbd\u90fd\u589e\u52a02*padding output_padding = 0 , # int or tuple\uff0c\u8f93\u51fa\u8fb9\u8865\u51450\u7684\u5c42\u6570\uff0c\u9ad8\u5bbd\u90fd\u589e\u52a0padding groups = 1 , # int \u4ece\u8f93\u5165\u901a\u9053\u5230\u8f93\u51fa\u901a\u9053\u7684\u963b\u585e\u8fde\u63a5\u6570 bias = True , # bool dilation = 1 , # int or tuple,\u5377\u79ef\u6838\u5143\u7d20\u4e4b\u95f4\u7684\u95f4\u8ddd padding_mode = 'zeros' , ) # \u5168\u8fde\u63a5\u5c42 torch . nn . Linear ( in_features , out_features , bias = True ) # Dropout,\u4ee5\u4e00\u5b9a\u7684\u6982\u7387\u95ed\u5408\u795e\u7ecf\u5143 torch . nn . Dropout ( p = 0.5 , inplace = False ) # \u6fc0\u6d3b\u51fd\u6570 torch . nn . Sigmoid () torch . nn . Tanh () torch . nn . Softmax () # ReLU\u6fc0\u6d3b:inplace\u5982\u679c\u8bbe\u4e3aTrue\uff0c\u5b83\u4f1a\u628a\u8f93\u51fa\u76f4\u63a5\u8986\u76d6\u5230\u8f93\u5165\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5185\u5b58/\u663e\u5b58 torch . nn . ReLU ( inplace ) # inplace\u9ed8\u8ba4\u4e3aFalse,ReLU\u51fd\u6570\u6709\u4e2ainplace\u53c2\u6570\uff0c\u5982\u679c\u8bbe\u4e3aTrue,\u5b83\u4f1a\u628a\u8f93\u51fa\u76f4\u63a5\u8986\u76d6\u5230\u8f93\u5165\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5185\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u3002\u4f46\u662f\u53ea\u6709\u5c11\u6570\u7684autograd # f(x) = max(0,x)+negative_slope*min(0,x) negative_slope\uff1a\u63a7\u5236\u8d1f\u659c\u7387\u7684\u89d2\u5ea6 torch . nn . LeakyReLU ( negative_slope = 0.01 , inplace = False ) torch . nn . ReLU6 ( inplace ) #ReLU6(x) = min(max(0,x), 6) torch . nn . Threshold ( threshold , value , inplace = False ) #\u9608\u503c\u3002\u8f93\u5165\u503c\u5c0f\u4e8e\u9608\u503c\u5219\u4f1a\u88abvalue\u4ee3\u66ff Pytorch\u642d\u5efa\u7f51\u7edc \u00b6 # \u642d\u5efa\u7f51\u7edc\u524d\u5fc5\u987b\u5148\u4ecb\u7ecd\u4e00\u4e0bpytorch\u7684\u521d\u59cb\u5316 from torch.nn import init torch . nn . init . xavier_uniform ( seq_net [ 0 ] . weight ) # Xavier \u521d\u59cb\u5316\u65b9\u6cd5 import torch.nn as nn from torch.nn import functional as F # \u65b9\u6cd5\u4e00 class Net ( nn . Module ): # \u7ee7\u627fnn.Module def __init__ ( self ): super ( Net , self ) . __init__ () self . conv1 = nn . Conv2d ( 3 , 6 , 5 ) # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b self . conv2 = nn . Conv2d ( 6 , 16 , 5 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) # \u4fee\u6539\u521d\u59cb\u5316 for m in self . modules (): if isinstance ( m , torch . nn . Conv2d ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () elif isinstance ( m , torch . nn . Linear ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () def forward ( self , x ): # \u524d\u9879\u4f20\u64ad\u51fd\u6570\uff0cbackward\u51fd\u6570\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 x = F . pool ( F . relu ( self . conv1 ( x )), 2 ) x = F . pool ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , 16 * 5 * 5 ) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x # \u65b9\u5f0f\u4e8c seq_net = nn . Sequential ( # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b nn . Linear ( 2 , 4 ), nn . Tanh (), nn . Linear ( 4 , 1 ) ) # \u6a21\u578b\u5c42\u7684\u4e00\u4e9b\u5e38\u7528\u53c2\u6570 seq_net [ 0 ] # \u7b2c\u4e00\u5c42\uff0c\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u6bcf\u4e00\u5c42\uff0c\u7528\u5176\u4ed6\u4e24\u79cd\u6709\u540d\u5b57\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u540d\u5b57\u53d6 seq_net [ 0 ] . weight # \u7b2c\u4e00\u5c42\u7684\u6743\u91cd\u7684module seq_net [ 0 ] . weight . data # \u7b2c\u4e00\u5c42\u7684\u6743\u91cd seq_net [ 0 ] . bias # \u7b2c\u4e00\u5c42\u7684bias\u7684\u53c2\u6570 # \u65b9\u5f0f\u4e09 net1 = nn . Sequential () net1 . add_module ( 'conv' , nn . Conv2d ( 3 , 3 , 3 )) net1 . add_module ( 'batchnorm' , nn . BatchNorm2d ( 3 )) net1 . add_module ( 'activation_layer' , nn . ReLU ()) # \u65b9\u5f0f\u56db from collections import OrderedDict net3 = nn . Sequential ( OrderedDict ([ ( 'conv1' , nn . Conv2d ( 3 , 3 , 3 )), ( 'bn1' , nn . BatchNorm2d ( 3 )), ( 'relu1' , nn . ReLU ()) ])) # 1.\u904d\u5386\u6bcf\u4e00\u5c42,net._modules.items() net = Net () for name , layer in net . _modules . items (): print ( name , layer ) # conv1 Conv2d(3,6,kernel_size=(5,5),stride=(1,1)) net . conv1 # \u76f4\u63a5\u901a\u8fc7\u540d\u5b57\u8bbf\u95ee\u67d0\u5c42 net . conv1 . weight #\u6253\u5370\u8be5\u5c42\u6743\u91cdmodule\uff0ctorch.nn.parameter.Parameter\u5bf9\u8c61 net . conv1 . weight . data # \u83b7\u53d6\u8be5\u5c42\u7684\u6743\u91cd\u503c net . conv1 . weight . grad # \u68af\u5ea6 net . conv1 . bias # \u6253\u5370\u8be5\u5c42\u504f\u7f6e # 3.\u9644\u52a0\u63d0\u53d6\u4fe1\u606f(\u53ef\u4ee5\u770b\u770b) # 3.1 net.modules() & net.named_modules() \u8fd4\u56de\u7684\u662f\u6240\u6709\u7684\u5143\u7d20\uff0c\u5305\u62ec\u4e0d\u540c\u7ea7\u522b\u7684\u5b50\u5143\u7d20\uff0cmodel->\u7b2c\u4e00\u5c42\u7531\u6d45\u5165\u6df1\u9010\u5c42\u904d\u5386->\u7b2c\u4e8c\u5c42\u7531\u6d45\u5165\u6df1\u9010\u5c42\u904d\u5386->...->\u6700\u540e\u4e00\u5c42\u7684\u5916\u5c42->...->\u6700\u540e\u4e00\u5c42\u7684\u6700\u91cc\u9762\u4e00\u5c42\u3002 # \u5e38\u7528\u4f5c\u4e0b\u9762\u7684\u7ed3\u6784 for m in model . modules (): if isinstance ( m , nn . Conv2d ) or isinstance ( m , nn . Linear ): pass # 3.2 net.children() & net.named_children() \u8fd4\u56de\u7684\u662f\u6700\u5916\u5c42\u7684\u5143\u7d20 # 3.3.\u6a21\u578b\u7684\u4e00\u4e9b\u5e38\u7528\u53c2\u6570 model . parameters () # \u83b7\u5f97\u6a21\u578b\u7684\u53c2\u6570\uff0c\u8fd9\u6837\u5728 torch.optim.SGD(param,0.1) \u5c31\u53ef\u4ee5\u7528\u4e86,\u5faa\u73af\u904d\u5386\u7684\u8bdd\u6bcf\u4e2a\u53c2\u6570\u5176\u5b9e\u5c31\u662f net.conv1.weight # for name,parameters in net.named_parameters(): return \u540d\u5b57+\u53c2\u6570 model . named_parameters () # \u53ef\u540c\u65f6\u8fd4\u56de\u53ef\u5b66\u4e60\u7684\u53c2\u6570\u53ca\u540d\u79f0\u3002\u4f8b: conv1.weight:\u53c2\u6570 model . zero_grad () # \u6240\u6709\u53c2\u6570\u7684\u68af\u5ea6\u6e05\u96f6 # 4.\u8bbf\u95ee\u6bcf\u4e00\u5c42\u7684\u5404\u4e2a\u5c5e\u6027\uff0c\u5305\u62ecbatchnorm\u7684running_mean/bn.running_var # \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4e00\u822c\u662f\u5b58\u5230.pth\u6a21\u578b\u4e2d\u7684\u6570\u636e for k , v in net . state_dict () . items (): print ( k , v . shape ) # net.named_parames() \u53ea\u8bbf\u95eeweight/bias\uff0cbatchnorm\u7684runing_xx\u4e0d\u80fd # 5.ModuleList:\u53ef\u4ee5\u50cf\u7528list\u4e00\u6837\u4f7f\u7528\u5b83\uff0c\u4f46\u4e0d\u80fd\u76f4\u63a5\u628a\u8f93\u5165\u4f20\u7ed9ModuleList # \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528List\u5462\uff0c\u5e72\u561b\u591a\u6b64\u4e00\u4e3e\u5462\u8fd9\u662f\u56e0\u4e3aModuleList\u662fModule\u7684\u5b50\u7c7b\uff0c\u5f53\u5728Module\u4e2d\u4f7f\u7528\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u80fd\u81ea\u52a8\u8bc6\u522b\u4e3a\u5b50module\u3002 modellist = nn . ModuleList ([ nn . Linear ( 3 , 4 ), nn . ReLU (), nn . Linear ( 4 , 2 ) ]) # output = modelist(input) \u4f1a\u62a5\u9519,\u56e0\u4e3amodellist\u6ca1\u6709\u5b9e\u73b0forward\u65b9\u6cd5 # \u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528 input = t . randn ( 1 , 3 ) for model in modellist : input = model ( input ) # 6.ParameterList,\u7c7b\u4f3cModuleList self . params = nn . ParameterList ([ nn . Parameter ( torch . randn ( 10 , 10 )) for i in range ( 10 )]) Pytorch\u521d\u59cb\u5316\u7684\u4e24\u79cd\u65b9\u5f0f \u00b6 from torch.nn import init import torch.nn as nn from torch.nn import functional as F # \u65b9\u5f0f\u4e00\uff0cmodel.apply(func_name)\uff1aapply\u51fd\u6570\u53ef\u4ee5\u4e0d\u65ad\u904d\u5386model\u7684\u5404\u4e2a\u6a21\u5757\u3002\u5b9e\u9645\u4e0a\u5176\u4f7f\u7528\u7684\u662f\u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5 class Net ( nn . Module ): # \u7ee7\u627fnn.Module def __init__ ( self ): super ( Net , self ) . __init__ () self . conv1 = nn . Conv2d ( 3 , 6 , 5 ) # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b self . conv2 = nn . Conv2d ( 6 , 16 , 5 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) def forward ( self , x ): # \u524d\u9879\u4f20\u64ad\u51fd\u6570\uff0cbackward\u51fd\u6570\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 x = F . pool ( F . relu ( self . conv1 ( x )), 2 ) x = F . pool ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , 16 * 5 * 5 ) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x # 1. \u6839\u636e\u7f51\u7edc\u5c42\u7684\u4e0d\u540c\u5b9a\u4e49\u4e0d\u540c\u7684\u521d\u59cb\u5316\u65b9\u5f0f def weight_init ( m ): if isinstance ( m , nn . Linear ): nn . init . xavier_normal_ ( m . weight ) nn . init . constant_ ( m . bias , 0 ) # \u4e5f\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u4e3aconv2d\uff0c\u4f7f\u7528\u76f8\u5e94\u7684\u521d\u59cb\u5316\u65b9\u5f0f elif isinstance ( m , nn . Conv2d ): nn . init . kaiming_normal_ ( m . weight , mode = 'fan_out' , nonlinearity = 'relu' ) # \u662f\u5426\u4e3a\u6279\u5f52\u4e00\u5316\u5c42 elif isinstance ( m , nn . BatchNorm2d ): nn . init . constant_ ( m . weight , 1 ) nn . init . constant_ ( m . bias , 0 ) # 2. \u521d\u59cb\u5316\u7f51\u7edc\u7ed3\u6784 model = Net ( in_dim , n_hidden_1 , n_hidden_2 , out_dim ) # 3. \u5c06weight_init\u5e94\u7528\u5728\u5b50\u6a21\u5757\u4e0a model . apply ( weight_init ) # \u65b9\u5f0f\u4e8c\uff0c\u5229\u7528self.modules()\u6765\u8fdb\u884c\u5faa\u73af class Net ( nn . Module ): # \u7ee7\u627fnn.Module def __init__ ( self ): super ( Net , self ) . __init__ () self . conv1 = nn . Conv2d ( 3 , 6 , 5 ) # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b self . conv2 = nn . Conv2d ( 6 , 16 , 5 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) # \u4fee\u6539\u521d\u59cb\u5316 for m in self . modules (): if isinstance ( m , torch . nn . Conv2d ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () elif isinstance ( m , torch . nn . Linear ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () def forward ( self , x ): # \u524d\u9879\u4f20\u64ad\u51fd\u6570\uff0cbackward\u51fd\u6570\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 x = F . pool ( F . relu ( self . conv1 ( x )), 2 ) x = F . pool ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , 16 * 5 * 5 ) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x Pytorch\u7684\u94a9\u5b50\u51fd\u6570hook \u00b6 \u539f\u6587\u535a\u5ba2\u94fe\u63a5: link1 | link2 torch.autograd.Variable.register_hook (torch.tensor.register_hook\uff09 torch.nn.Module.register_backward_hook (Python method, in torch.nn) torch.nn.Module.register_forward_hook \u7b2c\u4e00\u4e2a\u662fregister_hook\uff0c\u662f\u9488\u5bf9Variable\u5bf9\u8c61\u7684\uff0c\u540e\u9762\u7684\u4e24\u4e2a\uff1aregister_backward_hook\u548cregister_forward_hook\u662f\u9488\u5bf9nn.Module\u8fd9\u4e2a\u5bf9\u8c61\u7684\u3002 \u5229\u7528\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5**\u4e0d\u5fc5\u6539\u53d8\u7f51\u7edc\u8f93\u5165\u8f93\u51fa\u7684\u7ed3\u6784\uff0c\u65b9\u4fbf\u5730\u83b7\u53d6\u3001\u6539\u53d8\u7f51\u7edc\u4e2d\u95f4\u5c42\u53d8\u91cf\u7684\u503c\u548c\u68af\u5ea6** pytorch\u75db\u70b9:\u4e2d\u95f4\u53d8\u91cf\u7684\u91ca\u653e \u5728 PyTorch \u7684\u8ba1\u7b97\u56fe\uff08computation graph\uff09\u4e2d\uff0c \u53ea\u6709\u53f6\u5b50\u7ed3\u70b9\uff08leaf nodes\uff09\u7684\u53d8\u91cf\u4f1a\u4fdd\u7559\u68af\u5ea6 \u3002\u800c\u6240\u6709\u4e2d\u95f4\u53d8\u91cf\u7684\u68af\u5ea6\u53ea\u88ab\u7528\u4e8e\u53cd\u5411\u4f20\u64ad\uff0c\u4e00\u65e6\u5b8c\u6210\u53cd\u5411\u4f20\u64ad\uff0c \u4e2d\u95f4\u53d8\u91cf\u7684\u68af\u5ea6\u5c31\u5c06\u81ea\u52a8\u91ca\u653e \uff0c\u4ece\u800c\u8282\u7ea6\u5185\u5b58\u3002 # 1.\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u4e2d\u53ea\u4fdd\u5b58\u53f6\u5b50\u8282\u70b9\uff0c\u4e0b\u9762\u8ba1\u7b97\u4e2d\uff0c\u4e5f\u5c31\u662f\u4e2d\u95f4\u53d8\u91cf\u5728\u8ba1\u7b97\u5b8c\u6210\u68af\u5ea6\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e0b\u9762\u4ee3\u7801\u6211\u4eec\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53ea\u5f97\u5230\u4e86z\u5bf9x\u7684\u68af\u5ea6\u3002 In [ 2 ]: import torch In [ 3 ]: x = torch . tensor ([ 1 , 2 ], dtype = torch . float32 , requires_grad = True ) # \u53ea\u8981\u6709\u4e00\u4e2atersor\u8bbe\u4e3aTrue,\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u8ba1\u7b97\u4e2d\u6240\u6709\u76f8\u5173\u7684tensor\u90fd\u4f1a\u652f\u6301\u81ea\u52a8\u6c42\u5bfc\u6c42\u68af\u5ea6\u3002 In [ 4 ]: y = x * 2 # \u4e2d\u95f4\u53d8\u91cfy In [ 5 ]: z = torch . mean ( y ) In [ 7 ]: z . backward () In [ 8 ]: x . grad # tensor([ 1., 1.]) In [ 9 ]: y . grad # None \u5e94\u8be5\u4e3a(0.5,0.5) In [ 10 ]: z . grad # None \u5e94\u8be5\u4e3a1 # 2.\u5982\u679c\u60f3\u83b7\u5f97z\u5bf9y\u7684\u68af\u5ea6\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662fhook\uff0c\u94a9\u5b50\u51fd\u6570:register_hook\u7684\u4f5c\u7528\u662f\uff0c\u5f53\u53cd\u4f20\u65f6\uff0c\u9664\u4e86\u5b8c\u6210\u539f\u6709\u7684\u53cd\u4f20\uff0c\u989d\u5916\u591a\u5b8c\u6210\u4e00\u4e9b\u4efb\u52a1\u3002\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u53d8\u91cf\u7684hook\uff0c\u5c06\u5b83\u7684grad\u503c\u6253\u5370\u51fa\u6765\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u5217\u8868\uff0c\u5c06\u6bcf\u6b21\u7684grad\u503c\u6dfb\u52a0\u5230\u91cc\u9762\u53bb\u3002 # 2.1 register_hook(hook_fun):\u8fd9\u4e2a\u51fd\u6570\u5c5e\u4e8etorch.tensor\u7c7b,\u68af\u5ea6\u8ba1\u7b97\u65f6\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570 # hook_fun\u51fd\u6570\u683c\u5f0f\u662f\uff1adef hook_fun(grad): return Tensor/None,\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e2ahook\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u4e0d\u80fd\u6539\u53d8\u5176\u53c2\u6570\u3002 import torch grad_list = [] def print_grad ( grad ): print ( \"y_grad:\" , grad ) grad_list . append ( grad ) return grad_list In [ 3 ]: x = torch . tensor ([ 1 , 2 ], dtype = torch . float32 , requires_grad = True ) In [ 4 ]: y = x * 2 In [ 5 ]: y . requires_grad # True In [ 6 ]: y . register_hook ( print_grad ) In [ 7 ]: z = torch . mean ( y ) In [ 8 ]: z . backward () # \u6253\u5370\u51fa y_grad:tensor([ 0.5000, 0.5000]),\u8bc1\u660ey\u7684hook\u51fd\u6570\u6267\u884c\u4e86 Hook for Modules register_forward_hook \u548c register_backward_hook \uff0c\u5206\u522b\u7528\u6765\u83b7\u53d6\u6b63/\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u4e2d\u95f4\u5c42\u6a21\u5757\u8f93\u5165\u548c\u8f93\u51fa\u7684 feature/gradient \uff0c\u5927\u5927\u964d\u4f4e\u4e86\u83b7\u53d6\u6a21\u578b\u5185\u90e8\u4fe1\u606f\u6d41\u7684\u96be\u5ea6\u3002 register_forward_hook register_forward_hook \u7684\u4f5c\u7528\u662f**\u83b7\u53d6\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5404\u4e2a\u7f51\u7edc\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa**\uff0c\u5bf9\u4e8e\u6a21\u5757 module \uff0c\u5176\u4f7f\u7528\u65b9\u5f0f\u4e3a\uff1a module.register_forward_hook(hook_fn) \u2192 hook_fn(module, input, output)\uff1a1.2\u7248\u672c\u5f00\u59cb\u6709\u8fd4\u56de\u503c\u4e86\uff0c\u53ef\u4ee5\u4fee\u6539\u7f51\u7edc\u6a21\u5757\u7684\u8f93\u51fa # xxx->model # \u5168\u5c40\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u4e2d\u95f4\u5c42\u7684 feature total_feat_out = [] total_feat_in = [] def hook_fn_forward ( m , input , output ): print ( \"model module:\" , m ) total_feat_out . append ( output ) total_feat_in . append ( input ) for name , module in model . named_children (): module . register_forward_hook ( hook_fn_forward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa x = torch . Tensor ([[ 1.0 , 1.0 , 1.0 ]]) . requires_grad_ () o = model ( x ) o . backward () # \u8fd9\u6837\u8fd0\u884c\u8fc7\u540e\u5c31\u80fd\u6253\u5370\u5176\u8f93\u5165\u548c\u8f93\u51fa\u4e86\uff0c\u5176\u5b9e\u7ecf\u8fc7\u524d\u5411\u4f20\u64ad\u540e\u5c31\u4f1a\u8f93\u51fa\u7ed3\u679c\u4e86 register backward hook register_backward_hook \u7684\u4f5c\u7528\u662f\u83b7\u53d6\u795e\u7ecf\u7f51\u7edc\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5404\u4e2a\u6a21\u5757**\u8f93\u5165\u7aef\u548c\u8f93\u51fa\u7aef\u7684\u68af\u5ea6\u503c**\u3002\u5bf9\u4e8e\u6a21\u5757 module\uff0c\u5176\u4f7f\u7528\u65b9\u5f0f\u4e3a\uff1a module.register_backward_hook(hook_fn)-->hook_fn(module, grad_input, grad_output) -> Tensor or None hook_fn \uff1a\u8f93\u5165\u53d8\u91cf\u5206\u522b\u4e3a\uff1a\u6a21\u5757\uff0c\u6a21\u5757\u8f93\u5165\u7aef\u7684\u68af\u5ea6\uff0c\u6a21\u5757\u8f93\u51fa\u7aef\u7684\u68af\u5ea6\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684**\u8f93\u5165\u7aef**\u548c**\u8f93\u51fa\u7aef**\uff0c\u662f\u7ad9\u5728\u524d\u5411\u4f20\u64ad\u7684\u89d2\u5ea6\u7684\uff0c\u800c\u4e0d\u662f\u53cd\u5411\u4f20\u64ad\u7684\u89d2\u5ea6\u3002\u4f8b\u5982\u7ebf\u6027\u6a21\u5757\uff1a o=W*x+b \uff0c\u5176\u8f93\u5165\u7aef\u4e3a W\uff0cx \u548c b\uff0c\u8f93\u51fa\u7aef\u4e3a o\u3002 \u5982\u679c\u6a21\u5757\u6709\u591a\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u51fa\u7684\u8bdd\uff0c grad_input \u548c grad_output \u53ef\u4ee5\u662f tuple \u7c7b\u578b\u3002\u5bf9\u4e8e\u7ebf\u6027\u6a21\u5757\uff1a o=W*x+b \uff0c\u5b83\u7684\u8f93\u5165\u7aef\u5305\u62ec\u4e86W\u3001x \u548c b \u4e09\u90e8\u5206\uff0c\u56e0\u6b64 grad_input \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684 tuple\uff0c\u4f8b\u5982: \u5728\u5377\u79ef\u5c42\u4e2d\uff0c bias \u7684\u68af\u5ea6\u4f4d\u4e8e tuple \u7684\u672b\u5c3e\uff1a grad_input = (\u5bf9 feature \u7684\u5bfc\u6570\uff0c\u5bf9\u6743\u91cd W \u7684\u5bfc\u6570\uff0c\u5bf9 bias \u7684\u5bfc\u6570) \u5728\u5168\u8fde\u63a5\u5c42\u4e2d\uff0c bias \u7684\u68af\u5ea6\u4f4d\u4e8e tuple \u7684\u5f00\u5934\uff1a grad_input =(\u5bf9 bias \u7684\u5bfc\u6570\uff0c\u5bf9 feature \u7684\u5bfc\u6570\uff0c\u5bf9 W \u7684\u5bfc\u6570) \u5728 forward hook \u4e2d\uff0c input \u662f x \uff0c\u800c\u4e0d\u5305\u62ec W \u548c b \u3002\u8fd4\u56de Tensor \u6216\u8005 None \uff0c backward hook \u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u6539\u53d8\u5b83\u7684\u8f93\u5165\u53d8\u91cf\uff0c\u4f46\u662f\u53ef\u4ee5\u8fd4\u56de\u65b0\u7684 grad_input \uff0c\u53cd\u5411\u4f20\u64ad\u5230\u5b83\u4e0a\u4e00\u4e2a\u6a21\u5757\u3002 # xxx->model # \u5168\u5c40\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u4e2d\u95f4\u5c42\u7684 feature total_grad_out = [] total_grad_in = [] def hook_fn_backward ( m , grad_input , grad_output ): print ( \"model module:\" , m ) total_grad_in . append ( grad_input ) total_grad_out . append ( grad_output ) for name , module in model . named_children (): module . register_backward_hook ( hook_fn_backward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u68af\u5ea6\u8f93\u5165\u548c\u8f93\u51fa # \u8fd9\u91cc\u7684 requires_grad \u5f88\u91cd\u8981\uff0c\u5982\u679c\u4e0d\u52a0\uff0cbackward hook \u6267\u884c\u5230\u7b2c\u4e00\u5c42\uff0c\u5bf9 x \u7684\u5bfc\u6570\u5c06\u4e3a None # \u6b64\u5916\u518d\u5f3a\u8c03\u4e00\u904d x \u7684\u7ef4\u5ea6\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5199\u6210 torch.Tensor([1.0, 1.0, 1.0]).requires_grad_() # \u5426\u5219 backward hook \u4f1a\u51fa\u95ee\u9898\u3002 x = torch . Tensor ([[ 1.0 , 1.0 , 1.0 ]]) . requires_grad_ () x = torch . randn ( input_shape ) o = model ( x ) o . backward () # \u8fd9\u6837\u8fd0\u884c\u8fc7\u540e\u5c31\u80fd\u6253\u5370\u5176\u8f93\u5165\u548c\u8f93\u51fa\u4e86\uff0c\u5176\u5b9e\u7ecf\u8fc7\u524d\u5411\u4f20\u64ad\u540e\u5c31\u4f1a\u8f93\u51fa\u7ed3\u679c\u4e86 register_backward_hook \u53ea\u80fd\u64cd\u4f5c\u7b80\u5355\u6a21\u5757\uff0c\u800c\u4e0d\u80fd\u64cd\u4f5c\u5305\u542b\u591a\u4e2a\u5b50\u6a21\u5757\u7684\u590d\u6742\u6a21\u5757\u3002 \u5982\u679c\u5bf9\u590d\u6742\u6a21\u5757\u7528\u4e86 backward hook\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5f97\u5230\u8be5\u6a21\u5757\u6700\u540e\u4e00\u6b21\u7b80\u5355\u64cd\u4f5c\u7684\u68af\u5ea6\u4fe1\u606f\u3002\u5bf9\u4e8e\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\uff0c\u4e0d\u518d\u904d\u5386\u5404\u4e2a\u5b50\u6a21\u5757\uff0c\u800c\u662f\u628a model \u6574\u4f53\u7ed1\u5728\u4e00\u4e2a hook_fn_backward \u4e0a\uff1a model = Model () model . register_backward_hook ( hook_fn_backward ) # out\uff1a\u53d1\u73b0\u7a0b\u5e8f\u53ea\u8f93\u51fa\u4e86fc2\u7684\u68af\u5ea6 Model ( ( fc1 ): Linear ( in_features = 3 , out_features = 4 , bias = True ) ( relu1 ): ReLU () ( fc2 ): Linear ( in_features = 4 , out_features = 1 , bias = True ) ) grad_output ( tensor ([[ 1. ]]),) grad_input ( tensor ([ 1. ]), tensor ([[ 1. , 2. , 3. , 4. ]]), tensor ([[ 7. ], [ 0. ], [ 27. ], [ 0. ]])) Pytorch\u81ea\u5b9a\u4e49\u65b0\u5c42(Function) \u00b6 **\u65b9\u5f0f\u4e00\uff1a**\u901a\u8fc7\u7ee7\u627f torch.nn.Module \u7c7b\u6765\u5b9e\u73b0\u62d3\u5c55\u3002\u53ea\u9700\u91cd\u65b0\u5b9e\u73b0 __init__ \u548c forward \u51fd\u6570\u3002 Module\uff1a\u53ea\u9700\u5b9a\u4e49 __init__ \u548c forward \uff0c\u800c backward \u7684\u8ba1\u7b97\u7531\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u6784\u6210 \u65b9\u5f0f\u4e8c \uff1a\u901a\u8fc7\u7ee7\u627f torch.autograd.Function \uff0c\u9664\u4e86\u8981\u5b9e\u73b0 __init__ \u548c forward \u51fd\u6570\uff0c\u8fd8\u8981\u5b9e\u73b0 backward \u51fd\u6570;\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u6c42\u5bfc\u89c4\u5219(\u4f8b\u5982\u4e8c\u503c\u5316\u7f51\u7edc\u6709\u4e9b\u4e0d\u53ef\u5bfc\u51fd\u6570)\uff0c\u5c31\u8981\u7528\u7740\u4e2a\u65b9\u6cd5. Function \u9700\u8981\u5b9a\u4e49\u4e09\u4e2a\u65b9\u6cd5\uff1a __init__ , forward , backward \uff08\u9700\u8981\u81ea\u5df1\u5199\u6c42\u5bfc\u516c\u5f0f\uff09\uff1b # 1.\u5b9a\u4e49\u4e00\u4e2aReLU\u7c7b\u522b import torch from torch.autograd import Variable class MyReLU ( torch . autograd . Function ): # \u5728forward\u4e2d\uff0c\u9700\u8981\u5b9a\u4e49MyReLU\u8fd9\u4e2a\u8fd0\u7b97\u7684forward\u8ba1\u7b97\u8fc7\u7a0b @staticmethod def forward ( self , input_ ): self . save_for_backward ( input_ ) # \u5c06\u8f93\u5165\u4fdd\u5b58\u8d77\u6765\uff0c\u5728backward\u65f6\u4f7f\u7528 output = input_ . clamp ( min = 0 ) # relu\u5c31\u662f\u622a\u65ad\u8d1f\u6570\uff0c\u8ba9\u6240\u6709\u8d1f\u6570\u7b49\u4e8e0 return output @staticmethod def backward ( self , grad_output ): # \u6839\u636eBP\u7b97\u6cd5\u7684\u63a8\u5bfc\uff08\u94fe\u5f0f\u6cd5\u5219\uff09\uff0cdloss / dx = (dloss / doutput) * (doutput / dx) # grad_output\uff1adloss / doutput\u3001 # \u56e0\u6b64\u53ea\u9700\u6c42relu\u7684\u5bfc\u6570\uff0c\u518d\u4e58\u4ee5grad_outpu input_ , = self . saved_tensors grad_input = grad_output . clone () grad_input [ input_ < 0 ] = 0 # \u4e0a\u8bc9\u8ba1\u7b97\u7684\u7ed3\u679c\u5c31\u662f\u5de6\u5f0f\u3002\u5373ReLU\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a\u901a\u9053\u9009\u62e9\u51fd\u6570\uff0c\u6240\u6709\u672a\u8fbe\u5230\u9608\u503c\uff08\u6fc0\u6d3b\u503c<0\uff09\u7684\u5355\u5143\u7684\u68af\u5ea6\u90fd\u4e3a0,\u6fc0\u6d3b\u503c>0\u7684\u4e58\u4ee5relu\u7684\u68af\u5ea61 return grad_input # 2.\u9a8c\u8bc1Variable\u4e0eFunction\u7684\u5173\u7cfb from torch.autograd import Variable input_ = Variable ( torch . randn ( 1 )) relu = MyReLU () output_ = relu ( input_ ) # output_.creator==relu,\u8fd9\u4e2arelu\u5bf9\u8c61\u5c06output\u4e0einput\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u8ba1\u7b97\u56fe # \u5c01\u88c5\u6210\u4e00\u4e2arelu\u51fd\u6570 def relu ( input_ ): # MyReLU()\u662f\u521b\u5efa\u4e00\u4e2aMyReLU\u5bf9\u8c61\uff0c # Function\u7c7b\u5229\u7528\u4e86Python __call__\u64cd\u4f5c\uff0c\u4f7f\u5f97\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u8c61\u8c03\u7528__call__\u5236\u5b9a\u7684\u65b9\u6cd5 # __call__\u6307\u5b9a\u7684\u65b9\u6cd5\u662fforward\uff0c\u56e0\u6b64\u4e0b\u9762\u8fd9\u53e5MyReLU\uff08\uff09\uff08input_\uff09\u76f8\u5f53\u4e8e # return MyReLU().forward(input_) return MyReLU ()( input_ ) Pytorch\u67e5\u770b\u6a21\u578b\u7ed3\u6784 \u00b6 \u5377\u79ef\u53ef\u89c6\u5316-GradCAM-keras/pytorch | caffe\u7248\u672c :caffe\u9ed8\u8ba4\u6ca1\u6709\u635f\u5931\u5c31\u4e0d\u7b97\u68af\u5ea6 \u89e3\u51b3 # github:https://github.com/sksq96/pytorch-summary from torchsummary import summary # input_size \u662f\u6839\u636e\u4f60\u81ea\u5df1\u7684\u7f51\u7edc\u6a21\u578b\u7684\u8f93\u5165\u5c3a\u5bf8\u8fdb\u884c\u8bbe\u7f6e\u3002 summary ( your_model , input_size = ( channels , H , W )) Pytorch\u7684loss\u3001optimizer\u3001\u68af\u5ea6\u88c1\u526a\u3001lr_scheduler \u00b6 # 1.pytorch\u7684loss\u51fd\u6570 \u66f4\u591a\u89c1\u4e0b\u9762 nn . MSELoss () # \u7ebf\u6027\u56de\u5f52\u7684loss,\u5747\u65b9\u8bef\u5dee nn . BCEWithLogitsLoss () # Logistic\u56de\u5f52\u7684\u4e8c\u5206\u7c7bloss nn . CrossEntropyLoss () # \u7528\u6765\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931 # \u7528\u6cd5 \u5728\u8bad\u7ec3\u4e0a\u8981\u4e24\u6b65 criterion = nn . MSELoss () # \u5b9a\u4e49loss\u5bf9\u8c61 loss = criterion ( y_hat , y_true ) # \u7b2c\u4e00\u6b65\uff0c\u8ba1\u7b97loss loss . backward () # \u7b2c\u4e8c\u6b65 # pytorch\u7684\u4f18\u5316\u5668 torch.optim.+Tab\u952e torch . optim . SGD ([ w , b ], lr = 0.1 ) optimizer . zero_grad () # \u5f52 0 \u68af\u5ea6\uff0c\u5728\u81ea\u52a8\u6c42\u5bfc\u524d optimizer . step () # \u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u66f4\u65b0\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86 # 2.\u5e38\u7528\u4f18\u5316\u5668 \u66f4\u591a\u89c1\u4e0b\u9762 torch . optim . SGD ( params , lr = 0.1 ) # \u968f\u673a\u68af\u5ea6\u4e0b\u964d torch . optim . SGD ( params , lr = 0.1 , momentum = 0.9 ) # \u52a8\u91cf\u6cd5 torch . optim . Adagrad ( params , lr = 0.1 ) torch . optim . RMSprop ( params , lr = 0.1 , alpha = 0.9 ) torch . optim . Adadelta ( params , rho = 0.9 ) torch . optim . Adam ( params , lr = 0.1 ) # \u7528\u6cd5\u4e3e\u4f8b(\u5728\u8bad\u7ec3\u65f6\u8981\u4e24\u6b65) import torch.optim as optim optimizer = optim . SGD ( net . parameters (), lr = 0.1 ) # \u65b0\u5efa\u4e00\u4e2a\u4f18\u5316\u5668\uff0c\u6307\u5b9a\u8981\u8c03\u6574\u7684\u53c2\u6570\u548c\u5b66\u4e60\u7387 # \u8bad\u7ec3\u8fc7\u7a0b\u4e2d \u68af\u5ea6\u6e05\u96f6(\u4e0enet.zero_grad()\u6548\u679c\u4e00\u6837) optimizer . zero_grad () # \u7b2c\u4e00\u6b65 output = net ( input ) loss = criterion ( output , target ) # \u8ba1\u7b97\u635f\u5931 loss . backward () # \u53cd\u5411\u4f20\u64ad optimizer . step () # \u7b2c\u4e8c\u6b65 \u66f4\u65b0\u53c2\u6570 # \u4f18\u5316\u5668\u666e\u901a\u7528\u6cd5:\u4e00\u4e2a\u53c2\u6570\u7ec4 optimizer = torch . optim . SGD ( net . parameters (), lr = 0.01 , weight_decay = 1e-4 ) # \u4f18\u5316\u5668\u9ad8\u7ea7\u7528\u6cd5:\u4e0d\u540c\u5b50\u7f51\u7edc\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u5982\u679c\u5bf9\u67d0\u4e2a\u53c2\u6570\u4e0d\u6307\u5b9a\u5b66\u4e60\u7387\uff0c\u5c31\u4f7f\u7528\u6700\u5916\u5c42\u7684\u9ed8\u8ba4\u5b66\u4e60\u7387 optimizer = optim . SGD ([ # list\u91cc\u9762\u5957dict { 'params' : net . features . parameters ()}, # \u5b66\u4e60\u7387\u4e3a1e-5 { 'params' : net . classifier . parameters (), 'lr' : 1e-2 } ], lr = 1e-5 ) # \u4f18\u5316\u5668\u7684\u4e24\u4e2a\u53c2\u6570 optimizer . defaults # \u5b57\u5178\uff0c\u5b58\u653e\u8fd9\u4e2a\u4f18\u5316\u5668\u7684\u4e00\u4e9b\u521d\u59cb\u53c2\u6570\uff0c\u6709\uff1a'lr', 'betas', 'eps', 'weight_decay', 'amsgrad'\u3002 optimizer . param_groups # \u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u6bcf\u4e2a\u5143\u7d20\u5305\u542b\u7684\u5173\u952e\u5b57\u6709\uff1a'params', 'lr', 'betas', 'eps', 'weight_decay', 'amsgrad'\uff0cparams\u7c7b\u662f\u5404\u4e2a\u7f51\u7edc\u7684\u53c2\u6570\u653e\u5728\u4e86\u4e00\u8d77\u3002 optimizer . param_groups [ 0 ][ 'lr' ] # \u83b7\u53d6\u5b66\u4e60\u7387 optimizer . param_groups [ 0 ][ 'lr' ] = le - 5 # \u4fee\u6539\u5b66\u4e60\u7387 # \u4e3a\u4e86\u9632\u6b62\u6709\u591a\u4e2a\u53c2\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af for param_group in optimizer . param_groups : param_group [ 'lr' ] = 1e-1 # \u7b28\u65b9\u6cd5\u8bbe\u7f6e\u5b66\u4e60\u7387\u8870\u51cf # \u8bbe\u7f6e\u5b66\u4e60\u8870\u51cf\u7387 def set_learning_rate ( optimizer , lr ): for param_group in optimizer . param_groups : param_group [ 'lr' ] = lr # \u4e4b\u540e\u5728epoch\u7684for\u5faa\u73af\u91cc\u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u6cd5 # \u5047\u8bbe\u8d77\u521d lr = 0.1 for epoch in range ( 30 ): if epoch == 20 : set_learning_rate ( optimizer , 0.01 ) # 3.\u68af\u5ea6\u88c1\u526a outputs = model ( data ) loss = loss_fn ( outputs , target ) optimizer . zero_grad () loss . backward () nn . utils . clip_grad_norm_ ( model . parameters (), max_norm = 20 , norm_type = 2 ) optimizer . step () torch . nn . utils . clip_grad_norm_ ( parameters , # \u4e00\u4e2a\u57fa\u4e8e\u53d8\u91cf\u7684\u8fed\u4ee3\u5668\uff0c\u4f1a\u8fdb\u884c\u68af\u5ea6\u5f52\u4e00\u5316 max_norm , # \u68af\u5ea6\u7684\u6700\u5927\u8303\u6570 norm_type = 2 # \u89c4\u5b9a\u8303\u6570\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aL2 ) # 4.\u5b66\u4e60\u7387\u8870\u51cf,\u4ee5LambdaLR\u4e3e\u4f8b\u5b50:\u66f4\u65b0\u7b56\u7565\uff0cnew_lr = lr_lambda*init_lr scheduler = torch . optim . lr_scheduler . LambdaLR ( optimizer , # \u5728\u5c06optimizer\u4f20\u7ed9scheduler\u540e\uff0c\u5728shcduler\u7c7b\u7684__init__\u65b9\u6cd5\u4e2d\u4f1a\u7ed9optimizer.param_groups\u5217\u8868\u4e2d\u7684\u90a3\u4e2a\u5143\u7d20\uff08\u5b57\u5178\uff09\u589e\u52a0\u4e00\u4e2akey = \"initial_lr\"\u7684\u5143\u7d20\u8868\u793a\u521d\u59cb\u5b66\u4e60\u7387\uff0c\u7b49\u4e8eoptimizer.defaults['lr']\u3002 lr_lambda , # \u6839\u636eepoch\u8ba1\u7b97\u03bb\u7684\u51fd\u6570\uff1b\u6216\u8005\u662f\u4e00\u4e2alist\u7684\u8fd9\u6837\u7684function\uff0c\u5206\u522b\u8ba1\u7b97\u5404\u4e2aparameter groups\u7684\u5b66\u4e60\u7387\u66f4\u65b0\u7528\u5230\u7684\u03bb\uff1b last_epoch =- 1 # \u6700\u540e\u4e00\u4e2aepoch\u7684index\uff0c\u5982\u679c\u662f\u8bad\u7ec3\u4e86\u5f88\u591a\u4e2aepoch\u540e\u4e2d\u65ad\u4e86\uff0c\u7ee7\u7eed\u8bad\u7ec3\uff0c\u8fd9\u4e2a\u503c\u5c31\u7b49\u4e8e\u52a0\u8f7d\u7684\u6a21\u578b\u7684epoch\u3002\u9ed8\u8ba4\u4e3a-1\u8868\u793a\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\uff0c\u5373\u4eceepoch=1\u5f00\u59cb\u3002 ) # \u4e3e\u4f8b\u5b50 initial_lr = 0.1 net_1 = model () optimizer_1 = torch . optim . Adam ( net_1 . parameters (), lr = initial_lr ) scheduler_1 = LambdaLR ( optimizer_1 , lr_lambda = lambda epoch : 1 / ( epoch + 1 )) print ( \"\u521d\u59cb\u5316\u7684\u5b66\u4e60\u7387\uff1a\" , optimizer_1 . defaults [ 'lr' ]) for epoch in range ( 1 , 11 ): # train optimizer_1 . zero_grad () optimizer_1 . step () print ( \"\u7b2c %d \u4e2aepoch\u7684\u5b66\u4e60\u7387\uff1a %f \" % ( epoch , optimizer_1 . param_groups [ 0 ][ 'lr' ])) scheduler_1 . step () # \u5b66\u4e60\u7387\u7684\u8c03\u6574\u5e94\u8be5\u653e\u5728optimizer\u66f4\u65b0\u4e4b\u540e,1.1.0\u4e4b\u524d\u7684\u7248\u672c\u662f\u653e\u5728\u4e4b\u524d\u7684 # \u5176\u4ed6\u5b66\u4e60\u7387\u8870\u51cf\u51fd\u6570\u8be6\u89e3:https://blog.csdn.net/qyhaill/article/details/103043637 # \u6bcf\u8fc7step_size\u4e2aepoch\uff0c\u505a\u4e00\u6b21\u66f4\u65b0 class torch . optim . lr_scheduler . StepLR ( optimizer , step_size , gamma = 0.1 , last_epoch =- 1 ) # \u6bcf\u6b21\u9047\u5230milestones\u4e2d\u7684epoch\uff0c\u505a\u4e00\u6b21\u66f4\u65b0 class torch . optim . lr_scheduler . MultiStepLR ( optimizer , milestones , gamma = 0.1 , last_epoch =- 1 ) # \u6bcf\u4e2aepoch\u90fd\u505a\u4e00\u6b21\u66f4\u65b0\uff1a class torch . optim . lr_scheduler . ExponentialLR ( optimizer , gamma , last_epoch =- 1 ) # \u8ba9lr\u968f\u7740epoch\u7684\u53d8\u5316\u56fe\u7c7b\u4f3c\u4e8ecos class torch . optim . lr_scheduler . CosineAnnealingLR ( optimizer , T_max , eta_min = 0 , last_epoch =- 1 ) # \u7ed9\u5b9a\u4e00\u4e2ametric\uff0c\u5f53metric\u505c\u6b62\u4f18\u5316\u65f6\u51cf\u5c0f\u5b66\u4e60\u7387\u3002 class torch . optim . lr_scheduler . ReduceLROnPlateau ( optimizer , mode = 'min' , factor = 0.1 , patience = 10 , verbose = False , threshold = 0.0001 , threshold_mode = 'rel' , cooldown = 0 , min_lr = 0 , eps = 1e-08 ) ... # \u8fd8\u6709\u4e00\u4e9b\uff0c\u4e0d\u4ecb\u7ecd\u4e86 Pytorch\u6a21\u578b\u5b58\u50a8 \u00b6 model = Net () optimizer = torch . optim . Adam ( model . parameters (), lr = 0.1 ) # \u65b9\u5f0f\u4e00(\u4e0d\u63a8\u8350) torch . save ( model , \"model.pth\" ) model = torch . load ( \"model.pth\" ) # cpu->cpu,gpu->gpu\uff0c\u6ce8\u610f\u8fd9\u65f6tensor\u5c5e\u4e8e\u540c\u5757cpu/gpu model = torch . load ( \"model.pth\" , map_location = lambda storage , loc : storage ) # gpu->cpu\u52a0\u8f7d # \u6216\u8005 torch.load('model.pth', map_location='cpu') # pytorch0.4.0\u53ca\u4ee5\u4e0a\u7248\u672c model = torch . load ( 'model.pth' , map_location = lambda storage , loc : storage . cuda ( 1 )) #cpu->gpu model = torch . load ( 'model.pth' , map_location = { 'cuda:1' : 'cuda:0' }) #gpu1->gpu0 # \u65b9\u5f0f\u4e8c(\u63a8\u8350) torch . save ( model . state_dict (), \"model.pth\" ) model . load_state_dict ( torch . load ( 'model.pth' )) # \u65b9\u5f0f\u4e09(\u63a8\u8350)\u5305\u542b\u7684\u4fe1\u606f\u6709\uff0cepochID, state_dict, min loss,optimizer, \u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570 torch . save ({ 'epoch' : epochID + 1 , 'state_dict' : model . state_dict (), 'best_loss' : lossMIN , 'optimizer' : optimizer . state_dict (), 'alpha' : loss . alpha , 'gamma' : loss . gamma }, checkpoint_path + '/m-' + launchTimestamp + '-' + str ( \" %.4f \" % lossMIN ) + '.pth.tar' ) # \u52a0\u8f7d def load_checkpoint ( model , checkpoint_PATH , optimizer ): if checkpoint != None : model_CKPT = torch . load ( checkpoint_PATH ) model . load_state_dict ( model_CKPT [ 'state_dict' ]) print ( 'loading checkpoint!' ) optimizer . load_state_dict ( model_CKPT [ 'optimizer' ]) return model , optimizer Pytorch\u8fc1\u79fb\u5b66\u4e60 \u00b6 model.train()\u6307\u5b9a\u5f53\u524d\u6a21\u578bmodel\u4e3a\u8bad\u7ec3\u72b6\u6001,model.eval()\u6307\u5b9a\u5f53\u524d\u6a21\u578b\u4e3a\u6d4b\u8bd5\u72b6\u6001\u3002 train.py import os # os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\" from torchvision import transforms from torchvision import datasets from torch.utils.data import DataLoader from torchvision import models from torch.optim import lr_scheduler from torch.utils.tensorboard import SummaryWriter from torch import optim import time import torch import copy import torch.nn as nn from tqdm import tqdm # cfg # traindir = \"data/train\" # validdir = \"data/valid\" traindir = \"/home/cyy/4T/project/roi_delivery/libs/pig_up_down/data/train\" validdir = \"/home/cyy/4T/project/roi_delivery/libs/pig_up_down/data/valid\" # save weights save_weight = \"weights\" os . makedirs ( save_weight , exist_ok = True ) # save log save_log = \"logs\" os . makedirs ( save_log , exist_ok = True ) tb_writer = SummaryWriter ( log_dir = save_log ) # class num class_num = 3 batch_size = 32 device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) # Image transformations normal_val = [ 0.5 , 0.5 , 0.5 ] image_transforms = { # Train uses data augmentation 'train' : transforms . Compose ([ transforms . Resize ( size = 256 ), transforms . RandomApply ([ transforms . RandomRotation ( degrees = 30 ), transforms . ColorJitter ( brightness = 0.1 ), transforms . RandomHorizontalFlip ()], p = 0.5 ), transforms . ToTensor (), transforms . Normalize ( normal_val , normal_val ) # Imagenet standards ]), # Validation does not use augmentation 'valid' : transforms . Compose ([ transforms . Resize ( size = 256 ), transforms . ToTensor (), transforms . Normalize ( normal_val , normal_val ) ]), } # Datasets from folders data = { 'train' : datasets . ImageFolder ( root = traindir , transform = image_transforms [ 'train' ]), 'valid' : datasets . ImageFolder ( root = validdir , transform = image_transforms [ 'valid' ]), } # Dataloader iterators, make sure to shuffle dataloaders = { 'train' : DataLoader ( data [ 'train' ], batch_size = batch_size , shuffle = True ), 'valid' : DataLoader ( data [ 'valid' ], batch_size = batch_size , shuffle = True ) } dataset_sizes = { x : len ( data [ x ]) for x in [ 'train' , 'valid' ]} class_names = data [ 'train' ] . classes print ( dataset_sizes , class_names ) model_ft = models . resnet18 ( pretrained = True ) # \u5c06\u6240\u6709\u7684\u53c2\u6570\u5c42\u8fdb\u884c\u51bb\u7ed3 # for param in model_ft.parameters(): # param.requires_grad = False num_ftrs = model_ft . fc . in_features model_ft . fc = nn . Linear ( num_ftrs , class_num ) model_ft . to ( device ) criterion = nn . CrossEntropyLoss () # Observe that all parameters are being optimized optimizer_ft = optim . SGD ( model_ft . parameters (), lr = 0.001 , momentum = 0.9 ) # Decay LR by a factor of 0.1 every 7 epochs exp_lr_scheduler = lr_scheduler . StepLR ( optimizer_ft , step_size = 7 , gamma = 0.1 ) # train def train_model ( model , criterion , optimizer , scheduler , num_epochs = 10 ): since = time . time () best_model_wts = copy . deepcopy ( model . state_dict ()) best_acc = 0.0 for epoch in range ( num_epochs ): print ( 'Epoch {} / {} ' . format ( epoch , num_epochs - 1 )) print ( '-' * 10 ) # Each epoch has a training and validation phase for phase in [ 'train' , 'valid' ]: if phase == 'train' : model . train () # Set model to training mode else : model . eval () # Set model to evaluate mode running_loss = 0.0 running_corrects = 0 # Iterate over data. for inputs , labels in tqdm ( dataloaders [ phase ], desc = phase ): # print(inputs.shape) # wrap them in Variable inputs = inputs . to ( device ) labels = labels . to ( device ) # zero the parameter gradients optimizer . zero_grad () # forward outputs = model ( inputs ) # print(outputs.data) # print(\"*\"*30) _ , preds = torch . max ( outputs . data , 1 ) loss = criterion ( outputs , labels ) # backward + optimize only if in training phase if phase == 'train' : loss . backward () optimizer . step () scheduler . step () # statistics running_loss += loss . data . item () * inputs . size ( 0 ) running_corrects += torch . sum ( preds == labels . data ) # print(f'Loss:{loss.data.item()*inputs.size(0)}') epoch_loss = running_loss / dataset_sizes [ phase ] epoch_acc = running_corrects . item () / dataset_sizes [ phase ] print ( ' {} Loss: {:.4f} Acc: {:.4f} ' . format ( phase , epoch_loss , epoch_acc )) # deep copy the model if phase == 'valid' and epoch_acc > best_acc : best_acc = epoch_acc best_model_wts = copy . deepcopy ( model . state_dict ()) if phase == \"train\" : tb_writer . add_scalar ( 'train/loss' , epoch_loss , epoch + 1 ) tb_writer . add_scalar ( 'train/acc' , epoch_acc , epoch + 1 ) elif phase == \"valid\" : tb_writer . add_scalar ( 'valid/loss' , epoch_loss , epoch + 1 ) tb_writer . add_scalar ( 'valid/acc' , epoch_acc , epoch + 1 ) print () if epoch % 2 == 0 : torch . save ( model . state_dict (), f \" { save_weight } /model_ { epoch } .pth\" ) time_elapsed = time . time () - since print ( 'Training complete in {:.0f} m {:.0f} s' . format ( time_elapsed // 60 , time_elapsed % 60 )) print ( 'Best val Acc: {:4f} ' . format ( best_acc )) # load best model weights model . load_state_dict ( best_model_wts ) tb_writer . close () return model model_ft = train_model ( model_ft , criterion , optimizer_ft , exp_lr_scheduler , num_epochs = 101 ) torch . save ( model_ft . state_dict (), \"best_model.pth\" ) print ( \"Done!!!\" ) test.py from torchvision import transforms from torchvision import datasets from torch.utils.data import DataLoader from torchvision import models from torch.optim import lr_scheduler from torch import optim import torch import torch.nn as nn from PIL import Image import numpy as np import glob , os , shutil import tqdm device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def load_model ( model_path , device ): model_ft = models . resnet18 () model_ft . fc = nn . Linear ( model_ft . fc . in_features , 2 ) model_ft . load_state_dict ( torch . load ( model_path )) model_ft . to ( device ) model_ft . eval () return model_ft model_ft = load_model ( \"best_model.pth\" , device ) image_transforms = transforms . Compose ([ transforms . Resize ( size = 256 ), transforms . ToTensor (), transforms . Normalize ([ 0.5 , 0.5 , 0.5 ], [ 0.5 , 0.5 , 0.5 ]) ]) img_path = \"\" frame = Image . open ( img_path ) frame = image_transforms ( frame ) . unsqueeze ( 0 ) frame = frame . to ( device ) output = model_ft ( frame ) # print(output.data) preds = torch . max ( output . data , 1 )[ - 1 ] . item () print ( preds ) \u8bad\u7ec3\u56fe\u7247\u53ef\u89c6\u5316 # \u8bad\u7ec3\u7167\u7247\u7684\u53ef\u89c6\u5316\uff0c\u770b\u770b\u7ecf\u8fc7\u6570\u636e\u589e\u5f3a\u540e\u7684\u7167\u7247\u5230\u5e95\u662f\u5565\u6837\u7684 def img_show ( img , img_nomalize , title = None , figsize = None ): img = img . numpy () . transpose (( 1 , 2 , 0 )) # c,\uff48,w -> h,w,c mean = normalize . mean std = normalize . std img = std * img + mean img = np . clip ( img , 0 , 1 ) # \u622a\u53d6 if figsize is not None : plt . figure ( figsize = figsize ) plt . imshow ( img ) if title is not None : plt . title ( title ) plt . pause ( 0.001 ) # \u7a0d\u505c\u4e00\u4e0b\uff0c\u4fdd\u8bc1\u80fd\u66f4\u65b0 # classes:tensor([1, 1, 1, 0, 1, 0, 0, 0]) inputs , classes = next ( iter ( dataloaders [ 'train' ])) # input.shape:torch.Size([8, 3, 224, 224]) # \u5c06\u82e5\u5e72\u5e45\u56fe\u50cf\u62fc\u6210\u4e00\u4e2a\u56fe\u50cf out = torchvision . utils . make_grid ( inputs ) # out.shape->torch.Size([3, 228, 1810]) img_show ( out , normalize , title = [ class_names [ x ] for x in classes ], figsize = ( 20 , 14 )) \u7f51\u683c\u5c55\u793a\u751f\u6210\u7684\u56fe\u7247 \u4e00\u4e2a\u662fmake_grid\uff0c\u5b83\u80fd\u5c06\u591a\u5f20\u56fe\u7247\u62fc\u63a5\u6210\u4e00\u4e2a\u7f51\u683c\u4e2d\uff1b \u53e6\u4e00\u4e2a\u662fsave_img\uff0c\u5b83\u80fd\u5c06Tensor\u4fdd\u5b58\u6210\u56fe\u7247\u3002 torchvision . utils . utils . make_grid ( tensor , nrow = 8 , padding = 2 , normalize = False , # normalize=True, \u5bf9\u56fe\u50cf\u50cf\u7d20\u5f52\u4e00\u5316 range = None , # range=(min, max)\uff0cmin\u548cmax\u662f\u6570\u5b57\uff0c\u5219min, max\u7528\u6765\u89c4\u8303\u5316image scale_each = False ) # scale_each=True, \u6bcf\u4e2a\u56fe\u7247\u72ec\u7acb\u89c4\u8303\u5316\u3002 from torchvision.utils import make_grid , save_image dataiter = iter ( dataloader ) img = make_grid ( next ( dataiter )[ 0 ], 4 ) # \u62fc\u62104*4\u7f51\u683c\u56fe\u7247\uff0c\u4e14\u4f1a\u8f6c\u6210\uff13\u901a\u9053 to_img ( img ) # \u663e\u793a\u56fe\u7247 save_image ( img , 'a.png' ) Image . open ( 'a.png' ) \u8ba1\u7b97acc+precision+recall # data['label'] and data['prediction'] are groundtruth label and prediction # for each image, respectively. accuracy = np . mean ( data [ 'label' ] == data [ 'prediction' ]) * 100 # Compute recision and recall for each class. for c in range ( len ( num_classes )): tp = np . dot (( data [ 'label' ] == c ) . astype ( int ), ( data [ 'prediction' ] == c ) . astype ( int )) tp_fp = np . sum ( data [ 'prediction' ] == c ) tp_fn = np . sum ( data [ 'label' ] == c ) precision = tp / tp_fp * 100 recall = tp / tp_fn * 100 \u540e\u7eed\u9ad8\u7ea7\u7528\u6cd5 \u51bb\u7ed3\u6240\u6709\u5c42 hook\u51fd\u6570\u8be6\u89e3 # \u5c06\u6240\u6709\u7684\u53c2\u6570\u5c42\u8fdb\u884c\u51bb\u7ed3,\u8fd9\u6837\u5e26\u6765\u4e00\u4e2a\u95ee\u9898:\u6bcf\u6b21\u8fd9\u4e9b\u56fa\u5b9a\u53c2\u6570\u7684\u8f93\u51fa\u662f\u4e2a\u5b9a\u91cf\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u8ba1\u7b97\uff0c\u90a3\u4e48\u5f88\u6d6a\u8d39\u65f6\u95f4 for param in model_ft . parameters (): param . requires_grad = False # \u5982\u4f55\u5230\u5904\u56fa\u5b9a\u5c42\u7684\u5411\u91cf\u5462\uff1f\u4f7f\u7528PyTorch\u6bd4\u8f83\u9ad8\u7ea7\u7684API\uff0chook\u6765\u5904\u7406\u4e86\uff0c\u6211\u4eec\u8981\u5148\u5b9a\u4e49\u4e00\u4e2ahook\u51fd\u6570 in_list = [] # \u8fd9\u91cc\u5b58\u653e\u6240\u6709\u7684\u8f93\u51fa def hook ( module , input , output ): #input\u662f\u4e00\u4e2atuple\u4ee3\u8868\u987a\u5e8f\u4ee3\u8868\u6bcf\u4e00\u4e2a\u8f93\u5165\u9879\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u6709\u4e00\u9879\uff0c\u6240\u4ee5\u76f4\u63a5\u83b7\u53d6 #\u9700\u8981\u5168\u90e8\u7684\u53c2\u6570\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6253\u5370 #for val in input: # print(\"input val:\",val) for i in range ( input [ 0 ] . size ( 0 )): in_list . append ( input [ 0 ][ i ] . cpu () . numpy ()) # \u5728\u76f8\u5e94\u7684\u5c42\u6ce8\u518chook\u51fd\u6570\uff0c\u4fdd\u8bc1\u51fd\u6570\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u8fd9\u91cc\u76f4\u63a5hook \u5168\u8fde\u63a5\u5c42\u524d\u9762\u7684pool\u5c42\uff0c\u83b7\u53d6pool\u5c42\u7684\u8f93\u5165\u6570\u636e\uff0c\u8fd9\u6837\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u7279\u5f81 model_ft . avgpool . register_forward_hook ( hook ) #\u4e0a\u6b65\u8f93\u51fa\u7ed3\u679c <torch.utils.hooks.RemovableHandle at 0x24812a5e978>\u5bf9\u8c61 # \u5f00\u59cb\u83b7\u53d6\u8f93\u51fa\uff0c\u8fd9\u91cc\u6211\u4eec\u56e0\u4e3a\u4e0d\u9700\u8981\u53cd\u5411\u4f20\u64ad\uff0c\u6240\u4ee5\u76f4\u63a5\u53ef\u4ee5\u4f7f\u7528no_grad\u5d4c\u5957 with torch . no_grad (): for batch_idx , data in enumerate ( image_dataloader [ \"train\" ]): x , y = data x = x . to ( DEVICE ) y = y . to ( DEVICE ) y_hat = model_ft ( x ) features = np . array ( in_list ) np . save ( \"features\" , features ) # \u8fd9\u6837\u518d\u8bad\u7ec3\u65f6\u6211\u4eec\u53ea\u9700\u5c06\u8fd9\u4e2a\u6570\u7ec4\u8bfb\u51fa\u6765\uff0c\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u6570\u7ec4\u518d\u8f93\u5165\u5230linear\u6216\u8005\u6211\u4eec\u524d\u9762\u8bb2\u5230\u7684sigmod\u5c42\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5728pool\u5c42\u524d\u83b7\u53d6\u4e86\u66f4\u591a\u7684\u7279\u5f81\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u7279\u5f81\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u5206\u7c7b\u5668\uff0c\u4f8b\u5982SVM\uff0c\u6811\u578b\u7684\u5206\u7c7b\u5668\u8fdb\u884c\u5206\u7c7b \u51bb\u7ed3\u90e8\u5206\u5c42 class Char3SeqModel ( nn . Module ): def __init__ ( self , char_sz , n_fac , n_h ): super ( Char3SeqModel , self ) . __init__ () self . em = nn . Embedding ( char_sz , n_fac ) self . fc1 = nn . Linear ( n_fac , n_h ) self . fc2 = nn . Linear ( n_h , n_h ) self . fc3 = nn . Linear ( n_h , char_sz ) def forward ( self , ch1 , ch2 , ch3 ): # do something out = #.... return out model = Char3SeqModel ( 10000 , 50 , 25 ) # \u65b9\u6cd5\u4e00:\u51bb\u7ed3fc1\u5c42 model . fc1 . weight . requires_grad = False # \u51bb\u7ed3 model . fc1 . weight . requires_grad = True # \u89e3\u51bb optimizer . add_param_group ({ 'params' : model . fc1 . parameters ()}) # \u628afc1\u5c42\u7684\u53c2\u6570\u52a0\u5165\uff0c\u7528\u4ee5\u53cd\u5411\u4f20\u64ad # \u65b9\u6cd5\u4e8c:\u51bb\u7ed3fc1\u5c42 optimizer = optim . Adam ([{ 'params' :[ param for name , param in model . named_parameters () if 'fc1' not in name ]}], lr = 0.1 ) optimizer . add_param_group ({ 'params' : model . fc1 . parameters ()}) # \u89e3\u51bb # \u6700\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f:https://www.zhihu.com/question/311095447/answer/589307812 from collections.abc import Iterable def set_freeze_by_names ( model , layer_names , freeze = True ): if not isinstance ( layer_names , Iterable ): layer_names = [ layer_names ] for name , child in model . named_children (): if name not in layer_names : continue for param in child . parameters (): param . requires_grad = not freeze def freeze_by_names ( model , layer_names ): set_freeze_by_names ( model , layer_names , True ) def unfreeze_by_names ( model , layer_names ): set_freeze_by_names ( model , layer_names , False ) def set_freeze_by_idxs ( model , idxs , freeze = True ): if not isinstance ( idxs , Iterable ): idxs = [ idxs ] num_child = len ( list ( model . children ())) idxs = tuple ( map ( lambda idx : num_child + idx if idx < 0 else idx , idxs )) for idx , child in enumerate ( model . children ()): if idx not in idxs : continue for param in child . parameters (): param . requires_grad = not freeze def freeze_by_idxs ( model , idxs ): set_freeze_by_idxs ( model , idxs , True ) def unfreeze_by_idxs ( model , idxs ): set_freeze_by_idxs ( model , idxs , False ) # \u51bb\u7ed3\u7b2c\u4e00\u5c42 freeze_by_idxs ( model , 0 ) # \u51bb\u7ed3\u7b2c\u4e00\u3001\u4e8c\u5c42 freeze_by_idxs ( model , [ 0 , 1 ]) #\u51bb\u7ed3\u5012\u6570\u7b2c\u4e00\u5c42 freeze_by_idxs ( model , - 1 ) # \u89e3\u51bb\u7b2c\u4e00\u5c42 unfreeze_by_idxs ( model , 0 ) # \u89e3\u51bb\u5012\u6570\u7b2c\u4e00\u5c42 unfreeze_by_idxs ( model , - 1 ) # \u51bb\u7ed3 em\u5c42 freeze_by_names ( model , 'em' ) # \u51bb\u7ed3 fc1, fc3\u5c42 freeze_by_names ( model , ( 'fc1' , 'fc3' )) # \u89e3\u51bbem, fc1, fc3\u5c42 unfreeze_by_names ( model , ( 'em' , 'fc1' , 'fc3' )) Pytorch1.6\u652f\u6301\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 \u00b6 \u57fa\u672c\u601d\u60f3\uff1a\u7cbe\u5ea6\u51cf\u534a(fp32\u2192fp16)\uff0c\u8bad\u7ec3\u65f6\u95f4\u51cf\u534a from torch.cuda.amp import autocast, GradScaler GradScaler \u5bf9\u8c61\u662f PyTorch \u5b9e\u73b0\u7684\u635f\u5931\u7f29\u653e\uff0c\u5728\u8bad\u7ec3\u671f\u95f4\uff0c\u4e3a\u4e86\u9632\u6b62\u68af\u5ea6\u53d8\u5c0f\u52300( \u56e0\u4e3afloat16\u65e0\u6cd5\u8868\u793a\u5c0f\u5e45\u503c\u7684\u53d8\u5316\uff0c\u53cd\u5411\u4f20\u64ad\u4e2d\u68af\u5ea6\u592a\u5c0f\uff0c\u53ef\u80fd\u4e3a0 )\uff0c\u67d0\u79cd\u5f62\u5f0f\u7684\u7f29\u653e\u662f\u5fc5\u8981\u7684\u3002 \u6700\u4f73\u7684\u635f\u5931\u4e58\u6570\u5f97\u8db3\u591f\u9ad8\u4ee5\u4fdd\u7559\u975e\u5e38\u5c0f\u7684\u68af\u5ea6\uff0c\u540c\u65f6\u4e0d\u80fd\u592a\u9ad8\u4ee5\u81f3\u4e8e\u5bfc\u81f4\u975e\u5e38\u5927\u7684\u68af\u5ea6\u56db\u820d\u4e94\u5165\u5230 inf \u4ea7\u751f\u76f8\u53cd\u7684\u95ee\u9898\u3002\u6bcf\u4e2a\u7f51\u7edc\u5982\u4f55\u5bfb\u627e\u6700\u4f73\u635f\u5931\u4e58\u6570\uff1f Gradscalar \u4ee5\u4e00\u4e2a\u5c0f\u7684\u635f\u5931\u4e58\u6570\u5f00\u59cb\uff0c\u8fd9\u4e2a\u4e58\u6570\u6bcf\u6b21\u4f1a\u7ffb\u500d\u3002 \u8fd9\u79cd\u9010\u6e10\u52a0\u500d\u7684\u884c\u4e3a\u4e00\u76f4\u6301\u7eed\u5230 GradScalar \u9047\u5230\u5305\u542b inf \u503c\u7684\u68af\u5ea6\u66f4\u65b0\u3002 Gradscalar \u4e22\u5f03\u8fd9\u6279\u6570\u636e(\u4f8b\u5982\u8df3\u8fc7\u68af\u5ea6\u66f4\u65b0) \uff0c\u5c06\u635f\u5931\u4e58\u6570\u51cf\u534a\uff0c\u5e76\u91cd\u7f6e\u5176\u500d\u589e\u65f6\u95f4\u3002 Gradscaler \u9700\u8981\u5bf9\u68af\u5ea6\u66f4\u65b0\u8ba1\u7b97(\u68c0\u67e5\u662f\u5426\u6ea2\u51fa)\u548c\u4f18\u5316\u5668(\u5c06\u4e22\u5f03\u7684 batches \u8f6c\u6362\u4e3a no-op )\u8fdb\u884c\u63a7\u5236\uff0c\u4ee5\u5b9e\u73b0\u5176\u64cd\u4f5c( \u7531\u4e8eGradScaler()\u5bf9gradient\u8fdb\u884c\u4e86scale\uff0c\u56e0\u6b64\u6bcf\u4e2a\u53c2\u6570\u7684gradient\u5e94\u8be5\u5728optimizer\u66f4\u65b0\u53c2\u6570\u524dunscaled\uff0c\u4ece\u800c\u4f7f\u5b66\u4e60\u7387\u4e0d\u53d7\u5f71\u54cd\u3002 )\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 loss.backwards() \u88ab scaler.scale(loss).backwards() \u53d6\u4ee3\uff0c \u4ee5\u53ca optimizer.step() \u88ab scaler.step(optimizer) \u66ff\u6362\u7684\u539f\u56e0\u3002 # \u5355GPU\u4f7f\u7528 from torch.cuda.amp import autocast , GradScaler # Creates model and optimizer in default precision model = Net () . cuda () optimizer = optim . SGD ( model . parameters (), ... ) # Creates a GradScaler once at the beginning of training. use_amp = True # \u662f\u5426\u4f7f\u7528\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 scaler = GradScaler ( enabeled = use_amp ) for epoch in epochs : for input , target in data : # model\u524d\u5411+loss\u5f00\u542fautocast,\u5b9e\u73b0\u4e86 fp32-> fp16\u8f6c\u6362 with autocast ( enabled = use_amp ): output = model ( input ) loss = loss_fn ( output , target ) optimizer . zero_grad () # \u534a\u7cbe\u5ea6\u7684\u6570\u503c\u8303\u56f4\u6709\u9650\uff0c\u9700\u8981\u7528\u5b83\u6765\u653e\u5927loss scaler . scale ( loss ) . backward () # \u66ff\u6362loss.backwards() # \u68af\u5ea6\u653e\u5927\u540e\u4f1a\u51fa\u73b0inf\u6216NaN\u503c\uff0c\u5982\u679c\u51fa\u73b0\u5c31\u8df3\u8fc7\u672c\u6b21\u66f4\u65b0\uff0c\u5982\u679c\u4e0d\u662f\u5219\u7528optimizer.step() scaler . step ( optimizer ) # \u66ff\u6362optimizer.step() # Updates the scale for next iteration. scaler . update () # \u591aGPU\u4f7f\u7528 # 1.\u4e0b\u9762\u7684\u65b9\u5f0f\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 model = MyModel () dp_model = nn . DataParallel ( model ) # Sets autocast in the main thread with autocast (): # dp_model's internal threads won't autocast. The main thread's autocast state has no effect. output = dp_model ( input ) # loss_fn still autocasts, but it's too late... loss = loss_fn ( output ) # 2.\u89e3\u51b3\u65b9\u6848\uff0c\u4e24\u79cd MyModel ( nn . Module ): ... @autocast () def forward ( self , input ): ... # Alternatively MyModel ( nn . Module ): ... def forward ( self , input ): with autocast (): ... # 3.\u4fee\u6539\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 model = MyModel () dp_model = nn . DataParallel ( model ) with autocast (): output = dp_model ( input ) loss = loss_fn ( output ) PyTorch\u591a\u7ebf\u7a0b\u8bad\u7ec3 \u00b6 import torch.multiprocessing as mp from model import MyModel def train ( model ): # Construct data_loader, optimizer, etc. for data , labels in data_loader : optimizer . zero_grad () loss_fn ( model ( data ), labels ) . backward () optimizer . step () # This will update the shared parameters if __name__ == '__main__' : torch . multiprocessing . set_start_method ( 'spawn' ) num_processes = 4 model = MyModel () # NOTE: this is required for the ``fork`` method to work model . share_memory () processes = [] for rank in range ( num_processes ): p = mp . Process ( target = train , args = ( model ,)) p . start () processes . append ( p ) for p in processes : p . join () \u95ee\u9898 \u00b6 \u4f4e\u7248\u672c\u52a0\u8f7d\u9ad8\u7248\u672c\u6a21\u578b\u62a5\u9519 # v1.7,\u7528_use_new_zipfile_serialization=False\u89e3\u51b3 torch . save ( model_ . state_dict (), 'model_best_bacc.pth.tar' , _use_new_zipfile_serialization = False ) #v1.4 torch . load ( 'model_best_bacc.pth.tar' , map_location = 'cpu' )","title":"PyTorch\u5feb\u901f\u6559\u7a0b"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_1","text":"# \u56fa\u5b9a\u968f\u673a\u79cd\u5b50 torch . manual_seed ( 0 ) torch . cuda . manual_seed_all ( 0 ) # \u6307\u5b9aGPU\u663e\u5361 os . environ [ 'CUDA_VISIBLE_DEVICES' ] = '0,1' # \u6570\u636e\u7c7b\u578b # torch.FloatTensor() 32\u4f4d\u6d6e\u70b9\u578b \u9ed8\u8ba4 # torch.cuda.FloatTensor() # torch.DoubleTensor() 64\u4f4d\u6d6e\u70b9\u578b # torch.ShortTensor() 16\u4f4d\u6574\u578b # torch.IntTensor() 32\u4f4d\u6574\u578b # torch.LongTensor() 64\u4f4d\u6574\u578b # \u8865\u51451\uff0c\u8f6c\u6362Tensor\u7684\u6570\u636e\u7c7b\u578b \u6bd4\u5982 a\u662fIntTensor\u7c7b\u578b\uff0c\u53ea\u9700\u8981 a.float() \u5c31\u53ef\u4ee5\u8f6c\u4e3aFloatTensor\u7c7b\u578b tensor = tensor . float () tensor = tensor . long () # \u8bbe\u7f6e\u5168\u5c40\u9ed8\u8ba4tensor\u6570\u636e\u7c7b\u578b torch . set_default_tensor_type ( 'torch.DoubleTensor' ) # \u521b\u5efatensor t . Tensor ( * sizes ) # \u521b\u5efatensor\u65f6\uff0c\u7cfb\u7edf\u4e0d\u4f1a\u9a6c\u4e0a\u5206\u914d\u7a7a\u95f4\uff0c\u53ea\u662f\u4f1a\u8ba1\u7b97\u5269\u4f59\u7684\u5185\u5b58\u662f\u5426\u8db3\u591f\u4f7f\u7528\uff0c\u4f7f\u7528\u5230tensor\u65f6\u624d\u4f1a\u5206\u914d torch . Tensor ( arr ) == torch . tensor ( arr ) # \u57fa\u7840\u6784\u9020\u51fd\u6570 # \u800c\u4e0b\u9762\u7684\u5176\u5b83\u64cd\u4f5c\u90fd\u662f\u5728\u521b\u5efa\u5b8ctensor\u4e4b\u540e\u9a6c\u4e0a\u8fdb\u884c\u7a7a\u95f4\u5206\u914d\u3002\u4f8b\u5982:torch.ones(2,3) # \u4e0b\u9762\u7684\u8fd9\u4e9b\u521b\u5efa\u65b9\u6cd5\u90fd\u53ef\u4ee5\u5728\u521b\u5efa\u7684\u65f6\u5019\u6307\u5b9a\u6570\u636e\u7c7b\u578bdtype\u548c\u5b58\u653edevice(cpu/gpu).\u4f8b\u5982:t.randn(2, 3,device=t.device('cpu')) torch . ones ( 2 , 2 ) # \u51681Tensor \u53c2\u6570:*size torch . zeros (( 3 , 2 )) # \u5168\u96f6\u7684Tensor \u53c2\u6570:*size torch . eye ( * size ) # \u5bf9\u89d2\u7ebf\u4e3a1\uff0c\u5176\u4ed6\u4e3a0 torch . arange ( s , e , step ) # \u4eces\u5230e,\u8303\u56f4[s,e)\uff0c\u6b65\u957f\u4e3astep torch . linspace ( s , e , steps ) # \u4eces\u5230e,\u8303\u56f4[s,e],\u5747\u5300\u5207\u5206\u6210steps\u4efd torch . rand ( * size ) / torch . randn ( * size ) #\u5747\u5300/\u6807\u51c6\u5206\u5e03 torch . normal ( mean , std ) # \u6b63\u6001\u5206\u5e03 torch . uniform ( from , to ) # \u5747\u5300\u5206\u5e03 torch . randperm ( n ) # \u968f\u673a\u6392\u5217,integers:[0,n-1],\u8fd9\u4e9b\u6574\u6570\u968f\u673a\u6392\u5217 # torch.*_like(tensora) \u53ef\u4ee5\u751f\u6210\u548ctensora\u62e5\u6709\u540c\u6837\u5c5e\u6027(\u7c7b\u578b\uff0c\u5f62\u72b6\uff0ccpu/gpu)\u7684\u65b0tensor\u3002 torch . zeros_like ( a ) #\u7b49\u4ef7\u4e8et.zeros(a.shape,dtype=a.dtype,device=a.device) torch . zeros_like ( a , dtype = t . int16 ) #\u53ef\u4ee5\u4fee\u6539\u67d0\u4e9b\u5c5e\u6027 torch . rand_like ( a ) # \u548ca\u5c5e\u6027\u4e00\u6837\uff0c\u5c31\u662f\u503c\u4e0d\u540c # tensor.new_*(new_shape) \u65b0\u5efa\u4e00\u4e2a\u4e0d\u540c\u5f62\u72b6\u7684tensor\uff0c\u5c5e\u6027\u5565\u7684\u76f8\u540c a . new_ones ( 4 , 5 , dtype = t . int ) a . new_tensor ([ 3 , 4 ]) # \u5e38\u7528\u5c5e\u6027 tensor_a . shape == tensor_a . size () # \u4e5f\u662f\u8fd4\u56detorch.Size\u5bf9\u8c61 \u7b49\u4ef7\u4e8etensor_a.size() tensor_a . item () # \u53ef\u4ee5\u83b7\u5f97Tensor\u7684\u6570\u503c\uff0c\u800c\u4e0d\u662fTensor\uff0c\u800ctensor_a[0]\u5f97\u5230\u7684\u8fd8\u662ftensor,\u53ea\u4e0d\u8fc7\u662f0-dim\uff0c\u5f53\u7136tensor_a[0].item()\u4e5f\u53ef\u4ee5\uff0c\u73b0\u5728\u5df2\u7ecf\u4e0d\u662f\u7528[0]\u6765\u83b7\u53d6\u503c\u4e86 tensor_a . tolist () # \u628atensor\u8f6c\u4e3alist tensor_a . type () # Tensor\u7684\u6570\u636e\u7c7b\u578b tensor_a . dim () # Tensor\u7684\u7ef4\u5ea6\u4fe1\u606f tensor_a . numel () # Tensor\u4e2d\u5143\u7d20\u4e2a\u6570\u603b\u6570 \u7b49\u4ef7\u4e8etensor_a.nelement() # \u5e38\u7528\u65b9\u6cd5 # \u77e9\u9635\u8ba1\u7b97 torch . mm ( tensor1 , tensor2 ) # (m*n) * (n*p) -> (m*p). torch . bmm ( tensor1 , tensor2 ) # (b*m*n) * (b*n*p) -> (b*m*p). torch . addmm / addbmm / addmv / addr / baddbmm tensor1 * tensor2 # Element-wise multiplication. torch . dot / cross #\u5185\u79ef/\u5916\u79ef torch . inverse #\u6c42\u9006\u77e9\u9635 torch . svd #\u5947\u5f02\u503c\u5206\u89e3 tensor_a . t # \u8f6c\u7f6e # \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u77e9\u9635\u7684\u8f6c\u7f6e\u4f1a\u5bfc\u81f4\u5b58\u50a8\u7a7a\u95f4\u4e0d\u8fde\u7eed\uff0c\u9700\u8c03\u7528\u5b83\u7684.contiguous\u65b9\u6cd5\u5c06\u5176\u8f6c\u4e3a\u8fde\u7eed tensor_a . t () . contiguous () # \u5224\u65ad: tensor_a.t().is_contiguous()\u8fd4\u56deFalse\uff0c\u8f6c\u8fc7\u4e4b\u540e\u8fde\u7eed # \u9010\u5143\u7d20\u64cd\u4f5c torch . add ( x , y ) # x+y \u4e5f\u53ef\u4ee5 \u5f53\u7136 x.add_(y) # \u4e0d\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u5bf9x\u4fee\u6539,\u4e0b\u9762\u7684\u90fd\u53ef\u4ee5\u52a0_,\u4f8b:x.squeeze_(0) torch . mean ( x ) # \u6c42\u5747\u503c torch . matmul ( x , y ) # \u77e9\u9635\u4e58\u6cd5,\u4e5f\u53ef\u4ee5\u7528 torch.mm(x,y) torch . clamp ( x , min , max ) # \u622a\u65ad:\u5c0f\u4e8emin\u7684\u8bbe\u7f6e\u4e3amin\uff0c\u5927\u4e8emax\u7684\u8bbe\u7f6e\u4e3amax # torch.abs/sqrt/div/exp/fmod/log/pow.. \u7edd\u5bf9\u503c/\u5e73\u65b9\u6839/\u9664\u6cd5/\u6307\u6570/\u6c42\u4f59/\u6c42\u5e42.. # torch.cos/sin/asin/atan2/cosh.. \u76f8\u5173\u4e09\u89d2\u51fd\u6570 # torch.ceil/round/floor/trunc \u4e0a\u53d6\u6574/\u56db\u820d\u4e94\u5165/\u4e0b\u53d6\u6574/\u53ea\u4fdd\u7559\u6574\u6570\u90e8\u5206 # torch.sigmod/tanh.. \u6fc0\u6d3b\u51fd\u6570 # \u603b\u7ed3\u7ecf\u9a8c:\u4e0b\u9762\u7684\u51fd\u6570\u5927\u591a\u90fd\u6709\u4e24\u4e2a\u5c5e\u6027: dim=0/1/..\u8868\u793a\u7ef4\u5ea6 keepdim=True\u4f1a\u4fdd\u7559\u7ef4\u5ea61 \u4f8b\u5982:\u8f93\u5165(m,n,k)->dim=0->\u8f93\u51fa(1, n, k)\u6216\u8005(n, k) # mean/sum/median/mode \u5747\u503c/\u548c/\u4e2d\u4f4d\u6570/\u4f17\u6570 # norm/dist \u8303\u6570/\u8ddd\u79bb # std/var \u6807\u51c6\u5dee/\u65b9\u5dee # cumsum/cumprod \u7d2f\u52a0/\u7d2f\u4e58(\u7279\u6b8a) tensor_a . cumsum ( dim = 1 ) # \u6cbf\u7740\u884c\u8fdb\u884c\u7d2f\u52a0\uff0c\u6ce8\u610f\u662f\u4f7f\u5404\u884c\u4e4b\u95f4\u6ca1\u8054\u7cfb\uff0c\u5404\u52a0\u5404\u7684 values , indexs = torch . topk ( torch . arange ( 10 ), k ) # \u8ba1\u7b97\u524dtopk\u4e2a\u5143\u7d20\uff0c\u8fd4\u56de\u503c+\u7d22\u5f15 torch . max ( tensor_a ,[ dim ]) / torch . max ( tensor_a , tensor_b ) # \u5927\u5c0f max_value , max_idx = torch . max ( tensor_a , dim = 1 ) #\u5224\u65ad\u5927\u5c0f tensor_a > 1 # \u8fd4\u56de\u4e00\u4e2aByteTensor,\u5927\u4e8e1\u7684\u503c\u4e3a1\uff0c\u5c0f\u4e8e1\u7684\u503c\u4e3a0 tensor_a [ tensor_a > 1 ] # \u8fd4\u56detensor_a\u4e2d\u5927\u4e8e1\u7684tensor\u503c \u7b49\u4ef7\u4e8etensor_a.masked_select(a>1) torch . index_select ( input , dim , index ) # \u5728\u6307\u5b9a\u7ef4\u5ea6dim\u4e0a\u9009\u53d6\uff0c\u6bd4\u5982\u9009\u53d6\u67d0\u4e9b\u884c\u3001\u67d0\u4e9b\u5217 torch . masked_select ( input , mask ) # \u4f8b\u5b50\u5982\u4e0a\uff0ca[a>0]\uff0c\u4f7f\u7528ByteTensor\u8fdb\u884c\u9009\u53d6 torch . non_zero ( input ) # \u975e0\u5143\u7d20\u7684\u4e0b\u6807 torch . gather ( input , dim , index ) # \u6839\u636eindex\uff0c\u5728dim\u7ef4\u5ea6\u4e0a\u9009\u53d6\u6570\u636e\uff0c\u8f93\u51fa\u7684size\u4e0eindex\u4e00\u6837 # gather\u662f\u4e00\u4e2a\u6bd4\u8f83\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u5bf9\u4e00\u4e2a2\u7ef4tensor\uff0c\u8f93\u51fa\u7684\u6bcf\u4e2a\u5143\u7d20\u5982\u4e0b\uff1a # out[i][j] = input[index[i][j]][j] # dim=0 # out[i][j] = input[i][index[i][j]] # dim=1 # \u4e3e\u4f8b\u5b50\uff1atorch.arange(0,16).view(4,4).gather(0,torch.LongTensor([[0,1,2,3]])) # \u53d6\u6b63\u5bf9\u89d2\u7ebf\u5143\u7d20 # gather\u76f8\u5bf9\u5e94\u7684\u9006\u64cd\u4f5c\u662fscatter_\uff0cgather\u628a\u6570\u636e\u4eceinput\u4e2d\u6309index\u53d6\u51fa\uff0c\u800cscatter_\u662f\u628a\u53d6\u51fa\u7684\u6570\u636e\u518d\u653e\u56de\u53bb\u3002\u6ce8\u610fscatter_\u51fd\u6570\u662finplace\u64cd\u4f5c\u3002 out = input . gather ( dim , index ) #-->\u8fd1\u4f3c\u9006\u64cd\u4f5c out = Tensor () out . scatter_ ( dim , index ) # \u64cd\u4f5c\u7ef4\u5ea6 # \u91cd\u70b9\uff0c\u589e\u52a0\u7ef4\u5ea6unsqueeze,\u51cf\u5c11\u7ef4\u5ea6squeeze,\u7ef4\u5ea6\u91cd\u6392 permute\uff0c\u7ef4\u5ea6\u4ea4\u6362 transpose, Tensor\u7684reshape\u64cd\u4f5c==tensor_a.view 0\u7ef4\u662fy\u8f74\uff0c1\u7ef4\u662fx\u8f74 None\u7c7b\u4f3c\u4e8enp . newaxis , \u4e3aa\u65b0\u589e\u4e86\u4e00\u4e2a\u8f74 # tensor_a.shape:(3,4) -> tensor_a[None].shape:(1,3,4) \u56e0\u4e3a\u7b49\u4ef7\u4e8e a[None,:,:] tensor_a . unsqueeze ( 0 ) # \u5728\u7b2c\u4e00\u7ef4\u5ea6\u589e\u52a0 \u53c2\u6570\u662fdim:0\u5f00\u59cb (4,3) -> (1,4,3) \u7b49\u4ef7\u4e8e tensor_a[None,:] ,\u8d1f\u6570\u7ef4\u5ea6\u8868\u793a\u5012\u6570\u7684\u7ef4\u5ea6 tensor_a . squeeze ( 0 ) # \u51cf\u5c11\u7b2c\u4e00\u7ef4\u5ea6 \u53c2\u6570\u662fdim:0\u5f00\u59cb (1,4,3) -> (4,3) tensor_a . squeeze () # \u6ca1\u6709\u53c2\u6570 \u5c06 tensor \u4e2d\u6240\u6709\u7684\u4e00\u7ef4\u5168\u90e8\u90fd\u53bb\u6389 (1,1,4,3) -> (4,3) tensor_a . expand ( * size ) # \u6269\u5927\u5f20\u91cf(\u91cd\u590d),\u4e0d\u4f1a\u5360\u7528\u989d\u5916\u7a7a\u95f4\uff0c\u53ea\u4f1a\u5728\u9700\u8981\u7684\u65f6\u5019\u624d\u6269\u5145\uff0c\u53ef\u6781\u5927\u8282\u7701\u5185\u5b58 torch . reshape ( tensor , ( 64 , 512 , 1 , 1 )) . expand ( 64 , 512 , 7 , 7 ) # # \u5f20\u91cf\u6269\u5c55 Expand tensor of shape 64*512 to shape 64*512*7*7. tensor_a . permute ( 1 , 0 , 2 ) # \u7ef4\u5ea6\u91cd\u65b0\u6392\u5217 (3,4,5) -> (4,3,5) tensor_a . transpose ( 0 , 2 ) # \u7ef4\u5ea6\u4ea4\u6362 (3,4,5) -> (5,4,3) tensor_a . view ( - 1 , 5 ) # Tensor reshape (3,4,5) -> (12,5) torch . reshape ( tensor , shape ) # torch.reshape \u53ef\u4ee5\u81ea\u52a8\u5904\u7406\u8f93\u5165\u5f20\u91cf\u4e0d\u8fde\u7eed\u7684\u60c5\u51b5 # \u5982\u679c\u65b0\u5927\u5c0f\u8d85\u8fc7\u4e86\u539f\u5927\u5c0f\uff0c\u4f1a\u81ea\u52a8\u5206\u914d\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u800c\u5982\u679c\u65b0\u5927\u5c0f\u5c0f\u4e8e\u539f\u5927\u5c0f\uff0c\u5219\u4e4b\u524d\u7684\u6570\u636e\u4f9d\u65e7\u4f1a\u88ab\u4fdd\u5b58,\u4f46\u662f\u53ea\u663e\u793asize\u5927\u5c0f\u7684\u6570\u636e tensor_a . resize_ () # \u4e0eview\u4e0d\u540c\uff0c\u5b83\u53ef\u4ee5\u4fee\u6539tensor\u7684\u5927\u5c0f # \u5f20\u91cf\u62fc\u63a5\uff0ctorch.cat\u4f1a\u6cbf\u7740\u6307\u5b9a\u7ef4\u5ea6\u62fc\u63a5\uff0ctorch.stack\u4f1a\u589e\u52a0\u4e00\u7ef4 # \u4f8b\u5982\u5f53\u53c2\u6570\u662f 3 \u4e2a 10\u00d75 \u7684\u5f20\u91cf\uff0ctorch.cat \u7684\u7ed3\u679c\u662f 30\u00d75 \u7684\u5f20\u91cf\uff0c\u800c torch.stack \u7684\u7ed3\u679c\u662f 3\u00d710\u00d75 \u7684\u5f20\u91cf torch . cat ( seq , dim = 0 , out = None ) # \u5728\u6307\u5b9a\u7ef4\u5ea6\u4e0a\u62fc\u63a5\u5f20\u91cf,\u7ef4\u5ea6\u4e0d\u4f1a\u589e\u52a0\uff0c\u53ea\u4f1a\u5728\u67d0\u4e00\u7ef4\u5ea6\u8fdb\u884c\u62fc\u63a5 torch . stack (( Tensor ), dim ) # \u4f1a\u589e\u52a0\u4e00\u4e2a\u7ef4\u5ea6 a:(3,3),b:(3,3),torch.stack([a,b],0)->shape:(2,3,3),toch.stack([a,b],1)->shape:(3,2,3) # tensor\u5207\u7247 a [ 0 : 1 ,: 2 ] # \u7b2c0\u884c\uff0c\u524d\u4e24\u5217 tensor([[-0.1855, -0.4570]]) a [ 0 ,: 2 ] # \u6ce8\u610f\u4e24\u8005\u7684\u533a\u522b\uff1a\u5f62\u72b6\u4e0d\u540c tensor([-0.1855, -0.4570]) # \u9ad8\u7ea7\u7d22\u5f15 \u524d\u63d0:x.shape->(3,3,3) x [[ 1 , 2 ], [ 1 , 2 ], [ 2 , 0 ]] # x[1,1,2]\u548cx[2,2,0] x [[ 2 , 1 , 0 ], [ 0 ], [ 1 ]] # x[2,0,1],x[1,0,1],x[0,0,1] x [[ 0 , 2 ], ... ] # x[0] \u548c x[2] # \u5f20\u91cf\u590d\u5236 tensor . clone () # memory:new,still in graph:yes tensor . detach () # memory:shared,still in graph:no tensor . detach () . clone () # memory:new,still in graph:no # numpy & tensor tensor_var . numpy () # CPU:tensor->numpy,GPU\u65f6:tensor_var.cpu().numpy() torch . from_numpy ( tensor_var ) # numpy->tensor # \u6c42\u5bfc\uff0c\u4e09\u53d8\u91cf # x.data -> Variable \u53d8\u4e3aTensor # x.grad -> Variable\u7684\u68af\u5ea6 # x.grad_fn -> Variable\u7684\u68af\u5ea6\u51fd\u6570 tensor_a . backward ( parameters ) # \u53cd\u5411\u4f20\u64ad\u51fd\u6570:\u63a5\u53d7\u7684\u53c2\u6570parameters\u5fc5\u987b\u8981\u548ctensor_a\u7684\u5927\u5c0f\u4e00\u6a21\u4e00\u6837,\u7136\u540e\u4f5c\u4e3atensor_a\u7684\u7cfb\u6570\u4f20\u56de\u53bb # \u4e3e\u4f8b\u5b50 tensor_a . backward ( torch . ones ( tensor_a . size ())) # \u6ce8\u610f\uff1agrad\u5728\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\u662f\u7d2f\u52a0\u7684(accumulated)\uff0c\u8fd9\u610f\u5473\u7740\u6bcf\u4e00\u6b21\u8fd0\u884c\u53cd\u5411\u4f20\u64ad\uff0c\u68af\u5ea6\u90fd\u4f1a\u7d2f\u52a0\u4e4b\u524d\u7684\u68af\u5ea6\uff0c\u6240\u4ee5\u53cd\u5411\u4f20\u64ad\u4e4b\u524d\u9700\u628a\u68af\u5ea6\u6e05\u96f6\u3002 tensor_a . grad . data . zero_ () # \u4ee5\u4e0b\u5212\u7ebf\u7ed3\u675f\u7684\u51fd\u6570\u662finplace\u64cd\u4f5c\uff0c\u4f1a\u4fee\u6539\u81ea\u8eab\u7684\u503c\uff0c\u5c31\u50cfadd_ # pytorch\u4f7f\u7528GPU model = Net() device = torch . device ( \"cpu\" / \"cuda:x\" ) device = t . device ( \"cuda:0\" if t . cuda . is_available () else \"cpu\" ) model . to ( device ) # \u7b49\u4ef7\u4e8e net = net.to(device) images = images . to ( device ) labels = labels . to ( device )","title":"\u57fa\u7840\u7528\u6cd5"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch","text":"transforms\u768422\u4e2a\u65b9\u6cd5 \u91cd\u5199\u6570\u636e\u52a0\u8f7d: torch.utils.data.Dataset ,\u5fc5\u987b\u7ee7\u627f\u8fd9\u4e2a\u7c7b\uff0c\u5e76\u4e14\u91cd\u5199\u4e24\u4e2a\u65b9\u6cd5 __getitem__ \uff1a\u8fd4\u56de\u4e00\u6761\u6570\u636e\uff0c\u6216\u4e00\u4e2a\u6837\u672c\u3002 obj[index] \u7b49\u4ef7\u4e8e obj.__getitem__(index) __len__ \uff1a\u8fd4\u56de\u6837\u672c\u7684\u6570\u91cf\u3002len(obj)\u7b49\u4ef7\u4e8e obj.__len__() # \u65b9\u6cd5\u4e00:\u7ee7\u627fdata.Dataset class DogCat ( data . Dataset ): # \u5fc5\u987b\u7ee7\u627fdata.Dataset\u7c7b def __init__ ( self , root , transforms = None ): # root\u662f\u6307\u6839\u76ee\u5f55,\u52a0\u5165\u9884\u5904\u7406 imgs = os . listdir ( root ) #\u6307\u5b9a\u8def\u5f84\uff0c\u65b9\u4fbf\u5728__getitem__\u65b9\u6cd5\u4e2d\u8bfb\u53d6\u56fe\u7247 \u7528\u5217\u8868\u662f\u65b9\u4fbf\u7d22\u5f15 self . imgs = [ os . path . join ( root , img ) for img in imgs ] self . transforms = transforms def __getitem__ ( self , index ): img_path = self . imgs [ index ] # dog->1,cat->0 label = 1 if 'dog' in img_path . split ( '/' )[ - 1 ] . split ( '.' )[ 0 ] else 0 data = Image . open ( img_path ) if self . transforms : # \u6267\u884c\u9884\u5904\u7406\u64cd\u4f5c data = self . transforms ( data ) else : array = np . asarray ( data ) data = torch . from_numpy ( array ) return data , label def __len__ ( self ): return len ( self . imgs ) # \u56fe\u50cf\u589e\u5f3a from torchvision import transforms as T transform = T . Compose ([ T . Resize ( 224 ), # \u7f29\u653e\u56fe\u7247(Image)\uff0c\u4fdd\u6301\u957f\u5bbd\u6bd4\u4e0d\u53d8\uff0c\u6700\u77ed\u8fb9\u4e3a224\u50cf\u7d20 T . CenterCrop ( 224 ), # \u4ece\u56fe\u7247\u4e2d\u95f4\u5207\u51fa224*224\u7684\u56fe\u7247 T . ToTensor (), # \u5c06\u56fe\u7247(Image)\u8f6c\u6210Tensor\uff0c\u5f52\u4e00\u5316\u81f3[0, 1] T . Normalize ( mean = [ . 5 , . 5 , . 5 ], std = [ . 5 , . 5 , . 5 ]) # \u6807\u51c6\u5316\u81f3[-1, 1]\uff0c\u89c4\u5b9a\u5747\u503c\u548c\u6807\u51c6\u5dee ]) dataset = DogCat ( \"./dogs-vs-cats/train/\" , transforms = transform ) img , label = dataset [ 0 ] print ( img . shape , label ) # torch.Size([3, 224, 224]) 1 ImageFolder # \u8bfb\u53d6\u5206\u7c7b\u7684\u76ee\u5f55\u7ed3\u6784 DogCat |- cat / # \u56e0\u4e3aImageFolder\u5b9a\u4e49\u7684\u7c7b\u540d\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u4e00\u822c\u5efa\u8bae\u76f4\u63a5\u628a\u76ee\u5f55\u540d\u6539\u4e3a\u4ece0\u5f00\u59cb |- cat0 . jpg ... |- dog |- dog0 . jpg ... # \u4e00\u4e2a\u65b9\u6cd5: torchvision . datasets . ImageFolder ( root , # \u5728root\u6307\u5b9a\u7684\u8def\u5f84\u4e0b\u5bfb\u627e\u56fe\u7247 transform = None , # \u56fe\u50cf\u589e\u5f3a target_transform = None , # \u5bf9label\u8f6c\u6362 loader =< function default_loader at 0x11ed2b560 > , # \u7ed9\u5b9a\u8def\u5f84\u540e\u5982\u4f55\u8bfb\u53d6\u56fe\u7247\uff0c\u9ed8\u8ba4\u8bfb\u53d6\u4e3aRGB\u683c\u5f0f\u7684PIL Image\u5bf9\u8c61 is_valid_file = None , ) # \u4e09\u4e2a\u53d8\u91cf self . classes # \u7528\u4e00\u4e2alist\u4fdd\u5b58 \u7c7b\u540d self . class_to_idx # {\u7c7b\u540d:\u7c7b\u5e8f\u53f7(\u4ece0\u5f00\u59cb)}->{'cat': 0, 'dog': 1} self . imgs # [(imgpath1,0),(imgpath2,0),(imgpath3,1)...] # ImageFolder\u7684\u8fd4\u56de\u503c\uff0cdataset dataset [ 0 ] # \u7b2c\u4e00\u7ef4\u5ea6\u662f\u7b2c\u51e0\u5f20\u56fe\uff0c\u8fd4\u56de\u4e00\u4e2a\u5305\u542b(\u56fe\u7247\u5bf9\u8c61\uff0clabel)\u7684\u5bf9\u8c61,\u5982\u679c\u6ca1\u6709transform\uff0c\u8fd4\u56de\u7684\u8fd8\u662fPIL dataset [ 0 ][ 0 ] # \u56fe\u7247\u5bf9\u8c61 dataset [ 0 ][ 1 ] # label # \u4e00\u4e2a\u5c0f\u4f8b\u5b50 normalize = transforms . Normalize ( mean = [ 0.4 , 0.4 , 0.4 ], std = [ 0.2 , 0.2 , 0.2 ]) transform = transforms . Compose ([ transforms . RandomResizedCrop ( 224 ), transforms . RandomHorizontalFlip (), transforms . ToTensor (), normalize , ]) dataset = ImageFolder ( 'DogCat/' , transform = transform ) dataset [ 0 ][ 0 ] . shape # CxHxW # \u770b\u770b\u56fe\u7247 to_img = transforms . ToPILImage () # 0.2\u548c0.4\u662f\u6807\u51c6\u5dee\u548c\u5747\u503c\u7684\u8fd1\u4f3c to_img ( dataset [ 0 ][ 0 ] * 0.2 + 0.4 ) # \u4f1a\u663e\u793a\u56fe\u7247 Dataset # \u4e0a\u9762\u7684\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u6b21\u53ea\u4f1a\u8fd4\u56de\u4e00\u4e2a(img,label),\u8bad\u7ec3\u7684\u65f6\u5019\u4e00\u822c\u662fbatch\uff0c\u6240\u4ee5 torch . utils . data . DataLoader ( dataset , # \u4e0a\u9762\u65b9\u5f0f\u7684\u8fd4\u56de\u503c batch_size = 1 , shuffle = False , sampler = None , # \u6837\u672c\u62bd\u6837 batch_sampler = None , num_workers = 0 , # \u591a\u8fdb\u7a0b collate_fn = None , # \u5c06\u82e5\u5e72\u56fe\u7247\u62fc\u63a5\u4e3a\u4e00\u4e2abatch\u7684\u6570\u636e\u62fc\u63a5\u65b9\u5f0f\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49 pin_memory = False , # \u662f\u5426\u5c06\u6570\u636e\u4fdd\u5b58\u5728pin memory\u533a\uff0cpin memory\u4e2d\u7684\u6570\u636e\u8f6c\u5230GPU\u4f1a\u5feb\u4e00\u4e9b drop_last = False , timeout = 0 , worker_init_fn = None , multiprocessing_context = None , ) # \u5c0f\u4f8b\u5b50 from torch.utils.data import DataLoader # \u5bfc\u5165\u5305\uff0c\u6ce8\u610f\u4f4d\u7f6e dataloader = DataLoader ( dataset , batch_size = 32 , shuffle = True , num_workers = 0 , drop_last = False ) # \u6ce8\u610f:dataloader\u8fd4\u56de\u7684\u662f\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61\uff0c\u6bcf\u4e2a\u8fed\u4ee3\u5bf9\u8c61\u5305\u542bbatch_size\u4e2a\u6837\u672c dataiter = iter ( dataloader ) imgs , labels = next ( dataiter ) # batch_size\u4e2a imgs . shape # torch.Size([32, 3, 224, 224]) \u8865\u5145:collate_fn\u51fd\u6570 # \u81ea\u5b9a\u4e49\u8fd9\u4e2a\u51fd\u6570\u53ef\u4ee5\u5b9e\u73b0\u4efb\u4f55\u4f60\u60f3\u8981\u7684\u8f93\u51fa def custom_collate ( batch ): ''' \u56fe\u50cf\u8bc6\u522b:\u8fd9\u4e2abatch\u662f\u4e00\u4e2alist\uff0c\u957f\u5ea6\u662fbatch_size\uff0c\u91cc\u9762\u7684\u5143\u7d20\u662fself.__getitem__(index)\u5f97\u5230\u7684\u5143\u7d20:[(img1,label1),(img2,label2)] \u76ee\u6807\u68c0\u6d4b:\u8fd9\u4e2abatch\u53ef\u80fd\u662f:[{'image': img, 'bboxes': bbox, 'category_id': labels},....] \u603b\u7ed3:\u8fd9\u4e2alist\u91cc\u9762\u662f\u4ec0\u4e48\u5185\u5bb9\uff0c\u53d6\u51b3\u4e8e self.__getitem__(index) return\u7684\u662f\u4ec0\u4e48\u5143\u7d20 ''' # \u4e0b\u9762\u4ee5\u56fe\u50cf\u8bc6\u522b\u8fd4\u56de\u7684[img,label]\u8fdb\u884c\u6539\u5199 batch . sort ( key = lambda x : len ( x [ 1 ]), reverse = True ) # \u5148\u6309label\u957f\u5ea6\u8fdb\u884c\u6392\u5e8f img , label = zip ( * batch ) pad_label = [] lens = [] max_len = len ( label [ 0 ]) # \u8fdb\u884c\u957f\u5ea6\u7684pad for i in range ( len ( label )): temp_label = [ 0 ] * max_len temp_label [: len ( label [ i ])] = label [ i ] pad_label . append ( temp_label ) lens . append ( len ( label [ i ])) return img , pad_label , lens # [img,label,label_len]","title":"Pytorch\u6570\u636e\u52a0\u8f7d\u4e0e\u5904\u7406"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#sample","text":"\u91c7\u6837Sample\u4ecb\u7ecd: torch.utils.data.sampler.xx \uff0c\u6ce8\u610f\uff0c \u6bcf\u4e2a\u53d6\u6837\u5668\u8fd4\u56de\u7684\u90fd\u662f\u6837\u672c\u5728dataset\u4e2d\u7684\u7d22\u5f15\uff0c\u5e76\u4e0d\u662f\u6837\u672c\u672c\u8eab # 1.SequentialSampler(data_source) # \u987a\u5e8f\u91c7\u6837\uff0c\u53ea\u6709\u4e00\u4e2a\u53c2\u6570dataset\u3002\u8fd4\u56de\u4ee5\u4e00\u4e2a\u4e0e\u6570\u636e\u96c6\u7b49\u957f\u7684\u8fed\u4ee3\u5668 # 2.RandomSampler(data_source,replacement=False,num_samples=None) # \u968f\u673a\u91c7\u6837 # 2.1 data_source (Dataset) \u2013 dataset to sample from # 2.2 replacement (bool) \u653e\u56de/\u4e0d\u653e\u56de\u91c7\u6837\uff0c\u9ed8\u8ba4\u4e0d\u653e\u56de # 2.3 num_samples (python:int) \u2013 default=`len(dataset)`.replacement=True\u65f6\u4f7f\u7528\uff1b\u9ed8\u8ba4\u662f\u9009\u62e9\u6240\u6709\u6570\u636e\uff0c\u5f53\u653e\u56de\u91c7\u6837\u65f6\u53ef\u4ee5\u8bbe\u5b9a\u968f\u673a\u9009\u53d6\u591a\u5c11\u4e2a\u6570\u636e\u3002 # 3.WeightedRandomSampler(weights,num_samples,replacement=True) # 3.1 weights (sequence)\u8d4b\u4e88\u6bcf\u4e2a\u6837\u672c\u6743\u91cd\u3002\u4ee3\u8868\u53d6\u5230\u8be5\u6837\u4f8b\u7684\u6982\u7387\u3002\u6570\u636e\u4e0d\u5747\u8861\u65f6\u53ef\u4ee5\u7528\u6765\u63a7\u5236\u4e0d\u540c\u7c7b\u522b\u6837\u672c\u7684\u91c7\u6837\u6743\u91cd # 3.2 num_samples (python:int) \u2013 number of samples to draw # 3.2 replacement (bool) \u2013 if True, samples are drawn with replacement. If not, they are drawn without replacement, which means that when a sample index is drawn for a row, it cannot be drawn again for that row. # final \u914d\u5408DataLoader\u4e00\u8d77\u4f7f\u7528 sample = torch . utils . data . sampler . xx # \u52a0\u8fd9\u4e00\u6b65\u662f\u4e3a\u4e86\u53d6\u6837\uff0c\u4f8b\u5982\u6570\u636e\u662f20\uff0c\u53ef\u4ee5\u5148\u53d6\u683710\uff0c\u5982\u679cbatch_size=2\uff0c\u90a3\u4e48dataloader\u7684len\u662f5 daloloader = torch . utils . data . DataLoader ( data , batch_size = 2 , sampler = sample )","title":"\u91c7\u6837\u5668Sample"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_2","text":"\u535a\u5ba2-\u91cd\u8981 | \u4ee3\u7801","title":"\u6a21\u578b\u591a\u5361\u8bad\u7ec3"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_1","text":"# \u7b80\u5355\u6982\u8ff0\u4e00\u4e0b import torch.nn.functional as F from torch import nn # \u8fdb\u5165\u795e\u7ecf\u7f51\u7edc\uff0c\u4e0d\u5f97\u4e0d\u63d0 nn.Parameter \u548cVariable\u7c7b\u4f3c\uff0c\u4f46\u662f\u9ed8\u8ba4\u662f\u6c42\u68af\u5ea6\u7684 w = nn . Parameter ( torch . randn ( 2 , 1 )) # \u8fd9\u662fnn.Parameter\u53d8\u91cfw b = nn . Parameter ( torch . zeros ( 1 )) # \u8fd9\u662fnn.Parameter\u53d8\u91cf b # \u795e\u7ecf\u7f51\u7edc\u4e2d\u5e38\u7528\u7684\u53c2\u6570 F . sigmoid ( x ) # \u6c42x\u7684sigmoid\u51fd\u6570 F . tanh ( x ) # tanh\u51fd\u6570 F . relu ( x ) # \u5377\u79ef\u5c42,\u8f93\u5165\u7684shape=(N,C,H,W) \u8f93\u51fa\u76f8\u540cshape torch . nn . Conv2d ( in_channels , # int out_channels , # int kernel_size , # int or tuple stride = 1 , # int or tuple padding = 0 , # int or tuple,\u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570 dilation = 1 , # int or tuple\uff0c\u7a7a\u6d1e\u5377\u79ef\uff0c\u5377\u79ef\u6838\u5143\u7d20\u4e4b\u95f4\u7684\u95f4\u8ddd groups = 1 , # int \u4ece\u8f93\u5165\u901a\u9053\u5230\u8f93\u51fa\u901a\u9053\u7684\u963b\u585e\u8fde\u63a5\u6570 bias = True , # bool padding_mode = 'zeros' , ) # BN\u5c42,\u8f93\u5165\u7684shape=(N,C,H,W) \u8f93\u51fa\u76f8\u540cshape torch . nn . BatchNorm2d ( num_features , # \u8f93\u5165\u7279\u5f81\u56fe(N,C,H,W)\u4e2d\u7684C eps = 1e-05 , # \u4e3a\u4fdd\u8bc1\u6570\u503c\u7a33\u5b9a\u6027\uff08\u5206\u6bcd\u4e0d\u80fd\u8d8b\u8fd1\u6216\u53d60\uff09,\u7ed9\u5206\u6bcd\u52a0\u4e0a\u7684\u503c\u3002\u9ed8\u8ba4\u4e3a1e-5 momentum = 0.1 , # \u52a8\u6001\u5747\u503c\u548c\u52a8\u6001\u65b9\u5dee\u6240\u4f7f\u7528\u7684\u52a8\u91cf\u3002\u9ed8\u8ba4\u4e3a0.1 affine = True , #\u662f\u5426\u9700\u8981\u4eff\u5c04:\u5982\u679cFalse,\u90a3\u4e48gamma=1,beta=0,\u4e14\u4e0d\u4f1a\u88ab\u5b66\u4e60 track_running_stats = True , # # track_running_stats=True\u8868\u793a\u8ddf\u8e2a\u6574\u4e2a\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\uff0c\u5f97\u5230\u65b9\u5dee\u548c\u5747\u503c\uff0c\u800c\u4e0d\u53ea\u662f\u4ec5\u4ec5\u4f9d\u8d56\u4e0e\u5f53\u524d\u8f93\u5165\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\u3002\u76f8\u53cd\u7684\uff0c\u5982\u679ctrack_running_stats=False\u90a3\u4e48\u5c31\u53ea\u662f\u8ba1\u7b97\u5f53\u524d\u8f93\u5165\u7684batch\u7684\u7edf\u8ba1\u7279\u6027\u4e2d\u7684\u5747\u503c\u548c\u65b9\u5dee\u4e86\u3002\u5f53\u5728\u63a8\u7406\u9636\u6bb5\u7684\u65f6\u5019\uff0c\u5982\u679ctrack_running_stats=False\uff0c\u6b64\u65f6\u5982\u679cbatch_size\u6bd4\u8f83\u5c0f\uff0c\u90a3\u4e48\u5176\u7edf\u8ba1\u7279\u6027\u5c31\u4f1a\u548c\u5168\u5c40\u7edf\u8ba1\u7279\u6027\u6709\u7740\u8f83\u5927\u504f\u5dee\uff0c\u53ef\u80fd\u5bfc\u81f4\u7cdf\u7cd5\u7684\u6548\u679c\u3002 ) # \u6c60\u5316\u5c42,\u8f93\u5165\u7684shape=(N,C,H,W) \u8f93\u51fa\u76f8\u540cshape torch . nn . MaxPool2d ( kernel_size , # max pooling \u7684\u7a97\u53e3\u5927\u5c0f stride = None , # \u79fb\u52a8\u6b65\u957f\uff0c\u9ed8\u8ba4\u662fkernel_size padding = 0 , # \u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u586b\u51450\u7684\u5c42\u6570 dilation = 1 , # \u63a7\u5236\u7a97\u53e3\u4e2d\u5143\u7d20\u6b65\u5e45 return_indices = False , # True,\u4f1a\u8fd4\u56de\u8f93\u51fa\u6700\u5927\u503c\u7684\u5e8f\u53f7\uff0c\u5bf9\u4e8e\u4e0a\u91c7\u6837\u64cd\u4f5c\u4f1a\u6709\u5e2e\u52a9 ceil_mode = False # \u5982\u679c\u7b49\u4e8eTrue\uff0c\u8ba1\u7b97\u8f93\u51fa\u4fe1\u53f7\u5927\u5c0f\u7684\u65f6\u5019\uff0c\u4f1a\u4f7f\u7528\u5411\u4e0a\u53d6\u6574\uff0c\u4ee3\u66ff\u9ed8\u8ba4\u7684\u5411\u4e0b\u53d6\u6574\u7684\u64cd\u4f5c ) torch . nn . AvgPool2d ( kernel_size , # \u6c60\u5316\u7a97\u53e3\u5927\u5c0f stride = None , # \u79fb\u52a8\u6b65\u957f padding = 0 , # \u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570 dilation = 1 , # \u4e00\u4e2a\u63a7\u5236\u7a97\u53e3\u4e2d\u5143\u7d20\u6b65\u5e45\u7684\u53c2\u6570 ceil_mode = False , count_include_pad = True ) # \u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42 torch . nn . AdaptiveMaxPool2d ( output_size , # \u8f93\u51fa\u5c3a\u5bf8\uff0c\u53ef\u4ee5\u7528\uff08H,W\uff09\u8868\u793aH*W\u7684\u8f93\u51fa\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6570\u5b57H\u8868\u793aH*H\u5927\u5c0f\u7684\u8f93\u51fa return_indices = False ) # \u5982\u679c\u8bbe\u7f6e\u4e3aTrue\uff0c\u4f1a\u8fd4\u56de\u8f93\u51fa\u7684\u7d22\u5f15 # \u56fe\u7247\u4e0a\u91c7\u6837 torch . nn . functional . interpolate ( input , # \u8f93\u5165 size = None , scale_factor = None , # \u653e\u5927\u7684\u500d\u6570 mode = 'nearest' , # \"nearest\"/\"area\"/\"linear\" align_corners = None , ) # \u8f6c\u7f6e\u5377\u79ef # \u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\u8f93\u5165\u8f93\u51fa\u7684\u5c3a\u5bf8\u7684\u516c\u5f0f\u5982\u4e0b:output = (input-1)*stride+outputpadding-2*padding+kernelsize torch . nn . ConvTranspose2d ( in_channels , # int out_channels , # int kernel_size , # int or tuple stride = 1 , # int or tuple,\u5c06\u8981\u8f93\u5165\u6269\u5927\u7684\u500d\u6570 padding = 0 , # int or tuple\uff0c\u8f93\u5165\u7684\u6bcf\u4e00\u6761\u8fb9\u8865\u51450\u7684\u5c42\u6570\uff0c\u9ad8\u5bbd\u90fd\u589e\u52a02*padding output_padding = 0 , # int or tuple\uff0c\u8f93\u51fa\u8fb9\u8865\u51450\u7684\u5c42\u6570\uff0c\u9ad8\u5bbd\u90fd\u589e\u52a0padding groups = 1 , # int \u4ece\u8f93\u5165\u901a\u9053\u5230\u8f93\u51fa\u901a\u9053\u7684\u963b\u585e\u8fde\u63a5\u6570 bias = True , # bool dilation = 1 , # int or tuple,\u5377\u79ef\u6838\u5143\u7d20\u4e4b\u95f4\u7684\u95f4\u8ddd padding_mode = 'zeros' , ) # \u5168\u8fde\u63a5\u5c42 torch . nn . Linear ( in_features , out_features , bias = True ) # Dropout,\u4ee5\u4e00\u5b9a\u7684\u6982\u7387\u95ed\u5408\u795e\u7ecf\u5143 torch . nn . Dropout ( p = 0.5 , inplace = False ) # \u6fc0\u6d3b\u51fd\u6570 torch . nn . Sigmoid () torch . nn . Tanh () torch . nn . Softmax () # ReLU\u6fc0\u6d3b:inplace\u5982\u679c\u8bbe\u4e3aTrue\uff0c\u5b83\u4f1a\u628a\u8f93\u51fa\u76f4\u63a5\u8986\u76d6\u5230\u8f93\u5165\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5185\u5b58/\u663e\u5b58 torch . nn . ReLU ( inplace ) # inplace\u9ed8\u8ba4\u4e3aFalse,ReLU\u51fd\u6570\u6709\u4e2ainplace\u53c2\u6570\uff0c\u5982\u679c\u8bbe\u4e3aTrue,\u5b83\u4f1a\u628a\u8f93\u51fa\u76f4\u63a5\u8986\u76d6\u5230\u8f93\u5165\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u8282\u7701\u5185\u53cd\u5411\u4f20\u64ad\u7684\u68af\u5ea6\u3002\u4f46\u662f\u53ea\u6709\u5c11\u6570\u7684autograd # f(x) = max(0,x)+negative_slope*min(0,x) negative_slope\uff1a\u63a7\u5236\u8d1f\u659c\u7387\u7684\u89d2\u5ea6 torch . nn . LeakyReLU ( negative_slope = 0.01 , inplace = False ) torch . nn . ReLU6 ( inplace ) #ReLU6(x) = min(max(0,x), 6) torch . nn . Threshold ( threshold , value , inplace = False ) #\u9608\u503c\u3002\u8f93\u5165\u503c\u5c0f\u4e8e\u9608\u503c\u5219\u4f1a\u88abvalue\u4ee3\u66ff","title":"Pytorch\u795e\u7ecf\u7f51\u7edc\u6a21\u5757"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_2","text":"# \u642d\u5efa\u7f51\u7edc\u524d\u5fc5\u987b\u5148\u4ecb\u7ecd\u4e00\u4e0bpytorch\u7684\u521d\u59cb\u5316 from torch.nn import init torch . nn . init . xavier_uniform ( seq_net [ 0 ] . weight ) # Xavier \u521d\u59cb\u5316\u65b9\u6cd5 import torch.nn as nn from torch.nn import functional as F # \u65b9\u6cd5\u4e00 class Net ( nn . Module ): # \u7ee7\u627fnn.Module def __init__ ( self ): super ( Net , self ) . __init__ () self . conv1 = nn . Conv2d ( 3 , 6 , 5 ) # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b self . conv2 = nn . Conv2d ( 6 , 16 , 5 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) # \u4fee\u6539\u521d\u59cb\u5316 for m in self . modules (): if isinstance ( m , torch . nn . Conv2d ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () elif isinstance ( m , torch . nn . Linear ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () def forward ( self , x ): # \u524d\u9879\u4f20\u64ad\u51fd\u6570\uff0cbackward\u51fd\u6570\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 x = F . pool ( F . relu ( self . conv1 ( x )), 2 ) x = F . pool ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , 16 * 5 * 5 ) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x # \u65b9\u5f0f\u4e8c seq_net = nn . Sequential ( # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b nn . Linear ( 2 , 4 ), nn . Tanh (), nn . Linear ( 4 , 1 ) ) # \u6a21\u578b\u5c42\u7684\u4e00\u4e9b\u5e38\u7528\u53c2\u6570 seq_net [ 0 ] # \u7b2c\u4e00\u5c42\uff0c\u901a\u8fc7\u7d22\u5f15\u8bbf\u95ee\u6bcf\u4e00\u5c42\uff0c\u7528\u5176\u4ed6\u4e24\u79cd\u6709\u540d\u5b57\uff0c\u4e5f\u53ef\u4ee5\u6839\u636e\u540d\u5b57\u53d6 seq_net [ 0 ] . weight # \u7b2c\u4e00\u5c42\u7684\u6743\u91cd\u7684module seq_net [ 0 ] . weight . data # \u7b2c\u4e00\u5c42\u7684\u6743\u91cd seq_net [ 0 ] . bias # \u7b2c\u4e00\u5c42\u7684bias\u7684\u53c2\u6570 # \u65b9\u5f0f\u4e09 net1 = nn . Sequential () net1 . add_module ( 'conv' , nn . Conv2d ( 3 , 3 , 3 )) net1 . add_module ( 'batchnorm' , nn . BatchNorm2d ( 3 )) net1 . add_module ( 'activation_layer' , nn . ReLU ()) # \u65b9\u5f0f\u56db from collections import OrderedDict net3 = nn . Sequential ( OrderedDict ([ ( 'conv1' , nn . Conv2d ( 3 , 3 , 3 )), ( 'bn1' , nn . BatchNorm2d ( 3 )), ( 'relu1' , nn . ReLU ()) ])) # 1.\u904d\u5386\u6bcf\u4e00\u5c42,net._modules.items() net = Net () for name , layer in net . _modules . items (): print ( name , layer ) # conv1 Conv2d(3,6,kernel_size=(5,5),stride=(1,1)) net . conv1 # \u76f4\u63a5\u901a\u8fc7\u540d\u5b57\u8bbf\u95ee\u67d0\u5c42 net . conv1 . weight #\u6253\u5370\u8be5\u5c42\u6743\u91cdmodule\uff0ctorch.nn.parameter.Parameter\u5bf9\u8c61 net . conv1 . weight . data # \u83b7\u53d6\u8be5\u5c42\u7684\u6743\u91cd\u503c net . conv1 . weight . grad # \u68af\u5ea6 net . conv1 . bias # \u6253\u5370\u8be5\u5c42\u504f\u7f6e # 3.\u9644\u52a0\u63d0\u53d6\u4fe1\u606f(\u53ef\u4ee5\u770b\u770b) # 3.1 net.modules() & net.named_modules() \u8fd4\u56de\u7684\u662f\u6240\u6709\u7684\u5143\u7d20\uff0c\u5305\u62ec\u4e0d\u540c\u7ea7\u522b\u7684\u5b50\u5143\u7d20\uff0cmodel->\u7b2c\u4e00\u5c42\u7531\u6d45\u5165\u6df1\u9010\u5c42\u904d\u5386->\u7b2c\u4e8c\u5c42\u7531\u6d45\u5165\u6df1\u9010\u5c42\u904d\u5386->...->\u6700\u540e\u4e00\u5c42\u7684\u5916\u5c42->...->\u6700\u540e\u4e00\u5c42\u7684\u6700\u91cc\u9762\u4e00\u5c42\u3002 # \u5e38\u7528\u4f5c\u4e0b\u9762\u7684\u7ed3\u6784 for m in model . modules (): if isinstance ( m , nn . Conv2d ) or isinstance ( m , nn . Linear ): pass # 3.2 net.children() & net.named_children() \u8fd4\u56de\u7684\u662f\u6700\u5916\u5c42\u7684\u5143\u7d20 # 3.3.\u6a21\u578b\u7684\u4e00\u4e9b\u5e38\u7528\u53c2\u6570 model . parameters () # \u83b7\u5f97\u6a21\u578b\u7684\u53c2\u6570\uff0c\u8fd9\u6837\u5728 torch.optim.SGD(param,0.1) \u5c31\u53ef\u4ee5\u7528\u4e86,\u5faa\u73af\u904d\u5386\u7684\u8bdd\u6bcf\u4e2a\u53c2\u6570\u5176\u5b9e\u5c31\u662f net.conv1.weight # for name,parameters in net.named_parameters(): return \u540d\u5b57+\u53c2\u6570 model . named_parameters () # \u53ef\u540c\u65f6\u8fd4\u56de\u53ef\u5b66\u4e60\u7684\u53c2\u6570\u53ca\u540d\u79f0\u3002\u4f8b: conv1.weight:\u53c2\u6570 model . zero_grad () # \u6240\u6709\u53c2\u6570\u7684\u68af\u5ea6\u6e05\u96f6 # 4.\u8bbf\u95ee\u6bcf\u4e00\u5c42\u7684\u5404\u4e2a\u5c5e\u6027\uff0c\u5305\u62ecbatchnorm\u7684running_mean/bn.running_var # \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u4e00\u822c\u662f\u5b58\u5230.pth\u6a21\u578b\u4e2d\u7684\u6570\u636e for k , v in net . state_dict () . items (): print ( k , v . shape ) # net.named_parames() \u53ea\u8bbf\u95eeweight/bias\uff0cbatchnorm\u7684runing_xx\u4e0d\u80fd # 5.ModuleList:\u53ef\u4ee5\u50cf\u7528list\u4e00\u6837\u4f7f\u7528\u5b83\uff0c\u4f46\u4e0d\u80fd\u76f4\u63a5\u628a\u8f93\u5165\u4f20\u7ed9ModuleList # \u4e3a\u4ec0\u4e48\u4e0d\u76f4\u63a5\u7528List\u5462\uff0c\u5e72\u561b\u591a\u6b64\u4e00\u4e3e\u5462\u8fd9\u662f\u56e0\u4e3aModuleList\u662fModule\u7684\u5b50\u7c7b\uff0c\u5f53\u5728Module\u4e2d\u4f7f\u7528\u5b83\u7684\u65f6\u5019\uff0c\u5c31\u80fd\u81ea\u52a8\u8bc6\u522b\u4e3a\u5b50module\u3002 modellist = nn . ModuleList ([ nn . Linear ( 3 , 4 ), nn . ReLU (), nn . Linear ( 4 , 2 ) ]) # output = modelist(input) \u4f1a\u62a5\u9519,\u56e0\u4e3amodellist\u6ca1\u6709\u5b9e\u73b0forward\u65b9\u6cd5 # \u53ef\u4ee5\u8fd9\u6837\u4f7f\u7528 input = t . randn ( 1 , 3 ) for model in modellist : input = model ( input ) # 6.ParameterList,\u7c7b\u4f3cModuleList self . params = nn . ParameterList ([ nn . Parameter ( torch . randn ( 10 , 10 )) for i in range ( 10 )])","title":"Pytorch\u642d\u5efa\u7f51\u7edc"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_3","text":"from torch.nn import init import torch.nn as nn from torch.nn import functional as F # \u65b9\u5f0f\u4e00\uff0cmodel.apply(func_name)\uff1aapply\u51fd\u6570\u53ef\u4ee5\u4e0d\u65ad\u904d\u5386model\u7684\u5404\u4e2a\u6a21\u5757\u3002\u5b9e\u9645\u4e0a\u5176\u4f7f\u7528\u7684\u662f\u6df1\u5ea6\u4f18\u5148\u7b97\u6cd5 class Net ( nn . Module ): # \u7ee7\u627fnn.Module def __init__ ( self ): super ( Net , self ) . __init__ () self . conv1 = nn . Conv2d ( 3 , 6 , 5 ) # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b self . conv2 = nn . Conv2d ( 6 , 16 , 5 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) def forward ( self , x ): # \u524d\u9879\u4f20\u64ad\u51fd\u6570\uff0cbackward\u51fd\u6570\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 x = F . pool ( F . relu ( self . conv1 ( x )), 2 ) x = F . pool ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , 16 * 5 * 5 ) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x # 1. \u6839\u636e\u7f51\u7edc\u5c42\u7684\u4e0d\u540c\u5b9a\u4e49\u4e0d\u540c\u7684\u521d\u59cb\u5316\u65b9\u5f0f def weight_init ( m ): if isinstance ( m , nn . Linear ): nn . init . xavier_normal_ ( m . weight ) nn . init . constant_ ( m . bias , 0 ) # \u4e5f\u53ef\u4ee5\u5224\u65ad\u662f\u5426\u4e3aconv2d\uff0c\u4f7f\u7528\u76f8\u5e94\u7684\u521d\u59cb\u5316\u65b9\u5f0f elif isinstance ( m , nn . Conv2d ): nn . init . kaiming_normal_ ( m . weight , mode = 'fan_out' , nonlinearity = 'relu' ) # \u662f\u5426\u4e3a\u6279\u5f52\u4e00\u5316\u5c42 elif isinstance ( m , nn . BatchNorm2d ): nn . init . constant_ ( m . weight , 1 ) nn . init . constant_ ( m . bias , 0 ) # 2. \u521d\u59cb\u5316\u7f51\u7edc\u7ed3\u6784 model = Net ( in_dim , n_hidden_1 , n_hidden_2 , out_dim ) # 3. \u5c06weight_init\u5e94\u7528\u5728\u5b50\u6a21\u5757\u4e0a model . apply ( weight_init ) # \u65b9\u5f0f\u4e8c\uff0c\u5229\u7528self.modules()\u6765\u8fdb\u884c\u5faa\u73af class Net ( nn . Module ): # \u7ee7\u627fnn.Module def __init__ ( self ): super ( Net , self ) . __init__ () self . conv1 = nn . Conv2d ( 3 , 6 , 5 ) # \u91cc\u9762\u5fc5\u987b\u662f\u4e2a\u7c7b self . conv2 = nn . Conv2d ( 6 , 16 , 5 ) self . fc1 = nn . Linear ( 16 * 5 * 5 , 120 ) self . fc2 = nn . Linear ( 120 , 84 ) self . fc3 = nn . Linear ( 84 , 10 ) # \u4fee\u6539\u521d\u59cb\u5316 for m in self . modules (): if isinstance ( m , torch . nn . Conv2d ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () elif isinstance ( m , torch . nn . Linear ): nn . init . kaiming_normal_ ( m . weight . detach ()) m . bias . detach () . zero_ () def forward ( self , x ): # \u524d\u9879\u4f20\u64ad\u51fd\u6570\uff0cbackward\u51fd\u6570\u5c31\u4f1a\u81ea\u52a8\u8c03\u7528 x = F . pool ( F . relu ( self . conv1 ( x )), 2 ) x = F . pool ( F . relu ( self . conv2 ( x )), 2 ) x = x . view ( - 1 , 16 * 5 * 5 ) x = F . relu ( self . fc1 ( x )) x = F . relu ( self . fc2 ( x )) x = self . fc3 ( x ) return x","title":"Pytorch\u521d\u59cb\u5316\u7684\u4e24\u79cd\u65b9\u5f0f"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorchhook","text":"\u539f\u6587\u535a\u5ba2\u94fe\u63a5: link1 | link2 torch.autograd.Variable.register_hook (torch.tensor.register_hook\uff09 torch.nn.Module.register_backward_hook (Python method, in torch.nn) torch.nn.Module.register_forward_hook \u7b2c\u4e00\u4e2a\u662fregister_hook\uff0c\u662f\u9488\u5bf9Variable\u5bf9\u8c61\u7684\uff0c\u540e\u9762\u7684\u4e24\u4e2a\uff1aregister_backward_hook\u548cregister_forward_hook\u662f\u9488\u5bf9nn.Module\u8fd9\u4e2a\u5bf9\u8c61\u7684\u3002 \u5229\u7528\u5b83\uff0c\u6211\u4eec\u53ef\u4ee5**\u4e0d\u5fc5\u6539\u53d8\u7f51\u7edc\u8f93\u5165\u8f93\u51fa\u7684\u7ed3\u6784\uff0c\u65b9\u4fbf\u5730\u83b7\u53d6\u3001\u6539\u53d8\u7f51\u7edc\u4e2d\u95f4\u5c42\u53d8\u91cf\u7684\u503c\u548c\u68af\u5ea6** pytorch\u75db\u70b9:\u4e2d\u95f4\u53d8\u91cf\u7684\u91ca\u653e \u5728 PyTorch \u7684\u8ba1\u7b97\u56fe\uff08computation graph\uff09\u4e2d\uff0c \u53ea\u6709\u53f6\u5b50\u7ed3\u70b9\uff08leaf nodes\uff09\u7684\u53d8\u91cf\u4f1a\u4fdd\u7559\u68af\u5ea6 \u3002\u800c\u6240\u6709\u4e2d\u95f4\u53d8\u91cf\u7684\u68af\u5ea6\u53ea\u88ab\u7528\u4e8e\u53cd\u5411\u4f20\u64ad\uff0c\u4e00\u65e6\u5b8c\u6210\u53cd\u5411\u4f20\u64ad\uff0c \u4e2d\u95f4\u53d8\u91cf\u7684\u68af\u5ea6\u5c31\u5c06\u81ea\u52a8\u91ca\u653e \uff0c\u4ece\u800c\u8282\u7ea6\u5185\u5b58\u3002 # 1.\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u4e2d\u53ea\u4fdd\u5b58\u53f6\u5b50\u8282\u70b9\uff0c\u4e0b\u9762\u8ba1\u7b97\u4e2d\uff0c\u4e5f\u5c31\u662f\u4e2d\u95f4\u53d8\u91cf\u5728\u8ba1\u7b97\u5b8c\u6210\u68af\u5ea6\u540e\u4f1a\u81ea\u52a8\u91ca\u653e\u4ee5\u8282\u7701\u7a7a\u95f4\uff0c\u6240\u4ee5\u4e0b\u9762\u4ee3\u7801\u6211\u4eec\u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u53ea\u5f97\u5230\u4e86z\u5bf9x\u7684\u68af\u5ea6\u3002 In [ 2 ]: import torch In [ 3 ]: x = torch . tensor ([ 1 , 2 ], dtype = torch . float32 , requires_grad = True ) # \u53ea\u8981\u6709\u4e00\u4e2atersor\u8bbe\u4e3aTrue,\u90a3\u4e48\u63a5\u4e0b\u6765\u7684\u8ba1\u7b97\u4e2d\u6240\u6709\u76f8\u5173\u7684tensor\u90fd\u4f1a\u652f\u6301\u81ea\u52a8\u6c42\u5bfc\u6c42\u68af\u5ea6\u3002 In [ 4 ]: y = x * 2 # \u4e2d\u95f4\u53d8\u91cfy In [ 5 ]: z = torch . mean ( y ) In [ 7 ]: z . backward () In [ 8 ]: x . grad # tensor([ 1., 1.]) In [ 9 ]: y . grad # None \u5e94\u8be5\u4e3a(0.5,0.5) In [ 10 ]: z . grad # None \u5e94\u8be5\u4e3a1 # 2.\u5982\u679c\u60f3\u83b7\u5f97z\u5bf9y\u7684\u68af\u5ea6\uff0c\u89e3\u51b3\u65b9\u6848\u5c31\u662fhook\uff0c\u94a9\u5b50\u51fd\u6570:register_hook\u7684\u4f5c\u7528\u662f\uff0c\u5f53\u53cd\u4f20\u65f6\uff0c\u9664\u4e86\u5b8c\u6210\u539f\u6709\u7684\u53cd\u4f20\uff0c\u989d\u5916\u591a\u5b8c\u6210\u4e00\u4e9b\u4efb\u52a1\u3002\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u4e2d\u95f4\u53d8\u91cf\u7684hook\uff0c\u5c06\u5b83\u7684grad\u503c\u6253\u5370\u51fa\u6765\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u5168\u5c40\u5217\u8868\uff0c\u5c06\u6bcf\u6b21\u7684grad\u503c\u6dfb\u52a0\u5230\u91cc\u9762\u53bb\u3002 # 2.1 register_hook(hook_fun):\u8fd9\u4e2a\u51fd\u6570\u5c5e\u4e8etorch.tensor\u7c7b,\u68af\u5ea6\u8ba1\u7b97\u65f6\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u53c2\u6570\u662f\u4e00\u4e2a\u51fd\u6570 # hook_fun\u51fd\u6570\u683c\u5f0f\u662f\uff1adef hook_fun(grad): return Tensor/None,\u6211\u4eec\u53ef\u4ee5\u6539\u53d8\u8fd9\u4e2ahook\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u4f46\u662f\u4e0d\u80fd\u6539\u53d8\u5176\u53c2\u6570\u3002 import torch grad_list = [] def print_grad ( grad ): print ( \"y_grad:\" , grad ) grad_list . append ( grad ) return grad_list In [ 3 ]: x = torch . tensor ([ 1 , 2 ], dtype = torch . float32 , requires_grad = True ) In [ 4 ]: y = x * 2 In [ 5 ]: y . requires_grad # True In [ 6 ]: y . register_hook ( print_grad ) In [ 7 ]: z = torch . mean ( y ) In [ 8 ]: z . backward () # \u6253\u5370\u51fa y_grad:tensor([ 0.5000, 0.5000]),\u8bc1\u660ey\u7684hook\u51fd\u6570\u6267\u884c\u4e86 Hook for Modules register_forward_hook \u548c register_backward_hook \uff0c\u5206\u522b\u7528\u6765\u83b7\u53d6\u6b63/\u53cd\u5411\u4f20\u64ad\u65f6\uff0c\u4e2d\u95f4\u5c42\u6a21\u5757\u8f93\u5165\u548c\u8f93\u51fa\u7684 feature/gradient \uff0c\u5927\u5927\u964d\u4f4e\u4e86\u83b7\u53d6\u6a21\u578b\u5185\u90e8\u4fe1\u606f\u6d41\u7684\u96be\u5ea6\u3002 register_forward_hook register_forward_hook \u7684\u4f5c\u7528\u662f**\u83b7\u53d6\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5404\u4e2a\u7f51\u7edc\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa**\uff0c\u5bf9\u4e8e\u6a21\u5757 module \uff0c\u5176\u4f7f\u7528\u65b9\u5f0f\u4e3a\uff1a module.register_forward_hook(hook_fn) \u2192 hook_fn(module, input, output)\uff1a1.2\u7248\u672c\u5f00\u59cb\u6709\u8fd4\u56de\u503c\u4e86\uff0c\u53ef\u4ee5\u4fee\u6539\u7f51\u7edc\u6a21\u5757\u7684\u8f93\u51fa # xxx->model # \u5168\u5c40\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u4e2d\u95f4\u5c42\u7684 feature total_feat_out = [] total_feat_in = [] def hook_fn_forward ( m , input , output ): print ( \"model module:\" , m ) total_feat_out . append ( output ) total_feat_in . append ( input ) for name , module in model . named_children (): module . register_forward_hook ( hook_fn_forward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa x = torch . Tensor ([[ 1.0 , 1.0 , 1.0 ]]) . requires_grad_ () o = model ( x ) o . backward () # \u8fd9\u6837\u8fd0\u884c\u8fc7\u540e\u5c31\u80fd\u6253\u5370\u5176\u8f93\u5165\u548c\u8f93\u51fa\u4e86\uff0c\u5176\u5b9e\u7ecf\u8fc7\u524d\u5411\u4f20\u64ad\u540e\u5c31\u4f1a\u8f93\u51fa\u7ed3\u679c\u4e86 register backward hook register_backward_hook \u7684\u4f5c\u7528\u662f\u83b7\u53d6\u795e\u7ecf\u7f51\u7edc\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5404\u4e2a\u6a21\u5757**\u8f93\u5165\u7aef\u548c\u8f93\u51fa\u7aef\u7684\u68af\u5ea6\u503c**\u3002\u5bf9\u4e8e\u6a21\u5757 module\uff0c\u5176\u4f7f\u7528\u65b9\u5f0f\u4e3a\uff1a module.register_backward_hook(hook_fn)-->hook_fn(module, grad_input, grad_output) -> Tensor or None hook_fn \uff1a\u8f93\u5165\u53d8\u91cf\u5206\u522b\u4e3a\uff1a\u6a21\u5757\uff0c\u6a21\u5757\u8f93\u5165\u7aef\u7684\u68af\u5ea6\uff0c\u6a21\u5757\u8f93\u51fa\u7aef\u7684\u68af\u5ea6\u3002\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u7684**\u8f93\u5165\u7aef**\u548c**\u8f93\u51fa\u7aef**\uff0c\u662f\u7ad9\u5728\u524d\u5411\u4f20\u64ad\u7684\u89d2\u5ea6\u7684\uff0c\u800c\u4e0d\u662f\u53cd\u5411\u4f20\u64ad\u7684\u89d2\u5ea6\u3002\u4f8b\u5982\u7ebf\u6027\u6a21\u5757\uff1a o=W*x+b \uff0c\u5176\u8f93\u5165\u7aef\u4e3a W\uff0cx \u548c b\uff0c\u8f93\u51fa\u7aef\u4e3a o\u3002 \u5982\u679c\u6a21\u5757\u6709\u591a\u4e2a\u8f93\u5165\u6216\u8005\u8f93\u51fa\u7684\u8bdd\uff0c grad_input \u548c grad_output \u53ef\u4ee5\u662f tuple \u7c7b\u578b\u3002\u5bf9\u4e8e\u7ebf\u6027\u6a21\u5757\uff1a o=W*x+b \uff0c\u5b83\u7684\u8f93\u5165\u7aef\u5305\u62ec\u4e86W\u3001x \u548c b \u4e09\u90e8\u5206\uff0c\u56e0\u6b64 grad_input \u5c31\u662f\u4e00\u4e2a\u5305\u542b\u4e09\u4e2a\u5143\u7d20\u7684 tuple\uff0c\u4f8b\u5982: \u5728\u5377\u79ef\u5c42\u4e2d\uff0c bias \u7684\u68af\u5ea6\u4f4d\u4e8e tuple \u7684\u672b\u5c3e\uff1a grad_input = (\u5bf9 feature \u7684\u5bfc\u6570\uff0c\u5bf9\u6743\u91cd W \u7684\u5bfc\u6570\uff0c\u5bf9 bias \u7684\u5bfc\u6570) \u5728\u5168\u8fde\u63a5\u5c42\u4e2d\uff0c bias \u7684\u68af\u5ea6\u4f4d\u4e8e tuple \u7684\u5f00\u5934\uff1a grad_input =(\u5bf9 bias \u7684\u5bfc\u6570\uff0c\u5bf9 feature \u7684\u5bfc\u6570\uff0c\u5bf9 W \u7684\u5bfc\u6570) \u5728 forward hook \u4e2d\uff0c input \u662f x \uff0c\u800c\u4e0d\u5305\u62ec W \u548c b \u3002\u8fd4\u56de Tensor \u6216\u8005 None \uff0c backward hook \u51fd\u6570\u4e0d\u80fd\u76f4\u63a5\u6539\u53d8\u5b83\u7684\u8f93\u5165\u53d8\u91cf\uff0c\u4f46\u662f\u53ef\u4ee5\u8fd4\u56de\u65b0\u7684 grad_input \uff0c\u53cd\u5411\u4f20\u64ad\u5230\u5b83\u4e0a\u4e00\u4e2a\u6a21\u5757\u3002 # xxx->model # \u5168\u5c40\u53d8\u91cf\uff0c\u7528\u4e8e\u5b58\u50a8\u4e2d\u95f4\u5c42\u7684 feature total_grad_out = [] total_grad_in = [] def hook_fn_backward ( m , grad_input , grad_output ): print ( \"model module:\" , m ) total_grad_in . append ( grad_input ) total_grad_out . append ( grad_output ) for name , module in model . named_children (): module . register_backward_hook ( hook_fn_backward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u68af\u5ea6\u8f93\u5165\u548c\u8f93\u51fa # \u8fd9\u91cc\u7684 requires_grad \u5f88\u91cd\u8981\uff0c\u5982\u679c\u4e0d\u52a0\uff0cbackward hook \u6267\u884c\u5230\u7b2c\u4e00\u5c42\uff0c\u5bf9 x \u7684\u5bfc\u6570\u5c06\u4e3a None # \u6b64\u5916\u518d\u5f3a\u8c03\u4e00\u904d x \u7684\u7ef4\u5ea6\uff0c\u4e00\u5b9a\u4e0d\u80fd\u5199\u6210 torch.Tensor([1.0, 1.0, 1.0]).requires_grad_() # \u5426\u5219 backward hook \u4f1a\u51fa\u95ee\u9898\u3002 x = torch . Tensor ([[ 1.0 , 1.0 , 1.0 ]]) . requires_grad_ () x = torch . randn ( input_shape ) o = model ( x ) o . backward () # \u8fd9\u6837\u8fd0\u884c\u8fc7\u540e\u5c31\u80fd\u6253\u5370\u5176\u8f93\u5165\u548c\u8f93\u51fa\u4e86\uff0c\u5176\u5b9e\u7ecf\u8fc7\u524d\u5411\u4f20\u64ad\u540e\u5c31\u4f1a\u8f93\u51fa\u7ed3\u679c\u4e86 register_backward_hook \u53ea\u80fd\u64cd\u4f5c\u7b80\u5355\u6a21\u5757\uff0c\u800c\u4e0d\u80fd\u64cd\u4f5c\u5305\u542b\u591a\u4e2a\u5b50\u6a21\u5757\u7684\u590d\u6742\u6a21\u5757\u3002 \u5982\u679c\u5bf9\u590d\u6742\u6a21\u5757\u7528\u4e86 backward hook\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u80fd\u5f97\u5230\u8be5\u6a21\u5757\u6700\u540e\u4e00\u6b21\u7b80\u5355\u64cd\u4f5c\u7684\u68af\u5ea6\u4fe1\u606f\u3002\u5bf9\u4e8e\u4e0a\u9762\u7684\u4ee3\u7801\u7a0d\u4f5c\u4fee\u6539\uff0c\u4e0d\u518d\u904d\u5386\u5404\u4e2a\u5b50\u6a21\u5757\uff0c\u800c\u662f\u628a model \u6574\u4f53\u7ed1\u5728\u4e00\u4e2a hook_fn_backward \u4e0a\uff1a model = Model () model . register_backward_hook ( hook_fn_backward ) # out\uff1a\u53d1\u73b0\u7a0b\u5e8f\u53ea\u8f93\u51fa\u4e86fc2\u7684\u68af\u5ea6 Model ( ( fc1 ): Linear ( in_features = 3 , out_features = 4 , bias = True ) ( relu1 ): ReLU () ( fc2 ): Linear ( in_features = 4 , out_features = 1 , bias = True ) ) grad_output ( tensor ([[ 1. ]]),) grad_input ( tensor ([ 1. ]), tensor ([[ 1. , 2. , 3. , 4. ]]), tensor ([[ 7. ], [ 0. ], [ 27. ], [ 0. ]]))","title":"Pytorch\u7684\u94a9\u5b50\u51fd\u6570hook"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorchfunction","text":"**\u65b9\u5f0f\u4e00\uff1a**\u901a\u8fc7\u7ee7\u627f torch.nn.Module \u7c7b\u6765\u5b9e\u73b0\u62d3\u5c55\u3002\u53ea\u9700\u91cd\u65b0\u5b9e\u73b0 __init__ \u548c forward \u51fd\u6570\u3002 Module\uff1a\u53ea\u9700\u5b9a\u4e49 __init__ \u548c forward \uff0c\u800c backward \u7684\u8ba1\u7b97\u7531\u81ea\u52a8\u6c42\u5bfc\u673a\u5236\u6784\u6210 \u65b9\u5f0f\u4e8c \uff1a\u901a\u8fc7\u7ee7\u627f torch.autograd.Function \uff0c\u9664\u4e86\u8981\u5b9e\u73b0 __init__ \u548c forward \u51fd\u6570\uff0c\u8fd8\u8981\u5b9e\u73b0 backward \u51fd\u6570;\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u6c42\u5bfc\u89c4\u5219(\u4f8b\u5982\u4e8c\u503c\u5316\u7f51\u7edc\u6709\u4e9b\u4e0d\u53ef\u5bfc\u51fd\u6570)\uff0c\u5c31\u8981\u7528\u7740\u4e2a\u65b9\u6cd5. Function \u9700\u8981\u5b9a\u4e49\u4e09\u4e2a\u65b9\u6cd5\uff1a __init__ , forward , backward \uff08\u9700\u8981\u81ea\u5df1\u5199\u6c42\u5bfc\u516c\u5f0f\uff09\uff1b # 1.\u5b9a\u4e49\u4e00\u4e2aReLU\u7c7b\u522b import torch from torch.autograd import Variable class MyReLU ( torch . autograd . Function ): # \u5728forward\u4e2d\uff0c\u9700\u8981\u5b9a\u4e49MyReLU\u8fd9\u4e2a\u8fd0\u7b97\u7684forward\u8ba1\u7b97\u8fc7\u7a0b @staticmethod def forward ( self , input_ ): self . save_for_backward ( input_ ) # \u5c06\u8f93\u5165\u4fdd\u5b58\u8d77\u6765\uff0c\u5728backward\u65f6\u4f7f\u7528 output = input_ . clamp ( min = 0 ) # relu\u5c31\u662f\u622a\u65ad\u8d1f\u6570\uff0c\u8ba9\u6240\u6709\u8d1f\u6570\u7b49\u4e8e0 return output @staticmethod def backward ( self , grad_output ): # \u6839\u636eBP\u7b97\u6cd5\u7684\u63a8\u5bfc\uff08\u94fe\u5f0f\u6cd5\u5219\uff09\uff0cdloss / dx = (dloss / doutput) * (doutput / dx) # grad_output\uff1adloss / doutput\u3001 # \u56e0\u6b64\u53ea\u9700\u6c42relu\u7684\u5bfc\u6570\uff0c\u518d\u4e58\u4ee5grad_outpu input_ , = self . saved_tensors grad_input = grad_output . clone () grad_input [ input_ < 0 ] = 0 # \u4e0a\u8bc9\u8ba1\u7b97\u7684\u7ed3\u679c\u5c31\u662f\u5de6\u5f0f\u3002\u5373ReLU\u5728\u53cd\u5411\u4f20\u64ad\u4e2d\u53ef\u4ee5\u770b\u505a\u4e00\u4e2a\u901a\u9053\u9009\u62e9\u51fd\u6570\uff0c\u6240\u6709\u672a\u8fbe\u5230\u9608\u503c\uff08\u6fc0\u6d3b\u503c<0\uff09\u7684\u5355\u5143\u7684\u68af\u5ea6\u90fd\u4e3a0,\u6fc0\u6d3b\u503c>0\u7684\u4e58\u4ee5relu\u7684\u68af\u5ea61 return grad_input # 2.\u9a8c\u8bc1Variable\u4e0eFunction\u7684\u5173\u7cfb from torch.autograd import Variable input_ = Variable ( torch . randn ( 1 )) relu = MyReLU () output_ = relu ( input_ ) # output_.creator==relu,\u8fd9\u4e2arelu\u5bf9\u8c61\u5c06output\u4e0einput\u8fde\u63a5\u8d77\u6765\uff0c\u5f62\u6210\u8ba1\u7b97\u56fe # \u5c01\u88c5\u6210\u4e00\u4e2arelu\u51fd\u6570 def relu ( input_ ): # MyReLU()\u662f\u521b\u5efa\u4e00\u4e2aMyReLU\u5bf9\u8c61\uff0c # Function\u7c7b\u5229\u7528\u4e86Python __call__\u64cd\u4f5c\uff0c\u4f7f\u5f97\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5bf9\u8c61\u8c03\u7528__call__\u5236\u5b9a\u7684\u65b9\u6cd5 # __call__\u6307\u5b9a\u7684\u65b9\u6cd5\u662fforward\uff0c\u56e0\u6b64\u4e0b\u9762\u8fd9\u53e5MyReLU\uff08\uff09\uff08input_\uff09\u76f8\u5f53\u4e8e # return MyReLU().forward(input_) return MyReLU ()( input_ )","title":"Pytorch\u81ea\u5b9a\u4e49\u65b0\u5c42(Function)"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_4","text":"\u5377\u79ef\u53ef\u89c6\u5316-GradCAM-keras/pytorch | caffe\u7248\u672c :caffe\u9ed8\u8ba4\u6ca1\u6709\u635f\u5931\u5c31\u4e0d\u7b97\u68af\u5ea6 \u89e3\u51b3 # github:https://github.com/sksq96/pytorch-summary from torchsummary import summary # input_size \u662f\u6839\u636e\u4f60\u81ea\u5df1\u7684\u7f51\u7edc\u6a21\u578b\u7684\u8f93\u5165\u5c3a\u5bf8\u8fdb\u884c\u8bbe\u7f6e\u3002 summary ( your_model , input_size = ( channels , H , W ))","title":"Pytorch\u67e5\u770b\u6a21\u578b\u7ed3\u6784"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorchlossoptimizerlr_scheduler","text":"# 1.pytorch\u7684loss\u51fd\u6570 \u66f4\u591a\u89c1\u4e0b\u9762 nn . MSELoss () # \u7ebf\u6027\u56de\u5f52\u7684loss,\u5747\u65b9\u8bef\u5dee nn . BCEWithLogitsLoss () # Logistic\u56de\u5f52\u7684\u4e8c\u5206\u7c7bloss nn . CrossEntropyLoss () # \u7528\u6765\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931 # \u7528\u6cd5 \u5728\u8bad\u7ec3\u4e0a\u8981\u4e24\u6b65 criterion = nn . MSELoss () # \u5b9a\u4e49loss\u5bf9\u8c61 loss = criterion ( y_hat , y_true ) # \u7b2c\u4e00\u6b65\uff0c\u8ba1\u7b97loss loss . backward () # \u7b2c\u4e8c\u6b65 # pytorch\u7684\u4f18\u5316\u5668 torch.optim.+Tab\u952e torch . optim . SGD ([ w , b ], lr = 0.1 ) optimizer . zero_grad () # \u5f52 0 \u68af\u5ea6\uff0c\u5728\u81ea\u52a8\u6c42\u5bfc\u524d optimizer . step () # \u7136\u540e\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570\u6765\u66f4\u65b0\u53c2\u6570\u5c31\u53ef\u4ee5\u4e86 # 2.\u5e38\u7528\u4f18\u5316\u5668 \u66f4\u591a\u89c1\u4e0b\u9762 torch . optim . SGD ( params , lr = 0.1 ) # \u968f\u673a\u68af\u5ea6\u4e0b\u964d torch . optim . SGD ( params , lr = 0.1 , momentum = 0.9 ) # \u52a8\u91cf\u6cd5 torch . optim . Adagrad ( params , lr = 0.1 ) torch . optim . RMSprop ( params , lr = 0.1 , alpha = 0.9 ) torch . optim . Adadelta ( params , rho = 0.9 ) torch . optim . Adam ( params , lr = 0.1 ) # \u7528\u6cd5\u4e3e\u4f8b(\u5728\u8bad\u7ec3\u65f6\u8981\u4e24\u6b65) import torch.optim as optim optimizer = optim . SGD ( net . parameters (), lr = 0.1 ) # \u65b0\u5efa\u4e00\u4e2a\u4f18\u5316\u5668\uff0c\u6307\u5b9a\u8981\u8c03\u6574\u7684\u53c2\u6570\u548c\u5b66\u4e60\u7387 # \u8bad\u7ec3\u8fc7\u7a0b\u4e2d \u68af\u5ea6\u6e05\u96f6(\u4e0enet.zero_grad()\u6548\u679c\u4e00\u6837) optimizer . zero_grad () # \u7b2c\u4e00\u6b65 output = net ( input ) loss = criterion ( output , target ) # \u8ba1\u7b97\u635f\u5931 loss . backward () # \u53cd\u5411\u4f20\u64ad optimizer . step () # \u7b2c\u4e8c\u6b65 \u66f4\u65b0\u53c2\u6570 # \u4f18\u5316\u5668\u666e\u901a\u7528\u6cd5:\u4e00\u4e2a\u53c2\u6570\u7ec4 optimizer = torch . optim . SGD ( net . parameters (), lr = 0.01 , weight_decay = 1e-4 ) # \u4f18\u5316\u5668\u9ad8\u7ea7\u7528\u6cd5:\u4e0d\u540c\u5b50\u7f51\u7edc\u8bbe\u7f6e\u4e0d\u540c\u7684\u5b66\u4e60\u7387\uff0c\u5982\u679c\u5bf9\u67d0\u4e2a\u53c2\u6570\u4e0d\u6307\u5b9a\u5b66\u4e60\u7387\uff0c\u5c31\u4f7f\u7528\u6700\u5916\u5c42\u7684\u9ed8\u8ba4\u5b66\u4e60\u7387 optimizer = optim . SGD ([ # list\u91cc\u9762\u5957dict { 'params' : net . features . parameters ()}, # \u5b66\u4e60\u7387\u4e3a1e-5 { 'params' : net . classifier . parameters (), 'lr' : 1e-2 } ], lr = 1e-5 ) # \u4f18\u5316\u5668\u7684\u4e24\u4e2a\u53c2\u6570 optimizer . defaults # \u5b57\u5178\uff0c\u5b58\u653e\u8fd9\u4e2a\u4f18\u5316\u5668\u7684\u4e00\u4e9b\u521d\u59cb\u53c2\u6570\uff0c\u6709\uff1a'lr', 'betas', 'eps', 'weight_decay', 'amsgrad'\u3002 optimizer . param_groups # \u5217\u8868\uff0c\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u5b57\u5178\uff0c\u6bcf\u4e2a\u5143\u7d20\u5305\u542b\u7684\u5173\u952e\u5b57\u6709\uff1a'params', 'lr', 'betas', 'eps', 'weight_decay', 'amsgrad'\uff0cparams\u7c7b\u662f\u5404\u4e2a\u7f51\u7edc\u7684\u53c2\u6570\u653e\u5728\u4e86\u4e00\u8d77\u3002 optimizer . param_groups [ 0 ][ 'lr' ] # \u83b7\u53d6\u5b66\u4e60\u7387 optimizer . param_groups [ 0 ][ 'lr' ] = le - 5 # \u4fee\u6539\u5b66\u4e60\u7387 # \u4e3a\u4e86\u9632\u6b62\u6709\u591a\u4e2a\u53c2\u6570\u7ec4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u5faa\u73af for param_group in optimizer . param_groups : param_group [ 'lr' ] = 1e-1 # \u7b28\u65b9\u6cd5\u8bbe\u7f6e\u5b66\u4e60\u7387\u8870\u51cf # \u8bbe\u7f6e\u5b66\u4e60\u8870\u51cf\u7387 def set_learning_rate ( optimizer , lr ): for param_group in optimizer . param_groups : param_group [ 'lr' ] = lr # \u4e4b\u540e\u5728epoch\u7684for\u5faa\u73af\u91cc\u53ef\u4ee5\u8c03\u7528\u8be5\u65b9\u6cd5 # \u5047\u8bbe\u8d77\u521d lr = 0.1 for epoch in range ( 30 ): if epoch == 20 : set_learning_rate ( optimizer , 0.01 ) # 3.\u68af\u5ea6\u88c1\u526a outputs = model ( data ) loss = loss_fn ( outputs , target ) optimizer . zero_grad () loss . backward () nn . utils . clip_grad_norm_ ( model . parameters (), max_norm = 20 , norm_type = 2 ) optimizer . step () torch . nn . utils . clip_grad_norm_ ( parameters , # \u4e00\u4e2a\u57fa\u4e8e\u53d8\u91cf\u7684\u8fed\u4ee3\u5668\uff0c\u4f1a\u8fdb\u884c\u68af\u5ea6\u5f52\u4e00\u5316 max_norm , # \u68af\u5ea6\u7684\u6700\u5927\u8303\u6570 norm_type = 2 # \u89c4\u5b9a\u8303\u6570\u7684\u7c7b\u578b\uff0c\u9ed8\u8ba4\u4e3aL2 ) # 4.\u5b66\u4e60\u7387\u8870\u51cf,\u4ee5LambdaLR\u4e3e\u4f8b\u5b50:\u66f4\u65b0\u7b56\u7565\uff0cnew_lr = lr_lambda*init_lr scheduler = torch . optim . lr_scheduler . LambdaLR ( optimizer , # \u5728\u5c06optimizer\u4f20\u7ed9scheduler\u540e\uff0c\u5728shcduler\u7c7b\u7684__init__\u65b9\u6cd5\u4e2d\u4f1a\u7ed9optimizer.param_groups\u5217\u8868\u4e2d\u7684\u90a3\u4e2a\u5143\u7d20\uff08\u5b57\u5178\uff09\u589e\u52a0\u4e00\u4e2akey = \"initial_lr\"\u7684\u5143\u7d20\u8868\u793a\u521d\u59cb\u5b66\u4e60\u7387\uff0c\u7b49\u4e8eoptimizer.defaults['lr']\u3002 lr_lambda , # \u6839\u636eepoch\u8ba1\u7b97\u03bb\u7684\u51fd\u6570\uff1b\u6216\u8005\u662f\u4e00\u4e2alist\u7684\u8fd9\u6837\u7684function\uff0c\u5206\u522b\u8ba1\u7b97\u5404\u4e2aparameter groups\u7684\u5b66\u4e60\u7387\u66f4\u65b0\u7528\u5230\u7684\u03bb\uff1b last_epoch =- 1 # \u6700\u540e\u4e00\u4e2aepoch\u7684index\uff0c\u5982\u679c\u662f\u8bad\u7ec3\u4e86\u5f88\u591a\u4e2aepoch\u540e\u4e2d\u65ad\u4e86\uff0c\u7ee7\u7eed\u8bad\u7ec3\uff0c\u8fd9\u4e2a\u503c\u5c31\u7b49\u4e8e\u52a0\u8f7d\u7684\u6a21\u578b\u7684epoch\u3002\u9ed8\u8ba4\u4e3a-1\u8868\u793a\u4ece\u5934\u5f00\u59cb\u8bad\u7ec3\uff0c\u5373\u4eceepoch=1\u5f00\u59cb\u3002 ) # \u4e3e\u4f8b\u5b50 initial_lr = 0.1 net_1 = model () optimizer_1 = torch . optim . Adam ( net_1 . parameters (), lr = initial_lr ) scheduler_1 = LambdaLR ( optimizer_1 , lr_lambda = lambda epoch : 1 / ( epoch + 1 )) print ( \"\u521d\u59cb\u5316\u7684\u5b66\u4e60\u7387\uff1a\" , optimizer_1 . defaults [ 'lr' ]) for epoch in range ( 1 , 11 ): # train optimizer_1 . zero_grad () optimizer_1 . step () print ( \"\u7b2c %d \u4e2aepoch\u7684\u5b66\u4e60\u7387\uff1a %f \" % ( epoch , optimizer_1 . param_groups [ 0 ][ 'lr' ])) scheduler_1 . step () # \u5b66\u4e60\u7387\u7684\u8c03\u6574\u5e94\u8be5\u653e\u5728optimizer\u66f4\u65b0\u4e4b\u540e,1.1.0\u4e4b\u524d\u7684\u7248\u672c\u662f\u653e\u5728\u4e4b\u524d\u7684 # \u5176\u4ed6\u5b66\u4e60\u7387\u8870\u51cf\u51fd\u6570\u8be6\u89e3:https://blog.csdn.net/qyhaill/article/details/103043637 # \u6bcf\u8fc7step_size\u4e2aepoch\uff0c\u505a\u4e00\u6b21\u66f4\u65b0 class torch . optim . lr_scheduler . StepLR ( optimizer , step_size , gamma = 0.1 , last_epoch =- 1 ) # \u6bcf\u6b21\u9047\u5230milestones\u4e2d\u7684epoch\uff0c\u505a\u4e00\u6b21\u66f4\u65b0 class torch . optim . lr_scheduler . MultiStepLR ( optimizer , milestones , gamma = 0.1 , last_epoch =- 1 ) # \u6bcf\u4e2aepoch\u90fd\u505a\u4e00\u6b21\u66f4\u65b0\uff1a class torch . optim . lr_scheduler . ExponentialLR ( optimizer , gamma , last_epoch =- 1 ) # \u8ba9lr\u968f\u7740epoch\u7684\u53d8\u5316\u56fe\u7c7b\u4f3c\u4e8ecos class torch . optim . lr_scheduler . CosineAnnealingLR ( optimizer , T_max , eta_min = 0 , last_epoch =- 1 ) # \u7ed9\u5b9a\u4e00\u4e2ametric\uff0c\u5f53metric\u505c\u6b62\u4f18\u5316\u65f6\u51cf\u5c0f\u5b66\u4e60\u7387\u3002 class torch . optim . lr_scheduler . ReduceLROnPlateau ( optimizer , mode = 'min' , factor = 0.1 , patience = 10 , verbose = False , threshold = 0.0001 , threshold_mode = 'rel' , cooldown = 0 , min_lr = 0 , eps = 1e-08 ) ... # \u8fd8\u6709\u4e00\u4e9b\uff0c\u4e0d\u4ecb\u7ecd\u4e86","title":"Pytorch\u7684loss\u3001optimizer\u3001\u68af\u5ea6\u88c1\u526a\u3001lr_scheduler"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_5","text":"model = Net () optimizer = torch . optim . Adam ( model . parameters (), lr = 0.1 ) # \u65b9\u5f0f\u4e00(\u4e0d\u63a8\u8350) torch . save ( model , \"model.pth\" ) model = torch . load ( \"model.pth\" ) # cpu->cpu,gpu->gpu\uff0c\u6ce8\u610f\u8fd9\u65f6tensor\u5c5e\u4e8e\u540c\u5757cpu/gpu model = torch . load ( \"model.pth\" , map_location = lambda storage , loc : storage ) # gpu->cpu\u52a0\u8f7d # \u6216\u8005 torch.load('model.pth', map_location='cpu') # pytorch0.4.0\u53ca\u4ee5\u4e0a\u7248\u672c model = torch . load ( 'model.pth' , map_location = lambda storage , loc : storage . cuda ( 1 )) #cpu->gpu model = torch . load ( 'model.pth' , map_location = { 'cuda:1' : 'cuda:0' }) #gpu1->gpu0 # \u65b9\u5f0f\u4e8c(\u63a8\u8350) torch . save ( model . state_dict (), \"model.pth\" ) model . load_state_dict ( torch . load ( 'model.pth' )) # \u65b9\u5f0f\u4e09(\u63a8\u8350)\u5305\u542b\u7684\u4fe1\u606f\u6709\uff0cepochID, state_dict, min loss,optimizer, \u81ea\u5b9a\u4e49\u635f\u5931\u51fd\u6570\u7684\u4e24\u4e2a\u53c2\u6570 torch . save ({ 'epoch' : epochID + 1 , 'state_dict' : model . state_dict (), 'best_loss' : lossMIN , 'optimizer' : optimizer . state_dict (), 'alpha' : loss . alpha , 'gamma' : loss . gamma }, checkpoint_path + '/m-' + launchTimestamp + '-' + str ( \" %.4f \" % lossMIN ) + '.pth.tar' ) # \u52a0\u8f7d def load_checkpoint ( model , checkpoint_PATH , optimizer ): if checkpoint != None : model_CKPT = torch . load ( checkpoint_PATH ) model . load_state_dict ( model_CKPT [ 'state_dict' ]) print ( 'loading checkpoint!' ) optimizer . load_state_dict ( model_CKPT [ 'optimizer' ]) return model , optimizer","title":"Pytorch\u6a21\u578b\u5b58\u50a8"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_6","text":"model.train()\u6307\u5b9a\u5f53\u524d\u6a21\u578bmodel\u4e3a\u8bad\u7ec3\u72b6\u6001,model.eval()\u6307\u5b9a\u5f53\u524d\u6a21\u578b\u4e3a\u6d4b\u8bd5\u72b6\u6001\u3002 train.py import os # os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"0\" from torchvision import transforms from torchvision import datasets from torch.utils.data import DataLoader from torchvision import models from torch.optim import lr_scheduler from torch.utils.tensorboard import SummaryWriter from torch import optim import time import torch import copy import torch.nn as nn from tqdm import tqdm # cfg # traindir = \"data/train\" # validdir = \"data/valid\" traindir = \"/home/cyy/4T/project/roi_delivery/libs/pig_up_down/data/train\" validdir = \"/home/cyy/4T/project/roi_delivery/libs/pig_up_down/data/valid\" # save weights save_weight = \"weights\" os . makedirs ( save_weight , exist_ok = True ) # save log save_log = \"logs\" os . makedirs ( save_log , exist_ok = True ) tb_writer = SummaryWriter ( log_dir = save_log ) # class num class_num = 3 batch_size = 32 device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) # Image transformations normal_val = [ 0.5 , 0.5 , 0.5 ] image_transforms = { # Train uses data augmentation 'train' : transforms . Compose ([ transforms . Resize ( size = 256 ), transforms . RandomApply ([ transforms . RandomRotation ( degrees = 30 ), transforms . ColorJitter ( brightness = 0.1 ), transforms . RandomHorizontalFlip ()], p = 0.5 ), transforms . ToTensor (), transforms . Normalize ( normal_val , normal_val ) # Imagenet standards ]), # Validation does not use augmentation 'valid' : transforms . Compose ([ transforms . Resize ( size = 256 ), transforms . ToTensor (), transforms . Normalize ( normal_val , normal_val ) ]), } # Datasets from folders data = { 'train' : datasets . ImageFolder ( root = traindir , transform = image_transforms [ 'train' ]), 'valid' : datasets . ImageFolder ( root = validdir , transform = image_transforms [ 'valid' ]), } # Dataloader iterators, make sure to shuffle dataloaders = { 'train' : DataLoader ( data [ 'train' ], batch_size = batch_size , shuffle = True ), 'valid' : DataLoader ( data [ 'valid' ], batch_size = batch_size , shuffle = True ) } dataset_sizes = { x : len ( data [ x ]) for x in [ 'train' , 'valid' ]} class_names = data [ 'train' ] . classes print ( dataset_sizes , class_names ) model_ft = models . resnet18 ( pretrained = True ) # \u5c06\u6240\u6709\u7684\u53c2\u6570\u5c42\u8fdb\u884c\u51bb\u7ed3 # for param in model_ft.parameters(): # param.requires_grad = False num_ftrs = model_ft . fc . in_features model_ft . fc = nn . Linear ( num_ftrs , class_num ) model_ft . to ( device ) criterion = nn . CrossEntropyLoss () # Observe that all parameters are being optimized optimizer_ft = optim . SGD ( model_ft . parameters (), lr = 0.001 , momentum = 0.9 ) # Decay LR by a factor of 0.1 every 7 epochs exp_lr_scheduler = lr_scheduler . StepLR ( optimizer_ft , step_size = 7 , gamma = 0.1 ) # train def train_model ( model , criterion , optimizer , scheduler , num_epochs = 10 ): since = time . time () best_model_wts = copy . deepcopy ( model . state_dict ()) best_acc = 0.0 for epoch in range ( num_epochs ): print ( 'Epoch {} / {} ' . format ( epoch , num_epochs - 1 )) print ( '-' * 10 ) # Each epoch has a training and validation phase for phase in [ 'train' , 'valid' ]: if phase == 'train' : model . train () # Set model to training mode else : model . eval () # Set model to evaluate mode running_loss = 0.0 running_corrects = 0 # Iterate over data. for inputs , labels in tqdm ( dataloaders [ phase ], desc = phase ): # print(inputs.shape) # wrap them in Variable inputs = inputs . to ( device ) labels = labels . to ( device ) # zero the parameter gradients optimizer . zero_grad () # forward outputs = model ( inputs ) # print(outputs.data) # print(\"*\"*30) _ , preds = torch . max ( outputs . data , 1 ) loss = criterion ( outputs , labels ) # backward + optimize only if in training phase if phase == 'train' : loss . backward () optimizer . step () scheduler . step () # statistics running_loss += loss . data . item () * inputs . size ( 0 ) running_corrects += torch . sum ( preds == labels . data ) # print(f'Loss:{loss.data.item()*inputs.size(0)}') epoch_loss = running_loss / dataset_sizes [ phase ] epoch_acc = running_corrects . item () / dataset_sizes [ phase ] print ( ' {} Loss: {:.4f} Acc: {:.4f} ' . format ( phase , epoch_loss , epoch_acc )) # deep copy the model if phase == 'valid' and epoch_acc > best_acc : best_acc = epoch_acc best_model_wts = copy . deepcopy ( model . state_dict ()) if phase == \"train\" : tb_writer . add_scalar ( 'train/loss' , epoch_loss , epoch + 1 ) tb_writer . add_scalar ( 'train/acc' , epoch_acc , epoch + 1 ) elif phase == \"valid\" : tb_writer . add_scalar ( 'valid/loss' , epoch_loss , epoch + 1 ) tb_writer . add_scalar ( 'valid/acc' , epoch_acc , epoch + 1 ) print () if epoch % 2 == 0 : torch . save ( model . state_dict (), f \" { save_weight } /model_ { epoch } .pth\" ) time_elapsed = time . time () - since print ( 'Training complete in {:.0f} m {:.0f} s' . format ( time_elapsed // 60 , time_elapsed % 60 )) print ( 'Best val Acc: {:4f} ' . format ( best_acc )) # load best model weights model . load_state_dict ( best_model_wts ) tb_writer . close () return model model_ft = train_model ( model_ft , criterion , optimizer_ft , exp_lr_scheduler , num_epochs = 101 ) torch . save ( model_ft . state_dict (), \"best_model.pth\" ) print ( \"Done!!!\" ) test.py from torchvision import transforms from torchvision import datasets from torch.utils.data import DataLoader from torchvision import models from torch.optim import lr_scheduler from torch import optim import torch import torch.nn as nn from PIL import Image import numpy as np import glob , os , shutil import tqdm device = torch . device ( \"cuda:0\" if torch . cuda . is_available () else \"cpu\" ) def load_model ( model_path , device ): model_ft = models . resnet18 () model_ft . fc = nn . Linear ( model_ft . fc . in_features , 2 ) model_ft . load_state_dict ( torch . load ( model_path )) model_ft . to ( device ) model_ft . eval () return model_ft model_ft = load_model ( \"best_model.pth\" , device ) image_transforms = transforms . Compose ([ transforms . Resize ( size = 256 ), transforms . ToTensor (), transforms . Normalize ([ 0.5 , 0.5 , 0.5 ], [ 0.5 , 0.5 , 0.5 ]) ]) img_path = \"\" frame = Image . open ( img_path ) frame = image_transforms ( frame ) . unsqueeze ( 0 ) frame = frame . to ( device ) output = model_ft ( frame ) # print(output.data) preds = torch . max ( output . data , 1 )[ - 1 ] . item () print ( preds ) \u8bad\u7ec3\u56fe\u7247\u53ef\u89c6\u5316 # \u8bad\u7ec3\u7167\u7247\u7684\u53ef\u89c6\u5316\uff0c\u770b\u770b\u7ecf\u8fc7\u6570\u636e\u589e\u5f3a\u540e\u7684\u7167\u7247\u5230\u5e95\u662f\u5565\u6837\u7684 def img_show ( img , img_nomalize , title = None , figsize = None ): img = img . numpy () . transpose (( 1 , 2 , 0 )) # c,\uff48,w -> h,w,c mean = normalize . mean std = normalize . std img = std * img + mean img = np . clip ( img , 0 , 1 ) # \u622a\u53d6 if figsize is not None : plt . figure ( figsize = figsize ) plt . imshow ( img ) if title is not None : plt . title ( title ) plt . pause ( 0.001 ) # \u7a0d\u505c\u4e00\u4e0b\uff0c\u4fdd\u8bc1\u80fd\u66f4\u65b0 # classes:tensor([1, 1, 1, 0, 1, 0, 0, 0]) inputs , classes = next ( iter ( dataloaders [ 'train' ])) # input.shape:torch.Size([8, 3, 224, 224]) # \u5c06\u82e5\u5e72\u5e45\u56fe\u50cf\u62fc\u6210\u4e00\u4e2a\u56fe\u50cf out = torchvision . utils . make_grid ( inputs ) # out.shape->torch.Size([3, 228, 1810]) img_show ( out , normalize , title = [ class_names [ x ] for x in classes ], figsize = ( 20 , 14 )) \u7f51\u683c\u5c55\u793a\u751f\u6210\u7684\u56fe\u7247 \u4e00\u4e2a\u662fmake_grid\uff0c\u5b83\u80fd\u5c06\u591a\u5f20\u56fe\u7247\u62fc\u63a5\u6210\u4e00\u4e2a\u7f51\u683c\u4e2d\uff1b \u53e6\u4e00\u4e2a\u662fsave_img\uff0c\u5b83\u80fd\u5c06Tensor\u4fdd\u5b58\u6210\u56fe\u7247\u3002 torchvision . utils . utils . make_grid ( tensor , nrow = 8 , padding = 2 , normalize = False , # normalize=True, \u5bf9\u56fe\u50cf\u50cf\u7d20\u5f52\u4e00\u5316 range = None , # range=(min, max)\uff0cmin\u548cmax\u662f\u6570\u5b57\uff0c\u5219min, max\u7528\u6765\u89c4\u8303\u5316image scale_each = False ) # scale_each=True, \u6bcf\u4e2a\u56fe\u7247\u72ec\u7acb\u89c4\u8303\u5316\u3002 from torchvision.utils import make_grid , save_image dataiter = iter ( dataloader ) img = make_grid ( next ( dataiter )[ 0 ], 4 ) # \u62fc\u62104*4\u7f51\u683c\u56fe\u7247\uff0c\u4e14\u4f1a\u8f6c\u6210\uff13\u901a\u9053 to_img ( img ) # \u663e\u793a\u56fe\u7247 save_image ( img , 'a.png' ) Image . open ( 'a.png' ) \u8ba1\u7b97acc+precision+recall # data['label'] and data['prediction'] are groundtruth label and prediction # for each image, respectively. accuracy = np . mean ( data [ 'label' ] == data [ 'prediction' ]) * 100 # Compute recision and recall for each class. for c in range ( len ( num_classes )): tp = np . dot (( data [ 'label' ] == c ) . astype ( int ), ( data [ 'prediction' ] == c ) . astype ( int )) tp_fp = np . sum ( data [ 'prediction' ] == c ) tp_fn = np . sum ( data [ 'label' ] == c ) precision = tp / tp_fp * 100 recall = tp / tp_fn * 100 \u540e\u7eed\u9ad8\u7ea7\u7528\u6cd5 \u51bb\u7ed3\u6240\u6709\u5c42 hook\u51fd\u6570\u8be6\u89e3 # \u5c06\u6240\u6709\u7684\u53c2\u6570\u5c42\u8fdb\u884c\u51bb\u7ed3,\u8fd9\u6837\u5e26\u6765\u4e00\u4e2a\u95ee\u9898:\u6bcf\u6b21\u8fd9\u4e9b\u56fa\u5b9a\u53c2\u6570\u7684\u8f93\u51fa\u662f\u4e2a\u5b9a\u91cf\uff0c\u5982\u679c\u6bcf\u6b21\u90fd\u8ba1\u7b97\uff0c\u90a3\u4e48\u5f88\u6d6a\u8d39\u65f6\u95f4 for param in model_ft . parameters (): param . requires_grad = False # \u5982\u4f55\u5230\u5904\u56fa\u5b9a\u5c42\u7684\u5411\u91cf\u5462\uff1f\u4f7f\u7528PyTorch\u6bd4\u8f83\u9ad8\u7ea7\u7684API\uff0chook\u6765\u5904\u7406\u4e86\uff0c\u6211\u4eec\u8981\u5148\u5b9a\u4e49\u4e00\u4e2ahook\u51fd\u6570 in_list = [] # \u8fd9\u91cc\u5b58\u653e\u6240\u6709\u7684\u8f93\u51fa def hook ( module , input , output ): #input\u662f\u4e00\u4e2atuple\u4ee3\u8868\u987a\u5e8f\u4ee3\u8868\u6bcf\u4e00\u4e2a\u8f93\u5165\u9879\uff0c\u6211\u4eec\u8fd9\u91cc\u53ea\u6709\u4e00\u9879\uff0c\u6240\u4ee5\u76f4\u63a5\u83b7\u53d6 #\u9700\u8981\u5168\u90e8\u7684\u53c2\u6570\u4fe1\u606f\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u6253\u5370 #for val in input: # print(\"input val:\",val) for i in range ( input [ 0 ] . size ( 0 )): in_list . append ( input [ 0 ][ i ] . cpu () . numpy ()) # \u5728\u76f8\u5e94\u7684\u5c42\u6ce8\u518chook\u51fd\u6570\uff0c\u4fdd\u8bc1\u51fd\u6570\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\uff0c\u6211\u4eec\u8fd9\u91cc\u76f4\u63a5hook \u5168\u8fde\u63a5\u5c42\u524d\u9762\u7684pool\u5c42\uff0c\u83b7\u53d6pool\u5c42\u7684\u8f93\u5165\u6570\u636e\uff0c\u8fd9\u6837\u4f1a\u83b7\u5f97\u66f4\u591a\u7684\u7279\u5f81 model_ft . avgpool . register_forward_hook ( hook ) #\u4e0a\u6b65\u8f93\u51fa\u7ed3\u679c <torch.utils.hooks.RemovableHandle at 0x24812a5e978>\u5bf9\u8c61 # \u5f00\u59cb\u83b7\u53d6\u8f93\u51fa\uff0c\u8fd9\u91cc\u6211\u4eec\u56e0\u4e3a\u4e0d\u9700\u8981\u53cd\u5411\u4f20\u64ad\uff0c\u6240\u4ee5\u76f4\u63a5\u53ef\u4ee5\u4f7f\u7528no_grad\u5d4c\u5957 with torch . no_grad (): for batch_idx , data in enumerate ( image_dataloader [ \"train\" ]): x , y = data x = x . to ( DEVICE ) y = y . to ( DEVICE ) y_hat = model_ft ( x ) features = np . array ( in_list ) np . save ( \"features\" , features ) # \u8fd9\u6837\u518d\u8bad\u7ec3\u65f6\u6211\u4eec\u53ea\u9700\u5c06\u8fd9\u4e2a\u6570\u7ec4\u8bfb\u51fa\u6765\uff0c\u7136\u540e\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e2a\u6570\u7ec4\u518d\u8f93\u5165\u5230linear\u6216\u8005\u6211\u4eec\u524d\u9762\u8bb2\u5230\u7684sigmod\u5c42\u5c31\u53ef\u4ee5\u4e86\u3002\u6211\u4eec\u5728\u8fd9\u91cc\u5728pool\u5c42\u524d\u83b7\u53d6\u4e86\u66f4\u591a\u7684\u7279\u5f81\uff0c\u53ef\u4ee5\u5c06\u8fd9\u4e9b\u7279\u5f81\u4f7f\u7528\u66f4\u9ad8\u7ea7\u7684\u5206\u7c7b\u5668\uff0c\u4f8b\u5982SVM\uff0c\u6811\u578b\u7684\u5206\u7c7b\u5668\u8fdb\u884c\u5206\u7c7b \u51bb\u7ed3\u90e8\u5206\u5c42 class Char3SeqModel ( nn . Module ): def __init__ ( self , char_sz , n_fac , n_h ): super ( Char3SeqModel , self ) . __init__ () self . em = nn . Embedding ( char_sz , n_fac ) self . fc1 = nn . Linear ( n_fac , n_h ) self . fc2 = nn . Linear ( n_h , n_h ) self . fc3 = nn . Linear ( n_h , char_sz ) def forward ( self , ch1 , ch2 , ch3 ): # do something out = #.... return out model = Char3SeqModel ( 10000 , 50 , 25 ) # \u65b9\u6cd5\u4e00:\u51bb\u7ed3fc1\u5c42 model . fc1 . weight . requires_grad = False # \u51bb\u7ed3 model . fc1 . weight . requires_grad = True # \u89e3\u51bb optimizer . add_param_group ({ 'params' : model . fc1 . parameters ()}) # \u628afc1\u5c42\u7684\u53c2\u6570\u52a0\u5165\uff0c\u7528\u4ee5\u53cd\u5411\u4f20\u64ad # \u65b9\u6cd5\u4e8c:\u51bb\u7ed3fc1\u5c42 optimizer = optim . Adam ([{ 'params' :[ param for name , param in model . named_parameters () if 'fc1' not in name ]}], lr = 0.1 ) optimizer . add_param_group ({ 'params' : model . fc1 . parameters ()}) # \u89e3\u51bb # \u6700\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f:https://www.zhihu.com/question/311095447/answer/589307812 from collections.abc import Iterable def set_freeze_by_names ( model , layer_names , freeze = True ): if not isinstance ( layer_names , Iterable ): layer_names = [ layer_names ] for name , child in model . named_children (): if name not in layer_names : continue for param in child . parameters (): param . requires_grad = not freeze def freeze_by_names ( model , layer_names ): set_freeze_by_names ( model , layer_names , True ) def unfreeze_by_names ( model , layer_names ): set_freeze_by_names ( model , layer_names , False ) def set_freeze_by_idxs ( model , idxs , freeze = True ): if not isinstance ( idxs , Iterable ): idxs = [ idxs ] num_child = len ( list ( model . children ())) idxs = tuple ( map ( lambda idx : num_child + idx if idx < 0 else idx , idxs )) for idx , child in enumerate ( model . children ()): if idx not in idxs : continue for param in child . parameters (): param . requires_grad = not freeze def freeze_by_idxs ( model , idxs ): set_freeze_by_idxs ( model , idxs , True ) def unfreeze_by_idxs ( model , idxs ): set_freeze_by_idxs ( model , idxs , False ) # \u51bb\u7ed3\u7b2c\u4e00\u5c42 freeze_by_idxs ( model , 0 ) # \u51bb\u7ed3\u7b2c\u4e00\u3001\u4e8c\u5c42 freeze_by_idxs ( model , [ 0 , 1 ]) #\u51bb\u7ed3\u5012\u6570\u7b2c\u4e00\u5c42 freeze_by_idxs ( model , - 1 ) # \u89e3\u51bb\u7b2c\u4e00\u5c42 unfreeze_by_idxs ( model , 0 ) # \u89e3\u51bb\u5012\u6570\u7b2c\u4e00\u5c42 unfreeze_by_idxs ( model , - 1 ) # \u51bb\u7ed3 em\u5c42 freeze_by_names ( model , 'em' ) # \u51bb\u7ed3 fc1, fc3\u5c42 freeze_by_names ( model , ( 'fc1' , 'fc3' )) # \u89e3\u51bbem, fc1, fc3\u5c42 unfreeze_by_names ( model , ( 'em' , 'fc1' , 'fc3' ))","title":"Pytorch\u8fc1\u79fb\u5b66\u4e60"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch16","text":"\u57fa\u672c\u601d\u60f3\uff1a\u7cbe\u5ea6\u51cf\u534a(fp32\u2192fp16)\uff0c\u8bad\u7ec3\u65f6\u95f4\u51cf\u534a from torch.cuda.amp import autocast, GradScaler GradScaler \u5bf9\u8c61\u662f PyTorch \u5b9e\u73b0\u7684\u635f\u5931\u7f29\u653e\uff0c\u5728\u8bad\u7ec3\u671f\u95f4\uff0c\u4e3a\u4e86\u9632\u6b62\u68af\u5ea6\u53d8\u5c0f\u52300( \u56e0\u4e3afloat16\u65e0\u6cd5\u8868\u793a\u5c0f\u5e45\u503c\u7684\u53d8\u5316\uff0c\u53cd\u5411\u4f20\u64ad\u4e2d\u68af\u5ea6\u592a\u5c0f\uff0c\u53ef\u80fd\u4e3a0 )\uff0c\u67d0\u79cd\u5f62\u5f0f\u7684\u7f29\u653e\u662f\u5fc5\u8981\u7684\u3002 \u6700\u4f73\u7684\u635f\u5931\u4e58\u6570\u5f97\u8db3\u591f\u9ad8\u4ee5\u4fdd\u7559\u975e\u5e38\u5c0f\u7684\u68af\u5ea6\uff0c\u540c\u65f6\u4e0d\u80fd\u592a\u9ad8\u4ee5\u81f3\u4e8e\u5bfc\u81f4\u975e\u5e38\u5927\u7684\u68af\u5ea6\u56db\u820d\u4e94\u5165\u5230 inf \u4ea7\u751f\u76f8\u53cd\u7684\u95ee\u9898\u3002\u6bcf\u4e2a\u7f51\u7edc\u5982\u4f55\u5bfb\u627e\u6700\u4f73\u635f\u5931\u4e58\u6570\uff1f Gradscalar \u4ee5\u4e00\u4e2a\u5c0f\u7684\u635f\u5931\u4e58\u6570\u5f00\u59cb\uff0c\u8fd9\u4e2a\u4e58\u6570\u6bcf\u6b21\u4f1a\u7ffb\u500d\u3002 \u8fd9\u79cd\u9010\u6e10\u52a0\u500d\u7684\u884c\u4e3a\u4e00\u76f4\u6301\u7eed\u5230 GradScalar \u9047\u5230\u5305\u542b inf \u503c\u7684\u68af\u5ea6\u66f4\u65b0\u3002 Gradscalar \u4e22\u5f03\u8fd9\u6279\u6570\u636e(\u4f8b\u5982\u8df3\u8fc7\u68af\u5ea6\u66f4\u65b0) \uff0c\u5c06\u635f\u5931\u4e58\u6570\u51cf\u534a\uff0c\u5e76\u91cd\u7f6e\u5176\u500d\u589e\u65f6\u95f4\u3002 Gradscaler \u9700\u8981\u5bf9\u68af\u5ea6\u66f4\u65b0\u8ba1\u7b97(\u68c0\u67e5\u662f\u5426\u6ea2\u51fa)\u548c\u4f18\u5316\u5668(\u5c06\u4e22\u5f03\u7684 batches \u8f6c\u6362\u4e3a no-op )\u8fdb\u884c\u63a7\u5236\uff0c\u4ee5\u5b9e\u73b0\u5176\u64cd\u4f5c( \u7531\u4e8eGradScaler()\u5bf9gradient\u8fdb\u884c\u4e86scale\uff0c\u56e0\u6b64\u6bcf\u4e2a\u53c2\u6570\u7684gradient\u5e94\u8be5\u5728optimizer\u66f4\u65b0\u53c2\u6570\u524dunscaled\uff0c\u4ece\u800c\u4f7f\u5b66\u4e60\u7387\u4e0d\u53d7\u5f71\u54cd\u3002 )\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 loss.backwards() \u88ab scaler.scale(loss).backwards() \u53d6\u4ee3\uff0c \u4ee5\u53ca optimizer.step() \u88ab scaler.step(optimizer) \u66ff\u6362\u7684\u539f\u56e0\u3002 # \u5355GPU\u4f7f\u7528 from torch.cuda.amp import autocast , GradScaler # Creates model and optimizer in default precision model = Net () . cuda () optimizer = optim . SGD ( model . parameters (), ... ) # Creates a GradScaler once at the beginning of training. use_amp = True # \u662f\u5426\u4f7f\u7528\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3 scaler = GradScaler ( enabeled = use_amp ) for epoch in epochs : for input , target in data : # model\u524d\u5411+loss\u5f00\u542fautocast,\u5b9e\u73b0\u4e86 fp32-> fp16\u8f6c\u6362 with autocast ( enabled = use_amp ): output = model ( input ) loss = loss_fn ( output , target ) optimizer . zero_grad () # \u534a\u7cbe\u5ea6\u7684\u6570\u503c\u8303\u56f4\u6709\u9650\uff0c\u9700\u8981\u7528\u5b83\u6765\u653e\u5927loss scaler . scale ( loss ) . backward () # \u66ff\u6362loss.backwards() # \u68af\u5ea6\u653e\u5927\u540e\u4f1a\u51fa\u73b0inf\u6216NaN\u503c\uff0c\u5982\u679c\u51fa\u73b0\u5c31\u8df3\u8fc7\u672c\u6b21\u66f4\u65b0\uff0c\u5982\u679c\u4e0d\u662f\u5219\u7528optimizer.step() scaler . step ( optimizer ) # \u66ff\u6362optimizer.step() # Updates the scale for next iteration. scaler . update () # \u591aGPU\u4f7f\u7528 # 1.\u4e0b\u9762\u7684\u65b9\u5f0f\u662f\u4e0d\u8d77\u4f5c\u7528\u7684 model = MyModel () dp_model = nn . DataParallel ( model ) # Sets autocast in the main thread with autocast (): # dp_model's internal threads won't autocast. The main thread's autocast state has no effect. output = dp_model ( input ) # loss_fn still autocasts, but it's too late... loss = loss_fn ( output ) # 2.\u89e3\u51b3\u65b9\u6848\uff0c\u4e24\u79cd MyModel ( nn . Module ): ... @autocast () def forward ( self , input ): ... # Alternatively MyModel ( nn . Module ): ... def forward ( self , input ): with autocast (): ... # 3.\u4fee\u6539\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e86 model = MyModel () dp_model = nn . DataParallel ( model ) with autocast (): output = dp_model ( input ) loss = loss_fn ( output )","title":"Pytorch1.6\u652f\u6301\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#pytorch_7","text":"import torch.multiprocessing as mp from model import MyModel def train ( model ): # Construct data_loader, optimizer, etc. for data , labels in data_loader : optimizer . zero_grad () loss_fn ( model ( data ), labels ) . backward () optimizer . step () # This will update the shared parameters if __name__ == '__main__' : torch . multiprocessing . set_start_method ( 'spawn' ) num_processes = 4 model = MyModel () # NOTE: this is required for the ``fork`` method to work model . share_memory () processes = [] for rank in range ( num_processes ): p = mp . Process ( target = train , args = ( model ,)) p . start () processes . append ( p ) for p in processes : p . join ()","title":"PyTorch\u591a\u7ebf\u7a0b\u8bad\u7ec3"},{"location":"PyTorch%E5%BF%AB%E9%80%9F%E6%95%99%E7%A8%8B/#_3","text":"\u4f4e\u7248\u672c\u52a0\u8f7d\u9ad8\u7248\u672c\u6a21\u578b\u62a5\u9519 # v1.7,\u7528_use_new_zipfile_serialization=False\u89e3\u51b3 torch . save ( model_ . state_dict (), 'model_best_bacc.pth.tar' , _use_new_zipfile_serialization = False ) #v1.4 torch . load ( 'model_best_bacc.pth.tar' , map_location = 'cpu' )","title":"\u95ee\u9898"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/","text":"\u7cbe\u70bc\u535a\u5ba2 \u57fa\u672c\u77e5\u8bc6 \u00b6 #include\u7684<>\u548c\" \" <> \u5148\u53bb\u7cfb\u7edf\u76ee\u5f55\u4e2d\u627e\u5934\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u518d\u5230\u5f53\u524d\u76ee\u5f55\u4e0b\u627e\u3002 \u800c \" \" \u9996\u5148\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u5bfb\u627e\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u518d\u5230\u7cfb\u7edf\u76ee\u5f55\u4e2d\u5bfb\u627e\u3002 \u547d\u540d\u7a7a\u95f4 \u4e3b\u8981\u662f\u7528\u6765\u533a\u5206\u4e0d\u540c\u5e93\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u7b49\u3002**\u4f7f\u7528\u4e86\u547d\u540d\u7a7a\u95f4\u5373\u5b9a\u4e49\u4e86\u4e0a\u4e0b\u6587\u3002**\u672c\u8d28\u4e0a\uff0c\u547d\u540d\u7a7a\u95f4\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8303\u56f4\u3002 #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } int main () { // \u8c03\u7528\u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 first_space :: func (); // \u8c03\u7528\u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 second_space :: func (); return 0 ; } // \u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4 namespace namespace_name1 { // \u4ee3\u7801\u58f0\u660e namespace namespace_name2 { // \u4ee3\u7801\u58f0\u660e } } // \u8bbf\u95ee namespace_name2 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 :: namespace_name2 ; // \u8bbf\u95ee namespace:name1 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 ; \u5e38\u7528\u57fa\u7840\u77e5\u8bc6 // 1.typedef \u58f0\u660e,\u4f7f\u7528 typedef \u4e3a\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u578b\u53d6\u4e00\u4e2a\u65b0\u7684\u540d\u5b57 typedef int feet ; feet distance = 3 ; // 2.\u5e38\u91cf const const \u6570\u636e\u7c7b\u578b \u5e38\u91cf\u540d = \u5e38\u91cf\u503c\uff1b \u6570\u636e\u7c7b\u578b const \u5e38\u91cf\u540d = \u5e38\u91cf\u503c\uff1b // \u4e24\u79cd\u5b9a\u4e49\uff0c\u58f0\u660e\u65f6\u5fc5\u987b\u8d4b\u503c\uff0c\u58f0\u660e\u540e\u53ea\u8bfb\u3002 // 3.\u6570\u636e\u8f6c\u6362 // 3.1 \u9690\u542b\u8f6c\u6362\u4ece\u4f4e\u5230\u9ad8 int a=3; float b = a; char --> short --> int --> unsigned --> long --> unsigned long --> float --> double // 3.2 \u663e\u793a\u8f6c\u6362 \u7c7b\u578b\u8bf4\u660e\u7b26(\u8868\u8fbe\u5f0f)\u3002 float z=7.56; int a = int(z); // 3.3 4\u79cd\u7c7b\u578b\u8f6c\u6362\u64cd\u4f5c\u7b26\uff1b\u7ec6\u52064\u79cd static_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 // \u57fa\u672c\u6570\u636e\u7c7b\u578b\u95f4\u7684\u8f6c\u6362\u90fd\u9002\u7528\uff1aint(z) <==> static_cast<int>(z) const_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 reinterpret_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 dynamic_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 // 4.\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\uff0c\u53d8\u91cf\u51fa\u4e86\u6570\u636e\u7c7b\u578b(int/float/double..)\u5916\u8fd8\u6709\u5b58\u50a8\u7c7b\u578b\uff0c\u51b3\u5b9a\u4e86\u5176\u5b58\u50a8\u65b9\u5f0f auto // \u6682\u65f6\u6027\u5b58\u50a8\uff0c\u5176\u5b58\u50a8\u7a7a\u95f4\u53ef\u4ee5\u88ab\u82e5\u5e72\u53d8\u91cf\u591a\u6b21\u8986\u76d6\u4f7f\u7528\u3002\u91c7\u7528\u5806\u6808\u65b9\u5f0f\u5206\u914d\u5185\u5b58\u7a7a\u95f4 register // \u5b58\u653e\u5728\u901a\u7528\u5bc4\u5b58\u5668\u4e2d extern // \u5728\u6240\u6709\u51fd\u6570\u548c\u7a0b\u5e8f\u6bb5\u4e2d\u90fd\u53ef\u4ee5\u5f15\u7528 static // \u5728\u5185\u5b58\u4e2d\u4ee5\u56fa\u5b9a\u5730\u5740\u5b58\u653e\uff0c\u6574\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u90fd\u6709\u6548 // 5.\u679a\u4e3e\u7c7b\u578benum enum \u679a\u4e3e\u7c7b\u578b\u540d { \u53d8\u91cf\u503c\u5217\u8868 }; // \u679a\u4e3e\u58f0\u660e\u5f62\u5f0f enum Weekday { SUM , MON , TUE , WED , THU , FRI , SAT }; // \u4e3e\u4f8b\u5b50\uff0c\u679a\u4e3e\u5143\u7d20\u5177\u6709\u9ed8\u8ba4\u503c:0,1,2,3... // \u6ce8\u610f\u679a\u4e3e\u7c7b\u578b\u662f\u5e38\u91cf\u4e0d\u80fd\u8d4b\u503c\uff0cSUN=0;//\u975e\u6cd5 \uff0c\u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u5f53\u6210\u5e38\u91cf\u4f7f\u7528\u5373\u53ef\uff1aSUN\u62ff\u6765\u5c31\u7528\uff0c\u5df2\u7ecf\u5b9a\u4e49\u8fc7\u4e86 enum Weekday { SUN = 7 , MON = 1 , TUE , WED , THU , FRI , SAT }; // SUN\u4e3a7\uff0cMON\u4e3a1\uff0c\u4ee5\u540e\u987a\u51fa\u52a01\uff0cSAT\u4e3a6 int count = SUN ; // \u9690\u542b\u7c7b\u578b\u8f6c\u6362 Weekday day = Weekday ( 2 ); // \u663e\u793a\u7c7b\u578b\u8f6c\u6362 // 6.\u51fd\u6570\u53c2\u6570\u4f20\u9012 // 6.1 \u503c\u4f20\u9012:\u5355\u5411\u4f20\u9012\u8fc7\u7a0b\uff0c\u4e00\u65e6\u5f62\u53c2\u83b7\u5f97\u503c\u4fbf\u4e0e\u5b9e\u53c2\u8131\u79bb\u5173\u7cfb\uff0c\u4f3a\u5019\u65e0\u8bba\u5f62\u53c2\u53d1\u751f\u4e86\u600e\u6837\u7684\u6539\u53d8\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u5b9e\u53c2 // 6.2 \u5f15\u7528\u4f20\u9012:\u5f62\u53c2\u76f8\u5f53\u4e8e\u5b9e\u53c2\u7684\u522b\u540d\uff0c\u4e00\u65e6\u5f62\u53c2\u53d1\u751f\u53d8\u5316\uff0c\u5b9e\u53c2\u4e5f\u4f1a\u6539\u53d8\uff0cvoid swap(int &a,int &b){xxx} // 6.3 \u6570\u7ec4\u540d\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 void rowSum ( int a [][ 2 ], int nRow ){ xxx } int table [ 3 ][ 2 ] = {{ 1 , 2 },{ 3 , 4 },{ 1 , 4 }}; rowSum ( a , 3 ); // 7.\u51fd\u6570\u91cd\u8f7d:\u5177\u6709\u76f8\u540c\u51fd\u6570\u540d\uff0c\u4f46\u662f\u5f62\u53c2\u4e2a\u6570\u6216\u5f62\u53c2\u7c7b\u578b\u5fc5\u987b\u81f3\u5c11\u4e00\u4e2a\u4e0d\u540c\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e5f\u53ef\u4e0d\u540c\u3002\u4f46\u7f16\u8bd1\u5668\u4e0d\u4ee5\u8fd4\u56de\u503c\u6765\u533a\u5206\u51fd\u6570\u3002 // 8.c++\u7cfb\u7edf\u51fd\u6570 #include<cmath> sqrt/abs/min/max/sin/cos/tan/.... // 9.\u7ed3\u6784\u4f53 \u548c c++\u7c7b\u552f\u4e00\u533a\u522b\uff0c\u7c7b\u9ed8\u8ba4\u6210\u5458\u4e3aprivate\uff0c\u7ed3\u6784\u4f53\u9ed8\u8ba4\u6210\u5458 public\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e3b\u8981\u662f\u4e0ec\u517c\u5bb9 // 9.1 \u5b9a\u4e49 struct \u7ed3\u6784\u4f53\u540d { \u516c\u6709\u6210\u5458 protected : \u4fdd\u62a4\u578b\u6210\u5458 private : \u79c1\u6709\u6210\u5458 } \uff1b // 9.2 \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 struct Student { int num ; string name ; char sex ; int age ; }; Student stu = { 97001 , \"chenyuyang\" , 'F' , 19 } //9. \u8054\u5408\u4f53\uff0c\u4e00\u7ec4\u6570\u636e\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u636e\u4e0d\u4f1a\u540c\u65f6\u6709\u6548,\u4f8b\u5982\u4e00\u95e8\u8bfe\u7a0b\u901a\u8fc7\u6216\u8005\u4e0d\u901a\u8fc7 union \u8054\u5408\u4f53\u540d\u79f0 { \u516c\u6709\u6210\u5458 // \u9ed8\u8ba4\u8bbf\u95ee\u6743\u9650 protected : \u4fdd\u62a4\u578b\u6210\u5458 private : \u79c1\u6709\u6210\u5458 } // \u4e3e\u4f8b\u5b50 union Mark { char grade ; // \u7b49\u7ea7\u5236\u7684\u6210\u7ee9 bool pass ; // \u53ea\u8bb0\u662f\u5426\u901a\u8fc7\u7684\u6210\u7ee9 int percent ; // \u767e\u5206\u5236\u7684\u6210\u7ee9 } // 10.\u9884\u5904\u7406\u547d\u4ee4 // 10.1\u5b8f\u5b9a\u4e49define\uff0c\u5b8f\u540d\u4e00\u822c\u5927\u5199 // 10.1.1 \u4e0d\u5e26\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49 #define LENGTH 10 #define M y*y+3*y // M\u4ee3\u66ffy*y+3*y\u4f7f\u7528 // 10.1.2 \u5e26\u53c2\u6570\u5b8f #define M(y) y*y+3*y // k = M(5); #define MAX(a,b) (a>b):a:b // 10.1.3 \u53d6\u6d88\u5b8f #undef LENGTH // \u53d6\u6d88\u5b8f\uff0c\u540e\u7eed\u8be5\u5b8f\u4e0d\u53ef\u7528 // 10.2 \u6761\u4ef6\u7f16\u8bd1:\u7528\u6765\u6709\u9009\u62e9\u5730\u5bf9\u90e8\u5206\u7a0b\u5e8f\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1 // 10.2.1 #ifdef \u5982\u679c\u6807\u8bc6\u7b26\u88ab#define\u547d\u4ee4\u5b9a\u4e49\u8fc7\uff0c\u5219\u5bf91\u8fdb\u884c\u7f16\u8bd1\uff0c\u5426\u5219\u5bf92\u8fdb\u884c\u7f16\u8bd1 #ifdef \u6807\u8bc6\u7b26 \u7a0b\u5e8f\u6bb5 1 #else \u7a0b\u5e8f\u6bb5 2 #endif // 10.2.2 #ifndef\uff0c\u5982\u679c\u6807\u8bc6\u7b26\u672a\u88ab#define\u547d\u4ee4\u5b9a\u4e49\u8fc7\uff0c\u5219\u5bf91\u8fdb\u884c\u7f16\u8bd1\uff0c\u5426\u5219\u5bf92\u8fdb\u884c\u7f16\u8bd1\uff0c\u548c10.2.1\u76f8\u53cd #ifndef \u6807\u8bc6\u7b26 \u7a0b\u5e8f\u6bb5 1 #else \u7a0b\u5e8f\u6bb5 2 #endif // 10.2.3 # if #if \u5e38\u91cf\u8868\u8fbe\u5f0f // \u5e38\u91cf\u8868\u8fbe\u5f0f:\u7ed3\u679c\u662f0/\u975e0 \u7a0b\u5e8f\u6bb5 1 #else \u7a0b\u5e8f\u6bb5 2 #endif // 10.3 #error\u547d\u4ee4\uff0c\u7528\u4e8e\u8c03\u8bd5\uff0c\u5728\u7f16\u8bd1\u4e2d\u9047\u5230#error\u6307\u4ee4\u5c31\u505c\u6b62\u7f16\u8bd1 #error \u51fa\u9519\u4fe1\u606f // \u51fa\u9519\u4fe1\u606f:\"XXX has been defined\" // 11. \u57fa\u672c\u8f93\u5165\u8f93\u51fa #include <iostream> cout << \"string\uff1a \" << name << endl ; // \u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528 cin >> name >> age ; // \u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5982\u679c\u8981\u6c42\u8f93\u5165\u591a\u4e2a\u6570\u636e cerr << \"Error message : \" << str << endl ; //\u6807\u51c6\u9519\u8bef\u6d41: cerr \u5bf9\u8c61\u662f\u975e\u7f13\u51b2\u7684\uff0c\u4e14\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 cerr \u90fd\u4f1a\u7acb\u5373\u8f93\u51fa clog << \"Error message : \" << str << endl ; // \u6807\u51c6\u65e5\u5fd7\u6d41:clog \u5bf9\u8c61\u662f\u7f13\u51b2\u7684\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 clog \u90fd\u4f1a\u5148\u5b58\u50a8\u5728\u7f13\u51b2\u5728\uff0c\u76f4\u5230\u7f13\u51b2\u586b\u6ee1\u6216\u8005\u7f13\u51b2\u533a\u5237\u65b0\u65f6\u624d\u4f1a\u8f93\u51fa\u3002 //\u7f16\u5199\u548c\u6267\u884c\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u4f7f\u7528 cerr \u6d41\u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\uff0c\u800c\u5176\u4ed6\u7684\u65e5\u5fd7\u6d88\u606f\u5219\u4f7f\u7528 clog \u6d41\u6765\u8f93\u51fa\u3002 // 12 new/delete \u548c new Type[]/delete[] obj; // 12.1 \u5b9a\u4e49 void * operator new ( size_t ); //allocate an object void * operator delete ( void * ); //free an object void * operator new []( size_t ); //allocate an array void * operator delete []( void * ); //free an array // 12.2 \u8bed\u6cd5 // 12.2.1 \u53d8\u91cf\u7533\u8bf7 Type * pointer = new Type ; .... delete pointer ; // 12.2.2 \u6570\u636e\u7533\u8bf7 Type * pointer new Type [ N ]; ... // pointer\u662f\u6307\u9488\uff0cpointer\u6307\u5411\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u7528pointer[0]/*pointer,\u7b2c\u4e8c\u4e2a\u5143\u7d20pointer[1]/*(pointer+1) delete [] pointer ; // 13.\u6307\u9488:\u6307\u9488\u662f\u53d8\u91cf\uff0c\u5185\u5bb9\u662f\u5185\u5b58\u7684\u5730\u5740\u7f16\u53f7 int * p = NULL ; int a = 1 ; int * p =& a ; // \u5b9a\u4e49 * p // \u4f7f\u7528:\u8be5\u5730\u5740\u6240\u5b58\u50a8\u5185\u5bb9,\u8fd9\u65f6\u5176\u5b9e\u5c31\u662fa int i = 30 ; int * p =& i ; int ** pp =& pi ; // pp\u662f\u4e8c\u7ea7\u6307\u9488 int b = 40 ; * pp = & b ; // \u6539\u53d8\u4e00\u7ea7\u6307\u9488\u7684\u7684\u6307\u5411 // 13.1 \u6307\u9488\u548c\u6570\u7ec4:\u6307\u9488\u662f\u6307\u9488\u53d8\u91cf\uff0c\u6570\u7ec4\u662f\u6307\u9488\u5e38\u91cf int * p , a [] = { 1 , 2 , 4 }; p = a ; // \u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c p [ i ] == a [ i ]; * ( p + i ) ==* ( a + i ) // 13.2 const\u4fee\u9970 // 13.2.1 const\u4fee\u9970\u6307\u9488\uff0cconst\u4fee\u9970\u7684\u662fp\uff0cp\u4e3a\u5e38\u91cf\uff0c\u4f46*p\u53ef\u4ee5\u8d4b\u503c int a = 2 ; int * const p =& a ; int b = 4 ; p =& b ; // \u6307\u9488\u5e38\u91cf\u65e0\u6cd5\u4fee\u6539 // 13.2.2 const\u4fee\u9970\u6307\u5411\uff0cconst\u4fee\u9970\u7684\u662f*p,\u5373*p\u4e3a\u5e38\u91cf\uff0c\u4f46p\u662f\u666e\u901a\u53d8\u91cf\uff0c\u968f\u610f\u8d4b\u503c int a = 2 ; const int * p =& a ; int b = 4 ; p =& b ; * p = 200 ; // \u7f16\u8bd1\u901a\u4e0d\u8fc7 // 13.3 \u51fd\u6570\u6307\u9488\u53d8\u91cf void print (){ xxx }; void ( * pf )() = print ; pf () == print () == ( * pf )(); // 13.4 \u51fd\u6570\u540d\u505a\u53c2\u6570 void xxx ( int a , int b , int ( * p )( int , int )){ xxx } int haha ( int a , int b ){ return a + b ;} xxx ( 10 , 3 , haha ); // 14. \u6d45 \u5f02\u5e38\u5904\u7406 throw: \u5f53\u95ee\u9898\u51fa\u73b0\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528 throw \u5173\u952e\u5b57\u6765\u5b8c\u6210\u7684\u3002 catch: \u5728\u60f3\u8981\u5904\u7406\u95ee\u9898\u7684\u5730\u65b9\uff0c\u901a\u8fc7\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u5f02\u5e38\u3002catch \u5173\u952e\u5b57\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002 try: try \u5757\u4e2d\u653e\u7f6e\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\uff0ctry \u5757\u4e2d\u7684\u4ee3\u7801\u88ab\u79f0\u4e3a\u4fdd\u62a4\u4ee3\u7801\u3002\u5b83\u540e\u9762\u901a\u5e38\u8ddf\u7740\u4e00\u4e2a\u6216\u591a\u4e2a catch \u5757\u3002 \u629b\u51fa\u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528 throw \u8bed\u53e5\u5728\u4ee3\u7801\u5757\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u629b\u51fa\u5f02\u5e38\u3002throw \u8bed\u53e5\u7684\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u629b\u51fa\u7684\u5f02\u5e38\u7684\u7c7b\u578b\u3002 // \u6355\u83b7\u5f02\u5e38 try { // \u4fdd\u62a4\u4ee3\u7801 } catch ( ExceptionName e1 ) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } catch ( ExceptionName e2 ) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } catch ( ExceptionName eN ) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } // \u76f4\u63a5\u629b\u51fa\u5f02\u5e38 double division ( int a , int b ) { if ( b == 0 ) { throw \"Division by zero condition!\" ; } return ( a / b ); } // \u4eba\u4e3a\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38 #include <iostream> #include <exception> using namespace std ; struct MyException : public exception { const char * what () const throw () { return \"C++ Exception\" ; } }; int main () { try { throw MyException (); } catch ( MyException & e ) { std :: cout << \"MyException caught\" << std :: endl ; std :: cout << e . what () << std :: endl ; } catch ( std :: exception & e ) { //\u5176\u4ed6\u7684\u9519\u8bef } } \u7c7b\u548c\u5bf9\u8c61 \u00b6 // \u7c7b\u7684\u5b9a\u4e49 class Box { public : // \u516c\u6709\u6210\u5458\u5728\u7a0b\u5e8f\u4e2d\u7c7b\u7684\u5916\u90e8\u662f\u53ef\u8bbf\u95ee\u7684 // \u6784\u9020\u51fd\u6570:\u4f1a\u5728\u6bcf\u6b21\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u65f6\u6267\u884c,\u65e0\u8fd4\u56de\u503c\uff0c\u540d\u5b57\u548c\u7c7b\u540d\u4e00\u6837 Box (); //\u65e0\u53c2\u6784\u9020\u51fd\u6570\u58f0\u660e,\u4e0d\u5199\u6784\u9020\u51fd\u6570\u65f6\uff0c\u81ea\u52a8\u521b\u5efa Box ( double len ); // \u6709\u53c2\u6784\u9020\u51fd\u6570\u58f0\u660e\uff0c\u5199\u4e86\u540e\uff0c\u4e0d\u4f1a\u518d\u81ea\u52a8\u521b\u5efa\u65e0\u53c2\u6784\u9020\u51fd\u6570 // \u62f7\u8d1d\u6784\u9020\u51fd\u6570:\u5f62\u53c2\u662f\u672c\u7c7b\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u53ef\u52a0const\u3002\u4f5c\u7528:\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u521d\u59cb\u5316\u540c\u7c7b\u7684\u4e00\u4e2a\u65b0\u5bf9\u8c61 // \u5982\u679c\u6ca1\u6709\u7c7b\u5185\u58f0\u660e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u9690\u542b\u7684\u590d\u5236\u6784\u9020\u51fd\u6570:\u628a\u521d\u59cb\u503c\u5bf9\u8c61\u7684\u6bcf\u4e2a\u6570\u636e\u6210\u5458\u7684\u503c\u90fd\u590d\u5236\u5230\u65b0\u5efa\u7acb\u7684\u5bf9\u8c61\u4e2d\u53bb // \u4ec0\u4e48\u65f6\u5019\u4f1a\u4f7f\u7528\uff1f // 1. \u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u521d\u59cb\u5316\u53e6\u4e00\u4e2a\u5bf9\u8c61\u65f6:Box a(10); Box b(a); Box c=a;//\u4e24\u79cd\u7528\u6cd5 // 2.\u51fd\u6570\u7684\u5f62\u53c2\u662f\u7c7b\u7684\u5bf9\u8c61\uff0c\u8c03\u7528\u51fd\u6570\u2018\u503c\u2019\u4f20\u9012\u65f6; void f(Box b){} Box c(10); f(c); // 3.\u51fd\u6570\u8fd4\u56de\u503c\u662f\u7c7b\u5bf9\u8c61\u65f6:\u56e0\u4e3a\u8be5\u7c7b\u5bf9\u8c61\u79bb\u5f00\u51fd\u6570\u5c31\u4f1a\u6d88\u4ea1\uff0c\u6240\u4ee5\u5fc5\u987b\u590d\u5236\u6784\u9020\u51fd\u6570\u624d\u80fd\u8fd4\u56de Box ( const Box & obj ); // \u58f0\u660e\u62f7\u8d1d\u6784\u9020\u51fd\u6570 // \u6790\u6784\u51fd\u6570:\u4f1a\u5728\u6bcf\u6b21\u5220\u9664\u6240\u521b\u5efa\u7684\u5bf9\u8c61\u65f6\u6267\u884c,\u540c\u7c7b\u540d,\u65e0\u8fd4\u56de\u503c,\u4e0d\u63a5\u6536\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u53ef\u4ee5\u662f\u865a\u51fd\u6570 ~ Box (); // \u6790\u6784\u51fd\u6570\u7684\u58f0\u660e // \u6210\u5458\u53d8\u91cf\uff0c\u666e\u901a\u51fd\u6570/\u5185\u8054\u51fd\u6570/\u5e38\u6210\u5458\u51fd\u6570 double length ; double breadth ; double height ; // \u76d2\u5b50\u7684\u957f\u5bbd\u9ad8 double getVolume ( void ); //\u666e\u901a\u51fd\u6570\u58f0\u660e\uff0c\u5982\u679c\u76f4\u63a5\u5728\u7c7b\u5185\u5b9a\u4e49\u5b9e\u73b0\uff0c\u90a3\u4e48\u79f0\u4e3a\u5185\u8054\u51fd\u6570\uff0cinline\u53ef\u7701\u7565 double getVolume ( int a ); // \u91cd\u8f7d\u51fd\u6570\uff0c\u540c\u540d\uff0c\u4f9d\u636e\u53c2\u6570\u7c7b\u578b\u4e0d\u540c\u5224\u65ad\uff0c\u4e0d\u80fd\u4ec5\u901a\u8fc7\u8fd4\u56de\u7c7b\u578b\u5224\u65ad double get_length (){ return length ;} // \u5185\u8054\u51fd\u6570/\u4e5f\u53ef\u4ee5\u7c7b\u5185\u58f0\u660e\u5728\u7c7b\u5916\u524d\u9762\u52a0inline\u53ef\u4ee5\u5b9a\u4e49 // \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e3a\u5e38\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u53ea\u80fd\u8c03\u7528\u5e38\u6210\u5458\u51fd\u6570\uff0cconst\u5173\u952e\u5b57\u53ef\u4ee5\u7528\u4e8e\u91cd\u8f7d\u8fd8\u662f\u51fd\u6570\u7684\u533a\u5206 void print_length () const ; // \u53cb\u5143\u51fd\u6570:1.\u4e0d\u662f\u6210\u5458\u51fd\u6570 2.\u5fc5\u987b\u5b9a\u4e49\u5728\u7c7b\u5916\u90e8\uff0c\u4f46\u6709\u6743\u8bbf\u95ee\u7c7b\u7684\u6240\u6709 \u79c1\u6709+\u4fdd\u62a4\u6210\u5458 // \u53cb\u5143\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u56e0\u4e3a\u53cb\u5143\u4e0d\u662f\u7c7b\u7684\u6210\u5458\u3002\u53ea\u6709\u6210\u5458\u51fd\u6570\u624d\u6709 this \u6307\u9488 friend void printWidth ( Box box ); // \u58f0\u660e\u53cb\u5143\u51fd\u6570 // this\u6307\u9488:this \u6307\u9488\u662f\u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u6307\u5411\u8c03\u7528\u5bf9\u8c61\u3002 double thisGetVolume ( void ){ return this -> getVolume ();} // \u9759\u6001\u6210\u5458:\u5728\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u4e2d\u662f\u5171\u4eab\u7684,\u610f\u5473\u7740\u65e0\u8bba\u521b\u5efa\u591a\u5c11\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u9759\u6001\u6210\u5458\u90fd\u53ea\u6709\u4e00\u4e2a\u526f\u672c static int objectCount ; // \u5982\u679c\u628a\u51fd\u6570\u6210\u5458\u58f0\u660e\u4e3a\u9759\u6001\u7684\uff0c\u5c31\u53ef\u4ee5\u628a\u51fd\u6570\u4e0e\u7c7b\u7684\u4efb\u4f55\u7279\u5b9a\u5bf9\u8c61\u72ec\u7acb\u5f00\u6765\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u5373\u4f7f\u5728\u7c7b\u5bf9\u8c61\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u88ab\u8c03\u7528\uff0c\u9759\u6001\u51fd\u6570\u53ea\u8981\u4f7f\u7528\u7c7b\u540d\u52a0\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26::\u5c31\u53ef\u4ee5\u8bbf\u95ee // \u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u5e76\u4e14\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458(\u9759\u6001\u6210\u5458\u53d8\u91cf+\u9759\u6001\u6210\u5458\u51fd\u6570) static int getObjectCount (); // \u91cd\u8f7d\u8fd0\u7b97\u7b26:\u51fd\u6570\u540d\u662f\u7531\u5173\u952e\u5b57 operator \u548c\u5176\u540e\u8981\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u7b26\u53f7\u6784\u6210\u7684\u3002\u4e0e\u5176\u4ed6\u51fd\u6570\u4e00\u6837\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\u6709\u4e00\u4e2a\u8fd4\u56de\u7c7b\u578b\u548c\u4e00\u4e2a\u53c2\u6570\u5217\u8868\uff0c\u53ef\u91cd\u8f7d\u8fd0\u7b97\u7b26\u89c1\u4e0b\u56fe\uff0c\u4e0b\u9762\u662f \u91cd\u8f7d + \u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u628a\u4e24\u4e2a Box \u5bf9\u8c61\u76f8\u52a0 Box operator + ( const Box & b ) { Box box ; box . length = this -> length + b . length ; box . breadth = this -> breadth + b . breadth ; box . height = this -> height + b . height ; return box ; } private : //\u79c1\u6709\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u5728\u7c7b\u7684\u5916\u90e8\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u67e5\u770b\u7684\u3002\u53ea\u6709\u7c7b\u548c\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\u3002\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u4e3a\u79c1\u6709\u6210\u5458 const int const_a ; // \u5e38\u6570\u636e\u6210\u5458\uff0c\u53ea\u80fd\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u6765\u83b7\u5f97\u521d\u503c double width ; double lenght ; int * ptr ; protected : // \u4fdd\u62a4\u6210\u5458\u7c7b\u4f3c\u79c1\u6709\u6210\u5458\uff0c\u4f46\u4fdd\u62a4\u6210\u5458\u5728\u6d3e\u751f\u7c7b\uff08\u5373\u5b50\u7c7b\uff09\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\u3002 }; //\u4e00\u822c\u90fd\u662f\u7c7b\u5185\u58f0\u660e\u51fd\u6570\uff0c\u7c7b\u7684\u5916\u90e8\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u5b9a\u4e49\u8be5\u51fd\u6570 // \u5b9a\u4e49\u6784\u9020\u51fd\u6570 Box :: Box ( void ){...} Box :: Box ( double len ){...} Box :: Box ( int i ) : const_a ( i ){...} // \u5e38\u6570\u636e\u6210\u5458\uff0c\u53ea\u80fd\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u6765\u83b7\u5f97\u521d\u503c // \u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Box :: Box ( const Box & obj ){ ptr = new int ; * ptr =* obj . ptr ; // \u62f7\u8d1d\u503c} // \u5b9a\u4e49\u6790\u6784\u51fd\u6570 Box ::~ Line ( void ){...} // \u5b9a\u4e49\u5e26\u8fd4\u56de\u503c\u7684\u6210\u5458\u51fd\u6570---\u300b\u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d::\u51fd\u6570\u6210\u5458\u540d(\u53c2\u6570\u8868){\u51fd\u6570\u4f53} double Box :: getVolume ( void ){...} double Box :: getVolume ( void ){...} // \u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570,\u8c03\u7528 const Box b(10); b.print_length(); void Box :: print_length (){ cout << length << endl ;} // \u53cb\u5143\u51fd\u6570\u5b9a\u4e49,\u867d\u7136\u58f0\u660e\u5728\u7c7b\u5185\u90e8\uff0c\u4f46\u5e76\u4e0d\u662f\u7c7b\u6210\u5458\u51fd\u6570\uff0c\u662f\u72ec\u7acb\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4f7f\u7528\u89e3\u6790\u8fd0\u7b97\u7b26:: void printWidth ( Box box ){ cout << box . width << endl ;} // \u6ce8\u610f\uff0c\u8fd9\u91cc\u8bbf\u95ee\u4e86\u7c7b\u7684\u79c1\u6709\u53d8\u91cf:width // \u521d\u59cb\u5316\u7c7b Box \u7684\u9759\u6001\u6210\u5458 int Box :: objectCount = 1 ; // \u7c7b\u7684\u58f0\u660e Box box1 ; Box box2 = Box ( parameters ); Box box3 ( parameters ); Box * box4 = new Box ( parameters ); //\u8bbf\u95ee\u7c7b\u7684\u6210\u5458 box1 . length = 5.0 ; cout << box1 . length << endl ; \u524d\u5411\u5f15\u7528\u7533\u660e class A { public : void f ( B b ); } class B { public : void g ( A a ); } // \u61f5\u903c\u4e86\u5427\uff0c\u6b64\u65f6\u548b\u8c03\u7528\uff1f class B ; // \u524d\u5411\u5f15\u7528\u58f0\u660e\u5373\u53ef class A { public : void f ( B b ); } class B { public : void g ( A a ); } \u591a\u6587\u4ef6\u7ed3\u6784 // point.h class Point { public : Point (); Point ( int x = 0 , int y = 0 ) : x ( x ), y ( y ){} Point ( const Point & p ); ~ Point (){ count -- ;} int getX () const { return x ;} int getY () const { return y ;} static void showCount (); private : int x , y ; static int count ; }; // Point.cpp #include \"point.h\" #include <iostream> using namespace std ; int Point :: count = 0 ; //\u4f7f\u7528\u7c7b\u540d\u521d\u59cb\u5316\u9759\u6001\u6570\u636e\u6210\u5458 Point :: Point ( const Point & p ) : x ( p . x ), y ( p . y ){ count ++ ; } void Point :: showCount () { cout << \"Object count=\" << count << endl ; } // main.cpp #include \"point.h\" #include <iostream> using namespace std ; int main (){ Point a ( 4 , 5 ); cout << \"Point A:\" << a . getX () << \",\" << a . getY (); Point :: showCount (); Point b ( a ); cout << \"Point B:\" << b . getX () << \",\" << b . getY (); Point :: showCount (); return 0 ; } \u7ee7\u627f class \u6d3e\u751f\u7c7b\u540d : \u7ee7\u627f\u65b9\u5f0f \u57fa\u7c7b\u540d 1 \uff0c\u7ee7\u627f\u65b9\u5f0f \u57fa\u7c7b\u540d 2. ..{} // \u57fa\u7c7b Shape class Shape { public : void setWidth ( int w ){ width = w ;} void setHeight ( int h ){ height = h ;} protected : int width ; int height ; }; // \u57fa\u7c7b PaintCost class PaintCost { public : int getCost ( int area ){ return area * 70 ;} }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape , public PaintCost { public : int getArea (){ return ( width * height );} }; \u6ce8\u610f\u4e8b\u9879 // 1. \u5982\u679c\u6d3e\u751f\u7c7b\u58f0\u660e\u4e86\u4e00\u4e2a\u548c\u67d0\u57fa\u7c7b\u6210\u5458\u540c\u540d\u7684\u65b0\u6210\u5458(\u53c2\u6570\u8868\u4e5f\u76f8\u540c\uff0c\u5426\u5219\u4e3a\u91cd\u8f7d)\uff0c\u6d3e\u751f\u7c7b\u65b0\u6210\u5458\u9690\u85cf\u4e86\u5916\u5c42\u540c\u540d\u6210\u5458 // 2. \u6d3e\u751f\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u57fa\u7c7b\u4e2d\u6240\u6709\u7684\u975e\u79c1\u6709\u6210\u5458\uff0c\u540c\u65f6\uff0c\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u7684\u57fa\u7c7b\u65b9\u6cd5\uff0c\u4f46\u4e0b\u5217\u60c5\u51b5\u9664\u5916\uff1a // 2.1.\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 // 2.2.\u57fa\u7c7b\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 // 2.3.\u57fa\u7c7b\u7684\u53cb\u5143\u51fd\u6570 // 3.\u8bbf\u95ee\u63a7\u5236 // 3.1 public\uff0c\u516c\u6709\u7ee7\u627f:\u57fa\u7c7b\u7684public\u80fd\u76f4\u63a5\u8bbf\u95ee\uff0cprotected\u4fee\u9970\u7684\u7c7b\u5185\u80fd\u8bbf\u95ee\u7c7b\u5916\u5bf9\u8c61\u4e0d\u80fd\u8bbf\u95ee\uff0c\u4f46private\u4fee\u9970\u7684\u4e0d\u53ef\u76f4\u63a5\u8bbf\u95ee // 3.2 private,\u79c1\u6709\u7ee7\u627f\uff1a\u57fa\u7c7b\u7684public\u548cprotected\u4fee\u9970\u7684\u4ee5\u79c1\u6709\u6210\u5458\u8eab\u4efd\u51fa\u73b0\u5728\u6d3e\u751f\u7c7b\u4e2d\uff0cprivate\u4fee\u9970\u7684\u4e0d\u53ef\u76f4\u63a5\u8bbf\u95ee // 3.3 protected\uff0c\u4fdd\u62a4\u7ee7\u627f\uff1a\u57fa\u7c7b\u7684public\u548cprotected\u4fee\u9970\u7684\u4ee5\u4fdd\u62a4\u6210\u5458\u8eab\u4efd\u51fa\u73b0\u5728\u6d3e\u751f\u7c7b\u4e2d\u4f46\u662f\u7c7b\u5916\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u4ed6\u4eec\uff0cprivate\u4fee\u9970\u7684\u4e0d\u53ef\u76f4\u63a5\u8bbf\u95ee // 4.\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570 \u5fc5\u987b\u5bf9\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u5e76\u6ca1\u6709\u88ab\u7ee7\u627f // 4.1 \u6784\u9020\u51fd\u6570,\u5bf9\u4e8e\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u57fa\u7c7b\uff0c\u53ef\u4ee5\u4e0d\u7ed9\u51fa\u7c7b\u540d\uff0c\u5bf9\u4e8e\u6210\u5458\u5bf9\u8c61\u4e5f\u7c7b\u4f3c \u6d3e\u751f\u7c7b\u540d :: \u6d3e\u751f\u7c7b\u540d ( \u53c2\u6570\u8868 ) : \u57fa\u7c7b\u540d 1 ( \u57fa\u7c7b 1 \u521d\u59cb\u5316\u53c2\u6570\u8868 ),..., \u57fa\u7c7b\u540d n ( \u57fa\u7c7b n\u521d\u59cb\u5316\u53c2\u6570\u8868 ), \u6210\u5458\u5bf9\u8c61\u540d 1 ( \u6210\u5458\u5bf9\u8c61 1 \u521d\u59cb\u5316\u53c2\u6570\u8868 ),..., \u6210\u5458\u5bf9\u8c61\u540d m ( \u6210\u5458\u5bf9\u8c61 m\u521d\u59cb\u5316\u53c2\u6570\u8868 ){ xxx } class Base1 { public : Base1 ( int i ){ cout << \"Constrtucting Base1\" << i << endl ;} }; class Base2 { public : Base2 ( int j ){ cout << \"Constrtucting Base2\" << j << endl ;} }; class Base3 { public : Base3 (){ cout << \"Constrtucting Base3*\" << endl ;} }; // \u57fa\u7c7b\u6784\u9020\u51fd\u6570\u7684\u2018\u8c03\u7528\u2019\u987a\u5e8f\u662f\u6309\u7167\u6d3e\u751f\u7c7b\u5b9a\u4e49\u65f6\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u5e94\u8be5\u662f\u5148Base2\uff0c\u518dBase1,\u6700\u540eBase3 class Derived : public Base2 , public Base1 , public Base3 { // \u6ce8\u610f\u57fa\u7c7b\u540d\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u4e3a\u57fa\u51c6 public : // \u6ce8\u610f\u57fa\u7c7b\u540d\u7684\u4e2a\u6570\u548c\u987a\u5e8f\uff0c\u6ce8\u610f\u6210\u5458\u5bf9\u8c61\u540d\u7684\u4e2a\u6570\u548c\u987a\u5e8f\uff0c\u8fd9\u91ccBase3\u662f\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u65e0\u9700\u4f20\u53c2\uff0c\u5b9a\u4e49\u987a\u5e8f\u968f\u610f Derived ( int a , int b , int c , int d ) : Base1 ( a ), member2 ( d ), member1 ( c ), Base2 ( b ){} private : Base1 member1 ; Base2 member2 ; Base3 member3 ; } // 4.2\u590d\u5236\u6784\u9020\u51fd\u6570 Derived :: Derived ( const Derived & v ) : Base ( v )(...) // \u53ef\u4ee5\u7528\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u53bb\u521d\u59cb\u5316\u57fa\u7c7b\u7684\u5f15\u7528 // 4.3\u6790\u6784\u51fd\u6570\uff0c\u65e0\u53c2\u6570\u6240\u4ee5\u65e0\u9700\u5199\uff0c\u53ea\u4e0d\u8fc7\u91ca\u653e\u987a\u5e8f\u521a\u597d\u548c\u6784\u9020\u51fd\u6570\u987a\u5e8f\u76f8\u53cd // 5.\u591a\u7ee7\u627f\u91cd\u540d\u95ee\u9898\uff0c\u865a\u57fa\u7c7b\u89e3\u51b3\uff1aBase\u57fa\u7c7b\uff0cBase1\u548cBase2\u7ee7\u627f\u81eaBase\u7c7b\uff0cBase3\u7ee7\u627f\u81eaBase1\u548cBase2,\u90a3\u4e48Base1\u548cBase2\u4e2d\u4f1a\u6709\u5f88\u591a\u540c\u540d\u51fd\u6570\uff0c\u90a3Base3\u4e2d\u600e\u4e48\u8bbf\u95ee\uff1f\u65b9\u6cd5\u4e00:\u6bcf\u4e2a\u65b9\u6cd5\u540d\u53ef\u4ee5\u7528\u4f5c\u7528\u57df\u533a\u5206(Base1::fun/Base2::fun)\u3002\u65b9\u6cd5\u4e8c\uff1a\u628aBase\u7c7b\u8bbe\u7f6e\u4e3a\u865a\u57fa\u7c7b\uff0c\u6b64\u65f6Base1/Base2\u4e2d\u6240\u6709\u540c\u540d\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u6620\u5c04 // 5.1\u865a\u57fa\u7c7b\u58f0\u660e class \u6d3e\u751f\u7c7b\u540d : virtual \u7ee7\u627f\u65b9\u5f0f \u57fa\u7c7b\u540d { xxx } // Base3\u8bbf\u95ee\u7684\u540c\u540d\u51fd\u6570\u662f\u76f4\u63a5\u8bbf\u95eeBase\u7c7b\u51fd\u6570/\u6570\u636e\u6210\u5458 // 5.2 \u865a\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570 class Base0 { public : Base0 ( int var ) : var0 ( var ){} int var0 ; } class Base1 : virtual public Base0 { public : Base1 ( int var ) : Base0 ( var ){} int var1 ; } class Base2 : virtual public Base0 { public : Base2 ( int var ) : Base0 ( var ){} int var2 ; } class Derived : public Base1 , public Base2 { public : Derived ( int var ) : Base0 ( var ), Base1 ( var ), Base2 ( var ){} // \u865a\u57fa\u7c7b\u4e09\u6b21\u521d\u59cb\u5316\uff1f\u5b8c\u5168\u53ef\u4ee5\u8fd9\u6837\u5199 } \u591a\u6001 \u865a\u51fd\u6570**\u662f\u5728**\u57fa\u7c7b**\u4e2d\u4f7f\u7528\u5173\u952e\u5b57 **virtual \u58f0\u660e\u7684\u51fd\u6570 \u3002\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u4e2d**\u5b9a\u4e49\u7684\u865a\u51fd\u6570\u65f6\uff0c\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u9759\u6001\u94fe\u63a5\u5230\u8be5\u51fd\u6570\u3002 \u6211\u4eec\u60f3\u8981\u7684\u662f**\u5728\u7a0b\u5e8f\u4e2d\u4efb\u610f\u70b9\u53ef\u4ee5\u6839\u636e\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u7c7b\u578b\u6765\u9009\u62e9\u8c03\u7528\u7684\u51fd\u6570 \uff0c\u8fd9\u79cd\u64cd\u4f5c\u88ab\u79f0\u4e3a**\u52a8\u6001\u94fe\u63a5**\uff0c\u6216\u540e\u671f\u7ed1\u5b9a\u3002 \u82e5\u5728\u57fa\u7c7b\u4e2d\u4e0d\u80fd\u5bf9\u865a\u51fd\u6570\u7ed9\u51fa\u6709\u610f\u4e49\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u7528\u5230\u7eaf\u865a\u51fd\u6570\uff0c\u5728\u51fd\u6570\u53c2\u6570\u540e\u76f4\u63a5\u52a0 = 0 \u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u51fd\u6570\u6ca1\u6709\u4e3b\u4f53\uff0c\u8fd9\u79cd\u865a\u51fd\u6570\u5373\u662f\u7eaf\u865a\u51fd\u6570\u3002 class Shape { protected : int width , height ; public : // \u6784\u9020\u51fd\u6570 Shape ( int a = 0 , int b = 0 ) { width = a ; height = b ; } // \u865a\u51fd\u6570 virtual int area () { cout << \"Parent class area :\" << endl ; return 0 ; } // \u7eaf\u865a\u51fd\u6570\uff0c\u5982\u679c\u7c7b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u8fd9\u4e2a\u7c7b\u5c31\u662f\u62bd\u8c61\u7c7b\u3002 // \u8bbe\u8ba1\u62bd\u8c61\u7c7b\uff08\u901a\u5e38\u79f0\u4e3a ABC\uff09\u7684\u76ee\u7684\uff0c\u662f\u4e3a\u4e86\u7ed9\u5176\u4ed6\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u7ee7\u627f\u7684\u9002\u5f53\u7684\u57fa\u7c7b\u3002\u62bd\u8c61\u7c7b\u4e0d\u80fd\u88ab\u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5b83\u53ea\u80fd\u4f5c\u4e3a\u63a5\u53e3\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a ABC \u7684\u5b50\u7c7b\u9700\u8981\u88ab\u5b9e\u4f8b\u5316\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u6bcf\u4e2a\u865a\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u8f7d\u7eaf\u865a\u51fd\u6570\uff0c\u5c31\u5c1d\u8bd5\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u53ef\u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b\u88ab\u79f0\u4e3a\u5177\u4f53\u7c7b\u3002 virtual int area () = 0 ; }; // \u7ee7\u627f class Rectangle : public Shape { public : // \u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5b9e\u73b0\u65f6\uff0c\u56e0\u4e3a\u57fa\u7c7b\u5199\u4e86\u9700\u8981\u4f20\u53c2\u7684\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6784\u9020\u65f6\u76f4\u63a5\u4f20\u5165\u57fa\u7c7b\u9700\u7684\u53c2\u6570 Rectangle ( int a = 0 , int b = 0 ) : Shape ( a , b ) { } // \u5b9e\u73b0\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u591a\u6001:\u610f\u5473\u7740\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u4f1a\u6839\u636e\u8c03\u7528\u51fd\u6570\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u6765\u6267\u884c\u4e0d\u540c\u7684\u51fd\u6570 int area (){ cout << \"Rectangle class area :\" << endl ; return ( width * height ); } }; class Triangle : public Shape { public : Triangle ( int a = 0 , int b = 0 ) : Shape ( a , b ) { } int area (){ cout << \"Triangle class area :\" << endl ; return ( width * height / 2 ); } }; // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Shape * shape ; Rectangle rec ( 10 , 7 ); Triangle tri ( 10 , 5 ); // \u5b58\u50a8\u77e9\u5f62\u7684\u5730\u5740 shape = & rec ; // \u8c03\u7528\u77e9\u5f62\u7684\u6c42\u9762\u79ef\u51fd\u6570 area shape -> area (); //Rectangle class area // \u5b58\u50a8\u4e09\u89d2\u5f62\u7684\u5730\u5740 shape = & tri ; // \u8c03\u7528\u4e09\u89d2\u5f62\u7684\u6c42\u9762\u79ef\u51fd\u6570 area shape -> area (); //Triangle class area return 0 ; } \u6a21\u677f \u00b6 \u6a21\u677f\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u6cdb\u578b\u7f16\u7a0b\u5373\u4ee5\u4e00\u79cd\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7c7b\u578b\u7684\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801 // \u4e00\u822c\u683c\u5f0f template < class type > // template <typename T> return - type func - name ( parameter list ) { // \u51fd\u6570\u7684\u4e3b\u4f53 } // \u4e3e\u4f8b\u8bf4\u660e #include <iostream> #include <string> using namespace std ; //\u4f7f\u7528const&\u53ef\u8282\u7701\u4f20\u9012\u65f6\u95f4\uff0c\u540c\u65f6\u4fdd\u8bc1\u503c\u4e0d\u88ab\u6539\u53d8 template < typename T > inline T const & Max ( T const & a , T const & b ) { return a < b ? b : a ; } int main () { int i = 39 ; int j = 20 ; cout << \"Max(i, j): \" << Max ( i , j ) << endl ; double f1 = 13.5 ; double f2 = 20.7 ; cout << \"Max(f1, f2): \" << Max ( f1 , f2 ) << endl ; string s1 = \"Hello\" ; string s2 = \"World\" ; cout << \"Max(s1, s2): \" << Max ( s1 , s2 ) << endl ; return 0 ; } // \u7c7b\u6a21\u677f template < class type > class class - name { //\u7c7b\u7684\u4e3b\u4f53 } // \u4e3e\u4f8b\u5b50 #include <iostream> #include <vector> #include <cstdlib> #include <string> #include <stdexcept> using namespace std ; template < class T > class Stack { private : vector < T > elems ; // \u5143\u7d20 public : void push ( T const & ); // \u5165\u6808 void pop (); // \u51fa\u6808 T top () const ; // \u8fd4\u56de\u6808\u9876\u5143\u7d20 bool empty () const { // \u5982\u679c\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f\u3002 return elems . empty (); } }; template < class T > void Stack < T >:: push ( T const & elem ) { // \u8ffd\u52a0\u4f20\u5165\u5143\u7d20\u7684\u526f\u672c elems . push_back ( elem ); } template < class T > void Stack < T >:: pop () { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::pop() : empty stack \") ; } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 elems . pop_back (); } template < class T > T Stack < T >:: top () const { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::top() : empty stack \") ; } // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u526f\u672c return elems . back (); } int main () { try { Stack < int > intStack ; // int \u7c7b\u578b\u7684\u6808 Stack < string > stringStack ; // string \u7c7b\u578b\u7684\u6808 // \u64cd\u4f5c int \u7c7b\u578b\u7684\u6808 intStack . push ( 7 ); cout << intStack . top () << endl ; // \u64cd\u4f5c string \u7c7b\u578b\u7684\u6808 stringStack . push ( \"hello\" ); cout << stringStack . top () << std :: endl ; stringStack . pop (); stringStack . pop (); } catch ( exception const & ex ) { cerr << \"Exception: \" << ex . what () << endl ; return -1 ; } } STL\u6807\u51c6\u6a21\u677f\u5e93 \u00b6 STL\u4e2d\u5305\u62ec\u516d\u5927\u7ec4\u4ef6\uff1a\u5bb9\u5668\u3001\u8fed\u4ee3\u5668\u3001\u7b97\u6cd5\u3001\u4eff\u51fd\u6570\u3001\u8fed\u4ee3\u9002\u914d\u5668\u3001\u7a7a\u95f4\u914d\u7f6e\u5668\u3002 STL\u4e2d\u7684\u5e38\u7528\u5bb9\u5668\u5305\u62ec\uff1a\u5e8f\u5217\u5f0f\u5bb9\u5668\uff08vector\u3001deque\u3001list\uff09 \u5173\u8054\u5f0f\u5bb9\u5668\uff08map\u3001set\uff09 \u5bb9\u5668\u9002\u914d\u5668\uff08queue\u3001stack\uff09\u3002 STL\u5e93\u5e38\u7528\u51fd\u6570 // 0.\u4e00\u79cd\u5faa\u73af\u7684\u7b80\u5355\u7528\u6cd5c++11 vector < int > a = { 2 , 3 , 4 , 5 }; for ( auto i : a ) cout << i << \" \" ; // 0.1 for_each()\uff1aFunction for_each(InputIterator beg, InputIterator end, Function f) // for_each() \u53ef\u4ee5\u7406\u89e3\u4e3apython\u7684map\u64cd\u4f5c\uff0c\u66f4\u52a0\u590d\u6742\u7684\u53ef\u4ee5\u4f7f\u7528transform\u51fd\u6570 // 1.abs\u7684\u533a\u522b abs (); // \u4e3b\u8981\u662f\u5bf9int\u6c42\u7edd\u5bf9\u503c,\u5305\u542b\u5728<stdlib.h> fabs (); // \u5bf9float\uff0cdouble\u6c42\u7edd\u5bf9\u503c \u5305\u542b\u5728<cmath> // 1.1 sort\u6392\u5e8f #include<algorithm> void sort ( RandomAccessIterator first , RandomAccessIterator last , Compare comp ) * first \uff1a\u662f\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u8d77\u59cb\u5730\u5740 * last \uff1a\u662f\u7ed3\u675f\u7684\u5730\u5740\uff08\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7684\u540e\u4e00\u4e2a\u6570\u636e\u7684\u5730\u5740\uff09 * comp\u662f\u6392\u5e8f\u7684\u65b9\u6cd5 \uff1a\u53ef\u4ee5\u662f\u4ece\u5347\u5e8f\u4e5f\u53ef\u662f\u964d\u5e8f\u3002\u5982\u679c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0d\u5199\uff0c\u5219\u9ed8\u8ba4\u7684\u6392\u5e8f\u65b9\u6cd5\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002 sort ( s . begin (), s . end ()); // \u5347\u5e8f\u6392\u5217 sort ( a , a + 10 ); // \u6570\u7ec4\u6392\u5e8f sort ( s . begin (), s . end (),[]( int a , int b ) -> bool { return a > b ;}); // \u964d\u5e8f // 1.2 max_element() \u4e0e min_element()\uff1a#include<algorithm>\uff0c\u8fd4\u56de\u533a\u95f4 [first,last)\u4e2d\u7b2c\u4e00\u4e2a\u6700\u5927\u503c\u548c\u7b2c\u4e00\u4e2a\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u3002\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u627e\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\u7684\u7d22\u5f15\uff09 ForwardIt min_element ( ForwardIt first , ForwardIt last [, cmp ]); //\u6307\u5411\u8303\u56f4 [first, last) \u4e2d\u6700\u5927\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u82e5\u8303\u56f4\u4e2d\u6709\u591a\u4e2a\u5143\u7d20\u7b49\u4ef7\u4e8e\u6700\u5927\u5143\u7d20\uff0c\u5219\u8fd4\u56de\u6307\u5411\u9996\u4e2a\u8fd9\u79cd\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u82e5\u8303\u56f4\u4e3a\u7a7a\u5219\u8fd4\u56de last ForwardIt max_element ( ForwardIt first , ForwardIt last [, cmp ]); // \u4e3e\u4f8b\u5b50\uff0c\u6570\u7ec4 cout << max_element ( a , a + 6 ) - a << endl ; // \u8f93\u51fa\u6700\u5927\u503c\u7d22\u5f15 cout <<* max_element ( a , a + 6 ) << endl ; //\u8f93\u51fa\u6700\u5927\u503c // \u4e3e\u4f8b\u5b50\uff0cvector cout << max_element ( s . begin (), s . end ()) - s . begin () << endl ; // \u8f93\u51fa\u6700\u5927\u503c\u7d22\u5f15 cout <<* max_element ( s . begin (), s . end ()) << endl ; //\u8f93\u51fa\u6700\u5927\u503c // 1.3 accumulate #include<numeric>\uff1a\u4f5c\u7528\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u7d2f\u52a0\u6c42\u548c\uff0c\u53e6\u4e00\u4e2a\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u6570\u636e\u7684\u5904\u7406 int sum = accumulate ( vec . begin () , vec . end () , 0 ); // \u7b2c\u4e09\u4e2a\u5f62\u53c2\u5219\u662f\u7d2f\u52a0\u7684\u521d\u503c string sum = accumulate ( v . begin () , v . end () , string ( \" \" )); //\u4ece\u7a7a\u5b57\u7b26\u4e32\u5f00\u59cb\uff0c\u628avec\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u8fde\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 // 2.distance\u7684\u4f5c\u7528 #include <iterator> distance ( InputIterator first , InputIterator last ); // \u8be5\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u8868\u793a\u7684\u8303\u56f4\u5185\u5305\u542b\u5143\u7d20\u7684\u4e2a\u6570:[first,last),\u4e3e\u4f8b:std::distance(v.begin(),v.end()) // 3.unique\uff1a\u5220\u9664\u76f8\u90bb\u7684\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u4e00\u822c\u662f\u6392\u5e8f\u540e\u4f7f\u7528 iterator unique ( iterator it_1 , iterator it_2 ); // \u5bf9[it_1,it_2)\u8303\u56f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u53bb\u91cd\uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668:\u53bb\u91cd\u540e\u5bb9\u5668\u4e2d\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u6ce8:\u5355\u7eaf\u7684\u4f7f\u7528unique\u51fd\u6570\u7684\u8bdd\uff0c\u5bb9\u5668\u7684\u957f\u5ea6\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u53ea\u662f\u5143\u7d20\u7684\u4f4d\u7f6e\u53d1\u751f\u4e86\u53d8\u5316 vector < int > data = { 1 , 3 , 3 , 4 , 5 , 6 , 6 , 7 }; unique ( data . begin (), data . end ()); // {1 3 4 5 6 7 6 7 },\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u90fd\u79fb\u5230\u4e86\u524d\u9762\uff0c\u540e\u9762\u5143\u7d20\u6ca1\u6539\u53d8\uff0c\u60ca\u8bb6\uff01\uff01\uff01 // \u5982\u679c\u60f3\u5220\u9664\u5143\u7d20\uff0c\u4e0d\u4fdd\u7559\u540e\u9762\u5143\u7d20\u5982\u4f55\u505a\uff1f new_end = unique ( data . begin (), data . end ()); // \u6ce8\u610f\u8fd4\u56de\u503c\uff0c\u4e0a\u9762\u6709\u89e3\u91ca data . erase ( new_end , data . end ()); // \u5220\u9664\u540e\u9762\u7684\u5143\u7d20\u5373\u53ef //4.transform,op\uff1a\u5c31\u662f\u51fd\u6570\u540d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7c7b\u4f3c\u4e8epython\u7684map\u64cd\u4f5c,\u4e3a\u4fdd\u8bc1\u5143\u7d20\u4e2a\u6570\u76f8\u7b49\uff0cfir.resize(res.size) // \u5f53\u7136\uff0c\u5982\u679c\u662f\u7b80\u5355\u7684\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528 for_each\u4ee3\u66ff #include <algorithm> // \u4e00\u5143\u64cd\u4f5c\uff1a\u5c06op\u5e94\u7528\u4e8e[first1, last1)\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06\u6bcf\u4e2a\u64cd\u4f5c\u8fd4\u56de\u7684\u503c\u5b58\u50a8\u5728\u4ee5result\u5f00\u5934\u7684\u8303\u56f4\u5185\uff0c\u5f53\u7136\uff0c\u8fd9\u4e2aresult\u53ef\u4ee5\u662ffirst.begin(),\u5373\u6267\u884creplace\u64cd\u4f5c template < class InputIterator , class OutputIterator , class UnaryOperation > OutputIterator transform ( InputIterator first1 , InputIterator last1 , OutputIterator result , UnaryOperation op ); // \u4e8c\u5143\u64cd\u4f5c:\u4f7f\u7528[first1, last1)\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u8c03\u7528binary_op,\u5e76\u4ee5first2\u5f00\u5934\u7684\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\uff08\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u548c1\u76f8\u540c\uff09\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8c03\u7528binary_op,\u6bcf\u6b21\u8c03\u7528\u8fd4\u56de\u7684\u503c\u90fd\u5b58\u50a8\u5728\u4ee5result\u5f00\u5934\u7684\u8303\u56f4\u5185\u3002 template < class InputIterator1 , class InputIterator2 , class OutputIterator , class BinaryOperation > OutputIterator transform ( InputIterator1 first1 , InputIterator1 last1 , InputIterator2 first2 , OutputIterator result , BinaryOperation binary_op ); // 6.\u4e8c\u5206\u67e5\u627e Binary_search/lower_bound/upper_bound:\u8be5\u51fd\u6570\u4ec5\u9002\u7528\u4e8e\u201c\u5df2\u6392\u597d\u5e8f\u201d\u7684\u5e8f\u5217\uff1a\u5e76\u4e0d\u662f\u4e25\u683c\u7684\u964d\u5e8f\u6d3b\u5347\u5e8f\uff0c\u53ea\u8981\u6ee1\u8db3\u201c\u6240\u6709\u4ee4 element<val\uff08\u6216\u8005 comp(val, element\uff09\u6210\u7acb\u7684\u5143\u7d20\u90fd\u4f4d\u4e8e\u4e0d\u6210\u7acb\u5143\u7d20\u7684\u524d\u9762\uff08\u5176\u4e2d element \u4e3a\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5143\u7d20\uff09\u201d\u5373\u53ef\u3002 // 6.1 Binary search\uff1a\u7528\u4e8e\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u662f\u5426\u5305\u542b\u76ee\u6807\u503c\u3002 #include <algorithm> //\u67e5\u627e [first, last) \u533a\u57df\u5185\u662f\u5426\u5305\u542b val bool binary_search ( ForwardIterator first , ForwardIterator last , const T & val ); //\u6839\u636e comp \u6307\u5b9a\u7684\u89c4\u5219\uff0c\u67e5\u627e [first, last) \u533a\u57df\u5185\u662f\u5426\u5305\u542b val,comp:\u6b64\u53c2\u6570\u53ef\u63a5\u6536\u4e00\u4e2a\u5305\u542b 2 \u4e2a\u5f62\u53c2\uff08\u7b2c\u4e00\u4e2a\u5f62\u53c2\u503c\u4e3a val\uff09\u4e14\u8fd4\u56de\u503c\u4e3a bool \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u5bf9\u8c61\u3002 bool binary_search ( ForwardIterator first , ForwardIterator last , const T & val , Compare comp ); // 6.2 lower_bound():\u7528\u4e8e\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e\u76ee\u6807\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u67e5\u627e\u6210\u529f\u65f6\uff0c\u8fed\u4ee3\u5668\u6307\u5411\u627e\u5230\u7684\u5143\u7d20\uff1b\u53cd\u4e4b\uff0c\u5982\u679c\u67e5\u627e\u5931\u8d25\uff0c\u8fed\u4ee3\u5668\u7684\u6307\u5411\u548c last \u8fed\u4ee3\u5668\u76f8\u540c\u3002 #include <algorithm> //\u5728 [first, last) \u533a\u57df\u5185\u67e5\u627e\u4e0d\u5c0f\u4e8e val \u7684\u5143\u7d20 ForwardIterator lower_bound ( ForwardIterator first , ForwardIterator last , const T & val ); //\u5728 [first, last) \u533a\u57df\u5185\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408 comp \u89c4\u5219\u7684\u5143\u7d20\uff0ccomp:\u6b64\u53c2\u6570\u53ef\u63a5\u6536\u4e00\u4e2a\u5305\u542b 2 \u4e2a\u5f62\u53c2\uff08\u7b2c\u4e00\u4e2a\u5f62\u53c2\u503c\u59cb\u7ec8\u4e3a val\uff09\u4e14\u8fd4\u56de\u503c\u4e3a bool \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u5bf9\u8c61\u3002 ForwardIterator lower_bound ( ForwardIterator first , ForwardIterator last , const T & val , Compare comp ); // 6.3 upper_bound\uff1a\u5728\u6307\u5b9a\u8303\u56f4\u5185\u67e5\u627e\u5927\u4e8e\u76ee\u6807\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 #include <algorithm> //\u67e5\u627e[first, last)\u533a\u57df\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e val \u7684\u5143\u7d20\u3002 ForwardIterator upper_bound ( ForwardIterator first , ForwardIterator last , const T & val ); //\u67e5\u627e[first, last)\u533a\u57df\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408 comp \u89c4\u5219\u7684\u5143\u7d20\uff0ccomp:\u6b64\u53c2\u6570\u53ef\u63a5\u6536\u4e00\u4e2a\u5305\u542b 2 \u4e2a\u5f62\u53c2\uff08\u7b2c\u4e00\u4e2a\u5f62\u53c2\u503c\u4e3a val\uff09\u4e14\u8fd4\u56de\u503c\u4e3a bool \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u5bf9\u8c61\u3002 ForwardIterator upper_bound ( ForwardIterator first , ForwardIterator last , const T & val , Compare comp ); string \u975e\u5e38\u5168\u7684\u603b\u7ed3 // #include<string>\uff0c\u5e38\u7528\u51fd\u6570 // 1.1 \u521d\u59cb\u5316 string s1 ; // \u7a7a\u5b57\u7b26\u4e32 string s2 ( 10 , '$' ); // 10\u4e2a$ string s3 ( \"hello world\" ); string s4 ( s3 ); string s5 = \"Hahaha\" ; s5 . clear (); // \u6e05\u7a7a // string--to--char* const char * charstring = s5 . c_str (); // \u4f7f\u7528c_str()\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u65f6\uff0cconst\u5173\u952e\u5b57\u662f\u5fc5\u987b\u7684 // \u5b57\u7b26\u4e32\u6bd4\u8f83 if ( 0 == s5 . compare ( \"Hahaha\" )) {...} // 1.2 \u5e38\u7528\u7b80\u5355\u65b9\u6cd5 int s5 . size (); //\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5927\u5c0f int s5 . length (); // \u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 bool s5 . empty (); // \u5224\u65ad\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a void s5 . resize ( int len , char c ); //\u628a\u5b57\u7b26\u4e32\u5f53\u524d\u5927\u5c0f\u7f6e\u4e3alen\uff0c\u5e76\u7528\u5b57\u7b26c\u586b\u5145\u4e0d\u8db3\u7684\u90e8\u5206 int s5 . capacity (); // \u5f53\u524d\u7684\u5bb9\u91cf\uff0c\u5373string\u4e2d\u4e0d\u5fc5\u589e\u52a0\u5185\u5b58\u5373\u53ef\u5b58\u653e\u7684\u5143\u7d20\u4e2a\u6570\uff09 int s5 . max_size (); //\u8fd4\u56destring\u5bf9\u8c61\u4e2d\u53ef\u5b58\u653e\u7684\u6700\u5927\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 s5 . swap ( s3 ); // \u4ea4\u6362s3\u548cs5\u7684\u5b57\u7b26\u4e32 s5 . push_back ( 'A' ); // \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u7b26 s5 . append ( \"ABC\" ); // \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5fc5\u987b\u662f\u5b57\u7b26\u4e32 // \u5224\u65ad\u662f\u5426\u662f\u6570\u5b57\u6216\u5b57\u6bcd #include <ctype.h> isdigit (); // \u6570\u5b57\u8fd4\u56de\u975e0\uff0c\u975e\u6570\u5b57\u8fd4\u56de0\uff1b isalpha (); // \u5b57\u6bcd\u8fd4\u56de\u975e0\uff0c\u975e\u5b57\u6bcd\u8fd4\u56de0\uff1b // 1.3 insert/erase/replace/empty str . insert ( 2 , 3 , 'A' ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 3\u4e2a \u5b57\u7b26'A' str . insert ( 2 , \"ABC\" ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 \u5b57\u7b26\u4e32 \"ABC\" str . insert ( 2 , \"ABC\" , 1 ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 \u5b57\u7b26\u4e32 \"ABC\" \u4e2d \u524d1\u4e2a \u5b57\u7b26 str . insert ( 2 , \"ABC\" , 1 , 1 ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 \u5b57\u7b26\u4e32 \"ABC\" \u4e2d\u4ece\u4f4d\u7f6e 1 \u5f00\u59cb\u7684 1 \u4e2a\u5b57\u7b26 str . erase ( 2 ) // \u5220\u9664 \u4e0b\u68072 \u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u5168\u5220\u9664 str . erase ( 2 , 1 ) // \u5220\u9664 \u4e0b\u68072 \u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4e4b\u540e\u7684 1\u4e2a \u5220\u9664 str . clear () // \u5220\u9664 str \u6240\u6709 str . replace ( 2 , 4 , \"abcd\" ) // \u4ece \u4e0b\u68072 \u7684\u4f4d\u7f6e\uff0c\u66ff\u6362 4\u4e2a\u5b57\u8282 \uff0c\u4e3a\"abcd\" // 1.4 find(\u5411\u540e)/rfind(\u5411\u524d)\u7528\u6cd5\u76f8\u540c // \u8fd4\u56de\u503c\u662f\u627e\u5230\u7684\u8be5\u5185\u5bb9\u7684\u7b2c\u4e00\u4e2a\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8fd4\u56de string::npos size_t find ( const string & str , size_t pos = 0 ) const ; size_t find ( const char * s , size_t pos = 0 ) const ; size_t find ( const char * s , size_t pos , size_t n ) const ; size_t find ( char c , size_t pos = 0 ) const ; // \u4e3e\u4f8b\u5b50 str . find ( 'A' ) // \u67e5\u627e 'A' str . find ( 'B' , 1 ) // \u4ece \u4f4d\u7f6e1 \u5904\u5f00\u59cb\uff0c\u67e5\u627e'B' str . find ( \"ABC\" ) // \u67e5\u627e \"ABC\" str . find ( \"ABC\" , 1 , 2 ) // \u4ece \u4f4d\u7f6e1\u5f00\u59cb\u67e5\u627e 'ABC' \u7684\u524d 2\u4e2a \u5b57\u7b26 // 1.4.1 \u67e5\u627e\u662f\u5426\u5305\u542b\u6709\u5b50\u4e32\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\uff0cfind_first_of(\u5411\u540e)/find_last_of str . find_first_of ( \"abBc\" ) // \u67e5\u627e \"abBc\" \u548cstr \u76f8\u7b49\u7684\u4efb\u4f55\u5b57\u7b26\uff0c\"abBc\" \u4e2d\u6709\u5c31\u8fd4\u56de\u4f4d\u7f6e str . find_first_of ( \"abBc\" , 1 ) // \u67e5\u627e \"abBc\" \u548cstr \u76f8\u7b49\u7684\u4efb\u4f55\u5b57\u7b26\uff0c\u4ece \u4f4d\u7f6e1 \u5904\uff0c\u5f00\u59cb\u67e5\u627e\"abBc\" \u4e2d\u7684\u5b57\u7b26\uff0c\"abBc\" \u4e2d\u6709\u7684\u5c31\u8fd4\u56de\u4f4d\u7f6e str . find_first_of ( \"abBc\" , 1 , 2 ) // \u67e5\u627e \"abBc\" \u548cstr \u76f8\u7b49\u7684\u4efb\u4f55\u5b57\u7b26\uff0c\u4ece \u4f4d\u7f6e1 \u5904\uff0c\u5f00\u59cb\u67e5\u627e\"abBc\" \u7684\u524d 2\u4e2a \u5b57\u7b26\uff0c\"abBc\" \u4e2d\u6709\u7684\u5c31\u8fd4\u56de\u4f4d\u7f6e // 1.5 \u5b50\u4e32\u63d0\u53d6 str1 = str . substr ( 2 ) // \u63d0\u53d6\u5b50\u4e32\uff0c\u63d0\u53d6\u51fa str \u7684 \u4e0b\u6807\u4e3a2 \u5230\u672b\u5c3e\uff0c\u7ed9 str1 str1 = str . substr ( 2 , 3 ) // \u63d0\u53d6\u5b50\u4e32\uff0c\u63d0\u53d6\u51fa str \u7684 \u4e0b\u6807\u4e3a2 \u5f00\u59cb\uff0c\u63d0\u53d6\u4e09\u4e2a\u5b57\u8282\uff0c\u7ed9 str1 const char * s1 = str . data () // \u5c06string\u7c7b\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8fd4\u56de\u7ed9s1 char * s = new char [ 10 ] str . copy ( s , count , pos ) // \u5c06 str \u91cc\u7684 pos \u4f4d\u7f6e\u5f00\u59cb\uff0c\u62f7\u8d1d count\u4e2a \u5b57\u7b26,\u5b58\u5230 s \u91cc vector // vector:\u52a8\u6001\u6570\u7ec4\uff0c\u5728\u5185\u5b58\u4e2d\u6709\u8fde\u7eed\u5b58\u50a8\u7a7a\u95f4\uff0c\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c\u4f46\u63d2\u5165\u5220\u9664\u8f83\u6162 //\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 #include <vector> //1.\u5b9a\u4e49\u548c\u521d\u59cb\u5316 vector < int > vec1 ; //\u9ed8\u8ba4\u521d\u59cb\u5316\uff0cvec1\u4e3a\u7a7a vector < int > vec2 ( vec1 ); //\u4f7f\u7528vec1\u521d\u59cb\u5316vec2 vector < int > vec3 ( vec1 . begin (), vec1 . end ()); //\u4f7f\u7528vec1\u521d\u59cb\u5316vec2 vector < int > vec4 ( 10 ); //10\u4e2a\u503c\u4e3a0\u7684\u5143\u7d20 vector < int > vec5 ( 10 , 4 ); //10\u4e2a\u503c\u4e3a4\u7684\u5143\u7d20 //2.\u5e38\u7528\u64cd\u4f5c\u65b9\u6cd5 //2.1 \u6dfb\u52a0\u51fd\u6570 vec1 . push_back ( 100 ); //\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 vec1 . insert ( vec1 . begin () + 1 , 5 ); //\u5728vec1[1]\u5904\u63d2\u51655 vec1 . insert ( vec1 . begin () + 1 , 3 , 5 ); //\u5728vec1[1]\u5904\u63d2\u51653\u4e2a5 vec1 . insert ( vec1 . begin () + 1 , arr + 3 , arr + 6 ); //\u5728vec1[1]\u5904\u63d2\u5165\u6570\u7ec4arr\u7684\u7b2c\u4e09\u4e2a\u5230\u7b2c\u4e94\u4e2a\u6570 //2.2 \u5220\u9664\u51fd\u6570 vec1 . pop_back (); //\u5220\u9664\u672b\u5c3e\u5143\u7d20 vec1 . erase ( vec1 . begin (), vec1 . begin () + 2 ); //\u5220\u9664vec1[0]-vec1[2]\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u4e0d\u5305\u62ecvec1[2]\u5176\u4ed6\u5143\u7d20\u524d\u79fb vec1 . clear (); //\u6e05\u7a7a\u5143\u7d20\uff0c\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u5e76\u672a\u6d88\u5931\uff0c\u901a\u5e38\u4f7f\u7528swap()\u6765\u6e05\u7a7a vector < int > (). swap ( V ); //\u5229\u7528swap\u51fd\u6570\u548c\u4e34\u65f6\u5bf9\u8c61\u4ea4\u6362\u5185\u5b58\uff0c\u4ea4\u6362\u4ee5\u540e\uff0c\u4e34\u65f6\u5bf9\u8c61\u6d88\u5931\uff0c\u91ca\u653e\u5185\u5b58\u3002 //2.3 \u904d\u5386\u51fd\u6570 vec1 [ 0 ]; //\u53d6\u5f97\u7b2c\u4e00\u4e2a\u5143\u7d20 vec1 . at ( int pos ); //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 vec1 . front (); //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 vec1 . back (); //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 vector < int >:: iterator begin = vec1 . begin (); //\u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator end = vec1 . end (); //\u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff0c\u6307\u5411\u5411\u91cf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e vector < int >:: iterator rbegin = vec1 . rbegin (); //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator rend = vec1 . rend (); //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e for ( vector < int >:: iterator it = vec1 . begin (); it < vec1 . end (); it ++ ){ cout << * it << endl ; } // vector\u4e2d\u7684find\uff0cvector\u6ca1\u6709find\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528algorithm\u4e2d\u7684find\u4ee3\u66ff #include <algorithm> vector < int >:: iterator it = find ( vec . begin (), vec . end (), value ); if ( it != vec . end ()) cout <<* it << endl ; //2.4 \u5224\u65ad\u51fd\u6570 bool isEmpty = vec1 . empty (); //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a //2.5 \u5927\u5c0f\u51fd\u6570 int size = vec1 . size (); //\u5143\u7d20\u4e2a\u6570 vec1 . capacity (); //\u8fd4\u56de\u5bb9\u5668\u5f53\u524d\u80fd\u591f\u5bb9\u7eb3\u7684\u5143\u7d20\u4e2a\u6570 vec1 . max_size (); //\u8fd4\u56de\u5bb9\u5668\u6700\u5927\u7684\u53ef\u80fd\u5b58\u50a8\u7684\u5143\u7d20\u4e2a\u6570 //2.6 \u6539\u52a8\u51fd\u6570 vec1 . assign ( int n , const T & x ); //\u8d4bn\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u5230vec1\u4e2d\uff0c\u8fd9\u4f1a\u6e05\u9664\u6389vec1\u4e2d\u4ee5\u524d\u7684\u5185\u5bb9\u3002 vec1 . assign ( const_iterator first , const_iterator last ); //\u5f53\u524d\u5411\u91cf\u4e2d[first,last)\u4e2d\u5143\u7d20\u8bbe\u7f6e\u6210\u8fed\u4ee3\u5668\u6240\u6307\u5411\u91cf\u7684\u5143\u7d20\uff0c\u8fd9\u4f1a\u6e05\u9664\u6389vec1\u4e2d\u4ee5\u524d\u7684\u5185\u5bb9\u3002 queue & stack & deque // \u2460queque #include <queue> // queue<\u7c7b\u578b,[\u5bb9\u5668\u7c7b\u578b]> queue < int > q ; q . push ( x ); // \u5c06x\u63a5\u5230\u961f\u5217\u7684\u672b\u7aef q . size (); // \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 q . empty (); // \u961f\u5217\u662f\u5426\u4e3a\u7a7a q . front (); // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 q . back (); // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 q . pop (); // void,\u5f39\u51fa\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 // \u2461stack #include <stack> stack < int > sta ; sta . push ( x ); // \u5728\u6808\u9876\u589e\u52a0\u5143\u7d20 sta . top (); // \u8fd4\u56de\u6808\u9876\u5143\u7d20 sta . pop (); // \u79fb\u9664\u6808\u9876\u5143\u7d20 sta . size (); // \u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u6570\u76ee sta . empty (); // \u5806\u6808\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f // \u2462deque:\u53cc\u5411\u961f\u5217\u4e0d\u8bba\u5728\u5c3e\u90e8\u6216\u5934\u90e8\u63d2\u5165\u5143\u7d20\u901f\u5ea6\u8f83\u5feb\uff0c\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\u901f\u5ea6\u8f83\u6162 #include <deque> // \u5934\u6587\u4ef6 //1.\u58f0\u660e\u548c\u521d\u59cb\u5316 deque < type > deq ; // \u58f0\u660e\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3atype\u7684\u53cc\u7aef\u961f\u5217que deque < type > deq ( size ); // \u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3atype\u3001\u542b\u6709size\u4e2a\u9ed8\u8ba4\u503c\u521d\u59cb\u5316\u5143\u7d20\u7684\u7684\u53cc\u7aef\u961f\u5217que deque < type > deq ( size , value ); // \u58f0\u660e\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3atype\u3001\u542b\u6709size\u4e2avalue\u5143\u7d20\u7684\u53cc\u7aef\u961f\u5217que deque < type > deq ( mydeque ); // deq\u662fmydeque\u7684\u4e00\u4e2a\u526f\u672c deque < type > deq ( first , last ); // \u4f7f\u7528\u8fed\u4ee3\u5668first\u3001last\u8303\u56f4\u5185\u7684\u5143\u7d20\u521d\u59cb\u5316deq //2.\u5e38\u7528\u6210\u5458\u51fd\u6570 deq [ index ]; //\u7528\u6765\u8bbf\u95ee\u53cc\u5411\u961f\u5217\u4e2d\u5355\u4e2a\u7684\u5143\u7d20\u3002 deq . at ( index ); //\u7528\u6765\u8bbf\u95ee\u53cc\u5411\u961f\u5217\u4e2d\u5355\u4e2a\u7684\u5143\u7d20\u3002 deq . front (); //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 deq . back (); //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 deq . push_front ( x ); //\u628a\u5143\u7d20x\u63d2\u5165\u5230\u53cc\u5411\u961f\u5217\u7684\u5934\u90e8\u3002 deq . push_back ( x ); //\u628a\u5143\u7d20x\u63d2\u5165\u5230\u53cc\u5411\u961f\u5217\u7684\u5c3e\u90e8\u3002 deq . pop_front (); //\u5f39\u51fa\u53cc\u5411\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 deq . pop_back (); //\u5f39\u51fa\u53cc\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 list // list:\u53cc\u5411\u94fe\u8868\uff0c\u5feb\u901f\u7684\u63d2\u5165\u548c\u5220\u9664\uff0c\u4f46\u662f\u968f\u673a\u8bbf\u95ee\u5374\u6bd4\u8f83\u6162 #include <list> //1.\u5b9a\u4e49\u548c\u521d\u59cb\u5316 list < int > lst1 ; //\u521b\u5efa\u7a7alist list < int > lst2 ( 5 ); //\u521b\u5efa\u542b\u67095\u4e2a\u5143\u7d20\u7684list list < int > lst3 ( 3 , 2 ); //\u521b\u5efa\u542b\u67093\u4e2a\u5143\u7d20\u503c\u4e3a2\u7684list list < int > lst4 ( lst2 ); //\u4f7f\u7528lst2\u521d\u59cb\u5316lst4 list < int > lst5 ( lst2 . begin (), lst2 . end ()); //\u540clst4 //2.\u5e38\u7528\u64cd\u4f5c\u51fd\u6570 lst1 . assign ( lst2 . begin (), lst2 . end ()); //\u7ed9list\u8d4b\u503c\u4e3alst2 lst1 . back (); //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 lst1 . begin (); //\u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 lst1 . clear (); //\u5220\u9664\u6240\u6709\u5143\u7d20 lst1 . empty (); //\u5982\u679clist\u662f\u7a7a\u7684\u5219\u8fd4\u56detrue lst1 . end (); //\u8fd4\u56de\u672b\u5c3e\u7684\u8fed\u4ee3\u5668 lst1 . erase (); //\u5220\u9664\u4e00\u4e2a\u5143\u7d20 lst1 . front (); //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 lst1 . insert (); //\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u5230list\u4e2d lst1 . max_size (); //\u8fd4\u56delist\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u6570\u91cf lst1 . merge (); //\u5408\u5e76\u4e24\u4e2alist lst1 . pop_back (); //\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 lst1 . pop_front (); //\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 lst1 . push_back (); //\u5728list\u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 lst1 . push_front (); //\u5728list\u7684\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 lst1 . rbegin (); //\u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u9006\u5411\u8fed\u4ee3\u5668 lst1 . remove (); //\u4ecelist\u5220\u9664\u5143\u7d20 lst1 . remove_if (); //\u6309\u6307\u5b9a\u6761\u4ef6\u5220\u9664\u5143\u7d20 lst1 . rend (); //\u6307\u5411list\u672b\u5c3e\u7684\u9006\u5411\u8fed\u4ee3\u5668 lst1 . resize (); //\u6539\u53d8list\u7684\u5927\u5c0f lst1 . reverse (); //\u628alist\u7684\u5143\u7d20\u5012\u8f6c lst1 . size (); //\u8fd4\u56delist\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 lst1 . sort (); //\u7ed9list\u6392\u5e8f lst1 . splice (); //\u5408\u5e76\u4e24\u4e2alist lst1 . swap (); //\u4ea4\u6362\u4e24\u4e2alist lst1 . unique (); //\u5220\u9664list\u4e2d\u76f8\u90bb\u91cd\u590d\u7684\u5143\u7d20 map // map:\u4e00\u79cd\u952e\u503c\u5bf9\u5bb9\u5668.map\u5185\u90e8\u81ea\u5efa\u4e00\u9897\u7ea2\u9ed1\u6811(\u4e00\u79cd\u975e\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u5e73\u8861\u4e8c\u53c9\u6811)\uff0c\u8fd9\u9897\u6811\u5177\u6709\u5bf9\u6570\u636e\u81ea\u52a8\u6392\u5e8f\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5728map\u5185\u90e8\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u6709\u5e8f\u7684\u4e14\u552f\u4e00\u7684\u3002 #include <map> //1.\u5b9a\u4e49\u4e0e\u521d\u59cb\u5316 map < int , string > ID_Name ; // \u4f7f\u7528{}\u8d4b\u503c\u662f\u4ecec++11\u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u65f6\u4f1a\u62a5\u9519\uff0c\u5982visual studio 2012 map < int , string > ID_Name = {{ 2015 , \"Jim\" },{ 2016 , \"Tom\" },{ 2017 , \"Bob\" }}; map < int , string > map1 ; // 2.\u5c5e\u6027 int key = map1 -> first ; //\u53d6\u5f97key string value = map1 -> second ; //\u53d6\u5f97value // 3.\u57fa\u672c\u64cd\u4f5c\u51fd\u6570 map1 . begin (); // \u6307\u5411\u8d77\u59cb map1 . end (); // \u6307\u5411\u672b\u5c3e map1 . rbegin (); // \u6307\u5411\u672b\u5c3e map1 . rend (); // \u6307\u5411\u8d77\u59cb map1 . size (); // \u8fd4\u56de\u5bb9\u5668\u5927\u5c0f map1 . max_size (); // \u8ba1\u7b97map\u5bb9\u5668\u7684\u6700\u5927\u957f\u5ea6 map1 . empty (); // \u5224\u65ad\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a map1 . find ( const key_type & k ); // \u8fd4\u56dekey\u6240\u5728\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0ckey\u4e0d\u5b58\u5728\u8fd4\u56demap1.end(); // if(map1.find(k) != map1.end()) { ... } map1 . count ( key ); // \u8fd4\u56de\u7684\u662f\u88ab\u67e5\u627e\u5143\u7d20\u7684\u4e2a\u6570\u3002\u5982\u679c\u6709\uff0c\u8fd4\u56de1\uff1b\u5426\u5219\uff0c\u8fd4\u56de0\u3002\u6ce8\u610f\uff0cmap\u4e2d\u4e0d\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u6240\u4ee5\u8fd4\u56de\u503c\u53ea\u80fd\u662f1\u62160\u3002 map1 . clear (); // \u5220\u9664\u6240\u6709\u5143\u7d20 // 3.1 insert\u63d2\u5165\u5143\u7d20 map1 . insert ( std :: pair < int , string > ( 100 , \"hello\" )); // \u76f4\u63a5\u63d2\u5165\u952e\u503c\u5bf9 map1 . insert ( map1 . begin (), std :: pair < int , string > ( 100 , \"hello\" )); // \u901a\u8fc7\u8fed\u4ee3\u5668\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165 // 3.2 \u5220\u9664\u5143\u7d20 map1 . erase ( key ); // \u901a\u8fc7key\u5220\u9664 map1 . erase ( map1 . find ( key1 )); // \u901a\u8fc7\u8fed\u4ee3\u5668\u5220\u9664\u67d0\u503c map1 . erase ( map1 . begin (), map1 . end ()); // \u901a\u8fc7\u8fed\u4ee3\u5668\u5220\u9664 == map1.clear() // for_each()\u904d\u5386map\uff0c\u6ce8\u610flambda\u53c2\u6570\u8981\u5199\u6210pair\u7c7b\u578b\uff0c\u56e0\u4e3amap\u8fd4\u56de\u7684\u662f\u4e00\u5bf9\u6570\u636e\uff0c\u662fpair\u7c7b\u578b\u7684 for_each ( map1 . begin (), map1 . end (),[]( const pair < int , string > & it ){ cout << it . first << \":\" << it . second << endl ;}) set // set\uff1aset\u7684\u542b\u4e49\u662f\u96c6\u5408\uff0c\u5b83\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u5bb9\u5668\uff0c\u65e0\u91cd\u590d\u5143\u7d20 // \u91cc\u9762\u7684\u5143\u7d20\u90fd\u662f\u6392\u5e8f\u597d\u7684\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u7b49\u64cd\u4f5c\uff0c\u5c31\u50cf\u4e00\u4e2a\u96c6\u5408\u4e00\u6837\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u4e25\u683c\u5728logn\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3clist\u3002 #include <set> set < int > s ; s . insert ( val ); // \u63d2\u5165\u6570\u503c\u5230\u96c6\u5408\uff0c\u5982\u6709\u91cd\u590d\u5143\u7d20\uff0c\u5219\u81ea\u52a8\u6392\u91cd,\u8fd4\u56de\u503c\u662fpair<set<int>::iterator,bool>\uff0cbool\u6807\u5fd7\u7740\u63d2\u5165\u662f\u5426\u6210\u529f\uff0c\u800citerator\u4ee3\u8868\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u82e5key_value\u5df2\u7ecf\u5728set\u4e2d\uff0c\u5219iterator\u8868\u793a\u7684key_value\u5728set\u4e2d\u7684\u4f4d\u7f6e\u3002 pair < set < int >:: iterator , bool > pr ; pr = s . insert ( 5 ); s . insert ( first , second ); // \u5c06\u5b9a\u4f4d\u5668first\u5230second\u4e4b\u95f4\u7684\u5143\u7d20\u63d2\u5165\u5230set\u4e2d\uff0c\u8fd4\u56de\u503c\u662fvoid. int a [] = { 1 , 2 , 3 }; s . insert ( a , a + 3 ); s . begin (); // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u8981\u8f93\u51fa\u7b2c\u4e00\u4e2a\u503c:*s.begin() s . end (); // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5f53\u524dset\u672b\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 s . rbegin () // \u8fd4\u56de\u7684\u503c\u548cend()\u76f8\u540c s . rend () // \u8fd4\u56de\u7684\u503c\u548cbegin()\u76f8\u540c s . clear (); // \u6e05\u9664\u6240\u6709\u5143\u7d20 s . count (); // \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570,\u56e0\u4e3a\u4e0d\u80fd\u91cd\u590d\uff0c\u6240\u4ee5\u53ea\u67090/1,\u8fd9\u6837\u5c31\u6210\u4e86\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e86 s . empty (); // \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue s . equal_range ( val ); //\u8fd4\u56de\u4e00\u5bf9pair\u7c7b\u578b\u7684\u5b9a\u4f4d\u5668,\u7b2c\u4e00\u4e2a\u8868\u793a>=val,\u7b2c\u4e8c\u4e2a\u8868\u793a>val,\u6709\u4e00\u4e2a\u8fd4\u56de\u5931\u8d25\uff0c\u5c31\u7b49\u4e8eend()\u7684\u503c\u3002 pair < set < int >:: const_iterator , set < int >:: const_iterator > pr ; pr = s . equal_range ( 3 ); cout << \"\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e 3 \u7684\u6570\u662f \uff1a\" <<* pr . first << endl ; cout << \"\u7b2c\u4e00\u4e2a\u5927\u4e8e 3\u7684\u6570\u662f \uff1a \" <<* pr . second << endl ; // set\u4e2d\u7684\u5220\u9664\u64cd\u4f5c\u662f\u4e0d\u8fdb\u884c\u4efb\u4f55\u7684\u9519\u8bef\u68c0\u67e5\u7684\uff0c\u6bd4\u5982\u5b9a\u4f4d\u5668\u7684\u662f\u5426\u5408\u6cd5\u7b49\u7b49\uff0c\u6240\u4ee5\u7528\u7684\u65f6\u5019\u81ea\u5df1\u4e00\u5b9a\u8981\u6ce8\u610f\u3002 s . erase ( iterator ) //\u5220\u9664\u5b9a\u4f4d\u5668iterator\u6307\u5411\u7684\u503c s . erase ( first , second ) //\u5220\u9664\u5b9a\u4f4d\u5668first\u548csecond\u4e4b\u95f4\u7684\u503c s . erase ( key_value ) //\u5220\u9664\u952e\u503ckey_value\u7684\u503c //\u7b2c\u4e00\u79cd\u5220\u9664 s . erase ( s . begin ()); //\u7b2c\u4e8c\u79cd\u5220\u9664 first = s . begin (); second = s . begin (); second ++ ; second ++ ; s . erase ( first , second ); //\u7b2c\u4e09\u79cd\u5220\u9664 s . find ( val ) //\u8fd4\u56de\u7ed9\u5b9a\u503c\u503c\u5f97\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u6ca1\u627e\u5230\u5219\u8fd4\u56deend()\u3002 s . get_allocator () //\u2013\u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668 s . insert () //\u2013\u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 s . lower_bound () //\u2013\u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s . key_comp () //\u2013\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570 s . max_size () //\u2013\u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s . size () //\u2013\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s . swap () //\u2013\u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s . lower_bound ( key_value ) // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey_value\u7684\u8fed\u4ee3\u5668 s . upper_bound ( key_value ) // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey_value\u7684\u8fed\u4ee3\u5668 s . value_comp (); //\u2013\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570 // \u904d\u5386 set < int >:: iterator it ; for ( it = s . begin (); it != s . end (); it ++ ){ cout <<* it << endl ; } \u591a\u7ebf\u7a0b \u00b6 \u591a\u7ebf\u7a0b\u662f\u591a\u4efb\u52a1\u5904\u7406\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6709\u57fa\u4e8e\u8fdb\u7a0b\u548c\u57fa\u4e8e\u7ebf\u7a0b\u7684\u4e24\u79cd\u7c7b\u578b\u7684\u591a\u4efb\u52a1\u5904\u7406\u65b9\u5f0f\u3002 \u57fa\u4e8e\u8fdb\u7a0b\u7684\u591a\u4efb\u52a1\u5904\u7406\u662f\u7a0b\u5e8f\u7684\u5e76\u53d1\u6267\u884c\u3002 \u57fa\u4e8e\u7ebf\u7a0b\u7684\u591a\u4efb\u52a1\u5904\u7406\u662f\u540c\u4e00\u7a0b\u5e8f\u7684\u7247\u6bb5\u7684\u5e76\u53d1\u6267\u884c\u3002 \u4f7f\u7528\u65f6\u9700\u8981#include \u5934\u6587\u4ef6\uff0c\u8be5\u5934\u6587\u4ef6\u4e3b\u8981\u5305\u542b\u4e86\u5bf9\u7ebf\u7a0b\u7684\u7ba1\u7406\u7c7bstd::thread\u4ee5\u53ca\u5176\u4ed6\u7ba1\u7406\u7ebf\u7a0b\u76f8\u5173\u7684\u7c7b // \u666e\u901a\u7528\u6cd5 #include <iostream> #include <thread> using namespace std ; void output ( int i ) { cout << i << endl ; } int main () { for ( uint8_t i = 0 ; i < 4 ; i ++ ) { //\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0bt\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8c03\u7528\u7684\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u4f20\u9012\u7684\u53c2\u6570 thread t ( output , i ); // \u8f93\u51fa\u7ed3\u679c\u4e0d\u4e00\u5b9a\u662f\u987a\u5e8f\u8f93\u51fa //\u8868\u793a\u5141\u8bb8\u8be5\u7ebf\u7a0b\u5728\u540e\u53f0\u8fd0\u884c t . detach (); } return 0 ; } // \u7ebf\u7a0b\u7ba1\u7406:\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u800c\u6bcf\u4e2a\u8fdb\u7a0b\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u9664\u4e86\u4e3b\u7ebf\u7a0b\u5916\uff0c\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u8fd8\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5b50\u7ebf\u7a0b\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u9700\u8981\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\uff0c\u5165\u53e3\u51fd\u6570\u8fd4\u56de\u9000\u51fa\uff0c\u8be5\u7ebf\u7a0b\u4e5f\u4f1a\u9000\u51fa\uff0c\u4e3b\u7ebf\u7a0b\u5c31\u662f\u4ee5main\u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\u51fd\u6570\u7684\u7ebf\u7a0b\u3002 // \u542f\u52a8\u7ebf\u7a0b do_task (); std :: thread ( do_task ); // std::thread\u7684\u6784\u9020\u51fd\u6570\u9700\u8981\u7684\u662f\u53ef\u8c03\u7528\uff08callable\uff09\u7c7b\u578b\uff0c\u9664\u4e86\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u8c03\u7528\u4f8b\u5982\uff1alambda\u8868\u8fbe\u5f0f\u3001\u91cd\u8f7d\u4e86()\u8fd0\u7b97\u7b26\u7684\u7c7b\u7684\u5b9e\u4f8b\u3002 thread t ( output ); //\u5047\u8bbe\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u4e14\u51fd\u6570\u540d\u4e3aoutput\uff0c\u5219\u6b64\u5904\u53ef\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u8be5\u51fd\u6570 //\u5f53\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u540e\uff0c\u4e00\u5b9a\u8981\u5728\u8be5\u7ebf\u7a0bthread\u9500\u6bc1\u524d\uff0c\u8c03\u7528t.join()\u6216\u8005t.detach()\uff0c\u786e\u5b9a\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7b49\u5f85\u7ebf\u7a0b\u6267\u884c\u7ed3\u675f * detach\u65b9\u5f0f \uff0c\u542f\u52a8\u7684\u7ebf\u7a0b\u81ea\u4e3b\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u5f53\u524d\u7684\u4ee3\u7801\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff0c\u4e0d\u7b49\u5f85\u65b0\u7ebf\u7a0b\u7ed3\u675f\u3002\u5728\u4ee5 detach\u7684\u65b9\u5f0f\u6267\u884c\u7ebf\u7a0b\u65f6 \uff0c\u8981\u5c06\u7ebf\u7a0b\u8bbf\u95ee\u7684\u5c40\u90e8\u6570\u636e\u590d\u5236\u5230\u7ebf\u7a0b\u7684\u7a7a\u95f4\uff08\u4f7f\u7528\u6309\u503c\u4f20\u9012\uff09\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u7ebf\u7a0b\u6ca1\u6709\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u6216\u8005\u6307\u9488\uff0c\u9664\u975e\u4f60\u80fd\u80af\u5b9a\u8be5\u7ebf\u7a0b\u4f1a\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u524d\u6267\u884c\u7ed3\u675f\u3002 * join\u65b9\u5f0f \uff0c\u7b49\u5f85\u5173\u8054\u7684\u7ebf\u7a0b\u5b8c\u6210\uff0c\u624d\u4f1a\u7ee7\u7eed\u6267\u884c join () \u540e\u7684\u4ee3\u7801\u3002 // \u5f02\u5e38\u60c5\u51b5\u4e0b\u7b49\u5f85\u7ebf\u7a0b\u5b8c\u6210:\u4e3a\u4e86\u907f\u514d\u4e3b\u7ebf\u7a0b\u51fa\u73b0\u5f02\u5e38\u65f6\u5c06\u5b50\u7ebf\u7a0b\u7ec8\u7ed3\uff0c\u5c31\u8981\u4fdd\u8bc1\u5b50\u7ebf\u7a0b\u5728\u51fd\u6570\u9000\u51fa\u524d\u5b8c\u6210\uff0c\u5373\u5728\u51fd\u6570\u9000\u51fa\u524d\u8c03\u7528join()\u3002 // \u65b9\u5f0f\u4e00 void func () { thread t ([]{ cout << \"hello C++ 11\" << endl ; }); try { do_something_else (); } catch (...) { t . join (); throw ; } t . join (); } // \u65b9\u5f0f\u4e8c:\u8d44\u6e90\u83b7\u53d6\u5373\u521d\u59cb\u5316\uff08RAII\uff09 // \u65e0\u8bba\u662f\u4f55\u79cd\u60c5\u51b5\uff0c\u5f53\u51fd\u6570\u9000\u51fa\u65f6\uff0c\u5bf9\u8c61guard\u8c03\u7528\u5176\u6790\u6784\u51fd\u6570\u9500\u6bc1\uff0c\u4ece\u800c\u80fd\u591f\u4fdd\u8bc1join\u4e00\u5b9a\u4f1a\u88ab\u8c03\u7528\u3002 class thread_guard { private : thread & t ; public : /*\u52a0\u5165explicit\u9632\u6b62\u9690\u5f0f\u8f6c\u6362\uff0cexplicit\u4ec5\u53ef\u52a0\u5728\u5e26\u4e00\u4e2a\u53c2\u6570\u7684\u6784\u9020\u65b9\u6cd5\u4e0a\uff0c\u5982\uff1aDemo test; test = 12.2; \u8fd9\u6837\u7684\u8c03\u7528\u5c31\u76f8\u5f53\u4e8e\u628a12.2\u9690\u5f0f\u8f6c\u6362\u4e3aDemo\u7c7b\u578b\uff0c\u52a0\u5165explicit\u5c31\u7981\u6b62\u4e86\u8fd9\u79cd\u8f6c\u6362\u3002*/ explicit thread_guard ( thread & _t ) { t = _t ; } ~ thread_guard () { if ( t . joinable ()) t . join (); } thread_guard ( const thread_guard & ) = delete ; //\u5220\u9664\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570 thread_guard & operator = ( const thread_guard & ) = delete ; //\u5220\u9664\u9ed8\u8ba4\u8d4b\u503c\u8fd0\u7b97\u7b26 }; void func (){ thread t ([]{ cout << \"Hello thread\" << endl ; }); thread_guard guard ( t ); } //\u7ebf\u7a0b\u4e92\u65a5(std::mutex):\u901a\u8fc7mutex\u53ef\u4ee5\u65b9\u4fbf\u7684\u5bf9\u4e34\u754c\u533a\u57df\u52a0\u9501\uff0cstd::mutex\u7c7b\u5b9a\u4e49\u4e8emutex\u5934\u6587\u4ef6\uff0c\u662f\u7528\u4e8e\u4fdd\u62a4\u5171\u4eab\u6570\u636e\u907f\u514d\u4ece\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u7684\u540c\u6b65\u539f\u8bed\uff0c\u5b83\u63d0\u4f9b\u4e86lock\uff0ctry_lock\uff0cunlock\u7b49\u51e0\u4e2a\u63a5\u53e3 std :: mutex mtx ; mtx . lock () do_something ...; //\u5171\u4eab\u7684\u6570\u636e mtx . unlock (); // mutex\u7684lock\u548cunlock\u5fc5\u987b\u6210\u5bf9\u8c03\u7528\uff0clock\u4e4b\u540e\u5fd8\u8bb0\u8c03\u7528unlock\u5c06\u662f\u975e\u5e38\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u518d\u6b21lock\u65f6\u4f1a\u9020\u6210\u6b7b\u9501\u3002\u6b64\u65f6\u4f7f\u7528\u7c7b\u6a21\u677fstd::lock_guard\uff0c\u901a\u8fc7RAII\u673a\u5236\u5728\u5176\u4f5c\u7528\u57df\u5185\u5360\u6709mutex\uff0c\u5f53\u7a0b\u5e8f\u6d41\u7a0b\u79bb\u5f00\u521b\u5efalock_guard\u5bf9\u8c61\u7684\u4f5c\u7528\u57df\u65f6\uff0clock_guard\u5bf9\u8c61\u88ab\u81ea\u52a8\u9500\u6bc1\u5e76\u91ca\u653emutex\u3002 std :: mutex mtx ; std :: lock_guard < std :: mutex > guard ( mtx ); do_something ...; //\u5171\u4eab\u7684\u6570\u636e // \u5411\u7ebf\u7a0b\u4f20\u9012\u53c2\u6570\uff1a\u5411\u7ebf\u7a0b\u8c03\u7528\u7684\u51fd\u6570\u53ea\u9700\u8981\u5728\u6784\u9020thread\u7684\u5b9e\u4f8b\u65f6\uff0c\u4f9d\u6b21\u4f20\u5165\u5373\u53ef\u3002 // \u8f6c\u79fb\u7ebf\u7a0b\u7684\u6240\u6709\u6743.thread\u662f\u53ef\u79fb\u52a8\u7684(movable)\u7684\uff0c\u4f46\u4e0d\u53ef\u590d\u5236(copyable)\u3002\u53ef\u4ee5\u901a\u8fc7move\u6765\u6539\u53d8\u7ebf\u7a0b\u7684\u6240\u6709\u6743\uff0c\u7075\u6d3b\u7684\u51b3\u5b9a\u7ebf\u7a0b\u5728\u4ec0\u4e48\u65f6\u5019join\u6216\u8005detach\u3002 thread t1 ( f1 ); thread t3 ( move ( t1 )); // \u5c06\u7ebf\u7a0b\u4ecet1\u8f6c\u79fb\u7ed9t3,\u8fd9\u65f6\u5019t1\u5c31\u4e0d\u518d\u62e5\u6709\u7ebf\u7a0b\u7684\u6240\u6709\u6743\uff0c\u8c03\u7528t1.join\u6216t1.detach\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u8981\u4f7f\u7528t3\u6765\u7ba1\u7406\u7ebf\u7a0b\u3002\u8fd9\u4e5f\u5c31\u610f\u5473\u7740thread\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u6216\u8005\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u80fd\u591f\u66f4\u4e3a\u65b9\u4fbf\u7684\u7ba1\u7406\u7ebf\u7a0b\u3002 // \u7ebf\u7a0b\u6807\u8bc6\u7684\u83b7\u53d6:\u7ebf\u7a0b\u7684\u6807\u8bc6\u7c7b\u578b\u4e3astd::thread::id\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u5f97\u5230\u7ebf\u7a0b\u7684id * \u901a\u8fc7 thread\u7684\u5b9e\u4f8b\u8c03\u7528get_id () \u76f4\u63a5\u83b7\u53d6 * \u5728\u5f53\u524d\u7ebf\u7a0b\u4e0a\u8c03\u7528 this_thread :: get_id () \u83b7\u53d6 \u6587\u4ef6\u548c\u6d41 \u00b6 // \u8fd9\u4e24\u4e2a\u5934\u6587\u4ef6\u5fc5\u987b\u5199\u4e0a #include <iostream> #include <fstream> // open() \u6210\u5458\u51fd\u6570\u7684\u7b2c\u4e00\u53c2\u6570\u6307\u5b9a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9a\u4e49\u6587\u4ef6\u88ab\u6253\u5f00\u7684\u6a21\u5f0f void open ( const char * filename , ios :: openmode mode ); * ios :: app --> \u8ffd\u52a0\u6a21\u5f0f\uff0c\u6240\u6709\u5199\u5165\u90fd\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e * ios :: ate --> \u6587\u4ef6\u6253\u5f00\u540e\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e * ios :: in --> \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u8bfb\u53d6 * ios :: out --> \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u5199\u5165 * ios :: trunc --> \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u4e4b\u524d\u88ab\u622a\u65ad\uff0c\u5373\u628a\u6587\u4ef6\u957f\u5ea6\u8bbe\u7f6e\u4e3a 0 //\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5e0c\u671b\u622a\u65ad\u6587\u4ef6\uff0c\u4ee5\u9632\u6587\u4ef6\u5df2\u5b58\u5728 ofstream outfile ; outfile . open ( \"file.dat\" , ios :: out | ios :: trunc ); //\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199 fstream afile ; afile . open ( \"file.dat\" , ios :: out | ios :: in ); // \u5173\u95ed\u6587\u4ef6:close() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002 fstream afile ; afile . open ( \"file.dat\" , ios :: out | ios :: in ); afile . close (); // \u5199\u5165\u4e0e\u8bfb\u53d6\u6587\u4ef6:\u4f7f\u7528\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 << \uff09\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u4f7f\u7528\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\uff08 >> \uff09\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u3002 int main () { char data [ 100 ]; // \u4ee5\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ofstream outfile ; outfile . open ( \"afile.dat\" ); cout << \"Writing to the file\" << endl ; cout << \"Enter your name: \" ; cin . getline ( data , 100 ); // \u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; cout << \"Enter your age: \" ; cin >> data ; cin . ignore (); // \u518d\u6b21\u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 outfile . close (); // \u4ee5\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ifstream infile ; infile . open ( \"afile.dat\" ); cout << \"Reading from the file\" << endl ; infile >> data ; // \u5728\u5c4f\u5e55\u4e0a\u5199\u5165\u6570\u636e cout << data << endl ; // \u518d\u6b21\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u663e\u793a\u5b83 infile >> data ; cout << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 infile . close (); return 0 ; } // \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488 // istream \u548c ostream \u90fd\u63d0\u4f9b\u4e86\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u6210\u5458\u51fd\u6570\u3002\u8fd9\u4e9b\u6210\u5458\u51fd\u6570\u5305\u62ec\u5173\u4e8e istream \u7684 seekg\uff08\"seek get\"\uff09\u548c\u5173\u4e8e ostream \u7684 seekp\uff08\"seek put\"\uff09\u3002 // seekg \u548c seekp \u7684\u53c2\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u957f\u6574\u578b\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u67e5\u627e\u65b9\u5411\u3002\u67e5\u627e\u65b9\u5411\u53ef\u4ee5\u662f ios::beg\uff08\u9ed8\u8ba4\u7684\uff0c\u4ece\u6d41\u7684\u5f00\u5934\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::cur\uff08\u4ece\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::end\uff08\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\u5b9a\u4f4d\uff09\u3002 // \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u6307\u5b9a\u4e86\u4ece\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\u5230\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684\u5b57\u8282\u6570\u3002 // \u5b9a\u4f4d\u5230 fileObject \u7684\u7b2c n \u4e2a\u5b57\u8282\uff08\u5047\u8bbe\u662f ios::beg\uff09 fileObject . seekg ( n ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: cur ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u672b\u5c3e\u5f80\u56de\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: end ); // \u5b9a\u4f4d\u5230 fileObject \u7684\u672b\u5c3e fileObject . seekg ( 0 , ios :: end ); \u65e5\u671f\u548c\u65f6\u95f4 \u00b6 //\u65e5\u671f\u548c\u65f6\u95f4\uff0cc++\u7ee7\u627f\u4e86c\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c#include<ctime> //\u65f6\u95f4\u76f8\u5173\u7684\u7c7b\u578b\uff1aclock_t\u3001time_t\u3001size_t \u548c tm // \u7c7b\u578b clock_t\u3001size_t \u548c time_t \u80fd\u591f\u628a\u7cfb\u7edf\u65f6\u95f4\u548c\u65e5\u671f\u8868\u793a\u4e3a\u67d0\u79cd\u6574\u6570\u3002 // \u7ed3\u6784\u7c7b\u578b tm \u628a\u65e5\u671f\u548c\u65f6\u95f4\u4ee5 C \u7ed3\u6784\u7684\u5f62\u5f0f\u4fdd\u5b58\uff0ctm \u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a struct tm { int tm_sec ; // \u79d2\uff0c\u6b63\u5e38\u8303\u56f4\u4ece 0 \u5230 59\uff0c\u4f46\u5141\u8bb8\u81f3 61 int tm_min ; // \u5206\uff0c\u8303\u56f4\u4ece 0 \u5230 59 int tm_hour ; // \u5c0f\u65f6\uff0c\u8303\u56f4\u4ece 0 \u5230 23 int tm_mday ; // \u4e00\u6708\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 1 \u5230 31 int tm_mon ; // \u6708\uff0c\u8303\u56f4\u4ece 0 \u5230 11 int tm_year ; // \u81ea 1900 \u5e74\u8d77\u7684\u5e74\u6570 int tm_wday ; // \u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 0 \u5230 6\uff0c\u4ece\u661f\u671f\u65e5\u7b97\u8d77 int tm_yday ; // \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 0 \u5230 365\uff0c\u4ece 1 \u6708 1 \u65e5\u7b97\u8d77 int tm_isdst ; // \u590f\u4ee4\u65f6 } // \u5e38\u7528\u51fd\u6570 opencv\u5e38\u7528\u5c5e\u6027 \u00b6 Mat\u5e38\u89c1\u7c7b\u578b // \u901a\u7528\u683c\u5f0f: CV_[\u6bcf\u4e00\u9879\u7684\u4f4d\u6570][\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7][\u7c7b\u578b\u524d\u7f00]C[\u901a\u9053\u6570] // CV_8UC3:\u4f7f\u75288\u4f4d\u65e0\u7b26\u53f7\u7684char\u7c7b\u578b\uff0c\u6bcf\u4e2a\u50cf\u7d20\u4e09\u901a\u9053(\u5e73\u9762\u6392\u5217) \u6570\u636e\u7c7b\u578b \u6570\u503c \u4f53\u7c7b\u578b \u53d6\u503c\u8303\u56f4 Mat_ < uchar >--- CV_8U -- -8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570 -- \uff08 0 \u2026 . .255 \uff09 Mat < char >----- CV_8S -- -8 \u4f4d\u7b26\u53f7\u6574\u6570 --- \uff08 -128 \u2026 . .127 \uff09 Mat_ < ushort >-- CV_16U - -16 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570 - \uff08 0 \u2026\u2026 65535 \uff09 Mat_ < short >--- CV_16S - -16 \u4f4d\u7b26\u53f7\u6574\u6570 -- \uff08 -32768 \u2026 . .32767 \uff09 Mat_ < float >--- CV_32F - -32 \u4f4d\u6d6e\u70b9\u6570 --- \uff08 - FLT_MAX \u2026\u2026\u2026 FLT_MAX \uff0c INF \uff0c NAN ) Mat_ < int >----- CV_32S - -32 \u4f4d\u7b26\u53f7\u6574\u6570 -- \uff08 -2147483648 \u2026\u2026 2147483647 \uff09 Mat_ < double >-- CV_64F - -64 \u4f4d\u6d6e\u70b9\u6570 --- \uff08 - DBL_MAX \u2026\u2026\u2026 . DBL_MAX \uff0c INF \uff0c NAN ) // Mat\u7684\u6784\u9020\u51fd\u6570 Mat () // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 Mat A; // \u5e38\u7528\u6784\u9020\u51fd\u6570 Mat A(10,10,CV_8UC3); Mat ( int rows , int cols , int type ) //Mat(3,3,CV_8UC3\uff0cScalar(127,0,255)) Mat ( int rows , int cols , int type , const Scalar & s ) //Mat src = imread(\"E:/OpenCV/OpenCVPicture/horse.png\"); //Mat img= Mat(src.size(),CV_8UC1); Mat ( Size size , int type ) // Mat(src.size(),CV_8UC3,Scalar(127,0,255)); Mat ( Size size , int type , const Scalar & s ) // Mat copy_img(img); Mat ( const Mat & m ) //Mat D (A, Rect(10, 10, 100, 100) ); // ROI\u622a\u53d6\uff0cRect(x,y,w,h); Mat ( const Mat & m , const Rect & roi ) Mat ( const Mat & m , const Range * ranges ) Mat ( int ndims , const int * sizes , int type , const Scalar & s ) Mat ( int ndims , const int * sizes , int type ) Mat ( int rows , int cols , int type , void * data , size_t step = AUTO_STEP ) Mat ( Size size , int type , void * data , size_t step = AUTO_STEP ) Mat ( int ndims , const int * sizes , int type , void * data , const size_t * steps = 0 ) Mat ( const Mat & m , const Range & rowRange , const Range & colRange = Range :: all ()) Mat d ; d . create ( xxx ); // xxx\u548c\u4e0a\u9762\u4e00\u6837 // Mat\u7684\u5e38\u7528\u8d4b\u503c\u65b9\u6cd5 Mat c = ( Mat_ < double > ( 3 , 3 ) << 0 , -1 , 0 , -1 , 5 , -1 , 0 , -1 , 0 ); // \u5c0f\u77e9\u9635\u76f4\u63a5\u7528\u9017\u53f7\u9694\u5f00\u521d\u59cb\u5316 Mat R = Mat ( 3 , 2 , CV_8UC3 ); randu ( R , Scalar :: all ( 0 ), Scalar :: all ( 255 )); // \u4f7f\u7528randu\u4ea7\u751f\u968f\u673a\u503c\u6765\u586b\u5145\u77e9\u9635\uff0c\u9700\u8981\u7ed9\u5b9a\u4e00\u4e2a\u4e0a\u4e0b\u9650 Mat :: eye ( 4 , 4 , CV_32F ); // eye(int rows,int cols,int type) Mat :: ones ( 2 , 2 , CV_32F ); // ones(int rows,int cols,int type) Mat :: zeros ( 3 , 3 , CV_8UC1 ); // zeros(int rows,int cols,int type) // \u5e38\u7528\u65b9\u6cd5 Mat src = imread ( \"E:/OpenCV/OpenCVPicture/horse.png\" ); Mat dst ; src . copyTo ( dst ); // \u5c06src\u5bf9\u8c61\u7684\u56fe\u50cf\u590d\u5236\u5230dst\u5bf9\u8c61\u4e2d\uff0c\u6df1\u62f7\u8d1d dst . clone ( src ); // \u5c06src\u5bf9\u8c61\u7684\u56fe\u50cf\u590d\u5236\u5230dst\u5bf9\u8c61\u4e2d\uff0c\u6df1\u62f7\u8d1d str . converto ( dst , CV_8UC3 ); // \u5c06src\u8f6c\u5316\u6210\u6bcf\u4e2a\u901a\u90538\u4e2a\u5b57\u8282\u957f\u5ea6 uchar\u7c7b\u578b\uff0c\u901a\u9053\u6570\u91cf\u4e3a3\u7684Mat\u5bf9\u8c61\uff08\u53ef\u4ee5\u5728\u51fd\u6570\u540e\u9762\u9644\u52a0\u56e0\u5b50\u8fdb\u884c\u8ba1\u7b97\uff09 int channel = src . channels (); // \u901a\u9053\u6570 int depth = src . depth (); // \u56fe\u50cf\u6df1\u5ea6 src . empty (); // bool \u5224\u65ad\u56fe\u50cf\u662f\u5426\u4e3a\u7a7a const unchar * firstRow = src . ptr ( 0 ); // \u83b7\u53d6src\u56fe\u50cf\u7684\u7b2c\u4e00\u884c\u5bf9\u5e94\u6307\u9488 // _Tp& at(int row,int col) \u83b7\u53d6\u56fe\u50cf\u4e0a\u4e00\u4e2a\u70b9\u7684\u50cf\u7d20\uff0c\u53ef\u5bf9\u5176\u8fdb\u884c\u83b7\u53d6\u6216\u8005\u4fee\u6539\uff0c\u7070\u5ea6\u56fe\u50cf\u548cRGB\u56fe\u50cf\u6709\u533a\u522b Mat gray_src ; cvtColor ( src , gray_src , CV_BGR2GRAY ); //\u5c06RGB\u56fe\u50cf\u8f6c\u5316\u6210\u7070\u5ea6\u56fe\u50cf uchar test = gray_src . at < uchar > ( 0 , 0 ); //\u83b7\u53d6\u7070\u5ea6\u56fe\u50cf\u5728 (0,0)\u5904\u7684\u50cf\u7d20\u503c gray_src . at < uchar > ( 0 , 0 ) = 0 //\u4fee\u6539\u7070\u5ea6\u56fe\u50cf\u5728 (0,0)\u5904\u7684\u50cf\u7d20\u503c //\u83b7\u53d6RGB\u50cf\u7d20 uchar blue = src . at < Vec3b > ( 0 , 0 )[ 0 ]; //\u84dd\u8272\u901a\u9053\u50cf\u7d20\u503c uchar green = src . at < Vec3b > ( 0 , 0 )[ 1 ]; //\u7eff\u8272\u901a\u9053\u50cf\u7d20\u503c uchar red = src . at < Vec3b > ( 0 , 0 )[ 2 ]; //\u7ea2\u8272\u901a\u9053\u50cf\u7d20\u503c //\u4fee\u6539RGB\u50cf\u7d20 src . at < Vec3b > ( 0 , 0 )[ 0 ] = 0 ; //\u4fee\u6539\u84dd\u8272\u901a\u9053\u50cf\u7d20\u4e3a0 src . at < Vec3b > ( 0 , 0 )[ 1 ] = 0 ; //\u4fee\u6539\u7eff\u8272\u901a\u9053\u50cf\u7d20\u4e3a0 src . at < Vec3b > ( 0 , 0 )[ 2 ] = 0 ; //\u4fee\u6539\u7ea2\u8272\u901a\u9053\u50cf\u7d20\u4e3a0 \u5411\u91cf\u7c7bVec(\u4e00\u7ef4\uff0cMatx\u7684\u6d3e\u751f\u7c7b) Vec < Typename _Tp , int _cn > // \u683c\u5f0f Vec < int , 3 > vi ( 21 , 32 , 14 ); // \u4e3e\u4f8b\u5b50 // \u91cd\u547d\u540d typedef Vec < uchar , 2 > Vec2b ; typedef Vec < uchar , 3 > Vec3b ; typedef Vec < uchar , 4 > Vec4b ; typedef Vec < short , 2 > Vec2s ; typedef Vec < short , 3 > Vec3s ; typedef Vec < short , 4 > Vec4s ; typedef Vec < ushort , 2 > Vec2w ; typedef Vec < ushort , 3 > Vec3w ; typedef Vec < ushort , 4 > Vec4w ; typedef Vec < int , 2 > Vec2i ; typedef Vec < int , 3 > Vec3i ; typedef Vec < int , 4 > Vec4i ; typedef Vec < int , 6 > Vec6i ; typedef Vec < int , 8 > Vec8i ; typedef Vec < float , 2 > Vec2f ; typedef Vec < float , 3 > Vec3f ; typedef Vec < float , 4 > Vec4f ; typedef Vec < float , 6 > Vec6f ; typedef Vec < double , 2 > Vec2d ; typedef Vec < double , 3 > Vec3d ; typedef Vec < double , 4 > Vec4d ; typedef Vec < double , 6 > Vec6d ; // \u5e38\u7528\u5c5e\u6027 vi . rows ; // \u5411\u91cf\u7684\u884c\u6570 vi . cols ; // \u5411\u91cf\u7684\u5217\u6570 vi [ 0 ]; // \u8bbf\u95ee\u7b2c0\u4e2a\u5143\u7d20 // \u5e38\u7528\u65b9\u6cd5 /////////////////////// Vec (used as element of multi-channel images ///////////////////// /** @brief Template class for short numerical vectors, a partial case of Matx This template class represents short numerical vectors (of 1, 2, 3, 4 ... elements) on which you can perform basic arithmetical operations, access individual elements using [] operator etc. The vectors are allocated on stack, as opposite to std::valarray, std::vector, cv::Mat etc., which elements are dynamically allocated in the heap. The template takes 2 parameters: @tparam _Tp element type @tparam cn the number of elements In addition to the universal notation like Vec<float, 3>, you can use shorter aliases for the most popular specialized variants of Vec, e.g. Vec3f ~ Vec<float, 3>. It is possible to convert Vec\\<T,2\\> to/from Point_, Vec\\<T,3\\> to/from Point3_ , and Vec\\<T,4\\> to CvScalar or Scalar_. Use operator[] to access the elements of Vec. All the expected vector operations are also implemented: - v1 = v2 + v3 - v1 = v2 - v3 - v1 = v2 \\* scale - v1 = scale \\* v2 - v1 = -v2 - v1 += v2 and other augmenting operations - v1 == v2, v1 != v2 - norm(v1) (euclidean norm) The Vec class is commonly used to describe pixel types of multi-channel arrays. See Mat for details. */ template < typename _Tp , int cn > class Vec : public Matx < _Tp , cn , 1 > { public : typedef _Tp value_type ; enum { channels = cn , #ifdef OPENCV_TRAITS_ENABLE_DEPRECATED depth = Matx < _Tp , cn , 1 >:: depth , type = CV_MAKETYPE ( depth , channels ), #endif _dummy_enum_finalizer = 0 }; //! default constructor Vec (); Vec ( _Tp v0 ); //!< 1-element vector constructor Vec ( _Tp v0 , _Tp v1 ); //!< 2-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 ); //!< 3-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 ); //!< 4-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 ); //!< 5-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 ); //!< 6-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 ); //!< 7-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 ); //!< 8-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 ); //!< 9-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 ); //!< 10-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 , _Tp v12 , _Tp v13 ); //!< 14-element vector constructor explicit Vec ( const _Tp * values ); #ifdef CV_CXX11 Vec ( std :: initializer_list < _Tp > ); #endif Vec ( const Vec < _Tp , cn >& v ); static Vec all ( _Tp alpha ); //! per-element multiplication Vec mul ( const Vec < _Tp , cn >& v ) const ; //! conjugation (makes sense for complex numbers and quaternions) Vec conj () const ; /*! cross product of the two 3D vectors. For other dimensionalities the exception is raised */ Vec cross ( const Vec & v ) const ; //! conversion to another data type template < typename T2 > operator Vec < T2 , cn > () const ; /*! element access */ const _Tp & operator []( int i ) const ; _Tp & operator []( int i ); const _Tp & operator ()( int i ) const ; _Tp & operator ()( int i ); #ifdef CV_CXX11 Vec < _Tp , cn >& operator = ( const Vec < _Tp , cn >& rhs ) = default ; #endif Vec ( const Matx < _Tp , cn , 1 >& a , const Matx < _Tp , cn , 1 >& b , Matx_AddOp ); Vec ( const Matx < _Tp , cn , 1 >& a , const Matx < _Tp , cn , 1 >& b , Matx_SubOp ); template < typename _T2 > Vec ( const Matx < _Tp , cn , 1 >& a , _T2 alpha , Matx_ScaleOp ); }; Matx(\u8f7b\u91cf\u7ea7Mat) Matx < float , 2 , 3 > mat23f ; // \u4f8b\u5b50 // \u91cd\u547d\u540d typedef Matx < float , 1 , 2 > Matx12f ; typedef Matx < double , 1 , 2 > Matx12d ; typedef Matx < float , 1 , 3 > Matx13f ; typedef Matx < double , 1 , 3 > Matx13d ; typedef Matx < float , 1 , 4 > Matx14f ; typedef Matx < double , 1 , 4 > Matx14d ; typedef Matx < float , 1 , 6 > Matx16f ; typedef Matx < double , 1 , 6 > Matx16d ; typedef Matx < float , 2 , 1 > Matx21f ; typedef Matx < double , 2 , 1 > Matx21d ; typedef Matx < float , 3 , 1 > Matx31f ; typedef Matx < double , 3 , 1 > Matx31d ; typedef Matx < float , 4 , 1 > Matx41f ; typedef Matx < double , 4 , 1 > Matx41d ; typedef Matx < float , 6 , 1 > Matx61f ; typedef Matx < double , 6 , 1 > Matx61d ; typedef Matx < float , 2 , 2 > Matx22f ; typedef Matx < double , 2 , 2 > Matx22d ; typedef Matx < float , 2 , 3 > Matx23f ; typedef Matx < double , 2 , 3 > Matx23d ; typedef Matx < float , 3 , 2 > Matx32f ; typedef Matx < double , 3 , 2 > Matx32d ; typedef Matx < float , 3 , 3 > Matx33f ; typedef Matx < double , 3 , 3 > Matx33d ; typedef Matx < float , 3 , 4 > Matx34f ; typedef Matx < double , 3 , 4 > Matx34d ; typedef Matx < float , 4 , 3 > Matx43f ; typedef Matx < double , 4 , 3 > Matx43d ; typedef Matx < float , 4 , 4 > Matx44f ; typedef Matx < double , 4 , 4 > Matx44d ; typedef Matx < float , 6 , 6 > Matx66f ; typedef Matx < double , 6 , 6 > Matx66d ; // \u5e38\u7528\u65b9\u6cd5 /** @brief Template class for small matrices whose type and size are known at compilation time If you need a more flexible type, use Mat . The elements of the matrix M are accessible using the M(i,j) notation. Most of the common matrix operations (see also @ref MatrixExpressions ) are available. To do an operation on Matx that is not implemented, you can easily convert the matrix to Mat and backwards: @code{.cpp} Matx33f m(1, 2, 3, 4, 5, 6, 7, 8, 9); cout << sum(Mat(m*m.t())) << endl; @endcode Except of the plain constructor which takes a list of elements, Matx can be initialized from a C-array: @code{.cpp} float values[] = { 1, 2, 3}; Matx31f m(values); @endcode In case if C++11 features are available, std::initializer_list can be also used to initialize Matx: @code{.cpp} Matx31f m = { 1, 2, 3}; @endcode */ template < typename _Tp , int m , int n > class Matx { public : enum { rows = m , cols = n , channels = rows * cols , #ifdef OPENCV_TRAITS_ENABLE_DEPRECATED depth = traits :: Type < _Tp >:: value , type = CV_MAKETYPE ( depth , channels ), #endif shortdim = ( m < n ? m : n ) }; typedef _Tp value_type ; typedef Matx < _Tp , m , n > mat_type ; typedef Matx < _Tp , shortdim , 1 > diag_type ; //! default constructor Matx (); explicit Matx ( _Tp v0 ); //!< 1x1 matrix Matx ( _Tp v0 , _Tp v1 ); //!< 1x2 or 2x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 ); //!< 1x3 or 3x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 ); //!< 1x4, 2x2 or 4x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 ); //!< 1x5 or 5x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 ); //!< 1x6, 2x3, 3x2 or 6x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 ); //!< 1x7 or 7x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 ); //!< 1x8, 2x4, 4x2 or 8x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 ); //!< 1x9, 3x3 or 9x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 ); //!< 1x10, 2x5 or 5x2 or 10x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 ); //!< 1x12, 2x6, 3x4, 4x3, 6x2 or 12x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 , _Tp v12 , _Tp v13 ); //!< 1x14, 2x7, 7x2 or 14x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 , _Tp v12 , _Tp v13 , _Tp v14 , _Tp v15 ); //!< 1x16, 4x4 or 16x1 matrix explicit Matx ( const _Tp * vals ); //!< initialize from a plain array #ifdef CV_CXX11 Matx ( std :: initializer_list < _Tp > ); //!< initialize from an initializer list #endif static Matx all ( _Tp alpha ); static Matx zeros (); static Matx ones (); static Matx eye (); static Matx diag ( const diag_type & d ); static Matx randu ( _Tp a , _Tp b ); static Matx randn ( _Tp a , _Tp b ); //! dot product computed with the default precision _Tp dot ( const Matx < _Tp , m , n >& v ) const ; //! dot product computed in double-precision arithmetics double ddot ( const Matx < _Tp , m , n >& v ) const ; //! conversion to another data type template < typename T2 > operator Matx < T2 , m , n > () const ; //! change the matrix shape template < int m1 , int n1 > Matx < _Tp , m1 , n1 > reshape () const ; //! extract part of the matrix template < int m1 , int n1 > Matx < _Tp , m1 , n1 > get_minor ( int base_row , int base_col ) const ; //! extract the matrix row Matx < _Tp , 1 , n > row ( int i ) const ; //! extract the matrix column Matx < _Tp , m , 1 > col ( int i ) const ; //! extract the matrix diagonal diag_type diag () const ; //! transpose the matrix Matx < _Tp , n , m > t () const ; //! invert the matrix Matx < _Tp , n , m > inv ( int method = DECOMP_LU , bool * p_is_ok = NULL ) const ; //! solve linear system template < int l > Matx < _Tp , n , l > solve ( const Matx < _Tp , m , l >& rhs , int flags = DECOMP_LU ) const ; Vec < _Tp , n > solve ( const Vec < _Tp , m >& rhs , int method ) const ; //! multiply two matrices element-wise Matx < _Tp , m , n > mul ( const Matx < _Tp , m , n >& a ) const ; //! divide two matrices element-wise Matx < _Tp , m , n > div ( const Matx < _Tp , m , n >& a ) const ; //! element access const _Tp & operator ()( int row , int col ) const ; _Tp & operator ()( int row , int col ); //! 1D element access const _Tp & operator ()( int i ) const ; _Tp & operator ()( int i ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_AddOp ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_SubOp ); template < typename _T2 > Matx ( const Matx < _Tp , m , n >& a , _T2 alpha , Matx_ScaleOp ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_MulOp ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_DivOp ); template < int l > Matx ( const Matx < _Tp , m , l >& a , const Matx < _Tp , l , n >& b , Matx_MatMulOp ); Matx ( const Matx < _Tp , n , m >& a , Matx_TOp ); _Tp val [ m * n ]; //< matrix elements }; Point\u5e38\u89c1\u7c7b\u578b /*\u4e8c\u7ef4\u70b9*/ typedef Point2i cv :: Point typedef Point_ < int > Point2i typedef Point_ < int64 > cv :: Point2I typedef Point_ < float > Point2f typedef Point_ < double > cv :: Point2d /*\u4e09\u7ef4\u70b9*/ typedef Point3_ < int > cv :: Point3i typedef Point3_ < float > cv :: Point3f typedef Point3_ < double > cv :: Point3d // \u4e3e\u4f8b cv :: Point2f p ( 6 , 2 ); cv :: Point3f p ( 8 , 2 , 0 ); p . x , p . y ; // \u5e38\u7528\u65b9\u6cd5 template < typename _Tp > class Point_ { public : typedef _Tp value_type ; //! default constructor Point_ (); Point_ ( _Tp _x , _Tp _y ); Point_ ( const Point_ & pt ); Point_ ( const Size_ < _Tp >& sz ); Point_ ( const Vec < _Tp , 2 >& v ); Point_ & operator = ( const Point_ & pt ); //! conversion to another data type template < typename _Tp2 > operator Point_ < _Tp2 > () const ; //! conversion to the old-style C structures operator Vec < _Tp , 2 > () const ; //! dot product _Tp dot ( const Point_ & pt ) const ; //! dot product computed in double-precision arithmetics double ddot ( const Point_ & pt ) const ; //! cross-product double cross ( const Point_ & pt ) const ; //! checks whether the point is inside the specified rectangle bool inside ( const Rect_ < _Tp >& r ) const ; _Tp x ; //!< x coordinate of the point _Tp y ; //!< y coordinate of the point }; Scalar Scalar ( r , g , b ); // opencv\u4e2d\u7684\u989c\u8272\u8868\u793a\uff0c\u8868\u793a\u5177\u6709 4\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u4e00\u822c\u6211\u4eec\u53ea\u7528\u5230\u524d\u4e09\u4e2a\u503c // \u7528\u6cd5 //////////////////////////////// Scalar_ /////////////////////////////// /** @brief Template class for a 4-element vector derived from Vec. Being derived from Vec\\<_Tp, 4\\> , Scalar\\_ and Scalar can be used just as typical 4-element vectors. In addition, they can be converted to/from CvScalar . The type Scalar is widely used in OpenCV to pass pixel values. */ template < typename _Tp > class Scalar_ : public Vec < _Tp , 4 > { public : //! default constructor Scalar_ (); //\u53c2\u6570\u6570\u91cf 0 Scalar_ ( _Tp v0 , _Tp v1 , _Tp v2 = 0 , _Tp v3 = 0 ); //\u53c2\u6570\u6570\u91cf2\uff0c3\uff0c4\u90fd\u53ef\u4ee5 Scalar_ ( _Tp v0 ); //\u53c2\u6570\u6570\u91cf 1 template < typename _Tp2 , int cn > Scalar_ ( const Vec < _Tp2 , cn >& v ); //! returns a scalar with all elements set to v0 static Scalar_ < _Tp > all ( _Tp v0 ); //! conversion to another data type template < typename T2 > operator Scalar_ < T2 > () const ; //! per-element product Scalar_ < _Tp > mul ( const Scalar_ < _Tp >& a , double scale = 1 ) const ; //! returns (v0, -v1, -v2, -v3) Scalar_ < _Tp > conj () const ; //! returns true iff v1 == v2 == v3 == 0 bool isReal () const ; }; typedef Scalar_ < double > Scalar ; //double\u7c7b\u578b scalar\uff0c\u65b9\u4fbf\u58f0\u660e\u5b9a\u4e49\u7528 Size typedef Size_ < int > Size2i ; typedef Size_ < int64 > Size2l ; typedef Size_ < float > Size2f ; typedef Size_ < double > Size2d ; typedef Size2i Size ; // \u7528\u6cd5 //////////////////////////////// Size_ //////////////////////////////// /** @brief Template class for specifying the size of an image or rectangle. The class includes two members called width and height. The structure can be converted to and from the old OpenCV structures CvSize and CvSize2D32f . The same set of arithmetic and comparison operations as for Point_ is available. OpenCV defines the following Size_\\<\\> aliases: @code typedef Size_<int> Size2i; typedef Size2i Size; typedef Size_<float> Size2f; @endcode */ template < typename _Tp > class Size_ { public : typedef _Tp value_type ; //! default constructor Size_ (); //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 Size_ ( _Tp _width , _Tp _height ); //\u5bbd \u9ad8 Size_ ( const Size_ & sz ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Size_ ( const Point_ < _Tp >& pt ); //\u8f6c\u6362\u6784\u9020\u51fd\u6570 Size_ & operator = ( const Size_ & sz ); //! the area (width*height) _Tp area () const ; //! true if empty bool empty () const ; //! conversion of another data type. template < typename _Tp2 > operator Size_ < _Tp2 > () const ; _Tp width ; //!< the width _Tp height ; //!< the height }; // \u5c5e\u6027 cv :: Size size ( 5 , 5 ); size . area (); // \u77e9\u5f62\u9762\u79ef size . width ; size . height ; Rect typedef Rect_ < int > Rect2i ; typedef Rect_ < float > Rect2f ; typedef Rect_ < double > Rect2d ; typedef Rect2i Rect ; // \u5e38\u7528\u5c5e\u6027\u548c\u65b9\u6cd5 rect . x , rect . y ; // \u8868\u793a\u5de6\u4e0a\u89d2\u5750\u6807 rect . width , rect . height ; // \u8868\u793a\u5bbd\u9ad8 rect . size (); // \u8fd4\u56deRect\u5bf9\u8c61\u7684\u5c3a\u5bf8 rect . area (); // \u8fd4\u56deRect\u5bf9\u8c61\u7684\u9762\u79ef\u5927\u5c0f rect . contains ( const point_ < _Tp > & pt ) const ; // \u68c0\u6d4b\u70b9pt\u662f\u5426\u5728Rect\u5bf9\u8c61\u5185\uff1b rect . tl (); // \u5de6\u4e0a\u89d2\u5750\u6807 rect . br (); // \u53f3\u4e0b\u89d2\u5750\u6807 bool cv :: Point_ < _Tp >:: inside ( const Rect_ < _Tp > & r ) const ; // \u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5bf9\u8c61\u5185 cv :: Rect rect1 ( 10 , 10 , 30 , 40 ); cv :: Rect rect2 ( 10 , 20 , 60 , 70 ); cv :: Rect r1 = rect1 & rect2 ; //\u4ea4\u96c6 cv :: Rect r2 = rect1 | rect2 ; //\u5e76\u96c6 cv :: Rect r3 = rect1 + Point ( 10 , 20 ); //\u5e73\u79fb cv :: Rect r4 = rect1 + Size ( 2 , 2 ); //\u77e9\u5f62\u6846\u52a0\u5927 printf ( \"\u77e9\u5f62r1\uff1a%d %d %d %d \\n \" , r1 . x , r1 . y , r1 . width , r1 . height ); printf ( \"\u77e9\u5f62r2\uff1a%d %d %d %d \\n \" , r2 . x , r2 . y , r2 . width , r2 . height ); printf ( \"\u77e9\u5f62r3\uff1a%d %d %d %d \\n \" , r3 . x , r3 . y , r3 . width , r3 . height ); printf ( \"\u77e9\u5f62r4\uff1a%d %d %d %d \\n \" , r4 . x , r4 . y , r4 . width , r4 . height ); OpenCV\u4e2d\u7684\u65b0\u589e\u6570\u5b66\u51fd\u6570 CV_EXPORTS_W float cubeRoot ( float val ); // \u8ba1\u7b97\u7acb\u65b9\u6839 CV_EXPORTS_W float fastAtan2 ( float y , float x ); // \u8ba1\u7b97\u5411\u91cf\u89d2\u5ea6\u8ba1\u7b97 // #include <opencv2/core/fast_math.hpp> CV_INLINE int cvRound ( double value ) //\u56db\u820d\u4e94\u5165\u51fd\u6570 CV_INLINE int cvFloor ( double value ) //\u5411\u4e0b\u53d6\u6574 CV_INLINE int cvCeil ( double value ) //\u5411\u4e0a\u53d6\u6574 CV_INLINE int cvIsNaN ( double value ) //\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a\u6570 CV_INLINE int cvIsInf ( double value ) //\u5224\u65ad\u662f\u5426\u65e0\u7a77\u5927 CV_INLINE int cvRound ( float value ) CV_INLINE int cvRound ( int value ) CV_INLINE int cvFloor ( float value ) CV_INLINE int cvFloor ( int value ) CV_INLINE int cvCeil ( float value ) CV_INLINE int cvCeil ( int value ) CV_INLINE int cvIsNaN ( float value ) CV_INLINE int cvIsInf ( float value ) \u5176\u4ed6\u7c7b\u578b // \u989c\u8272\u7a7a\u95f4\u8f6c\u5316 C ++ \uff1a void cvtColor ( InputArray src , OutputArray dst , int code , int dstCn = 0 ) * InputArray src \uff1a\u8868\u793a\u8f93\u5165\u56fe\u50cf\uff1b * OutputArray dst \uff1a\u8868\u793a\u8f93\u51fa\u56fe\u50cf\uff1b * int code \uff1a\u8868\u793a\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\u6807\u8bc6\u7b26\uff1b * int dstCn = 0 \uff1a\u76ee\u6807\u56fe\u50cf\u7684\u901a\u9053\u6570\uff1b 0 \uff1a\u76ee\u6807\u56fe\u50cf\u53d6\u6e90\u56fe\u50cf\u7684\u901a\u9053\u6570\uff1b // \u4f8b\u5b50 /*OpenCv2 \u7248\u672c*/ cvtColor ( srcImage , dstImage , CV_GRAY2BGR ); /*OpenCv3 \u7248\u672c*/ cvtColor ( srcImage , dstImage , COLOR_GRAY2BGR ); // code RGB <-> BGR : COLOR_BGR2BGRA \u3001 COLOR_RGB2RGBA \u3001 COLOR_BGRA2RGBA \u3001 COLOR_BGR2BGRA \u3001 COLOR_BGRA2BGR RGB <-> Gray : COLOR_RGB2GRAY \u3001 COLOR_GRAY2RGB \u3001 COLOR_RGBA2GRAY \u3001 COLOR_GRAY2RGBA RGB <-> HSV : COLOR_BGR2HSV \u3001 COLOR_RGB2HSV \u3001 COLOR_HSV2BGR \u3001 COLOR_HSV2RGB RGB <-> HLS : COLOR_BGR2HSV \u3001 COLOR_RGB2HSV \u3001 COLOR_HSV2BGR \u3001 COLOR_HSV2RGB // \u7279\u6b8a\u4f7f\u7528\uff1a\u5f53\u9700\u8981\u628a\u4e00\u4e2a 88 \u4f4d\u7684 RGB \u56fe\u50cf\u8f6c\u5316\u4e3a Luv \u683c\u5f0f\u7684\u56fe\u50cf\u65f6\uff0c\u9700\u8981\u5148\u628a\u56fe\u50cf\u8f6c\u5316\u4e3a\u5355\u7cbe\u5ea6 3232 \u4f4d img *= 1. / 255 ; cvtColor ( img , img , COLOR_BGR2Luv ); \u56fe\u50cf/\u89c6\u9891\u64cd\u4f5c\u51fd\u6570 // 1.imread:OpenCV\u652f\u6301bmp\u3001jpg\u3001png\u3001tiff\u7b49\u5e38\u7528\u56fe\u50cf\u683c\u5f0f\u7684\u89e3\u6790 Mat imread ( const String & filename , int flags = IMREAD_COLOR ); * IMREAD_UNCHANGED \uff1a\u4e0d\u5bf9\u56fe\u50cf\u6587\u4ef6\u8fdb\u884c\u4efb\u4f55\u8f6c\u6362\uff0c\u76f4\u63a5\u8bfb\u53d6\uff1b * IMREAD_GRAYSCALE \uff1a\u5c06\u4efb\u4f55\u56fe\u50cf\u5747\u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf ( \u5355\u901a\u9053 ) \u8fdb\u884c\u8bfb\u53d6\uff1b * IMREAD_COLOR \uff1a\u5c06\u4efb\u4f55\u56fe\u50cf\u5747\u8f6c\u4e3a RGB\u5f69\u8272\u56fe\u50cf ( \u4e09\u901a\u9053 ) \u8fdb\u884c\u8bfb\u53d6\uff1b * IMREAD_ANYDEPTH \uff1a\u5982\u679c\u4e0d\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\uff0c 16 / 32 \u4f4d\u56fe\u50cf\u5c06\u4f1a\u81ea\u52a8\u8f6c\u4e3a 8 \u4f4d\u56fe\u50cf\uff1b * IMREAD_ANYCOLOR \uff1a\u5c06\u6309\u7167\u56fe\u50cf\u6587\u4ef6\u8bbe\u5b9a\u7684\u989c\u8272\u683c\u5f0f\u8fdb\u884c\u56fe\u50cf\u8bfb\u53d6\uff1b * IMREAD_LOAD_GDAL \uff1a\u8c03\u7528 gdal\u5e93\u8fdb\u884c\u56fe\u50cf\u6587\u4ef6\u8bfb\u53d6 ( \u53ef\u4ee5\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u8bfb\u53d6 TIFF\u56fe\u50cf\u6587\u4ef6 ) \u3002 // \u4f8b\u5b50 Mat image = cv :: imread ( ' test . jpg ' , cv :: IMREAD_GRAYSCALE ); image . cols ; // \u5bbd\u5ea6 image . rows ; // \u9ad8\u5ea6 image . channels (); // \u901a\u9053\u6570 image . elemSize (); // \u4e00\u4e2a\u50cf\u7d20\u5360\u7528\u7684\u5b57\u8282\u6570 cout << image . elemSize () / image . channels () * 8 << endl ; //2.imshow() \u53ea\u652f\u63018\u4f4d\u7070\u5ea6\u56fe\u50cf\u30018\u4f4d\u5f69\u8272\u56fe\u50cf\u548c32\u4f4d\u7070\u5ea6\u56fe\u50cf(\u50cf\u7d20\u503c\u8303\u56f40-1) void imshow ( const String & winname , InputArray mat ); cv :: waitKey (); // 3.imwrite() \u53ea\u652f\u6301\u5355\u901a\u9053\u548c3\u901a\u9053\u7684\u56fe\u50cf\uff0c\u5e76\u4e14\u6b64\u65f6\u8981\u6c42\u5176\u6df1\u5ea6\u4e3a8bit\u548c16bit\u65e0\u7b26\u53f7,\u5176\u4ed6\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u662f\u4e0d\u652f\u6301\u7684\uff0c\u6bd4\u5982\u8bf4float\u578b\u7b49\u3002\u5982\u679cMat\u7c7b\u578b\u6570\u636e\u7684\u6df1\u5ea6\u548c\u901a\u9053\u6570\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u8981\u6c42\uff0c\u5219\u9700\u8981\u4f7f\u7528convertTo()\u51fd\u6570\u548ccvtColor()\u51fd\u6570\u6765\u8fdb\u884c\u8f6c\u6362 bool imwrite ( const String & filename , InputArray img , const std :: vector < int >& params = std :: vector < int > ()); // 4.\u56fe\u50cf\u904d\u5386 template < typename _Tp > _Tp & at ( int row , int col ); * \u3000 \u5355\u901a\u9053\u7070\u5ea6 unsigned char * \u3000 \u4e09\u901a\u9053\u5f69\u8272 ( 8 \u4f4d ) cv :: Vec3b * \u3000 16 \u4f4d\u7070\u5ea6 unsigned short * \u3000 32 \u4f4d\u6d6e\u70b9\u578b float * \u3000 \u53cc\u901a\u9053 32 \u4f4d cv :: Vec2f for ( int r = 0 ; r < img . rows ; ++ r ) { for ( int c = 0 ; c < img . cols ; ++ c ) { int data = img . at < unsigned char > ( r , c ); std :: cout << data << std :: endl ; } } //\u6570\u636e\u7f13\u5b58\u533a\u6307\u9488 \u4f7f\u7528data\u5c5e\u6027\u83b7\u53d6\u6570\u636e\u7f13\u5b58\u533a\u6307\u9488\uff0c\u5229\u7528\u6307\u9488\u76f4\u63a5\u8bfb\u53d6\u6570\u636e\u7f13\u5b58\u533a\u7684\u5185\u5bb9\u3002\u4f8b\u5982 #include <opencv2/opencv.hpp> #include <iostream> int main ( int argc , char const * argv []) { cv :: Mat img = cv :: imread ( \"test.png\" , cv :: IMREAD_GRAYSCALE ); unsigned char * img_data = reinterpret_cast < unsigned char *> ( img . data ); for ( int r = 0 ; r < img . rows ; ++ r ) { for ( int c = 0 ; c < img . cols ; ++ c ) { std :: cout << static_cast < float > ( * img_data ) << std :: endl ; ++ img_data ; // \u6307\u9488\u589e\u52a0 } } return 0 ; } //\u3000\u884c\u9996\u6307\u9488\uff0cptr\u63a5\u53e3\u6765\u76f4\u63a5\u83b7\u53d6\u6bcf\u4e00\u884c\u7684\u884c\u9996\u6307\u9488 int main ( int argc , char const * argv []) { cv :: Mat img = cv :: imread ( \"test.png\" , cv :: IMREAD_GRAYSCALE ); for ( int r = 0 ; r < img . rows ; ++ r ) { unsigned char * rdata = img . ptr < unsigned char > ( r ); for ( int c = 0 ; c < img . cols ; ++ c ) { std :: cout << static_cast < float > ( * rdata ) << std :: endl ; ++ rdata ; } } return 0 ; } // 5.\u89c6\u9891\u64cd\u4f5c\u51fd\u6570 //\u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2aVideoCapture\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u4f20\u5165\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u89c6\u9891\u6587\u4ef6\u6216\u8005\u8981\u8c03\u7528\u7684\u6444\u50cf\u5934\u3002 //\u53c2\u6570: filename \u2013 \u6253\u5f00\u7684\u89c6\u9891\u6587\u4ef6\u540d\u3002 //device \u2013 \u6253\u5f00\u7684\u89c6\u9891\u6355\u83b7\u8bbe\u5907id \uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6444\u50cf\u5934\u53ef\u4ee5\u586b0\uff0c\u8868\u793a\u6253\u5f00\u9ed8\u8ba4\u7684\u6444\u50cf\u5934\u3002 VideoCapture :: VideoCapture (); VideoCapture :: VideoCapture ( const string & filename ); VideoCapture :: VideoCapture ( int device ); //\u529f\u80fd\uff1a\u6253\u5f00\u4e00\u4e2a\u89c6\u9891\u6587\u4ef6\u6216\u8005\u6253\u5f00\u4e00\u4e2a\u6355\u83b7\u89c6\u9891\u7684\u8bbe\u5907(\u4e5f\u5c31\u662f\u6444\u50cf\u5934) bool VideoCapture :: open ( const string & filename ); bool VideoCapture :: open ( int device ); //\u529f\u80fd\uff1a\u5224\u65ad\u89c6\u9891\u8bfb\u53d6\u6216\u8005\u6444\u50cf\u5934\u8c03\u7528\u662f\u5426\u6210\u529f\uff0c\u6210\u529f\u5219\u8fd4\u56detrue bool VideoCapture :: isOpened (); //\u529f\u80fd\uff1a\u5173\u95ed\u89c6\u9891\u6587\u4ef6\u6216\u8005\u6444\u50cf\u5934 void VideoCapture :: release (); //\u529f\u80fd\uff1a\u8bfb\u53d6\u89c6\u9891\u5185\u5bb9 bool VideoCapture :: grab (); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56defalse bool VideoCapture :: retrieve ( Mat & image , int channel = 0 ); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56defalse VideoCapture & VideoCapture :: operator >> ( Mat & image ); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56de\u7a7a\uff0c\u5373cv::Mat.empty()\u8fd4\u56detrue bool VideoCapture :: read ( Mat & image ); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56defalse //\u529f\u80fd\uff1a\u83b7\u5f97\u89c6\u9891\u6709\u8bf8\u591a\u5c5e\u6027\uff0c\u6bd4\u5982\uff1a\u5e27\u7387\u3001\u603b\u5e27\u6570\u3001\u5c3a\u5bf8\u3001\u683c\u5f0f\u7b49 //\u5982\u679c\u67e5\u8be2\u7684\u89c6\u9891\u5c5e\u6027\u662fVideoCapture\u7c7b\u4e0d\u652f\u6301\u7684\uff0c\u5c06\u4f1a\u8fd4\u56de0 double VideoCapture :: get ( int propId ); //\u529f\u80fd\uff1a\u8bbe\u7f6eVideoCapture\u7c7b\u7684\u5c5e\u6027\uff0c\u8bbe\u7f6e\u6210\u529f\u8fd4\u56deture,\u5931\u8d25\u8fd4\u56defalse //\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u662f\u5c5e\u6027ID\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8be5\u5c5e\u6027\u8981\u8bbe\u7f6e\u7684\u503c bool VideoCapture :: set ( int propertyId , double value ); // \u89c6\u9891\u5c5e\u6027\u4ecb\u7ecd * CV_CAP_PROP_POS_MSEC \u4ee5\u6beb\u79d2\u8ba1\u7b97\u7684\u5f53\u524d\u7684\u4f4d\u7f6e * CV_CAP_PROP_POS_FRAMES \u4ee5\u5e27\u8ba1\u7b97\u5f53\u524d\u7684\u4f4d\u7f6e * CV_CAP_PROP_POS_AVI_RATIO \u89c6\u9891\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c 0 \u8868\u793a\u89c6\u9891\u5f00\u59cb\uff0c 1 \u8868\u793a\u89c6\u9891\u7ed3\u675f * CV_CAP_PROP_FRAME_WIDTH \u5e27\u5bbd\u5ea6 * CV_CAP_PROP_FRAME_HEIGHT \u5e27\u9ad8\u5ea6 * CV_CAP_PROP_FPS \u5e27\u7387 * CV_CAP_PROP_FOURCC 4 \u5b57\u7b26\u7f16\u7801\u65b9\u5f0f * CV_CAP_PROP_FRAME_COUNT \u89c6\u9891\u5e27\u6570 * CV_CAP_PROP_FORMAT \u89c6\u9891\u683c\u5f0f * CV_CAP_PROP_MODE * CV_CAP_PROP_BRIGHTNESS \u4eae\u5ea6 * CV_CAP_PROP_CONTRAST \u5bf9\u6bd4\u5ea6 * CV_CAP_PROP_SATURATION \u9971\u548c\u5ea6 * CV_CAP_PROP_HUE \u8272\u8c03 * CV_CAP_PROP_GAIN \u589e\u76ca * CV_CAP_PROP_EXPOSURE \u66dd\u5149 * CV_CAP_PROP_CONVERT_RGB \u56fe\u50cf\u662f\u5426\u5e94\u8f6c\u6362\u4e3a RGB\u7684\u6807\u5fd7 * CV_CAP_PROP_WHITE_BALANCE \u767d\u5e73\u8861 * CV_CAP_PROP_RECTIFICATION // \u89c6\u9891\u4fdd\u5b58\u51fd\u6570\uff0cfilename\u53c2\u6570\u8868\u793a\u6587\u4ef6\u540d\uff0cfourcc\u53c2\u6570\u8868\u793a\u7f16\u7801\u683c\u5f0f\uff0cfps\u53c2\u6570\u8868\u793a\u89c6\u9891\u5e27\u7387\uff0cframeSize\u8868\u793a\u89c6\u9891\u7684\u5c3a\u5bf8\u5927\u5c0f VideoWriter :: VideoWriter ( const string & filename , int fourcc , double fps , Size frameSize , bool isColor = true ); bool VideoWriter :: open ( const string & filename , int fourcc , double fps , Size frameSize , bool isColor = true ); // \u5e38\u89c1\u7f16\u7801\u683c\u5f0f\uff0cOpenCV\u91cc\u5bf9\u89c6\u9891\u7684\u7f16\u7801\u89e3\u7801\u7b49\u652f\u6301\u5e76\u4e0d\u662f\u5f88\u826f\u597d\uff0c\u6240\u4ee5\u4e0d\u8981\u5e0c\u671b\u7528\u8fd9\u4e2a\u7c7b\u53bb\u5b9e\u73b0\u6444\u50cf\u5934\u56fe\u50cf\u7684\u83b7\u53d6\u4e0e\u8f6c\u7801\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u8003FFmpeg\u5e93\u3002 * CV_FOURCC ( 'P' , 'I' , 'M' , '1' ) MPEG -1 * CV_FOURCC ( 'M' , 'J' , 'P' , 'G' ) motion - jpeg * CV_FOURCC ( 'M' , 'P' , '4' , '2' ) MPEG -4.2 * CV_FOURCC ( 'D' , 'I' , 'V' , '3' ) MPEG -4.3 * CV_FOURCC ( 'D' , 'I' , 'V' , 'X' ) MPEG -4 * CV_FOURCC ( 'U' , '2' , '6' , '3' ) H263 * CV_FOURCC ( 'I' , '2' , '6' , '3' ) H263I * CV_FOURCC ( 'F' , 'L' , 'V' , '1' ) FLV1 \u89c6\u9891\u8bfb\u53d6 #include <opencv2/opencv.hpp> #include <iostream> int main ( int argc , char const * argv []) { cv :: VideoCapture cap ; cap . open ( \"test.mp4\" ); if ( ! cap . isOpened ()) return 0 ; int width = cap . get ( CV_CAP_PROP_FRAME_WIDTH ); //\u5e27\u5bbd\u5ea6 int height = cap . get ( CV_CAP_PROP_FRAME_HEIGHT ); //\u5e27\u9ad8\u5ea6 int totalFrames = cap . get ( CV_CAP_PROP_FRAME_COUNT ); //\u603b\u5e27\u6570 int frameRate = cap . get ( CV_CAP_PROP_FPS ); //\u5e27\u7387 x frames/s std :: cout << \"\u89c6\u9891\u5bbd\u5ea6\uff1a \" << width << std :: endl ; std :: cout << \"\u89c6\u9891\u9ad8\u5ea6\uff1a \" << height << std :: endl ; std :: cout << \"\u89c6\u9891\u603b\u5e27\u6570\uff1a \" << totalFrames << std :: endl ; std :: cout << \"\u5e27\u7387\uff1a \" << frameRate << std :: endl ; cv :: Mat frame ; // cap.set(CV_CAP_PROP_POS_FRAMES, 20); //\u8df3\u8f6c\u5230\u7b2c20\u5e27 while ( 1 ) { cap >> frame ; if ( frame . empty ()) break ; cv :: imshow ( \"hello\" , frame ); cv :: waitKey ( 50 ); } cap . release (); return 0 ; } \u89c6\u9891\u5b58\u50a8 #include <opencv2/opencv.hpp> #include <iostream> int main ( int argc , char const * argv []) { cv :: VideoCapture cap ; cap . open ( \"test.mp4\" ); if ( ! cap . isOpened ()) return 0 ; int width = cap . get ( CV_CAP_PROP_FRAME_WIDTH ); //\u5e27\u5bbd\u5ea6 int height = cap . get ( CV_CAP_PROP_FRAME_HEIGHT ); //\u5e27\u9ad8\u5ea6 int totalFrames = cap . get ( CV_CAP_PROP_FRAME_COUNT ); //\u603b\u5e27\u6570 int frameRate = cap . get ( CV_CAP_PROP_FPS ); //\u5e27\u7387 x frames/s std :: cout << \"\u89c6\u9891\u5bbd\u5ea6\uff1a \" << width << std :: endl ; std :: cout << \"\u89c6\u9891\u9ad8\u5ea6\uff1a \" << height << std :: endl ; std :: cout << \"\u89c6\u9891\u603b\u5e27\u6570\uff1a \" << totalFrames << std :: endl ; std :: cout << \"\u5e27\u7387\uff1a \" << frameRate << std :: endl ; cv :: VideoWriter wri ; wri . open ( \"test_copy.avi\" , CV_FOURCC ( 'M' , 'P' , '4' , '2' ), frameRate , cv :: Size ( width , height )); cv :: Mat frame ; while ( 1 ) { cap >> frame ; if ( frame . empty ()) break ; wri << frame ; } cap . release (); wri . release (); return 0 ; }","title":"c++\u7b80\u660e\u6559\u7a0b"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_1","text":"#include\u7684<>\u548c\" \" <> \u5148\u53bb\u7cfb\u7edf\u76ee\u5f55\u4e2d\u627e\u5934\u6587\u4ef6\uff0c\u5982\u679c\u6ca1\u6709\u518d\u5230\u5f53\u524d\u76ee\u5f55\u4e0b\u627e\u3002 \u800c \" \" \u9996\u5148\u5728\u5f53\u524d\u76ee\u5f55\u4e0b\u5bfb\u627e\uff0c\u5982\u679c\u627e\u4e0d\u5230\uff0c\u518d\u5230\u7cfb\u7edf\u76ee\u5f55\u4e2d\u5bfb\u627e\u3002 \u547d\u540d\u7a7a\u95f4 \u4e3b\u8981\u662f\u7528\u6765\u533a\u5206\u4e0d\u540c\u5e93\u4e2d\u76f8\u540c\u540d\u79f0\u7684\u51fd\u6570\u3001\u7c7b\u3001\u53d8\u91cf\u7b49\u3002**\u4f7f\u7528\u4e86\u547d\u540d\u7a7a\u95f4\u5373\u5b9a\u4e49\u4e86\u4e0a\u4e0b\u6587\u3002**\u672c\u8d28\u4e0a\uff0c\u547d\u540d\u7a7a\u95f4\u5c31\u662f\u5b9a\u4e49\u4e86\u4e00\u4e2a\u8303\u56f4\u3002 #include <iostream> using namespace std ; // \u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4 namespace first_space { void func (){ cout << \"Inside first_space\" << endl ; } } // \u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4 namespace second_space { void func (){ cout << \"Inside second_space\" << endl ; } } int main () { // \u8c03\u7528\u7b2c\u4e00\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 first_space :: func (); // \u8c03\u7528\u7b2c\u4e8c\u4e2a\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u51fd\u6570 second_space :: func (); return 0 ; } // \u5d4c\u5957\u7684\u547d\u540d\u7a7a\u95f4 namespace namespace_name1 { // \u4ee3\u7801\u58f0\u660e namespace namespace_name2 { // \u4ee3\u7801\u58f0\u660e } } // \u8bbf\u95ee namespace_name2 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 :: namespace_name2 ; // \u8bbf\u95ee namespace:name1 \u4e2d\u7684\u6210\u5458 using namespace namespace_name1 ; \u5e38\u7528\u57fa\u7840\u77e5\u8bc6 // 1.typedef \u58f0\u660e,\u4f7f\u7528 typedef \u4e3a\u4e00\u4e2a\u5df2\u6709\u7684\u7c7b\u578b\u53d6\u4e00\u4e2a\u65b0\u7684\u540d\u5b57 typedef int feet ; feet distance = 3 ; // 2.\u5e38\u91cf const const \u6570\u636e\u7c7b\u578b \u5e38\u91cf\u540d = \u5e38\u91cf\u503c\uff1b \u6570\u636e\u7c7b\u578b const \u5e38\u91cf\u540d = \u5e38\u91cf\u503c\uff1b // \u4e24\u79cd\u5b9a\u4e49\uff0c\u58f0\u660e\u65f6\u5fc5\u987b\u8d4b\u503c\uff0c\u58f0\u660e\u540e\u53ea\u8bfb\u3002 // 3.\u6570\u636e\u8f6c\u6362 // 3.1 \u9690\u542b\u8f6c\u6362\u4ece\u4f4e\u5230\u9ad8 int a=3; float b = a; char --> short --> int --> unsigned --> long --> unsigned long --> float --> double // 3.2 \u663e\u793a\u8f6c\u6362 \u7c7b\u578b\u8bf4\u660e\u7b26(\u8868\u8fbe\u5f0f)\u3002 float z=7.56; int a = int(z); // 3.3 4\u79cd\u7c7b\u578b\u8f6c\u6362\u64cd\u4f5c\u7b26\uff1b\u7ec6\u52064\u79cd static_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 // \u57fa\u672c\u6570\u636e\u7c7b\u578b\u95f4\u7684\u8f6c\u6362\u90fd\u9002\u7528\uff1aint(z) <==> static_cast<int>(z) const_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 reinterpret_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 dynamic_cast < \u7c7b\u578b\u8bf4\u660e\u7b26 > \uff08\u8868\u8fbe\u5f0f\uff09 // 4.\u53d8\u91cf\u7684\u5b58\u50a8\u7c7b\u578b\uff0c\u53d8\u91cf\u51fa\u4e86\u6570\u636e\u7c7b\u578b(int/float/double..)\u5916\u8fd8\u6709\u5b58\u50a8\u7c7b\u578b\uff0c\u51b3\u5b9a\u4e86\u5176\u5b58\u50a8\u65b9\u5f0f auto // \u6682\u65f6\u6027\u5b58\u50a8\uff0c\u5176\u5b58\u50a8\u7a7a\u95f4\u53ef\u4ee5\u88ab\u82e5\u5e72\u53d8\u91cf\u591a\u6b21\u8986\u76d6\u4f7f\u7528\u3002\u91c7\u7528\u5806\u6808\u65b9\u5f0f\u5206\u914d\u5185\u5b58\u7a7a\u95f4 register // \u5b58\u653e\u5728\u901a\u7528\u5bc4\u5b58\u5668\u4e2d extern // \u5728\u6240\u6709\u51fd\u6570\u548c\u7a0b\u5e8f\u6bb5\u4e2d\u90fd\u53ef\u4ee5\u5f15\u7528 static // \u5728\u5185\u5b58\u4e2d\u4ee5\u56fa\u5b9a\u5730\u5740\u5b58\u653e\uff0c\u6574\u4e2a\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u90fd\u6709\u6548 // 5.\u679a\u4e3e\u7c7b\u578benum enum \u679a\u4e3e\u7c7b\u578b\u540d { \u53d8\u91cf\u503c\u5217\u8868 }; // \u679a\u4e3e\u58f0\u660e\u5f62\u5f0f enum Weekday { SUM , MON , TUE , WED , THU , FRI , SAT }; // \u4e3e\u4f8b\u5b50\uff0c\u679a\u4e3e\u5143\u7d20\u5177\u6709\u9ed8\u8ba4\u503c:0,1,2,3... // \u6ce8\u610f\u679a\u4e3e\u7c7b\u578b\u662f\u5e38\u91cf\u4e0d\u80fd\u8d4b\u503c\uff0cSUN=0;//\u975e\u6cd5 \uff0c\u4f7f\u7528\u7684\u65f6\u5019\u76f4\u63a5\u5f53\u6210\u5e38\u91cf\u4f7f\u7528\u5373\u53ef\uff1aSUN\u62ff\u6765\u5c31\u7528\uff0c\u5df2\u7ecf\u5b9a\u4e49\u8fc7\u4e86 enum Weekday { SUN = 7 , MON = 1 , TUE , WED , THU , FRI , SAT }; // SUN\u4e3a7\uff0cMON\u4e3a1\uff0c\u4ee5\u540e\u987a\u51fa\u52a01\uff0cSAT\u4e3a6 int count = SUN ; // \u9690\u542b\u7c7b\u578b\u8f6c\u6362 Weekday day = Weekday ( 2 ); // \u663e\u793a\u7c7b\u578b\u8f6c\u6362 // 6.\u51fd\u6570\u53c2\u6570\u4f20\u9012 // 6.1 \u503c\u4f20\u9012:\u5355\u5411\u4f20\u9012\u8fc7\u7a0b\uff0c\u4e00\u65e6\u5f62\u53c2\u83b7\u5f97\u503c\u4fbf\u4e0e\u5b9e\u53c2\u8131\u79bb\u5173\u7cfb\uff0c\u4f3a\u5019\u65e0\u8bba\u5f62\u53c2\u53d1\u751f\u4e86\u600e\u6837\u7684\u6539\u53d8\uff0c\u90fd\u4e0d\u4f1a\u5f71\u54cd\u5230\u5b9e\u53c2 // 6.2 \u5f15\u7528\u4f20\u9012:\u5f62\u53c2\u76f8\u5f53\u4e8e\u5b9e\u53c2\u7684\u522b\u540d\uff0c\u4e00\u65e6\u5f62\u53c2\u53d1\u751f\u53d8\u5316\uff0c\u5b9e\u53c2\u4e5f\u4f1a\u6539\u53d8\uff0cvoid swap(int &a,int &b){xxx} // 6.3 \u6570\u7ec4\u540d\u4f5c\u4e3a\u51fd\u6570\u53c2\u6570 void rowSum ( int a [][ 2 ], int nRow ){ xxx } int table [ 3 ][ 2 ] = {{ 1 , 2 },{ 3 , 4 },{ 1 , 4 }}; rowSum ( a , 3 ); // 7.\u51fd\u6570\u91cd\u8f7d:\u5177\u6709\u76f8\u540c\u51fd\u6570\u540d\uff0c\u4f46\u662f\u5f62\u53c2\u4e2a\u6570\u6216\u5f62\u53c2\u7c7b\u578b\u5fc5\u987b\u81f3\u5c11\u4e00\u4e2a\u4e0d\u540c\uff0c\u8fd4\u56de\u503c\u7c7b\u578b\u4e5f\u53ef\u4e0d\u540c\u3002\u4f46\u7f16\u8bd1\u5668\u4e0d\u4ee5\u8fd4\u56de\u503c\u6765\u533a\u5206\u51fd\u6570\u3002 // 8.c++\u7cfb\u7edf\u51fd\u6570 #include<cmath> sqrt/abs/min/max/sin/cos/tan/.... // 9.\u7ed3\u6784\u4f53 \u548c c++\u7c7b\u552f\u4e00\u533a\u522b\uff0c\u7c7b\u9ed8\u8ba4\u6210\u5458\u4e3aprivate\uff0c\u7ed3\u6784\u4f53\u9ed8\u8ba4\u6210\u5458 public\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u4e3b\u8981\u662f\u4e0ec\u517c\u5bb9 // 9.1 \u5b9a\u4e49 struct \u7ed3\u6784\u4f53\u540d { \u516c\u6709\u6210\u5458 protected : \u4fdd\u62a4\u578b\u6210\u5458 private : \u79c1\u6709\u6210\u5458 } \uff1b // 9.2 \u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u7c7b\u578b\u3002 struct Student { int num ; string name ; char sex ; int age ; }; Student stu = { 97001 , \"chenyuyang\" , 'F' , 19 } //9. \u8054\u5408\u4f53\uff0c\u4e00\u7ec4\u6570\u636e\u4e2d\u4efb\u4f55\u4e24\u4e2a\u6570\u636e\u4e0d\u4f1a\u540c\u65f6\u6709\u6548,\u4f8b\u5982\u4e00\u95e8\u8bfe\u7a0b\u901a\u8fc7\u6216\u8005\u4e0d\u901a\u8fc7 union \u8054\u5408\u4f53\u540d\u79f0 { \u516c\u6709\u6210\u5458 // \u9ed8\u8ba4\u8bbf\u95ee\u6743\u9650 protected : \u4fdd\u62a4\u578b\u6210\u5458 private : \u79c1\u6709\u6210\u5458 } // \u4e3e\u4f8b\u5b50 union Mark { char grade ; // \u7b49\u7ea7\u5236\u7684\u6210\u7ee9 bool pass ; // \u53ea\u8bb0\u662f\u5426\u901a\u8fc7\u7684\u6210\u7ee9 int percent ; // \u767e\u5206\u5236\u7684\u6210\u7ee9 } // 10.\u9884\u5904\u7406\u547d\u4ee4 // 10.1\u5b8f\u5b9a\u4e49define\uff0c\u5b8f\u540d\u4e00\u822c\u5927\u5199 // 10.1.1 \u4e0d\u5e26\u53c2\u6570\u7684\u5b8f\u5b9a\u4e49 #define LENGTH 10 #define M y*y+3*y // M\u4ee3\u66ffy*y+3*y\u4f7f\u7528 // 10.1.2 \u5e26\u53c2\u6570\u5b8f #define M(y) y*y+3*y // k = M(5); #define MAX(a,b) (a>b):a:b // 10.1.3 \u53d6\u6d88\u5b8f #undef LENGTH // \u53d6\u6d88\u5b8f\uff0c\u540e\u7eed\u8be5\u5b8f\u4e0d\u53ef\u7528 // 10.2 \u6761\u4ef6\u7f16\u8bd1:\u7528\u6765\u6709\u9009\u62e9\u5730\u5bf9\u90e8\u5206\u7a0b\u5e8f\u6e90\u4ee3\u7801\u8fdb\u884c\u7f16\u8bd1 // 10.2.1 #ifdef \u5982\u679c\u6807\u8bc6\u7b26\u88ab#define\u547d\u4ee4\u5b9a\u4e49\u8fc7\uff0c\u5219\u5bf91\u8fdb\u884c\u7f16\u8bd1\uff0c\u5426\u5219\u5bf92\u8fdb\u884c\u7f16\u8bd1 #ifdef \u6807\u8bc6\u7b26 \u7a0b\u5e8f\u6bb5 1 #else \u7a0b\u5e8f\u6bb5 2 #endif // 10.2.2 #ifndef\uff0c\u5982\u679c\u6807\u8bc6\u7b26\u672a\u88ab#define\u547d\u4ee4\u5b9a\u4e49\u8fc7\uff0c\u5219\u5bf91\u8fdb\u884c\u7f16\u8bd1\uff0c\u5426\u5219\u5bf92\u8fdb\u884c\u7f16\u8bd1\uff0c\u548c10.2.1\u76f8\u53cd #ifndef \u6807\u8bc6\u7b26 \u7a0b\u5e8f\u6bb5 1 #else \u7a0b\u5e8f\u6bb5 2 #endif // 10.2.3 # if #if \u5e38\u91cf\u8868\u8fbe\u5f0f // \u5e38\u91cf\u8868\u8fbe\u5f0f:\u7ed3\u679c\u662f0/\u975e0 \u7a0b\u5e8f\u6bb5 1 #else \u7a0b\u5e8f\u6bb5 2 #endif // 10.3 #error\u547d\u4ee4\uff0c\u7528\u4e8e\u8c03\u8bd5\uff0c\u5728\u7f16\u8bd1\u4e2d\u9047\u5230#error\u6307\u4ee4\u5c31\u505c\u6b62\u7f16\u8bd1 #error \u51fa\u9519\u4fe1\u606f // \u51fa\u9519\u4fe1\u606f:\"XXX has been defined\" // 11. \u57fa\u672c\u8f93\u5165\u8f93\u51fa #include <iostream> cout << \"string\uff1a \" << name << endl ; // \u6d41\u63d2\u5165\u8fd0\u7b97\u7b26 << \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528 cin >> name >> age ; // \u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26 >> \u5728\u4e00\u4e2a\u8bed\u53e5\u4e2d\u53ef\u4ee5\u591a\u6b21\u4f7f\u7528\uff0c\u5982\u679c\u8981\u6c42\u8f93\u5165\u591a\u4e2a\u6570\u636e cerr << \"Error message : \" << str << endl ; //\u6807\u51c6\u9519\u8bef\u6d41: cerr \u5bf9\u8c61\u662f\u975e\u7f13\u51b2\u7684\uff0c\u4e14\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 cerr \u90fd\u4f1a\u7acb\u5373\u8f93\u51fa clog << \"Error message : \" << str << endl ; // \u6807\u51c6\u65e5\u5fd7\u6d41:clog \u5bf9\u8c61\u662f\u7f13\u51b2\u7684\u3002\u8fd9\u610f\u5473\u7740\u6bcf\u4e2a\u6d41\u63d2\u5165\u5230 clog \u90fd\u4f1a\u5148\u5b58\u50a8\u5728\u7f13\u51b2\u5728\uff0c\u76f4\u5230\u7f13\u51b2\u586b\u6ee1\u6216\u8005\u7f13\u51b2\u533a\u5237\u65b0\u65f6\u624d\u4f1a\u8f93\u51fa\u3002 //\u7f16\u5199\u548c\u6267\u884c\u5927\u578b\u7a0b\u5e8f\u65f6\uff0c\u4f7f\u7528 cerr \u6d41\u6765\u663e\u793a\u9519\u8bef\u6d88\u606f\uff0c\u800c\u5176\u4ed6\u7684\u65e5\u5fd7\u6d88\u606f\u5219\u4f7f\u7528 clog \u6d41\u6765\u8f93\u51fa\u3002 // 12 new/delete \u548c new Type[]/delete[] obj; // 12.1 \u5b9a\u4e49 void * operator new ( size_t ); //allocate an object void * operator delete ( void * ); //free an object void * operator new []( size_t ); //allocate an array void * operator delete []( void * ); //free an array // 12.2 \u8bed\u6cd5 // 12.2.1 \u53d8\u91cf\u7533\u8bf7 Type * pointer = new Type ; .... delete pointer ; // 12.2.2 \u6570\u636e\u7533\u8bf7 Type * pointer new Type [ N ]; ... // pointer\u662f\u6307\u9488\uff0cpointer\u6307\u5411\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u53ef\u4ee5\u7528pointer[0]/*pointer,\u7b2c\u4e8c\u4e2a\u5143\u7d20pointer[1]/*(pointer+1) delete [] pointer ; // 13.\u6307\u9488:\u6307\u9488\u662f\u53d8\u91cf\uff0c\u5185\u5bb9\u662f\u5185\u5b58\u7684\u5730\u5740\u7f16\u53f7 int * p = NULL ; int a = 1 ; int * p =& a ; // \u5b9a\u4e49 * p // \u4f7f\u7528:\u8be5\u5730\u5740\u6240\u5b58\u50a8\u5185\u5bb9,\u8fd9\u65f6\u5176\u5b9e\u5c31\u662fa int i = 30 ; int * p =& i ; int ** pp =& pi ; // pp\u662f\u4e8c\u7ea7\u6307\u9488 int b = 40 ; * pp = & b ; // \u6539\u53d8\u4e00\u7ea7\u6307\u9488\u7684\u7684\u6307\u5411 // 13.1 \u6307\u9488\u548c\u6570\u7ec4:\u6307\u9488\u662f\u6307\u9488\u53d8\u91cf\uff0c\u6570\u7ec4\u662f\u6307\u9488\u5e38\u91cf int * p , a [] = { 1 , 2 , 4 }; p = a ; // \u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c p [ i ] == a [ i ]; * ( p + i ) ==* ( a + i ) // 13.2 const\u4fee\u9970 // 13.2.1 const\u4fee\u9970\u6307\u9488\uff0cconst\u4fee\u9970\u7684\u662fp\uff0cp\u4e3a\u5e38\u91cf\uff0c\u4f46*p\u53ef\u4ee5\u8d4b\u503c int a = 2 ; int * const p =& a ; int b = 4 ; p =& b ; // \u6307\u9488\u5e38\u91cf\u65e0\u6cd5\u4fee\u6539 // 13.2.2 const\u4fee\u9970\u6307\u5411\uff0cconst\u4fee\u9970\u7684\u662f*p,\u5373*p\u4e3a\u5e38\u91cf\uff0c\u4f46p\u662f\u666e\u901a\u53d8\u91cf\uff0c\u968f\u610f\u8d4b\u503c int a = 2 ; const int * p =& a ; int b = 4 ; p =& b ; * p = 200 ; // \u7f16\u8bd1\u901a\u4e0d\u8fc7 // 13.3 \u51fd\u6570\u6307\u9488\u53d8\u91cf void print (){ xxx }; void ( * pf )() = print ; pf () == print () == ( * pf )(); // 13.4 \u51fd\u6570\u540d\u505a\u53c2\u6570 void xxx ( int a , int b , int ( * p )( int , int )){ xxx } int haha ( int a , int b ){ return a + b ;} xxx ( 10 , 3 , haha ); // 14. \u6d45 \u5f02\u5e38\u5904\u7406 throw: \u5f53\u95ee\u9898\u51fa\u73b0\u65f6\uff0c\u7a0b\u5e8f\u4f1a\u629b\u51fa\u4e00\u4e2a\u5f02\u5e38\u3002\u8fd9\u662f\u901a\u8fc7\u4f7f\u7528 throw \u5173\u952e\u5b57\u6765\u5b8c\u6210\u7684\u3002 catch: \u5728\u60f3\u8981\u5904\u7406\u95ee\u9898\u7684\u5730\u65b9\uff0c\u901a\u8fc7\u5f02\u5e38\u5904\u7406\u7a0b\u5e8f\u6355\u83b7\u5f02\u5e38\u3002catch \u5173\u952e\u5b57\u7528\u4e8e\u6355\u83b7\u5f02\u5e38\u3002 try: try \u5757\u4e2d\u653e\u7f6e\u53ef\u80fd\u629b\u51fa\u5f02\u5e38\u7684\u4ee3\u7801\uff0ctry \u5757\u4e2d\u7684\u4ee3\u7801\u88ab\u79f0\u4e3a\u4fdd\u62a4\u4ee3\u7801\u3002\u5b83\u540e\u9762\u901a\u5e38\u8ddf\u7740\u4e00\u4e2a\u6216\u591a\u4e2a catch \u5757\u3002 \u629b\u51fa\u5f02\u5e38\uff0c\u53ef\u4ee5\u4f7f\u7528 throw \u8bed\u53e5\u5728\u4ee3\u7801\u5757\u4e2d\u7684\u4efb\u4f55\u5730\u65b9\u629b\u51fa\u5f02\u5e38\u3002throw \u8bed\u53e5\u7684\u64cd\u4f5c\u6570\u53ef\u4ee5\u662f\u4efb\u610f\u7684\u8868\u8fbe\u5f0f\uff0c\u8868\u8fbe\u5f0f\u7684\u7ed3\u679c\u7684\u7c7b\u578b\u51b3\u5b9a\u4e86\u629b\u51fa\u7684\u5f02\u5e38\u7684\u7c7b\u578b\u3002 // \u6355\u83b7\u5f02\u5e38 try { // \u4fdd\u62a4\u4ee3\u7801 } catch ( ExceptionName e1 ) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } catch ( ExceptionName e2 ) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } catch ( ExceptionName eN ) { // \u80fd\u5904\u7406\u4efb\u4f55\u5f02\u5e38\u7684\u4ee3\u7801 } // \u76f4\u63a5\u629b\u51fa\u5f02\u5e38 double division ( int a , int b ) { if ( b == 0 ) { throw \"Division by zero condition!\" ; } return ( a / b ); } // \u4eba\u4e3a\u5b9a\u4e49\u65b0\u7684\u5f02\u5e38 #include <iostream> #include <exception> using namespace std ; struct MyException : public exception { const char * what () const throw () { return \"C++ Exception\" ; } }; int main () { try { throw MyException (); } catch ( MyException & e ) { std :: cout << \"MyException caught\" << std :: endl ; std :: cout << e . what () << std :: endl ; } catch ( std :: exception & e ) { //\u5176\u4ed6\u7684\u9519\u8bef } }","title":"\u57fa\u672c\u77e5\u8bc6"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_2","text":"// \u7c7b\u7684\u5b9a\u4e49 class Box { public : // \u516c\u6709\u6210\u5458\u5728\u7a0b\u5e8f\u4e2d\u7c7b\u7684\u5916\u90e8\u662f\u53ef\u8bbf\u95ee\u7684 // \u6784\u9020\u51fd\u6570:\u4f1a\u5728\u6bcf\u6b21\u521b\u5efa\u7c7b\u7684\u65b0\u5bf9\u8c61\u65f6\u6267\u884c,\u65e0\u8fd4\u56de\u503c\uff0c\u540d\u5b57\u548c\u7c7b\u540d\u4e00\u6837 Box (); //\u65e0\u53c2\u6784\u9020\u51fd\u6570\u58f0\u660e,\u4e0d\u5199\u6784\u9020\u51fd\u6570\u65f6\uff0c\u81ea\u52a8\u521b\u5efa Box ( double len ); // \u6709\u53c2\u6784\u9020\u51fd\u6570\u58f0\u660e\uff0c\u5199\u4e86\u540e\uff0c\u4e0d\u4f1a\u518d\u81ea\u52a8\u521b\u5efa\u65e0\u53c2\u6784\u9020\u51fd\u6570 // \u62f7\u8d1d\u6784\u9020\u51fd\u6570:\u5f62\u53c2\u662f\u672c\u7c7b\u5bf9\u8c61\u7684\u5f15\u7528\uff0c\u53ef\u52a0const\u3002\u4f5c\u7528:\u4e00\u4e2a\u5df2\u5b58\u5728\u7684\u5bf9\u8c61\u521d\u59cb\u5316\u540c\u7c7b\u7684\u4e00\u4e2a\u65b0\u5bf9\u8c61 // \u5982\u679c\u6ca1\u6709\u7c7b\u5185\u58f0\u660e\uff0c\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\u9690\u542b\u7684\u590d\u5236\u6784\u9020\u51fd\u6570:\u628a\u521d\u59cb\u503c\u5bf9\u8c61\u7684\u6bcf\u4e2a\u6570\u636e\u6210\u5458\u7684\u503c\u90fd\u590d\u5236\u5230\u65b0\u5efa\u7acb\u7684\u5bf9\u8c61\u4e2d\u53bb // \u4ec0\u4e48\u65f6\u5019\u4f1a\u4f7f\u7528\uff1f // 1. \u7c7b\u7684\u4e00\u4e2a\u5bf9\u8c61\u521d\u59cb\u5316\u53e6\u4e00\u4e2a\u5bf9\u8c61\u65f6:Box a(10); Box b(a); Box c=a;//\u4e24\u79cd\u7528\u6cd5 // 2.\u51fd\u6570\u7684\u5f62\u53c2\u662f\u7c7b\u7684\u5bf9\u8c61\uff0c\u8c03\u7528\u51fd\u6570\u2018\u503c\u2019\u4f20\u9012\u65f6; void f(Box b){} Box c(10); f(c); // 3.\u51fd\u6570\u8fd4\u56de\u503c\u662f\u7c7b\u5bf9\u8c61\u65f6:\u56e0\u4e3a\u8be5\u7c7b\u5bf9\u8c61\u79bb\u5f00\u51fd\u6570\u5c31\u4f1a\u6d88\u4ea1\uff0c\u6240\u4ee5\u5fc5\u987b\u590d\u5236\u6784\u9020\u51fd\u6570\u624d\u80fd\u8fd4\u56de Box ( const Box & obj ); // \u58f0\u660e\u62f7\u8d1d\u6784\u9020\u51fd\u6570 // \u6790\u6784\u51fd\u6570:\u4f1a\u5728\u6bcf\u6b21\u5220\u9664\u6240\u521b\u5efa\u7684\u5bf9\u8c61\u65f6\u6267\u884c,\u540c\u7c7b\u540d,\u65e0\u8fd4\u56de\u503c,\u4e0d\u63a5\u6536\u4efb\u4f55\u53c2\u6570\uff0c\u4f46\u53ef\u4ee5\u662f\u865a\u51fd\u6570 ~ Box (); // \u6790\u6784\u51fd\u6570\u7684\u58f0\u660e // \u6210\u5458\u53d8\u91cf\uff0c\u666e\u901a\u51fd\u6570/\u5185\u8054\u51fd\u6570/\u5e38\u6210\u5458\u51fd\u6570 double length ; double breadth ; double height ; // \u76d2\u5b50\u7684\u957f\u5bbd\u9ad8 double getVolume ( void ); //\u666e\u901a\u51fd\u6570\u58f0\u660e\uff0c\u5982\u679c\u76f4\u63a5\u5728\u7c7b\u5185\u5b9a\u4e49\u5b9e\u73b0\uff0c\u90a3\u4e48\u79f0\u4e3a\u5185\u8054\u51fd\u6570\uff0cinline\u53ef\u7701\u7565 double getVolume ( int a ); // \u91cd\u8f7d\u51fd\u6570\uff0c\u540c\u540d\uff0c\u4f9d\u636e\u53c2\u6570\u7c7b\u578b\u4e0d\u540c\u5224\u65ad\uff0c\u4e0d\u80fd\u4ec5\u901a\u8fc7\u8fd4\u56de\u7c7b\u578b\u5224\u65ad double get_length (){ return length ;} // \u5185\u8054\u51fd\u6570/\u4e5f\u53ef\u4ee5\u7c7b\u5185\u58f0\u660e\u5728\u7c7b\u5916\u524d\u9762\u52a0inline\u53ef\u4ee5\u5b9a\u4e49 // \u5982\u679c\u4e00\u4e2a\u5bf9\u8c61\u88ab\u5b9a\u4e49\u4e3a\u5e38\u5bf9\u8c61\uff0c\u90a3\u4e48\u5b83\u53ea\u80fd\u8c03\u7528\u5e38\u6210\u5458\u51fd\u6570\uff0cconst\u5173\u952e\u5b57\u53ef\u4ee5\u7528\u4e8e\u91cd\u8f7d\u8fd8\u662f\u51fd\u6570\u7684\u533a\u5206 void print_length () const ; // \u53cb\u5143\u51fd\u6570:1.\u4e0d\u662f\u6210\u5458\u51fd\u6570 2.\u5fc5\u987b\u5b9a\u4e49\u5728\u7c7b\u5916\u90e8\uff0c\u4f46\u6709\u6743\u8bbf\u95ee\u7c7b\u7684\u6240\u6709 \u79c1\u6709+\u4fdd\u62a4\u6210\u5458 // \u53cb\u5143\u51fd\u6570\u6ca1\u6709 this \u6307\u9488\uff0c\u56e0\u4e3a\u53cb\u5143\u4e0d\u662f\u7c7b\u7684\u6210\u5458\u3002\u53ea\u6709\u6210\u5458\u51fd\u6570\u624d\u6709 this \u6307\u9488 friend void printWidth ( Box box ); // \u58f0\u660e\u53cb\u5143\u51fd\u6570 // this\u6307\u9488:this \u6307\u9488\u662f\u6240\u6709\u6210\u5458\u51fd\u6570\u7684\u9690\u542b\u53c2\u6570\u3002\u56e0\u6b64\uff0c\u5728\u6210\u5458\u51fd\u6570\u5185\u90e8\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u6307\u5411\u8c03\u7528\u5bf9\u8c61\u3002 double thisGetVolume ( void ){ return this -> getVolume ();} // \u9759\u6001\u6210\u5458:\u5728\u7c7b\u7684\u6240\u6709\u5bf9\u8c61\u4e2d\u662f\u5171\u4eab\u7684,\u610f\u5473\u7740\u65e0\u8bba\u521b\u5efa\u591a\u5c11\u4e2a\u7c7b\u7684\u5bf9\u8c61\uff0c\u9759\u6001\u6210\u5458\u90fd\u53ea\u6709\u4e00\u4e2a\u526f\u672c static int objectCount ; // \u5982\u679c\u628a\u51fd\u6570\u6210\u5458\u58f0\u660e\u4e3a\u9759\u6001\u7684\uff0c\u5c31\u53ef\u4ee5\u628a\u51fd\u6570\u4e0e\u7c7b\u7684\u4efb\u4f55\u7279\u5b9a\u5bf9\u8c61\u72ec\u7acb\u5f00\u6765\u3002\u9759\u6001\u6210\u5458\u51fd\u6570\u5373\u4f7f\u5728\u7c7b\u5bf9\u8c61\u4e0d\u5b58\u5728\u7684\u60c5\u51b5\u4e0b\u4e5f\u80fd\u88ab\u8c03\u7528\uff0c\u9759\u6001\u51fd\u6570\u53ea\u8981\u4f7f\u7528\u7c7b\u540d\u52a0\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26::\u5c31\u53ef\u4ee5\u8bbf\u95ee // \u9759\u6001\u6210\u5458\u51fd\u6570\u6ca1\u6709this\u6307\u9488\uff0c\u5e76\u4e14\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u6210\u5458(\u9759\u6001\u6210\u5458\u53d8\u91cf+\u9759\u6001\u6210\u5458\u51fd\u6570) static int getObjectCount (); // \u91cd\u8f7d\u8fd0\u7b97\u7b26:\u51fd\u6570\u540d\u662f\u7531\u5173\u952e\u5b57 operator \u548c\u5176\u540e\u8981\u91cd\u8f7d\u7684\u8fd0\u7b97\u7b26\u7b26\u53f7\u6784\u6210\u7684\u3002\u4e0e\u5176\u4ed6\u51fd\u6570\u4e00\u6837\uff0c\u91cd\u8f7d\u8fd0\u7b97\u7b26\u6709\u4e00\u4e2a\u8fd4\u56de\u7c7b\u578b\u548c\u4e00\u4e2a\u53c2\u6570\u5217\u8868\uff0c\u53ef\u91cd\u8f7d\u8fd0\u7b97\u7b26\u89c1\u4e0b\u56fe\uff0c\u4e0b\u9762\u662f \u91cd\u8f7d + \u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u628a\u4e24\u4e2a Box \u5bf9\u8c61\u76f8\u52a0 Box operator + ( const Box & b ) { Box box ; box . length = this -> length + b . length ; box . breadth = this -> breadth + b . breadth ; box . height = this -> height + b . height ; return box ; } private : //\u79c1\u6709\u6210\u5458\u53d8\u91cf\u6216\u51fd\u6570\u5728\u7c7b\u7684\u5916\u90e8\u662f\u4e0d\u53ef\u8bbf\u95ee\u7684\uff0c\u751a\u81f3\u662f\u4e0d\u53ef\u67e5\u770b\u7684\u3002\u53ea\u6709\u7c7b\u548c\u53cb\u5143\u51fd\u6570\u53ef\u4ee5\u8bbf\u95ee\u79c1\u6709\u6210\u5458\u3002\u5982\u679c\u6ca1\u6709\u4f7f\u7528\u4efb\u4f55\u8bbf\u95ee\u4fee\u9970\u7b26\uff0c\u7c7b\u7684\u6210\u5458\u9ed8\u8ba4\u4e3a\u79c1\u6709\u6210\u5458 const int const_a ; // \u5e38\u6570\u636e\u6210\u5458\uff0c\u53ea\u80fd\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u6765\u83b7\u5f97\u521d\u503c double width ; double lenght ; int * ptr ; protected : // \u4fdd\u62a4\u6210\u5458\u7c7b\u4f3c\u79c1\u6709\u6210\u5458\uff0c\u4f46\u4fdd\u62a4\u6210\u5458\u5728\u6d3e\u751f\u7c7b\uff08\u5373\u5b50\u7c7b\uff09\u4e2d\u662f\u53ef\u8bbf\u95ee\u7684\u3002 }; //\u4e00\u822c\u90fd\u662f\u7c7b\u5185\u58f0\u660e\u51fd\u6570\uff0c\u7c7b\u7684\u5916\u90e8\u4f7f\u7528\u8303\u56f4\u89e3\u6790\u8fd0\u7b97\u7b26 :: \u5b9a\u4e49\u8be5\u51fd\u6570 // \u5b9a\u4e49\u6784\u9020\u51fd\u6570 Box :: Box ( void ){...} Box :: Box ( double len ){...} Box :: Box ( int i ) : const_a ( i ){...} // \u5e38\u6570\u636e\u6210\u5458\uff0c\u53ea\u80fd\u901a\u8fc7\u521d\u59cb\u5316\u5217\u8868\u6765\u83b7\u5f97\u521d\u503c // \u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Box :: Box ( const Box & obj ){ ptr = new int ; * ptr =* obj . ptr ; // \u62f7\u8d1d\u503c} // \u5b9a\u4e49\u6790\u6784\u51fd\u6570 Box ::~ Line ( void ){...} // \u5b9a\u4e49\u5e26\u8fd4\u56de\u503c\u7684\u6210\u5458\u51fd\u6570---\u300b\u8fd4\u56de\u503c\u7c7b\u578b \u7c7b\u540d::\u51fd\u6570\u6210\u5458\u540d(\u53c2\u6570\u8868){\u51fd\u6570\u4f53} double Box :: getVolume ( void ){...} double Box :: getVolume ( void ){...} // \u5b9a\u4e49\u5e38\u6210\u5458\u51fd\u6570,\u8c03\u7528 const Box b(10); b.print_length(); void Box :: print_length (){ cout << length << endl ;} // \u53cb\u5143\u51fd\u6570\u5b9a\u4e49,\u867d\u7136\u58f0\u660e\u5728\u7c7b\u5185\u90e8\uff0c\u4f46\u5e76\u4e0d\u662f\u7c7b\u6210\u5458\u51fd\u6570\uff0c\u662f\u72ec\u7acb\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u4e0d\u9700\u8981\u4f7f\u7528\u89e3\u6790\u8fd0\u7b97\u7b26:: void printWidth ( Box box ){ cout << box . width << endl ;} // \u6ce8\u610f\uff0c\u8fd9\u91cc\u8bbf\u95ee\u4e86\u7c7b\u7684\u79c1\u6709\u53d8\u91cf:width // \u521d\u59cb\u5316\u7c7b Box \u7684\u9759\u6001\u6210\u5458 int Box :: objectCount = 1 ; // \u7c7b\u7684\u58f0\u660e Box box1 ; Box box2 = Box ( parameters ); Box box3 ( parameters ); Box * box4 = new Box ( parameters ); //\u8bbf\u95ee\u7c7b\u7684\u6210\u5458 box1 . length = 5.0 ; cout << box1 . length << endl ; \u524d\u5411\u5f15\u7528\u7533\u660e class A { public : void f ( B b ); } class B { public : void g ( A a ); } // \u61f5\u903c\u4e86\u5427\uff0c\u6b64\u65f6\u548b\u8c03\u7528\uff1f class B ; // \u524d\u5411\u5f15\u7528\u58f0\u660e\u5373\u53ef class A { public : void f ( B b ); } class B { public : void g ( A a ); } \u591a\u6587\u4ef6\u7ed3\u6784 // point.h class Point { public : Point (); Point ( int x = 0 , int y = 0 ) : x ( x ), y ( y ){} Point ( const Point & p ); ~ Point (){ count -- ;} int getX () const { return x ;} int getY () const { return y ;} static void showCount (); private : int x , y ; static int count ; }; // Point.cpp #include \"point.h\" #include <iostream> using namespace std ; int Point :: count = 0 ; //\u4f7f\u7528\u7c7b\u540d\u521d\u59cb\u5316\u9759\u6001\u6570\u636e\u6210\u5458 Point :: Point ( const Point & p ) : x ( p . x ), y ( p . y ){ count ++ ; } void Point :: showCount () { cout << \"Object count=\" << count << endl ; } // main.cpp #include \"point.h\" #include <iostream> using namespace std ; int main (){ Point a ( 4 , 5 ); cout << \"Point A:\" << a . getX () << \",\" << a . getY (); Point :: showCount (); Point b ( a ); cout << \"Point B:\" << b . getX () << \",\" << b . getY (); Point :: showCount (); return 0 ; } \u7ee7\u627f class \u6d3e\u751f\u7c7b\u540d : \u7ee7\u627f\u65b9\u5f0f \u57fa\u7c7b\u540d 1 \uff0c\u7ee7\u627f\u65b9\u5f0f \u57fa\u7c7b\u540d 2. ..{} // \u57fa\u7c7b Shape class Shape { public : void setWidth ( int w ){ width = w ;} void setHeight ( int h ){ height = h ;} protected : int width ; int height ; }; // \u57fa\u7c7b PaintCost class PaintCost { public : int getCost ( int area ){ return area * 70 ;} }; // \u6d3e\u751f\u7c7b class Rectangle : public Shape , public PaintCost { public : int getArea (){ return ( width * height );} }; \u6ce8\u610f\u4e8b\u9879 // 1. \u5982\u679c\u6d3e\u751f\u7c7b\u58f0\u660e\u4e86\u4e00\u4e2a\u548c\u67d0\u57fa\u7c7b\u6210\u5458\u540c\u540d\u7684\u65b0\u6210\u5458(\u53c2\u6570\u8868\u4e5f\u76f8\u540c\uff0c\u5426\u5219\u4e3a\u91cd\u8f7d)\uff0c\u6d3e\u751f\u7c7b\u65b0\u6210\u5458\u9690\u85cf\u4e86\u5916\u5c42\u540c\u540d\u6210\u5458 // 2. \u6d3e\u751f\u7c7b\u53ef\u4ee5\u8bbf\u95ee\u57fa\u7c7b\u4e2d\u6240\u6709\u7684\u975e\u79c1\u6709\u6210\u5458\uff0c\u540c\u65f6\uff0c\u4e00\u4e2a\u6d3e\u751f\u7c7b\u7ee7\u627f\u4e86\u6240\u6709\u7684\u57fa\u7c7b\u65b9\u6cd5\uff0c\u4f46\u4e0b\u5217\u60c5\u51b5\u9664\u5916\uff1a // 2.1.\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u3001\u6790\u6784\u51fd\u6570\u548c\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002 // 2.2.\u57fa\u7c7b\u7684\u91cd\u8f7d\u8fd0\u7b97\u7b26\u3002 // 2.3.\u57fa\u7c7b\u7684\u53cb\u5143\u51fd\u6570 // 3.\u8bbf\u95ee\u63a7\u5236 // 3.1 public\uff0c\u516c\u6709\u7ee7\u627f:\u57fa\u7c7b\u7684public\u80fd\u76f4\u63a5\u8bbf\u95ee\uff0cprotected\u4fee\u9970\u7684\u7c7b\u5185\u80fd\u8bbf\u95ee\u7c7b\u5916\u5bf9\u8c61\u4e0d\u80fd\u8bbf\u95ee\uff0c\u4f46private\u4fee\u9970\u7684\u4e0d\u53ef\u76f4\u63a5\u8bbf\u95ee // 3.2 private,\u79c1\u6709\u7ee7\u627f\uff1a\u57fa\u7c7b\u7684public\u548cprotected\u4fee\u9970\u7684\u4ee5\u79c1\u6709\u6210\u5458\u8eab\u4efd\u51fa\u73b0\u5728\u6d3e\u751f\u7c7b\u4e2d\uff0cprivate\u4fee\u9970\u7684\u4e0d\u53ef\u76f4\u63a5\u8bbf\u95ee // 3.3 protected\uff0c\u4fdd\u62a4\u7ee7\u627f\uff1a\u57fa\u7c7b\u7684public\u548cprotected\u4fee\u9970\u7684\u4ee5\u4fdd\u62a4\u6210\u5458\u8eab\u4efd\u51fa\u73b0\u5728\u6d3e\u751f\u7c7b\u4e2d\u4f46\u662f\u7c7b\u5916\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u4ed6\u4eec\uff0cprivate\u4fee\u9970\u7684\u4e0d\u53ef\u76f4\u63a5\u8bbf\u95ee // 4.\u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570 \u5fc5\u987b\u5bf9\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u8fdb\u884c\u521d\u59cb\u5316\uff0c\u56e0\u4e3a\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u5e76\u6ca1\u6709\u88ab\u7ee7\u627f // 4.1 \u6784\u9020\u51fd\u6570,\u5bf9\u4e8e\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u7684\u57fa\u7c7b\uff0c\u53ef\u4ee5\u4e0d\u7ed9\u51fa\u7c7b\u540d\uff0c\u5bf9\u4e8e\u6210\u5458\u5bf9\u8c61\u4e5f\u7c7b\u4f3c \u6d3e\u751f\u7c7b\u540d :: \u6d3e\u751f\u7c7b\u540d ( \u53c2\u6570\u8868 ) : \u57fa\u7c7b\u540d 1 ( \u57fa\u7c7b 1 \u521d\u59cb\u5316\u53c2\u6570\u8868 ),..., \u57fa\u7c7b\u540d n ( \u57fa\u7c7b n\u521d\u59cb\u5316\u53c2\u6570\u8868 ), \u6210\u5458\u5bf9\u8c61\u540d 1 ( \u6210\u5458\u5bf9\u8c61 1 \u521d\u59cb\u5316\u53c2\u6570\u8868 ),..., \u6210\u5458\u5bf9\u8c61\u540d m ( \u6210\u5458\u5bf9\u8c61 m\u521d\u59cb\u5316\u53c2\u6570\u8868 ){ xxx } class Base1 { public : Base1 ( int i ){ cout << \"Constrtucting Base1\" << i << endl ;} }; class Base2 { public : Base2 ( int j ){ cout << \"Constrtucting Base2\" << j << endl ;} }; class Base3 { public : Base3 (){ cout << \"Constrtucting Base3*\" << endl ;} }; // \u57fa\u7c7b\u6784\u9020\u51fd\u6570\u7684\u2018\u8c03\u7528\u2019\u987a\u5e8f\u662f\u6309\u7167\u6d3e\u751f\u7c7b\u5b9a\u4e49\u65f6\u7684\u987a\u5e8f\uff0c\u56e0\u6b64\u5e94\u8be5\u662f\u5148Base2\uff0c\u518dBase1,\u6700\u540eBase3 class Derived : public Base2 , public Base1 , public Base3 { // \u6ce8\u610f\u57fa\u7c7b\u540d\u7684\u987a\u5e8f\uff0c\u4f9d\u6b21\u4e3a\u57fa\u51c6 public : // \u6ce8\u610f\u57fa\u7c7b\u540d\u7684\u4e2a\u6570\u548c\u987a\u5e8f\uff0c\u6ce8\u610f\u6210\u5458\u5bf9\u8c61\u540d\u7684\u4e2a\u6570\u548c\u987a\u5e8f\uff0c\u8fd9\u91ccBase3\u662f\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u65e0\u9700\u4f20\u53c2\uff0c\u5b9a\u4e49\u987a\u5e8f\u968f\u610f Derived ( int a , int b , int c , int d ) : Base1 ( a ), member2 ( d ), member1 ( c ), Base2 ( b ){} private : Base1 member1 ; Base2 member2 ; Base3 member3 ; } // 4.2\u590d\u5236\u6784\u9020\u51fd\u6570 Derived :: Derived ( const Derived & v ) : Base ( v )(...) // \u53ef\u4ee5\u7528\u6d3e\u751f\u7c7b\u7684\u5bf9\u8c61\u53bb\u521d\u59cb\u5316\u57fa\u7c7b\u7684\u5f15\u7528 // 4.3\u6790\u6784\u51fd\u6570\uff0c\u65e0\u53c2\u6570\u6240\u4ee5\u65e0\u9700\u5199\uff0c\u53ea\u4e0d\u8fc7\u91ca\u653e\u987a\u5e8f\u521a\u597d\u548c\u6784\u9020\u51fd\u6570\u987a\u5e8f\u76f8\u53cd // 5.\u591a\u7ee7\u627f\u91cd\u540d\u95ee\u9898\uff0c\u865a\u57fa\u7c7b\u89e3\u51b3\uff1aBase\u57fa\u7c7b\uff0cBase1\u548cBase2\u7ee7\u627f\u81eaBase\u7c7b\uff0cBase3\u7ee7\u627f\u81eaBase1\u548cBase2,\u90a3\u4e48Base1\u548cBase2\u4e2d\u4f1a\u6709\u5f88\u591a\u540c\u540d\u51fd\u6570\uff0c\u90a3Base3\u4e2d\u600e\u4e48\u8bbf\u95ee\uff1f\u65b9\u6cd5\u4e00:\u6bcf\u4e2a\u65b9\u6cd5\u540d\u53ef\u4ee5\u7528\u4f5c\u7528\u57df\u533a\u5206(Base1::fun/Base2::fun)\u3002\u65b9\u6cd5\u4e8c\uff1a\u628aBase\u7c7b\u8bbe\u7f6e\u4e3a\u865a\u57fa\u7c7b\uff0c\u6b64\u65f6Base1/Base2\u4e2d\u6240\u6709\u540c\u540d\u51fd\u6570\u53ea\u6709\u4e00\u4e2a\u6620\u5c04 // 5.1\u865a\u57fa\u7c7b\u58f0\u660e class \u6d3e\u751f\u7c7b\u540d : virtual \u7ee7\u627f\u65b9\u5f0f \u57fa\u7c7b\u540d { xxx } // Base3\u8bbf\u95ee\u7684\u540c\u540d\u51fd\u6570\u662f\u76f4\u63a5\u8bbf\u95eeBase\u7c7b\u51fd\u6570/\u6570\u636e\u6210\u5458 // 5.2 \u865a\u57fa\u7c7b\u7684\u6784\u9020\u51fd\u6570 class Base0 { public : Base0 ( int var ) : var0 ( var ){} int var0 ; } class Base1 : virtual public Base0 { public : Base1 ( int var ) : Base0 ( var ){} int var1 ; } class Base2 : virtual public Base0 { public : Base2 ( int var ) : Base0 ( var ){} int var2 ; } class Derived : public Base1 , public Base2 { public : Derived ( int var ) : Base0 ( var ), Base1 ( var ), Base2 ( var ){} // \u865a\u57fa\u7c7b\u4e09\u6b21\u521d\u59cb\u5316\uff1f\u5b8c\u5168\u53ef\u4ee5\u8fd9\u6837\u5199 } \u591a\u6001 \u865a\u51fd\u6570**\u662f\u5728**\u57fa\u7c7b**\u4e2d\u4f7f\u7528\u5173\u952e\u5b57 **virtual \u58f0\u660e\u7684\u51fd\u6570 \u3002\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u65b0\u5b9a\u4e49\u57fa\u7c7b\u4e2d**\u5b9a\u4e49\u7684\u865a\u51fd\u6570\u65f6\uff0c\u4f1a\u544a\u8bc9\u7f16\u8bd1\u5668\u4e0d\u8981\u9759\u6001\u94fe\u63a5\u5230\u8be5\u51fd\u6570\u3002 \u6211\u4eec\u60f3\u8981\u7684\u662f**\u5728\u7a0b\u5e8f\u4e2d\u4efb\u610f\u70b9\u53ef\u4ee5\u6839\u636e\u6240\u8c03\u7528\u7684\u5bf9\u8c61\u7c7b\u578b\u6765\u9009\u62e9\u8c03\u7528\u7684\u51fd\u6570 \uff0c\u8fd9\u79cd\u64cd\u4f5c\u88ab\u79f0\u4e3a**\u52a8\u6001\u94fe\u63a5**\uff0c\u6216\u540e\u671f\u7ed1\u5b9a\u3002 \u82e5\u5728\u57fa\u7c7b\u4e2d\u4e0d\u80fd\u5bf9\u865a\u51fd\u6570\u7ed9\u51fa\u6709\u610f\u4e49\u7684\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f1a\u7528\u5230\u7eaf\u865a\u51fd\u6570\uff0c\u5728\u51fd\u6570\u53c2\u6570\u540e\u76f4\u63a5\u52a0 = 0 \u544a\u8bc9\u7f16\u8bd1\u5668\uff0c\u51fd\u6570\u6ca1\u6709\u4e3b\u4f53\uff0c\u8fd9\u79cd\u865a\u51fd\u6570\u5373\u662f\u7eaf\u865a\u51fd\u6570\u3002 class Shape { protected : int width , height ; public : // \u6784\u9020\u51fd\u6570 Shape ( int a = 0 , int b = 0 ) { width = a ; height = b ; } // \u865a\u51fd\u6570 virtual int area () { cout << \"Parent class area :\" << endl ; return 0 ; } // \u7eaf\u865a\u51fd\u6570\uff0c\u5982\u679c\u7c7b\u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\u88ab\u58f0\u660e\u4e3a\u7eaf\u865a\u51fd\u6570\uff0c\u5219\u8fd9\u4e2a\u7c7b\u5c31\u662f\u62bd\u8c61\u7c7b\u3002 // \u8bbe\u8ba1\u62bd\u8c61\u7c7b\uff08\u901a\u5e38\u79f0\u4e3a ABC\uff09\u7684\u76ee\u7684\uff0c\u662f\u4e3a\u4e86\u7ed9\u5176\u4ed6\u7c7b\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u7ee7\u627f\u7684\u9002\u5f53\u7684\u57fa\u7c7b\u3002\u62bd\u8c61\u7c7b\u4e0d\u80fd\u88ab\u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\uff0c\u5b83\u53ea\u80fd\u4f5c\u4e3a\u63a5\u53e3\u4f7f\u7528\u3002\u56e0\u6b64\uff0c\u5982\u679c\u4e00\u4e2a ABC \u7684\u5b50\u7c7b\u9700\u8981\u88ab\u5b9e\u4f8b\u5316\uff0c\u5219\u5fc5\u987b\u5b9e\u73b0\u6bcf\u4e2a\u865a\u51fd\u6570\uff0c\u5982\u679c\u6ca1\u6709\u5728\u6d3e\u751f\u7c7b\u4e2d\u91cd\u8f7d\u7eaf\u865a\u51fd\u6570\uff0c\u5c31\u5c1d\u8bd5\u5b9e\u4f8b\u5316\u8be5\u7c7b\u7684\u5bf9\u8c61\uff0c\u4f1a\u5bfc\u81f4\u7f16\u8bd1\u9519\u8bef\u3002\u53ef\u7528\u4e8e\u5b9e\u4f8b\u5316\u5bf9\u8c61\u7684\u7c7b\u88ab\u79f0\u4e3a\u5177\u4f53\u7c7b\u3002 virtual int area () = 0 ; }; // \u7ee7\u627f class Rectangle : public Shape { public : // \u6d3e\u751f\u7c7b\u7684\u6784\u9020\u51fd\u6570\u5b9e\u73b0\u65f6\uff0c\u56e0\u4e3a\u57fa\u7c7b\u5199\u4e86\u9700\u8981\u4f20\u53c2\u7684\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u5728\u6784\u9020\u65f6\u76f4\u63a5\u4f20\u5165\u57fa\u7c7b\u9700\u7684\u53c2\u6570 Rectangle ( int a = 0 , int b = 0 ) : Shape ( a , b ) { } // \u5b9e\u73b0\u57fa\u7c7b\u7684\u865a\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u5b9e\u73b0\u4e86\u591a\u6001:\u610f\u5473\u7740\u8c03\u7528\u6210\u5458\u51fd\u6570\u65f6\u4f1a\u6839\u636e\u8c03\u7528\u51fd\u6570\u7684\u5bf9\u8c61\u7684\u7c7b\u578b\u6765\u6267\u884c\u4e0d\u540c\u7684\u51fd\u6570 int area (){ cout << \"Rectangle class area :\" << endl ; return ( width * height ); } }; class Triangle : public Shape { public : Triangle ( int a = 0 , int b = 0 ) : Shape ( a , b ) { } int area (){ cout << \"Triangle class area :\" << endl ; return ( width * height / 2 ); } }; // \u7a0b\u5e8f\u7684\u4e3b\u51fd\u6570 int main ( ) { Shape * shape ; Rectangle rec ( 10 , 7 ); Triangle tri ( 10 , 5 ); // \u5b58\u50a8\u77e9\u5f62\u7684\u5730\u5740 shape = & rec ; // \u8c03\u7528\u77e9\u5f62\u7684\u6c42\u9762\u79ef\u51fd\u6570 area shape -> area (); //Rectangle class area // \u5b58\u50a8\u4e09\u89d2\u5f62\u7684\u5730\u5740 shape = & tri ; // \u8c03\u7528\u4e09\u89d2\u5f62\u7684\u6c42\u9762\u79ef\u51fd\u6570 area shape -> area (); //Triangle class area return 0 ; }","title":"\u7c7b\u548c\u5bf9\u8c61"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_3","text":"\u6a21\u677f\u662f\u6cdb\u578b\u7f16\u7a0b\u7684\u57fa\u7840\uff0c\u6cdb\u578b\u7f16\u7a0b\u5373\u4ee5\u4e00\u79cd\u72ec\u7acb\u4e8e\u4efb\u4f55\u7279\u5b9a\u7c7b\u578b\u7684\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801 // \u4e00\u822c\u683c\u5f0f template < class type > // template <typename T> return - type func - name ( parameter list ) { // \u51fd\u6570\u7684\u4e3b\u4f53 } // \u4e3e\u4f8b\u8bf4\u660e #include <iostream> #include <string> using namespace std ; //\u4f7f\u7528const&\u53ef\u8282\u7701\u4f20\u9012\u65f6\u95f4\uff0c\u540c\u65f6\u4fdd\u8bc1\u503c\u4e0d\u88ab\u6539\u53d8 template < typename T > inline T const & Max ( T const & a , T const & b ) { return a < b ? b : a ; } int main () { int i = 39 ; int j = 20 ; cout << \"Max(i, j): \" << Max ( i , j ) << endl ; double f1 = 13.5 ; double f2 = 20.7 ; cout << \"Max(f1, f2): \" << Max ( f1 , f2 ) << endl ; string s1 = \"Hello\" ; string s2 = \"World\" ; cout << \"Max(s1, s2): \" << Max ( s1 , s2 ) << endl ; return 0 ; } // \u7c7b\u6a21\u677f template < class type > class class - name { //\u7c7b\u7684\u4e3b\u4f53 } // \u4e3e\u4f8b\u5b50 #include <iostream> #include <vector> #include <cstdlib> #include <string> #include <stdexcept> using namespace std ; template < class T > class Stack { private : vector < T > elems ; // \u5143\u7d20 public : void push ( T const & ); // \u5165\u6808 void pop (); // \u51fa\u6808 T top () const ; // \u8fd4\u56de\u6808\u9876\u5143\u7d20 bool empty () const { // \u5982\u679c\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f\u3002 return elems . empty (); } }; template < class T > void Stack < T >:: push ( T const & elem ) { // \u8ffd\u52a0\u4f20\u5165\u5143\u7d20\u7684\u526f\u672c elems . push_back ( elem ); } template < class T > void Stack < T >:: pop () { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::pop() : empty stack \") ; } // \u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 elems . pop_back (); } template < class T > T Stack < T >:: top () const { if ( elems . empty ()) { throw out_of_range ( \"Stack<>::top() : empty stack \") ; } // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u526f\u672c return elems . back (); } int main () { try { Stack < int > intStack ; // int \u7c7b\u578b\u7684\u6808 Stack < string > stringStack ; // string \u7c7b\u578b\u7684\u6808 // \u64cd\u4f5c int \u7c7b\u578b\u7684\u6808 intStack . push ( 7 ); cout << intStack . top () << endl ; // \u64cd\u4f5c string \u7c7b\u578b\u7684\u6808 stringStack . push ( \"hello\" ); cout << stringStack . top () << std :: endl ; stringStack . pop (); stringStack . pop (); } catch ( exception const & ex ) { cerr << \"Exception: \" << ex . what () << endl ; return -1 ; } }","title":"\u6a21\u677f"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#stl","text":"STL\u4e2d\u5305\u62ec\u516d\u5927\u7ec4\u4ef6\uff1a\u5bb9\u5668\u3001\u8fed\u4ee3\u5668\u3001\u7b97\u6cd5\u3001\u4eff\u51fd\u6570\u3001\u8fed\u4ee3\u9002\u914d\u5668\u3001\u7a7a\u95f4\u914d\u7f6e\u5668\u3002 STL\u4e2d\u7684\u5e38\u7528\u5bb9\u5668\u5305\u62ec\uff1a\u5e8f\u5217\u5f0f\u5bb9\u5668\uff08vector\u3001deque\u3001list\uff09 \u5173\u8054\u5f0f\u5bb9\u5668\uff08map\u3001set\uff09 \u5bb9\u5668\u9002\u914d\u5668\uff08queue\u3001stack\uff09\u3002 STL\u5e93\u5e38\u7528\u51fd\u6570 // 0.\u4e00\u79cd\u5faa\u73af\u7684\u7b80\u5355\u7528\u6cd5c++11 vector < int > a = { 2 , 3 , 4 , 5 }; for ( auto i : a ) cout << i << \" \" ; // 0.1 for_each()\uff1aFunction for_each(InputIterator beg, InputIterator end, Function f) // for_each() \u53ef\u4ee5\u7406\u89e3\u4e3apython\u7684map\u64cd\u4f5c\uff0c\u66f4\u52a0\u590d\u6742\u7684\u53ef\u4ee5\u4f7f\u7528transform\u51fd\u6570 // 1.abs\u7684\u533a\u522b abs (); // \u4e3b\u8981\u662f\u5bf9int\u6c42\u7edd\u5bf9\u503c,\u5305\u542b\u5728<stdlib.h> fabs (); // \u5bf9float\uff0cdouble\u6c42\u7edd\u5bf9\u503c \u5305\u542b\u5728<cmath> // 1.1 sort\u6392\u5e8f #include<algorithm> void sort ( RandomAccessIterator first , RandomAccessIterator last , Compare comp ) * first \uff1a\u662f\u8981\u6392\u5e8f\u7684\u6570\u7ec4\u7684\u8d77\u59cb\u5730\u5740 * last \uff1a\u662f\u7ed3\u675f\u7684\u5730\u5740\uff08\u6700\u540e\u4e00\u4e2a\u6570\u636e\u7684\u540e\u4e00\u4e2a\u6570\u636e\u7684\u5730\u5740\uff09 * comp\u662f\u6392\u5e8f\u7684\u65b9\u6cd5 \uff1a\u53ef\u4ee5\u662f\u4ece\u5347\u5e8f\u4e5f\u53ef\u662f\u964d\u5e8f\u3002\u5982\u679c\u7b2c\u4e09\u4e2a\u53c2\u6570\u4e0d\u5199\uff0c\u5219\u9ed8\u8ba4\u7684\u6392\u5e8f\u65b9\u6cd5\u662f\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002 sort ( s . begin (), s . end ()); // \u5347\u5e8f\u6392\u5217 sort ( a , a + 10 ); // \u6570\u7ec4\u6392\u5e8f sort ( s . begin (), s . end (),[]( int a , int b ) -> bool { return a > b ;}); // \u964d\u5e8f // 1.2 max_element() \u4e0e min_element()\uff1a#include<algorithm>\uff0c\u8fd4\u56de\u533a\u95f4 [first,last)\u4e2d\u7b2c\u4e00\u4e2a\u6700\u5927\u503c\u548c\u7b2c\u4e00\u4e2a\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u8fed\u4ee3\u5668\u3002\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u627e\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c\u7684\u7d22\u5f15\uff09 ForwardIt min_element ( ForwardIt first , ForwardIt last [, cmp ]); //\u6307\u5411\u8303\u56f4 [first, last) \u4e2d\u6700\u5927\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u82e5\u8303\u56f4\u4e2d\u6709\u591a\u4e2a\u5143\u7d20\u7b49\u4ef7\u4e8e\u6700\u5927\u5143\u7d20\uff0c\u5219\u8fd4\u56de\u6307\u5411\u9996\u4e2a\u8fd9\u79cd\u5143\u7d20\u7684\u8fed\u4ee3\u5668\u3002\u82e5\u8303\u56f4\u4e3a\u7a7a\u5219\u8fd4\u56de last ForwardIt max_element ( ForwardIt first , ForwardIt last [, cmp ]); // \u4e3e\u4f8b\u5b50\uff0c\u6570\u7ec4 cout << max_element ( a , a + 6 ) - a << endl ; // \u8f93\u51fa\u6700\u5927\u503c\u7d22\u5f15 cout <<* max_element ( a , a + 6 ) << endl ; //\u8f93\u51fa\u6700\u5927\u503c // \u4e3e\u4f8b\u5b50\uff0cvector cout << max_element ( s . begin (), s . end ()) - s . begin () << endl ; // \u8f93\u51fa\u6700\u5927\u503c\u7d22\u5f15 cout <<* max_element ( s . begin (), s . end ()) << endl ; //\u8f93\u51fa\u6700\u5927\u503c // 1.3 accumulate #include<numeric>\uff1a\u4f5c\u7528\u6709\u4e24\u4e2a\uff0c\u4e00\u4e2a\u662f\u7d2f\u52a0\u6c42\u548c\uff0c\u53e6\u4e00\u4e2a\u662f\u81ea\u5b9a\u4e49\u7c7b\u578b\u6570\u636e\u7684\u5904\u7406 int sum = accumulate ( vec . begin () , vec . end () , 0 ); // \u7b2c\u4e09\u4e2a\u5f62\u53c2\u5219\u662f\u7d2f\u52a0\u7684\u521d\u503c string sum = accumulate ( v . begin () , v . end () , string ( \" \" )); //\u4ece\u7a7a\u5b57\u7b26\u4e32\u5f00\u59cb\uff0c\u628avec\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u8fde\u63a5\u6210\u4e00\u4e2a\u5b57\u7b26\u4e32 // 2.distance\u7684\u4f5c\u7528 #include <iterator> distance ( InputIterator first , InputIterator last ); // \u8be5\u51fd\u6570\u7528\u4e8e\u8ba1\u7b97\u4e24\u4e2a\u8fed\u4ee3\u5668\u8868\u793a\u7684\u8303\u56f4\u5185\u5305\u542b\u5143\u7d20\u7684\u4e2a\u6570:[first,last),\u4e3e\u4f8b:std::distance(v.begin(),v.end()) // 3.unique\uff1a\u5220\u9664\u76f8\u90bb\u7684\u91cd\u590d\u5143\u7d20\uff0c\u6240\u4ee5\u4e00\u822c\u662f\u6392\u5e8f\u540e\u4f7f\u7528 iterator unique ( iterator it_1 , iterator it_2 ); // \u5bf9[it_1,it_2)\u8303\u56f4\u5185\u7684\u5143\u7d20\u8fdb\u884c\u53bb\u91cd\uff0c\u8fd4\u56de\u503c\u662f\u4e00\u4e2a\u8fed\u4ee3\u5668:\u53bb\u91cd\u540e\u5bb9\u5668\u4e2d\u4e0d\u91cd\u590d\u5e8f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u5143\u7d20\u3002\u6ce8:\u5355\u7eaf\u7684\u4f7f\u7528unique\u51fd\u6570\u7684\u8bdd\uff0c\u5bb9\u5668\u7684\u957f\u5ea6\u5e76\u6ca1\u6709\u53d1\u751f\u53d8\u5316\uff0c\u53ea\u662f\u5143\u7d20\u7684\u4f4d\u7f6e\u53d1\u751f\u4e86\u53d8\u5316 vector < int > data = { 1 , 3 , 3 , 4 , 5 , 6 , 6 , 7 }; unique ( data . begin (), data . end ()); // {1 3 4 5 6 7 6 7 },\u4e0d\u91cd\u590d\u7684\u5143\u7d20\u90fd\u79fb\u5230\u4e86\u524d\u9762\uff0c\u540e\u9762\u5143\u7d20\u6ca1\u6539\u53d8\uff0c\u60ca\u8bb6\uff01\uff01\uff01 // \u5982\u679c\u60f3\u5220\u9664\u5143\u7d20\uff0c\u4e0d\u4fdd\u7559\u540e\u9762\u5143\u7d20\u5982\u4f55\u505a\uff1f new_end = unique ( data . begin (), data . end ()); // \u6ce8\u610f\u8fd4\u56de\u503c\uff0c\u4e0a\u9762\u6709\u89e3\u91ca data . erase ( new_end , data . end ()); // \u5220\u9664\u540e\u9762\u7684\u5143\u7d20\u5373\u53ef //4.transform,op\uff1a\u5c31\u662f\u51fd\u6570\u540d\uff0c\u8fd9\u4e2a\u51fd\u6570\u7c7b\u4f3c\u4e8epython\u7684map\u64cd\u4f5c,\u4e3a\u4fdd\u8bc1\u5143\u7d20\u4e2a\u6570\u76f8\u7b49\uff0cfir.resize(res.size) // \u5f53\u7136\uff0c\u5982\u679c\u662f\u7b80\u5355\u7684\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528 for_each\u4ee3\u66ff #include <algorithm> // \u4e00\u5143\u64cd\u4f5c\uff1a\u5c06op\u5e94\u7528\u4e8e[first1, last1)\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5e76\u5c06\u6bcf\u4e2a\u64cd\u4f5c\u8fd4\u56de\u7684\u503c\u5b58\u50a8\u5728\u4ee5result\u5f00\u5934\u7684\u8303\u56f4\u5185\uff0c\u5f53\u7136\uff0c\u8fd9\u4e2aresult\u53ef\u4ee5\u662ffirst.begin(),\u5373\u6267\u884creplace\u64cd\u4f5c template < class InputIterator , class OutputIterator , class UnaryOperation > OutputIterator transform ( InputIterator first1 , InputIterator last1 , OutputIterator result , UnaryOperation op ); // \u4e8c\u5143\u64cd\u4f5c:\u4f7f\u7528[first1, last1)\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u8c03\u7528binary_op,\u5e76\u4ee5first2\u5f00\u5934\u7684\u8303\u56f4\u5185\u7684\u6bcf\u4e2a\u5143\u7d20\uff08\u5143\u7d20\u4e2a\u6570\u5fc5\u987b\u548c1\u76f8\u540c\uff09\u4f5c\u4e3a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u8c03\u7528binary_op,\u6bcf\u6b21\u8c03\u7528\u8fd4\u56de\u7684\u503c\u90fd\u5b58\u50a8\u5728\u4ee5result\u5f00\u5934\u7684\u8303\u56f4\u5185\u3002 template < class InputIterator1 , class InputIterator2 , class OutputIterator , class BinaryOperation > OutputIterator transform ( InputIterator1 first1 , InputIterator1 last1 , InputIterator2 first2 , OutputIterator result , BinaryOperation binary_op ); // 6.\u4e8c\u5206\u67e5\u627e Binary_search/lower_bound/upper_bound:\u8be5\u51fd\u6570\u4ec5\u9002\u7528\u4e8e\u201c\u5df2\u6392\u597d\u5e8f\u201d\u7684\u5e8f\u5217\uff1a\u5e76\u4e0d\u662f\u4e25\u683c\u7684\u964d\u5e8f\u6d3b\u5347\u5e8f\uff0c\u53ea\u8981\u6ee1\u8db3\u201c\u6240\u6709\u4ee4 element<val\uff08\u6216\u8005 comp(val, element\uff09\u6210\u7acb\u7684\u5143\u7d20\u90fd\u4f4d\u4e8e\u4e0d\u6210\u7acb\u5143\u7d20\u7684\u524d\u9762\uff08\u5176\u4e2d element \u4e3a\u6307\u5b9a\u8303\u56f4\u5185\u7684\u5143\u7d20\uff09\u201d\u5373\u53ef\u3002 // 6.1 Binary search\uff1a\u7528\u4e8e\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u662f\u5426\u5305\u542b\u76ee\u6807\u503c\u3002 #include <algorithm> //\u67e5\u627e [first, last) \u533a\u57df\u5185\u662f\u5426\u5305\u542b val bool binary_search ( ForwardIterator first , ForwardIterator last , const T & val ); //\u6839\u636e comp \u6307\u5b9a\u7684\u89c4\u5219\uff0c\u67e5\u627e [first, last) \u533a\u57df\u5185\u662f\u5426\u5305\u542b val,comp:\u6b64\u53c2\u6570\u53ef\u63a5\u6536\u4e00\u4e2a\u5305\u542b 2 \u4e2a\u5f62\u53c2\uff08\u7b2c\u4e00\u4e2a\u5f62\u53c2\u503c\u4e3a val\uff09\u4e14\u8fd4\u56de\u503c\u4e3a bool \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u5bf9\u8c61\u3002 bool binary_search ( ForwardIterator first , ForwardIterator last , const T & val , Compare comp ); // 6.2 lower_bound():\u7528\u4e8e\u5728\u6307\u5b9a\u533a\u57df\u5185\u67e5\u627e\u5927\u4e8e\u7b49\u4e8e\u76ee\u6807\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002\u5f53\u67e5\u627e\u6210\u529f\u65f6\uff0c\u8fed\u4ee3\u5668\u6307\u5411\u627e\u5230\u7684\u5143\u7d20\uff1b\u53cd\u4e4b\uff0c\u5982\u679c\u67e5\u627e\u5931\u8d25\uff0c\u8fed\u4ee3\u5668\u7684\u6307\u5411\u548c last \u8fed\u4ee3\u5668\u76f8\u540c\u3002 #include <algorithm> //\u5728 [first, last) \u533a\u57df\u5185\u67e5\u627e\u4e0d\u5c0f\u4e8e val \u7684\u5143\u7d20 ForwardIterator lower_bound ( ForwardIterator first , ForwardIterator last , const T & val ); //\u5728 [first, last) \u533a\u57df\u5185\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408 comp \u89c4\u5219\u7684\u5143\u7d20\uff0ccomp:\u6b64\u53c2\u6570\u53ef\u63a5\u6536\u4e00\u4e2a\u5305\u542b 2 \u4e2a\u5f62\u53c2\uff08\u7b2c\u4e00\u4e2a\u5f62\u53c2\u503c\u59cb\u7ec8\u4e3a val\uff09\u4e14\u8fd4\u56de\u503c\u4e3a bool \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u5bf9\u8c61\u3002 ForwardIterator lower_bound ( ForwardIterator first , ForwardIterator last , const T & val , Compare comp ); // 6.3 upper_bound\uff1a\u5728\u6307\u5b9a\u8303\u56f4\u5185\u67e5\u627e\u5927\u4e8e\u76ee\u6807\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 #include <algorithm> //\u67e5\u627e[first, last)\u533a\u57df\u4e2d\u7b2c\u4e00\u4e2a\u5927\u4e8e val \u7684\u5143\u7d20\u3002 ForwardIterator upper_bound ( ForwardIterator first , ForwardIterator last , const T & val ); //\u67e5\u627e[first, last)\u533a\u57df\u4e2d\u7b2c\u4e00\u4e2a\u4e0d\u7b26\u5408 comp \u89c4\u5219\u7684\u5143\u7d20\uff0ccomp:\u6b64\u53c2\u6570\u53ef\u63a5\u6536\u4e00\u4e2a\u5305\u542b 2 \u4e2a\u5f62\u53c2\uff08\u7b2c\u4e00\u4e2a\u5f62\u53c2\u503c\u4e3a val\uff09\u4e14\u8fd4\u56de\u503c\u4e3a bool \u7c7b\u578b\u7684\u51fd\u6570\uff0c\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u51fd\u6570\u5bf9\u8c61\u3002 ForwardIterator upper_bound ( ForwardIterator first , ForwardIterator last , const T & val , Compare comp ); string \u975e\u5e38\u5168\u7684\u603b\u7ed3 // #include<string>\uff0c\u5e38\u7528\u51fd\u6570 // 1.1 \u521d\u59cb\u5316 string s1 ; // \u7a7a\u5b57\u7b26\u4e32 string s2 ( 10 , '$' ); // 10\u4e2a$ string s3 ( \"hello world\" ); string s4 ( s3 ); string s5 = \"Hahaha\" ; s5 . clear (); // \u6e05\u7a7a // string--to--char* const char * charstring = s5 . c_str (); // \u4f7f\u7528c_str()\u8fdb\u884c\u7c7b\u578b\u8f6c\u6362\u65f6\uff0cconst\u5173\u952e\u5b57\u662f\u5fc5\u987b\u7684 // \u5b57\u7b26\u4e32\u6bd4\u8f83 if ( 0 == s5 . compare ( \"Hahaha\" )) {...} // 1.2 \u5e38\u7528\u7b80\u5355\u65b9\u6cd5 int s5 . size (); //\u5f53\u524d\u5b57\u7b26\u4e32\u7684\u5927\u5c0f int s5 . length (); // \u5f53\u524d\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 bool s5 . empty (); // \u5224\u65ad\u5f53\u524d\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a void s5 . resize ( int len , char c ); //\u628a\u5b57\u7b26\u4e32\u5f53\u524d\u5927\u5c0f\u7f6e\u4e3alen\uff0c\u5e76\u7528\u5b57\u7b26c\u586b\u5145\u4e0d\u8db3\u7684\u90e8\u5206 int s5 . capacity (); // \u5f53\u524d\u7684\u5bb9\u91cf\uff0c\u5373string\u4e2d\u4e0d\u5fc5\u589e\u52a0\u5185\u5b58\u5373\u53ef\u5b58\u653e\u7684\u5143\u7d20\u4e2a\u6570\uff09 int s5 . max_size (); //\u8fd4\u56destring\u5bf9\u8c61\u4e2d\u53ef\u5b58\u653e\u7684\u6700\u5927\u5b57\u7b26\u4e32\u7684\u957f\u5ea6 s5 . swap ( s3 ); // \u4ea4\u6362s3\u548cs5\u7684\u5b57\u7b26\u4e32 s5 . push_back ( 'A' ); // \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\uff0c\u5fc5\u987b\u662f\u4e00\u4e2a\u5b57\u7b26 s5 . append ( \"ABC\" ); // \u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u5fc5\u987b\u662f\u5b57\u7b26\u4e32 // \u5224\u65ad\u662f\u5426\u662f\u6570\u5b57\u6216\u5b57\u6bcd #include <ctype.h> isdigit (); // \u6570\u5b57\u8fd4\u56de\u975e0\uff0c\u975e\u6570\u5b57\u8fd4\u56de0\uff1b isalpha (); // \u5b57\u6bcd\u8fd4\u56de\u975e0\uff0c\u975e\u5b57\u6bcd\u8fd4\u56de0\uff1b // 1.3 insert/erase/replace/empty str . insert ( 2 , 3 , 'A' ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 3\u4e2a \u5b57\u7b26'A' str . insert ( 2 , \"ABC\" ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 \u5b57\u7b26\u4e32 \"ABC\" str . insert ( 2 , \"ABC\" , 1 ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 \u5b57\u7b26\u4e32 \"ABC\" \u4e2d \u524d1\u4e2a \u5b57\u7b26 str . insert ( 2 , \"ABC\" , 1 , 1 ) // \u5728str\u4e0b\u6807\u4e3a2\u7684\u4f4d\u7f6e\u6dfb\u52a0 \u5b57\u7b26\u4e32 \"ABC\" \u4e2d\u4ece\u4f4d\u7f6e 1 \u5f00\u59cb\u7684 1 \u4e2a\u5b57\u7b26 str . erase ( 2 ) // \u5220\u9664 \u4e0b\u68072 \u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4e4b\u540e\u7684\u5168\u5220\u9664 str . erase ( 2 , 1 ) // \u5220\u9664 \u4e0b\u68072 \u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u4e4b\u540e\u7684 1\u4e2a \u5220\u9664 str . clear () // \u5220\u9664 str \u6240\u6709 str . replace ( 2 , 4 , \"abcd\" ) // \u4ece \u4e0b\u68072 \u7684\u4f4d\u7f6e\uff0c\u66ff\u6362 4\u4e2a\u5b57\u8282 \uff0c\u4e3a\"abcd\" // 1.4 find(\u5411\u540e)/rfind(\u5411\u524d)\u7528\u6cd5\u76f8\u540c // \u8fd4\u56de\u503c\u662f\u627e\u5230\u7684\u8be5\u5185\u5bb9\u7684\u7b2c\u4e00\u4e2a\u7d22\u5f15\uff0c\u5982\u679c\u6ca1\u627e\u5230\u8fd4\u56de string::npos size_t find ( const string & str , size_t pos = 0 ) const ; size_t find ( const char * s , size_t pos = 0 ) const ; size_t find ( const char * s , size_t pos , size_t n ) const ; size_t find ( char c , size_t pos = 0 ) const ; // \u4e3e\u4f8b\u5b50 str . find ( 'A' ) // \u67e5\u627e 'A' str . find ( 'B' , 1 ) // \u4ece \u4f4d\u7f6e1 \u5904\u5f00\u59cb\uff0c\u67e5\u627e'B' str . find ( \"ABC\" ) // \u67e5\u627e \"ABC\" str . find ( \"ABC\" , 1 , 2 ) // \u4ece \u4f4d\u7f6e1\u5f00\u59cb\u67e5\u627e 'ABC' \u7684\u524d 2\u4e2a \u5b57\u7b26 // 1.4.1 \u67e5\u627e\u662f\u5426\u5305\u542b\u6709\u5b50\u4e32\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\uff0cfind_first_of(\u5411\u540e)/find_last_of str . find_first_of ( \"abBc\" ) // \u67e5\u627e \"abBc\" \u548cstr \u76f8\u7b49\u7684\u4efb\u4f55\u5b57\u7b26\uff0c\"abBc\" \u4e2d\u6709\u5c31\u8fd4\u56de\u4f4d\u7f6e str . find_first_of ( \"abBc\" , 1 ) // \u67e5\u627e \"abBc\" \u548cstr \u76f8\u7b49\u7684\u4efb\u4f55\u5b57\u7b26\uff0c\u4ece \u4f4d\u7f6e1 \u5904\uff0c\u5f00\u59cb\u67e5\u627e\"abBc\" \u4e2d\u7684\u5b57\u7b26\uff0c\"abBc\" \u4e2d\u6709\u7684\u5c31\u8fd4\u56de\u4f4d\u7f6e str . find_first_of ( \"abBc\" , 1 , 2 ) // \u67e5\u627e \"abBc\" \u548cstr \u76f8\u7b49\u7684\u4efb\u4f55\u5b57\u7b26\uff0c\u4ece \u4f4d\u7f6e1 \u5904\uff0c\u5f00\u59cb\u67e5\u627e\"abBc\" \u7684\u524d 2\u4e2a \u5b57\u7b26\uff0c\"abBc\" \u4e2d\u6709\u7684\u5c31\u8fd4\u56de\u4f4d\u7f6e // 1.5 \u5b50\u4e32\u63d0\u53d6 str1 = str . substr ( 2 ) // \u63d0\u53d6\u5b50\u4e32\uff0c\u63d0\u53d6\u51fa str \u7684 \u4e0b\u6807\u4e3a2 \u5230\u672b\u5c3e\uff0c\u7ed9 str1 str1 = str . substr ( 2 , 3 ) // \u63d0\u53d6\u5b50\u4e32\uff0c\u63d0\u53d6\u51fa str \u7684 \u4e0b\u6807\u4e3a2 \u5f00\u59cb\uff0c\u63d0\u53d6\u4e09\u4e2a\u5b57\u8282\uff0c\u7ed9 str1 const char * s1 = str . data () // \u5c06string\u7c7b\u8f6c\u4e3a\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u8fd4\u56de\u7ed9s1 char * s = new char [ 10 ] str . copy ( s , count , pos ) // \u5c06 str \u91cc\u7684 pos \u4f4d\u7f6e\u5f00\u59cb\uff0c\u62f7\u8d1d count\u4e2a \u5b57\u7b26,\u5b58\u5230 s \u91cc vector // vector:\u52a8\u6001\u6570\u7ec4\uff0c\u5728\u5185\u5b58\u4e2d\u6709\u8fde\u7eed\u5b58\u50a8\u7a7a\u95f4\uff0c\u5feb\u901f\u968f\u673a\u8bbf\u95ee\uff0c\u4f46\u63d2\u5165\u5220\u9664\u8f83\u6162 //\u9700\u8981\u5305\u542b\u5934\u6587\u4ef6 #include <vector> //1.\u5b9a\u4e49\u548c\u521d\u59cb\u5316 vector < int > vec1 ; //\u9ed8\u8ba4\u521d\u59cb\u5316\uff0cvec1\u4e3a\u7a7a vector < int > vec2 ( vec1 ); //\u4f7f\u7528vec1\u521d\u59cb\u5316vec2 vector < int > vec3 ( vec1 . begin (), vec1 . end ()); //\u4f7f\u7528vec1\u521d\u59cb\u5316vec2 vector < int > vec4 ( 10 ); //10\u4e2a\u503c\u4e3a0\u7684\u5143\u7d20 vector < int > vec5 ( 10 , 4 ); //10\u4e2a\u503c\u4e3a4\u7684\u5143\u7d20 //2.\u5e38\u7528\u64cd\u4f5c\u65b9\u6cd5 //2.1 \u6dfb\u52a0\u51fd\u6570 vec1 . push_back ( 100 ); //\u5c3e\u90e8\u6dfb\u52a0\u5143\u7d20 vec1 . insert ( vec1 . begin () + 1 , 5 ); //\u5728vec1[1]\u5904\u63d2\u51655 vec1 . insert ( vec1 . begin () + 1 , 3 , 5 ); //\u5728vec1[1]\u5904\u63d2\u51653\u4e2a5 vec1 . insert ( vec1 . begin () + 1 , arr + 3 , arr + 6 ); //\u5728vec1[1]\u5904\u63d2\u5165\u6570\u7ec4arr\u7684\u7b2c\u4e09\u4e2a\u5230\u7b2c\u4e94\u4e2a\u6570 //2.2 \u5220\u9664\u51fd\u6570 vec1 . pop_back (); //\u5220\u9664\u672b\u5c3e\u5143\u7d20 vec1 . erase ( vec1 . begin (), vec1 . begin () + 2 ); //\u5220\u9664vec1[0]-vec1[2]\u4e4b\u95f4\u7684\u5143\u7d20\uff0c\u4e0d\u5305\u62ecvec1[2]\u5176\u4ed6\u5143\u7d20\u524d\u79fb vec1 . clear (); //\u6e05\u7a7a\u5143\u7d20\uff0c\u5143\u7d20\u5728\u5185\u5b58\u4e2d\u5e76\u672a\u6d88\u5931\uff0c\u901a\u5e38\u4f7f\u7528swap()\u6765\u6e05\u7a7a vector < int > (). swap ( V ); //\u5229\u7528swap\u51fd\u6570\u548c\u4e34\u65f6\u5bf9\u8c61\u4ea4\u6362\u5185\u5b58\uff0c\u4ea4\u6362\u4ee5\u540e\uff0c\u4e34\u65f6\u5bf9\u8c61\u6d88\u5931\uff0c\u91ca\u653e\u5185\u5b58\u3002 //2.3 \u904d\u5386\u51fd\u6570 vec1 [ 0 ]; //\u53d6\u5f97\u7b2c\u4e00\u4e2a\u5143\u7d20 vec1 . at ( int pos ); //\u8fd4\u56depos\u4f4d\u7f6e\u5143\u7d20\u7684\u5f15\u7528 vec1 . front (); //\u8fd4\u56de\u9996\u5143\u7d20\u7684\u5f15\u7528 vec1 . back (); //\u8fd4\u56de\u5c3e\u5143\u7d20\u7684\u5f15\u7528 vector < int >:: iterator begin = vec1 . begin (); //\u8fd4\u56de\u5411\u91cf\u5934\u6307\u9488\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator end = vec1 . end (); //\u8fd4\u56de\u5411\u91cf\u5c3e\u6307\u9488\uff0c\u6307\u5411\u5411\u91cf\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u4e0b\u4e00\u4e2a\u4f4d\u7f6e vector < int >:: iterator rbegin = vec1 . rbegin (); //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 vector < int >:: iterator rend = vec1 . rend (); //\u53cd\u5411\u8fed\u4ee3\u5668\uff0c\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e4b\u524d\u7684\u4f4d\u7f6e for ( vector < int >:: iterator it = vec1 . begin (); it < vec1 . end (); it ++ ){ cout << * it << endl ; } // vector\u4e2d\u7684find\uff0cvector\u6ca1\u6709find\u51fd\u6570\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528algorithm\u4e2d\u7684find\u4ee3\u66ff #include <algorithm> vector < int >:: iterator it = find ( vec . begin (), vec . end (), value ); if ( it != vec . end ()) cout <<* it << endl ; //2.4 \u5224\u65ad\u51fd\u6570 bool isEmpty = vec1 . empty (); //\u5224\u65ad\u662f\u5426\u4e3a\u7a7a //2.5 \u5927\u5c0f\u51fd\u6570 int size = vec1 . size (); //\u5143\u7d20\u4e2a\u6570 vec1 . capacity (); //\u8fd4\u56de\u5bb9\u5668\u5f53\u524d\u80fd\u591f\u5bb9\u7eb3\u7684\u5143\u7d20\u4e2a\u6570 vec1 . max_size (); //\u8fd4\u56de\u5bb9\u5668\u6700\u5927\u7684\u53ef\u80fd\u5b58\u50a8\u7684\u5143\u7d20\u4e2a\u6570 //2.6 \u6539\u52a8\u51fd\u6570 vec1 . assign ( int n , const T & x ); //\u8d4bn\u4e2a\u503c\u4e3ax\u7684\u5143\u7d20\u5230vec1\u4e2d\uff0c\u8fd9\u4f1a\u6e05\u9664\u6389vec1\u4e2d\u4ee5\u524d\u7684\u5185\u5bb9\u3002 vec1 . assign ( const_iterator first , const_iterator last ); //\u5f53\u524d\u5411\u91cf\u4e2d[first,last)\u4e2d\u5143\u7d20\u8bbe\u7f6e\u6210\u8fed\u4ee3\u5668\u6240\u6307\u5411\u91cf\u7684\u5143\u7d20\uff0c\u8fd9\u4f1a\u6e05\u9664\u6389vec1\u4e2d\u4ee5\u524d\u7684\u5185\u5bb9\u3002 queue & stack & deque // \u2460queque #include <queue> // queue<\u7c7b\u578b,[\u5bb9\u5668\u7c7b\u578b]> queue < int > q ; q . push ( x ); // \u5c06x\u63a5\u5230\u961f\u5217\u7684\u672b\u7aef q . size (); // \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 q . empty (); // \u961f\u5217\u662f\u5426\u4e3a\u7a7a q . front (); // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 q . back (); // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 q . pop (); // void,\u5f39\u51fa\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20 // \u2461stack #include <stack> stack < int > sta ; sta . push ( x ); // \u5728\u6808\u9876\u589e\u52a0\u5143\u7d20 sta . top (); // \u8fd4\u56de\u6808\u9876\u5143\u7d20 sta . pop (); // \u79fb\u9664\u6808\u9876\u5143\u7d20 sta . size (); // \u8fd4\u56de\u6808\u4e2d\u5143\u7d20\u6570\u76ee sta . empty (); // \u5806\u6808\u4e3a\u7a7a\u5219\u8fd4\u56de\u771f // \u2462deque:\u53cc\u5411\u961f\u5217\u4e0d\u8bba\u5728\u5c3e\u90e8\u6216\u5934\u90e8\u63d2\u5165\u5143\u7d20\u901f\u5ea6\u8f83\u5feb\uff0c\u4e2d\u95f4\u63d2\u5165\u5143\u7d20\u901f\u5ea6\u8f83\u6162 #include <deque> // \u5934\u6587\u4ef6 //1.\u58f0\u660e\u548c\u521d\u59cb\u5316 deque < type > deq ; // \u58f0\u660e\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3atype\u7684\u53cc\u7aef\u961f\u5217que deque < type > deq ( size ); // \u58f0\u660e\u4e00\u4e2a\u7c7b\u578b\u4e3atype\u3001\u542b\u6709size\u4e2a\u9ed8\u8ba4\u503c\u521d\u59cb\u5316\u5143\u7d20\u7684\u7684\u53cc\u7aef\u961f\u5217que deque < type > deq ( size , value ); // \u58f0\u660e\u4e00\u4e2a\u5143\u7d20\u7c7b\u578b\u4e3atype\u3001\u542b\u6709size\u4e2avalue\u5143\u7d20\u7684\u53cc\u7aef\u961f\u5217que deque < type > deq ( mydeque ); // deq\u662fmydeque\u7684\u4e00\u4e2a\u526f\u672c deque < type > deq ( first , last ); // \u4f7f\u7528\u8fed\u4ee3\u5668first\u3001last\u8303\u56f4\u5185\u7684\u5143\u7d20\u521d\u59cb\u5316deq //2.\u5e38\u7528\u6210\u5458\u51fd\u6570 deq [ index ]; //\u7528\u6765\u8bbf\u95ee\u53cc\u5411\u961f\u5217\u4e2d\u5355\u4e2a\u7684\u5143\u7d20\u3002 deq . at ( index ); //\u7528\u6765\u8bbf\u95ee\u53cc\u5411\u961f\u5217\u4e2d\u5355\u4e2a\u7684\u5143\u7d20\u3002 deq . front (); //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 deq . back (); //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u7684\u5f15\u7528\u3002 deq . push_front ( x ); //\u628a\u5143\u7d20x\u63d2\u5165\u5230\u53cc\u5411\u961f\u5217\u7684\u5934\u90e8\u3002 deq . push_back ( x ); //\u628a\u5143\u7d20x\u63d2\u5165\u5230\u53cc\u5411\u961f\u5217\u7684\u5c3e\u90e8\u3002 deq . pop_front (); //\u5f39\u51fa\u53cc\u5411\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u3002 deq . pop_back (); //\u5f39\u51fa\u53cc\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u3002 list // list:\u53cc\u5411\u94fe\u8868\uff0c\u5feb\u901f\u7684\u63d2\u5165\u548c\u5220\u9664\uff0c\u4f46\u662f\u968f\u673a\u8bbf\u95ee\u5374\u6bd4\u8f83\u6162 #include <list> //1.\u5b9a\u4e49\u548c\u521d\u59cb\u5316 list < int > lst1 ; //\u521b\u5efa\u7a7alist list < int > lst2 ( 5 ); //\u521b\u5efa\u542b\u67095\u4e2a\u5143\u7d20\u7684list list < int > lst3 ( 3 , 2 ); //\u521b\u5efa\u542b\u67093\u4e2a\u5143\u7d20\u503c\u4e3a2\u7684list list < int > lst4 ( lst2 ); //\u4f7f\u7528lst2\u521d\u59cb\u5316lst4 list < int > lst5 ( lst2 . begin (), lst2 . end ()); //\u540clst4 //2.\u5e38\u7528\u64cd\u4f5c\u51fd\u6570 lst1 . assign ( lst2 . begin (), lst2 . end ()); //\u7ed9list\u8d4b\u503c\u4e3alst2 lst1 . back (); //\u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5143\u7d20 lst1 . begin (); //\u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 lst1 . clear (); //\u5220\u9664\u6240\u6709\u5143\u7d20 lst1 . empty (); //\u5982\u679clist\u662f\u7a7a\u7684\u5219\u8fd4\u56detrue lst1 . end (); //\u8fd4\u56de\u672b\u5c3e\u7684\u8fed\u4ee3\u5668 lst1 . erase (); //\u5220\u9664\u4e00\u4e2a\u5143\u7d20 lst1 . front (); //\u8fd4\u56de\u7b2c\u4e00\u4e2a\u5143\u7d20 lst1 . insert (); //\u63d2\u5165\u4e00\u4e2a\u5143\u7d20\u5230list\u4e2d lst1 . max_size (); //\u8fd4\u56delist\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u5143\u7d20\u6570\u91cf lst1 . merge (); //\u5408\u5e76\u4e24\u4e2alist lst1 . pop_back (); //\u5220\u9664\u6700\u540e\u4e00\u4e2a\u5143\u7d20 lst1 . pop_front (); //\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 lst1 . push_back (); //\u5728list\u7684\u672b\u5c3e\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 lst1 . push_front (); //\u5728list\u7684\u5934\u90e8\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20 lst1 . rbegin (); //\u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u9006\u5411\u8fed\u4ee3\u5668 lst1 . remove (); //\u4ecelist\u5220\u9664\u5143\u7d20 lst1 . remove_if (); //\u6309\u6307\u5b9a\u6761\u4ef6\u5220\u9664\u5143\u7d20 lst1 . rend (); //\u6307\u5411list\u672b\u5c3e\u7684\u9006\u5411\u8fed\u4ee3\u5668 lst1 . resize (); //\u6539\u53d8list\u7684\u5927\u5c0f lst1 . reverse (); //\u628alist\u7684\u5143\u7d20\u5012\u8f6c lst1 . size (); //\u8fd4\u56delist\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 lst1 . sort (); //\u7ed9list\u6392\u5e8f lst1 . splice (); //\u5408\u5e76\u4e24\u4e2alist lst1 . swap (); //\u4ea4\u6362\u4e24\u4e2alist lst1 . unique (); //\u5220\u9664list\u4e2d\u76f8\u90bb\u91cd\u590d\u7684\u5143\u7d20 map // map:\u4e00\u79cd\u952e\u503c\u5bf9\u5bb9\u5668.map\u5185\u90e8\u81ea\u5efa\u4e00\u9897\u7ea2\u9ed1\u6811(\u4e00\u79cd\u975e\u4e25\u683c\u610f\u4e49\u4e0a\u7684\u5e73\u8861\u4e8c\u53c9\u6811)\uff0c\u8fd9\u9897\u6811\u5177\u6709\u5bf9\u6570\u636e\u81ea\u52a8\u6392\u5e8f\u7684\u529f\u80fd\uff0c\u6240\u4ee5\u5728map\u5185\u90e8\u6240\u6709\u7684\u6570\u636e\u90fd\u662f\u6709\u5e8f\u7684\u4e14\u552f\u4e00\u7684\u3002 #include <map> //1.\u5b9a\u4e49\u4e0e\u521d\u59cb\u5316 map < int , string > ID_Name ; // \u4f7f\u7528{}\u8d4b\u503c\u662f\u4ecec++11\u5f00\u59cb\u7684\uff0c\u56e0\u6b64\u7f16\u8bd1\u5668\u7248\u672c\u8fc7\u4f4e\u65f6\u4f1a\u62a5\u9519\uff0c\u5982visual studio 2012 map < int , string > ID_Name = {{ 2015 , \"Jim\" },{ 2016 , \"Tom\" },{ 2017 , \"Bob\" }}; map < int , string > map1 ; // 2.\u5c5e\u6027 int key = map1 -> first ; //\u53d6\u5f97key string value = map1 -> second ; //\u53d6\u5f97value // 3.\u57fa\u672c\u64cd\u4f5c\u51fd\u6570 map1 . begin (); // \u6307\u5411\u8d77\u59cb map1 . end (); // \u6307\u5411\u672b\u5c3e map1 . rbegin (); // \u6307\u5411\u672b\u5c3e map1 . rend (); // \u6307\u5411\u8d77\u59cb map1 . size (); // \u8fd4\u56de\u5bb9\u5668\u5927\u5c0f map1 . max_size (); // \u8ba1\u7b97map\u5bb9\u5668\u7684\u6700\u5927\u957f\u5ea6 map1 . empty (); // \u5224\u65ad\u5bb9\u5668\u662f\u5426\u4e3a\u7a7a map1 . find ( const key_type & k ); // \u8fd4\u56dekey\u6240\u5728\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668\uff0ckey\u4e0d\u5b58\u5728\u8fd4\u56demap1.end(); // if(map1.find(k) != map1.end()) { ... } map1 . count ( key ); // \u8fd4\u56de\u7684\u662f\u88ab\u67e5\u627e\u5143\u7d20\u7684\u4e2a\u6570\u3002\u5982\u679c\u6709\uff0c\u8fd4\u56de1\uff1b\u5426\u5219\uff0c\u8fd4\u56de0\u3002\u6ce8\u610f\uff0cmap\u4e2d\u4e0d\u5b58\u5728\u76f8\u540c\u5143\u7d20\uff0c\u6240\u4ee5\u8fd4\u56de\u503c\u53ea\u80fd\u662f1\u62160\u3002 map1 . clear (); // \u5220\u9664\u6240\u6709\u5143\u7d20 // 3.1 insert\u63d2\u5165\u5143\u7d20 map1 . insert ( std :: pair < int , string > ( 100 , \"hello\" )); // \u76f4\u63a5\u63d2\u5165\u952e\u503c\u5bf9 map1 . insert ( map1 . begin (), std :: pair < int , string > ( 100 , \"hello\" )); // \u901a\u8fc7\u8fed\u4ee3\u5668\u6307\u5b9a\u4f4d\u7f6e\u63d2\u5165 // 3.2 \u5220\u9664\u5143\u7d20 map1 . erase ( key ); // \u901a\u8fc7key\u5220\u9664 map1 . erase ( map1 . find ( key1 )); // \u901a\u8fc7\u8fed\u4ee3\u5668\u5220\u9664\u67d0\u503c map1 . erase ( map1 . begin (), map1 . end ()); // \u901a\u8fc7\u8fed\u4ee3\u5668\u5220\u9664 == map1.clear() // for_each()\u904d\u5386map\uff0c\u6ce8\u610flambda\u53c2\u6570\u8981\u5199\u6210pair\u7c7b\u578b\uff0c\u56e0\u4e3amap\u8fd4\u56de\u7684\u662f\u4e00\u5bf9\u6570\u636e\uff0c\u662fpair\u7c7b\u578b\u7684 for_each ( map1 . begin (), map1 . end (),[]( const pair < int , string > & it ){ cout << it . first << \":\" << it . second << endl ;}) set // set\uff1aset\u7684\u542b\u4e49\u662f\u96c6\u5408\uff0c\u5b83\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u5bb9\u5668\uff0c\u65e0\u91cd\u590d\u5143\u7d20 // \u91cc\u9762\u7684\u5143\u7d20\u90fd\u662f\u6392\u5e8f\u597d\u7684\u652f\u6301\u63d2\u5165\u3001\u5220\u9664\u3001\u67e5\u627e\u7b49\u64cd\u4f5c\uff0c\u5c31\u50cf\u4e00\u4e2a\u96c6\u5408\u4e00\u6837\uff0c\u6240\u6709\u7684\u64cd\u4f5c\u90fd\u662f\u4e25\u683c\u5728logn\u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u6548\u7387\u975e\u5e38\u9ad8\uff0c\u4f7f\u7528\u65b9\u6cd5\u7c7b\u4f3clist\u3002 #include <set> set < int > s ; s . insert ( val ); // \u63d2\u5165\u6570\u503c\u5230\u96c6\u5408\uff0c\u5982\u6709\u91cd\u590d\u5143\u7d20\uff0c\u5219\u81ea\u52a8\u6392\u91cd,\u8fd4\u56de\u503c\u662fpair<set<int>::iterator,bool>\uff0cbool\u6807\u5fd7\u7740\u63d2\u5165\u662f\u5426\u6210\u529f\uff0c\u800citerator\u4ee3\u8868\u63d2\u5165\u7684\u4f4d\u7f6e\uff0c\u82e5key_value\u5df2\u7ecf\u5728set\u4e2d\uff0c\u5219iterator\u8868\u793a\u7684key_value\u5728set\u4e2d\u7684\u4f4d\u7f6e\u3002 pair < set < int >:: iterator , bool > pr ; pr = s . insert ( 5 ); s . insert ( first , second ); // \u5c06\u5b9a\u4f4d\u5668first\u5230second\u4e4b\u95f4\u7684\u5143\u7d20\u63d2\u5165\u5230set\u4e2d\uff0c\u8fd4\u56de\u503c\u662fvoid. int a [] = { 1 , 2 , 3 }; s . insert ( a , a + 3 ); s . begin (); // \u8fd4\u56de\u6307\u5411\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668\uff0c\u5982\u8981\u8f93\u51fa\u7b2c\u4e00\u4e2a\u503c:*s.begin() s . end (); // \u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u5f53\u524dset\u672b\u5c3e\u5143\u7d20\u7684\u4e0b\u4e00\u4f4d\u7f6e\u7684\u8fed\u4ee3\u5668 s . rbegin () // \u8fd4\u56de\u7684\u503c\u548cend()\u76f8\u540c s . rend () // \u8fd4\u56de\u7684\u503c\u548cbegin()\u76f8\u540c s . clear (); // \u6e05\u9664\u6240\u6709\u5143\u7d20 s . count (); // \u8fd4\u56de\u67d0\u4e2a\u503c\u5143\u7d20\u7684\u4e2a\u6570,\u56e0\u4e3a\u4e0d\u80fd\u91cd\u590d\uff0c\u6240\u4ee5\u53ea\u67090/1,\u8fd9\u6837\u5c31\u6210\u4e86\u5224\u65ad\u5143\u7d20\u662f\u5426\u5b58\u5728\u4e86 s . empty (); // \u5982\u679c\u96c6\u5408\u4e3a\u7a7a\uff0c\u8fd4\u56detrue s . equal_range ( val ); //\u8fd4\u56de\u4e00\u5bf9pair\u7c7b\u578b\u7684\u5b9a\u4f4d\u5668,\u7b2c\u4e00\u4e2a\u8868\u793a>=val,\u7b2c\u4e8c\u4e2a\u8868\u793a>val,\u6709\u4e00\u4e2a\u8fd4\u56de\u5931\u8d25\uff0c\u5c31\u7b49\u4e8eend()\u7684\u503c\u3002 pair < set < int >:: const_iterator , set < int >:: const_iterator > pr ; pr = s . equal_range ( 3 ); cout << \"\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e 3 \u7684\u6570\u662f \uff1a\" <<* pr . first << endl ; cout << \"\u7b2c\u4e00\u4e2a\u5927\u4e8e 3\u7684\u6570\u662f \uff1a \" <<* pr . second << endl ; // set\u4e2d\u7684\u5220\u9664\u64cd\u4f5c\u662f\u4e0d\u8fdb\u884c\u4efb\u4f55\u7684\u9519\u8bef\u68c0\u67e5\u7684\uff0c\u6bd4\u5982\u5b9a\u4f4d\u5668\u7684\u662f\u5426\u5408\u6cd5\u7b49\u7b49\uff0c\u6240\u4ee5\u7528\u7684\u65f6\u5019\u81ea\u5df1\u4e00\u5b9a\u8981\u6ce8\u610f\u3002 s . erase ( iterator ) //\u5220\u9664\u5b9a\u4f4d\u5668iterator\u6307\u5411\u7684\u503c s . erase ( first , second ) //\u5220\u9664\u5b9a\u4f4d\u5668first\u548csecond\u4e4b\u95f4\u7684\u503c s . erase ( key_value ) //\u5220\u9664\u952e\u503ckey_value\u7684\u503c //\u7b2c\u4e00\u79cd\u5220\u9664 s . erase ( s . begin ()); //\u7b2c\u4e8c\u79cd\u5220\u9664 first = s . begin (); second = s . begin (); second ++ ; second ++ ; s . erase ( first , second ); //\u7b2c\u4e09\u79cd\u5220\u9664 s . find ( val ) //\u8fd4\u56de\u7ed9\u5b9a\u503c\u503c\u5f97\u8fed\u4ee3\u5668\uff0c\u5982\u679c\u6ca1\u627e\u5230\u5219\u8fd4\u56deend()\u3002 s . get_allocator () //\u2013\u8fd4\u56de\u96c6\u5408\u7684\u5206\u914d\u5668 s . insert () //\u2013\u5728\u96c6\u5408\u4e2d\u63d2\u5165\u5143\u7d20 s . lower_bound () //\u2013\u8fd4\u56de\u6307\u5411\u5927\u4e8e\uff08\u6216\u7b49\u4e8e\uff09\u67d0\u503c\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u7684\u8fed\u4ee3\u5668 s . key_comp () //\u2013\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u5143\u7d20\u95f4\u503c\u6bd4\u8f83\u7684\u51fd\u6570 s . max_size () //\u2013\u8fd4\u56de\u96c6\u5408\u80fd\u5bb9\u7eb3\u7684\u5143\u7d20\u7684\u6700\u5927\u9650\u503c s . size () //\u2013\u96c6\u5408\u4e2d\u5143\u7d20\u7684\u6570\u76ee s . swap () //\u2013\u4ea4\u6362\u4e24\u4e2a\u96c6\u5408\u53d8\u91cf s . lower_bound ( key_value ) // \u8fd4\u56de\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey_value\u7684\u8fed\u4ee3\u5668 s . upper_bound ( key_value ) // \u8fd4\u56de\u6700\u540e\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8ekey_value\u7684\u8fed\u4ee3\u5668 s . value_comp (); //\u2013\u8fd4\u56de\u4e00\u4e2a\u7528\u4e8e\u6bd4\u8f83\u5143\u7d20\u95f4\u7684\u503c\u7684\u51fd\u6570 // \u904d\u5386 set < int >:: iterator it ; for ( it = s . begin (); it != s . end (); it ++ ){ cout <<* it << endl ; }","title":"STL\u6807\u51c6\u6a21\u677f\u5e93"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_4","text":"\u591a\u7ebf\u7a0b\u662f\u591a\u4efb\u52a1\u5904\u7406\u7684\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u6709\u57fa\u4e8e\u8fdb\u7a0b\u548c\u57fa\u4e8e\u7ebf\u7a0b\u7684\u4e24\u79cd\u7c7b\u578b\u7684\u591a\u4efb\u52a1\u5904\u7406\u65b9\u5f0f\u3002 \u57fa\u4e8e\u8fdb\u7a0b\u7684\u591a\u4efb\u52a1\u5904\u7406\u662f\u7a0b\u5e8f\u7684\u5e76\u53d1\u6267\u884c\u3002 \u57fa\u4e8e\u7ebf\u7a0b\u7684\u591a\u4efb\u52a1\u5904\u7406\u662f\u540c\u4e00\u7a0b\u5e8f\u7684\u7247\u6bb5\u7684\u5e76\u53d1\u6267\u884c\u3002 \u4f7f\u7528\u65f6\u9700\u8981#include \u5934\u6587\u4ef6\uff0c\u8be5\u5934\u6587\u4ef6\u4e3b\u8981\u5305\u542b\u4e86\u5bf9\u7ebf\u7a0b\u7684\u7ba1\u7406\u7c7bstd::thread\u4ee5\u53ca\u5176\u4ed6\u7ba1\u7406\u7ebf\u7a0b\u76f8\u5173\u7684\u7c7b // \u666e\u901a\u7528\u6cd5 #include <iostream> #include <thread> using namespace std ; void output ( int i ) { cout << i << endl ; } int main () { for ( uint8_t i = 0 ; i < 4 ; i ++ ) { //\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0bt\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u4e3a\u8c03\u7528\u7684\u51fd\u6570\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u4e3a\u4f20\u9012\u7684\u53c2\u6570 thread t ( output , i ); // \u8f93\u51fa\u7ed3\u679c\u4e0d\u4e00\u5b9a\u662f\u987a\u5e8f\u8f93\u51fa //\u8868\u793a\u5141\u8bb8\u8be5\u7ebf\u7a0b\u5728\u540e\u53f0\u8fd0\u884c t . detach (); } return 0 ; } // \u7ebf\u7a0b\u7ba1\u7406:\u6bcf\u4e2a\u5e94\u7528\u7a0b\u5e8f\u81f3\u5c11\u6709\u4e00\u4e2a\u8fdb\u7a0b\uff0c\u800c\u6bcf\u4e2a\u8fdb\u7a0b\u81f3\u5c11\u6709\u4e00\u4e2a\u4e3b\u7ebf\u7a0b\uff0c\u9664\u4e86\u4e3b\u7ebf\u7a0b\u5916\uff0c\u5728\u4e00\u4e2a\u8fdb\u7a0b\u4e2d\u8fd8\u53ef\u4ee5\u521b\u5efa\u591a\u4e2a\u5b50\u7ebf\u7a0b\u3002\u6bcf\u4e2a\u7ebf\u7a0b\u90fd\u9700\u8981\u4e00\u4e2a\u5165\u53e3\u51fd\u6570\uff0c\u5165\u53e3\u51fd\u6570\u8fd4\u56de\u9000\u51fa\uff0c\u8be5\u7ebf\u7a0b\u4e5f\u4f1a\u9000\u51fa\uff0c\u4e3b\u7ebf\u7a0b\u5c31\u662f\u4ee5main\u51fd\u6570\u4f5c\u4e3a\u5165\u53e3\u51fd\u6570\u7684\u7ebf\u7a0b\u3002 // \u542f\u52a8\u7ebf\u7a0b do_task (); std :: thread ( do_task ); // std::thread\u7684\u6784\u9020\u51fd\u6570\u9700\u8981\u7684\u662f\u53ef\u8c03\u7528\uff08callable\uff09\u7c7b\u578b\uff0c\u9664\u4e86\u51fd\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u8c03\u7528\u4f8b\u5982\uff1alambda\u8868\u8fbe\u5f0f\u3001\u91cd\u8f7d\u4e86()\u8fd0\u7b97\u7b26\u7684\u7c7b\u7684\u5b9e\u4f8b\u3002 thread t ( output ); //\u5047\u8bbe\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u4e14\u51fd\u6570\u540d\u4e3aoutput\uff0c\u5219\u6b64\u5904\u53ef\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u6267\u884c\u8be5\u51fd\u6570 //\u5f53\u542f\u52a8\u4e00\u4e2a\u7ebf\u7a0b\u540e\uff0c\u4e00\u5b9a\u8981\u5728\u8be5\u7ebf\u7a0bthread\u9500\u6bc1\u524d\uff0c\u8c03\u7528t.join()\u6216\u8005t.detach()\uff0c\u786e\u5b9a\u4ee5\u4f55\u79cd\u65b9\u5f0f\u7b49\u5f85\u7ebf\u7a0b\u6267\u884c\u7ed3\u675f * detach\u65b9\u5f0f \uff0c\u542f\u52a8\u7684\u7ebf\u7a0b\u81ea\u4e3b\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u5f53\u524d\u7684\u4ee3\u7801\u7ee7\u7eed\u5f80\u4e0b\u6267\u884c\uff0c\u4e0d\u7b49\u5f85\u65b0\u7ebf\u7a0b\u7ed3\u675f\u3002\u5728\u4ee5 detach\u7684\u65b9\u5f0f\u6267\u884c\u7ebf\u7a0b\u65f6 \uff0c\u8981\u5c06\u7ebf\u7a0b\u8bbf\u95ee\u7684\u5c40\u90e8\u6570\u636e\u590d\u5236\u5230\u7ebf\u7a0b\u7684\u7a7a\u95f4\uff08\u4f7f\u7528\u6309\u503c\u4f20\u9012\uff09\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u7ebf\u7a0b\u6ca1\u6709\u4f7f\u7528\u5c40\u90e8\u53d8\u91cf\u7684\u5f15\u7528\u6216\u8005\u6307\u9488\uff0c\u9664\u975e\u4f60\u80fd\u80af\u5b9a\u8be5\u7ebf\u7a0b\u4f1a\u5728\u5c40\u90e8\u4f5c\u7528\u57df\u7ed3\u675f\u524d\u6267\u884c\u7ed3\u675f\u3002 * join\u65b9\u5f0f \uff0c\u7b49\u5f85\u5173\u8054\u7684\u7ebf\u7a0b\u5b8c\u6210\uff0c\u624d\u4f1a\u7ee7\u7eed\u6267\u884c join () \u540e\u7684\u4ee3\u7801\u3002 // \u5f02\u5e38\u60c5\u51b5\u4e0b\u7b49\u5f85\u7ebf\u7a0b\u5b8c\u6210:\u4e3a\u4e86\u907f\u514d\u4e3b\u7ebf\u7a0b\u51fa\u73b0\u5f02\u5e38\u65f6\u5c06\u5b50\u7ebf\u7a0b\u7ec8\u7ed3\uff0c\u5c31\u8981\u4fdd\u8bc1\u5b50\u7ebf\u7a0b\u5728\u51fd\u6570\u9000\u51fa\u524d\u5b8c\u6210\uff0c\u5373\u5728\u51fd\u6570\u9000\u51fa\u524d\u8c03\u7528join()\u3002 // \u65b9\u5f0f\u4e00 void func () { thread t ([]{ cout << \"hello C++ 11\" << endl ; }); try { do_something_else (); } catch (...) { t . join (); throw ; } t . join (); } // \u65b9\u5f0f\u4e8c:\u8d44\u6e90\u83b7\u53d6\u5373\u521d\u59cb\u5316\uff08RAII\uff09 // \u65e0\u8bba\u662f\u4f55\u79cd\u60c5\u51b5\uff0c\u5f53\u51fd\u6570\u9000\u51fa\u65f6\uff0c\u5bf9\u8c61guard\u8c03\u7528\u5176\u6790\u6784\u51fd\u6570\u9500\u6bc1\uff0c\u4ece\u800c\u80fd\u591f\u4fdd\u8bc1join\u4e00\u5b9a\u4f1a\u88ab\u8c03\u7528\u3002 class thread_guard { private : thread & t ; public : /*\u52a0\u5165explicit\u9632\u6b62\u9690\u5f0f\u8f6c\u6362\uff0cexplicit\u4ec5\u53ef\u52a0\u5728\u5e26\u4e00\u4e2a\u53c2\u6570\u7684\u6784\u9020\u65b9\u6cd5\u4e0a\uff0c\u5982\uff1aDemo test; test = 12.2; \u8fd9\u6837\u7684\u8c03\u7528\u5c31\u76f8\u5f53\u4e8e\u628a12.2\u9690\u5f0f\u8f6c\u6362\u4e3aDemo\u7c7b\u578b\uff0c\u52a0\u5165explicit\u5c31\u7981\u6b62\u4e86\u8fd9\u79cd\u8f6c\u6362\u3002*/ explicit thread_guard ( thread & _t ) { t = _t ; } ~ thread_guard () { if ( t . joinable ()) t . join (); } thread_guard ( const thread_guard & ) = delete ; //\u5220\u9664\u9ed8\u8ba4\u62f7\u8d1d\u6784\u9020\u51fd\u6570 thread_guard & operator = ( const thread_guard & ) = delete ; //\u5220\u9664\u9ed8\u8ba4\u8d4b\u503c\u8fd0\u7b97\u7b26 }; void func (){ thread t ([]{ cout << \"Hello thread\" << endl ; }); thread_guard guard ( t ); } //\u7ebf\u7a0b\u4e92\u65a5(std::mutex):\u901a\u8fc7mutex\u53ef\u4ee5\u65b9\u4fbf\u7684\u5bf9\u4e34\u754c\u533a\u57df\u52a0\u9501\uff0cstd::mutex\u7c7b\u5b9a\u4e49\u4e8emutex\u5934\u6587\u4ef6\uff0c\u662f\u7528\u4e8e\u4fdd\u62a4\u5171\u4eab\u6570\u636e\u907f\u514d\u4ece\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8bbf\u95ee\u7684\u540c\u6b65\u539f\u8bed\uff0c\u5b83\u63d0\u4f9b\u4e86lock\uff0ctry_lock\uff0cunlock\u7b49\u51e0\u4e2a\u63a5\u53e3 std :: mutex mtx ; mtx . lock () do_something ...; //\u5171\u4eab\u7684\u6570\u636e mtx . unlock (); // mutex\u7684lock\u548cunlock\u5fc5\u987b\u6210\u5bf9\u8c03\u7528\uff0clock\u4e4b\u540e\u5fd8\u8bb0\u8c03\u7528unlock\u5c06\u662f\u975e\u5e38\u4e25\u91cd\u7684\u9519\u8bef\uff0c\u518d\u6b21lock\u65f6\u4f1a\u9020\u6210\u6b7b\u9501\u3002\u6b64\u65f6\u4f7f\u7528\u7c7b\u6a21\u677fstd::lock_guard\uff0c\u901a\u8fc7RAII\u673a\u5236\u5728\u5176\u4f5c\u7528\u57df\u5185\u5360\u6709mutex\uff0c\u5f53\u7a0b\u5e8f\u6d41\u7a0b\u79bb\u5f00\u521b\u5efalock_guard\u5bf9\u8c61\u7684\u4f5c\u7528\u57df\u65f6\uff0clock_guard\u5bf9\u8c61\u88ab\u81ea\u52a8\u9500\u6bc1\u5e76\u91ca\u653emutex\u3002 std :: mutex mtx ; std :: lock_guard < std :: mutex > guard ( mtx ); do_something ...; //\u5171\u4eab\u7684\u6570\u636e // \u5411\u7ebf\u7a0b\u4f20\u9012\u53c2\u6570\uff1a\u5411\u7ebf\u7a0b\u8c03\u7528\u7684\u51fd\u6570\u53ea\u9700\u8981\u5728\u6784\u9020thread\u7684\u5b9e\u4f8b\u65f6\uff0c\u4f9d\u6b21\u4f20\u5165\u5373\u53ef\u3002 // \u8f6c\u79fb\u7ebf\u7a0b\u7684\u6240\u6709\u6743.thread\u662f\u53ef\u79fb\u52a8\u7684(movable)\u7684\uff0c\u4f46\u4e0d\u53ef\u590d\u5236(copyable)\u3002\u53ef\u4ee5\u901a\u8fc7move\u6765\u6539\u53d8\u7ebf\u7a0b\u7684\u6240\u6709\u6743\uff0c\u7075\u6d3b\u7684\u51b3\u5b9a\u7ebf\u7a0b\u5728\u4ec0\u4e48\u65f6\u5019join\u6216\u8005detach\u3002 thread t1 ( f1 ); thread t3 ( move ( t1 )); // \u5c06\u7ebf\u7a0b\u4ecet1\u8f6c\u79fb\u7ed9t3,\u8fd9\u65f6\u5019t1\u5c31\u4e0d\u518d\u62e5\u6709\u7ebf\u7a0b\u7684\u6240\u6709\u6743\uff0c\u8c03\u7528t1.join\u6216t1.detach\u4f1a\u51fa\u73b0\u5f02\u5e38\uff0c\u8981\u4f7f\u7528t3\u6765\u7ba1\u7406\u7ebf\u7a0b\u3002\u8fd9\u4e5f\u5c31\u610f\u5473\u7740thread\u53ef\u4ee5\u4f5c\u4e3a\u51fd\u6570\u7684\u8fd4\u56de\u7c7b\u578b\uff0c\u6216\u8005\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9\u51fd\u6570\uff0c\u80fd\u591f\u66f4\u4e3a\u65b9\u4fbf\u7684\u7ba1\u7406\u7ebf\u7a0b\u3002 // \u7ebf\u7a0b\u6807\u8bc6\u7684\u83b7\u53d6:\u7ebf\u7a0b\u7684\u6807\u8bc6\u7c7b\u578b\u4e3astd::thread::id\uff0c\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u5f97\u5230\u7ebf\u7a0b\u7684id * \u901a\u8fc7 thread\u7684\u5b9e\u4f8b\u8c03\u7528get_id () \u76f4\u63a5\u83b7\u53d6 * \u5728\u5f53\u524d\u7ebf\u7a0b\u4e0a\u8c03\u7528 this_thread :: get_id () \u83b7\u53d6","title":"\u591a\u7ebf\u7a0b"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_5","text":"// \u8fd9\u4e24\u4e2a\u5934\u6587\u4ef6\u5fc5\u987b\u5199\u4e0a #include <iostream> #include <fstream> // open() \u6210\u5458\u51fd\u6570\u7684\u7b2c\u4e00\u53c2\u6570\u6307\u5b9a\u8981\u6253\u5f00\u7684\u6587\u4ef6\u7684\u540d\u79f0\u548c\u4f4d\u7f6e\uff0c\u7b2c\u4e8c\u4e2a\u53c2\u6570\u5b9a\u4e49\u6587\u4ef6\u88ab\u6253\u5f00\u7684\u6a21\u5f0f void open ( const char * filename , ios :: openmode mode ); * ios :: app --> \u8ffd\u52a0\u6a21\u5f0f\uff0c\u6240\u6709\u5199\u5165\u90fd\u8ffd\u52a0\u5230\u6587\u4ef6\u672b\u5c3e * ios :: ate --> \u6587\u4ef6\u6253\u5f00\u540e\u5b9a\u4f4d\u5230\u6587\u4ef6\u672b\u5c3e * ios :: in --> \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u8bfb\u53d6 * ios :: out --> \u6253\u5f00\u6587\u4ef6\u7528\u4e8e\u5199\u5165 * ios :: trunc --> \u5982\u679c\u8be5\u6587\u4ef6\u5df2\u7ecf\u5b58\u5728\uff0c\u5176\u5185\u5bb9\u5c06\u5728\u6253\u5f00\u6587\u4ef6\u4e4b\u524d\u88ab\u622a\u65ad\uff0c\u5373\u628a\u6587\u4ef6\u957f\u5ea6\u8bbe\u7f6e\u4e3a 0 //\u4ee5\u5199\u5165\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6\uff0c\u5e76\u5e0c\u671b\u622a\u65ad\u6587\u4ef6\uff0c\u4ee5\u9632\u6587\u4ef6\u5df2\u5b58\u5728 ofstream outfile ; outfile . open ( \"file.dat\" , ios :: out | ios :: trunc ); //\u6253\u5f00\u4e00\u4e2a\u6587\u4ef6\u7528\u4e8e\u8bfb\u5199 fstream afile ; afile . open ( \"file.dat\" , ios :: out | ios :: in ); // \u5173\u95ed\u6587\u4ef6:close() \u51fd\u6570\u662f fstream\u3001ifstream \u548c ofstream \u5bf9\u8c61\u7684\u4e00\u4e2a\u6210\u5458\u3002 fstream afile ; afile . open ( \"file.dat\" , ios :: out | ios :: in ); afile . close (); // \u5199\u5165\u4e0e\u8bfb\u53d6\u6587\u4ef6:\u4f7f\u7528\u6d41\u63d2\u5165\u8fd0\u7b97\u7b26\uff08 << \uff09\u5411\u6587\u4ef6\u5199\u5165\u4fe1\u606f\uff0c\u4f7f\u7528\u6d41\u63d0\u53d6\u8fd0\u7b97\u7b26\uff08 >> \uff09\u4ece\u6587\u4ef6\u8bfb\u53d6\u4fe1\u606f\u3002 int main () { char data [ 100 ]; // \u4ee5\u5199\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ofstream outfile ; outfile . open ( \"afile.dat\" ); cout << \"Writing to the file\" << endl ; cout << \"Enter your name: \" ; cin . getline ( data , 100 ); // \u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; cout << \"Enter your age: \" ; cin >> data ; cin . ignore (); // \u518d\u6b21\u5411\u6587\u4ef6\u5199\u5165\u7528\u6237\u8f93\u5165\u7684\u6570\u636e outfile << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 outfile . close (); // \u4ee5\u8bfb\u6a21\u5f0f\u6253\u5f00\u6587\u4ef6 ifstream infile ; infile . open ( \"afile.dat\" ); cout << \"Reading from the file\" << endl ; infile >> data ; // \u5728\u5c4f\u5e55\u4e0a\u5199\u5165\u6570\u636e cout << data << endl ; // \u518d\u6b21\u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\uff0c\u5e76\u663e\u793a\u5b83 infile >> data ; cout << data << endl ; // \u5173\u95ed\u6253\u5f00\u7684\u6587\u4ef6 infile . close (); return 0 ; } // \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488 // istream \u548c ostream \u90fd\u63d0\u4f9b\u4e86\u7528\u4e8e\u91cd\u65b0\u5b9a\u4f4d\u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u7684\u6210\u5458\u51fd\u6570\u3002\u8fd9\u4e9b\u6210\u5458\u51fd\u6570\u5305\u62ec\u5173\u4e8e istream \u7684 seekg\uff08\"seek get\"\uff09\u548c\u5173\u4e8e ostream \u7684 seekp\uff08\"seek put\"\uff09\u3002 // seekg \u548c seekp \u7684\u53c2\u6570\u901a\u5e38\u662f\u4e00\u4e2a\u957f\u6574\u578b\u3002\u7b2c\u4e8c\u4e2a\u53c2\u6570\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u67e5\u627e\u65b9\u5411\u3002\u67e5\u627e\u65b9\u5411\u53ef\u4ee5\u662f ios::beg\uff08\u9ed8\u8ba4\u7684\uff0c\u4ece\u6d41\u7684\u5f00\u5934\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::cur\uff08\u4ece\u6d41\u7684\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\u5b9a\u4f4d\uff09\uff0c\u4e5f\u53ef\u4ee5\u662f ios::end\uff08\u4ece\u6d41\u7684\u672b\u5c3e\u5f00\u59cb\u5b9a\u4f4d\uff09\u3002 // \u6587\u4ef6\u4f4d\u7f6e\u6307\u9488\u662f\u4e00\u4e2a\u6574\u6570\u503c\uff0c\u6307\u5b9a\u4e86\u4ece\u6587\u4ef6\u7684\u8d77\u59cb\u4f4d\u7f6e\u5230\u6307\u9488\u6240\u5728\u4f4d\u7f6e\u7684\u5b57\u8282\u6570\u3002 // \u5b9a\u4f4d\u5230 fileObject \u7684\u7b2c n \u4e2a\u5b57\u8282\uff08\u5047\u8bbe\u662f ios::beg\uff09 fileObject . seekg ( n ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u5f53\u524d\u4f4d\u7f6e\u5411\u540e\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: cur ); // \u628a\u6587\u4ef6\u7684\u8bfb\u6307\u9488\u4ece fileObject \u672b\u5c3e\u5f80\u56de\u79fb n \u4e2a\u5b57\u8282 fileObject . seekg ( n , ios :: end ); // \u5b9a\u4f4d\u5230 fileObject \u7684\u672b\u5c3e fileObject . seekg ( 0 , ios :: end );","title":"\u6587\u4ef6\u548c\u6d41"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_6","text":"//\u65e5\u671f\u548c\u65f6\u95f4\uff0cc++\u7ee7\u627f\u4e86c\u7684\u65e5\u671f\u548c\u65f6\u95f4\uff0c#include<ctime> //\u65f6\u95f4\u76f8\u5173\u7684\u7c7b\u578b\uff1aclock_t\u3001time_t\u3001size_t \u548c tm // \u7c7b\u578b clock_t\u3001size_t \u548c time_t \u80fd\u591f\u628a\u7cfb\u7edf\u65f6\u95f4\u548c\u65e5\u671f\u8868\u793a\u4e3a\u67d0\u79cd\u6574\u6570\u3002 // \u7ed3\u6784\u7c7b\u578b tm \u628a\u65e5\u671f\u548c\u65f6\u95f4\u4ee5 C \u7ed3\u6784\u7684\u5f62\u5f0f\u4fdd\u5b58\uff0ctm \u7ed3\u6784\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a struct tm { int tm_sec ; // \u79d2\uff0c\u6b63\u5e38\u8303\u56f4\u4ece 0 \u5230 59\uff0c\u4f46\u5141\u8bb8\u81f3 61 int tm_min ; // \u5206\uff0c\u8303\u56f4\u4ece 0 \u5230 59 int tm_hour ; // \u5c0f\u65f6\uff0c\u8303\u56f4\u4ece 0 \u5230 23 int tm_mday ; // \u4e00\u6708\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 1 \u5230 31 int tm_mon ; // \u6708\uff0c\u8303\u56f4\u4ece 0 \u5230 11 int tm_year ; // \u81ea 1900 \u5e74\u8d77\u7684\u5e74\u6570 int tm_wday ; // \u4e00\u5468\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 0 \u5230 6\uff0c\u4ece\u661f\u671f\u65e5\u7b97\u8d77 int tm_yday ; // \u4e00\u5e74\u4e2d\u7684\u7b2c\u51e0\u5929\uff0c\u8303\u56f4\u4ece 0 \u5230 365\uff0c\u4ece 1 \u6708 1 \u65e5\u7b97\u8d77 int tm_isdst ; // \u590f\u4ee4\u65f6 } // \u5e38\u7528\u51fd\u6570","title":"\u65e5\u671f\u548c\u65f6\u95f4"},{"location":"c%2B%2B%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#opencv","text":"Mat\u5e38\u89c1\u7c7b\u578b // \u901a\u7528\u683c\u5f0f: CV_[\u6bcf\u4e00\u9879\u7684\u4f4d\u6570][\u6709\u7b26\u53f7\u6216\u65e0\u7b26\u53f7][\u7c7b\u578b\u524d\u7f00]C[\u901a\u9053\u6570] // CV_8UC3:\u4f7f\u75288\u4f4d\u65e0\u7b26\u53f7\u7684char\u7c7b\u578b\uff0c\u6bcf\u4e2a\u50cf\u7d20\u4e09\u901a\u9053(\u5e73\u9762\u6392\u5217) \u6570\u636e\u7c7b\u578b \u6570\u503c \u4f53\u7c7b\u578b \u53d6\u503c\u8303\u56f4 Mat_ < uchar >--- CV_8U -- -8 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570 -- \uff08 0 \u2026 . .255 \uff09 Mat < char >----- CV_8S -- -8 \u4f4d\u7b26\u53f7\u6574\u6570 --- \uff08 -128 \u2026 . .127 \uff09 Mat_ < ushort >-- CV_16U - -16 \u4f4d\u65e0\u7b26\u53f7\u6574\u6570 - \uff08 0 \u2026\u2026 65535 \uff09 Mat_ < short >--- CV_16S - -16 \u4f4d\u7b26\u53f7\u6574\u6570 -- \uff08 -32768 \u2026 . .32767 \uff09 Mat_ < float >--- CV_32F - -32 \u4f4d\u6d6e\u70b9\u6570 --- \uff08 - FLT_MAX \u2026\u2026\u2026 FLT_MAX \uff0c INF \uff0c NAN ) Mat_ < int >----- CV_32S - -32 \u4f4d\u7b26\u53f7\u6574\u6570 -- \uff08 -2147483648 \u2026\u2026 2147483647 \uff09 Mat_ < double >-- CV_64F - -64 \u4f4d\u6d6e\u70b9\u6570 --- \uff08 - DBL_MAX \u2026\u2026\u2026 . DBL_MAX \uff0c INF \uff0c NAN ) // Mat\u7684\u6784\u9020\u51fd\u6570 Mat () // \u9ed8\u8ba4\u6784\u9020\u51fd\u6570 Mat A; // \u5e38\u7528\u6784\u9020\u51fd\u6570 Mat A(10,10,CV_8UC3); Mat ( int rows , int cols , int type ) //Mat(3,3,CV_8UC3\uff0cScalar(127,0,255)) Mat ( int rows , int cols , int type , const Scalar & s ) //Mat src = imread(\"E:/OpenCV/OpenCVPicture/horse.png\"); //Mat img= Mat(src.size(),CV_8UC1); Mat ( Size size , int type ) // Mat(src.size(),CV_8UC3,Scalar(127,0,255)); Mat ( Size size , int type , const Scalar & s ) // Mat copy_img(img); Mat ( const Mat & m ) //Mat D (A, Rect(10, 10, 100, 100) ); // ROI\u622a\u53d6\uff0cRect(x,y,w,h); Mat ( const Mat & m , const Rect & roi ) Mat ( const Mat & m , const Range * ranges ) Mat ( int ndims , const int * sizes , int type , const Scalar & s ) Mat ( int ndims , const int * sizes , int type ) Mat ( int rows , int cols , int type , void * data , size_t step = AUTO_STEP ) Mat ( Size size , int type , void * data , size_t step = AUTO_STEP ) Mat ( int ndims , const int * sizes , int type , void * data , const size_t * steps = 0 ) Mat ( const Mat & m , const Range & rowRange , const Range & colRange = Range :: all ()) Mat d ; d . create ( xxx ); // xxx\u548c\u4e0a\u9762\u4e00\u6837 // Mat\u7684\u5e38\u7528\u8d4b\u503c\u65b9\u6cd5 Mat c = ( Mat_ < double > ( 3 , 3 ) << 0 , -1 , 0 , -1 , 5 , -1 , 0 , -1 , 0 ); // \u5c0f\u77e9\u9635\u76f4\u63a5\u7528\u9017\u53f7\u9694\u5f00\u521d\u59cb\u5316 Mat R = Mat ( 3 , 2 , CV_8UC3 ); randu ( R , Scalar :: all ( 0 ), Scalar :: all ( 255 )); // \u4f7f\u7528randu\u4ea7\u751f\u968f\u673a\u503c\u6765\u586b\u5145\u77e9\u9635\uff0c\u9700\u8981\u7ed9\u5b9a\u4e00\u4e2a\u4e0a\u4e0b\u9650 Mat :: eye ( 4 , 4 , CV_32F ); // eye(int rows,int cols,int type) Mat :: ones ( 2 , 2 , CV_32F ); // ones(int rows,int cols,int type) Mat :: zeros ( 3 , 3 , CV_8UC1 ); // zeros(int rows,int cols,int type) // \u5e38\u7528\u65b9\u6cd5 Mat src = imread ( \"E:/OpenCV/OpenCVPicture/horse.png\" ); Mat dst ; src . copyTo ( dst ); // \u5c06src\u5bf9\u8c61\u7684\u56fe\u50cf\u590d\u5236\u5230dst\u5bf9\u8c61\u4e2d\uff0c\u6df1\u62f7\u8d1d dst . clone ( src ); // \u5c06src\u5bf9\u8c61\u7684\u56fe\u50cf\u590d\u5236\u5230dst\u5bf9\u8c61\u4e2d\uff0c\u6df1\u62f7\u8d1d str . converto ( dst , CV_8UC3 ); // \u5c06src\u8f6c\u5316\u6210\u6bcf\u4e2a\u901a\u90538\u4e2a\u5b57\u8282\u957f\u5ea6 uchar\u7c7b\u578b\uff0c\u901a\u9053\u6570\u91cf\u4e3a3\u7684Mat\u5bf9\u8c61\uff08\u53ef\u4ee5\u5728\u51fd\u6570\u540e\u9762\u9644\u52a0\u56e0\u5b50\u8fdb\u884c\u8ba1\u7b97\uff09 int channel = src . channels (); // \u901a\u9053\u6570 int depth = src . depth (); // \u56fe\u50cf\u6df1\u5ea6 src . empty (); // bool \u5224\u65ad\u56fe\u50cf\u662f\u5426\u4e3a\u7a7a const unchar * firstRow = src . ptr ( 0 ); // \u83b7\u53d6src\u56fe\u50cf\u7684\u7b2c\u4e00\u884c\u5bf9\u5e94\u6307\u9488 // _Tp& at(int row,int col) \u83b7\u53d6\u56fe\u50cf\u4e0a\u4e00\u4e2a\u70b9\u7684\u50cf\u7d20\uff0c\u53ef\u5bf9\u5176\u8fdb\u884c\u83b7\u53d6\u6216\u8005\u4fee\u6539\uff0c\u7070\u5ea6\u56fe\u50cf\u548cRGB\u56fe\u50cf\u6709\u533a\u522b Mat gray_src ; cvtColor ( src , gray_src , CV_BGR2GRAY ); //\u5c06RGB\u56fe\u50cf\u8f6c\u5316\u6210\u7070\u5ea6\u56fe\u50cf uchar test = gray_src . at < uchar > ( 0 , 0 ); //\u83b7\u53d6\u7070\u5ea6\u56fe\u50cf\u5728 (0,0)\u5904\u7684\u50cf\u7d20\u503c gray_src . at < uchar > ( 0 , 0 ) = 0 //\u4fee\u6539\u7070\u5ea6\u56fe\u50cf\u5728 (0,0)\u5904\u7684\u50cf\u7d20\u503c //\u83b7\u53d6RGB\u50cf\u7d20 uchar blue = src . at < Vec3b > ( 0 , 0 )[ 0 ]; //\u84dd\u8272\u901a\u9053\u50cf\u7d20\u503c uchar green = src . at < Vec3b > ( 0 , 0 )[ 1 ]; //\u7eff\u8272\u901a\u9053\u50cf\u7d20\u503c uchar red = src . at < Vec3b > ( 0 , 0 )[ 2 ]; //\u7ea2\u8272\u901a\u9053\u50cf\u7d20\u503c //\u4fee\u6539RGB\u50cf\u7d20 src . at < Vec3b > ( 0 , 0 )[ 0 ] = 0 ; //\u4fee\u6539\u84dd\u8272\u901a\u9053\u50cf\u7d20\u4e3a0 src . at < Vec3b > ( 0 , 0 )[ 1 ] = 0 ; //\u4fee\u6539\u7eff\u8272\u901a\u9053\u50cf\u7d20\u4e3a0 src . at < Vec3b > ( 0 , 0 )[ 2 ] = 0 ; //\u4fee\u6539\u7ea2\u8272\u901a\u9053\u50cf\u7d20\u4e3a0 \u5411\u91cf\u7c7bVec(\u4e00\u7ef4\uff0cMatx\u7684\u6d3e\u751f\u7c7b) Vec < Typename _Tp , int _cn > // \u683c\u5f0f Vec < int , 3 > vi ( 21 , 32 , 14 ); // \u4e3e\u4f8b\u5b50 // \u91cd\u547d\u540d typedef Vec < uchar , 2 > Vec2b ; typedef Vec < uchar , 3 > Vec3b ; typedef Vec < uchar , 4 > Vec4b ; typedef Vec < short , 2 > Vec2s ; typedef Vec < short , 3 > Vec3s ; typedef Vec < short , 4 > Vec4s ; typedef Vec < ushort , 2 > Vec2w ; typedef Vec < ushort , 3 > Vec3w ; typedef Vec < ushort , 4 > Vec4w ; typedef Vec < int , 2 > Vec2i ; typedef Vec < int , 3 > Vec3i ; typedef Vec < int , 4 > Vec4i ; typedef Vec < int , 6 > Vec6i ; typedef Vec < int , 8 > Vec8i ; typedef Vec < float , 2 > Vec2f ; typedef Vec < float , 3 > Vec3f ; typedef Vec < float , 4 > Vec4f ; typedef Vec < float , 6 > Vec6f ; typedef Vec < double , 2 > Vec2d ; typedef Vec < double , 3 > Vec3d ; typedef Vec < double , 4 > Vec4d ; typedef Vec < double , 6 > Vec6d ; // \u5e38\u7528\u5c5e\u6027 vi . rows ; // \u5411\u91cf\u7684\u884c\u6570 vi . cols ; // \u5411\u91cf\u7684\u5217\u6570 vi [ 0 ]; // \u8bbf\u95ee\u7b2c0\u4e2a\u5143\u7d20 // \u5e38\u7528\u65b9\u6cd5 /////////////////////// Vec (used as element of multi-channel images ///////////////////// /** @brief Template class for short numerical vectors, a partial case of Matx This template class represents short numerical vectors (of 1, 2, 3, 4 ... elements) on which you can perform basic arithmetical operations, access individual elements using [] operator etc. The vectors are allocated on stack, as opposite to std::valarray, std::vector, cv::Mat etc., which elements are dynamically allocated in the heap. The template takes 2 parameters: @tparam _Tp element type @tparam cn the number of elements In addition to the universal notation like Vec<float, 3>, you can use shorter aliases for the most popular specialized variants of Vec, e.g. Vec3f ~ Vec<float, 3>. It is possible to convert Vec\\<T,2\\> to/from Point_, Vec\\<T,3\\> to/from Point3_ , and Vec\\<T,4\\> to CvScalar or Scalar_. Use operator[] to access the elements of Vec. All the expected vector operations are also implemented: - v1 = v2 + v3 - v1 = v2 - v3 - v1 = v2 \\* scale - v1 = scale \\* v2 - v1 = -v2 - v1 += v2 and other augmenting operations - v1 == v2, v1 != v2 - norm(v1) (euclidean norm) The Vec class is commonly used to describe pixel types of multi-channel arrays. See Mat for details. */ template < typename _Tp , int cn > class Vec : public Matx < _Tp , cn , 1 > { public : typedef _Tp value_type ; enum { channels = cn , #ifdef OPENCV_TRAITS_ENABLE_DEPRECATED depth = Matx < _Tp , cn , 1 >:: depth , type = CV_MAKETYPE ( depth , channels ), #endif _dummy_enum_finalizer = 0 }; //! default constructor Vec (); Vec ( _Tp v0 ); //!< 1-element vector constructor Vec ( _Tp v0 , _Tp v1 ); //!< 2-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 ); //!< 3-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 ); //!< 4-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 ); //!< 5-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 ); //!< 6-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 ); //!< 7-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 ); //!< 8-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 ); //!< 9-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 ); //!< 10-element vector constructor Vec ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 , _Tp v12 , _Tp v13 ); //!< 14-element vector constructor explicit Vec ( const _Tp * values ); #ifdef CV_CXX11 Vec ( std :: initializer_list < _Tp > ); #endif Vec ( const Vec < _Tp , cn >& v ); static Vec all ( _Tp alpha ); //! per-element multiplication Vec mul ( const Vec < _Tp , cn >& v ) const ; //! conjugation (makes sense for complex numbers and quaternions) Vec conj () const ; /*! cross product of the two 3D vectors. For other dimensionalities the exception is raised */ Vec cross ( const Vec & v ) const ; //! conversion to another data type template < typename T2 > operator Vec < T2 , cn > () const ; /*! element access */ const _Tp & operator []( int i ) const ; _Tp & operator []( int i ); const _Tp & operator ()( int i ) const ; _Tp & operator ()( int i ); #ifdef CV_CXX11 Vec < _Tp , cn >& operator = ( const Vec < _Tp , cn >& rhs ) = default ; #endif Vec ( const Matx < _Tp , cn , 1 >& a , const Matx < _Tp , cn , 1 >& b , Matx_AddOp ); Vec ( const Matx < _Tp , cn , 1 >& a , const Matx < _Tp , cn , 1 >& b , Matx_SubOp ); template < typename _T2 > Vec ( const Matx < _Tp , cn , 1 >& a , _T2 alpha , Matx_ScaleOp ); }; Matx(\u8f7b\u91cf\u7ea7Mat) Matx < float , 2 , 3 > mat23f ; // \u4f8b\u5b50 // \u91cd\u547d\u540d typedef Matx < float , 1 , 2 > Matx12f ; typedef Matx < double , 1 , 2 > Matx12d ; typedef Matx < float , 1 , 3 > Matx13f ; typedef Matx < double , 1 , 3 > Matx13d ; typedef Matx < float , 1 , 4 > Matx14f ; typedef Matx < double , 1 , 4 > Matx14d ; typedef Matx < float , 1 , 6 > Matx16f ; typedef Matx < double , 1 , 6 > Matx16d ; typedef Matx < float , 2 , 1 > Matx21f ; typedef Matx < double , 2 , 1 > Matx21d ; typedef Matx < float , 3 , 1 > Matx31f ; typedef Matx < double , 3 , 1 > Matx31d ; typedef Matx < float , 4 , 1 > Matx41f ; typedef Matx < double , 4 , 1 > Matx41d ; typedef Matx < float , 6 , 1 > Matx61f ; typedef Matx < double , 6 , 1 > Matx61d ; typedef Matx < float , 2 , 2 > Matx22f ; typedef Matx < double , 2 , 2 > Matx22d ; typedef Matx < float , 2 , 3 > Matx23f ; typedef Matx < double , 2 , 3 > Matx23d ; typedef Matx < float , 3 , 2 > Matx32f ; typedef Matx < double , 3 , 2 > Matx32d ; typedef Matx < float , 3 , 3 > Matx33f ; typedef Matx < double , 3 , 3 > Matx33d ; typedef Matx < float , 3 , 4 > Matx34f ; typedef Matx < double , 3 , 4 > Matx34d ; typedef Matx < float , 4 , 3 > Matx43f ; typedef Matx < double , 4 , 3 > Matx43d ; typedef Matx < float , 4 , 4 > Matx44f ; typedef Matx < double , 4 , 4 > Matx44d ; typedef Matx < float , 6 , 6 > Matx66f ; typedef Matx < double , 6 , 6 > Matx66d ; // \u5e38\u7528\u65b9\u6cd5 /** @brief Template class for small matrices whose type and size are known at compilation time If you need a more flexible type, use Mat . The elements of the matrix M are accessible using the M(i,j) notation. Most of the common matrix operations (see also @ref MatrixExpressions ) are available. To do an operation on Matx that is not implemented, you can easily convert the matrix to Mat and backwards: @code{.cpp} Matx33f m(1, 2, 3, 4, 5, 6, 7, 8, 9); cout << sum(Mat(m*m.t())) << endl; @endcode Except of the plain constructor which takes a list of elements, Matx can be initialized from a C-array: @code{.cpp} float values[] = { 1, 2, 3}; Matx31f m(values); @endcode In case if C++11 features are available, std::initializer_list can be also used to initialize Matx: @code{.cpp} Matx31f m = { 1, 2, 3}; @endcode */ template < typename _Tp , int m , int n > class Matx { public : enum { rows = m , cols = n , channels = rows * cols , #ifdef OPENCV_TRAITS_ENABLE_DEPRECATED depth = traits :: Type < _Tp >:: value , type = CV_MAKETYPE ( depth , channels ), #endif shortdim = ( m < n ? m : n ) }; typedef _Tp value_type ; typedef Matx < _Tp , m , n > mat_type ; typedef Matx < _Tp , shortdim , 1 > diag_type ; //! default constructor Matx (); explicit Matx ( _Tp v0 ); //!< 1x1 matrix Matx ( _Tp v0 , _Tp v1 ); //!< 1x2 or 2x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 ); //!< 1x3 or 3x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 ); //!< 1x4, 2x2 or 4x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 ); //!< 1x5 or 5x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 ); //!< 1x6, 2x3, 3x2 or 6x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 ); //!< 1x7 or 7x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 ); //!< 1x8, 2x4, 4x2 or 8x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 ); //!< 1x9, 3x3 or 9x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 ); //!< 1x10, 2x5 or 5x2 or 10x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 ); //!< 1x12, 2x6, 3x4, 4x3, 6x2 or 12x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 , _Tp v12 , _Tp v13 ); //!< 1x14, 2x7, 7x2 or 14x1 matrix Matx ( _Tp v0 , _Tp v1 , _Tp v2 , _Tp v3 , _Tp v4 , _Tp v5 , _Tp v6 , _Tp v7 , _Tp v8 , _Tp v9 , _Tp v10 , _Tp v11 , _Tp v12 , _Tp v13 , _Tp v14 , _Tp v15 ); //!< 1x16, 4x4 or 16x1 matrix explicit Matx ( const _Tp * vals ); //!< initialize from a plain array #ifdef CV_CXX11 Matx ( std :: initializer_list < _Tp > ); //!< initialize from an initializer list #endif static Matx all ( _Tp alpha ); static Matx zeros (); static Matx ones (); static Matx eye (); static Matx diag ( const diag_type & d ); static Matx randu ( _Tp a , _Tp b ); static Matx randn ( _Tp a , _Tp b ); //! dot product computed with the default precision _Tp dot ( const Matx < _Tp , m , n >& v ) const ; //! dot product computed in double-precision arithmetics double ddot ( const Matx < _Tp , m , n >& v ) const ; //! conversion to another data type template < typename T2 > operator Matx < T2 , m , n > () const ; //! change the matrix shape template < int m1 , int n1 > Matx < _Tp , m1 , n1 > reshape () const ; //! extract part of the matrix template < int m1 , int n1 > Matx < _Tp , m1 , n1 > get_minor ( int base_row , int base_col ) const ; //! extract the matrix row Matx < _Tp , 1 , n > row ( int i ) const ; //! extract the matrix column Matx < _Tp , m , 1 > col ( int i ) const ; //! extract the matrix diagonal diag_type diag () const ; //! transpose the matrix Matx < _Tp , n , m > t () const ; //! invert the matrix Matx < _Tp , n , m > inv ( int method = DECOMP_LU , bool * p_is_ok = NULL ) const ; //! solve linear system template < int l > Matx < _Tp , n , l > solve ( const Matx < _Tp , m , l >& rhs , int flags = DECOMP_LU ) const ; Vec < _Tp , n > solve ( const Vec < _Tp , m >& rhs , int method ) const ; //! multiply two matrices element-wise Matx < _Tp , m , n > mul ( const Matx < _Tp , m , n >& a ) const ; //! divide two matrices element-wise Matx < _Tp , m , n > div ( const Matx < _Tp , m , n >& a ) const ; //! element access const _Tp & operator ()( int row , int col ) const ; _Tp & operator ()( int row , int col ); //! 1D element access const _Tp & operator ()( int i ) const ; _Tp & operator ()( int i ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_AddOp ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_SubOp ); template < typename _T2 > Matx ( const Matx < _Tp , m , n >& a , _T2 alpha , Matx_ScaleOp ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_MulOp ); Matx ( const Matx < _Tp , m , n >& a , const Matx < _Tp , m , n >& b , Matx_DivOp ); template < int l > Matx ( const Matx < _Tp , m , l >& a , const Matx < _Tp , l , n >& b , Matx_MatMulOp ); Matx ( const Matx < _Tp , n , m >& a , Matx_TOp ); _Tp val [ m * n ]; //< matrix elements }; Point\u5e38\u89c1\u7c7b\u578b /*\u4e8c\u7ef4\u70b9*/ typedef Point2i cv :: Point typedef Point_ < int > Point2i typedef Point_ < int64 > cv :: Point2I typedef Point_ < float > Point2f typedef Point_ < double > cv :: Point2d /*\u4e09\u7ef4\u70b9*/ typedef Point3_ < int > cv :: Point3i typedef Point3_ < float > cv :: Point3f typedef Point3_ < double > cv :: Point3d // \u4e3e\u4f8b cv :: Point2f p ( 6 , 2 ); cv :: Point3f p ( 8 , 2 , 0 ); p . x , p . y ; // \u5e38\u7528\u65b9\u6cd5 template < typename _Tp > class Point_ { public : typedef _Tp value_type ; //! default constructor Point_ (); Point_ ( _Tp _x , _Tp _y ); Point_ ( const Point_ & pt ); Point_ ( const Size_ < _Tp >& sz ); Point_ ( const Vec < _Tp , 2 >& v ); Point_ & operator = ( const Point_ & pt ); //! conversion to another data type template < typename _Tp2 > operator Point_ < _Tp2 > () const ; //! conversion to the old-style C structures operator Vec < _Tp , 2 > () const ; //! dot product _Tp dot ( const Point_ & pt ) const ; //! dot product computed in double-precision arithmetics double ddot ( const Point_ & pt ) const ; //! cross-product double cross ( const Point_ & pt ) const ; //! checks whether the point is inside the specified rectangle bool inside ( const Rect_ < _Tp >& r ) const ; _Tp x ; //!< x coordinate of the point _Tp y ; //!< y coordinate of the point }; Scalar Scalar ( r , g , b ); // opencv\u4e2d\u7684\u989c\u8272\u8868\u793a\uff0c\u8868\u793a\u5177\u6709 4\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\uff0c\u4e00\u822c\u6211\u4eec\u53ea\u7528\u5230\u524d\u4e09\u4e2a\u503c // \u7528\u6cd5 //////////////////////////////// Scalar_ /////////////////////////////// /** @brief Template class for a 4-element vector derived from Vec. Being derived from Vec\\<_Tp, 4\\> , Scalar\\_ and Scalar can be used just as typical 4-element vectors. In addition, they can be converted to/from CvScalar . The type Scalar is widely used in OpenCV to pass pixel values. */ template < typename _Tp > class Scalar_ : public Vec < _Tp , 4 > { public : //! default constructor Scalar_ (); //\u53c2\u6570\u6570\u91cf 0 Scalar_ ( _Tp v0 , _Tp v1 , _Tp v2 = 0 , _Tp v3 = 0 ); //\u53c2\u6570\u6570\u91cf2\uff0c3\uff0c4\u90fd\u53ef\u4ee5 Scalar_ ( _Tp v0 ); //\u53c2\u6570\u6570\u91cf 1 template < typename _Tp2 , int cn > Scalar_ ( const Vec < _Tp2 , cn >& v ); //! returns a scalar with all elements set to v0 static Scalar_ < _Tp > all ( _Tp v0 ); //! conversion to another data type template < typename T2 > operator Scalar_ < T2 > () const ; //! per-element product Scalar_ < _Tp > mul ( const Scalar_ < _Tp >& a , double scale = 1 ) const ; //! returns (v0, -v1, -v2, -v3) Scalar_ < _Tp > conj () const ; //! returns true iff v1 == v2 == v3 == 0 bool isReal () const ; }; typedef Scalar_ < double > Scalar ; //double\u7c7b\u578b scalar\uff0c\u65b9\u4fbf\u58f0\u660e\u5b9a\u4e49\u7528 Size typedef Size_ < int > Size2i ; typedef Size_ < int64 > Size2l ; typedef Size_ < float > Size2f ; typedef Size_ < double > Size2d ; typedef Size2i Size ; // \u7528\u6cd5 //////////////////////////////// Size_ //////////////////////////////// /** @brief Template class for specifying the size of an image or rectangle. The class includes two members called width and height. The structure can be converted to and from the old OpenCV structures CvSize and CvSize2D32f . The same set of arithmetic and comparison operations as for Point_ is available. OpenCV defines the following Size_\\<\\> aliases: @code typedef Size_<int> Size2i; typedef Size2i Size; typedef Size_<float> Size2f; @endcode */ template < typename _Tp > class Size_ { public : typedef _Tp value_type ; //! default constructor Size_ (); //\u9ed8\u8ba4\u6784\u9020\u51fd\u6570 Size_ ( _Tp _width , _Tp _height ); //\u5bbd \u9ad8 Size_ ( const Size_ & sz ); //\u62f7\u8d1d\u6784\u9020\u51fd\u6570 Size_ ( const Point_ < _Tp >& pt ); //\u8f6c\u6362\u6784\u9020\u51fd\u6570 Size_ & operator = ( const Size_ & sz ); //! the area (width*height) _Tp area () const ; //! true if empty bool empty () const ; //! conversion of another data type. template < typename _Tp2 > operator Size_ < _Tp2 > () const ; _Tp width ; //!< the width _Tp height ; //!< the height }; // \u5c5e\u6027 cv :: Size size ( 5 , 5 ); size . area (); // \u77e9\u5f62\u9762\u79ef size . width ; size . height ; Rect typedef Rect_ < int > Rect2i ; typedef Rect_ < float > Rect2f ; typedef Rect_ < double > Rect2d ; typedef Rect2i Rect ; // \u5e38\u7528\u5c5e\u6027\u548c\u65b9\u6cd5 rect . x , rect . y ; // \u8868\u793a\u5de6\u4e0a\u89d2\u5750\u6807 rect . width , rect . height ; // \u8868\u793a\u5bbd\u9ad8 rect . size (); // \u8fd4\u56deRect\u5bf9\u8c61\u7684\u5c3a\u5bf8 rect . area (); // \u8fd4\u56deRect\u5bf9\u8c61\u7684\u9762\u79ef\u5927\u5c0f rect . contains ( const point_ < _Tp > & pt ) const ; // \u68c0\u6d4b\u70b9pt\u662f\u5426\u5728Rect\u5bf9\u8c61\u5185\uff1b rect . tl (); // \u5de6\u4e0a\u89d2\u5750\u6807 rect . br (); // \u53f3\u4e0b\u89d2\u5750\u6807 bool cv :: Point_ < _Tp >:: inside ( const Rect_ < _Tp > & r ) const ; // \u5224\u65ad\u4e00\u4e2a\u70b9\u662f\u5426\u5728\u77e9\u5f62\u5bf9\u8c61\u5185 cv :: Rect rect1 ( 10 , 10 , 30 , 40 ); cv :: Rect rect2 ( 10 , 20 , 60 , 70 ); cv :: Rect r1 = rect1 & rect2 ; //\u4ea4\u96c6 cv :: Rect r2 = rect1 | rect2 ; //\u5e76\u96c6 cv :: Rect r3 = rect1 + Point ( 10 , 20 ); //\u5e73\u79fb cv :: Rect r4 = rect1 + Size ( 2 , 2 ); //\u77e9\u5f62\u6846\u52a0\u5927 printf ( \"\u77e9\u5f62r1\uff1a%d %d %d %d \\n \" , r1 . x , r1 . y , r1 . width , r1 . height ); printf ( \"\u77e9\u5f62r2\uff1a%d %d %d %d \\n \" , r2 . x , r2 . y , r2 . width , r2 . height ); printf ( \"\u77e9\u5f62r3\uff1a%d %d %d %d \\n \" , r3 . x , r3 . y , r3 . width , r3 . height ); printf ( \"\u77e9\u5f62r4\uff1a%d %d %d %d \\n \" , r4 . x , r4 . y , r4 . width , r4 . height ); OpenCV\u4e2d\u7684\u65b0\u589e\u6570\u5b66\u51fd\u6570 CV_EXPORTS_W float cubeRoot ( float val ); // \u8ba1\u7b97\u7acb\u65b9\u6839 CV_EXPORTS_W float fastAtan2 ( float y , float x ); // \u8ba1\u7b97\u5411\u91cf\u89d2\u5ea6\u8ba1\u7b97 // #include <opencv2/core/fast_math.hpp> CV_INLINE int cvRound ( double value ) //\u56db\u820d\u4e94\u5165\u51fd\u6570 CV_INLINE int cvFloor ( double value ) //\u5411\u4e0b\u53d6\u6574 CV_INLINE int cvCeil ( double value ) //\u5411\u4e0a\u53d6\u6574 CV_INLINE int cvIsNaN ( double value ) //\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a\u6570 CV_INLINE int cvIsInf ( double value ) //\u5224\u65ad\u662f\u5426\u65e0\u7a77\u5927 CV_INLINE int cvRound ( float value ) CV_INLINE int cvRound ( int value ) CV_INLINE int cvFloor ( float value ) CV_INLINE int cvFloor ( int value ) CV_INLINE int cvCeil ( float value ) CV_INLINE int cvCeil ( int value ) CV_INLINE int cvIsNaN ( float value ) CV_INLINE int cvIsInf ( float value ) \u5176\u4ed6\u7c7b\u578b // \u989c\u8272\u7a7a\u95f4\u8f6c\u5316 C ++ \uff1a void cvtColor ( InputArray src , OutputArray dst , int code , int dstCn = 0 ) * InputArray src \uff1a\u8868\u793a\u8f93\u5165\u56fe\u50cf\uff1b * OutputArray dst \uff1a\u8868\u793a\u8f93\u51fa\u56fe\u50cf\uff1b * int code \uff1a\u8868\u793a\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\u6807\u8bc6\u7b26\uff1b * int dstCn = 0 \uff1a\u76ee\u6807\u56fe\u50cf\u7684\u901a\u9053\u6570\uff1b 0 \uff1a\u76ee\u6807\u56fe\u50cf\u53d6\u6e90\u56fe\u50cf\u7684\u901a\u9053\u6570\uff1b // \u4f8b\u5b50 /*OpenCv2 \u7248\u672c*/ cvtColor ( srcImage , dstImage , CV_GRAY2BGR ); /*OpenCv3 \u7248\u672c*/ cvtColor ( srcImage , dstImage , COLOR_GRAY2BGR ); // code RGB <-> BGR : COLOR_BGR2BGRA \u3001 COLOR_RGB2RGBA \u3001 COLOR_BGRA2RGBA \u3001 COLOR_BGR2BGRA \u3001 COLOR_BGRA2BGR RGB <-> Gray : COLOR_RGB2GRAY \u3001 COLOR_GRAY2RGB \u3001 COLOR_RGBA2GRAY \u3001 COLOR_GRAY2RGBA RGB <-> HSV : COLOR_BGR2HSV \u3001 COLOR_RGB2HSV \u3001 COLOR_HSV2BGR \u3001 COLOR_HSV2RGB RGB <-> HLS : COLOR_BGR2HSV \u3001 COLOR_RGB2HSV \u3001 COLOR_HSV2BGR \u3001 COLOR_HSV2RGB // \u7279\u6b8a\u4f7f\u7528\uff1a\u5f53\u9700\u8981\u628a\u4e00\u4e2a 88 \u4f4d\u7684 RGB \u56fe\u50cf\u8f6c\u5316\u4e3a Luv \u683c\u5f0f\u7684\u56fe\u50cf\u65f6\uff0c\u9700\u8981\u5148\u628a\u56fe\u50cf\u8f6c\u5316\u4e3a\u5355\u7cbe\u5ea6 3232 \u4f4d img *= 1. / 255 ; cvtColor ( img , img , COLOR_BGR2Luv ); \u56fe\u50cf/\u89c6\u9891\u64cd\u4f5c\u51fd\u6570 // 1.imread:OpenCV\u652f\u6301bmp\u3001jpg\u3001png\u3001tiff\u7b49\u5e38\u7528\u56fe\u50cf\u683c\u5f0f\u7684\u89e3\u6790 Mat imread ( const String & filename , int flags = IMREAD_COLOR ); * IMREAD_UNCHANGED \uff1a\u4e0d\u5bf9\u56fe\u50cf\u6587\u4ef6\u8fdb\u884c\u4efb\u4f55\u8f6c\u6362\uff0c\u76f4\u63a5\u8bfb\u53d6\uff1b * IMREAD_GRAYSCALE \uff1a\u5c06\u4efb\u4f55\u56fe\u50cf\u5747\u8f6c\u6362\u4e3a\u7070\u5ea6\u56fe\u50cf ( \u5355\u901a\u9053 ) \u8fdb\u884c\u8bfb\u53d6\uff1b * IMREAD_COLOR \uff1a\u5c06\u4efb\u4f55\u56fe\u50cf\u5747\u8f6c\u4e3a RGB\u5f69\u8272\u56fe\u50cf ( \u4e09\u901a\u9053 ) \u8fdb\u884c\u8bfb\u53d6\uff1b * IMREAD_ANYDEPTH \uff1a\u5982\u679c\u4e0d\u8bbe\u7f6e\u8fd9\u4e2a\u53c2\u6570\uff0c 16 / 32 \u4f4d\u56fe\u50cf\u5c06\u4f1a\u81ea\u52a8\u8f6c\u4e3a 8 \u4f4d\u56fe\u50cf\uff1b * IMREAD_ANYCOLOR \uff1a\u5c06\u6309\u7167\u56fe\u50cf\u6587\u4ef6\u8bbe\u5b9a\u7684\u989c\u8272\u683c\u5f0f\u8fdb\u884c\u56fe\u50cf\u8bfb\u53d6\uff1b * IMREAD_LOAD_GDAL \uff1a\u8c03\u7528 gdal\u5e93\u8fdb\u884c\u56fe\u50cf\u6587\u4ef6\u8bfb\u53d6 ( \u53ef\u4ee5\u7b80\u5355\u5730\u7406\u89e3\u4e3a\u8bfb\u53d6 TIFF\u56fe\u50cf\u6587\u4ef6 ) \u3002 // \u4f8b\u5b50 Mat image = cv :: imread ( ' test . jpg ' , cv :: IMREAD_GRAYSCALE ); image . cols ; // \u5bbd\u5ea6 image . rows ; // \u9ad8\u5ea6 image . channels (); // \u901a\u9053\u6570 image . elemSize (); // \u4e00\u4e2a\u50cf\u7d20\u5360\u7528\u7684\u5b57\u8282\u6570 cout << image . elemSize () / image . channels () * 8 << endl ; //2.imshow() \u53ea\u652f\u63018\u4f4d\u7070\u5ea6\u56fe\u50cf\u30018\u4f4d\u5f69\u8272\u56fe\u50cf\u548c32\u4f4d\u7070\u5ea6\u56fe\u50cf(\u50cf\u7d20\u503c\u8303\u56f40-1) void imshow ( const String & winname , InputArray mat ); cv :: waitKey (); // 3.imwrite() \u53ea\u652f\u6301\u5355\u901a\u9053\u548c3\u901a\u9053\u7684\u56fe\u50cf\uff0c\u5e76\u4e14\u6b64\u65f6\u8981\u6c42\u5176\u6df1\u5ea6\u4e3a8bit\u548c16bit\u65e0\u7b26\u53f7,\u5176\u4ed6\u4e00\u4e9b\u6570\u636e\u7c7b\u578b\u662f\u4e0d\u652f\u6301\u7684\uff0c\u6bd4\u5982\u8bf4float\u578b\u7b49\u3002\u5982\u679cMat\u7c7b\u578b\u6570\u636e\u7684\u6df1\u5ea6\u548c\u901a\u9053\u6570\u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u8981\u6c42\uff0c\u5219\u9700\u8981\u4f7f\u7528convertTo()\u51fd\u6570\u548ccvtColor()\u51fd\u6570\u6765\u8fdb\u884c\u8f6c\u6362 bool imwrite ( const String & filename , InputArray img , const std :: vector < int >& params = std :: vector < int > ()); // 4.\u56fe\u50cf\u904d\u5386 template < typename _Tp > _Tp & at ( int row , int col ); * \u3000 \u5355\u901a\u9053\u7070\u5ea6 unsigned char * \u3000 \u4e09\u901a\u9053\u5f69\u8272 ( 8 \u4f4d ) cv :: Vec3b * \u3000 16 \u4f4d\u7070\u5ea6 unsigned short * \u3000 32 \u4f4d\u6d6e\u70b9\u578b float * \u3000 \u53cc\u901a\u9053 32 \u4f4d cv :: Vec2f for ( int r = 0 ; r < img . rows ; ++ r ) { for ( int c = 0 ; c < img . cols ; ++ c ) { int data = img . at < unsigned char > ( r , c ); std :: cout << data << std :: endl ; } } //\u6570\u636e\u7f13\u5b58\u533a\u6307\u9488 \u4f7f\u7528data\u5c5e\u6027\u83b7\u53d6\u6570\u636e\u7f13\u5b58\u533a\u6307\u9488\uff0c\u5229\u7528\u6307\u9488\u76f4\u63a5\u8bfb\u53d6\u6570\u636e\u7f13\u5b58\u533a\u7684\u5185\u5bb9\u3002\u4f8b\u5982 #include <opencv2/opencv.hpp> #include <iostream> int main ( int argc , char const * argv []) { cv :: Mat img = cv :: imread ( \"test.png\" , cv :: IMREAD_GRAYSCALE ); unsigned char * img_data = reinterpret_cast < unsigned char *> ( img . data ); for ( int r = 0 ; r < img . rows ; ++ r ) { for ( int c = 0 ; c < img . cols ; ++ c ) { std :: cout << static_cast < float > ( * img_data ) << std :: endl ; ++ img_data ; // \u6307\u9488\u589e\u52a0 } } return 0 ; } //\u3000\u884c\u9996\u6307\u9488\uff0cptr\u63a5\u53e3\u6765\u76f4\u63a5\u83b7\u53d6\u6bcf\u4e00\u884c\u7684\u884c\u9996\u6307\u9488 int main ( int argc , char const * argv []) { cv :: Mat img = cv :: imread ( \"test.png\" , cv :: IMREAD_GRAYSCALE ); for ( int r = 0 ; r < img . rows ; ++ r ) { unsigned char * rdata = img . ptr < unsigned char > ( r ); for ( int c = 0 ; c < img . cols ; ++ c ) { std :: cout << static_cast < float > ( * rdata ) << std :: endl ; ++ rdata ; } } return 0 ; } // 5.\u89c6\u9891\u64cd\u4f5c\u51fd\u6570 //\u529f\u80fd\uff1a\u521b\u5efa\u4e00\u4e2aVideoCapture\u7c7b\u7684\u5b9e\u4f8b\uff0c\u5982\u679c\u4f20\u5165\u5bf9\u5e94\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u76f4\u63a5\u6253\u5f00\u89c6\u9891\u6587\u4ef6\u6216\u8005\u8981\u8c03\u7528\u7684\u6444\u50cf\u5934\u3002 //\u53c2\u6570: filename \u2013 \u6253\u5f00\u7684\u89c6\u9891\u6587\u4ef6\u540d\u3002 //device \u2013 \u6253\u5f00\u7684\u89c6\u9891\u6355\u83b7\u8bbe\u5907id \uff0c\u5982\u679c\u53ea\u6709\u4e00\u4e2a\u6444\u50cf\u5934\u53ef\u4ee5\u586b0\uff0c\u8868\u793a\u6253\u5f00\u9ed8\u8ba4\u7684\u6444\u50cf\u5934\u3002 VideoCapture :: VideoCapture (); VideoCapture :: VideoCapture ( const string & filename ); VideoCapture :: VideoCapture ( int device ); //\u529f\u80fd\uff1a\u6253\u5f00\u4e00\u4e2a\u89c6\u9891\u6587\u4ef6\u6216\u8005\u6253\u5f00\u4e00\u4e2a\u6355\u83b7\u89c6\u9891\u7684\u8bbe\u5907(\u4e5f\u5c31\u662f\u6444\u50cf\u5934) bool VideoCapture :: open ( const string & filename ); bool VideoCapture :: open ( int device ); //\u529f\u80fd\uff1a\u5224\u65ad\u89c6\u9891\u8bfb\u53d6\u6216\u8005\u6444\u50cf\u5934\u8c03\u7528\u662f\u5426\u6210\u529f\uff0c\u6210\u529f\u5219\u8fd4\u56detrue bool VideoCapture :: isOpened (); //\u529f\u80fd\uff1a\u5173\u95ed\u89c6\u9891\u6587\u4ef6\u6216\u8005\u6444\u50cf\u5934 void VideoCapture :: release (); //\u529f\u80fd\uff1a\u8bfb\u53d6\u89c6\u9891\u5185\u5bb9 bool VideoCapture :: grab (); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56defalse bool VideoCapture :: retrieve ( Mat & image , int channel = 0 ); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56defalse VideoCapture & VideoCapture :: operator >> ( Mat & image ); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56de\u7a7a\uff0c\u5373cv::Mat.empty()\u8fd4\u56detrue bool VideoCapture :: read ( Mat & image ); //\u82e5\u6ca1\u6709\u89c6\u9891\u5e27\u88ab\u6355\u83b7\uff0c\u8fd4\u56defalse //\u529f\u80fd\uff1a\u83b7\u5f97\u89c6\u9891\u6709\u8bf8\u591a\u5c5e\u6027\uff0c\u6bd4\u5982\uff1a\u5e27\u7387\u3001\u603b\u5e27\u6570\u3001\u5c3a\u5bf8\u3001\u683c\u5f0f\u7b49 //\u5982\u679c\u67e5\u8be2\u7684\u89c6\u9891\u5c5e\u6027\u662fVideoCapture\u7c7b\u4e0d\u652f\u6301\u7684\uff0c\u5c06\u4f1a\u8fd4\u56de0 double VideoCapture :: get ( int propId ); //\u529f\u80fd\uff1a\u8bbe\u7f6eVideoCapture\u7c7b\u7684\u5c5e\u6027\uff0c\u8bbe\u7f6e\u6210\u529f\u8fd4\u56deture,\u5931\u8d25\u8fd4\u56defalse //\u53c2\u6570\uff1a\u7b2c\u4e00\u4e2a\u662f\u5c5e\u6027ID\uff0c\u7b2c\u4e8c\u4e2a\u662f\u8be5\u5c5e\u6027\u8981\u8bbe\u7f6e\u7684\u503c bool VideoCapture :: set ( int propertyId , double value ); // \u89c6\u9891\u5c5e\u6027\u4ecb\u7ecd * CV_CAP_PROP_POS_MSEC \u4ee5\u6beb\u79d2\u8ba1\u7b97\u7684\u5f53\u524d\u7684\u4f4d\u7f6e * CV_CAP_PROP_POS_FRAMES \u4ee5\u5e27\u8ba1\u7b97\u5f53\u524d\u7684\u4f4d\u7f6e * CV_CAP_PROP_POS_AVI_RATIO \u89c6\u9891\u7684\u76f8\u5bf9\u4f4d\u7f6e\uff0c 0 \u8868\u793a\u89c6\u9891\u5f00\u59cb\uff0c 1 \u8868\u793a\u89c6\u9891\u7ed3\u675f * CV_CAP_PROP_FRAME_WIDTH \u5e27\u5bbd\u5ea6 * CV_CAP_PROP_FRAME_HEIGHT \u5e27\u9ad8\u5ea6 * CV_CAP_PROP_FPS \u5e27\u7387 * CV_CAP_PROP_FOURCC 4 \u5b57\u7b26\u7f16\u7801\u65b9\u5f0f * CV_CAP_PROP_FRAME_COUNT \u89c6\u9891\u5e27\u6570 * CV_CAP_PROP_FORMAT \u89c6\u9891\u683c\u5f0f * CV_CAP_PROP_MODE * CV_CAP_PROP_BRIGHTNESS \u4eae\u5ea6 * CV_CAP_PROP_CONTRAST \u5bf9\u6bd4\u5ea6 * CV_CAP_PROP_SATURATION \u9971\u548c\u5ea6 * CV_CAP_PROP_HUE \u8272\u8c03 * CV_CAP_PROP_GAIN \u589e\u76ca * CV_CAP_PROP_EXPOSURE \u66dd\u5149 * CV_CAP_PROP_CONVERT_RGB \u56fe\u50cf\u662f\u5426\u5e94\u8f6c\u6362\u4e3a RGB\u7684\u6807\u5fd7 * CV_CAP_PROP_WHITE_BALANCE \u767d\u5e73\u8861 * CV_CAP_PROP_RECTIFICATION // \u89c6\u9891\u4fdd\u5b58\u51fd\u6570\uff0cfilename\u53c2\u6570\u8868\u793a\u6587\u4ef6\u540d\uff0cfourcc\u53c2\u6570\u8868\u793a\u7f16\u7801\u683c\u5f0f\uff0cfps\u53c2\u6570\u8868\u793a\u89c6\u9891\u5e27\u7387\uff0cframeSize\u8868\u793a\u89c6\u9891\u7684\u5c3a\u5bf8\u5927\u5c0f VideoWriter :: VideoWriter ( const string & filename , int fourcc , double fps , Size frameSize , bool isColor = true ); bool VideoWriter :: open ( const string & filename , int fourcc , double fps , Size frameSize , bool isColor = true ); // \u5e38\u89c1\u7f16\u7801\u683c\u5f0f\uff0cOpenCV\u91cc\u5bf9\u89c6\u9891\u7684\u7f16\u7801\u89e3\u7801\u7b49\u652f\u6301\u5e76\u4e0d\u662f\u5f88\u826f\u597d\uff0c\u6240\u4ee5\u4e0d\u8981\u5e0c\u671b\u7528\u8fd9\u4e2a\u7c7b\u53bb\u5b9e\u73b0\u6444\u50cf\u5934\u56fe\u50cf\u7684\u83b7\u53d6\u4e0e\u8f6c\u7801\uff0c\u6709\u5174\u8da3\u7684\u53ef\u4ee5\u53c2\u8003FFmpeg\u5e93\u3002 * CV_FOURCC ( 'P' , 'I' , 'M' , '1' ) MPEG -1 * CV_FOURCC ( 'M' , 'J' , 'P' , 'G' ) motion - jpeg * CV_FOURCC ( 'M' , 'P' , '4' , '2' ) MPEG -4.2 * CV_FOURCC ( 'D' , 'I' , 'V' , '3' ) MPEG -4.3 * CV_FOURCC ( 'D' , 'I' , 'V' , 'X' ) MPEG -4 * CV_FOURCC ( 'U' , '2' , '6' , '3' ) H263 * CV_FOURCC ( 'I' , '2' , '6' , '3' ) H263I * CV_FOURCC ( 'F' , 'L' , 'V' , '1' ) FLV1 \u89c6\u9891\u8bfb\u53d6 #include <opencv2/opencv.hpp> #include <iostream> int main ( int argc , char const * argv []) { cv :: VideoCapture cap ; cap . open ( \"test.mp4\" ); if ( ! cap . isOpened ()) return 0 ; int width = cap . get ( CV_CAP_PROP_FRAME_WIDTH ); //\u5e27\u5bbd\u5ea6 int height = cap . get ( CV_CAP_PROP_FRAME_HEIGHT ); //\u5e27\u9ad8\u5ea6 int totalFrames = cap . get ( CV_CAP_PROP_FRAME_COUNT ); //\u603b\u5e27\u6570 int frameRate = cap . get ( CV_CAP_PROP_FPS ); //\u5e27\u7387 x frames/s std :: cout << \"\u89c6\u9891\u5bbd\u5ea6\uff1a \" << width << std :: endl ; std :: cout << \"\u89c6\u9891\u9ad8\u5ea6\uff1a \" << height << std :: endl ; std :: cout << \"\u89c6\u9891\u603b\u5e27\u6570\uff1a \" << totalFrames << std :: endl ; std :: cout << \"\u5e27\u7387\uff1a \" << frameRate << std :: endl ; cv :: Mat frame ; // cap.set(CV_CAP_PROP_POS_FRAMES, 20); //\u8df3\u8f6c\u5230\u7b2c20\u5e27 while ( 1 ) { cap >> frame ; if ( frame . empty ()) break ; cv :: imshow ( \"hello\" , frame ); cv :: waitKey ( 50 ); } cap . release (); return 0 ; } \u89c6\u9891\u5b58\u50a8 #include <opencv2/opencv.hpp> #include <iostream> int main ( int argc , char const * argv []) { cv :: VideoCapture cap ; cap . open ( \"test.mp4\" ); if ( ! cap . isOpened ()) return 0 ; int width = cap . get ( CV_CAP_PROP_FRAME_WIDTH ); //\u5e27\u5bbd\u5ea6 int height = cap . get ( CV_CAP_PROP_FRAME_HEIGHT ); //\u5e27\u9ad8\u5ea6 int totalFrames = cap . get ( CV_CAP_PROP_FRAME_COUNT ); //\u603b\u5e27\u6570 int frameRate = cap . get ( CV_CAP_PROP_FPS ); //\u5e27\u7387 x frames/s std :: cout << \"\u89c6\u9891\u5bbd\u5ea6\uff1a \" << width << std :: endl ; std :: cout << \"\u89c6\u9891\u9ad8\u5ea6\uff1a \" << height << std :: endl ; std :: cout << \"\u89c6\u9891\u603b\u5e27\u6570\uff1a \" << totalFrames << std :: endl ; std :: cout << \"\u5e27\u7387\uff1a \" << frameRate << std :: endl ; cv :: VideoWriter wri ; wri . open ( \"test_copy.avi\" , CV_FOURCC ( 'M' , 'P' , '4' , '2' ), frameRate , cv :: Size ( width , height )); cv :: Mat frame ; while ( 1 ) { cap >> frame ; if ( frame . empty ()) break ; wri << frame ; } cap . release (); wri . release (); return 0 ; }","title":"opencv\u5e38\u7528\u5c5e\u6027"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/","text":"CAFFE\u7f16\u8bd1\u6587\u4ef6 \u00b6 ubuntu\u73af\u5883\u51c6\u5907(\u5feb\u901f\u5b89\u88c5) sudo apt-get install git sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler sudo apt-get install --no-install-recommends libboost-all-dev sudo apt-get install libatlas-base-dev sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev ubuntu\u73af\u5883\u51c6\u5907(\u6e90\u7801\u5b89\u88c5,\u53ef\u9009) \u767e\u5ea6\u4e91:idi7 protobuf ProtoBuffer\u662f\u7531Google\u5f00\u53d1\u7684\u4e00\u79cd\u53ef\u4ee5\u5b9e\u73b0\u5185\u5b58\u4e0e\u975e\u6613\u5931\u5b58\u50a8\u4ecb\u8d28\uff08\u5982\u786c\u76d8\u6587\u4ef6\uff09\u4ea4\u6362\u7684\u534f\u8bae\u63a5\u53e3\uff0c\u7528\u6237\u53ea\u9700\u8981\u5efa\u7acb\u7edf\u4e00\u7684\u53c2\u6570\u63cf\u8ff0\u6587\u4ef6\uff08proto\uff09\uff0c\u7136\u540e\u5229\u7528protoc\u7f16\u8bd1\u5c31\u80fd\u8ba9\u534f\u8bae\u7ec6\u8282\u7b49\u5173\u952e\u90e8\u5206\u4ee3\u7801\u81ea\u52a8\u751f\u6210\uff0c\u8282\u7701\u4e86\u5927\u91cf\u7684\u5f00\u53d1\u3001\u8c03\u8bd5\u65f6\u95f4 tar -zxvf protobuf-2.5.0.tar.gz cd protobuf-2.5.0 # \u6211\u4eec\u5e76\u6ca1\u6709\u5c06Protobuf\u5b89\u88c5\u5230\u7cfb\u7edf\u9ed8\u8ba4\u76ee\u5f55/usr/\u6216/usr/local/\u4e0b\uff0c\u800c\u662f\u5b89\u88c5\u5230\u672c\u5730\u76ee\u5f55/home/yourname/local_install/\u4e0b\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4fbf\u4e8e\u8fc1\u79fb\u3002\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u5b89\u88c5\u597d\u7684Caffe\u53ca\u5176\u4f9d\u8d56\uff0c\u80fd\u8fc5\u901f\u8fc1\u79fb\u5230\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\u800c\u65e0\u987b\u91cd\u590d\u7f16\u8bd1\u3001\u5b89\u88c5\u3002\u540e\u9762\u6240\u6709\u7b2c\u4e09\u65b9\u4f9d\u8d56\u8f6f\u4ef6\u5305\u90fd\u4f1a\u5b89\u88c5\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u3002 ./configure --prefix = /home/yang/local_install/ make make install # \u6821\u9a8c\u662f\u5426\u5b89\u88c5\u6210\u529f ls ~/local_install/bin/ # \u663e\u793a protoc\u5373\u53ef # \u52a0\u5165\u5230\u7cfb\u7edf\u8def\u5f84,vi .bashrc export PATH = ~/local_install/bin/: $PATH # \u4fee\u6539Makefile.config INCLUDE_DIRS += ~/local_install/include LIBRARY_DIRS += ~/local_install/lib # caffe\u751f\u6210caffe.pb.h cd caffe/src/caffe/proto protoc --cpp_out = ./ caffe.proto # \u751f\u6210caffe.pb.h Boost \u5b83\u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u3001\u6784\u9020\u7cbe\u5de7\u3001\u8de8\u5e73\u53f0\u3001\u5f00\u6e90\u4e14\u514d\u8d39\u7684\u5e93\uff0c\u88ab\u79f0\u4e3a\u201cC++\u51c6\u6807\u51c6\u5e93\u201d\uff0c\u4f7f\u7528\u4e86\u5f88\u591a\u73b0\u4ee3\u7f16\u7a0b\u6280\u672f\uff0c\u5185\u5bb9\u6db5\u76d6\u5b57\u7b26\u4e32\u5904\u7406\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u5bb9\u5668\uff08\u4e0d\u662fDocker\uff09\u548c\u6570\u636e\u7ed3\u6784\u3001\u5e76\u53d1\u7f16\u7a0b\u3001\u51fd\u6570\u5f0f\u7f16\u7a0b\u3001\u6cdb\u578b\u7f16\u7a0b\u3001\u8bbe\u8ba1\u6a21\u5f0f\u5b9e\u73b0\u7b49\u8bb8\u591a\u9886\u57df\uff0c\u4f7f\u5f97C++\u5f00\u53d1\u66f4\u52a0\u7075\u6d3b\u3001\u9ad8\u6548\u3002 \u5728Caffe\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86Boost\u4e2d\u7684\u667a\u80fd\u6307\u9488\uff0c\u5176\u81ea\u5e26\u5f15\u7528\u8ba1\u6570\u529f\u80fd\uff0c\u53ef\u907f\u514d\u5171\u4eab\u6307\u9488\u65f6\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u6216\u591a\u6b21\u91ca\u653e\u3002\u53e6\u5916\uff0cpycaffe\u4f7f\u7528Boost Python\u5b9e\u73b0C/C++\u548cPython\u8bed\u8a00\u7684\u8fde\u63a5\uff0c\u65b9\u4fbfPython\u8c03\u7528C/C++\u8bbe\u8ba1\u7684\u6a21\u5757\u3002 tar -zxvf boost_1_56_0.tar.bz2 cd boost_1_56_0/ sudo ./bootstrap.sh --with-libraries = system,thread,python sudo ./b2 # sudo ./b2 install # \u5b89\u88c5\u5728\u7cfb\u7edf\u76ee\u5f55\u4e0b # sudo ldconfig # \u9700\u8981\u624b\u52a8\u590d\u5236\u5230\u4f60\u7684\u5b89\u88c5\u76ee\u5f55\u4e0b cp -r boost/ /home/yang/local_install/include/ cp stage/lib/* /home/yang/local_install/lib/ # \u5f7b\u5e95\u5220\u9664boost cd /usr/local/include rm -rf boost cd /usr/local/lib rm -rf *boost* GFLAGS GFLAGS\u5728Caffe\u4e2d\u4e3b\u8981\u8d77\u5230\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\u7684\u4f5c\u7528\uff0c\u8fd9\u4e0eProtoBuffer\u529f\u80fd\u7c7b\u4f3c\uff0c\u53ea\u662f\u53c2\u6570\u8f93\u5165\u6e90\u4e0d\u540c\u3002GFLAGS\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684tools/caffe.cpp\u3002 unzip gflags-2.1.1.zip cd gflags-2.1.1/ mkdir build && cd build cmake .. ccmake .. # \u63a5\u4e0b\u6765\u4f1a\u5f39\u51faccmake\u914d\u7f6e\u754c\u9762\uff0c\u4fee\u6539\u4e24\u4e2a\u4f4d\u7f6e BUILD_SHARED_LIBS ON CMAKE_INSTALLPREFIX /home/yang/local_install # \u5148\u6309C\u952e\u518d\u6309G\u952e\uff0c\u751f\u6210Makefile make make install GLOG GLOG\u5e93\u662fGoogle\u5f00\u53d1\u7684\u7528\u4e8e\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u65e5\u5fd7\u7684\u5b9e\u7528\u5e93\uff0c\u63d0\u4f9b\u57fa\u4e8eC++\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6d41\u5f62\u5f0f\u7684\u63a5\u53e3\uff0c\u8bb0\u5f55\u65f6\u53ef\u9009\u62e9\u4e0d\u540c\u7684\u65e5\u5fd7\u7ea7\u522b\uff0c\u65b9\u4fbf\u5c06\u91cd\u8981\u65e5\u5fd7\u548c\u666e\u901a\u65e5\u5fd7\u5206\u5f00\u3002 tar -zxvf glog-0.3.3.tar.gz cd glog-0.3.3/ ./configure --prefix = /home/yang/local_install/ make make install BLAS \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u7528\u5230\u7684\u6570\u5b66\u8ba1\u7b97\u4e3b\u8981\u662f\u77e9\u9635\u3001\u5411\u91cf\u7684\u8ba1\u7b97\uff0cCaffe\u4e2d\u8c03\u7528\u4e86BLAS\uff08Basic Linear Algebra Subprograms\uff0c\u57fa\u672c\u7ebf\u6027\u4ee3\u6570\u5b50\u7a0b\u5e8f\uff09\u4e2d\u7684\u76f8\u5e94\u65b9\u6cd5\u3002\u6700\u5e38\u7528\u7684BLAS\u5b9e\u73b0\u6709Intel MKL\u3001ATLAS\u3001OpenBLAS\u7b49\uff0cCaffe\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4efb\u4e00\u79cd\u3002 OpenBLAS\u5728Caffe\u4e2d\u4e3b\u8981\u8d1f\u8d23CPU\u7aef\u7684\u6570\u503c\u8ba1\u7b97\uff08\u5982\u77e9\u9635\u4e58\u6cd5\uff09\u3002\u7531\u4e8e\u8c03\u7528\u91cf\u76f8\u5f53\u5927\uff0c\u8be5\u5e93\u7684\u6027\u80fd\u76f4\u63a5\u5f71\u54cdCaffe\u7684\u8fd0\u884c\u6027\u80fd\u3002 \u5728GPU\u7aef\u7684\u6570\u503c\u8ba1\u7b97\u5219\u7531\u5bf9\u5e94\u7684cuBLAS\u5b8c\u6210\uff0c\u5176API\u63a5\u53e3\u4e0eOpenBLAS\u7c7b\u4f3c\u3002 \u53c2\u8003\u5c0f\u4f8b\u5b50:Caffe\u6e90\u7801include/caffe/util/math_functions.hpp\u4e2d\u3002 # Makefile.config BLAS : = open # atlas/mkl/open,\u5e38\u9009\u7528open tar -zxvf OpenBLAS-0.2.14.tar.gz cd OpenBLAS-0.2.14/ make -j make PREFIX = /home/yang/local_install/ install HDF5 \u4e00\u79cd\u80fd\u9ad8\u6548\u5b58\u50a8\u548c\u5206\u53d1\u79d1\u5b66\u6570\u636e\u7684\u65b0\u578b\u6570\u636e\u683c\u5f0f\u3002\u5b83\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u56fe\u50cf\u548c\u6570\u7801\u6570\u636e\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u673a\u5668\u4e0a\u4f20\u8f93\uff0c\u540c\u65f6\u8fd8\u6709\u7edf\u4e00\u5904\u7406\u8fd9\u79cd\u6587\u4ef6\u683c\u5f0f\u7684\u51fd\u6570\u5e93\u3002Caffe\u8bad\u7ec3\u6a21\u578b\u53ef\u4ee5\u9009\u62e9\u4fdd\u5b58\u4e3aHDF5\u683c\u5f0f\u6216\uff08\u9ed8\u8ba4\u7684\uff09ProtoBuffer\u683c\u5f0f\u3002 HDF5\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684hdf5.hpp\u548chdf5.cpp\u3002 tar -zxvf hdf5-1.8.9.tar.gz cd hdf5-1.8.9/ ./configure --prefix = /home/yang/local_install/ make -j make install opencv OpenCV\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684io.hpp\u548cio.cpp\u3002 unzip opencv - 3.0 . 0. zip cd opencv - 3.0 . 0 / mkdir build && cd build cmake .. ccmake .. make make install # \u5982\u679cmake caffe\u7684\u65f6\u5019\u62a5\u9519:undefined reference tocv::imread(cv::String const &int).. #\u539f\u56e0\u5c31\u662fOpenCV 3.0\u628aimread\u76f8\u5173\u51fd\u6570\u653e\u5230imgcodecs.lib\u4e2d\u4e86\uff0c\u800c\u975e\u539f\u6765\u7684imgproc.lib\u4e2d\u3002\u89e3\u51b3\u65b9\u6cd5\u4e3a\u4fee\u6539Makefile\u6587\u4ef6\uff08\u6ce8\u610f\u4e0d\u662fMakefile.config\uff09\uff0c\u5728\u4f4d\u7f6e\u7684\u6700\u540e\u6dfb\u52a0opencv_imgcodecs\u5373\u53ef\u3002\u65b0\u7248Caffe\u901a\u8fc7\u5728Makefile.config\u4e2d\u589e\u52a0\u7f16\u8bd1\u9009\u9879\uff08OPENCV_VERSION := 3\uff09\u4fee\u590d\u4e86\u8fd9\u4e00\u95ee\u9898\u3002 LIBRARIES += glog gflags protobuf leveldb snappy \\ lmdb boost_system hdf5_h1 hdf5 m \\ opencv_core opencv-highgui opencv_imgproc opencv_imgcodecs LMDB/LEVELDB \u95ea\u7535\u822c\u7684\u5185\u5b58\u6620\u5c04\u578b\u6570\u636e\u5e93\u7ba1\u7406\u5668\uff0c\u5728Caffe\u4e2d\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u63d0\u4f9b\u6570\u636e\u7ba1\u7406\uff0c\u5c06\u5f62\u5f62\u8272\u8272\u7684\u539f\u59cb\u6570\u636e\uff08JPEG\u56fe\u7247\u3001\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u8f6c\u6362\u4e3a\u7edf\u4e00\u7684Key-Value\u5b58\u50a8\uff0c\u4fbf\u4e8eCaffe\u7684DataLayer\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e LEVELDB\u5e93\u662fCaffe\u65e9\u671f\u7248\u672c\u4f7f\u7528\u7684\u6570\u636e\u5b58\u50a8\u65b9\u5f0f\uff0c\u7531Google\u5f00\u53d1\u3002\u5b83\u662f\u4e00\u79cd\u6301\u7eed\u7684\u952e\u503c\u5bf9\u5b58\u50a8\u65b9\u5f0f\uff0c\u952e\u548c\u503c\u53ef\u4ee5\u4e3a\u4efb\u610f\u5b57\u8282\u6570\u7ec4\u3002\u952e\u7684\u5b58\u50a8\u987a\u5e8f\u53ef\u7531\u7528\u6237\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\u51b3\u5b9a\u3002\u76ee\u524d\u5927\u90e8\u5206\u4f8b\u7a0b\u90fd\u5df2\u7ecf\u4f7f\u7528 LMDB\u548cLEVELDB\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684db_lmdb.hpp\u3001db_lmdb.cpp\u3001db_leveldb.hpp\u548cdb_leveldb.cpp\u3002 # lmdb\u4e0b\u8f7d\u6210\u529f\u540e\uff0c\u65e0\u9700\u914d\u7f6e\uff0c\u76f4\u63a5\u7f16\u8bd1 make # \u7f16\u8bd1\u6210\u529f\u540e cp lmdb . h / home / yang / local_install / include / cp liblmdb . so / home / yang / local_install / lib / # leveldb make cp - r include / leveldb / home / yang / local_install / include / cp libleveldb . so * / home / yang / local_install / lib / Snappy Snappy\u662f\u4e00\u4e2a\u7528\u6765\u538b\u7f29\u548c\u89e3\u538b\u7f29\u7684C++\u5e93\uff0c\u65e8\u5728\u63d0\u4f9b\u8f83\u9ad8\u7684\u538b\u7f29\u901f\u5ea6\u548c\u5408\u7406\u7684\u538b\u7f29\u7387\u3002Snappy\u6bd4zlib\u66f4\u5feb\uff0c\u4f46\u6587\u4ef6\u76f8\u5bf9\u8981\u592720%\uff5e100%\u3002 tar -zxvf snappy-1.1.1.tar.gz cd snappy-1.1.1/ ./configure --prefix = /home/yang/local_install/ make && make install \u4fee\u6539 Makefile.config # \u989d\u5916\u5934\u6587\u4ef6\u3001\u5e93\u5305\u542b\u9009\u9879\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4eca\u5929\u7684\u6240\u6709\u4f9d\u8d56\u5b89\u88c5\u8def\u5f84 INCLUDE_DIRS: = /home/yang/local_install/incude $( PYTHON_INCLUDE ) /usr/local/include LIBRARY_DIRS: = /home/yang/local_install/lib $( PYTHON_LIB ) /usr/local/lib /usr/lib # \u6ce8\u610f\u5c06\u4eca\u5929\u7684\u4f9d\u8d56\u5305\u8def\u5f84\u653e\u5728\u7cfb\u7edf\u8def\u5f84\u524d\u9762\uff0c\u4fdd\u8bc1\u5148\u5f15\u7528\u7684\u662f\u7f16\u8bd1\u5305\u800c\u4e0d\u662f\u7cfb\u7edf\u5305 \u4e0b\u8f7dcaffe\u6e90\u7801 git clone https : // github . com / bvlc / caffe . git git clone https : // github . com / twtygqyy / caffe - augmentation . git # \u66f4\u5e38\u7528\uff0c\u6709\u6570\u636e\u589e\u5f3a\u90e8\u5206 cd caffe / mv Makefile . config . example Makefile . config \u6267\u884cmake # \u7f16\u5199MakeFile.config\uff08cp MakeFile.config.example MakeFile.config\uff09 # MakeFile\u7684\u7b2c\u4e8c\u884c\u6307\u5411\u7684\u662f\u8981make\u7684\u6587\u4ef6\u540d\u79f0\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u66f4\u6539(CONFIG_FILE:=Makefile.config) make clean make all -j make pycaffe # \u4f7f\u5f97caffe\u7684python\u63a5\u53e3\u6c38\u4e45\u751f\u6548 vim /etc/profile export PYTHONPATH = /root/ $CAFFE_ROOT /python: $PYTHONPATH source /etc/profile # make all\u4e4b\u524d\u8981\u4fee\u6539MakeFile.config ## Refer to http://caffe.berkeleyvision.org/installation.html # Contributions simplifying and improving our build system are welcome! # cuDNN acceleration switch (uncomment to build with cuDNN). USE_CUDNN : = 1 # \u4f7f\u7528GPU\uff0c\u4e14\u5b89\u88c5\u4e86cudnn\u540e\u5f00\u542f # CPU-only switch (uncomment to build without GPU support). # CPU_ONLY := 1 # \u53ea\u4f7f\u7528CPU\u7f16\u8bd1 # uncomment to disable IO dependencies and corresponding data layers USE_OPENCV : = 1 # \u4e00\u822c\u4f7f\u7528opencv\uff0c\u628a\u8fd9\u4e2a\u5f00\u542f\u5c31\u884c # \u4e0b\u9762\u8fd9\u4e24\u4e2a\u8868\u793a\u9009\u62e9caffe\u7684\u6570\u636e\u7ba1\u7406\u7b2c\u4e09\u65b9\u5e93\uff0c\u4e24\u8005\u90fd\u4e0d\u6253\u5f00\u9ed8\u8ba4\u7528\u7684\u662fLMDB\uff1almdb\u7684\u5185\u5b58\u6d88\u8017\u662fleveldb\u76841.1\u500d\uff0c\u4f46\u662flmdb\u7684\u901f\u5ea6\u6bd4leveldb\u5feb10%\u81f315%\uff0c\u66f4\u91cd\u8981\u7684\u662flmdb\u5141\u8bb8\u591a\u79cd\u8bad\u7ec3\u6a21\u578b\u540c\u65f6\u8bfb\u53d6\u540c\u4e00\u7ec4\u6570\u636e\u96c6\uff0c\u6240\u4ee5\u9ed8\u8ba4\u9009lmdb USE_LEVELDB : = 1 # USE_LMDB := 0 # uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary) # You should not set this flag if you will be reading LMDBs with any # possibility of simultaneous read and write # ALLOW_LMDB_NOLOCK := 1 # \u6253\u5f00\u8fd9\u4e2a\u6ce8\u91ca\u662f\u5f53\u9700\u8981\u8bfb\u53d6LMDB\u6587\u4ef6\u65f6\uff0c\u9ed8\u8ba4\u4e0d\u6253\u5f00\uff0c\u6240\u4ee5\u4e0d\u53d6\u6d88\u6ce8\u91ca # Uncomment if you're using OpenCV 3 OPENCV_VERSION : = 3 # \u7528`pkg-config --modversion opencv`\u547d\u4ee4\u67e5\u770bopencv\u7248\u672c # To customize your choice of compiler, uncomment and set the following. # N.B. the default for Linux is g++ and the default for OSX is clang++ # CUSTOM_CXX := g++ # linux\u7cfb\u7edf\u4e00\u822c\u7528\u5f97\u90fd\u662fg++\u7f16\u8bd1\u5668 # CUDA directory contains bin/ and lib/ directories that we need. CUDA_DIR : = /usr/local/cuda # \u4f60\u53ef\u4ee5\u4fee\u6539\u4f60\u7684cuda\u5b89\u88c5\u76ee\u5f55 # On Ubuntu 14.04, if cuda tools are installed via # \"sudo apt-get install nvidia-cuda-toolkit\" then use this instead: # CUDA_DIR := /usr # CUDA architecture setting: going with all of them. # For CUDA < 6.0, comment the *_50 through *_61 lines for compatibility. # For CUDA < 8.0, comment the *_60 and *_61 lines for compatibility. # \u8fd9\u4e9b\u90fd\u662f\u6307GPU\u7b97\u529b\uff0c6.0\u4ee5\u4e0b\u7684\u7248\u672c\u4e0d\u652f\u6301\u00d7_50\u7684\u8ba1\u7b97\u80fd\u529b:http://www.tuicool.com/articles/qUN322z # \u73b0\u5728\u7528\u7684cuda9.0/cuda10.0\u53ca\u4ee5\u4e0a\u4e00\u822c\u90fd\u662f\u4ecesm_30\u5f00\u59cb CUDA_ARCH : = -gencode arch = compute_20,code = sm_20 \\ -gencode arch = compute_20,code = sm_21 \\ -gencode arch = compute_30,code = sm_30 \\ -gencode arch = compute_35,code = sm_35 \\ -gencode arch = compute_50,code = sm_50 \\ -gencode arch = compute_52,code = sm_52 \\ -gencode arch = compute_60,code = sm_60 \\ -gencode arch = compute_61,code = sm_61 \\ -gencode arch = compute_61,code = compute_61 # BLAS choice: # atlas for ATLAS (default) # mkl for MKL # open for OpenBlas # BLAS\u8fd9\u4e2a\u503c\u5982\u679c\u7528\u7684\u662fatlas\u8ba1\u7b97\u5e93\u5219\u8d4b\u503cATLAS\uff0cmkl\u8ba1\u7b97\u5e93\u5219\u7528MKL\u8d4b\u503c\uff0cOpenBlas\u5219\u8d4b\u503copen BLAS : = atlas # Custom (MKL/ATLAS/OpenBLAS) include and lib directories. # Leave commented to accept the defaults for your choice of BLAS # (which should work)! # BLAS_INCLUDE := /path/to/your/blas # BLAS_LIB := /path/to/your/blas # Homebrew puts openblas in a directory that is not on the standard search path # BLAS_INCLUDE := $(shell brew --prefix openblas)/include # BLAS_LIB := $(shell brew --prefix openblas)/lib # This is required only if you will compile the matlab interface. # MATLAB directory should contain the mex binary in /bin. # MATLAB_DIR := /usr/local # MATLAB_DIR := /Applications/MATLAB_R2012b.app # NOTE: this is required only if you will compile the python interface. # We need to be able to find Python.h and numpy/arrayobject.h. #PYTHON_INCLUDE := /usr/include/python2.7 \\ # /usr/lib/python2.7/dist-packages/numpy/core/include # Anaconda Python distribution is quite popular. Include path: # Verify anaconda location, sometimes it's in root. # python\u5b89\u88c5\u4f4d\u7f6e ANACONDA_HOME : = $( HOME ) /anaconda3 PYTHON_INCLUDE : = $( ANACONDA_HOME ) /include \\ $( ANACONDA_HOME ) /include/python3.6m \\ $( ANACONDA_HOME ) /lib/python3.6m/site-packages/numpy/core/include # Uncomment to use Python 3 (default is Python 2) # PYTHON_LIBRARIES := boost_python3 python3.5m # PYTHON_INCLUDE := /usr/include/python3.5m \\ # /usr/lib/python3.5/dist-packages/numpy/core/include # We need to be able to find libpythonX.X.so or .dylib. # PYTHON_LIB := /usr/lib PYTHON_LIB : = $( ANACONDA_HOME ) /lib # python\u5e93\u4f4d\u7f6e # Homebrew installs numpy in a non standard path (keg only) # PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include # PYTHON_LIB += $(shell brew --prefix numpy)/lib # Uncomment to support layers written in Python (will link against Python libs) # WITH_PYTHON_LAYER := 1 # Whatever else you find you need goes here. INCLUDE_DIRS : = $( PYTHON_INCLUDE ) /usr/local/include LIBRARY_DIRS : = $( PYTHON_LIB ) /usr/local/lib /usr/lib # If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies # INCLUDE_DIRS += $(shell brew --prefix)/include # LIBRARY_DIRS += $(shell brew --prefix)/lib # NCCL acceleration switch (uncomment to build with NCCL) # https://github.com/NVIDIA/nccl (last tested version: v1.2.3-1+cuda8.0) # USE_NCCL := 1 # \u5f00\u542f\u591aGPU\u8bad\u7ec3\uff0c\u8fd9\u4e2a\u524d\u63d0\u662f\u7cfb\u7edf\u8981\u88c5\u6709nccl # Uncomment to use `pkg-config` to specify OpenCV library paths. # (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.) # USE_PKG_CONFIG := 1 # N.B. both build and distribute dirs are cleared on `make clean` BUILD_DIR : = build DISTRIBUTE_DIR : = distribute # Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171 # DEBUG := 1 # The ID of the GPU that 'make runtest' will use to run unit tests. TEST_GPUID : = 0 # \u6240\u7528\u7684gpu\u7684ID\u7f16\u53f7 # enable pretty build (comment to see full commands) Q ? = @ \u5e38\u89c1\u7f16\u8bd1\u9519\u8bef\u96c6\u9526 \u00b6 caffe\u7f16\u8bd1\u9519\u8befundefined reference toTIFFIsTiled@LIBTIFF_4.0' \u5206\u7c7bLMDB\u8bad\u7ec3\u96c6\u5236\u4f5c \u00b6 \u6269\u5c551 \u5206\u7c7b\u591a\u6807\u7b7eLMDB\u5236\u4f5c \u6269\u5c552: \u5355\u901a\u9053\u7070\u5ea6\u56fe\u7247\u600e\u4e48fine-tune 3\u901a\u9053\u6a21\u578b :\u5176\u5b9e\u5c31\u662f\u628a\u7b2c\u4e00\u5c42\u5377\u79ef\u540d\u79f0\u66f4\u6539\u5373\u53ef\uff0c\u8be5\u5c42\u4f1a\u88ab\u968f\u673a\u521d\u59cb\u5316\u3002 \u6269\u5c553 : caffe labelSmooth\u5b9e\u73b0 \u56fe\u7247\u76ee\u5f55\u683c\u5f0f \u535a\u5ba2 \u91cd\u547d\u540d:\u9632\u6b62\u4e2d\u6587\u5e72\u6270 import os import shutil import random #\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u6539\u540d ToRename_train = '/home/usr/dataset/train_data' ToRename_test = '/home/usr/dataset/test_data' # subDict\u4e3a\u5b50\u76ee\u5f55\u7684\u6587\u4ef6\u5939\u540d\uff0c\u9700\u8981\u624b\u52a8\u586b\u5199 subDict = [ 'ao_plate' , 'black_plate' , 'blue_plate' , 'doubleYellow_plate' , 'gang_plate' , 'gua_plate' , 'jiaolian_plate' , 'jing_plate' , 'lingshiguan_plate' , 'newEnergy_plate' , 'nongyong_plate' , 'yellow_plate' ] for i in range ( len ( subDict )): ToRename_train1 = os . path . join ( ToRename_train , subDict [ i ]) ToRename_test1 = os . path . join ( ToRename_test , subDict [ i ]) if not os . path . exists ( ToRename_train1 ) or not os . path . exists ( ToRename_test1 ): raise Exception ( 'ERROR' ) files_train = list ( os . listdir ( ToRename_train1 )) random . shuffle ( files_train ) files_test = list ( os . listdir ( ToRename_test1 )) random . shuffle ( files_test ) for s in range ( len ( files_train )): oldname = os . path . join ( ToRename_train1 , files_train [ s ]) # newname\u4e3a\u65b0\u7684\u6587\u4ef6\u540d newname = ToRename_train1 + '/newname_train_' + str ( s ) + '.jpg' os . rename ( oldname , newname ) for s in range ( len ( files_test )): oldname = os . path . join ( ToRename_test1 , files_test [ s ]) # newname\u4e3a\u65b0\u7684\u6587\u4ef6\u540d newname = ToRename_test1 + '/newname_test_' + str ( s ) + '.jpg' os . rename ( oldname , newname ) \u751f\u6210train.txt\u548ctest.txt import os import shutil import random # \u5f62\u6210train\u548ctest.txt\u6587\u4ef6 # \u9700\u8981\u66f4\u6362train_path\uff0ctest_path\u548crestoreFile train_path = '/home/usr/dataset/train_data' test_path = '/home/usr/dataset/test_data' # \u6587\u4ef6\u5939\u4e0b\u7684\u5b50\u76ee\u5f55\u540d\u79f0 subPath = [ 'ao_plate' , 'black_plate' , 'blue_plate' , 'doubleYellow_plate' , 'gang_plate' , 'gua_plate' , 'jiaolian_plate' , 'jing_plate' , 'lingshiguan_plate' , 'newEnergy_plate' , 'nongyong_plate' , 'yellow_plate' ] # \u751f\u6210\u7684train.txt\u6216\u8005test.txt\u5b58\u653e\u7684\u4f4d\u7f6e restoreFile = '/home/usr/dataset/' # \u751f\u6210train.txt for i in range ( len ( subPath )): train_path1 = os . path . join ( train_path , subPath [ i ]) if not os . path . exists ( train_path1 ): raise Exception ( 'error' ) restoreFile_train = os . path . join ( restoreFile , 'train.txt' ) with open ( restoreFile_train , 'a' ) as f : files = os . listdir ( train_path1 ) for s in files : f . write ( os . path . join ( subPath [ i ], s ) + ' ' + str ( i ) + ' \\n ' ) # \u5b58\u50a8\u683c\u5f0fclass_name/x.jpg # \u751f\u6210test.txt for i in range ( len ( subPath )): test_path1 = os . path . join ( test_path , subPath [ i ]) if not os . path . exists ( test_path1 ): raise Exception ( 'error' ) restoreFile_test = os . path . join ( restoreFile , 'test.txt' ) with open ( restoreFile_test , 'a' ) as f : files = os . listdir ( test_path1 ) for s in files : f . write ( os . path . join ( subPath [ i ], s ) + ' ' + str ( i ) + ' \\n ' ) \u751f\u6210LMDB # caffe/examples/imagenet/create_imagenet.sh \u62ff\u51fa\u8be5\u6587\u4ef6\u5e76\u4fee\u6539\u8fd0\u884c\u5373\u53ef # \u4e0a\u9762\u56db\u4e2a\u6587\u4ef6\u5b58\u50a8\u6587\u4ef6\u5b58\u653e\u4f4d\u7f6e:/home/dengshunge/Desktop/convertLMDB #!/usr/bin/env sh # Create the imagenet lmdb inputs # N.B. set the path to the imagenet train + val data dirs set -e # \u751f\u6210\u7684LMDB\u6587\u4ef6\u5b58\u653e\u7684\u4f4d\u7f6e EXAMPLE = /home/dengshunge/Desktop/convertLMDB # train.txt\u548ctest.txt\u6587\u4ef6\u653e\u7f6e\u7684\u4f4d\u7f6e DATA = /home/dengshunge/Desktop/convertLMDB # caffe/build/tools\u7684\u4f4d\u7f6e TOOLS = /home/dengshunge/caffe/build/tools # \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u4f4d\u7f6e\uff0c\u8bb0\u5f97\uff0c\u6700\u540e\u7684 '/' \u4e0d\u8981\u6f0f\u4e86 # \u6ce8\u610f\u8fd9\u4e2a\u540e\u9762\u76f4\u63a5\u62fc\u63a5train.txt/val.txt\u91cc\u9762\u7684\u6bcf\u884c\u8def\u5f84\uff0c\u6ce8\u610f\u8def\u5f84\u95ee\u9898 TRAIN_DATA_ROOT = /home/dengshunge/Desktop/convertLMDB/data/train_data/ VAL_DATA_ROOT = /home/dengshunge/Desktop/convertLMDB/data/test_data/ # Set RESIZE=true to resize the images to 256x256. Leave as false if images have # already been resized using another tool. # \u5982\u679c\u9700\u8981\u7ed9\u8be5\u8f93\u5165\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u5c06RESIZE\u8bbe\u7f6e\u6210true\uff0c\u5e76\u56fe\u7247\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6 RESIZE = true if $RESIZE ; then RESIZE_HEIGHT = 30 RESIZE_WIDTH = 120 else RESIZE_HEIGHT = 0 RESIZE_WIDTH = 0 fi if [ ! -d \" $TRAIN_DATA_ROOT \" ] ; then echo \"Error: TRAIN_DATA_ROOT is not a path to a directory: $TRAIN_DATA_ROOT \" echo \"Set the TRAIN_DATA_ROOT variable in create_imagenet.sh to the path\" \\ \"where the ImageNet training data is stored.\" exit 1 fi if [ ! -d \" $VAL_DATA_ROOT \" ] ; then echo \"Error: VAL_DATA_ROOT is not a path to a directory: $VAL_DATA_ROOT \" echo \"Set the VAL_DATA_ROOT variable in create_imagenet.sh to the path\" \\ \"where the ImageNet validation data is stored.\" exit 1 fi echo \"Creating train lmdb...\" # EXAMPLE/ilsvrc12_train_lmdb\u4e2d\u7684ilsvrc12_train_lmdb\u4e3aLMDB\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u6309\u9700\u66f4\u6539 # DATA/train.txt\u8981\u4e0e\u81ea\u5df1\u751f\u6210train.txt\u540d\u5b57\u76f8\u5bf9\u5e94\uff0c\u4e0d\u7136\u5f97\u66f4\u6539 # test lmdb\u540c\u7406 GLOG_logtostderr = 1 $TOOLS /convert_imageset \\ --resize_height = $RESIZE_HEIGHT \\ --resize_width = $RESIZE_WIDTH \\ --shuffle \\ $TRAIN_DATA_ROOT \\ $DATA /train.txt \\ $EXAMPLE /train_lmdb echo \"Creating test lmdb...\" GLOG_logtostderr = 1 $TOOLS /convert_imageset \\ --resize_height = $RESIZE_HEIGHT \\ --resize_width = $RESIZE_WIDTH \\ --shuffle \\ $VAL_DATA_ROOT \\ $DATA /test.txt \\ $EXAMPLE /test_lmdb echo \"Done.\" # \u751f\u6210\u7684LMDB\u5927\u5c0f\u5982\u679c\u53ea\u6709\u5341\u51e0KB\u7684\u8bdd\uff0c\u6709\u53ef\u80fd\u662f\u751f\u6210\u5931\u8d25\u4e86\u3002\u53ef\u4ee5\u770b\u5230\u751f\u6210LMDB\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u6253\u4e71\u6570\u636e ./ create_imagenet . sh - shuffle = true # \u6ce8\u610f\uff0c\u8fd9\u6709\u8bb8\u591a\u53c2\u6570\u53ef\u9009 # \u5e38\u7528\u53c2\u6570 - shuffle = true / false # default=false:\u6253\u4e71\u539f\u6709\u6570\u636e\u7684\u987a\u5e8f\uff0c\u751f\u6210\u4e00\u4e2a\u4e71\u5e8f\u7684\u6570\u636e - gray = true / false # default=false\uff1a\u662f\u5426\u8f6c\u6362\u6210\u7070\u5ea6\u56fe - backend = \"lmdb\" # default=\"lmdb\"\u8f6c\u6362\u683c\u5f0f \u6709leveldb\uff0clmdb\u4e24\u79cd\u9009\u62e9 - resize_height = 0 # default=0\uff08type:int32\uff09 - resize_width = 0 # default=0\uff08type:int32\uff09 - encoded = true / false # default=false\uff0cTure:\u7f16\u7801\u56fe\u7247\u5c06\u4f1a\u5b58\u50a8\u5230datum - encode_type = \"\" # default=\"\",\u6211\u4eec\u7528<'png','jpg',....>\u6765\u7f16\u7801\u56fe\u7247 \u5236\u4f5c\u5747\u503c\u6587\u4ef6 \u5982\u679c\u4e0d\u5236\u4f5c\u5747\u503c\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u7684 transform_param \u4e0a\u8bbe\u7f6e mean_value=xxx \u6765\u4ee3\u66ff layer { name : \"data\" type : \"Data\" top : \"data\" top : \"label\" include { phase : TRAIN } transform_param { mirror : true mean_value : 127.5 scale : 0.0078125 force_gray : true } } \u4e3a\u4ec0\u4e48\u9700\u8ba9\u56fe\u7247\u51cf\u53bb\u5747\u503c\u5462\uff1f \u56fe\u50cf\u7684\u7a33\u5b9a\u6027(\u964d\u4f4e\u6ce2\u52a8\u6027)\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5206\u7c7b\u7cbe\u5ea6 \u51cf\u53bb\u5747\u503c\u4e00\u822c\u4f1a\u8ba9\u4eae\u5ea6\u4e0b\u964d\uff0c\u4f46\u662f\u4eae\u5ea6\u5176\u5b9e\u5bf9\u56fe\u50cf\u5206\u7c7b\u6765\u8bf4\uff0c\u4e0d\u90a3\u4e48\u91cd\u8981 \u53e6\u5916\u4e00\u822c\u4f1a\u9009\u62e9\u5bf9\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316\u5904\u7406\uff0c\u4f46\u662f\u8ba1\u7b97\u56fe\u50cf\u65b9\u5dee\u662f\u4e48\u6709\u610f\u4e49\u7684\uff0c\u6240\u4ee5\u4f55\u4e0d\u9009\u62e9\u66f4\u52a0\u7b80\u5355\u7684\u5747\u503c\u89c4\u6574\u7684\u529e\u6cd5 \u5747\u503c\u6587\u4ef6\u53ea\u662f\u9488\u5bf9\u8bad\u7ec3\u96c6\u7684\uff0c\u4e0d\u9488\u5bf9\u9a8c\u8bc1\u96c6 # caffe/examples/imagenet/make_imagenet_mean.sh #!/usr/bin/env sh # Compute the mean image from the imagenet training lmdb # N.B. this is available in data/ilsvrc12 # train_lmdb\u7684LMDB\u6587\u4ef6\u5b58\u653e\u7684\u4f4d\u7f6e EXAMPLE =/ home / dengshunge / Desktop / convertLMDB # DATA\u4e3a\u6700\u7ec8\u8981\u751f\u6210\u7684\u5747\u503c\u6587\u4ef6\u5b58\u653e\u8def\u5f84 DATA =/ home / dengshunge / Desktop / convertLMDB # caffe/build/tools\u7684\u4f4d\u7f6e TOOLS =/ home / dengshunge / caffe / build / tools $ TOOLS / compute_image_mean $ EXAMPLE / train_lmdb \\ $ DATA / your_data_mean . binaryproto echo \"Done.\" \u663e\u793aLMDB\u56fe\u7247(key=img_name,value=img_data) import caffe import os import lmdb import numpy as np import matplotlib.pyplot as plt def readlmdb ( path , visualize = False ): env = lmdb . open ( path , readonly = True , lock = False ) txn = env . begin () datum = caffe . proto . caffe_pb2 . Datum () x , y = [],[] for key , value in txn . cursor (): # \u8f6c\u6362\u4e3adatum datum . ParseFromString ( value ) # \u8bfb\u53d6datum\u6570\u636e img_data = np . array ( bytearray ( datum . data )) \\ . reshape ( datum . channels , datum . height , datum . width ) print ( img_data . shape ) # (channel,height,width) x . append ( img_data ) y . append ( datum . label ) # \u7c7b\u522b\u6807\u7b7e\uff0c0/1/... if visualize : img_data = img_data . transpose ([ 1 , 2 , 0 ]) #(h,w,c) img_data = img_data [:, :, :: - 1 ] # BGR-->RGB plt . imshow ( img_data ) plt . show () print ( datum . label ) \u68c0\u6d4bLMDB\u8bad\u7ec3\u96c6\u5236\u4f5c \u00b6 \u751f\u6210train.txt\u548ctest.txt # \u5de6\u8fb9\u662f\u56fe\u7247\u7684\u5730\u5740\uff0c\u53f3\u8fb9\u662f\u5bf9\u5e94\u56fe\u7247\u7684xml\u5730\u5740\uff0c\u4e24\u8005\u7528\u7a7a\u683c\u76f8\u8fde,\u8fd9\u4e2a\u5730\u5740\u662f\u4e00\u4e2a\u76f8\u5bf9\u5730\u5740\uff0c\u4e4b\u540e\u4f1a\u4e0e\"create_data.sh\"\u4e2d\u7684\u201cdata_root_dir\u201d\u7ed3\u5408\uff0c\u751f\u6210\u7edd\u5bf9\u5730\u5740\u3002 VOC2007/JPEGImages/00001.jpg VOC2007/Annotations/00001.xml VOC2007/JPEGImages/00002.jpg VOC2007/Annotations/00002.xml VOC2007/JPEGImages/00003.jpg VOC2007/Annotations/00003.xml \u751f\u6210labelmap.prototxt\u548ctest_name_size.txt # labelmap.prototxt:\u591a\u4e2aitem\u7ec4\u6210\u7684\uff0clabel\u4e3a0\u7684item\u662f\u80cc\u666f\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u4f60\u81ea\u5df1\u6807\u6ce8\u7684label\uff0clabel\u7684\u7f16\u53f7\u6700\u597d\u8fde\u7eed\uff0c\u800c\u4e14\u6bcf\u4e2alabel\u5bf9\u5e94\u7684Name\u9700\u8981\u548cxml\u91cc\u9762\u7684name\u4e00\u81f4\u3002 item { name: \"none_of_th_above\" label: 0 display_name: \"background\" } item { name: \"aeroplane\" label: 1 display_name: \"aeroplane\" } item { name: \"bicycle\" label: 2 display_name: \"bicycle\" } # test_name_size.txt:\u75313\u5217\u7ec4\u6210\uff0c\u7b2c\u4e00\u5217\u662f\u56fe\u7247\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u3001\u4e09\u5217\u5206\u522b\u662f\u56fe\u7247\u7684\u9ad8\u548c\u5bbd\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u56fe\u7247\u7684\u540d\u79f0\u6ca1\u6709\u540e\u7f00\u540d,\u4e0d\u77e5\u9053\u6709\u4ec0\u4e48\u7528\uff0c\u4e0b\u9762\u51fd\u6570\u8c03\u7528\u4e2d\uff0c\u5e76\u6ca1\u6709\u5f15\u5165\u8fd9\u4e2a\u6587\u4ef6 00001 500 353 00002 500 353 00003 500 353 \u751f\u6210LMDB \u770b\u535a\u5ba2\u5427 cur_dir = $( cd $( dirname ${ BASH_SOURCE [0] } ) && pwd ) # caffe\u7684\u8def\u5f84 root_dir = \"/home/dengshunge/Tiny-DSOD-master\" # \u8fd9\u91cc\u4e3b\u8981\u662f\u7528\u4e8e\u8c03\u7528\u8fd9\u4e2a\u8def\u5f84\u4e0b\u7684scripts/create_annoset.py cd $root_dir redo = 1 # \u6570\u636e\u7684\u6839\u76ee\u5f55\uff0c\u4e0etxt\u7684\u6587\u4ef6\u7ed3\u5408 data_root_dir = \"/home/dengshunge/Desktop/data\" # trainval.txt\u548ctest.txt\u7684\u8def\u5f84 txtFileDir = \"/home/dengshunge/Desktop/LMDB\" # LMDB\u5b58\u50a8\u4f4d\u7f6e lmdbFile = \"/home/dengshunge/Desktop/LMDB/lmdb\" # LMDB\u5b58\u50a8\u4f4d\u7f6e\u7684\u8f6f\u8fde\u63a5 lmdbLink = \"/home/dengshunge/Desktop/LMDB/lmdbLink\" # mapfile\u4f4d\u7f6e mapfile = \"/home/dengshunge/Desktop/LMDB/labelmap.prototxt\" # \u4efb\u52a1\u7c7b\u578b anno_type = \"detection\" # \u683c\u5f0f db = \"lmdb\" # \u56fe\u7247\u5c3a\u5bf8\uff0c\u82e5width,height=0,0\uff0c\u8bf4\u660e\u6309\u539f\u59cb\u56fe\u7247\u8f93\u5165\u5c3a\u5bf8\uff0c\u5426\u5219resize\u5230(width,height) min_dim = 0 max_dim = 0 width = 300 height = 300 extra_cmd = \"--encode-type=jpg --encoded\" if [ $redo ] then extra_cmd = \" $extra_cmd --redo\" fi for subset in test trainval do python3 $root_dir /scripts/create_annoset.py --anno-type = $anno_type --label-map-file = $mapfile --min-dim = $min_dim --max-dim = $max_dim --resize-width = $width --resize-height = $height --check-label $extra_cmd $data_root_dir $txtFileDir / $subset .txt $lmdbFile / $subset \"_\" $db $lmdbLink done \u8bad\u7ec3\u8fc7\u7a0b\u7b80\u4ecb \u00b6 run_train.sh\u7f16\u5199 CAFFE_HOME = /home/usr/caffe # caffe\u6839\u76ee\u5f55 SOLVER = ./solver.prototxt # solver.prototxt\u6587\u4ef6\u8def\u5f84 WEIGHTS = ./weights/init.caffemodel # \u521d\u59cb\u5316\u6a21\u578b\u8def\u5f84 LOG = ./logs/log- 'train +%Y-%m-%d-%H-%S' .log $CAFFE_HOME /build/tools/caffe train \\ --solver = $SOLVER \\ # \u5fc5\u987b\u53c2\u6570 --weights = $WEIGHTS \\ # \u53ef\u9009\u53c2\u6570\uff0c\u6b64\u5904\u52a0\u8f7d\u8fdb\u884cfinetune --gpu = 0 ,1,2,3 \\ 2 > & 1 | tee $LOG # 1 \u8868\u793astdout\u6807\u51c6\u8f93\u51fa\uff1b2 \u8868\u793astderr\u6807\u51c6\u9519\u8bef\uff1b2>&1:\u628a\u6807\u51c6\u9519\u8bef\u91cd\u5b9a\u5411\u5230\u6807\u51c6\u8f93\u51fa,\u6b64\u65f6\u53ea\u662f\u8f93\u51fa\u5230\u7a97\u53e3\u4e0a\u800c\u5df2\uff1btee\u4f1a\u628a\u8f93\u51fa\u7684\u5185\u5bb9\u5199\u5165\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002 # \u65ad\u70b9\u7ee7\u7eed\u8bad\u7ec3 --snapshot = xx.solverstate # \u6a21\u578b\u4fdd\u5b58\u6709\u4e24\u4e2a\u6a21\u578b(.caffemodel+.solverstate)\uff0c\u7528snapshot\u4ee3\u66ffweights\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u65ad\u70b9\u7eed\u8bad\u4e86 run_test.sh\u7f16\u5199 CAFFE_HOME = /home/usr/caffe # caffe\u6839\u76ee\u5f55 MODEL = ./train_val.prototxt # \u4f60\u8bad\u7ec3\u65f6\u7684net\u6587\u4ef6 WEIGHTS = ./weights/final.caffemodel # \u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8def\u5f84 LOG = ./logs/log- 'test +%Y-%m-%d-%H-%S' .log $CAFFE_HOME /build/tools/caffe test \\ --model = $MODEL \\ --weights = $WEIGHTS \\ # \u53ef\u9009\u53c2\u6570\uff0c\u6b64\u5904\u52a0\u8f7d\u8fdb\u884cfinetune --gpu = 0 \\ 2 > & 1 | tee $LOG build/tools/caffe\u53c2\u6570\u8be6\u89e3 caffe <command> <args> # caffe\u547d\u4ee4\u6267\u884c\u683c\u5f0f # command\u547d\u4ee4 1 ) train\uff1a\u8bad\u7ec3\u6216finetune\u6a21\u578b\uff08model ) 2 ) test \uff1a\u6d4b\u8bd5\u6a21\u578b 3 ) device_query\uff1a\u663e\u793agpu\u4fe1\u606f 4 ) time\uff1a\u663e\u793a\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4 # args --solver = xx_solver.protxt # \u5fc5\u9009solver\u914d\u7f6e\u6587\u4ef6 --gpu = 0 ,1 # \u53ef\u9009\u53c2\u6570\uff0c-gpu all\uff1a\u8868\u793a\u4f7f\u7528\u6240\u6709\u7684GPU --snapshot = xx.solverstate # \u65ad\u70b9\u7eed\u8bad(\u6062\u590d\u8bad\u7ec3)\uff0c\u548c--weights\u53ea\u80fd\u4fdd\u7559\u4e00\u4e2a --weights = xx_init.caffemodel # \u9884\u8bad\u7ec3\u597d\u7684\u6743\u91cd\u6765fine-tuning\u6a21\u578b\uff0c\u4e0d\u80fd\u548csnapshot\u540c\u65f6\u4f7f\u7528 --iterations = 50 # \u8fed\u4ee3\u6b21\u6570\uff0c\u9ed8\u8ba450 --model = xx_train_test.prototxt # \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u4ee5\u5728solver\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a --sighup_effect = snapshot ( \u9ed8\u8ba4 ) /stop/none # \u8bbe\u5b9a\u5f53\u7a0b\u5e8f\u53d1\u751f\u6302\u8d77\u4e8b\u4ef6\u65f6\uff0c\u6267\u884c\u7684\u64cd\u4f5c --sigint_effect = stop ( \u9ed8\u8ba4 ) /snapshot/none # \u8bbe\u5b9a\u5f53\u7a0b\u5e8f\u53d1\u751f\u952e\u76d8\u4e2d\u6b62\u4e8b\u4ef6\u65f6\uff08ctrl+c), \u6267\u884c\u7684\u64cd\u4f5c # train\u64cd\u4f5c\u770b\u4e0a\u9762run_train.sh # test\u53c2\u6570\u64cd\u4f5c\uff0c\u7528\u4e8e\u6700\u7ec8\u7ed3\u679c\u8f93\u51fa\uff0c\u6a21\u578b\u914d\u7f6e\u6587\u4ef6\u4e2d\u53ef\u4ee5\u8bbe\u5b9a\u9700\u8981\u8f93\u5165\u7684acc\u6216\u8005loss # \u5229\u7528\u8bad\u7ec3\u597d\u4e86\u7684\u6743\u91cd\uff08-weight)\uff0c\u8f93\u5165\u5230\u6d4b\u8bd5\u6a21\u578b\u4e2d(-model)\uff0c\u7528\u7f16\u53f7\u4e3a0\u7684gpu(-gpu)\u6d4b\u8bd5100\u6b21(-iteration) ./build/tools/caffe test -model examples/mnist/lenet_train_test.prototxt -weights examples/mnist/lenet_iter_10000.caffemodel -gpu 0 -iterations 100 # time\u53c2\u6570\uff1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4 # \u5728\u5c4f\u5e55\u4e0a\u663e\u793alenet\u6a21\u578b\u8fed\u4ee310\u6b21\u6240\u4f7f\u7528\u7684\u65f6\u95f4\u3002\u5305\u62ec\u6bcf\u6b21\u8fed\u4ee3\u7684forward\u548cbackward\u6240\u7528\u7684\u65f6\u95f4\uff0c\u4e5f\u5305\u62ec\u6bcf\u5c42forward\u548cbackward\u6240\u7528\u7684\u5e73\u5747\u65f6\u95f4\u3002 ./build/tools/caffe time -model examples/mnist/lenet_train_test.prototxt -iterations 10 # device_query\uff1a\u7528\u6765\u8bca\u65adgpu\u4fe1\u606f ./build/tools/caffe device_query -gpu 0 # \u6253\u5370\u8be5GPU\u7684\u4e00\u4e9b\u4fe1\u606f tee\u7b80\u4ecb tee [ option ] ... [ file ] ... # 1.\u4e3e\u4e2a\u5c0f\u4f8b\u5b50 ping www.baidu.com # \u8fd9\u4e2a\u4f1a\u663e\u793a\u8fde\u63a5\u4fe1\u606f # 2.\u4f7f\u7528tee\u628a\u663e\u793a\u7684\u8fde\u63a5\u4fe1\u606f\u5199\u5165\u5230\u6587\u4ef6\u4e2d,\u540c\u65f6\u8f93\u51fa\u4e5f\u4f1a\u663e\u793a\u5230\u63a7\u5236\u53f0\u4e0a\uff0c\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u5b58\u5728\u5c31\u4f1a\u6e05\u7a7a\u540e\u5199\u5165 ping www.baidu.com | tee ping_baidu.log # 3.log\u6587\u4ef6\u5b58\u5728\uff0c\u4f46\u4e0d\u60f3\u6e05\u7a7a\uff0c\u53ea\u60f3\u5728\u540e\u9762\u8ffd\u52a0 ping www.baidu.com | tee -a ping_baidu.log # \u4f7f\u7528-a\u53c2\u6570\u5373\u53ef # 4.\u8f93\u51fa\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d ping www.baidu.com | tee ping.log ping_baidu.log solver.prototxt\u7f16\u5199 \u00b6 solver\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u4ea4\u66ff\u8c03\u7528\u524d\u5411\uff08forward)\u7b97\u6cd5\u548c\u540e\u5411\uff08backward)\u7b97\u6cd5\u6765\u66f4\u65b0\u53c2\u6570\uff0c\u4ece\u800c\u6700\u5c0f\u5316loss\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u79cd\u8fed\u4ee3\u7684\u4f18\u5316\u7b97\u6cd5\u3002 # solver.prototxt net: \"examples/myfile/train_val.prototxt\" # \u6307\u5b9a\u8bad\u7ec3\u7684\u7f51\u7edc\u914d\u7f6e\u6587\u4ef6 # \u4e5f\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u6d4b\u8bd5\u6a21\u578b\u6587\u4ef6\u548c\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6 #train_net: \"examples/hdf5_classification/logreg_auto_train.prototxt\" #test_net: \"examples/hdf5_classification/logreg_auto_test.prototxt\" test_iter:100 # test_iter=val\u6570\u636e\u96c6\u603b\u6837\u672c\u6570/test_layer\u5c42\u7684batchsize test_interval:500 # \u6bcf\u8bad\u7ec3xx\u6b21\u8fdb\u884c\u4e00\u6b21val\u9a8c\u8bc1 # \u4e0b\u9762\u662f\u5b66\u4e60\u7387\u8bbe\u7f6e\u548c\u5b66\u4e60\u7387\u4e0b\u964d\u7b56\u7565\uff0c\u4e0d\u540c\u7684\u4e0b\u964d\u7b56\u7565\uff0c\u53c2\u6570\u4e0d\u540c\uff0c\u5e38\u7528multistep base_lr: 0 .01 # \u901a\u5e38\u8bbe\u4e3a0.01\u6bd4\u8f83\u597d momentum: 0 .9 # \u68af\u5ea6\u4e0b\u964d\u6cd5\u4e2d\u7684\u4e00\u79cd\u52a0\u901f\u6536\u655b\u7684\u6280\u672f\uff0c\u9608\u503c\u5e38\u9009:[0.5~0.99] weight_decay: 0 .0005 # L2\u6b63\u5219\u9879(\u5bf9\u53c2\u6570\u53d6\u503c\u5e73\u65b9\u548c\u7684\u60e9\u7f5a)\uff0c\u4e3a\u4e86\u51cf\u5f31\u8fc7\u62df\u5408 lr_policy: \"multistep\" # \u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565 gamma: 0 .9 stepvalue: 5000 stepvalue: 7000 stepvalue: 8000 stepvalue: 9000 stepvalue: 9500 # type:\"SGD\" \u9ed8\u8ba4\u4f7f\u7528SGD\u4f18\u5316\u7b56\u7565\uff0c\u5982\u679c\u4f7f\u7528\u8be5\u7b56\u7565\u53ef\u4ee5\u4e0d\u5199 display:200 # \u6bcf\u8bad\u7ec3xx\u6b21\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e00\u6b21\u7ed3\u679c\uff0c0\u8868\u793a\u4e0d\u663e\u793a max_iter:50000 # \u6700\u5927\u8fed\u4ee3\u6b21\u6570 snapshot:2000 # snapshot\u7528\u4e8e\u8bbe\u7f6e\u8bad\u7ec3\u591a\u5c11\u6b21\u540e\u8fdb\u884c\u4fdd\u5b58\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u4e0d\u4fdd\u5b58 snapshot_prefix: \"examples/myfile\" # \u8bbe\u7f6e\u4fdd\u5b58\u8def\u5f84 solver_mode:GPU # CPU/GPU,\u9ed8\u8ba4\u4f7f\u7528GPU #devide_id: 0,1 # solver6\u4e2d\u4f18\u5316\u65b9\u6cd5\uff0c\u76f4\u63a5\u5728\u4e0a\u9762\u6539\u53d8type\u548c\u6dfb\u52a0\u5bf9\u5e94\u53c2\u6570\u5373\u53ef\uff0c\u4e0d\u5199\u9ed8\u8ba4\u4f7f\u7528SGD # 1.SGD type: \"SGD\" # 2.AdaDelta\uff1a\u9c81\u68d2\u7684\u5b66\u4e60\u7387\u65b9\u6cd5\uff0c\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"AdaDelta\" delta: 1e-6 # \u9700\u8981\u8bbe\u7f6edelta\u503c # 3.AdaGrad:\u81ea\u9002\u5e94\u68af\u5ea6\uff0c\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"AdaGrad\" # 4.Adam:\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"Adam\" # 5.Nesterov \u7684\u52a0\u901f\u68af\u5ea6\u6cd5\u4f5c\u4e3a\u51f8\u4f18\u5316\u4e2d\u6700\u7406\u60f3\u7684\u65b9\u6cd5\uff0c\u5176\u6536\u655b\u901f\u5ea6\u975e\u5e38\u5feb\u3002 type: \"Nesterov\" # 6.RMSProp:\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"RMSProp\" rms_decay: 0 .98 # \u9700\u8981\u8bbe\u7f6erms_decay # \u5b66\u4e60\u7387\u6539\u53d8\u7b56\u7565,\u8fd9\u4e9b\u90fd\u9700\u8981\u51e0\u4e2a\u5fc5\u987b\u53c2\u6570\uff0c\u53ea\u8981\u66f4\u6539lr_policy\u548c\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u8981\u53c2\u6570\u5373\u53ef base_lr : 0.01 gamma : 0.1 momentum : 0.9 # 1.fixed: \u4fdd\u6301base_lr\u4e0d\u53d8. lr_policy : \"fixed\" # 2.exp:base_lr * gamma ^ iter\uff0c iter\u4e3a\u5f53\u524d\u8fed\u4ee3\u6b21\u6570 lr_policy : \"exp\" # 3.inv:base_lr * (1 + gamma * iter) ^ (- power) lr_policy : \"inv\" power : 0.75 # 4.poly:\u5b66\u4e60\u7387\u8fdb\u884c\u591a\u9879\u5f0f\u8bef\u5dee, \u8fd4\u56de base_lr (1 - iter/max_iter) ^ (power) lr_policy : \"poly\" power : 0.75 # 4.sigmoid:\u5b66\u4e60\u7387\u8fdb\u884csigmod\u8870\u51cf\uff0c\u8fd4\u56de base_lr ( 1/(1 + exp(-gamma * (iter - stepsize)))) lr_policy : \"sigmoid\" stepsize : 1000 # 5.step:\u6bcf\u9694stepsize\u6b21\u5b66\u4e60\u7387*0.1\uff0c\u4e0d\u5e38\u7528\uff0c\u56e0\u4e3a\u6700\u7ec8\u7684lr\u53ef\u80fd\u4f1a\u5f88\u5c0f\u5f88\u5c0f lr_policy : \"step\" stepsize : 1000 # 6.multistep:\u9700\u8981\u8bbe\u7f6e\uff0cstepvalue,multistep\u5219\u662f\u6839\u636estepvalue\u503c\u53d8\u5316 lr_policy : \"multistep\" # \u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565 stepvalue : 5000 stepvalue : 7000 stepvalue : 8000 stepvalue : 9000 prototxt\u6587\u4ef6\u7f16\u5199 \u00b6 Prototxt\u5305\u542b\u5143\u7d20 \u5143\u7d20 \u89e3\u91ca name \u8be5net\u7684\u540d\u79f0 layer \u5c42\u7684\u89c4\u8303 layer\u5e38\u7528\u53c2\u6570 \u5143\u7d20 \u89e3\u91ca name \u5c42\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u968f\u610f\u53d6\uff0c\u4f46\u5c3d\u91cf\u548ctype\u7c7b\u4f3c\uff0c\u4f8b\u5982\uff0cinput data\u5c42\u540d\u79f0\u4e3a\u201cdata\u201d type \u5c42\u7c7b\u578b\uff1a 1.\u9876\u5c42\u8f93\u5165\u5c42\u662f: Data (\u5e38\u7528:\u8868\u6570\u636e\u6765\u6e90\u4e8eLMDB\u6216LevelDB\uff0clayer\u7684data\u53c2\u6570\u4e3adata_param{xxx};\u5982\u679c\u662fHDF5\u6570\u636e,type:\" HDF5Data \",hdft_data_param{xxx}) 2.\u89c6\u89c9type: Convolution,Pooling,InnerProduct,BatchNorm+Scale 3.\u6fc0\u6d3btype: Sigmoid,ReLU,TanH,AbsVal(\u7edd\u5bf9\u503c)\uff0cPower(\u5e42\u8fd0\u7b97)\uff0cBNLL\uff08log(1 + exp(x)) \uff09 4.\u635f\u5931type: Softmax/SoftmaxWithLoss 5.\u5176\u4ed6type: Accuracy,Reshape,Dropout top \u662f\u6307\u8be5\u5c42\u7684**\u8f93\u51fa\u7684blob\u7684\u540d\u79f0**\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u4e2ablob\u3002\u4f8b\u5982\uff0c\u5728\u8bad\u7ec3\u4e2d\uff0cinput data\u5c42\u7684\u53ea\u6709\u4e24\u4e2atop\u5206\u522b\u4e3a\u201cdata\u201d\u548c\u201clabel\u201d\uff0c\u5206\u522b\u5b58\u653e\u4e86\u6570\u636e\u548c\u6807\u7b7e\u3002 bottom \u662f\u6307\u8be5\u5c42\u7684**\u8f93\u5165\u7684blob\u7684\u540d\u79f0**\uff0cinput data\u5c42\u662f\u9876\u5c42\uff0c\u56e0\u6b64\u6ca1\u6709bottom blob\u3002\u8be5\u5c42\u7684\u8f93\u5165\u7684bottom\u4e00\u5b9a\u662f\u5b83\u7684\u4e0a\u4e00\u5c42\u7684top\u3002\u5982\u679c\u8be5\u5c42\u7684bottom\u548ctop\u76f8\u540c\uff0c\u5219\u8be5\u5c42\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5360\u7528\u4e86\u4e00\u4e2ablob\u3002 include phase:TRAIN/TEST,\u5982\u679c\u6ca1\u6709include\u53c2\u6570\uff0c\u5219\u8868\u793a\u8be5\u5c42\u65e2\u5728\u8bad\u7ec3\u6a21\u578b\u4e2d\uff0c\u53c8\u5728\u6d4b\u8bd5\u6a21\u578b\u4e2d\u3002 data_param \u5b9a\u4e49\u6570\u636e\u53c2\u6570\uff0c\u6570\u636e\u6765\u6e90\u7b49\u7b49 transform_param \u5bf9input\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u7684\u53c2\u6570\u3002 param \u5b9a\u4e49weight\u6216bias\u7684\u5b66\u4e60\u901f\u7387\u548c\u8870\u51cf\u56e0\u5b50\u53c2\u6570\u3002 lr_mult:weight\u6216bias\u7684\u5b66\u4e60\u901f\u7387 decay_mult:weight\u6216bias\u7684\u8870\u51cf\u56e0\u5b50 convolution_param \u5b9a\u4e49\u5377\u79ef\u5c42\u7684\u53c2\u6570\u3002 lrn_param \u5b9a\u4e49\u5f52\u4e00\u5316\u5c42\u7684\u53c2\u6570 pooling_param \u5b9a\u4e49pooling\u5c42\u7684\u53c2\u6570 inner_product_param \u5b9a\u4e49\u5168\u8fde\u63a5\u5c42\u7684\u53c2\u6570 dropout_param \u5b9a\u4e49Dropout\u5c42\u7684\u53c2\u6570 accuracy_param \u5b9a\u4e49Accuracy\u5c42\u7684\u53c2\u6570 train_val.prototxt name : \"VGGNet\" # \u8be5\u7f51\u7edc\u540d\u79f0\uff0clayer:\u5c42\u89c4\u8303 # \u8f93\u5165\u5c42:input_data\u5c42\u662f\u9876\u5c42\uff0c\u53ea\u6709\u4e24\u4e2a\u8f93\u51fatop\u5206\u522b\u662f\"data\"\u548c\u201clabel\u201d # \u505a\u8bad\u7ec3\u65f6\u5019\u7684\u8f93\u5165\u5c42 layer { name : \"data\" type : \"Data\" top : \"data\" top : \"label\" include { phase : TRAIN # TRAIN\u8bad\u7ec3\uff0cTEST\u6d4b\u8bd5 } # \u6570\u636e\u589e\u5f3a:https://github.com/twtygqyy/caffe-augmentation transform_param { contrast_brightness_adjustment : true # \u5f00\u542f\u5bf9\u6bd4\u5ea6\u8c03\u8282 min_contrast : 0.8 # \u6700\u5c0f\u5bf9\u6bd4\u5ea6\u4e58\u5b50 max_contrast : 1.2 # \u6700\u5927\u5bf9\u6bd4\u5ea6\u4e58\u5b50 smooth_filtering : true # \u5e73\u6ed1filter max_smooth : 6 # min_sid_min/max:\u4e0d\u9700\u8981\u518d\u8bbe\u7f6enew_height/width,\u56fe\u7247\u968f\u673aresize\u5230\u8fd9\u4e2a\u533a\u95f4 min_side_min : 256 min_side_max : 480 # train\u65f6\u4f1a\u5bf9\u5927\u4e8ecrop_size\u7684\u56fe\u7247\u8fdb\u884c\u968f\u673a\u88c1\u526a\uff0c\u800c\u5728test\u65f6\u53ea\u662f\u622a\u53d6\u4e2d\u95f4\u90e8\u5206 crop_size : 224 apply_probability : 0.5 # \u6bcf\u4e2a\u64cd\u4f5c\u88ab\u6267\u884c\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u4e3a0.5 max_color_shift : 20 # \u5728RGB\u8f74\u4e0a\u6700\u5927\u7684\u8272\u5f69\u504f\u79fb debug_params : false # \u662f\u5426\u6253\u5370\u64cd\u4f5c\u53c2\u6570\uff0c\u9ed8\u8ba4false # mean_file: \"imagenet_mean.binaryproto\" # \u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u4ee3\u66ff # BGR\u987a\u5e8f\u5747\u503c mean_value : 104 mean_value : 117 mean_value : 123 scale : 0.0078125 # 1/128 mirror : true # \u662f\u5426\u955c\u50cf\u7ffb\u8f6c } data_param { source : \"models/vggnet/vgg_train_lmdb\" #\u6ce8\u610f\u8bad\u7ec3\u96c6\u6587\u4ef6\u7684\u8def\u5f84 batch_size : 32 #\u8bad\u7ec3\u6279\u6b21\u5927\u5c0f\u6839\u636e\u81ea\u5df1\u7684\u663e\u5361\u663e\u5b58\u800c\u5b9a\uff0c\u6211\u5f00\u59cb\u8bbe\u4e3a64\u5bfc\u81f4out of memory,\u4e8e\u662f\u6539\u621032 backend : LMDB } # \u5982\u679c\u4f7f\u7528\u8fc7\u4e86\u4e0a\u9762github\u7684\u6570\u636e\u589e\u5f3a\uff0c\u53ef\u4ee5\u7528image_data_param\u4ee3\u66ffdata_param image_data_param { source : \"all-sample.txt\" batch_size : 128 new_height : 256 new_width : 256 shuffle : true root_folder : \"all-images/\" } } # \u505a\u9a8c\u8bc1\u7684\u65f6\u5019\u7684\u8f93\u5165\u5c42 layer { name : \"data\" type : \"Data\" top : \"data\" top : \"label\" include { phase : TEST # \u8fd0\u884c\u9a8c\u8bc1\u96c6\u505a\u6d4b\u8bd5 } transform_param { crop_size : 224 mean_value : 104 mean_value : 117 mean_value : 123 scale : 0.0078125 # 1/128 mirror : false } data_param { source : \"models/vggnet/vgg_val_lmdb\" #\u6ce8\u610f\u9a8c\u8bc1\u96c6\u6587\u4ef6\u7684\u8def\u5f84 batch_size : 32 backend : LMDB } } # \u5377\u79ef\u5c42 layer { name : \"conv1_1\" type : \"Convolution\" bottom : \"data\" top : \"conv1_1\" # \u5b9a\u4e49weight\u6216bias\u7684\u5b66\u4e60\u901f\u7387\u548c\u8870\u51cf\u56e0\u5b50\u53c2\u6570 param { lr_mult : 1 # \u5b66\u4e60\u7387\u7cfb\u6570\uff0c\u6700\u7ec8\u5b66\u4e60\u7387=base_lr*lr_mult,\u4e00\u822c\u5b9a\u4e49\u4e24\u4e2aw+bias } param { lr_mult : 1 } convolution_param { num_output : 64 # \u5377\u79ef\u6838\u4e2a\u6570 kernel_size : 3 # \u5377\u79ef\u6838\u5927\u5c0f\uff0c\u5982\u679ch/w\u4e0d\u4e00\u6837,\u5219kernel_h,kernel_w\u5206\u522b\u8bbe\u5b9a pad : 1 # \u9ed8\u8ba40\uff0c\u6269\u5145\u662f\u5de6\u53f3\u3001\u4e0a\u4e0b\u5bf9\u79f0\u7684\u3002pad_h,pad_w\u5206\u522b\u6307\u5b9a stride : 1 # \u6b65\u957f,\u4e5f\u53ef\u4ee5stride_h/stride_w\u5206\u522b\u8bbe\u7f6e weight_filler { # \u6743\u91cd\u521d\u59cb\u5316,\u9ed8\u8ba4'constant'(0) type : \"xavier\" # xavier\u5e38\u7528\uff0cconstant/gaussian/uniform # std:1 # \u6807\u51c6\u5dee\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a1 # mean:0 # \u5747\u503c\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b # value:0 # \u5b9a\u503c\uff1b\u5982\u679c\u662f\u201cconstant\u201d\uff0c\u5219\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b } bias_filler { # \u504f\u7f6e\u9879\u7684\u521d\u59cb\u5316 type : \"constant\" # constant\u5e38\u7528\uff0cxavier/gaussian/uniform # std:1 # \u6807\u51c6\u5dee\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a1 # mean:0 # \u5747\u503c\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b # value:0 # \u5b9a\u503c\uff1b\u5982\u679c\u662f\u201cconstant\u201d\uff0c\u5219\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b } bias_term : true # \u662f\u5426\u5f00\u542f\u504f\u7f6e\u9879\uff0c\u9ed8\u8ba4\u4e3atrue group : 1 # \u662f\u5426\u5206\u7ec4\uff0c\u9ed8\u8ba41\uff0c\u53ef\u4ee5\u6309\u9700\u5199\uff0c\u5206\u7ec4\u5377\u79ef\uff0c\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7b49 } } # ReLU\u5c42 layer { name : \"relu1_1\" type : \"ReLU\" bottom : \"conv1_1\" top : \"conv1_1\" } # pooling\u5c42 layer { name : \"pool1\" type : \"Pooling\" bottom : \"conv1_1\" top : \"pool1\" pooling_param { pool : MAX # \u9ed8\u8ba4MAX,\u8fd8\u6709\uff0cAVE, \u6216STOCHASTIC kernel_size : 2 # \u5fc5\u9009\uff0c\u4e5f\u53ef\u4ee5\u7528kernel_h\u548ckernel_w\u5206\u522b\u8bbe\u5b9a stride : 2 # \u9ed8\u8ba41\uff0c\u4e00\u822c\u8bbe\u4e3a2\uff08\u5373\u4e0d\u91cd\u53e0)\u3002\u53ef\u4ee5\u7528stride_h\u548cstride_w\u6765\u8bbe\u7f6e pad : 0 } } # \u5168\u8fde\u63a5\u5c42 layer { name : \"fc6\" type : \"InnerProduct\" bottom : \"pool1\" top : \"fc6\" param { lr_mult : 1 } param { lr_mult : 1 } inner_product_param { num_output : 4096 weight_filler { type : \"xavier\" } bias_filler { type : \"constant\" } } } # \u5168\u8fde\u63a5\u540e\u7528ReLU layer { name : \"relu6\" type : \"ReLU\" bottom : \"fc6\" top : \"fc6\" } # Dropout\u5c42 layer { name : \"drop6\" type : \"Dropout\" bottom : \"fc6\" top : \"fc6\" dropout_param { dropout_ratio : 0.5 # \u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2adropout_ratio\u5c31\u53ef\u4ee5\u4e86 } } # \u8f93\u51fa\u5206\u7c7b\u7684\u51c6\u786e\u5ea6\uff0c\u53ea\u6709test\u9636\u6bb5\u624d\u6709\uff0c\u9700\u8981\u52a0\u5165include\u53c2\u6570 layer { name : \"accuracy\" type : \"Accuracy\" bottom : \"fc6\" bottom : \"label\" top : \"accuracy\" include { phase : TEST } accuracy_param { top_k : 5 # \u5982\u679c\u6b63\u786e\u7684\u6807\u7b7e\u5728\u524dk\u4e2a\u9884\u6d4b\u7684\u6807\u7b7e\u4e2d\uff0c\u5219\u8be5\u9884\u6d4b\u88ab\u8ba4\u4e3a\u662f\u6b63\u786e\u7684 } } # \u8ba1\u7b97softmax_loss\u64cd\u4f5c layer { name : \"loss\" type : \"SoftmaxWithLoss\" bottom : \"fc6\" bottom : \"label\" top : \"loss\" } \u5176\u5b83\u5e38\u7528\u5c42 #BatchNorm\u5c42:x_norm = (x-u)/std,Scale\u5c42:y=alpha*x_norm + beta # BatchNorm\u5c42 layer { bottom : \"conv1\" top : \"conv1\" name : \"bn_conv1\" type : \"BatchNorm\" batch_norm_param { # use_global_stats\uff1a\u9ed8\u8ba4train:false\uff0ctest:True # train:false:\u4ee3\u8868\u9700\u8981\u6279\u5904\u7406\u7684\u5747\u503c\u65b9\u5dee\u8981\u53c2\u8003\u5168\u5c40\u4fe1\u606f\u6765\u66f4\u65b0 # test:true:\u4ee3\u8868\u4e0d\u4f7f\u7528\u81ea\u5df1\u5747\u503c\u65b9\u5dee\u548c\u5168\u5c40\u7684\u5747\u503c\u65b9\u5dee\u6765\u5f97\u5230\u6279\u5904\u7406\u7684\u5747\u503c\u548c\u65b9\u5dee,\u800c\u662f\u4f7f\u7528\u5168\u5c40\u5747\u503c\u65b9\u5dee,\u5373\u8bad\u7ec3\u597d\u7684\u5747\u503c\u65b9\u5dee use_global_stats : false # moving_average_fraction0.999 # \u6ed1\u52a8\u5e73\u5747\u7684\u8870\u51cf\u7cfb\u6570\uff0c\u9ed8\u8ba4\u4e3a0.999 # eps\uff1a 1e-5 # \u5206\u6bcd\u9644\u52a0\u503c\uff0c\u9632\u6b62\u9664\u4ee5\u65b9\u5dee\u65f6\u51fa\u73b0\u96640\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a1e-5 } } # Scale\u5c42 layer { bottom : \"conv1\" top : \"conv1\" name : \"scale_conv1\" type : \"Scale\" scale_param { #filler{ # value: 1 #} bias_term : true # \u662f\u5426\u4f7f\u7528\u504f\u7f6e #bias_filler{ # value: 0 #} } } # softmax\u5c42 layers { name : \"prob\" bottom : \"cls3_fc\" top : \"prob\" type : \"Softmax\" } # Reshape\u5c42 N*C*H*W-->in:64*3*28*28-->[0,0,14,-1]-->out:64*3*14*56 layer { name : \"reshape\" type : \"Reshape\" bottom : \"input\" top : \"output\" reshape_param { shape { dim : 0 # dim:0 \u8868\u793a\u7ef4\u5ea6\u4e0d\u53d8\uff0c\u5373\u8f93\u5165\u548c\u8f93\u51fa\u662f\u76f8\u540c\u7684\u7ef4\u5ea6\u3002 dim : 2 # dim:2 \u6216 dim:3 \u5c06\u539f\u6765\u7684\u7ef4\u5ea6\u53d8\u62102\u62163 dim : 3 dim : - 1 # \u8868\u793a\u7531\u7cfb\u7edf\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6 } } } cafee\u7684\u4e00\u4e9b\u7279\u6b8a\u5c42 \u00b6 slice\uff1a\u5728\u67d0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u4e0b\u6807\uff0cblob\u62c6\u5206\u6210\u51e0\u5757\u3002\u6bd4\u5982\u8981\u62c6\u5206channel\uff0c\u603b\u657050\uff0c\u4e0b\u6807\u4e3a10,20,30,40\uff0c\u90a3\u5c31\u662f\u5206\u62105\u4efd\uff0c\u6bcf\u4efd10\u4e2achannel\uff0c\u8f93\u51fa5\u4e2alayer\u3002 concat\uff1a\u5728\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u5c06\u8f93\u5165\u7684layer\u7ec4\u5408\u8d77\u6765\uff0c\u662fslice\u7684\u9006\u8fc7\u7a0b\u3002 split\uff1a\u5c06blob\u590d\u5236\u51e0\u4efd\uff0c\u5206\u522b\u7ed9\u4e0d\u540c\u7684layer\uff0c\u8fd9\u4e9b\u4e0a\u5c42layer\u5171\u4eab\u8fd9\u4e2ablob\u3002 tile\uff1a\u5c06blob\u7684\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u6269\u5927n\u500d\u3002\u6bd4\u5982\u539f\u6765\u662f1234\uff0c\u6269\u5927\u4e24\u500d\u53d8\u621012341234\u3002 reduction\uff1a\u5c06\u67d0\u4e2a\u7ef4\u5ea6\u7f29\u51cf\u81f31\u7ef4\uff0c\u65b9\u6cd5\u53ef\u4ee5\u662fsum\u3001mean\u3001asum\u3001sumsq\u3002 reshape\uff1a\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u662fmatlab\u91cc\u7684reshape\u3002 eltwise\uff1a\u5c06\u51e0\u4e2a\u540c\u6837\u5927\u5c0f\u7684layer\uff0c\u5408\u5e76\u4e3a1\u4e2a\uff0c\u5408\u5e76\u65b9\u6cd5\u53ef\u4ee5\u662f\u76f8\u52a0\u3001\u76f8\u4e58\u3001\u53d6\u6700\u5927\u3002 flatten\uff1a\u5c06\u4e2d\u95f4\u67d0\u51e0\u7ef4\u5408\u5e76\uff0c\u5176\u5b9e\u53ef\u4ee5\u7528reshape\u4ee3\u66ff\u3002 # \u4e3e\u4f8b:Tile\u5c42 layer { name : \"tile1\" type : \"Tile\" bottom : \"Features\" top : \"tile1\" tile_param { axis : 2 # \u8981\u6269\u7ef4\u7684\u7ef4\u5ea6 tiles : 2 # \u8981\u6269\u7ef4\u7684\u500d\u6570 } } # scale\u5c42,\u4e24\u4e2a\u8f93\u5165\u7684\u65f6\u5019\u662f\u70b9\u79ef\u4e58\uff0c\u8fd9\u4e2a\u4f1a\u81ea\u52a8\u5e7f\u64ad\uff0celwise\u4e5f\u53ef\u4ee5\u5b8c\u6210\u4f46\u4e0d\u4f1a\u81ea\u52a8\u5e7f\u64ad layer { name : \"inception_3a_prob_reshape\" type : \"Reshape\" bottom : \"inception_3a_1x1_up\" top : \"inception_3a_prob_reshape\" reshape_param { shape { dim : 0 dim : 0 } } } layer { name : \"inception_3a_scale\" type : \"Scale\" bottom : \"inception_3a/concat\" bottom : \"inception_3a_prob_reshape\" top : \"inception_3a/output\" scale_param { axis : 0 bias_term : false } } deploy.prototxt\u6587\u4ef6\u6539\u5199 \u00b6 1.\u6539\u5199\u8f93\u5165\u6570\u636e\u5c42 # 1.\u53bb\u9664train_val.prototxt\u7684\u6570\u636e\u8f93\u5165\u5c42 # 2.\u6dfb\u52a0test\u7684\u6570\u636e\u8f93\u5165\u5c42 layer { name : \"data\" type : \"Input\" # \u6ce8\u610f\u8be5type top : \"data\" input_param { shape : { dim : 1 dim : 3 dim : 224 dim : 224 } } } 2.\u4e2d\u95f4\u7684cv\u5c42\u65e0\u9700\u6539\u52a8 3.\u6539\u5199\u5c3e\u90e8\u5c42 # 1.\u53bb\u9664Accuracy\u548closs\u5c42(SoftmaxWithLoss\u5c42)\uff0closs\u6709\u51e0\u4e2a\u5220\u9664\u5e76\u6539\u5199\u51e0\u4e2a # 2.\u6dfb\u52a0\u9884\u6d4b\u5c42 layer { name: \"prob\" type: \"Softmax\" bottom: \"ip2\" top: \"prob\" } \u6839\u636elog\u7ed8\u5236acc+loss \u00b6 #!/usr/bin/python # -*- coding: UTF-8 -*- import os import numpy as np import matplotlib.pyplot as plt import sys import math #\u89e3\u6790\u51fa\u8bad\u7ec3\u548c\u6d4b\u8bd5\u7684log\u4fe1\u606f def get_loss_acc ( log_path ): train_iters = [] train_losses = [] test_iters = [] test_losses = [] test_accs = [] train_accs = [] learn_rates = [] log = open ( log_path , \"r\" , encoding = 'utf-8' ) for line in log : #train iter & loss if \"Iteration\" in line and \"loss\" in line : iter = int (( line . strip () . split ()[ 5 ]) . split ( \",\" )[ 0 ]) #print (iter) train_loss = float ( line . strip () . split ()[ - 1 ]) train_iters . append ( iter ) #print (train_loss) train_losses . append ( train_loss ) #test iter if \"Iteration\" in line and \"Testing\" in line : test_iter = int ( line . strip () . split ()[ 5 ][: - 1 ]) test_iters . append ( test_iter ) #test loss if \"Test net output #1\" in line : test_loss = float (( line . strip () . split ( ' = ' )[ - 1 ])[: - 6 ]) test_losses . append ( test_loss ) #test acc if \"Test\" in line and \"acc\" in line : acc = float ( line . strip () . split ( \"=\" )[ - 1 ]) test_accs . append ( acc ) # train acc if \"Train\" in line and \"acc\" in line : acc = float ( line . strip () . split ( \"=\" )[ - 1 ]) train_accs . append ( acc ) #train lr if \"lr\" in line and \"Iteration\" in line : lr = float ( line . strip () . split ( \"=\" )[ - 1 ]) learn_rates . append ( lr ) #\u6709\u65f6\u5b66\u4e60\u7387\u4e2a\u6570\u548ctrain iter\u7684\u4e2a\u6570\u4e0d\u76f8\u7b49\uff0c\u8fd9\u91cc\u4f7f\u7528\u6700\u540e\u51e0\u6b21\u7684\u5b66\u4e60\u7387\u8865\u9f50 while ( len ( learn_rates ) < len ( train_iters )): learn_rates . append ( learn_rates [ - 1 ]) return train_iters , train_losses , test_iters , test_losses , test_accs , learn_rates , train_accs #\u753b\u591a\u4e2a\u66f2\u7ebf\uff0c\u4e00\u5f20\u56fe\u4e0a\u753bacc,train loss,test loss\uff0clr def plot_muilti_figs ( log_path , log_file , log_fig ): train_iters , train_losses , test_iters , test_losses , test_accs , learn_rates , train_accs = get_loss_acc ( log_path + \"/\" + log_file ) print ( \"train iters: \" , len ( train_iters )) print ( \"train losses: \" , len ( train_losses )) print ( \"test iters: \" , len ( test_iters )) print ( \"test losses: \" , len ( test_losses )) print ( \"train accs: \" , len ( train_accs )) print ( \"test accs: \" , len ( test_accs )) print ( \"learn_rates: \" , len ( learn_rates )) fig = plt . figure ( figsize = ( 12 , 9 )) #\u753b\u5e03\u5927\u5c0f\u4e3a1200*900\uff0c\u9ed8\u8ba4\u662f800*600\uff0c\u4e5f\u5c31\u662ffigsize=(8,6) plt . subplot ( 211 ) plt . plot ( train_iters , train_losses , 'b-' , label = \"train loss\" ) plt . plot ( test_iters , test_losses , 'r-' , label = \"test loss\" ) plt . legend ( loc = 1 , ncol = 1 ) # ajust ncol to fit the space plt . grid ( True ) plt . subplot ( 223 ) plt . plot ( train_iters , train_accs , 'r-' , label = \"train_acc\" ) plt . plot ( test_iters , test_accs , 'g-' , label = \"val_acc\" ) plt . legend ( loc = 'lower right' ) #plt.legend(loc = 5, ncol = 1) # ajust ncol to fit the space plt . grid ( True ) plt . subplot ( 224 ) plt . plot ( train_iters , learn_rates , \"m\" , label = \"lr\" ) plt . legend ( loc = 1 , ncol = 1 ) # ajust ncol to fit the space plt . grid ( True ) #\u7f6e\u4e8e\u6240\u6709\u753b\u56fe\u7a0b\u5e8f\u6700\u540e\uff0c\u4f46\u5728show\u51fd\u6570\u524d,\u4f7f\u6574\u4e2a\u56fe\u66f4\u534f\u8c03\uff0c\u6587\u5b57\u4e0d\u91cd\u53e0,\u82e5\u6570\u5b57\u592a\u591a\uff0c\u53ef\u9002\u5f53\u589e\u5927\u753b\u5e03\u5c3a\u5bf8 fig . tight_layout () plt . savefig ( log_path + \"/\" + log_fig + \".png\" ) plt . show () if __name__ == \"__main__\" : log_path = os . getcwd () #\u4e0elog\u6587\u4ef6\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b log_file = sys . argv [ 1 ] #\u8bad\u7ec3log\u6587\u4ef6\u540d log_fig = sys . argv [ 2 ] #\u8981\u4fdd\u5b58\u7684\u56fe\u7247\u540d\u79f0\uff0c\u4e0d\u5e26\u540e\u7f00 plot_muilti_figs ( log_path , log_file , log_fig ) \u5e38\u7528PythonApi \u00b6 \u63a8\u7406python\u4ee3\u7801 #caffe.set_cpu() caffe . set_device ( 0 ) caffe . set_model_gpu () deploy = \"xxx.prototxt\" model = \"xxx.caffemodel\" # \u6570\u636e\u9884\u5904\u7406 transformer = caffe . io . Transformer ({ 'data' : net . blobs [ 'data' ] . data . shape }) transformer . set_transpose ( 'data' ,( 2 , 0 , 1 )) # h,w,c --> c,h,w #mu = np.load(\"xxx_mean.npy\") # mean\u6587\u4ef6 #mu = mu.mean(1).mean(1) # \u5bf9\u6240\u6709\u50cf\u7d20\u503c\u53d6\u5e73\u5747\u4ee5\u6b64\u83b7\u53d6BGR\u7684\u5747\u503c\u50cf\u7d20\u503c #transformer.set_mean('data',mu) # \u5bf9\u4e8e\u6bcf\u4e2a\u901a\u9053\uff0c\u51cf\u53bbBGR\u7684\u5747\u503c\u50cf\u7d20 transformer . set_mean ( 'data' , np . array ([ 127.5 ])) transformer . set_input_scale ( 'data' , 0.0078125 ) transformer . set_raw_scale ( 'data' , 255 ) # \u5c06\u50cf\u7d20\u503c\u4ece[0,255]-->[0,1]\u4e4b\u95f4 transformer . set_channel_swap ( 'data' ,( 2 , 1 , 0 )) # RGB->BGR image = caffe . io . load_image ( \"xxx.jpg\" ) # plt.imshow(image);plt.show() data = transformer . preprocess ( 'data' , image ) # \u524d\u5411\u4f20\u64ad net = caffe . Net ( deploy , model , caffe . TEST ) net . blobs [ 'data' ] . reshape ( 1 , 3 , data . shape [ 1 ], data . shape [ 2 ]) # data->(c,h,w) net . blobs [ 'data' ] . data [ ... ] = data out = net . forward () # \u83b7\u53d6blob\u7684\u5404\u5c42\u540d\u5b57\u4ee5\u53cashape:(n,c,h,w) for layer_name , blob in net . blobs . items (): print ( layer_name , blob . data . shape ) # \u663e\u793a\u5404\u5c42\u7684\u53c2\u6570\u4fe1\u606f\uff1a # layer_name:\u6743\u91cd\u540d # param[0]:weights->(output_channels, input_channels, filter_height, filter_width) # param[1]:bias-->(output_channels,) for layer_name , param in net . params . items (): print ( layer_name , param [ 0 ] . data . shape ) # \u663e\u793a\u5404\u5c42\u7684type for index , layer in enumerate ( net . layers ): print ( layer . type ) print ( net . _layer_names [ index ]) # \u663e\u793alayer\u7684name # \u663e\u793a\u5404\u5c42\u7279\u5f81\u56fe def show_data ( data , padsize = 1 , padval = 0 ): data -= data . min () data /= data . max () # force the number of filters to be square n = int ( np . ceil ( np . sqrt ( data . shape [ 0 ]))) padding = (( 0 , n ** 2 - data . shape [ 0 ]), ( 0 , padsize ), ( 0 , padsize )) + (( 0 , 0 ),) * ( data . ndim - 3 ) data = np . pad ( data , padding , mode = 'constant' , constant_values = ( padval , padval )) # tile the filters into an image data = data . reshape (( n , n ) + data . shape [ 1 :]) . transpose (( 0 , 2 , 1 , 3 ) + tuple ( range ( 4 , data . ndim + 1 ))) data = data . reshape (( n * data . shape [ 1 ], n * data . shape [ 3 ]) + data . shape [ 4 :]) plt . figure () plt . imshow ( data , cmap = 'gray' ) plt . axis ( 'off' ) # \u8c03\u7528 show_data ( net . blobs [ 'conv2' ] . data [ 0 ], padval = 0.5 ) # \u663e\u793a\u5168\u90e8 show_data ( net . blobs [ 'conv3' ] . data [ 0 ][ 1 : 100 ], padval = 0.5 ) # \u53d6\u524d100\u4e2a\u8fdb\u884c\u663e\u793a(\u6570\u91cf\u592a\u591a\u770b\u4e0d\u6e05,\u53ef\u4ee5\u5148\u9009\u62e9\u90e8\u5206\u663e\u793a) caffe.proto from caffe.proto import caffe_pb2 from google.protobuf import text_format import google.protobuf as pb # 1.\u52a0\u8f7d\u5904\u7406deploy.prototxt deploy = \"xx.prototxt\" with open ( deploy ) as f : train_str = f . read () # \u4e00\u6b21\u8bfb\u53d6\u6240\u6709\u5185\u5bb9 train_net = caffe_pb2 . NetParameter () # \u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684prototxt text_format . Merge ( train_str , train_net ) # \u586b\u5145\u7a7a\u7684prototxt\uff0c\u65b9\u4fbf\u4f7f\u7528python\u4ee3\u7801\u8bbf\u95ee\u5404\u5c42\u548c\u5404\u53c2\u6570 #\u7b49\u4ef7\u4e8e text_format.Parse(train_str,train_net) # \u6e05\u9664\u8be5\u6a21\u578b train_net . Clear () # \u904d\u5386prototxt\u7684\u6240\u6709\u5c42 for layer in train_net . layer : # layer.type->'xxx',layer.top/bottom->['xxx'] print ( layer . name , layer . type , layer . bottom , layer . top , layer . xx_param , .... ) # \u6253\u5370\u6bcf\u5c42\u7684\u53c2\u6570 # \u79fb\u51fa\u67d0\u4e00\u5c42 train_net . layer . remove ( train_net . layer [ 1 ]) # \u79fb\u51fa\u67d0\u5c42\u67d0\u53c2\u6570 train_net . layer [ 0 ] . include . remove ( train_net . layer [ 0 ] . include [ 0 ]) # \u4fee\u6539\u67d0\u5c42\u67d0\u53c2\u6570 train_net . layer [ 6 ] . convolution_param . bias_term = False # \u8bbe\u7f6e\u67d0\u5c42\u5377\u79ef\u7684bias_term\u4e3aFalse # \u5b58\u50a8prototxt with open ( \"save.prototxt\" , 'w' ) as fs : fs . write ( text_format . MessageToString ( train_net )) # 2.\u52a0\u8f7d\u5904\u7406caffemodel model_path = \"xxx.caffemodel\" net = caffe_pb2 . NetParameter () with open ( model_path , 'rb' ) as fp : train_net_str = fp . read () net . ParseFromString ( train_net_str ) # \u6b64\u65f6net\u5df2\u7ecf\u52a0\u8f7d\u8fdb\u6765\u4e86 # \u5b58\u50a8caffemodel net . save ( \"save.caffemodel\" ) \u81ea\u5b9a\u4e49C++\u5c42 \u00b6 \u5199 xxx.hpp \uff0c\u653e\u5230 caffe/include/caffe/layers \u5199 xxx.cpp \uff0c\u653e\u5230 caffe/src/caffe/layers \u5982\u679c\u8be5\u5c42\u6709\u53c2\u6570\u9700\u8981\u4fee\u6539 caffe/src/proto/caffe.proto \u65e0\u53c2\u6570\u5c42 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6700\u7cbe\u7b80\u7684\u5c42\uff0c\u8be5\u5c42\u6ca1\u6709\u914d\u7f6e\u53c2\u6570\uff0cdata\u4ecebottom\u8fdb\u6765\uff0c\u53c8\u4ecetop\u51fa\u53bb\uff0c\u6ca1\u505a\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\u3002\u6240\u4ee5\u65e0\u9700\u4fee\u6539 proto \u6587\u4ef6\uff0c\u628a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u540e\uff0c\u7f16\u8bd1\u5373\u53ef\u4f7f\u7528 layer { name: \"NewLayer\" type: \"New\" #\u5b9a\u4e49 bottom: \"data\" top: \"data\" } // xxx.hpp #ifndef CAFFE_NEW_LAYER_HPP_ #define CAFFE_NEW_LAYER_HPP_ #include <vector> #include \"caffe/blob.hpp\" #include \"caffe/layer.hpp\" #include \"caffe/proto/caffe.pb.h\" namespace caffe { template < typename Dtype > class NewLayer : public Layer < Dtype > { public : explicit NewLayer ( const LayerParameter & param ) : Layer < Dtype > ( param ) {} virtual void LayerSetUp ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ){}; virtual void Reshape ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ){}; protected : virtual void Forward_cpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ); virtual void Backward_cpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ); virtual void Forward_gpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ){}; virtual void Backward_gpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ){}; }; } #endif // xxx.cpp #include <vector> #include \"caffe/layers/new_layer.hpp\" namespace caffe { template < typename Dtype > void NewLayer < Dtype >:: Forward_cpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); Dtype * top_data = top [ 0 ] -> mutable_cpu_data (); const int count = bottom [ 0 ] -> count (); for ( int i = 0 ; i < count ; ++ i ) { top_data [ i ] = bottom_data [ i ]; } } template < typename Dtype > void NewLayer < Dtype >:: Backward_cpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ) { if ( propagate_down [ 0 ]) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); const Dtype * top_diff = top [ 0 ] -> cpu_diff (); Dtype * bottom_diff = bottom [ 0 ] -> mutable_cpu_diff (); const int count = bottom [ 0 ] -> count (); for ( int i = 0 ; i < count ; ++ i ) { bottom_diff [ i ] = top_diff [ i ]; } } } #ifdef CPU_ONLY STUB_GPU ( NewLayer ); #endif INSTANTIATE_CLASS ( NewLayer ); //\u7c7b\u540d\uff0c\u6ce8\uff1a\u8fd9\u4e2a\u7c7b\u540d\u4e0eprototxt\u6587\u4ef6\u4e2d\u7684\u5c42\u540d\u4e0d\u9700\u4e00\u81f4 REGISTER_LAYER_CLASS ( New ); // \u5bf9\u5e94\u5c42\u7684\u7c7b\u578b } // namespace caffe \u6dfb\u52a0\u5e26\u53c2\u6570\u7684\u5c42 layer { name: \"NewLayer\" type: \"New\" bottom: \"data\" top: \"data\" new_param { coeff1: 1 .0 coeff2: 2 .0 } } // xxx.hpp \u548c\u4e0a\u9762\u4e00\u6837 // xxx.cpp #include <vector> #include \"caffe/layers/new_layer.hpp\" namespace caffe { template < typename Dtype > void NewLayer < Dtype >:: Forward_cpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); Dtype * top_data = top [ 0 ] -> mutable_cpu_data (); const int count = bottom [ 0 ] -> count (); float coeff = this -> layer_param_ . new_param (). coeff1 (); // \u83b7\u53d6\u53c2\u6570 LOG ( INFO ) << \"NewLayer, Forward_cpu:\" << coeff ; for ( int i = 0 ; i < count ; ++ i ) { top_data [ i ] = bottom_data [ i ]; } } template < typename Dtype > void NewLayer < Dtype >:: Backward_cpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ) { float coeff = this -> layer_param_ . new_param (). coeff2 (); // \u83b7\u53d6\u53c2\u6570 LOG ( INFO ) << \"NewLayer, Backward_cpu:\" << coeff ; if ( propagate_down [ 0 ]) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); const Dtype * top_diff = top [ 0 ] -> cpu_diff (); Dtype * bottom_diff = bottom [ 0 ] -> mutable_cpu_diff (); const int count = bottom [ 0 ] -> count (); for ( int i = 0 ; i < count ; ++ i ) { bottom_diff [ i ] = top_diff [ i ]; } } } #ifdef CPU_ONLY STUB_GPU ( NewLayer ); #endif INSTANTIATE_CLASS ( NewLayer ); //\u7c7b\u540d\uff0c\u5bf9\u5e94prototxt\u6587\u4ef6\u4e2d\u7684\u5c42\u540d REGISTER_LAYER_CLASS ( New ); // \u5bf9\u5e94\u5c42\u7684\u7c7b\u578btype } // namespace caffe // \u4fee\u6539caffe.proto\uff0c\u9700\u8981\u4fee\u6539\u4e24\u5904 // 1.\u5728message LayerParameter\u4e0b\u6dfb\u52a0 optional NewParameter new_param = 151 ; // \u6ce8\u610f\u8bbe\u5b9a\u7684ID\u503c\u4e0d\u80fd\u4e0e\u5176\u4ed6\u5df2\u8bbe\u7f6e\u7684\u6709\u76f8\u540c\uff0c\u800cmessage LayerParameter\u4e0a\u9762\u6ce8\u660e\u4e86\u53ef\u4ee5\u8bbe\u5b9a\u7684\u3001\u6ca1\u6709\u51b2\u7a81\u7684ID\u503c\u3002 // 2.\u5728\u5176\u4ed6\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2aNewLayer\u5c42\u7684message\u51fd\u6570\uff1a message NewParameter { optional float coeff1 = 1 [ default = 1 ]; optional float coeff2 = 2 [ default = 2 ]; }","title":"Caffe\u5feb\u901f\u6559\u7a0b"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#caffe","text":"ubuntu\u73af\u5883\u51c6\u5907(\u5feb\u901f\u5b89\u88c5) sudo apt-get install git sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libhdf5-serial-dev protobuf-compiler sudo apt-get install --no-install-recommends libboost-all-dev sudo apt-get install libatlas-base-dev sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev ubuntu\u73af\u5883\u51c6\u5907(\u6e90\u7801\u5b89\u88c5,\u53ef\u9009) \u767e\u5ea6\u4e91:idi7 protobuf ProtoBuffer\u662f\u7531Google\u5f00\u53d1\u7684\u4e00\u79cd\u53ef\u4ee5\u5b9e\u73b0\u5185\u5b58\u4e0e\u975e\u6613\u5931\u5b58\u50a8\u4ecb\u8d28\uff08\u5982\u786c\u76d8\u6587\u4ef6\uff09\u4ea4\u6362\u7684\u534f\u8bae\u63a5\u53e3\uff0c\u7528\u6237\u53ea\u9700\u8981\u5efa\u7acb\u7edf\u4e00\u7684\u53c2\u6570\u63cf\u8ff0\u6587\u4ef6\uff08proto\uff09\uff0c\u7136\u540e\u5229\u7528protoc\u7f16\u8bd1\u5c31\u80fd\u8ba9\u534f\u8bae\u7ec6\u8282\u7b49\u5173\u952e\u90e8\u5206\u4ee3\u7801\u81ea\u52a8\u751f\u6210\uff0c\u8282\u7701\u4e86\u5927\u91cf\u7684\u5f00\u53d1\u3001\u8c03\u8bd5\u65f6\u95f4 tar -zxvf protobuf-2.5.0.tar.gz cd protobuf-2.5.0 # \u6211\u4eec\u5e76\u6ca1\u6709\u5c06Protobuf\u5b89\u88c5\u5230\u7cfb\u7edf\u9ed8\u8ba4\u76ee\u5f55/usr/\u6216/usr/local/\u4e0b\uff0c\u800c\u662f\u5b89\u88c5\u5230\u672c\u5730\u76ee\u5f55/home/yourname/local_install/\u4e0b\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u4fbf\u4e8e\u8fc1\u79fb\u3002\u5728\u4e00\u53f0\u673a\u5668\u4e0a\u5b89\u88c5\u597d\u7684Caffe\u53ca\u5176\u4f9d\u8d56\uff0c\u80fd\u8fc5\u901f\u8fc1\u79fb\u5230\u53e6\u4e00\u53f0\u673a\u5668\u4e0a\u800c\u65e0\u987b\u91cd\u590d\u7f16\u8bd1\u3001\u5b89\u88c5\u3002\u540e\u9762\u6240\u6709\u7b2c\u4e09\u65b9\u4f9d\u8d56\u8f6f\u4ef6\u5305\u90fd\u4f1a\u5b89\u88c5\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u3002 ./configure --prefix = /home/yang/local_install/ make make install # \u6821\u9a8c\u662f\u5426\u5b89\u88c5\u6210\u529f ls ~/local_install/bin/ # \u663e\u793a protoc\u5373\u53ef # \u52a0\u5165\u5230\u7cfb\u7edf\u8def\u5f84,vi .bashrc export PATH = ~/local_install/bin/: $PATH # \u4fee\u6539Makefile.config INCLUDE_DIRS += ~/local_install/include LIBRARY_DIRS += ~/local_install/lib # caffe\u751f\u6210caffe.pb.h cd caffe/src/caffe/proto protoc --cpp_out = ./ caffe.proto # \u751f\u6210caffe.pb.h Boost \u5b83\u662f\u4e00\u4e2a\u529f\u80fd\u5f3a\u5927\u3001\u6784\u9020\u7cbe\u5de7\u3001\u8de8\u5e73\u53f0\u3001\u5f00\u6e90\u4e14\u514d\u8d39\u7684\u5e93\uff0c\u88ab\u79f0\u4e3a\u201cC++\u51c6\u6807\u51c6\u5e93\u201d\uff0c\u4f7f\u7528\u4e86\u5f88\u591a\u73b0\u4ee3\u7f16\u7a0b\u6280\u672f\uff0c\u5185\u5bb9\u6db5\u76d6\u5b57\u7b26\u4e32\u5904\u7406\u3001\u6b63\u5219\u8868\u8fbe\u5f0f\u3001\u5bb9\u5668\uff08\u4e0d\u662fDocker\uff09\u548c\u6570\u636e\u7ed3\u6784\u3001\u5e76\u53d1\u7f16\u7a0b\u3001\u51fd\u6570\u5f0f\u7f16\u7a0b\u3001\u6cdb\u578b\u7f16\u7a0b\u3001\u8bbe\u8ba1\u6a21\u5f0f\u5b9e\u73b0\u7b49\u8bb8\u591a\u9886\u57df\uff0c\u4f7f\u5f97C++\u5f00\u53d1\u66f4\u52a0\u7075\u6d3b\u3001\u9ad8\u6548\u3002 \u5728Caffe\u4e2d\u4e3b\u8981\u4f7f\u7528\u4e86Boost\u4e2d\u7684\u667a\u80fd\u6307\u9488\uff0c\u5176\u81ea\u5e26\u5f15\u7528\u8ba1\u6570\u529f\u80fd\uff0c\u53ef\u907f\u514d\u5171\u4eab\u6307\u9488\u65f6\u9020\u6210\u5185\u5b58\u6cc4\u6f0f\u6216\u591a\u6b21\u91ca\u653e\u3002\u53e6\u5916\uff0cpycaffe\u4f7f\u7528Boost Python\u5b9e\u73b0C/C++\u548cPython\u8bed\u8a00\u7684\u8fde\u63a5\uff0c\u65b9\u4fbfPython\u8c03\u7528C/C++\u8bbe\u8ba1\u7684\u6a21\u5757\u3002 tar -zxvf boost_1_56_0.tar.bz2 cd boost_1_56_0/ sudo ./bootstrap.sh --with-libraries = system,thread,python sudo ./b2 # sudo ./b2 install # \u5b89\u88c5\u5728\u7cfb\u7edf\u76ee\u5f55\u4e0b # sudo ldconfig # \u9700\u8981\u624b\u52a8\u590d\u5236\u5230\u4f60\u7684\u5b89\u88c5\u76ee\u5f55\u4e0b cp -r boost/ /home/yang/local_install/include/ cp stage/lib/* /home/yang/local_install/lib/ # \u5f7b\u5e95\u5220\u9664boost cd /usr/local/include rm -rf boost cd /usr/local/lib rm -rf *boost* GFLAGS GFLAGS\u5728Caffe\u4e2d\u4e3b\u8981\u8d77\u5230\u547d\u4ee4\u884c\u53c2\u6570\u89e3\u6790\u7684\u4f5c\u7528\uff0c\u8fd9\u4e0eProtoBuffer\u529f\u80fd\u7c7b\u4f3c\uff0c\u53ea\u662f\u53c2\u6570\u8f93\u5165\u6e90\u4e0d\u540c\u3002GFLAGS\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684tools/caffe.cpp\u3002 unzip gflags-2.1.1.zip cd gflags-2.1.1/ mkdir build && cd build cmake .. ccmake .. # \u63a5\u4e0b\u6765\u4f1a\u5f39\u51faccmake\u914d\u7f6e\u754c\u9762\uff0c\u4fee\u6539\u4e24\u4e2a\u4f4d\u7f6e BUILD_SHARED_LIBS ON CMAKE_INSTALLPREFIX /home/yang/local_install # \u5148\u6309C\u952e\u518d\u6309G\u952e\uff0c\u751f\u6210Makefile make make install GLOG GLOG\u5e93\u662fGoogle\u5f00\u53d1\u7684\u7528\u4e8e\u8bb0\u5f55\u5e94\u7528\u7a0b\u5e8f\u65e5\u5fd7\u7684\u5b9e\u7528\u5e93\uff0c\u63d0\u4f9b\u57fa\u4e8eC++\u6807\u51c6\u8f93\u5165\u8f93\u51fa\u6d41\u5f62\u5f0f\u7684\u63a5\u53e3\uff0c\u8bb0\u5f55\u65f6\u53ef\u9009\u62e9\u4e0d\u540c\u7684\u65e5\u5fd7\u7ea7\u522b\uff0c\u65b9\u4fbf\u5c06\u91cd\u8981\u65e5\u5fd7\u548c\u666e\u901a\u65e5\u5fd7\u5206\u5f00\u3002 tar -zxvf glog-0.3.3.tar.gz cd glog-0.3.3/ ./configure --prefix = /home/yang/local_install/ make make install BLAS \u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u4e2d\u7528\u5230\u7684\u6570\u5b66\u8ba1\u7b97\u4e3b\u8981\u662f\u77e9\u9635\u3001\u5411\u91cf\u7684\u8ba1\u7b97\uff0cCaffe\u4e2d\u8c03\u7528\u4e86BLAS\uff08Basic Linear Algebra Subprograms\uff0c\u57fa\u672c\u7ebf\u6027\u4ee3\u6570\u5b50\u7a0b\u5e8f\uff09\u4e2d\u7684\u76f8\u5e94\u65b9\u6cd5\u3002\u6700\u5e38\u7528\u7684BLAS\u5b9e\u73b0\u6709Intel MKL\u3001ATLAS\u3001OpenBLAS\u7b49\uff0cCaffe\u53ef\u4ee5\u9009\u62e9\u5176\u4e2d\u4efb\u4e00\u79cd\u3002 OpenBLAS\u5728Caffe\u4e2d\u4e3b\u8981\u8d1f\u8d23CPU\u7aef\u7684\u6570\u503c\u8ba1\u7b97\uff08\u5982\u77e9\u9635\u4e58\u6cd5\uff09\u3002\u7531\u4e8e\u8c03\u7528\u91cf\u76f8\u5f53\u5927\uff0c\u8be5\u5e93\u7684\u6027\u80fd\u76f4\u63a5\u5f71\u54cdCaffe\u7684\u8fd0\u884c\u6027\u80fd\u3002 \u5728GPU\u7aef\u7684\u6570\u503c\u8ba1\u7b97\u5219\u7531\u5bf9\u5e94\u7684cuBLAS\u5b8c\u6210\uff0c\u5176API\u63a5\u53e3\u4e0eOpenBLAS\u7c7b\u4f3c\u3002 \u53c2\u8003\u5c0f\u4f8b\u5b50:Caffe\u6e90\u7801include/caffe/util/math_functions.hpp\u4e2d\u3002 # Makefile.config BLAS : = open # atlas/mkl/open,\u5e38\u9009\u7528open tar -zxvf OpenBLAS-0.2.14.tar.gz cd OpenBLAS-0.2.14/ make -j make PREFIX = /home/yang/local_install/ install HDF5 \u4e00\u79cd\u80fd\u9ad8\u6548\u5b58\u50a8\u548c\u5206\u53d1\u79d1\u5b66\u6570\u636e\u7684\u65b0\u578b\u6570\u636e\u683c\u5f0f\u3002\u5b83\u53ef\u4ee5\u5b58\u50a8\u4e0d\u540c\u7c7b\u578b\u7684\u56fe\u50cf\u548c\u6570\u7801\u6570\u636e\u7684\u6587\u4ef6\uff0c\u5e76\u4e14\u53ef\u4ee5\u5728\u4e0d\u540c\u7c7b\u578b\u7684\u673a\u5668\u4e0a\u4f20\u8f93\uff0c\u540c\u65f6\u8fd8\u6709\u7edf\u4e00\u5904\u7406\u8fd9\u79cd\u6587\u4ef6\u683c\u5f0f\u7684\u51fd\u6570\u5e93\u3002Caffe\u8bad\u7ec3\u6a21\u578b\u53ef\u4ee5\u9009\u62e9\u4fdd\u5b58\u4e3aHDF5\u683c\u5f0f\u6216\uff08\u9ed8\u8ba4\u7684\uff09ProtoBuffer\u683c\u5f0f\u3002 HDF5\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684hdf5.hpp\u548chdf5.cpp\u3002 tar -zxvf hdf5-1.8.9.tar.gz cd hdf5-1.8.9/ ./configure --prefix = /home/yang/local_install/ make -j make install opencv OpenCV\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684io.hpp\u548cio.cpp\u3002 unzip opencv - 3.0 . 0. zip cd opencv - 3.0 . 0 / mkdir build && cd build cmake .. ccmake .. make make install # \u5982\u679cmake caffe\u7684\u65f6\u5019\u62a5\u9519:undefined reference tocv::imread(cv::String const &int).. #\u539f\u56e0\u5c31\u662fOpenCV 3.0\u628aimread\u76f8\u5173\u51fd\u6570\u653e\u5230imgcodecs.lib\u4e2d\u4e86\uff0c\u800c\u975e\u539f\u6765\u7684imgproc.lib\u4e2d\u3002\u89e3\u51b3\u65b9\u6cd5\u4e3a\u4fee\u6539Makefile\u6587\u4ef6\uff08\u6ce8\u610f\u4e0d\u662fMakefile.config\uff09\uff0c\u5728\u4f4d\u7f6e\u7684\u6700\u540e\u6dfb\u52a0opencv_imgcodecs\u5373\u53ef\u3002\u65b0\u7248Caffe\u901a\u8fc7\u5728Makefile.config\u4e2d\u589e\u52a0\u7f16\u8bd1\u9009\u9879\uff08OPENCV_VERSION := 3\uff09\u4fee\u590d\u4e86\u8fd9\u4e00\u95ee\u9898\u3002 LIBRARIES += glog gflags protobuf leveldb snappy \\ lmdb boost_system hdf5_h1 hdf5 m \\ opencv_core opencv-highgui opencv_imgproc opencv_imgcodecs LMDB/LEVELDB \u95ea\u7535\u822c\u7684\u5185\u5b58\u6620\u5c04\u578b\u6570\u636e\u5e93\u7ba1\u7406\u5668\uff0c\u5728Caffe\u4e2d\u7684\u4f5c\u7528\u4e3b\u8981\u662f\u63d0\u4f9b\u6570\u636e\u7ba1\u7406\uff0c\u5c06\u5f62\u5f62\u8272\u8272\u7684\u539f\u59cb\u6570\u636e\uff08JPEG\u56fe\u7247\u3001\u4e8c\u8fdb\u5236\u6570\u636e\uff09\u8f6c\u6362\u4e3a\u7edf\u4e00\u7684Key-Value\u5b58\u50a8\uff0c\u4fbf\u4e8eCaffe\u7684DataLayer\u83b7\u53d6\u8fd9\u4e9b\u6570\u636e LEVELDB\u5e93\u662fCaffe\u65e9\u671f\u7248\u672c\u4f7f\u7528\u7684\u6570\u636e\u5b58\u50a8\u65b9\u5f0f\uff0c\u7531Google\u5f00\u53d1\u3002\u5b83\u662f\u4e00\u79cd\u6301\u7eed\u7684\u952e\u503c\u5bf9\u5b58\u50a8\u65b9\u5f0f\uff0c\u952e\u548c\u503c\u53ef\u4ee5\u4e3a\u4efb\u610f\u5b57\u8282\u6570\u7ec4\u3002\u952e\u7684\u5b58\u50a8\u987a\u5e8f\u53ef\u7531\u7528\u6237\u5b9a\u4e49\u7684\u6bd4\u8f83\u51fd\u6570\u51b3\u5b9a\u3002\u76ee\u524d\u5927\u90e8\u5206\u4f8b\u7a0b\u90fd\u5df2\u7ecf\u4f7f\u7528 LMDB\u548cLEVELDB\u7684\u4f7f\u7528\u65b9\u6cd5\u53ef\u4ee5\u53c2\u8003Caffe\u6e90\u7801\u4e2d\u7684db_lmdb.hpp\u3001db_lmdb.cpp\u3001db_leveldb.hpp\u548cdb_leveldb.cpp\u3002 # lmdb\u4e0b\u8f7d\u6210\u529f\u540e\uff0c\u65e0\u9700\u914d\u7f6e\uff0c\u76f4\u63a5\u7f16\u8bd1 make # \u7f16\u8bd1\u6210\u529f\u540e cp lmdb . h / home / yang / local_install / include / cp liblmdb . so / home / yang / local_install / lib / # leveldb make cp - r include / leveldb / home / yang / local_install / include / cp libleveldb . so * / home / yang / local_install / lib / Snappy Snappy\u662f\u4e00\u4e2a\u7528\u6765\u538b\u7f29\u548c\u89e3\u538b\u7f29\u7684C++\u5e93\uff0c\u65e8\u5728\u63d0\u4f9b\u8f83\u9ad8\u7684\u538b\u7f29\u901f\u5ea6\u548c\u5408\u7406\u7684\u538b\u7f29\u7387\u3002Snappy\u6bd4zlib\u66f4\u5feb\uff0c\u4f46\u6587\u4ef6\u76f8\u5bf9\u8981\u592720%\uff5e100%\u3002 tar -zxvf snappy-1.1.1.tar.gz cd snappy-1.1.1/ ./configure --prefix = /home/yang/local_install/ make && make install \u4fee\u6539 Makefile.config # \u989d\u5916\u5934\u6587\u4ef6\u3001\u5e93\u5305\u542b\u9009\u9879\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0\u4eca\u5929\u7684\u6240\u6709\u4f9d\u8d56\u5b89\u88c5\u8def\u5f84 INCLUDE_DIRS: = /home/yang/local_install/incude $( PYTHON_INCLUDE ) /usr/local/include LIBRARY_DIRS: = /home/yang/local_install/lib $( PYTHON_LIB ) /usr/local/lib /usr/lib # \u6ce8\u610f\u5c06\u4eca\u5929\u7684\u4f9d\u8d56\u5305\u8def\u5f84\u653e\u5728\u7cfb\u7edf\u8def\u5f84\u524d\u9762\uff0c\u4fdd\u8bc1\u5148\u5f15\u7528\u7684\u662f\u7f16\u8bd1\u5305\u800c\u4e0d\u662f\u7cfb\u7edf\u5305 \u4e0b\u8f7dcaffe\u6e90\u7801 git clone https : // github . com / bvlc / caffe . git git clone https : // github . com / twtygqyy / caffe - augmentation . git # \u66f4\u5e38\u7528\uff0c\u6709\u6570\u636e\u589e\u5f3a\u90e8\u5206 cd caffe / mv Makefile . config . example Makefile . config \u6267\u884cmake # \u7f16\u5199MakeFile.config\uff08cp MakeFile.config.example MakeFile.config\uff09 # MakeFile\u7684\u7b2c\u4e8c\u884c\u6307\u5411\u7684\u662f\u8981make\u7684\u6587\u4ef6\u540d\u79f0\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u66f4\u6539(CONFIG_FILE:=Makefile.config) make clean make all -j make pycaffe # \u4f7f\u5f97caffe\u7684python\u63a5\u53e3\u6c38\u4e45\u751f\u6548 vim /etc/profile export PYTHONPATH = /root/ $CAFFE_ROOT /python: $PYTHONPATH source /etc/profile # make all\u4e4b\u524d\u8981\u4fee\u6539MakeFile.config ## Refer to http://caffe.berkeleyvision.org/installation.html # Contributions simplifying and improving our build system are welcome! # cuDNN acceleration switch (uncomment to build with cuDNN). USE_CUDNN : = 1 # \u4f7f\u7528GPU\uff0c\u4e14\u5b89\u88c5\u4e86cudnn\u540e\u5f00\u542f # CPU-only switch (uncomment to build without GPU support). # CPU_ONLY := 1 # \u53ea\u4f7f\u7528CPU\u7f16\u8bd1 # uncomment to disable IO dependencies and corresponding data layers USE_OPENCV : = 1 # \u4e00\u822c\u4f7f\u7528opencv\uff0c\u628a\u8fd9\u4e2a\u5f00\u542f\u5c31\u884c # \u4e0b\u9762\u8fd9\u4e24\u4e2a\u8868\u793a\u9009\u62e9caffe\u7684\u6570\u636e\u7ba1\u7406\u7b2c\u4e09\u65b9\u5e93\uff0c\u4e24\u8005\u90fd\u4e0d\u6253\u5f00\u9ed8\u8ba4\u7528\u7684\u662fLMDB\uff1almdb\u7684\u5185\u5b58\u6d88\u8017\u662fleveldb\u76841.1\u500d\uff0c\u4f46\u662flmdb\u7684\u901f\u5ea6\u6bd4leveldb\u5feb10%\u81f315%\uff0c\u66f4\u91cd\u8981\u7684\u662flmdb\u5141\u8bb8\u591a\u79cd\u8bad\u7ec3\u6a21\u578b\u540c\u65f6\u8bfb\u53d6\u540c\u4e00\u7ec4\u6570\u636e\u96c6\uff0c\u6240\u4ee5\u9ed8\u8ba4\u9009lmdb USE_LEVELDB : = 1 # USE_LMDB := 0 # uncomment to allow MDB_NOLOCK when reading LMDB files (only if necessary) # You should not set this flag if you will be reading LMDBs with any # possibility of simultaneous read and write # ALLOW_LMDB_NOLOCK := 1 # \u6253\u5f00\u8fd9\u4e2a\u6ce8\u91ca\u662f\u5f53\u9700\u8981\u8bfb\u53d6LMDB\u6587\u4ef6\u65f6\uff0c\u9ed8\u8ba4\u4e0d\u6253\u5f00\uff0c\u6240\u4ee5\u4e0d\u53d6\u6d88\u6ce8\u91ca # Uncomment if you're using OpenCV 3 OPENCV_VERSION : = 3 # \u7528`pkg-config --modversion opencv`\u547d\u4ee4\u67e5\u770bopencv\u7248\u672c # To customize your choice of compiler, uncomment and set the following. # N.B. the default for Linux is g++ and the default for OSX is clang++ # CUSTOM_CXX := g++ # linux\u7cfb\u7edf\u4e00\u822c\u7528\u5f97\u90fd\u662fg++\u7f16\u8bd1\u5668 # CUDA directory contains bin/ and lib/ directories that we need. CUDA_DIR : = /usr/local/cuda # \u4f60\u53ef\u4ee5\u4fee\u6539\u4f60\u7684cuda\u5b89\u88c5\u76ee\u5f55 # On Ubuntu 14.04, if cuda tools are installed via # \"sudo apt-get install nvidia-cuda-toolkit\" then use this instead: # CUDA_DIR := /usr # CUDA architecture setting: going with all of them. # For CUDA < 6.0, comment the *_50 through *_61 lines for compatibility. # For CUDA < 8.0, comment the *_60 and *_61 lines for compatibility. # \u8fd9\u4e9b\u90fd\u662f\u6307GPU\u7b97\u529b\uff0c6.0\u4ee5\u4e0b\u7684\u7248\u672c\u4e0d\u652f\u6301\u00d7_50\u7684\u8ba1\u7b97\u80fd\u529b:http://www.tuicool.com/articles/qUN322z # \u73b0\u5728\u7528\u7684cuda9.0/cuda10.0\u53ca\u4ee5\u4e0a\u4e00\u822c\u90fd\u662f\u4ecesm_30\u5f00\u59cb CUDA_ARCH : = -gencode arch = compute_20,code = sm_20 \\ -gencode arch = compute_20,code = sm_21 \\ -gencode arch = compute_30,code = sm_30 \\ -gencode arch = compute_35,code = sm_35 \\ -gencode arch = compute_50,code = sm_50 \\ -gencode arch = compute_52,code = sm_52 \\ -gencode arch = compute_60,code = sm_60 \\ -gencode arch = compute_61,code = sm_61 \\ -gencode arch = compute_61,code = compute_61 # BLAS choice: # atlas for ATLAS (default) # mkl for MKL # open for OpenBlas # BLAS\u8fd9\u4e2a\u503c\u5982\u679c\u7528\u7684\u662fatlas\u8ba1\u7b97\u5e93\u5219\u8d4b\u503cATLAS\uff0cmkl\u8ba1\u7b97\u5e93\u5219\u7528MKL\u8d4b\u503c\uff0cOpenBlas\u5219\u8d4b\u503copen BLAS : = atlas # Custom (MKL/ATLAS/OpenBLAS) include and lib directories. # Leave commented to accept the defaults for your choice of BLAS # (which should work)! # BLAS_INCLUDE := /path/to/your/blas # BLAS_LIB := /path/to/your/blas # Homebrew puts openblas in a directory that is not on the standard search path # BLAS_INCLUDE := $(shell brew --prefix openblas)/include # BLAS_LIB := $(shell brew --prefix openblas)/lib # This is required only if you will compile the matlab interface. # MATLAB directory should contain the mex binary in /bin. # MATLAB_DIR := /usr/local # MATLAB_DIR := /Applications/MATLAB_R2012b.app # NOTE: this is required only if you will compile the python interface. # We need to be able to find Python.h and numpy/arrayobject.h. #PYTHON_INCLUDE := /usr/include/python2.7 \\ # /usr/lib/python2.7/dist-packages/numpy/core/include # Anaconda Python distribution is quite popular. Include path: # Verify anaconda location, sometimes it's in root. # python\u5b89\u88c5\u4f4d\u7f6e ANACONDA_HOME : = $( HOME ) /anaconda3 PYTHON_INCLUDE : = $( ANACONDA_HOME ) /include \\ $( ANACONDA_HOME ) /include/python3.6m \\ $( ANACONDA_HOME ) /lib/python3.6m/site-packages/numpy/core/include # Uncomment to use Python 3 (default is Python 2) # PYTHON_LIBRARIES := boost_python3 python3.5m # PYTHON_INCLUDE := /usr/include/python3.5m \\ # /usr/lib/python3.5/dist-packages/numpy/core/include # We need to be able to find libpythonX.X.so or .dylib. # PYTHON_LIB := /usr/lib PYTHON_LIB : = $( ANACONDA_HOME ) /lib # python\u5e93\u4f4d\u7f6e # Homebrew installs numpy in a non standard path (keg only) # PYTHON_INCLUDE += $(dir $(shell python -c 'import numpy.core; print(numpy.core.__file__)'))/include # PYTHON_LIB += $(shell brew --prefix numpy)/lib # Uncomment to support layers written in Python (will link against Python libs) # WITH_PYTHON_LAYER := 1 # Whatever else you find you need goes here. INCLUDE_DIRS : = $( PYTHON_INCLUDE ) /usr/local/include LIBRARY_DIRS : = $( PYTHON_LIB ) /usr/local/lib /usr/lib # If Homebrew is installed at a non standard location (for example your home directory) and you use it for general dependencies # INCLUDE_DIRS += $(shell brew --prefix)/include # LIBRARY_DIRS += $(shell brew --prefix)/lib # NCCL acceleration switch (uncomment to build with NCCL) # https://github.com/NVIDIA/nccl (last tested version: v1.2.3-1+cuda8.0) # USE_NCCL := 1 # \u5f00\u542f\u591aGPU\u8bad\u7ec3\uff0c\u8fd9\u4e2a\u524d\u63d0\u662f\u7cfb\u7edf\u8981\u88c5\u6709nccl # Uncomment to use `pkg-config` to specify OpenCV library paths. # (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.) # USE_PKG_CONFIG := 1 # N.B. both build and distribute dirs are cleared on `make clean` BUILD_DIR : = build DISTRIBUTE_DIR : = distribute # Uncomment for debugging. Does not work on OSX due to https://github.com/BVLC/caffe/issues/171 # DEBUG := 1 # The ID of the GPU that 'make runtest' will use to run unit tests. TEST_GPUID : = 0 # \u6240\u7528\u7684gpu\u7684ID\u7f16\u53f7 # enable pretty build (comment to see full commands) Q ? = @","title":"CAFFE\u7f16\u8bd1\u6587\u4ef6"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_1","text":"caffe\u7f16\u8bd1\u9519\u8befundefined reference toTIFFIsTiled@LIBTIFF_4.0'","title":"\u5e38\u89c1\u7f16\u8bd1\u9519\u8bef\u96c6\u9526"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#lmdb","text":"\u6269\u5c551 \u5206\u7c7b\u591a\u6807\u7b7eLMDB\u5236\u4f5c \u6269\u5c552: \u5355\u901a\u9053\u7070\u5ea6\u56fe\u7247\u600e\u4e48fine-tune 3\u901a\u9053\u6a21\u578b :\u5176\u5b9e\u5c31\u662f\u628a\u7b2c\u4e00\u5c42\u5377\u79ef\u540d\u79f0\u66f4\u6539\u5373\u53ef\uff0c\u8be5\u5c42\u4f1a\u88ab\u968f\u673a\u521d\u59cb\u5316\u3002 \u6269\u5c553 : caffe labelSmooth\u5b9e\u73b0 \u56fe\u7247\u76ee\u5f55\u683c\u5f0f \u535a\u5ba2 \u91cd\u547d\u540d:\u9632\u6b62\u4e2d\u6587\u5e72\u6270 import os import shutil import random #\u4e3a\u6bcf\u4e2a\u6587\u4ef6\u6539\u540d ToRename_train = '/home/usr/dataset/train_data' ToRename_test = '/home/usr/dataset/test_data' # subDict\u4e3a\u5b50\u76ee\u5f55\u7684\u6587\u4ef6\u5939\u540d\uff0c\u9700\u8981\u624b\u52a8\u586b\u5199 subDict = [ 'ao_plate' , 'black_plate' , 'blue_plate' , 'doubleYellow_plate' , 'gang_plate' , 'gua_plate' , 'jiaolian_plate' , 'jing_plate' , 'lingshiguan_plate' , 'newEnergy_plate' , 'nongyong_plate' , 'yellow_plate' ] for i in range ( len ( subDict )): ToRename_train1 = os . path . join ( ToRename_train , subDict [ i ]) ToRename_test1 = os . path . join ( ToRename_test , subDict [ i ]) if not os . path . exists ( ToRename_train1 ) or not os . path . exists ( ToRename_test1 ): raise Exception ( 'ERROR' ) files_train = list ( os . listdir ( ToRename_train1 )) random . shuffle ( files_train ) files_test = list ( os . listdir ( ToRename_test1 )) random . shuffle ( files_test ) for s in range ( len ( files_train )): oldname = os . path . join ( ToRename_train1 , files_train [ s ]) # newname\u4e3a\u65b0\u7684\u6587\u4ef6\u540d newname = ToRename_train1 + '/newname_train_' + str ( s ) + '.jpg' os . rename ( oldname , newname ) for s in range ( len ( files_test )): oldname = os . path . join ( ToRename_test1 , files_test [ s ]) # newname\u4e3a\u65b0\u7684\u6587\u4ef6\u540d newname = ToRename_test1 + '/newname_test_' + str ( s ) + '.jpg' os . rename ( oldname , newname ) \u751f\u6210train.txt\u548ctest.txt import os import shutil import random # \u5f62\u6210train\u548ctest.txt\u6587\u4ef6 # \u9700\u8981\u66f4\u6362train_path\uff0ctest_path\u548crestoreFile train_path = '/home/usr/dataset/train_data' test_path = '/home/usr/dataset/test_data' # \u6587\u4ef6\u5939\u4e0b\u7684\u5b50\u76ee\u5f55\u540d\u79f0 subPath = [ 'ao_plate' , 'black_plate' , 'blue_plate' , 'doubleYellow_plate' , 'gang_plate' , 'gua_plate' , 'jiaolian_plate' , 'jing_plate' , 'lingshiguan_plate' , 'newEnergy_plate' , 'nongyong_plate' , 'yellow_plate' ] # \u751f\u6210\u7684train.txt\u6216\u8005test.txt\u5b58\u653e\u7684\u4f4d\u7f6e restoreFile = '/home/usr/dataset/' # \u751f\u6210train.txt for i in range ( len ( subPath )): train_path1 = os . path . join ( train_path , subPath [ i ]) if not os . path . exists ( train_path1 ): raise Exception ( 'error' ) restoreFile_train = os . path . join ( restoreFile , 'train.txt' ) with open ( restoreFile_train , 'a' ) as f : files = os . listdir ( train_path1 ) for s in files : f . write ( os . path . join ( subPath [ i ], s ) + ' ' + str ( i ) + ' \\n ' ) # \u5b58\u50a8\u683c\u5f0fclass_name/x.jpg # \u751f\u6210test.txt for i in range ( len ( subPath )): test_path1 = os . path . join ( test_path , subPath [ i ]) if not os . path . exists ( test_path1 ): raise Exception ( 'error' ) restoreFile_test = os . path . join ( restoreFile , 'test.txt' ) with open ( restoreFile_test , 'a' ) as f : files = os . listdir ( test_path1 ) for s in files : f . write ( os . path . join ( subPath [ i ], s ) + ' ' + str ( i ) + ' \\n ' ) \u751f\u6210LMDB # caffe/examples/imagenet/create_imagenet.sh \u62ff\u51fa\u8be5\u6587\u4ef6\u5e76\u4fee\u6539\u8fd0\u884c\u5373\u53ef # \u4e0a\u9762\u56db\u4e2a\u6587\u4ef6\u5b58\u50a8\u6587\u4ef6\u5b58\u653e\u4f4d\u7f6e:/home/dengshunge/Desktop/convertLMDB #!/usr/bin/env sh # Create the imagenet lmdb inputs # N.B. set the path to the imagenet train + val data dirs set -e # \u751f\u6210\u7684LMDB\u6587\u4ef6\u5b58\u653e\u7684\u4f4d\u7f6e EXAMPLE = /home/dengshunge/Desktop/convertLMDB # train.txt\u548ctest.txt\u6587\u4ef6\u653e\u7f6e\u7684\u4f4d\u7f6e DATA = /home/dengshunge/Desktop/convertLMDB # caffe/build/tools\u7684\u4f4d\u7f6e TOOLS = /home/dengshunge/caffe/build/tools # \u8bad\u7ec3\u96c6\u548c\u6d4b\u8bd5\u96c6\u7684\u4f4d\u7f6e\uff0c\u8bb0\u5f97\uff0c\u6700\u540e\u7684 '/' \u4e0d\u8981\u6f0f\u4e86 # \u6ce8\u610f\u8fd9\u4e2a\u540e\u9762\u76f4\u63a5\u62fc\u63a5train.txt/val.txt\u91cc\u9762\u7684\u6bcf\u884c\u8def\u5f84\uff0c\u6ce8\u610f\u8def\u5f84\u95ee\u9898 TRAIN_DATA_ROOT = /home/dengshunge/Desktop/convertLMDB/data/train_data/ VAL_DATA_ROOT = /home/dengshunge/Desktop/convertLMDB/data/test_data/ # Set RESIZE=true to resize the images to 256x256. Leave as false if images have # already been resized using another tool. # \u5982\u679c\u9700\u8981\u7ed9\u8be5\u8f93\u5165\u56fe\u7247\u7684\u5927\u5c0f\uff0c\u5c06RESIZE\u8bbe\u7f6e\u6210true\uff0c\u5e76\u56fe\u7247\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6 RESIZE = true if $RESIZE ; then RESIZE_HEIGHT = 30 RESIZE_WIDTH = 120 else RESIZE_HEIGHT = 0 RESIZE_WIDTH = 0 fi if [ ! -d \" $TRAIN_DATA_ROOT \" ] ; then echo \"Error: TRAIN_DATA_ROOT is not a path to a directory: $TRAIN_DATA_ROOT \" echo \"Set the TRAIN_DATA_ROOT variable in create_imagenet.sh to the path\" \\ \"where the ImageNet training data is stored.\" exit 1 fi if [ ! -d \" $VAL_DATA_ROOT \" ] ; then echo \"Error: VAL_DATA_ROOT is not a path to a directory: $VAL_DATA_ROOT \" echo \"Set the VAL_DATA_ROOT variable in create_imagenet.sh to the path\" \\ \"where the ImageNet validation data is stored.\" exit 1 fi echo \"Creating train lmdb...\" # EXAMPLE/ilsvrc12_train_lmdb\u4e2d\u7684ilsvrc12_train_lmdb\u4e3aLMDB\u7684\u547d\u540d\uff0c\u53ef\u4ee5\u6309\u9700\u66f4\u6539 # DATA/train.txt\u8981\u4e0e\u81ea\u5df1\u751f\u6210train.txt\u540d\u5b57\u76f8\u5bf9\u5e94\uff0c\u4e0d\u7136\u5f97\u66f4\u6539 # test lmdb\u540c\u7406 GLOG_logtostderr = 1 $TOOLS /convert_imageset \\ --resize_height = $RESIZE_HEIGHT \\ --resize_width = $RESIZE_WIDTH \\ --shuffle \\ $TRAIN_DATA_ROOT \\ $DATA /train.txt \\ $EXAMPLE /train_lmdb echo \"Creating test lmdb...\" GLOG_logtostderr = 1 $TOOLS /convert_imageset \\ --resize_height = $RESIZE_HEIGHT \\ --resize_width = $RESIZE_WIDTH \\ --shuffle \\ $VAL_DATA_ROOT \\ $DATA /test.txt \\ $EXAMPLE /test_lmdb echo \"Done.\" # \u751f\u6210\u7684LMDB\u5927\u5c0f\u5982\u679c\u53ea\u6709\u5341\u51e0KB\u7684\u8bdd\uff0c\u6709\u53ef\u80fd\u662f\u751f\u6210\u5931\u8d25\u4e86\u3002\u53ef\u4ee5\u770b\u5230\u751f\u6210LMDB\u7684\u65f6\u5019\uff0c\u4f1a\u81ea\u52a8\u6253\u4e71\u6570\u636e ./ create_imagenet . sh - shuffle = true # \u6ce8\u610f\uff0c\u8fd9\u6709\u8bb8\u591a\u53c2\u6570\u53ef\u9009 # \u5e38\u7528\u53c2\u6570 - shuffle = true / false # default=false:\u6253\u4e71\u539f\u6709\u6570\u636e\u7684\u987a\u5e8f\uff0c\u751f\u6210\u4e00\u4e2a\u4e71\u5e8f\u7684\u6570\u636e - gray = true / false # default=false\uff1a\u662f\u5426\u8f6c\u6362\u6210\u7070\u5ea6\u56fe - backend = \"lmdb\" # default=\"lmdb\"\u8f6c\u6362\u683c\u5f0f \u6709leveldb\uff0clmdb\u4e24\u79cd\u9009\u62e9 - resize_height = 0 # default=0\uff08type:int32\uff09 - resize_width = 0 # default=0\uff08type:int32\uff09 - encoded = true / false # default=false\uff0cTure:\u7f16\u7801\u56fe\u7247\u5c06\u4f1a\u5b58\u50a8\u5230datum - encode_type = \"\" # default=\"\",\u6211\u4eec\u7528<'png','jpg',....>\u6765\u7f16\u7801\u56fe\u7247 \u5236\u4f5c\u5747\u503c\u6587\u4ef6 \u5982\u679c\u4e0d\u5236\u4f5c\u5747\u503c\u6587\u4ef6\uff0c\u4e5f\u53ef\u4ee5\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u7684 transform_param \u4e0a\u8bbe\u7f6e mean_value=xxx \u6765\u4ee3\u66ff layer { name : \"data\" type : \"Data\" top : \"data\" top : \"label\" include { phase : TRAIN } transform_param { mirror : true mean_value : 127.5 scale : 0.0078125 force_gray : true } } \u4e3a\u4ec0\u4e48\u9700\u8ba9\u56fe\u7247\u51cf\u53bb\u5747\u503c\u5462\uff1f \u56fe\u50cf\u7684\u7a33\u5b9a\u6027(\u964d\u4f4e\u6ce2\u52a8\u6027)\uff0c\u53ef\u4ee5\u63d0\u9ad8\u5206\u7c7b\u7cbe\u5ea6 \u51cf\u53bb\u5747\u503c\u4e00\u822c\u4f1a\u8ba9\u4eae\u5ea6\u4e0b\u964d\uff0c\u4f46\u662f\u4eae\u5ea6\u5176\u5b9e\u5bf9\u56fe\u50cf\u5206\u7c7b\u6765\u8bf4\uff0c\u4e0d\u90a3\u4e48\u91cd\u8981 \u53e6\u5916\u4e00\u822c\u4f1a\u9009\u62e9\u5bf9\u6570\u636e\u8fdb\u884c\u6807\u51c6\u5316\u5904\u7406\uff0c\u4f46\u662f\u8ba1\u7b97\u56fe\u50cf\u65b9\u5dee\u662f\u4e48\u6709\u610f\u4e49\u7684\uff0c\u6240\u4ee5\u4f55\u4e0d\u9009\u62e9\u66f4\u52a0\u7b80\u5355\u7684\u5747\u503c\u89c4\u6574\u7684\u529e\u6cd5 \u5747\u503c\u6587\u4ef6\u53ea\u662f\u9488\u5bf9\u8bad\u7ec3\u96c6\u7684\uff0c\u4e0d\u9488\u5bf9\u9a8c\u8bc1\u96c6 # caffe/examples/imagenet/make_imagenet_mean.sh #!/usr/bin/env sh # Compute the mean image from the imagenet training lmdb # N.B. this is available in data/ilsvrc12 # train_lmdb\u7684LMDB\u6587\u4ef6\u5b58\u653e\u7684\u4f4d\u7f6e EXAMPLE =/ home / dengshunge / Desktop / convertLMDB # DATA\u4e3a\u6700\u7ec8\u8981\u751f\u6210\u7684\u5747\u503c\u6587\u4ef6\u5b58\u653e\u8def\u5f84 DATA =/ home / dengshunge / Desktop / convertLMDB # caffe/build/tools\u7684\u4f4d\u7f6e TOOLS =/ home / dengshunge / caffe / build / tools $ TOOLS / compute_image_mean $ EXAMPLE / train_lmdb \\ $ DATA / your_data_mean . binaryproto echo \"Done.\" \u663e\u793aLMDB\u56fe\u7247(key=img_name,value=img_data) import caffe import os import lmdb import numpy as np import matplotlib.pyplot as plt def readlmdb ( path , visualize = False ): env = lmdb . open ( path , readonly = True , lock = False ) txn = env . begin () datum = caffe . proto . caffe_pb2 . Datum () x , y = [],[] for key , value in txn . cursor (): # \u8f6c\u6362\u4e3adatum datum . ParseFromString ( value ) # \u8bfb\u53d6datum\u6570\u636e img_data = np . array ( bytearray ( datum . data )) \\ . reshape ( datum . channels , datum . height , datum . width ) print ( img_data . shape ) # (channel,height,width) x . append ( img_data ) y . append ( datum . label ) # \u7c7b\u522b\u6807\u7b7e\uff0c0/1/... if visualize : img_data = img_data . transpose ([ 1 , 2 , 0 ]) #(h,w,c) img_data = img_data [:, :, :: - 1 ] # BGR-->RGB plt . imshow ( img_data ) plt . show () print ( datum . label )","title":"\u5206\u7c7bLMDB\u8bad\u7ec3\u96c6\u5236\u4f5c"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#lmdb_1","text":"\u751f\u6210train.txt\u548ctest.txt # \u5de6\u8fb9\u662f\u56fe\u7247\u7684\u5730\u5740\uff0c\u53f3\u8fb9\u662f\u5bf9\u5e94\u56fe\u7247\u7684xml\u5730\u5740\uff0c\u4e24\u8005\u7528\u7a7a\u683c\u76f8\u8fde,\u8fd9\u4e2a\u5730\u5740\u662f\u4e00\u4e2a\u76f8\u5bf9\u5730\u5740\uff0c\u4e4b\u540e\u4f1a\u4e0e\"create_data.sh\"\u4e2d\u7684\u201cdata_root_dir\u201d\u7ed3\u5408\uff0c\u751f\u6210\u7edd\u5bf9\u5730\u5740\u3002 VOC2007/JPEGImages/00001.jpg VOC2007/Annotations/00001.xml VOC2007/JPEGImages/00002.jpg VOC2007/Annotations/00002.xml VOC2007/JPEGImages/00003.jpg VOC2007/Annotations/00003.xml \u751f\u6210labelmap.prototxt\u548ctest_name_size.txt # labelmap.prototxt:\u591a\u4e2aitem\u7ec4\u6210\u7684\uff0clabel\u4e3a0\u7684item\u662f\u80cc\u666f\uff0c\u63a5\u4e0b\u6765\u5c31\u662f\u4f60\u81ea\u5df1\u6807\u6ce8\u7684label\uff0clabel\u7684\u7f16\u53f7\u6700\u597d\u8fde\u7eed\uff0c\u800c\u4e14\u6bcf\u4e2alabel\u5bf9\u5e94\u7684Name\u9700\u8981\u548cxml\u91cc\u9762\u7684name\u4e00\u81f4\u3002 item { name: \"none_of_th_above\" label: 0 display_name: \"background\" } item { name: \"aeroplane\" label: 1 display_name: \"aeroplane\" } item { name: \"bicycle\" label: 2 display_name: \"bicycle\" } # test_name_size.txt:\u75313\u5217\u7ec4\u6210\uff0c\u7b2c\u4e00\u5217\u662f\u56fe\u7247\u7684\u540d\u79f0\uff0c\u7b2c\u4e8c\u3001\u4e09\u5217\u5206\u522b\u662f\u56fe\u7247\u7684\u9ad8\u548c\u5bbd\u3002\u6ce8\u610f\uff0c\u8fd9\u91cc\u56fe\u7247\u7684\u540d\u79f0\u6ca1\u6709\u540e\u7f00\u540d,\u4e0d\u77e5\u9053\u6709\u4ec0\u4e48\u7528\uff0c\u4e0b\u9762\u51fd\u6570\u8c03\u7528\u4e2d\uff0c\u5e76\u6ca1\u6709\u5f15\u5165\u8fd9\u4e2a\u6587\u4ef6 00001 500 353 00002 500 353 00003 500 353 \u751f\u6210LMDB \u770b\u535a\u5ba2\u5427 cur_dir = $( cd $( dirname ${ BASH_SOURCE [0] } ) && pwd ) # caffe\u7684\u8def\u5f84 root_dir = \"/home/dengshunge/Tiny-DSOD-master\" # \u8fd9\u91cc\u4e3b\u8981\u662f\u7528\u4e8e\u8c03\u7528\u8fd9\u4e2a\u8def\u5f84\u4e0b\u7684scripts/create_annoset.py cd $root_dir redo = 1 # \u6570\u636e\u7684\u6839\u76ee\u5f55\uff0c\u4e0etxt\u7684\u6587\u4ef6\u7ed3\u5408 data_root_dir = \"/home/dengshunge/Desktop/data\" # trainval.txt\u548ctest.txt\u7684\u8def\u5f84 txtFileDir = \"/home/dengshunge/Desktop/LMDB\" # LMDB\u5b58\u50a8\u4f4d\u7f6e lmdbFile = \"/home/dengshunge/Desktop/LMDB/lmdb\" # LMDB\u5b58\u50a8\u4f4d\u7f6e\u7684\u8f6f\u8fde\u63a5 lmdbLink = \"/home/dengshunge/Desktop/LMDB/lmdbLink\" # mapfile\u4f4d\u7f6e mapfile = \"/home/dengshunge/Desktop/LMDB/labelmap.prototxt\" # \u4efb\u52a1\u7c7b\u578b anno_type = \"detection\" # \u683c\u5f0f db = \"lmdb\" # \u56fe\u7247\u5c3a\u5bf8\uff0c\u82e5width,height=0,0\uff0c\u8bf4\u660e\u6309\u539f\u59cb\u56fe\u7247\u8f93\u5165\u5c3a\u5bf8\uff0c\u5426\u5219resize\u5230(width,height) min_dim = 0 max_dim = 0 width = 300 height = 300 extra_cmd = \"--encode-type=jpg --encoded\" if [ $redo ] then extra_cmd = \" $extra_cmd --redo\" fi for subset in test trainval do python3 $root_dir /scripts/create_annoset.py --anno-type = $anno_type --label-map-file = $mapfile --min-dim = $min_dim --max-dim = $max_dim --resize-width = $width --resize-height = $height --check-label $extra_cmd $data_root_dir $txtFileDir / $subset .txt $lmdbFile / $subset \"_\" $db $lmdbLink done","title":"\u68c0\u6d4bLMDB\u8bad\u7ec3\u96c6\u5236\u4f5c"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_2","text":"run_train.sh\u7f16\u5199 CAFFE_HOME = /home/usr/caffe # caffe\u6839\u76ee\u5f55 SOLVER = ./solver.prototxt # solver.prototxt\u6587\u4ef6\u8def\u5f84 WEIGHTS = ./weights/init.caffemodel # \u521d\u59cb\u5316\u6a21\u578b\u8def\u5f84 LOG = ./logs/log- 'train +%Y-%m-%d-%H-%S' .log $CAFFE_HOME /build/tools/caffe train \\ --solver = $SOLVER \\ # \u5fc5\u987b\u53c2\u6570 --weights = $WEIGHTS \\ # \u53ef\u9009\u53c2\u6570\uff0c\u6b64\u5904\u52a0\u8f7d\u8fdb\u884cfinetune --gpu = 0 ,1,2,3 \\ 2 > & 1 | tee $LOG # 1 \u8868\u793astdout\u6807\u51c6\u8f93\u51fa\uff1b2 \u8868\u793astderr\u6807\u51c6\u9519\u8bef\uff1b2>&1:\u628a\u6807\u51c6\u9519\u8bef\u91cd\u5b9a\u5411\u5230\u6807\u51c6\u8f93\u51fa,\u6b64\u65f6\u53ea\u662f\u8f93\u51fa\u5230\u7a97\u53e3\u4e0a\u800c\u5df2\uff1btee\u4f1a\u628a\u8f93\u51fa\u7684\u5185\u5bb9\u5199\u5165\u5230\u4e00\u4e2a\u6216\u591a\u4e2a\u6587\u4ef6\u5939\u4e2d\u3002 # \u65ad\u70b9\u7ee7\u7eed\u8bad\u7ec3 --snapshot = xx.solverstate # \u6a21\u578b\u4fdd\u5b58\u6709\u4e24\u4e2a\u6a21\u578b(.caffemodel+.solverstate)\uff0c\u7528snapshot\u4ee3\u66ffweights\u53c2\u6570\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u65ad\u70b9\u7eed\u8bad\u4e86 run_test.sh\u7f16\u5199 CAFFE_HOME = /home/usr/caffe # caffe\u6839\u76ee\u5f55 MODEL = ./train_val.prototxt # \u4f60\u8bad\u7ec3\u65f6\u7684net\u6587\u4ef6 WEIGHTS = ./weights/final.caffemodel # \u8bad\u7ec3\u597d\u7684\u6a21\u578b\u8def\u5f84 LOG = ./logs/log- 'test +%Y-%m-%d-%H-%S' .log $CAFFE_HOME /build/tools/caffe test \\ --model = $MODEL \\ --weights = $WEIGHTS \\ # \u53ef\u9009\u53c2\u6570\uff0c\u6b64\u5904\u52a0\u8f7d\u8fdb\u884cfinetune --gpu = 0 \\ 2 > & 1 | tee $LOG build/tools/caffe\u53c2\u6570\u8be6\u89e3 caffe <command> <args> # caffe\u547d\u4ee4\u6267\u884c\u683c\u5f0f # command\u547d\u4ee4 1 ) train\uff1a\u8bad\u7ec3\u6216finetune\u6a21\u578b\uff08model ) 2 ) test \uff1a\u6d4b\u8bd5\u6a21\u578b 3 ) device_query\uff1a\u663e\u793agpu\u4fe1\u606f 4 ) time\uff1a\u663e\u793a\u7a0b\u5e8f\u6267\u884c\u65f6\u95f4 # args --solver = xx_solver.protxt # \u5fc5\u9009solver\u914d\u7f6e\u6587\u4ef6 --gpu = 0 ,1 # \u53ef\u9009\u53c2\u6570\uff0c-gpu all\uff1a\u8868\u793a\u4f7f\u7528\u6240\u6709\u7684GPU --snapshot = xx.solverstate # \u65ad\u70b9\u7eed\u8bad(\u6062\u590d\u8bad\u7ec3)\uff0c\u548c--weights\u53ea\u80fd\u4fdd\u7559\u4e00\u4e2a --weights = xx_init.caffemodel # \u9884\u8bad\u7ec3\u597d\u7684\u6743\u91cd\u6765fine-tuning\u6a21\u578b\uff0c\u4e0d\u80fd\u548csnapshot\u540c\u65f6\u4f7f\u7528 --iterations = 50 # \u8fed\u4ee3\u6b21\u6570\uff0c\u9ed8\u8ba450 --model = xx_train_test.prototxt # \u53ef\u9009\u53c2\u6570\uff0c\u53ef\u4ee5\u5728solver\u914d\u7f6e\u6587\u4ef6\u4e2d\u6307\u5b9a --sighup_effect = snapshot ( \u9ed8\u8ba4 ) /stop/none # \u8bbe\u5b9a\u5f53\u7a0b\u5e8f\u53d1\u751f\u6302\u8d77\u4e8b\u4ef6\u65f6\uff0c\u6267\u884c\u7684\u64cd\u4f5c --sigint_effect = stop ( \u9ed8\u8ba4 ) /snapshot/none # \u8bbe\u5b9a\u5f53\u7a0b\u5e8f\u53d1\u751f\u952e\u76d8\u4e2d\u6b62\u4e8b\u4ef6\u65f6\uff08ctrl+c), \u6267\u884c\u7684\u64cd\u4f5c # train\u64cd\u4f5c\u770b\u4e0a\u9762run_train.sh # test\u53c2\u6570\u64cd\u4f5c\uff0c\u7528\u4e8e\u6700\u7ec8\u7ed3\u679c\u8f93\u51fa\uff0c\u6a21\u578b\u914d\u7f6e\u6587\u4ef6\u4e2d\u53ef\u4ee5\u8bbe\u5b9a\u9700\u8981\u8f93\u5165\u7684acc\u6216\u8005loss # \u5229\u7528\u8bad\u7ec3\u597d\u4e86\u7684\u6743\u91cd\uff08-weight)\uff0c\u8f93\u5165\u5230\u6d4b\u8bd5\u6a21\u578b\u4e2d(-model)\uff0c\u7528\u7f16\u53f7\u4e3a0\u7684gpu(-gpu)\u6d4b\u8bd5100\u6b21(-iteration) ./build/tools/caffe test -model examples/mnist/lenet_train_test.prototxt -weights examples/mnist/lenet_iter_10000.caffemodel -gpu 0 -iterations 100 # time\u53c2\u6570\uff1a\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4 # \u5728\u5c4f\u5e55\u4e0a\u663e\u793alenet\u6a21\u578b\u8fed\u4ee310\u6b21\u6240\u4f7f\u7528\u7684\u65f6\u95f4\u3002\u5305\u62ec\u6bcf\u6b21\u8fed\u4ee3\u7684forward\u548cbackward\u6240\u7528\u7684\u65f6\u95f4\uff0c\u4e5f\u5305\u62ec\u6bcf\u5c42forward\u548cbackward\u6240\u7528\u7684\u5e73\u5747\u65f6\u95f4\u3002 ./build/tools/caffe time -model examples/mnist/lenet_train_test.prototxt -iterations 10 # device_query\uff1a\u7528\u6765\u8bca\u65adgpu\u4fe1\u606f ./build/tools/caffe device_query -gpu 0 # \u6253\u5370\u8be5GPU\u7684\u4e00\u4e9b\u4fe1\u606f tee\u7b80\u4ecb tee [ option ] ... [ file ] ... # 1.\u4e3e\u4e2a\u5c0f\u4f8b\u5b50 ping www.baidu.com # \u8fd9\u4e2a\u4f1a\u663e\u793a\u8fde\u63a5\u4fe1\u606f # 2.\u4f7f\u7528tee\u628a\u663e\u793a\u7684\u8fde\u63a5\u4fe1\u606f\u5199\u5165\u5230\u6587\u4ef6\u4e2d,\u540c\u65f6\u8f93\u51fa\u4e5f\u4f1a\u663e\u793a\u5230\u63a7\u5236\u53f0\u4e0a\uff0c\u5982\u679c\u8fd9\u4e2a\u6587\u4ef6\u5b58\u5728\u5c31\u4f1a\u6e05\u7a7a\u540e\u5199\u5165 ping www.baidu.com | tee ping_baidu.log # 3.log\u6587\u4ef6\u5b58\u5728\uff0c\u4f46\u4e0d\u60f3\u6e05\u7a7a\uff0c\u53ea\u60f3\u5728\u540e\u9762\u8ffd\u52a0 ping www.baidu.com | tee -a ping_baidu.log # \u4f7f\u7528-a\u53c2\u6570\u5373\u53ef # 4.\u8f93\u51fa\u5230\u591a\u4e2a\u6587\u4ef6\u4e2d ping www.baidu.com | tee ping.log ping_baidu.log","title":"\u8bad\u7ec3\u8fc7\u7a0b\u7b80\u4ecb"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#solverprototxt","text":"solver\u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u4ea4\u66ff\u8c03\u7528\u524d\u5411\uff08forward)\u7b97\u6cd5\u548c\u540e\u5411\uff08backward)\u7b97\u6cd5\u6765\u66f4\u65b0\u53c2\u6570\uff0c\u4ece\u800c\u6700\u5c0f\u5316loss\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u4e00\u79cd\u8fed\u4ee3\u7684\u4f18\u5316\u7b97\u6cd5\u3002 # solver.prototxt net: \"examples/myfile/train_val.prototxt\" # \u6307\u5b9a\u8bad\u7ec3\u7684\u7f51\u7edc\u914d\u7f6e\u6587\u4ef6 # \u4e5f\u53ef\u4ee5\u5355\u72ec\u6307\u5b9a\u6d4b\u8bd5\u6a21\u578b\u6587\u4ef6\u548c\u8bad\u7ec3\u6a21\u578b\u6587\u4ef6 #train_net: \"examples/hdf5_classification/logreg_auto_train.prototxt\" #test_net: \"examples/hdf5_classification/logreg_auto_test.prototxt\" test_iter:100 # test_iter=val\u6570\u636e\u96c6\u603b\u6837\u672c\u6570/test_layer\u5c42\u7684batchsize test_interval:500 # \u6bcf\u8bad\u7ec3xx\u6b21\u8fdb\u884c\u4e00\u6b21val\u9a8c\u8bc1 # \u4e0b\u9762\u662f\u5b66\u4e60\u7387\u8bbe\u7f6e\u548c\u5b66\u4e60\u7387\u4e0b\u964d\u7b56\u7565\uff0c\u4e0d\u540c\u7684\u4e0b\u964d\u7b56\u7565\uff0c\u53c2\u6570\u4e0d\u540c\uff0c\u5e38\u7528multistep base_lr: 0 .01 # \u901a\u5e38\u8bbe\u4e3a0.01\u6bd4\u8f83\u597d momentum: 0 .9 # \u68af\u5ea6\u4e0b\u964d\u6cd5\u4e2d\u7684\u4e00\u79cd\u52a0\u901f\u6536\u655b\u7684\u6280\u672f\uff0c\u9608\u503c\u5e38\u9009:[0.5~0.99] weight_decay: 0 .0005 # L2\u6b63\u5219\u9879(\u5bf9\u53c2\u6570\u53d6\u503c\u5e73\u65b9\u548c\u7684\u60e9\u7f5a)\uff0c\u4e3a\u4e86\u51cf\u5f31\u8fc7\u62df\u5408 lr_policy: \"multistep\" # \u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565 gamma: 0 .9 stepvalue: 5000 stepvalue: 7000 stepvalue: 8000 stepvalue: 9000 stepvalue: 9500 # type:\"SGD\" \u9ed8\u8ba4\u4f7f\u7528SGD\u4f18\u5316\u7b56\u7565\uff0c\u5982\u679c\u4f7f\u7528\u8be5\u7b56\u7565\u53ef\u4ee5\u4e0d\u5199 display:200 # \u6bcf\u8bad\u7ec3xx\u6b21\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\u4e00\u6b21\u7ed3\u679c\uff0c0\u8868\u793a\u4e0d\u663e\u793a max_iter:50000 # \u6700\u5927\u8fed\u4ee3\u6b21\u6570 snapshot:2000 # snapshot\u7528\u4e8e\u8bbe\u7f6e\u8bad\u7ec3\u591a\u5c11\u6b21\u540e\u8fdb\u884c\u4fdd\u5b58\uff0c\u9ed8\u8ba4\u4e3a0\uff0c\u4e0d\u4fdd\u5b58 snapshot_prefix: \"examples/myfile\" # \u8bbe\u7f6e\u4fdd\u5b58\u8def\u5f84 solver_mode:GPU # CPU/GPU,\u9ed8\u8ba4\u4f7f\u7528GPU #devide_id: 0,1 # solver6\u4e2d\u4f18\u5316\u65b9\u6cd5\uff0c\u76f4\u63a5\u5728\u4e0a\u9762\u6539\u53d8type\u548c\u6dfb\u52a0\u5bf9\u5e94\u53c2\u6570\u5373\u53ef\uff0c\u4e0d\u5199\u9ed8\u8ba4\u4f7f\u7528SGD # 1.SGD type: \"SGD\" # 2.AdaDelta\uff1a\u9c81\u68d2\u7684\u5b66\u4e60\u7387\u65b9\u6cd5\uff0c\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"AdaDelta\" delta: 1e-6 # \u9700\u8981\u8bbe\u7f6edelta\u503c # 3.AdaGrad:\u81ea\u9002\u5e94\u68af\u5ea6\uff0c\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"AdaGrad\" # 4.Adam:\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"Adam\" # 5.Nesterov \u7684\u52a0\u901f\u68af\u5ea6\u6cd5\u4f5c\u4e3a\u51f8\u4f18\u5316\u4e2d\u6700\u7406\u60f3\u7684\u65b9\u6cd5\uff0c\u5176\u6536\u655b\u901f\u5ea6\u975e\u5e38\u5feb\u3002 type: \"Nesterov\" # 6.RMSProp:\u57fa\u4e8e\u68af\u5ea6\u7684\u4f18\u5316\u65b9\u6cd5\uff0c\u7c7b\u4f3cSGD type: \"RMSProp\" rms_decay: 0 .98 # \u9700\u8981\u8bbe\u7f6erms_decay # \u5b66\u4e60\u7387\u6539\u53d8\u7b56\u7565,\u8fd9\u4e9b\u90fd\u9700\u8981\u51e0\u4e2a\u5fc5\u987b\u53c2\u6570\uff0c\u53ea\u8981\u66f4\u6539lr_policy\u548c\u6dfb\u52a0\u4e00\u4e9b\u5fc5\u8981\u53c2\u6570\u5373\u53ef base_lr : 0.01 gamma : 0.1 momentum : 0.9 # 1.fixed: \u4fdd\u6301base_lr\u4e0d\u53d8. lr_policy : \"fixed\" # 2.exp:base_lr * gamma ^ iter\uff0c iter\u4e3a\u5f53\u524d\u8fed\u4ee3\u6b21\u6570 lr_policy : \"exp\" # 3.inv:base_lr * (1 + gamma * iter) ^ (- power) lr_policy : \"inv\" power : 0.75 # 4.poly:\u5b66\u4e60\u7387\u8fdb\u884c\u591a\u9879\u5f0f\u8bef\u5dee, \u8fd4\u56de base_lr (1 - iter/max_iter) ^ (power) lr_policy : \"poly\" power : 0.75 # 4.sigmoid:\u5b66\u4e60\u7387\u8fdb\u884csigmod\u8870\u51cf\uff0c\u8fd4\u56de base_lr ( 1/(1 + exp(-gamma * (iter - stepsize)))) lr_policy : \"sigmoid\" stepsize : 1000 # 5.step:\u6bcf\u9694stepsize\u6b21\u5b66\u4e60\u7387*0.1\uff0c\u4e0d\u5e38\u7528\uff0c\u56e0\u4e3a\u6700\u7ec8\u7684lr\u53ef\u80fd\u4f1a\u5f88\u5c0f\u5f88\u5c0f lr_policy : \"step\" stepsize : 1000 # 6.multistep:\u9700\u8981\u8bbe\u7f6e\uff0cstepvalue,multistep\u5219\u662f\u6839\u636estepvalue\u503c\u53d8\u5316 lr_policy : \"multistep\" # \u5b66\u4e60\u7387\u8c03\u6574\u7b56\u7565 stepvalue : 5000 stepvalue : 7000 stepvalue : 8000 stepvalue : 9000","title":"solver.prototxt\u7f16\u5199"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#prototxt","text":"Prototxt\u5305\u542b\u5143\u7d20 \u5143\u7d20 \u89e3\u91ca name \u8be5net\u7684\u540d\u79f0 layer \u5c42\u7684\u89c4\u8303 layer\u5e38\u7528\u53c2\u6570 \u5143\u7d20 \u89e3\u91ca name \u5c42\u7684\u540d\u79f0\uff0c\u53ef\u4ee5\u968f\u610f\u53d6\uff0c\u4f46\u5c3d\u91cf\u548ctype\u7c7b\u4f3c\uff0c\u4f8b\u5982\uff0cinput data\u5c42\u540d\u79f0\u4e3a\u201cdata\u201d type \u5c42\u7c7b\u578b\uff1a 1.\u9876\u5c42\u8f93\u5165\u5c42\u662f: Data (\u5e38\u7528:\u8868\u6570\u636e\u6765\u6e90\u4e8eLMDB\u6216LevelDB\uff0clayer\u7684data\u53c2\u6570\u4e3adata_param{xxx};\u5982\u679c\u662fHDF5\u6570\u636e,type:\" HDF5Data \",hdft_data_param{xxx}) 2.\u89c6\u89c9type: Convolution,Pooling,InnerProduct,BatchNorm+Scale 3.\u6fc0\u6d3btype: Sigmoid,ReLU,TanH,AbsVal(\u7edd\u5bf9\u503c)\uff0cPower(\u5e42\u8fd0\u7b97)\uff0cBNLL\uff08log(1 + exp(x)) \uff09 4.\u635f\u5931type: Softmax/SoftmaxWithLoss 5.\u5176\u4ed6type: Accuracy,Reshape,Dropout top \u662f\u6307\u8be5\u5c42\u7684**\u8f93\u51fa\u7684blob\u7684\u540d\u79f0**\uff0c\u901a\u8fc7\u5b83\u53ef\u4ee5\u552f\u4e00\u786e\u5b9a\u4e00\u4e2ablob\u3002\u4f8b\u5982\uff0c\u5728\u8bad\u7ec3\u4e2d\uff0cinput data\u5c42\u7684\u53ea\u6709\u4e24\u4e2atop\u5206\u522b\u4e3a\u201cdata\u201d\u548c\u201clabel\u201d\uff0c\u5206\u522b\u5b58\u653e\u4e86\u6570\u636e\u548c\u6807\u7b7e\u3002 bottom \u662f\u6307\u8be5\u5c42\u7684**\u8f93\u5165\u7684blob\u7684\u540d\u79f0**\uff0cinput data\u5c42\u662f\u9876\u5c42\uff0c\u56e0\u6b64\u6ca1\u6709bottom blob\u3002\u8be5\u5c42\u7684\u8f93\u5165\u7684bottom\u4e00\u5b9a\u662f\u5b83\u7684\u4e0a\u4e00\u5c42\u7684top\u3002\u5982\u679c\u8be5\u5c42\u7684bottom\u548ctop\u76f8\u540c\uff0c\u5219\u8be5\u5c42\u7684\u8f93\u5165\u548c\u8f93\u51fa\u5360\u7528\u4e86\u4e00\u4e2ablob\u3002 include phase:TRAIN/TEST,\u5982\u679c\u6ca1\u6709include\u53c2\u6570\uff0c\u5219\u8868\u793a\u8be5\u5c42\u65e2\u5728\u8bad\u7ec3\u6a21\u578b\u4e2d\uff0c\u53c8\u5728\u6d4b\u8bd5\u6a21\u578b\u4e2d\u3002 data_param \u5b9a\u4e49\u6570\u636e\u53c2\u6570\uff0c\u6570\u636e\u6765\u6e90\u7b49\u7b49 transform_param \u5bf9input\u6570\u636e\u8fdb\u884c\u9884\u5904\u7406\u7684\u53c2\u6570\u3002 param \u5b9a\u4e49weight\u6216bias\u7684\u5b66\u4e60\u901f\u7387\u548c\u8870\u51cf\u56e0\u5b50\u53c2\u6570\u3002 lr_mult:weight\u6216bias\u7684\u5b66\u4e60\u901f\u7387 decay_mult:weight\u6216bias\u7684\u8870\u51cf\u56e0\u5b50 convolution_param \u5b9a\u4e49\u5377\u79ef\u5c42\u7684\u53c2\u6570\u3002 lrn_param \u5b9a\u4e49\u5f52\u4e00\u5316\u5c42\u7684\u53c2\u6570 pooling_param \u5b9a\u4e49pooling\u5c42\u7684\u53c2\u6570 inner_product_param \u5b9a\u4e49\u5168\u8fde\u63a5\u5c42\u7684\u53c2\u6570 dropout_param \u5b9a\u4e49Dropout\u5c42\u7684\u53c2\u6570 accuracy_param \u5b9a\u4e49Accuracy\u5c42\u7684\u53c2\u6570 train_val.prototxt name : \"VGGNet\" # \u8be5\u7f51\u7edc\u540d\u79f0\uff0clayer:\u5c42\u89c4\u8303 # \u8f93\u5165\u5c42:input_data\u5c42\u662f\u9876\u5c42\uff0c\u53ea\u6709\u4e24\u4e2a\u8f93\u51fatop\u5206\u522b\u662f\"data\"\u548c\u201clabel\u201d # \u505a\u8bad\u7ec3\u65f6\u5019\u7684\u8f93\u5165\u5c42 layer { name : \"data\" type : \"Data\" top : \"data\" top : \"label\" include { phase : TRAIN # TRAIN\u8bad\u7ec3\uff0cTEST\u6d4b\u8bd5 } # \u6570\u636e\u589e\u5f3a:https://github.com/twtygqyy/caffe-augmentation transform_param { contrast_brightness_adjustment : true # \u5f00\u542f\u5bf9\u6bd4\u5ea6\u8c03\u8282 min_contrast : 0.8 # \u6700\u5c0f\u5bf9\u6bd4\u5ea6\u4e58\u5b50 max_contrast : 1.2 # \u6700\u5927\u5bf9\u6bd4\u5ea6\u4e58\u5b50 smooth_filtering : true # \u5e73\u6ed1filter max_smooth : 6 # min_sid_min/max:\u4e0d\u9700\u8981\u518d\u8bbe\u7f6enew_height/width,\u56fe\u7247\u968f\u673aresize\u5230\u8fd9\u4e2a\u533a\u95f4 min_side_min : 256 min_side_max : 480 # train\u65f6\u4f1a\u5bf9\u5927\u4e8ecrop_size\u7684\u56fe\u7247\u8fdb\u884c\u968f\u673a\u88c1\u526a\uff0c\u800c\u5728test\u65f6\u53ea\u662f\u622a\u53d6\u4e2d\u95f4\u90e8\u5206 crop_size : 224 apply_probability : 0.5 # \u6bcf\u4e2a\u64cd\u4f5c\u88ab\u6267\u884c\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u4e3a0.5 max_color_shift : 20 # \u5728RGB\u8f74\u4e0a\u6700\u5927\u7684\u8272\u5f69\u504f\u79fb debug_params : false # \u662f\u5426\u6253\u5370\u64cd\u4f5c\u53c2\u6570\uff0c\u9ed8\u8ba4false # mean_file: \"imagenet_mean.binaryproto\" # \u53ef\u4ee5\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u4ee3\u66ff # BGR\u987a\u5e8f\u5747\u503c mean_value : 104 mean_value : 117 mean_value : 123 scale : 0.0078125 # 1/128 mirror : true # \u662f\u5426\u955c\u50cf\u7ffb\u8f6c } data_param { source : \"models/vggnet/vgg_train_lmdb\" #\u6ce8\u610f\u8bad\u7ec3\u96c6\u6587\u4ef6\u7684\u8def\u5f84 batch_size : 32 #\u8bad\u7ec3\u6279\u6b21\u5927\u5c0f\u6839\u636e\u81ea\u5df1\u7684\u663e\u5361\u663e\u5b58\u800c\u5b9a\uff0c\u6211\u5f00\u59cb\u8bbe\u4e3a64\u5bfc\u81f4out of memory,\u4e8e\u662f\u6539\u621032 backend : LMDB } # \u5982\u679c\u4f7f\u7528\u8fc7\u4e86\u4e0a\u9762github\u7684\u6570\u636e\u589e\u5f3a\uff0c\u53ef\u4ee5\u7528image_data_param\u4ee3\u66ffdata_param image_data_param { source : \"all-sample.txt\" batch_size : 128 new_height : 256 new_width : 256 shuffle : true root_folder : \"all-images/\" } } # \u505a\u9a8c\u8bc1\u7684\u65f6\u5019\u7684\u8f93\u5165\u5c42 layer { name : \"data\" type : \"Data\" top : \"data\" top : \"label\" include { phase : TEST # \u8fd0\u884c\u9a8c\u8bc1\u96c6\u505a\u6d4b\u8bd5 } transform_param { crop_size : 224 mean_value : 104 mean_value : 117 mean_value : 123 scale : 0.0078125 # 1/128 mirror : false } data_param { source : \"models/vggnet/vgg_val_lmdb\" #\u6ce8\u610f\u9a8c\u8bc1\u96c6\u6587\u4ef6\u7684\u8def\u5f84 batch_size : 32 backend : LMDB } } # \u5377\u79ef\u5c42 layer { name : \"conv1_1\" type : \"Convolution\" bottom : \"data\" top : \"conv1_1\" # \u5b9a\u4e49weight\u6216bias\u7684\u5b66\u4e60\u901f\u7387\u548c\u8870\u51cf\u56e0\u5b50\u53c2\u6570 param { lr_mult : 1 # \u5b66\u4e60\u7387\u7cfb\u6570\uff0c\u6700\u7ec8\u5b66\u4e60\u7387=base_lr*lr_mult,\u4e00\u822c\u5b9a\u4e49\u4e24\u4e2aw+bias } param { lr_mult : 1 } convolution_param { num_output : 64 # \u5377\u79ef\u6838\u4e2a\u6570 kernel_size : 3 # \u5377\u79ef\u6838\u5927\u5c0f\uff0c\u5982\u679ch/w\u4e0d\u4e00\u6837,\u5219kernel_h,kernel_w\u5206\u522b\u8bbe\u5b9a pad : 1 # \u9ed8\u8ba40\uff0c\u6269\u5145\u662f\u5de6\u53f3\u3001\u4e0a\u4e0b\u5bf9\u79f0\u7684\u3002pad_h,pad_w\u5206\u522b\u6307\u5b9a stride : 1 # \u6b65\u957f,\u4e5f\u53ef\u4ee5stride_h/stride_w\u5206\u522b\u8bbe\u7f6e weight_filler { # \u6743\u91cd\u521d\u59cb\u5316,\u9ed8\u8ba4'constant'(0) type : \"xavier\" # xavier\u5e38\u7528\uff0cconstant/gaussian/uniform # std:1 # \u6807\u51c6\u5dee\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a1 # mean:0 # \u5747\u503c\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b # value:0 # \u5b9a\u503c\uff1b\u5982\u679c\u662f\u201cconstant\u201d\uff0c\u5219\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b } bias_filler { # \u504f\u7f6e\u9879\u7684\u521d\u59cb\u5316 type : \"constant\" # constant\u5e38\u7528\uff0cxavier/gaussian/uniform # std:1 # \u6807\u51c6\u5dee\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a1 # mean:0 # \u5747\u503c\uff1b\u5982\u679c\u662fgaussian\uff0c\u5219\u53ef\u9009\u7684\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b # value:0 # \u5b9a\u503c\uff1b\u5982\u679c\u662f\u201cconstant\u201d\uff0c\u5219\u8bbe\u7f6e\u5b83\uff1b\u9ed8\u8ba4\u503c\u4e3a0\uff1b } bias_term : true # \u662f\u5426\u5f00\u542f\u504f\u7f6e\u9879\uff0c\u9ed8\u8ba4\u4e3atrue group : 1 # \u662f\u5426\u5206\u7ec4\uff0c\u9ed8\u8ba41\uff0c\u53ef\u4ee5\u6309\u9700\u5199\uff0c\u5206\u7ec4\u5377\u79ef\uff0c\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7b49 } } # ReLU\u5c42 layer { name : \"relu1_1\" type : \"ReLU\" bottom : \"conv1_1\" top : \"conv1_1\" } # pooling\u5c42 layer { name : \"pool1\" type : \"Pooling\" bottom : \"conv1_1\" top : \"pool1\" pooling_param { pool : MAX # \u9ed8\u8ba4MAX,\u8fd8\u6709\uff0cAVE, \u6216STOCHASTIC kernel_size : 2 # \u5fc5\u9009\uff0c\u4e5f\u53ef\u4ee5\u7528kernel_h\u548ckernel_w\u5206\u522b\u8bbe\u5b9a stride : 2 # \u9ed8\u8ba41\uff0c\u4e00\u822c\u8bbe\u4e3a2\uff08\u5373\u4e0d\u91cd\u53e0)\u3002\u53ef\u4ee5\u7528stride_h\u548cstride_w\u6765\u8bbe\u7f6e pad : 0 } } # \u5168\u8fde\u63a5\u5c42 layer { name : \"fc6\" type : \"InnerProduct\" bottom : \"pool1\" top : \"fc6\" param { lr_mult : 1 } param { lr_mult : 1 } inner_product_param { num_output : 4096 weight_filler { type : \"xavier\" } bias_filler { type : \"constant\" } } } # \u5168\u8fde\u63a5\u540e\u7528ReLU layer { name : \"relu6\" type : \"ReLU\" bottom : \"fc6\" top : \"fc6\" } # Dropout\u5c42 layer { name : \"drop6\" type : \"Dropout\" bottom : \"fc6\" top : \"fc6\" dropout_param { dropout_ratio : 0.5 # \u53ea\u9700\u8981\u8bbe\u7f6e\u4e00\u4e2adropout_ratio\u5c31\u53ef\u4ee5\u4e86 } } # \u8f93\u51fa\u5206\u7c7b\u7684\u51c6\u786e\u5ea6\uff0c\u53ea\u6709test\u9636\u6bb5\u624d\u6709\uff0c\u9700\u8981\u52a0\u5165include\u53c2\u6570 layer { name : \"accuracy\" type : \"Accuracy\" bottom : \"fc6\" bottom : \"label\" top : \"accuracy\" include { phase : TEST } accuracy_param { top_k : 5 # \u5982\u679c\u6b63\u786e\u7684\u6807\u7b7e\u5728\u524dk\u4e2a\u9884\u6d4b\u7684\u6807\u7b7e\u4e2d\uff0c\u5219\u8be5\u9884\u6d4b\u88ab\u8ba4\u4e3a\u662f\u6b63\u786e\u7684 } } # \u8ba1\u7b97softmax_loss\u64cd\u4f5c layer { name : \"loss\" type : \"SoftmaxWithLoss\" bottom : \"fc6\" bottom : \"label\" top : \"loss\" } \u5176\u5b83\u5e38\u7528\u5c42 #BatchNorm\u5c42:x_norm = (x-u)/std,Scale\u5c42:y=alpha*x_norm + beta # BatchNorm\u5c42 layer { bottom : \"conv1\" top : \"conv1\" name : \"bn_conv1\" type : \"BatchNorm\" batch_norm_param { # use_global_stats\uff1a\u9ed8\u8ba4train:false\uff0ctest:True # train:false:\u4ee3\u8868\u9700\u8981\u6279\u5904\u7406\u7684\u5747\u503c\u65b9\u5dee\u8981\u53c2\u8003\u5168\u5c40\u4fe1\u606f\u6765\u66f4\u65b0 # test:true:\u4ee3\u8868\u4e0d\u4f7f\u7528\u81ea\u5df1\u5747\u503c\u65b9\u5dee\u548c\u5168\u5c40\u7684\u5747\u503c\u65b9\u5dee\u6765\u5f97\u5230\u6279\u5904\u7406\u7684\u5747\u503c\u548c\u65b9\u5dee,\u800c\u662f\u4f7f\u7528\u5168\u5c40\u5747\u503c\u65b9\u5dee,\u5373\u8bad\u7ec3\u597d\u7684\u5747\u503c\u65b9\u5dee use_global_stats : false # moving_average_fraction0.999 # \u6ed1\u52a8\u5e73\u5747\u7684\u8870\u51cf\u7cfb\u6570\uff0c\u9ed8\u8ba4\u4e3a0.999 # eps\uff1a 1e-5 # \u5206\u6bcd\u9644\u52a0\u503c\uff0c\u9632\u6b62\u9664\u4ee5\u65b9\u5dee\u65f6\u51fa\u73b0\u96640\u64cd\u4f5c\uff0c\u9ed8\u8ba4\u4e3a1e-5 } } # Scale\u5c42 layer { bottom : \"conv1\" top : \"conv1\" name : \"scale_conv1\" type : \"Scale\" scale_param { #filler{ # value: 1 #} bias_term : true # \u662f\u5426\u4f7f\u7528\u504f\u7f6e #bias_filler{ # value: 0 #} } } # softmax\u5c42 layers { name : \"prob\" bottom : \"cls3_fc\" top : \"prob\" type : \"Softmax\" } # Reshape\u5c42 N*C*H*W-->in:64*3*28*28-->[0,0,14,-1]-->out:64*3*14*56 layer { name : \"reshape\" type : \"Reshape\" bottom : \"input\" top : \"output\" reshape_param { shape { dim : 0 # dim:0 \u8868\u793a\u7ef4\u5ea6\u4e0d\u53d8\uff0c\u5373\u8f93\u5165\u548c\u8f93\u51fa\u662f\u76f8\u540c\u7684\u7ef4\u5ea6\u3002 dim : 2 # dim:2 \u6216 dim:3 \u5c06\u539f\u6765\u7684\u7ef4\u5ea6\u53d8\u62102\u62163 dim : 3 dim : - 1 # \u8868\u793a\u7531\u7cfb\u7edf\u81ea\u52a8\u8ba1\u7b97\u7ef4\u5ea6 } } }","title":"prototxt\u6587\u4ef6\u7f16\u5199"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#cafee","text":"slice\uff1a\u5728\u67d0\u4e00\u4e2a\u7ef4\u5ea6\uff0c\u6309\u7167\u7ed9\u5b9a\u7684\u4e0b\u6807\uff0cblob\u62c6\u5206\u6210\u51e0\u5757\u3002\u6bd4\u5982\u8981\u62c6\u5206channel\uff0c\u603b\u657050\uff0c\u4e0b\u6807\u4e3a10,20,30,40\uff0c\u90a3\u5c31\u662f\u5206\u62105\u4efd\uff0c\u6bcf\u4efd10\u4e2achannel\uff0c\u8f93\u51fa5\u4e2alayer\u3002 concat\uff1a\u5728\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u5c06\u8f93\u5165\u7684layer\u7ec4\u5408\u8d77\u6765\uff0c\u662fslice\u7684\u9006\u8fc7\u7a0b\u3002 split\uff1a\u5c06blob\u590d\u5236\u51e0\u4efd\uff0c\u5206\u522b\u7ed9\u4e0d\u540c\u7684layer\uff0c\u8fd9\u4e9b\u4e0a\u5c42layer\u5171\u4eab\u8fd9\u4e2ablob\u3002 tile\uff1a\u5c06blob\u7684\u67d0\u4e2a\u7ef4\u5ea6\uff0c\u6269\u5927n\u500d\u3002\u6bd4\u5982\u539f\u6765\u662f1234\uff0c\u6269\u5927\u4e24\u500d\u53d8\u621012341234\u3002 reduction\uff1a\u5c06\u67d0\u4e2a\u7ef4\u5ea6\u7f29\u51cf\u81f31\u7ef4\uff0c\u65b9\u6cd5\u53ef\u4ee5\u662fsum\u3001mean\u3001asum\u3001sumsq\u3002 reshape\uff1a\u8fd9\u4e2a\u5f88\u7b80\u5355\uff0c\u5c31\u662fmatlab\u91cc\u7684reshape\u3002 eltwise\uff1a\u5c06\u51e0\u4e2a\u540c\u6837\u5927\u5c0f\u7684layer\uff0c\u5408\u5e76\u4e3a1\u4e2a\uff0c\u5408\u5e76\u65b9\u6cd5\u53ef\u4ee5\u662f\u76f8\u52a0\u3001\u76f8\u4e58\u3001\u53d6\u6700\u5927\u3002 flatten\uff1a\u5c06\u4e2d\u95f4\u67d0\u51e0\u7ef4\u5408\u5e76\uff0c\u5176\u5b9e\u53ef\u4ee5\u7528reshape\u4ee3\u66ff\u3002 # \u4e3e\u4f8b:Tile\u5c42 layer { name : \"tile1\" type : \"Tile\" bottom : \"Features\" top : \"tile1\" tile_param { axis : 2 # \u8981\u6269\u7ef4\u7684\u7ef4\u5ea6 tiles : 2 # \u8981\u6269\u7ef4\u7684\u500d\u6570 } } # scale\u5c42,\u4e24\u4e2a\u8f93\u5165\u7684\u65f6\u5019\u662f\u70b9\u79ef\u4e58\uff0c\u8fd9\u4e2a\u4f1a\u81ea\u52a8\u5e7f\u64ad\uff0celwise\u4e5f\u53ef\u4ee5\u5b8c\u6210\u4f46\u4e0d\u4f1a\u81ea\u52a8\u5e7f\u64ad layer { name : \"inception_3a_prob_reshape\" type : \"Reshape\" bottom : \"inception_3a_1x1_up\" top : \"inception_3a_prob_reshape\" reshape_param { shape { dim : 0 dim : 0 } } } layer { name : \"inception_3a_scale\" type : \"Scale\" bottom : \"inception_3a/concat\" bottom : \"inception_3a_prob_reshape\" top : \"inception_3a/output\" scale_param { axis : 0 bias_term : false } }","title":"cafee\u7684\u4e00\u4e9b\u7279\u6b8a\u5c42"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#deployprototxt","text":"1.\u6539\u5199\u8f93\u5165\u6570\u636e\u5c42 # 1.\u53bb\u9664train_val.prototxt\u7684\u6570\u636e\u8f93\u5165\u5c42 # 2.\u6dfb\u52a0test\u7684\u6570\u636e\u8f93\u5165\u5c42 layer { name : \"data\" type : \"Input\" # \u6ce8\u610f\u8be5type top : \"data\" input_param { shape : { dim : 1 dim : 3 dim : 224 dim : 224 } } } 2.\u4e2d\u95f4\u7684cv\u5c42\u65e0\u9700\u6539\u52a8 3.\u6539\u5199\u5c3e\u90e8\u5c42 # 1.\u53bb\u9664Accuracy\u548closs\u5c42(SoftmaxWithLoss\u5c42)\uff0closs\u6709\u51e0\u4e2a\u5220\u9664\u5e76\u6539\u5199\u51e0\u4e2a # 2.\u6dfb\u52a0\u9884\u6d4b\u5c42 layer { name: \"prob\" type: \"Softmax\" bottom: \"ip2\" top: \"prob\" }","title":"deploy.prototxt\u6587\u4ef6\u6539\u5199"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#logaccloss","text":"#!/usr/bin/python # -*- coding: UTF-8 -*- import os import numpy as np import matplotlib.pyplot as plt import sys import math #\u89e3\u6790\u51fa\u8bad\u7ec3\u548c\u6d4b\u8bd5\u7684log\u4fe1\u606f def get_loss_acc ( log_path ): train_iters = [] train_losses = [] test_iters = [] test_losses = [] test_accs = [] train_accs = [] learn_rates = [] log = open ( log_path , \"r\" , encoding = 'utf-8' ) for line in log : #train iter & loss if \"Iteration\" in line and \"loss\" in line : iter = int (( line . strip () . split ()[ 5 ]) . split ( \",\" )[ 0 ]) #print (iter) train_loss = float ( line . strip () . split ()[ - 1 ]) train_iters . append ( iter ) #print (train_loss) train_losses . append ( train_loss ) #test iter if \"Iteration\" in line and \"Testing\" in line : test_iter = int ( line . strip () . split ()[ 5 ][: - 1 ]) test_iters . append ( test_iter ) #test loss if \"Test net output #1\" in line : test_loss = float (( line . strip () . split ( ' = ' )[ - 1 ])[: - 6 ]) test_losses . append ( test_loss ) #test acc if \"Test\" in line and \"acc\" in line : acc = float ( line . strip () . split ( \"=\" )[ - 1 ]) test_accs . append ( acc ) # train acc if \"Train\" in line and \"acc\" in line : acc = float ( line . strip () . split ( \"=\" )[ - 1 ]) train_accs . append ( acc ) #train lr if \"lr\" in line and \"Iteration\" in line : lr = float ( line . strip () . split ( \"=\" )[ - 1 ]) learn_rates . append ( lr ) #\u6709\u65f6\u5b66\u4e60\u7387\u4e2a\u6570\u548ctrain iter\u7684\u4e2a\u6570\u4e0d\u76f8\u7b49\uff0c\u8fd9\u91cc\u4f7f\u7528\u6700\u540e\u51e0\u6b21\u7684\u5b66\u4e60\u7387\u8865\u9f50 while ( len ( learn_rates ) < len ( train_iters )): learn_rates . append ( learn_rates [ - 1 ]) return train_iters , train_losses , test_iters , test_losses , test_accs , learn_rates , train_accs #\u753b\u591a\u4e2a\u66f2\u7ebf\uff0c\u4e00\u5f20\u56fe\u4e0a\u753bacc,train loss,test loss\uff0clr def plot_muilti_figs ( log_path , log_file , log_fig ): train_iters , train_losses , test_iters , test_losses , test_accs , learn_rates , train_accs = get_loss_acc ( log_path + \"/\" + log_file ) print ( \"train iters: \" , len ( train_iters )) print ( \"train losses: \" , len ( train_losses )) print ( \"test iters: \" , len ( test_iters )) print ( \"test losses: \" , len ( test_losses )) print ( \"train accs: \" , len ( train_accs )) print ( \"test accs: \" , len ( test_accs )) print ( \"learn_rates: \" , len ( learn_rates )) fig = plt . figure ( figsize = ( 12 , 9 )) #\u753b\u5e03\u5927\u5c0f\u4e3a1200*900\uff0c\u9ed8\u8ba4\u662f800*600\uff0c\u4e5f\u5c31\u662ffigsize=(8,6) plt . subplot ( 211 ) plt . plot ( train_iters , train_losses , 'b-' , label = \"train loss\" ) plt . plot ( test_iters , test_losses , 'r-' , label = \"test loss\" ) plt . legend ( loc = 1 , ncol = 1 ) # ajust ncol to fit the space plt . grid ( True ) plt . subplot ( 223 ) plt . plot ( train_iters , train_accs , 'r-' , label = \"train_acc\" ) plt . plot ( test_iters , test_accs , 'g-' , label = \"val_acc\" ) plt . legend ( loc = 'lower right' ) #plt.legend(loc = 5, ncol = 1) # ajust ncol to fit the space plt . grid ( True ) plt . subplot ( 224 ) plt . plot ( train_iters , learn_rates , \"m\" , label = \"lr\" ) plt . legend ( loc = 1 , ncol = 1 ) # ajust ncol to fit the space plt . grid ( True ) #\u7f6e\u4e8e\u6240\u6709\u753b\u56fe\u7a0b\u5e8f\u6700\u540e\uff0c\u4f46\u5728show\u51fd\u6570\u524d,\u4f7f\u6574\u4e2a\u56fe\u66f4\u534f\u8c03\uff0c\u6587\u5b57\u4e0d\u91cd\u53e0,\u82e5\u6570\u5b57\u592a\u591a\uff0c\u53ef\u9002\u5f53\u589e\u5927\u753b\u5e03\u5c3a\u5bf8 fig . tight_layout () plt . savefig ( log_path + \"/\" + log_fig + \".png\" ) plt . show () if __name__ == \"__main__\" : log_path = os . getcwd () #\u4e0elog\u6587\u4ef6\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u5939\u4e0b log_file = sys . argv [ 1 ] #\u8bad\u7ec3log\u6587\u4ef6\u540d log_fig = sys . argv [ 2 ] #\u8981\u4fdd\u5b58\u7684\u56fe\u7247\u540d\u79f0\uff0c\u4e0d\u5e26\u540e\u7f00 plot_muilti_figs ( log_path , log_file , log_fig )","title":"\u6839\u636elog\u7ed8\u5236acc+loss"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#pythonapi","text":"\u63a8\u7406python\u4ee3\u7801 #caffe.set_cpu() caffe . set_device ( 0 ) caffe . set_model_gpu () deploy = \"xxx.prototxt\" model = \"xxx.caffemodel\" # \u6570\u636e\u9884\u5904\u7406 transformer = caffe . io . Transformer ({ 'data' : net . blobs [ 'data' ] . data . shape }) transformer . set_transpose ( 'data' ,( 2 , 0 , 1 )) # h,w,c --> c,h,w #mu = np.load(\"xxx_mean.npy\") # mean\u6587\u4ef6 #mu = mu.mean(1).mean(1) # \u5bf9\u6240\u6709\u50cf\u7d20\u503c\u53d6\u5e73\u5747\u4ee5\u6b64\u83b7\u53d6BGR\u7684\u5747\u503c\u50cf\u7d20\u503c #transformer.set_mean('data',mu) # \u5bf9\u4e8e\u6bcf\u4e2a\u901a\u9053\uff0c\u51cf\u53bbBGR\u7684\u5747\u503c\u50cf\u7d20 transformer . set_mean ( 'data' , np . array ([ 127.5 ])) transformer . set_input_scale ( 'data' , 0.0078125 ) transformer . set_raw_scale ( 'data' , 255 ) # \u5c06\u50cf\u7d20\u503c\u4ece[0,255]-->[0,1]\u4e4b\u95f4 transformer . set_channel_swap ( 'data' ,( 2 , 1 , 0 )) # RGB->BGR image = caffe . io . load_image ( \"xxx.jpg\" ) # plt.imshow(image);plt.show() data = transformer . preprocess ( 'data' , image ) # \u524d\u5411\u4f20\u64ad net = caffe . Net ( deploy , model , caffe . TEST ) net . blobs [ 'data' ] . reshape ( 1 , 3 , data . shape [ 1 ], data . shape [ 2 ]) # data->(c,h,w) net . blobs [ 'data' ] . data [ ... ] = data out = net . forward () # \u83b7\u53d6blob\u7684\u5404\u5c42\u540d\u5b57\u4ee5\u53cashape:(n,c,h,w) for layer_name , blob in net . blobs . items (): print ( layer_name , blob . data . shape ) # \u663e\u793a\u5404\u5c42\u7684\u53c2\u6570\u4fe1\u606f\uff1a # layer_name:\u6743\u91cd\u540d # param[0]:weights->(output_channels, input_channels, filter_height, filter_width) # param[1]:bias-->(output_channels,) for layer_name , param in net . params . items (): print ( layer_name , param [ 0 ] . data . shape ) # \u663e\u793a\u5404\u5c42\u7684type for index , layer in enumerate ( net . layers ): print ( layer . type ) print ( net . _layer_names [ index ]) # \u663e\u793alayer\u7684name # \u663e\u793a\u5404\u5c42\u7279\u5f81\u56fe def show_data ( data , padsize = 1 , padval = 0 ): data -= data . min () data /= data . max () # force the number of filters to be square n = int ( np . ceil ( np . sqrt ( data . shape [ 0 ]))) padding = (( 0 , n ** 2 - data . shape [ 0 ]), ( 0 , padsize ), ( 0 , padsize )) + (( 0 , 0 ),) * ( data . ndim - 3 ) data = np . pad ( data , padding , mode = 'constant' , constant_values = ( padval , padval )) # tile the filters into an image data = data . reshape (( n , n ) + data . shape [ 1 :]) . transpose (( 0 , 2 , 1 , 3 ) + tuple ( range ( 4 , data . ndim + 1 ))) data = data . reshape (( n * data . shape [ 1 ], n * data . shape [ 3 ]) + data . shape [ 4 :]) plt . figure () plt . imshow ( data , cmap = 'gray' ) plt . axis ( 'off' ) # \u8c03\u7528 show_data ( net . blobs [ 'conv2' ] . data [ 0 ], padval = 0.5 ) # \u663e\u793a\u5168\u90e8 show_data ( net . blobs [ 'conv3' ] . data [ 0 ][ 1 : 100 ], padval = 0.5 ) # \u53d6\u524d100\u4e2a\u8fdb\u884c\u663e\u793a(\u6570\u91cf\u592a\u591a\u770b\u4e0d\u6e05,\u53ef\u4ee5\u5148\u9009\u62e9\u90e8\u5206\u663e\u793a) caffe.proto from caffe.proto import caffe_pb2 from google.protobuf import text_format import google.protobuf as pb # 1.\u52a0\u8f7d\u5904\u7406deploy.prototxt deploy = \"xx.prototxt\" with open ( deploy ) as f : train_str = f . read () # \u4e00\u6b21\u8bfb\u53d6\u6240\u6709\u5185\u5bb9 train_net = caffe_pb2 . NetParameter () # \u5efa\u7acb\u4e00\u4e2a\u7a7a\u7684prototxt text_format . Merge ( train_str , train_net ) # \u586b\u5145\u7a7a\u7684prototxt\uff0c\u65b9\u4fbf\u4f7f\u7528python\u4ee3\u7801\u8bbf\u95ee\u5404\u5c42\u548c\u5404\u53c2\u6570 #\u7b49\u4ef7\u4e8e text_format.Parse(train_str,train_net) # \u6e05\u9664\u8be5\u6a21\u578b train_net . Clear () # \u904d\u5386prototxt\u7684\u6240\u6709\u5c42 for layer in train_net . layer : # layer.type->'xxx',layer.top/bottom->['xxx'] print ( layer . name , layer . type , layer . bottom , layer . top , layer . xx_param , .... ) # \u6253\u5370\u6bcf\u5c42\u7684\u53c2\u6570 # \u79fb\u51fa\u67d0\u4e00\u5c42 train_net . layer . remove ( train_net . layer [ 1 ]) # \u79fb\u51fa\u67d0\u5c42\u67d0\u53c2\u6570 train_net . layer [ 0 ] . include . remove ( train_net . layer [ 0 ] . include [ 0 ]) # \u4fee\u6539\u67d0\u5c42\u67d0\u53c2\u6570 train_net . layer [ 6 ] . convolution_param . bias_term = False # \u8bbe\u7f6e\u67d0\u5c42\u5377\u79ef\u7684bias_term\u4e3aFalse # \u5b58\u50a8prototxt with open ( \"save.prototxt\" , 'w' ) as fs : fs . write ( text_format . MessageToString ( train_net )) # 2.\u52a0\u8f7d\u5904\u7406caffemodel model_path = \"xxx.caffemodel\" net = caffe_pb2 . NetParameter () with open ( model_path , 'rb' ) as fp : train_net_str = fp . read () net . ParseFromString ( train_net_str ) # \u6b64\u65f6net\u5df2\u7ecf\u52a0\u8f7d\u8fdb\u6765\u4e86 # \u5b58\u50a8caffemodel net . save ( \"save.caffemodel\" )","title":"\u5e38\u7528PythonApi"},{"location":"caffe%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#c","text":"\u5199 xxx.hpp \uff0c\u653e\u5230 caffe/include/caffe/layers \u5199 xxx.cpp \uff0c\u653e\u5230 caffe/src/caffe/layers \u5982\u679c\u8be5\u5c42\u6709\u53c2\u6570\u9700\u8981\u4fee\u6539 caffe/src/proto/caffe.proto \u65e0\u53c2\u6570\u5c42 \u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u6700\u7cbe\u7b80\u7684\u5c42\uff0c\u8be5\u5c42\u6ca1\u6709\u914d\u7f6e\u53c2\u6570\uff0cdata\u4ecebottom\u8fdb\u6765\uff0c\u53c8\u4ecetop\u51fa\u53bb\uff0c\u6ca1\u505a\u4efb\u4f55\u5176\u4ed6\u64cd\u4f5c\u3002\u6240\u4ee5\u65e0\u9700\u4fee\u6539 proto \u6587\u4ef6\uff0c\u628a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u653e\u5230\u5bf9\u5e94\u4f4d\u7f6e\u540e\uff0c\u7f16\u8bd1\u5373\u53ef\u4f7f\u7528 layer { name: \"NewLayer\" type: \"New\" #\u5b9a\u4e49 bottom: \"data\" top: \"data\" } // xxx.hpp #ifndef CAFFE_NEW_LAYER_HPP_ #define CAFFE_NEW_LAYER_HPP_ #include <vector> #include \"caffe/blob.hpp\" #include \"caffe/layer.hpp\" #include \"caffe/proto/caffe.pb.h\" namespace caffe { template < typename Dtype > class NewLayer : public Layer < Dtype > { public : explicit NewLayer ( const LayerParameter & param ) : Layer < Dtype > ( param ) {} virtual void LayerSetUp ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ){}; virtual void Reshape ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ){}; protected : virtual void Forward_cpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ); virtual void Backward_cpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ); virtual void Forward_gpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ){}; virtual void Backward_gpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ){}; }; } #endif // xxx.cpp #include <vector> #include \"caffe/layers/new_layer.hpp\" namespace caffe { template < typename Dtype > void NewLayer < Dtype >:: Forward_cpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); Dtype * top_data = top [ 0 ] -> mutable_cpu_data (); const int count = bottom [ 0 ] -> count (); for ( int i = 0 ; i < count ; ++ i ) { top_data [ i ] = bottom_data [ i ]; } } template < typename Dtype > void NewLayer < Dtype >:: Backward_cpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ) { if ( propagate_down [ 0 ]) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); const Dtype * top_diff = top [ 0 ] -> cpu_diff (); Dtype * bottom_diff = bottom [ 0 ] -> mutable_cpu_diff (); const int count = bottom [ 0 ] -> count (); for ( int i = 0 ; i < count ; ++ i ) { bottom_diff [ i ] = top_diff [ i ]; } } } #ifdef CPU_ONLY STUB_GPU ( NewLayer ); #endif INSTANTIATE_CLASS ( NewLayer ); //\u7c7b\u540d\uff0c\u6ce8\uff1a\u8fd9\u4e2a\u7c7b\u540d\u4e0eprototxt\u6587\u4ef6\u4e2d\u7684\u5c42\u540d\u4e0d\u9700\u4e00\u81f4 REGISTER_LAYER_CLASS ( New ); // \u5bf9\u5e94\u5c42\u7684\u7c7b\u578b } // namespace caffe \u6dfb\u52a0\u5e26\u53c2\u6570\u7684\u5c42 layer { name: \"NewLayer\" type: \"New\" bottom: \"data\" top: \"data\" new_param { coeff1: 1 .0 coeff2: 2 .0 } } // xxx.hpp \u548c\u4e0a\u9762\u4e00\u6837 // xxx.cpp #include <vector> #include \"caffe/layers/new_layer.hpp\" namespace caffe { template < typename Dtype > void NewLayer < Dtype >:: Forward_cpu ( const vector < Blob < Dtype >*>& bottom , const vector < Blob < Dtype >*>& top ) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); Dtype * top_data = top [ 0 ] -> mutable_cpu_data (); const int count = bottom [ 0 ] -> count (); float coeff = this -> layer_param_ . new_param (). coeff1 (); // \u83b7\u53d6\u53c2\u6570 LOG ( INFO ) << \"NewLayer, Forward_cpu:\" << coeff ; for ( int i = 0 ; i < count ; ++ i ) { top_data [ i ] = bottom_data [ i ]; } } template < typename Dtype > void NewLayer < Dtype >:: Backward_cpu ( const vector < Blob < Dtype >*>& top , const vector < bool >& propagate_down , const vector < Blob < Dtype >*>& bottom ) { float coeff = this -> layer_param_ . new_param (). coeff2 (); // \u83b7\u53d6\u53c2\u6570 LOG ( INFO ) << \"NewLayer, Backward_cpu:\" << coeff ; if ( propagate_down [ 0 ]) { const Dtype * bottom_data = bottom [ 0 ] -> cpu_data (); const Dtype * top_diff = top [ 0 ] -> cpu_diff (); Dtype * bottom_diff = bottom [ 0 ] -> mutable_cpu_diff (); const int count = bottom [ 0 ] -> count (); for ( int i = 0 ; i < count ; ++ i ) { bottom_diff [ i ] = top_diff [ i ]; } } } #ifdef CPU_ONLY STUB_GPU ( NewLayer ); #endif INSTANTIATE_CLASS ( NewLayer ); //\u7c7b\u540d\uff0c\u5bf9\u5e94prototxt\u6587\u4ef6\u4e2d\u7684\u5c42\u540d REGISTER_LAYER_CLASS ( New ); // \u5bf9\u5e94\u5c42\u7684\u7c7b\u578btype } // namespace caffe // \u4fee\u6539caffe.proto\uff0c\u9700\u8981\u4fee\u6539\u4e24\u5904 // 1.\u5728message LayerParameter\u4e0b\u6dfb\u52a0 optional NewParameter new_param = 151 ; // \u6ce8\u610f\u8bbe\u5b9a\u7684ID\u503c\u4e0d\u80fd\u4e0e\u5176\u4ed6\u5df2\u8bbe\u7f6e\u7684\u6709\u76f8\u540c\uff0c\u800cmessage LayerParameter\u4e0a\u9762\u6ce8\u660e\u4e86\u53ef\u4ee5\u8bbe\u5b9a\u7684\u3001\u6ca1\u6709\u51b2\u7a81\u7684ID\u503c\u3002 // 2.\u5728\u5176\u4ed6\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u4e2aNewLayer\u5c42\u7684message\u51fd\u6570\uff1a message NewParameter { optional float coeff1 = 1 [ default = 1 ]; optional float coeff2 = 2 [ default = 2 ]; }","title":"\u81ea\u5b9a\u4e49C++\u5c42"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/","text":"java\u57fa\u7840 \u00b6 // 1.\u7b2c\u4e00\u4e2ajava\u7a0b\u5e8f // \u7c7b\u540d:\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5927\u5c0f\u5199\u654f\u611f\u3002public:\u516c\u5f00\u7684\u3002static:\u9759\u6001\u7684 package yuyang ; public class Hello { public static void main ( String [] args ) { System . out . println ( \"Hello, world!\" ); } } // 1.1 \u5305:package \u7c7b\u4f3cc++\u7684namespace\uff0c\u5305\u53ef\u4ee5\u6709\u591a\u5c42\u7ed3\u6784\uff0c\u7528.\u9694\u5f00:yuyang.utils.xxx // 1.1.1 \u4e0d\u540cpackage\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784 package_sample // \u6839\u76ee\u5f55 - src // \u653e\u7f6e\u6e90\u7801 - hong - Person . java - ming - Person . java - mt - yang - Arrays . java // 1.1.2 \u540c\u4e00\u4e2a\u5305\u4e0b\u7684\u7c7b\u95f4\u8bbf\u95ee\u65e0\u9700import xxx,\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee:\u4f8b\u5982Main\u7c7b\u4e2d\u8bbf\u95eePerson\u7c7b new Person(); // 1.1.3 \u8bbf\u95ee\u5176\u4ed6\u5305\u4e0b\u9762\u7684\u7c7b import mt.yang.Arrays // import mt.yang.* // \u5bfc\u5165\u8fd9\u4e2a\u5305\u4e0b\u6240\u6709\u7c7b public class Person { public void run () { Arrays arrays = new Arrays (); } } // \u6269\u5c55:\u5bfc\u5165\u4e00\u4e2a\u7c7b\u4e2d\u6240\u6709\u7684\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u65b9\u6cd5 import static java.lang.System.* ; // \u5bfc\u5165System\u7c7b\u7684\u6240\u6709\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u65b9\u6cd5: // 1.2 \u547d\u4ee4\u884c\u53c2\u6570: String[] args for ( String arg : args ) { // \u904d\u5386\u8f93\u51fa System . out . println ( arg ); } // 2.\u6570\u636e\u7c7b\u578b // \u6574\u6570\u7c7b\u578b\uff1abyte\uff0cshort\uff0cint\uff0clong\u3002\u4e3e\u4f8b:int x = 100; // \u6d6e\u70b9\u6570\u7c7b\u578b\uff1afloat\uff0cdouble\u3002\u4e3e\u4f8b:float y = 1.34f;// f\u540e\u7f00\u662f\u5fc5\u987b\u7684 // \u5b57\u7b26\u7c7b\u578b\uff1achar\u3002\u4e3e\u4f8b:char a = 'a'/'\u4e2d'; // \u90fd\u5360\u4e24\u4e2a\u5b57\u8282\u3002\u5355\u5f15\u53f7\u8868\u793a\uff0c\u53cc\u5f15\u53f7\u662f\u5b57\u7b26\u4e32 // \u5b57\u7b26\u4e32\u7c7b\u578b\uff1a\u5b57\u7b26\u4e32\u62fc\u63a5: +\u3002\u5185\u5bb9\u4e0d\u53ef\u53d8\u7279\u6027:\u53d8\u91cf\u7c7b\u4f3c\u6307\u9488\u3002\u7a7a\u503c:null\u8868\u793a(null != \"\") //\u8f6c\u4e49\u5b57\u7b26: \\\":\",\\':,\\\\:\\,\\n:\u6362\u884c,\\r:\u56de\u8f66,\\t:tab\u7b26,\\u####:\u8868\u793a\u4e00\u4e2aUnicode\u7f16\u7801\u7684\u5b57\u7b26 //\u5b57\u7b26\u4e32\u7c7b\u578b\uff1as1==s2:s1\u548cs2\u5fc5\u987b\u6307\u5411\u540c\u4e00\u5bf9\u8c61(\u5565\u90fd\u4e00\u6837)\uff0cs1.equals(s2):s1\u548cs2\u53ea\u8981\u7c7b\u578b+\u5185\u5bb9\u76f8\u540c\u5c31\u884c //s1.equals(s2)\u65f6\uff0c\u5982\u679c\u53d8\u91cfs1\u4e3anull\uff0c\u4f1a\u62a5NullPointerException\uff0c\u6240\u4ee5:if (\"hello\".equals(s))\u6216 \u8005if (s1 != null && s1.equals(\"hello\")) // \u5e03\u5c14\u7c7b\u578b\uff1aboolean\u3002\u4e3e\u4f8b:boolean b1 = true/false; // \u5e38\u91cf(\u4e0d\u53ef\u4e8c\u6b21\u8d4b\u503c)\uff1afinal double PI = 3.14; // final\u4fee\u9970\u5e38\u91cf\uff0c\u5e38\u91cf\u540d\u5e38\u5927\u5199\u3002 // var\u7c7b\u578b\uff0cvar sb = new StringBuilder();//\u7cfb\u7edf\u81ea\u52a8\u63a8\u65advar\u4e3aStringBuilder\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u53d8\u91cf\u540d\u592a\u957f,\u7b80\u5199 // \u7c7b\u578b\u5f3a\u8f6c: // 2.1 \u5927\u8303\u56f4\u8f6c\u5c0f\u8303\u56f4\uff0c\u5f3a\u5236\u8f6c\u6362:() --> int i=10;short a = (short)i; \u8d85\u51fa\u8303\u56f4\u53ef\u80fd\u5f97\u5230\u9519\u8bef\u7ed3\u679c\u3002 // 2.2 \u5c0f\u8303\u56f4\u8f6c\u5927\u8303\u56f4\uff0c\u81ea\u52a8\u8f6c\u6362:short+int=int\uff0cshort<int<float<String(\u6700\u9ad8\u7ea7\u522b) // 2.3 \u6570\u7ec4 int [] ns = new int [ 5 ] ; //\u8bbf\u95ee:ns[0]\u3002\u957f\u5ea6:ns.length\u3002\u9ed8\u8ba4\u503c:int=0,float=0.0,boolean=false; int [] ns = new int [] { 68 , 79 , 91 , 85 , 62 }; // \u6307\u5b9a\u521d\u59cb\u5316\u5143\u7d20\uff0c\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u65ad\u5927\u5c0f int [] ns = { 68 , 79 , 91 , 85 , 62 }; // \u8fdb\u4e00\u6b65\u7b80\u5199\u3002 String [] names = { \"aa\" , \"bb\" , \"cc\" }; // 3.\u8fd0\u7b97\uff0c\u6ce8\u610f:\u5982\u679c\u8ba1\u7b97\u7ed3\u679c\u8d85\u51fa\u4e86\u8303\u56f4\uff0c\u5c31\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u800c\u6ea2\u51fa\u4e0d\u4f1a\u51fa\u9519\uff0c\u5374\u4f1a\u5f97\u5230\u4e00\u4e2a\u5947\u602a\u7684\u7ed3\u679c int x = 120 / 11 ; // 10:\u5c5e\u4e8e\u6574\u9664\u7ed3\u679c n += 100 / n -= 100 ; n ++/ n -- ; int a = n << 1 ; // \u79fb\u4f4d\u64cd\u4f5c: \u500d\u589e:<<\uff0c\u500d\u51cf:>>\uff0c\u7b26\u53f7\u4f4d\u8ddf\u7740\u53f3\u79fb\u8fd0\u7b97:n>>>1; n = 0 & 0 ; // \u4f4d\u8fd0\u7b97:& | ~ ^(\u5f02\u6216) // 3.1 \u6ce8\u610f:\u6d6e\u70b9\u6570\u8fd0\u7b97\u5b58\u5728\u7740\u8bef\u5dee\u3002\u4f8b\u59820.1\u6362\u7b97\u6210\u4e8c\u8fdb\u5236\u662f\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u7684\u5c0f\u6570\uff0c\u53ea\u80fd\u8fd1\u4f3c\u5b58\u50a8\u3002 // 3.2 \u5e03\u5c14\u8fd0\u7b97 && || ! > >= < <= == != false && x // \u7ed3\u679c\u603b\u662ffalse\uff0c\u5c5e\u4e8e\u77ed\u8def\u8fd0\u7b97\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2afalse\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u7b2c\u4e8c\u4e2a\u4e0d\u4f1a\u88ab\u8ba1\u7b97 // 3.3 \u4e09\u5143\u8fd0\u7b97\u7b26 b ? x : y ; // b\u8868\u8fbe\u5f0f\u4e3atrue,return x,else return y;// x\u548cy\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c // 4.\u6d41\u7a0b\u63a7\u5236 // 4.0 \u8f93\u5165\u64cd\u4f5c import java.util.Scanner ; // \u5bfc\u5165\u67d0\u4e2a\u7c7b ... // System.out\u4ee3\u8868\u6807\u51c6\u8f93\u51fa\u6d41\uff0c\u800cSystem.in\u4ee3\u8868\u6807\u51c6\u8f93\u5165\u6d41 Scanner scanner = new Scanner ( System . in ); //\u521b\u5efaScanner\u5bf9\u8c61 String name = scanner . nextLine (); // \u8bfb\u53d6\u4e00\u884c\u8f93\u5165\u5e76\u83b7\u53d6\u5b57\u7b26\u4e32 int age = scanner . nextInt (); // \u8bfb\u53d6\u4e00\u884c\u8f93\u5165\u5e76\u83b7\u53d6\u6574\u6570,Scanner\u4f1a\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7c7b\u578b,\u56e0\u6b64\u4e0d\u5fc5\u624b\u52a8\u8f6c\u6362\u3002 ... // 4.1 \u683c\u5f0f\u5316\u8f93\u51fa:%(\u5360\u4f4d\u7b26) // %d \u683c\u5f0f\u5316\u8f93\u51fa\u6574\u6570 // %x \u683c\u5f0f\u5316\u8f93\u51fa\u5341\u516d\u8fdb\u5236\u6574\u6570 // %f \u683c\u5f0f\u5316\u8f93\u51fa\u6d6e\u70b9\u6570 // %e \u683c\u5f0f\u5316\u8f93\u51fa\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\u7684\u6d6e\u70b9\u6570 // %s \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 // %% \u8868\u793a\u4e00\u4e2a%\u5b57\u7b26\u672c\u8eab System . out . print ( \"xxx \" ); // \u4e0d\u6362\u884c System . out . printf ( \"a = %.2f,b = %08x\" , d , d ); // a=2\u4f4d\u5c0f\u6570,b=\u683c\u5f0f\u5316\u6210\u5341\u516d\u8fdb\u5236\uff0c\u5e76\u75280\u8865\u8db38\u4f4d. // 4.2 if\u8bed\u53e5 if ( n >= 90 ) { // ... } else if ( n >= 60 ) { // ... } else { // ... } // 4.3 switch,\u5fc5\u987b\u4fdd\u8bc1\u6709break switch ( option ) { case 3 : ... break ; case 2 : ... break ; case 1 : ... break ; default : ... break ; } // \u4e0d\u5e26break\u7684switch\u5982\u4f55\u5199\uff1f switch ( fruit ) { case \"apple\" -> System . out . println ( \"Selected apple\" ); case \"pear\" -> System . out . println ( \"Selected pear\" ); // case \"apple\",\"pear\" -> System.out.println(\"Selected apple or pear\"); case \"mango\" -> { // \u65b0\u7b26\u53f7->,\u5982\u679c\u6709\u591a\u6761\u8bed\u53e5\uff0c\u4f7f\u7528{}\u5305\u88f9 System . out . println ( \"Selected mango\" ); System . out . println ( \"Good choice!\" ); } default -> System . out . println ( \"No fruit selected\" ); } // 4.4 while\u5faa\u73af while ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { // \u5faa\u73af\u8bed\u53e5 } // do-while\u5faa\u73af do { \u6267\u884c\u5faa\u73af\u8bed\u53e5 } while ( \u6761\u4ef6\u8868\u8fbe\u5f0f ); // 4.5 for\u5faa\u73af for ( \u521d\u59cb\u6761\u4ef6 ; \u5faa\u73af\u68c0\u6d4b\u6761\u4ef6 ; \u5faa\u73af\u540e\u66f4\u65b0\u8ba1\u6570\u5668 ) { // \u6267\u884c\u8bed\u53e5 } // \u4e3e\u4f8b\u5b50 for ( int i = 1 ; i <= 100 ; i ++ ) { // \u521d\u59cb\u5316\u53ef\u4ee5\u5728for\u5185\u90e8int i=1; sum = sum + i ; } // \u9ad8\u7ea7\u7528\u6cd5 // 4.5.1 \u4e0d\u8bbe\u7f6e\u7ed3\u675f\u6761\u4ef6: for ( int i = 0 ; ; i ++ ) { ... } //4.5.2 \u4e0d\u8bbe\u7f6e\u7ed3\u675f\u6761\u4ef6\u548c\u66f4\u65b0\u8bed\u53e5: for ( int i = 0 ; ;) { ... } // 4.5.3 \u4ec0\u4e48\u90fd\u4e0d\u8bbe\u7f6e: for (;;) { ... } // 4.6 for-each\u5faa\u73af:\u5e38\u7528\u6765\u904d\u5386\u6570\u7ec4,\u56e0\u4e3a\u6570\u7ec4\u53ef\u8fed\u4ee3(Array,List,Map,...) int [] ns = { 1 , 4 , 9 , 16 , 25 }; for ( int n : ns ) { // n\u76f4\u63a5\u8868\u793a\u5143\u7d20 System . out . println ( n ); } // 5 \u6570\u7ec4\u64cd\u4f5c // 5.1 \u6570\u7ec4\u6392\u5e8f import java.util.Arrays ; int [] ns = { 28 , 12 , 89 , 73 , 65 , 18 , 96 , 50 , 8 , 36 }; System . out . println ( Arrays . toString ( ns )); // \u6392\u5e8f\u524d Arrays . sort ( ns ); // \u5f00\u59cb\u6392\u5e8f System . out . println ( Arrays . toString ( ns )); // \u6392\u5e8f\u540e // 5.2 \u591a\u7ef4\u6570\u7ec4 int [][] ns = { { 1 , 2 , 3 , 4 }, { 5 , 6 , 7 , 8 }, { 9 , 10 , 11 , 12 } }; ns [ 1 ][ 2 ] ; // \u8bbf\u95ee // \u5faa\u73af\u8bbf\u95ee for ( int [] arr : ns ) { for ( int n : arr ) { System . out . print ( n ); System . out . print ( ' , ' ); } System . out . println (); } \u9762\u5411\u5bf9\u8c61\u7f16\u7a0b \u00b6 // 1 \u7c7b class Person { private String name ; // \u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u53ef\u8bbf\u95ee,\u5982\u679c\u6ca1\u8d4b\u503c,\u9ed8\u8ba4String=null,int=0,boolean=false; private int age ; // \u6784\u9020\u65b9\u6cd5:\u65e0\u8fd4\u56de\u503c\uff0c\u540d\u79f0\u662f\u7c7b\u540d\uff0c\u53c2\u6570\u65e0\u9650\u5236\uff0c\u8c03\u7528\u662f\u5fc5\u987b\u4f7f\u7528new,\u5982\u679c\u4e0d\u81ea\u5df1\u5b9a\u4e49\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\uff0c\u4e00\u65e6\u4e00\u5b9a\u540e\u5c31\u4e0d\u4f1a\u518d\u9ed8\u8ba4\u751f\u6210\u4e86\uff0c\u6240\u4ee5\u5e38\u5e38\u76f4\u63a5\u5b9a\u4e49\u4e24\u4e2a,\u6240\u4ee5\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a public Person (){ } public Person ( String name ) { this . name = name ; } // \u5f53\u7136\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u6784\u9020\u65b9\u6cd5,\u8c03\u7528\u65b9\u6cd5\uff0cthis() public Person ( String name , int age ){ this ( name ); this . age = age ; } // \u4e0b\u9762\u662f\u666e\u901a\u65b9\u6cd5\u7684\u4f7f\u7528 public String getName () { // \u516c\u6709\u65b9\u6cd5,\u5916\u90e8\u53ef\u4ee5\u8bbf\u95ee return this . name ; } public void setName ( String name ) { // \u5bf9name\u8fdb\u884c\u68c0\u67e5 if ( name == null || name . isBlank ()) { throw new IllegalArgumentException ( \"invalid name\" ); } // this\u53d8\u91cf:\u9690\u542b\u7684\u53d8\u91cfthis\uff0c\u5b83\u59cb\u7ec8\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u3002\u56e0\u6b64\uff0c\u901a\u8fc7this.field\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u5b9e\u4f8b\u7684\u5b57\u6bb5 this . name = name . strip (); // \u53bb\u6389\u9996\u5c3e\u7a7a\u683c } // \u65b9\u6cd5\u91cd\u8f7d:\u65b9\u6cd5\u540c\u540d\uff0c\u4f46\u53c2\u6570\u4e0d\u540c(\u53c2\u6570\u987a\u5e8f\u3001\u53c2\u6570\u7c7b\u578b\u7b49)\uff0c\u4e00\u822c\u800c\u8a00\u8fd4\u56de\u503c\u90fd\u662f\u76f8\u540c\u7684\u3002\u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u540c\u4e0d\u7b97 public void hello () { System . out . println ( \"Hello, world!\" ); } public void hello ( String name ) { System . out . println ( \"Hello, \" + name + \"!\" ); } } // 1.1 \u4fee\u9970\u7b26 private : \u5916\u90e8\u4ee3\u7801\u65e0\u6cd5\u8bbf\u95ee \uff0c \u5185\u90e8\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee // 1.2 \u65b9\u6cd5\u5b9a\u4e49 \u4fee\u9970\u7b26 \u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b \u65b9\u6cd5\u540d ( \u65b9\u6cd5\u53c2\u6570\u5217\u8868 ) { \u82e5\u5e72\u65b9\u6cd5\u8bed\u53e5 ; return \u65b9\u6cd5\u8fd4\u56de\u503c ; // \u5982\u679c\u65e0\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u7c7b\u578bvoid } // 1.3 \u65b9\u6cd5\u4f20\u53c2\uff0c\u53ef\u53d8\u53c2\u6570:\u53ef\u53d8\u53c2\u6570\u7528\u7c7b\u578b...\u5b9a\u4e49\uff0c\u53ef\u53d8\u53c2\u6570\u76f8\u5f53\u4e8e\u6570\u7ec4\u7c7b\u578b,\u6ce8\u610f\u53c2\u6570\u4e0d\u80fd\u662fnull public void setNames ( String ... names ){ this . names = names }; // \u8c03\u7528\u65f6\u4f20\u5165\u7684\u53c2\u6570\u4e2a\u6570\u53ef\u4ee5\u968f\u610f // \u7b49\u4ef7\u4e8e public void setNames ( String [] names ){ this . names = names } // 1.3.1 \u65b9\u6cd5\u7684\u5f15\u7528\u4f20\u53c2:\u4f8b\u5982\u4f20\u5165\u6570\u7ec4\u540d\uff0c\u8fd9\u6837\uff0c\u5916\u90e8\u7684\u6570\u7ec4\u6539\u53d8\uff0c\u65b9\u6cd5\u4e2d\u7684\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\uff0c\u7c7b\u4f3c\u6307\u9488 // 2 \u7ee7\u627f:extends\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u80fd\u4ece\u591a\u4e2a\u7c7b\u7ee7\u627f\uff0c\u4f46\u53ef\u4ee5\u5b9e\u73b0\u591a\u63a5\u53e3(\u89c1\u4e0b\u6587) class Student extends Person { // \u65e0\u9700\u91cd\u590d\u5199Person\u7c7b\u4e2d\u7684\u5df2\u6709\u65b9\u6cd5\uff0c\u56e0\u4e3a\u7ee7\u627f\u540e\u5df2\u7ecf\u5305\u542b // \u589e\u52a0\u65b0\u7684\u65b9\u6cd5\u5c31\u884c public String hello (){ return \"Hello\" + super . name ; // super\u5173\u952e\u5b57\u8868\u793a\u7236\u7c7b(==\u7236\u7c7bthis),\u6ce8\u610f\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7236\u7c7b\u79c1\u6709 } } // 2.1 \u4fee\u9970\u7b26 private : \u65e0\u6cd5\u88ab\u5176\u4ed6\u7c7b\u8bbf\u95ee\u6216\u5b50\u7c7b\u65e0\u6cd5\u8bbf\u95ee\u7236\u7c7b\u7684private\u5b57\u6bb5\u6216\u8005private\u65b9\u6cd5 protected : \u7528\u4e8e\u7ee7\u627f -> \u7528protected\u4fee\u9970\u7684\u5b57\u6bb5\u53ef\u4ee5\u88ab\u5b50\u7c7b\u6216\u5b50\u7c7b\u7684\u5b50\u7c7b\u8bbf\u95ee public : \u53ef\u4ee5\u88ab\u5176\u4ed6\u7c7b\u6216\u6240\u6709\u5b50\u7c7b\u8bbf\u95ee // 2.2 \u7ee7\u627f\u540e\u7684\u6784\u9020\u51fd\u6570 class Student extends Person { protected int score ; public Student ( String name , int age , int score ) { // super(); \u5982\u679c\u53ea\u662f\u60f3\u8c03\u7528\u65e0\u53c2\u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u53e5\u53ef\u4ee5\u7701\u7565 super ( name , age ); // \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5Person(String,int),\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7236\u7c7b\u6267\u884c\u6709\u53c2\u7684\u6784\u9020\u51fd\u6570 this . score = score ; } } // 2.3 \u5411\u4e0a\u8f6c\u578b(\u4e3a\u591a\u6001\u94fa\u8def) Person p = new Student (); // p instanceof Student : true Object o1 = new Student (); // instanceof\u5b9e\u9645\u4e0a\u5224\u65ad\u4e00\u4e2a\u53d8\u91cf\u6240\u6307\u5411\u7684\u5b9e\u4f8b\u662f\u5426\u662f\u6307\u5b9a\u7c7b\u578b\uff0c\u6216\u8005\u662f\u5426\u662f\u8fd9\u4e2a\u7c7b\u578b\u7684\u5b50\u7c7b p instanceof Person ; // ture s instanceof Person ; // true null instanceof xxx ; // false \u5982\u679c\u4e00\u4e2a\u5f15\u7528\u53d8\u91cf\u4e3anull\uff0c\u90a3\u4e48\u5bf9\u4efb\u4f55instanceof\u7684\u5224\u65ad\u90fd\u4e3afalse // \u6269\u5c55\uff0c\u5411\u4e0b\u8f6c\u578b\uff0c\u7528\u4e8e\u5f3a\u8f6c Person p1 = new Student (); // upcasting, ok Student s1 = ( Student ) p1 ; // ok Person p2 = new Person (); // \u4e0d\u80fd\u628a\u7236\u7c7b\u53d8\u4e3a\u5b50\u7c7b\uff0c\u56e0\u4e3a\u5b50\u7c7b\u529f\u80fd\u6bd4\u7236\u7c7b\u591a\uff0c\u591a\u7684\u529f\u80fd\u65e0\u6cd5\u51ed\u7a7a\u53d8\u51fa\u6765\u3002 Student s2 = ( Student ) p2 ; // runtime error! ClassCastException! // 2.4 \u591a\u6001\uff1aJava\u7684\u5b9e\u4f8b\u65b9\u6cd5\u8c03\u7528\u662f\u57fa\u4e8e\u8fd0\u884c\u65f6\u7684\u5b9e\u9645\u7c7b\u578b\u7684\u52a8\u6001\u8c03\u7528\uff0c\u800c\u975e\u53d8\u91cf\u7684\u58f0\u660e\u7c7b\u578b class Person { public void run () { System . out . println ( \"Person.run\" ); } // \u6269\u5c55:final\u4fee\u9970\u7684\u65b9\u6cd5\u4e0d\u80fd\u88abOverride public final String hello (){ return \"Father Hello\" ; } } class Student extends Person { @Override // \u8986\u5199:\u76f4\u63a5\u628a\u7236\u7c7b\u65b9\u6cd5\u8986\u76d6\uff0c\u65b9\u6cd5\u7b7e\u540d\u76f8\u540c\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u4e5f\u76f8\u540c public void run () { System . out . println ( \"Student.run\" ); } // \u6269\u5c55\uff0c\u5b50\u7c7b\u4e2d\u60f3\u8c03\u7528\u7236\u7c7b\u7684\u88ab\u8986\u76d6\u7684\u65b9\u6cd5 public void printFatherRun (){ return super . run (); } } Person p = new Student (); p . run (); // \u5b9e\u9645\u8c03\u7528\u7684\u662f\u8c01\uff1f\u7b54\u6848:Student public void runTwice ( Person p ) { p . run (); p . run (); } runTwice ( xxx ); // \u4f20\u5165\u7684\u5b9e\u4f8b\u662f\u8c01\u5c31\u8c03\u7528\u8c01 // 2.5 final // 2.5.1 final\u4fee\u9970\u7684\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f final class Person {...} // 2.5.2 final\u4fee\u9970\u7684\u65b9\u6cd5\u4e0d\u80fd\u88abOverride public final String Hello (){...} // 2.5.3 final\u4fee\u9970\u7684\u5c5e\u6027\u4e0d\u80fd\u88ab\u6539\u5199 public final String name = \"xiaoming\" ; // 2.5.4 final\u4fee\u9970\u7684\u5c5e\u6027\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316\uff0c\u5e38\u7528 class Person { public final String name ; // \u5e38\u7528:\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4fdd\u8bc1\u5b9e\u4f8b\u4e00\u65e6\u521b\u5efa\uff0c\u5176final\u5b57\u6bb5\u5c31\u4e0d\u53ef\u4fee\u6539 public Person ( String name ) { this . name = name ; } } // 3 \u62bd\u8c61\u7c7b // 3.1 \u62bd\u8c61\u65b9\u6cd5:\u5982\u679c\u7236\u7c7b\u7684\u65b9\u6cd5\u672c\u8eab\u4e0d\u9700\u8981\u5b9e\u73b0\u4efb\u4f55\u529f\u80fd\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5b9a\u4e49\u65b9\u6cd5\u7b7e\u540d\uff0c\u76ee\u7684\u662f\u8ba9\u5b50\u7c7b\u53bb\u8986\u5199\u5b83\uff0c\u90a3\u4e48\uff0c\u53ef\u4ee5\u628a\u7236\u7c7b\u7684\u65b9\u6cd5\u58f0\u660e\u4e3a\u62bd\u8c61\u65b9\u6cd5,\u6ce8\u610f:\u6709\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u662f\u62bd\u8c61\u7c7b\uff0c\u5426\u5219\u65e0\u6cd5\u7f16\u8bd1 abstract class Person { // public abstract void run (); // \u6b64\u65f6\u65e0\u6cd5\u7f16\u8bd1Person\u7c7b\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u62bd\u8c61\u65b9\u6cd5\uff0c\u6240\u4ee5Person\u7c7b\u65e0\u6cd5\u88ab\u5b9e\u4f8b\u5316 } class Student extends Person { @Override public void run () { \u2026 } } // 4 \u63a5\u53e3:\u7eaf\u62bd\u8c61\u7c7b\u7684\u7701\u7565\u5b9a\u4e49\uff0c\u63a5\u53e3\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\u9ed8\u8ba4\u90fd\u662fpublic abstract\u7684 interface Person { void run (); // \u867d\u7136\u6ca1\u5199\uff0c\u4f46\u662f\u90fd\u662fpublic abstract\u4fee\u9970\u7684 // \u6269\u5c551:\u63a5\u53e3\u4e2d\u53ef\u4ee5\u5b9a\u4e49default\u65b9\u6cd5,\u6ce8\u610f:\u5b9e\u73b0\u7c7b\u53ef\u4ee5\u4e0d\u5fc5\u8986\u5199default\u65b9\u6cd5\u3002default\u65b9\u6cd5\u7684\u76ee\u7684\u662f\uff0c\u5f53\u6211\u4eec\u9700\u8981\u7ed9\u63a5\u53e3\u65b0\u589e\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u4f1a\u6d89\u53ca\u5230\u4fee\u6539\u5168\u90e8\u5b50\u7c7b\u3002\u5982\u679c\u65b0\u589e\u7684\u662fdefault\u65b9\u6cd5\uff0c\u90a3\u4e48\u5b50\u7c7b\u5c31\u4e0d\u5fc5\u5168\u90e8\u4fee\u6539\uff0c\u53ea\u9700\u8981\u5728\u9700\u8981\u8986\u5199\u7684\u5730\u65b9\u53bb\u8986\u5199\u65b0\u589e\u65b9\u6cd5\u3002 default void hello (){ xxx ;} // interface\u6ca1\u6709\u5b57\u6bb5\uff0cdefault\u65b9\u6cd5\u65e0\u6cd5\u8bbf\u95ee\u5c5e\u6027 } // 4.1 \u5177\u4f53\u7c7b\u5b9e\u73b0interface\u63a5\u53e3\u65f6 class Student implements Person { @override public void run (){ xxx ;} } //4.2 \u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u80fd\u4ece\u591a\u4e2a\u7c7b\u7ee7\u627f\u3002\u4f46\u662f\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2ainterface class Student implements Person , Hello { // \u5b9e\u73b0\u4e86\u4e24\u4e2ainterface ... } //4.3 \u63a5\u53e3\u7ee7\u627f:\u4e00\u4e2ainterface\u53ef\u4ee5\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2ainterface\u3002interface\u7ee7\u627f\u81eainterface\u4f7f\u7528extends interface Hello { void hello (); } interface Person extends Hello { void run (); String getName (); } // 5 \u9759\u6001\u5c5e\u6027\u548c\u9759\u6001\u65b9\u6cd5:\u53ea\u6709\u4e00\u4e2a\u5171\u4eab\u201c\u7a7a\u95f4\u201d\uff0c\u6240\u6709\u5b9e\u4f8b\u4f1a\u5171\u4eab\u8be5\u5c5e\u6027/\u65b9\u6cd5 // \u6ce8\u610f:\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u65b9\u6cd5\u90fd\u5c5e\u4e8e\u7c7b\uff0c\u800c\u4e0d\u5c5e\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u9759\u6001\u65b9\u6cd5\u5185\u90e8\uff0c\u65e0\u6cd5\u8bbf\u95eethis\u53d8\u91cf\uff0c\u4e5f\u65e0\u6cd5\u8bbf\u95ee\u5b9e\u4f8b\u5b57\u6bb5\uff0c\u5b83\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u5b57\u6bb5\u3002 class Person { public static int number ; // \u9759\u6001\u5b57\u6bb5 public static void setNumber ( int value ){ // \u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u5b57\u6bb5\u3002 number = value ; } } Person . number ; // \u63a8\u8350\u8fd9\u79cd\u65b9\u5f0f\u8bbf\u95ee\uff0cp.number(\u5b9e\u4f8b\u5bf9\u8c61\u65e0\u9759\u6001\u5b57\u6bb5)\u4e4b\u6240\u4ee5\u80fd\u8bbf\u95ee\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u8f6c\u6362\u4e3a:\u7c7b\u540d.\u9759\u6001\u5b57\u6bb5 // 5.1 \u63a5\u53e3\u7684\u9759\u6001\u5b57\u6bb5:\u56e0\u4e3ainterface\u662f\u4e00\u4e2a\u7eaf\u62bd\u8c61\u7c7b\uff0c\u6240\u4ee5\u5b83\u4e0d\u80fd\u5b9a\u4e49\u5b9e\u4f8b\u5b57\u6bb5\u3002\u4f46\u662f\uff0cinterface\u662f\u53ef\u4ee5\u6709\u9759\u6001\u5b57\u6bb5\u7684\uff0c\u5e76\u4e14\u9759\u6001\u5b57\u6bb5\u5fc5\u987b\u4e3afinal\u7c7b\u578b public interface Person { public static final int MALE = 1 ; public static final int FEMALE = 2 ; } // \u56e0\u4e3ainterface\u7684\u5b57\u6bb5\u53ea\u80fd\u662fpublic static final\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4fee\u9970\u7b26\u90fd\u53bb\u6389\uff0c\u7b80\u5199 public interface Person { // \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u52a0\u4e0apublic statc final: int MALE = 1 ; int FEMALE = 2 ; } // 6 jar\u5305\uff1a\u5982\u679c\u6709\u5f88\u591a.class\u6587\u4ef6\uff0c\u6563\u843d\u5728\u5404\u5c42\u76ee\u5f55\u4e2d\uff0c\u80af\u5b9a\u4e0d\u4fbf\u4e8e\u7ba1\u7406\u3002\u5982\u679c\u80fd\u628a\u76ee\u5f55\u6253\u4e00\u4e2a\u5305\uff0c\u53d8\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c31\u65b9\u4fbf\u591a\u4e86\u3002jar\u5305\u5c31\u662f\u7528\u6765\u5e72\u8fd9\u4e2a\u4e8b\u7684\uff0c\u5b83\u53ef\u4ee5\u628apackage\u7ec4\u7ec7\u7684\u76ee\u5f55\u5c42\u7ea7\uff0c\u4ee5\u53ca\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff08\u5305\u62ec.class\u6587\u4ef6\u548c\u5176\u4ed6\u6587\u4ef6\uff09\u90fd\u6253\u6210\u4e00\u4e2ajar\u6587\u4ef6\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u65e0\u8bba\u662f\u5907\u4efd\uff0c\u8fd8\u662f\u53d1\u7ed9\u5ba2\u6237\uff0c\u5c31\u7b80\u5355\u591a\u4e86\u3002jar\u5305\u5c31\u662fzip\u5305 // 6.1 \u6253\u6210jar\u5305 package_sample \u2514\u2500 bin // jar\u5305\u7684\u7b2c\u4e00\u5c42\u76ee\u5f55\u4e0d\u80fd\u662fbin\uff0c\u5e94\u8be5\u662fhong/ming/mr \u251c\u2500 hong // \u4f8b\u5982\uff0c\u76f4\u63a5\u628ahong\u8fd9\u4e2a\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\u538b\u7f29\u4e3ahong.zip,\u7136\u540e\u6539\u4e3ahong.jar \u2502 \u2514\u2500 Person . class \u2502 ming \u2502 \u2514\u2500 Person . class \u2514\u2500 mr \u2514\u2500 jun \u2514\u2500 Arrays . class // 6.2 jar\u5305\u6253\u5305\u5de5\u5177Maven:https://www.liaoxuefeng.com/wiki/1252599548343744/1255945359327200 // 7 \u6a21\u5757\u5316:\u6253\u5305\u7684\u65f6\u5019a.jar\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\u592a\u591a\uff0c\u6253\u6210\u7684jar\u5305\u597d\u51e0\u767e\u5146\uff1f\u89e3\u51b3:https://www.liaoxuefeng.com/wiki/1252599548343744/1281795926523938 java\u6838\u5fc3\u7c7b \u00b6 \u5f15\u7528\u7c7b\u578b\u6bd4\u8f83\uff0c\u8981\u4f7f\u7528 equals() \u65b9\u6cd5\uff0c\u4e0d\u8981\u4f7f\u7528 == (\u5b83\u6bd4\u8f83\u7684\u662f\u4e24\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u53d8\u91cf\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61) \u7f16\u7801 // \u5168\u7403\u7edf\u4e00\u7801\u8054\u76df\u53d1\u5e03\u4e86Unicode\u7f16\u7801 // \u4e2d\u6587\u5b57\u7b26'\u4e2d'\u6709GB2312\u7f16\u7801\u548cUnicode\u7f16\u7801 // UTF-8\u7f16\u7801(\u907f\u514d\u4e86Unicode\u7f16\u7801\u6d6a\u8d39\u5927\u91cf\u7a7a\u95f4\u7684\u7b80\u7248) // \u59cb\u7ec8\u7262\u8bb0\uff1aJava\u7684String\u548cchar\u5728\u5185\u5b58\u4e2d\u603b\u662f\u4ee5Unicode\u7f16\u7801\u8868\u793a,\u6240\u4ee5\u6709\u65f6\u5019\u9700\u8981\u7f16\u7801\u548c\u89e3\u7801 // \u8f6c\u6362\u7f16\u7801:\u6ce8\u610f,\u8f6c\u6362\u7f16\u7801\u540e\uff0c\u5c31\u4e0d\u518d\u662fchar\u7c7b\u578b\uff0c\u800c\u662fbyte\u7c7b\u578b\u8868\u793a\u7684\u6570\u7ec4 byte [] b1 = \"Hello\" . getBytes (); // \u6309\u7cfb\u7edf\u9ed8\u8ba4\u7f16\u7801\u8f6c\u6362\uff0c\u4e0d\u63a8\u8350 byte [] b2 = \"Hello\" . getBytes ( \"UTF-8\" ); // \u6309UTF-8\u7f16\u7801\u8f6c\u6362 byte [] b2 = \"Hello\" . getBytes ( \"GBK\" ); // \u6309GBK\u7f16\u7801\u8f6c\u6362 byte [] b3 = \"Hello\" . getBytes ( StandardCharsets . UTF_8 ); // \u6309UTF-8\u7f16\u7801\u8f6c\u6362 // byte[] -> String byte [] b = ... String s1 = new String ( b , \"GBK\" ); // \u6309GBK\u8f6c\u6362 String s2 = new String ( b , StandardCharsets . UTF_8 ); // \u6309UTF-8\u8f6c\u6362 String String s1 = \"hello!\" ; String s2 = \"HELLO!\" ; s1 . equals ( s2 ); // \u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u5185\u5bb9\u662f\u5426\u76f8\u540c\uff0c\u5fc5\u987b\u4f7f\u7528equals()\u65b9\u6cd5\u800c\u4e0d\u80fd\u7528== s1 . equalsIgnoreCase ( s2 ); // \u5ffd\u7565\u5927\u5c0f\u5199\u6bd4\u8f83 \"Hello\" . contains ( \"ll\" ); // true\uff0c\u662f\u5426\u5305\u542b\u5b50\u4e32 // \u641c\u7d22\u5b50\u4e32 \"Hello\" . indexOf ( \"l\" ); // 2 \"Hello\" . lastIndexOf ( \"l\" ); // 3 \"Hello\" . startsWith ( \"He\" ); // true \"Hello\" . endsWith ( \"lo\" ); // true // \u63d0\u53d6\u5b50\u4e32 \"Hello\" . substring ( 2 ); // \"llo\" \"Hello\" . substring ( 2 , 4 ); \"ll\" // \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\u548c\u7a7a\u767d\u5b57\u7b26\u4e32 \"\" . isEmpty (); // true\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a0 \" \" . isEmpty (); // false\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4e3a0 \" \\n\" . isBlank (); // true\uff0c\u56e0\u4e3a\u53ea\u5305\u542b\u7a7a\u767d\u5b57\u7b26 \" Hello \" . isBlank (); // false\uff0c\u56e0\u4e3a\u5305\u542b\u975e\u7a7a\u767d\u5b57\u7b26 // \u53bb\u9664\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26 \" \\tHello\\r\\n \" . trim (); // \"Hello\":\u79fb\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26\u3002\u7a7a\u767d\u5b57\u7b26\u5305\u62ec\u7a7a\u683c\uff0c\\t\uff0c\\r\uff0c\\n,\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32 \"\\u3000Hello\\u3000\" . strip (); // \"Hello\"\uff0c\u79fb\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26\u3002\u5b83\u548ctrim()\u4e0d\u540c\u7684\u662f\uff0c\u7c7b\u4f3c\u4e2d\u6587\u7684\u7a7a\u683c\u5b57\u7b26\\u3000\u4e5f\u4f1a\u88ab\u79fb\u9664 \" Hello \" . stripLeading (); // \"Hello \" \" Hello \" . stripTrailing (); // \" Hello\" // \u66ff\u6362\u5b50\u4e32 String s = \"hello\" ; s . replace ( 'l' , 'w' ); // \"hewwo\"\uff0c\u6240\u6709\u5b57\u7b26'l'\u88ab\u66ff\u6362\u4e3a'w' s . replace ( \"ll\" , \"~~\" ); // \"he~~o\"\uff0c\u6240\u6709\u5b50\u4e32\"ll\"\u88ab\u66ff\u6362\u4e3a\"~~\" // \u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362 String s = \"A,,B;C ,D\" ; s . replaceAll ( \"[\\\\,\\\\;\\\\s]+\" , \",\" ); // \"A,B,C,D\" // \u5206\u5272\u5b57\u7b26\u4e32\uff0c\u4f20\u5165\u7684\u4e5f\u662f\u6b63\u5219 String s = \"A,B,C,D\" ; String [] ss = s . split ( \"\\\\,\" ); // {\"A\", \"B\", \"C\", \"D\"} // \u62fc\u63a5\u5b57\u7b26\u4e32String.join(split,arr):\u7528\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u8fde\u63a5\u5b57\u7b26\u4e32\u6570\u7ec4 String [] arr = { \"A\" , \"B\" , \"C\" }; String s = String . join ( \"***\" , arr ); // \"A***B***C\" // \u7c7b\u578b\u8f6c\u6362:\u628a\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u6216\u5f15\u7528\u7c7b\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 \u9759\u6001\u65b9\u6cd5:valueOf String . valueOf ( 123 ); // \"123\" String . valueOf ( 45.67 ); // \"45.67\" String . valueOf ( true ); // \"true\" String . valueOf ( new Object ()); // \u7c7b\u4f3cjava.lang.Object@636be97c // \u628a\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5176\u4ed6\u7c7b\u578b import java.lang.Boolean / Byte / Short / Integer / Long / Float / Double / Character int n1 = Integer . parseInt ( \"123\" ); // 123 int n2 = Integer . parseInt ( \"ff\" , 16 ); // \u6309\u5341\u516d\u8fdb\u5236\u8f6c\u6362\uff0c255 Integer . getInteger ( \"java.version\" ); // \u7248\u672c\u53f7\uff0c11\uff0c\u7279\u4f8b:\u628a\u8be5\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7cfb\u7edf\u53d8\u91cf\u8f6c\u6362\u4e3aInteger boolean b1 = Boolean . parseBoolean ( \"true\" ); // true boolean b2 = Boolean . parseBoolean ( \"FALSE\" ); // false // \u8f6c\u4e3achar[] char [] cs = \"Hello\" . toCharArray (); // String -> char[] String s = new String ( cs ); // char[] -> String StringBuilder:\u7528\u6765\u9ad8\u6548\u62fc\u63a5\u5b57\u7b26\u4e32 \u5982\u679c\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 + \u62fc\u63a5 String \uff0c\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u7136\u540e\u6254\u6389\u65e7\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u6837\uff0c\u7edd\u5927\u90e8\u5206\u5b57\u7b26\u4e32\u90fd\u662f\u4e34\u65f6\u5bf9\u8c61\uff0c\u4e0d\u4f46\u6d6a\u8d39\u5185\u5b58\uff0c\u8fd8\u4f1a\u5f71\u54cdGC\u6548\u7387\u3002Java\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 StringBuilder \uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61\uff0c\u53ef\u4ee5\u9884\u5206\u914d\u7f13\u51b2\u533a\uff0c\u8fd9\u6837\uff0c\u5f80 StringBuilder \u4e2d\u65b0\u589e\u5b57\u7b26\u65f6\uff0c\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u4e34\u65f6\u5bf9\u8c61\uff1a // StringBuilder\u5e38\u5e38\u7528\u4e8e\u63d0\u9ad8String\u591a\u6b21\u7528\u5230+\u65f6\u7684\u6548\u7387 // \u5faa\u73af\u64cd\u4f5c StringBuilder sb = new StringBuilder ( 1024 ); for ( int i = 0 ; i < 1000 ; i ++ ) { sb . append ( ',' ); sb . append ( i ); } String s = sb . toString (); // \u94fe\u5f0f\u64cd\u4f5c:\u56e0\u4e3a\u5b9a\u4e49\u7684append()\u65b9\u6cd5\u4f1a\u8fd4\u56dethis\uff0c\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4e0d\u65ad\u8c03\u7528\u81ea\u8eab\u7684\u5176\u4ed6\u65b9\u6cd5\u3002 public class Main { public static void main ( String [] args ) { var sb = new StringBuilder ( 1024 ); sb . append ( \"Mr \" ) . append ( \"Bob\" ) . append ( \"!\" ) . insert ( 0 , \"Hello, \" ); System . out . println ( sb . toString ()); } } // StringBuffer\u662fStringBuilder\u7684\u7ebf\u7a0b\u5b89\u5168\u7248\u672c\uff0c\u73b0\u5728\u5f88\u5c11\u4f7f\u7528\uff0c\u56e0\u4e3a\u6548\u7387\u4f1a\u964d\u4f4e\u3002 Math // Java\u6807\u51c6\u5e93\u4e5f\u63d0\u4f9b\u4e86strictMath,\u548cMath\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u65b9\u6cd5\u3002StrictMath\u4fdd\u8bc1\u6240\u6709\u5e73\u53f0\u8ba1\u7b97\u7ed3\u679c\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u800cMath\u4f1a\u5c3d\u91cf\u9488\u5bf9\u5e73\u53f0\u4f18\u5316\u8ba1\u7b97\u901f\u5ea6\uff0c\u6240\u4ee5\uff0c\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528Math\u5c31\u8db3\u591f\u4e86 Math . abs ( value ); // \u7edd\u5bf9\u503c Math . max ( val1 , vla2 ); // \u6700\u5927\u503c Math . min ( val1 , vla2 ); // \u6700\u5c0f\u503c Math . pow ( 2 , 10 ); // 2\u768410\u6b21\u65b9 Math . sqrt ( 4 ); // 2 Math . exp ( 2 ); // e\u76842\u6b21\u65b9 Math . log ( 4 ); // \u4ee5e\u4e3a\u5e95 Math . log10 ( 100 ); // \u4ee510\u4e3a\u5e95 // \u4e09\u89d2\u51fd\u6570 Math . sin ( 3.14 ); // 0.00159... Math . cos ( 3.14 ); // -0.9999... Math . tan ( 3.14 ); // -0.0015... Math . asin ( 1.0 ); // 1.57079... Math . acos ( 1.0 ); // 0.0 // \u6570\u5b66\u5e38\u91cf double pi = Math . PI ; // 3.14159... double e = Math . E ; // 2.7182818... Math . sin ( Math . PI / 6 ); // sin(\u03c0/6) = 0.5 // \u751f\u6210\u968f\u673a\u6570[0,1]\uff0cMath.random();\u5b9e\u9645\u4e0a\u5185\u90e8\u8c03\u7528\u4e86Random\u7c7b\uff0c\u6240\u4ee5\u5b83\u4e5f\u662f\u4f2a\u968f\u673a\u6570\uff0c\u53ea\u662f\u6211\u4eec\u65e0\u6cd5\u6307\u5b9a\u79cd\u5b50 Math . random (); // 0.53907... \u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837 Math . random () * ( max - min ) + min ; // \u968f\u673a\u6570\u8303\u56f4[min,max] Random import java.util.Random ; // Random\u7528\u6765\u521b\u5efa\u4f2a\u968f\u673a\u6570\u3002\u6240\u8c13\u4f2a\u968f\u673a\u6570\uff0c\u662f\u6307\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u7684\u79cd\u5b50\uff0c\u4ea7\u751f\u7684\u968f\u673a\u6570\u5e8f\u5217\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 // 1 \u4e0d\u7ed9\u5b9a\u79cd\u5b50\uff0c\u5c31\u4f7f\u7528\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u6233\u4f5c\u4e3a\u79cd\u5b50\uff0c\u56e0\u6b64\u6bcf\u6b21\u8fd0\u884c\u65f6\uff0c\u79cd\u5b50\u4e0d\u540c\uff0c\u5f97\u5230\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u5c31\u4e0d\u540c\u3002 Random r = new Random (); r . nextInt (); // 2071575453,\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837 r . nextInt ( 10 ); // 5,\u751f\u6210\u4e00\u4e2a[0,10)\u4e4b\u95f4\u7684int r . nextLong (); // 8811649292570369305,\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837 r . nextFloat (); // 0.54335...\u751f\u6210\u4e00\u4e2a[0,1)\u4e4b\u95f4\u7684float r . nextDouble (); // 0.3716...\u751f\u6210\u4e00\u4e2a[0,1)\u4e4b\u95f4\u7684double // 2 \u7ed9\u5b9a\u79cd\u5b50 Random r = new Random ( 12345 ); SecureRandom \u6709\u4f2a\u968f\u673a\u6570\uff0c\u5c31\u6709\u771f\u968f\u673a\u6570\u3002\u5b9e\u9645\u4e0a\u771f\u6b63\u7684\u771f\u968f\u673a\u6570\u53ea\u80fd\u901a\u8fc7\u91cf\u5b50\u529b\u5b66\u539f\u7406\u6765\u83b7\u53d6\uff0c\u800c\u6211\u4eec\u60f3\u8981\u7684\u662f\u4e00\u4e2a\u4e0d\u53ef\u9884\u6d4b\u7684\u5b89\u5168\u7684\u968f\u673a\u6570\uff0c SecureRandom \u5c31\u662f\u7528\u6765\u521b\u5efa\u5b89\u5168\u7684\u968f\u673a\u6570\u7684\uff1a SecureRandom \u65e0\u6cd5\u6307\u5b9a\u79cd\u5b50\uff0c\u5b83\u4f7f\u7528RNG\uff08random number generator\uff09\u7b97\u6cd5\u3002 SecureRandom \u7684\u5b89\u5168\u6027\u662f\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u5b89\u5168\u7684\u968f\u673a\u79cd\u5b50\u6765\u751f\u6210\u968f\u673a\u6570\u3002\u8fd9\u4e2a\u79cd\u5b50\u662f\u901a\u8fc7CPU\u7684\u70ed\u566a\u58f0\u3001\u8bfb\u5199\u78c1\u76d8\u7684\u5b57\u8282\u3001\u7f51\u7edc\u6d41\u91cf\u7b49\u5404\u79cd\u968f\u673a\u4e8b\u4ef6\u4ea7\u751f\u7684\u201c\u71b5\u201d\u3002 import java.security.SecureRandom ; // \u7b80\u5355\u7528\u6cd5 SecureRandom sr = new SecureRandom (); System . out . println ( sr . nextInt ( 100 )); // \u9ad8\u7ea7\u7528\u6cd5 import java.util.Arrays ; import java.security.SecureRandom ; import java.security.NoSuchAlgorithmException ; public class Main { public static void main ( String [] args ) { SecureRandom sr = null ; try { sr = SecureRandom . getInstanceStrong (); // \u83b7\u53d6\u9ad8\u5f3a\u5ea6\u5b89\u5168\u968f\u673a\u6570\u751f\u6210\u5668 } catch ( NoSuchAlgorithmException e ) { sr = new SecureRandom (); // \u83b7\u53d6\u666e\u901a\u7684\u5b89\u5168\u968f\u673a\u6570\u751f\u6210\u5668 } byte [] buffer = new byte [ 16 ] ; sr . nextBytes ( buffer ); // \u7528\u5b89\u5168\u968f\u673a\u6570\u586b\u5145buffer System . out . println ( Arrays . toString ( buffer )); } } \u5305\u88c5\u7c7b\u578b // 1 \u57fa\u672c\u7c7b\u578b int n = null ; // compile error // 2 \u57fa\u672c\u7c7b\u578b\u8f6c\u5f15\u7528\u7c7b\u578b:\u5341\u5206\u6709\u7528 import java.lang.Integer // \u6240\u6709\u7684\u5305\u88c5\u7c7b\u578b\u90fd\u662f\u4e0d\u53d8\u7c7b,\u4e0d\u80fd\u4f7f\u7528==\u6bd4\u8f83\uff0c\u5fc5\u987b\u4f7f\u7528equals()\u6bd4\u8f83 // 2.1 java\u7f16\u8bd1\u5668int\u548cInterger\u81ea\u52a8\u8f6c\u6362 int i = 100 ; Integer n = Integer . valueOf ( i ); // \u9759\u6001\u65b9\u6cd5:\u5c3d\u53ef\u80fd\u5730\u8fd4\u56de\u7f13\u5b58\u7684\u5b9e\u4f8b\u4ee5\u8282\u7701\u5185\u5b58 int x = n . intValue (); // 2.2 \u66f4\u7b80\u5355\u65b9\u5f0f:Auto Boxing and Auto Unboxing\uff08\u81ea\u52a8\u5c01\u7bb1\u548c\u81ea\u52a8\u62c6\u7bb1\uff09 Integer n = 100 ; // \u7f16\u8bd1\u5668\u81ea\u52a8\u4f7f\u7528Integer.valueOf(int) int x = n ; // \u7f16\u8bd1\u5668\u81ea\u52a8\u4f7f\u7528Integer.intValue() // 2.3 Integer\u8fdb\u5236\u8f6c\u6362 int x1 = Integer . parseInt ( \"100\" ); // 100 int x2 = Integer . parseInt ( \"100\" , 16 ); // 256,\u56e0\u4e3a\u630916\u8fdb\u5236\u89e3\u6790 Integer . toString ( 100 )); // \"100\",\u8868\u793a\u4e3a10\u8fdb\u5236 Integer . toString ( 100 , 36 ); // \"2s\",\u8868\u793a\u4e3a36\u8fdb\u5236 Integer . toHexString ( 100 ); // \"64\",\u8868\u793a\u4e3a16\u8fdb\u5236 Integer . toOctalString ( 100 ); // \"144\",\u8868\u793a\u4e3a8\u8fdb\u5236 Integer . toBinaryString ( 100 ); // \"1100100\",\u8868\u793a\u4e3a2\u8fdb\u5236 // 2.4 \u5305\u88c5\u7c7b\u578b\u7684\u4e00\u4e9b\u6709\u7528\u9759\u6001\u53d8\u91cf // boolean\u53ea\u6709\u4e24\u4e2a\u503ctrue/false\uff0c\u5176\u5305\u88c5\u7c7b\u578b\u53ea\u9700\u8981\u5f15\u7528Boolean\u63d0\u4f9b\u7684\u9759\u6001\u5b57\u6bb5: Boolean t = Boolean . TRUE ; Boolean f = Boolean . FALSE ; // int\u53ef\u8868\u793a\u7684\u6700\u5927/\u6700\u5c0f\u503c: int max = Integer . MAX_VALUE ; // 2147483647 int min = Integer . MIN_VALUE ; // -2147483648 // long\u7c7b\u578b\u5360\u7528\u7684bit\u548cbyte\u6570\u91cf: int sizeOfLong = Long . SIZE ; // 64 (bits) int bytesOfLong = Long . BYTES ; // 8 (bytes) // 2.5 \u6240\u6709\u7684\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u5305\u88c5\u7c7b\u578b\u90fd\u7ee7\u627f\u81eaNumber\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u5730\u76f4\u63a5\u901a\u8fc7\u5305\u88c5\u7c7b\u578b\u83b7\u53d6\u5404\u79cd\u57fa\u672c\u7c7b\u578b Number num = new Integer ( 999 ); // \u5411\u4e0a\u8f6c\u578b\u4e3aNumber: // \u83b7\u53d6byte, int, long, float, double: byte b = num . byteValue (); int n = num . intValue (); long ln = num . longValue (); float f = num . floatValue (); double d = num . doubleValue (); // 2.6 \u65e0\u7b26\u53f7\u6574\u6570:java\u4e2d\u6ca1\u6709\u8be5\u7c7b\u578b\uff0c\u4f46\u662f\u53ef\u4ee5\u501f\u52a9Byte\u5305\u88c5\u7c7b\u578b\u5b8c\u6210\uff0cbyte\u8303\u56f4(-128~+127),\u770b\u6210\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u7684\u8303\u56f4\u5c31\u662f0~255 byte x = - 1 ; byte y = 127 ; System . out . println ( Byte . toUnsignedInt ( x )); // 255 System . out . println ( Byte . toUnsignedInt ( y )); // 127 \u679a\u4e3e\u7c7b \u867d\u7136\u4e3a\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 == \u505a\u6bd4\u8f83\uff0c\u56e0\u4e3a enum \u7c7b\u578b\u7684\u6bcf\u4e2a\u5e38\u91cf\u5728JVM\u4e2d\u53ea\u6709\u4e00\u4e2a\u552f\u4e00\u5b9e\u4f8b\u3002 public class Main { public static void main ( String [] args ) { Weekday day = Weekday . SUN ; // \u8c03\u7528\uff0c\u7f16\u8f91\u5668\u4f1a\u81ea\u52a8\u68c0\u67e5\u7c7b\u578b\u662f\u5426\u5c5e\u4e8e(Weekday) // int day = 1; // if (day == Weekday.SUN) {xxx} // \u7f16\u8bd1\u9519\u8bef\uff0cday\u7c7b\u578b\u548cWeekday.SUN\u7c7b\u578b\u4e0d\u4e00\u81f4 if ( day == Weekday . SAT || day == Weekday . SUN ) { System . out . println ( \"Work at home!\" ); } else { System . out . println ( \"Work at office!\" ); } } } // \u679a\u4e3e\u7c7b\uff0c\u548c\u666e\u901a\u7c7b\u65e0\u4efb\u4f55\u533a\u522b\uff0c\u4f46\u662f\u6709\u56db\u4e2a\u7279\u70b9 // \u5b9a\u4e49\u7684enum\u7c7b\u578b\u603b\u662f\u7ee7\u627f\u81eajava.lang.Enum\uff0c\u4e14\u65e0\u6cd5\u88ab\u7ee7\u627f\uff1b // \u53ea\u80fd\u5b9a\u4e49\u51faenum\u7684\u5b9e\u4f8b\uff0c\u800c\u65e0\u6cd5\u901a\u8fc7new\u64cd\u4f5c\u7b26\u521b\u5efaenum\u7684\u5b9e\u4f8b\uff1b // \u5b9a\u4e49\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u5f15\u7528\u7c7b\u578b\u7684\u552f\u4e00\u5b9e\u4f8b\uff1b // \u53ef\u4ee5\u5c06enum\u7c7b\u578b\u7528\u4e8eswitch\u8bed\u53e5\u3002 enum Weekday { SUN , MON , TUE , WED , THU , FRI , SAT ; // \u9ed8\u8ba4\u4ece0\u5f00\u59cb\u8ba1\u6570 } // 1 \u679a\u4e3e\u7c7b\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 String s = Weekday . SUN . name (); // \"SUN\" return \u5e38\u91cf\u540d int n = Weekday . MON . ordinal (); // 1 return \u5b9a\u4e49\u7684\u5e38\u91cf\u7684\u987a\u5e8f\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570 // 2 \u679a\u4e3e\u7c7b\u6709\u4e2a\u5f0a\u7aef\uff0c\u5c31\u662f\u65b0\u589e\u4e00\u4e2a\u53d8\u91cf\u5fc5\u987b\u5199\u5728\u540e\u9762\uff0c\u5426\u5219\u4ee5\u524d\u7684\u987a\u5e8f\u5c31\u4f1a\u88ab\u6539\u53d8\uff0c\u7136\u540eordinal()\u5c31\u4f1a\u6539\u53d8 enum Weekday { MON ( 1 ), TUE ( 2 ), WED ( 3 ), THU ( 4 ), FRI ( 5 ), SAT ( 6 ), SUN ( 0 ); // \u5b57\u6bb5\u5f3a\u70c8\u5efa\u8bae\u58f0\u660e\u4e3afinal public final int dayValue ; // enum\u7684\u6784\u9020\u65b9\u6cd5\u8981\u58f0\u660e\u4e3aprivate private Weekday ( int dayValue ) { // \u7528\u6784\u9020\u65b9\u6cd5\u89e3\u51b3 this . dayValue = dayValue ; } } // 2.1 \u518d\u9ad8\u7ea7\u4e00\u70b9\uff0ctoString()\u53ef\u4ee5\u88ab\u8986\u5199\uff0c\u800cname()\u5219\u4e0d\u884c\u3002\u6211\u4eec\u53ef\u4ee5\u7ed9Weekday\u6dfb\u52a0toString()\u65b9\u6cd5\uff1a public class Main { public static void main ( String [] args ) { Weekday day = Weekday . SUN ; if ( day . dayValue == 6 || day . dayValue == 0 ) { System . out . println ( \"Today is \" + day + \". Work at home!\" ); } else { System . out . println ( \"Today is \" + day + \". Work at office!\" ); } } } enum Weekday { MON ( 1 , \"\u661f\u671f\u4e00\" ), TUE ( 2 , \"\u661f\u671f\u4e8c\" ), WED ( 3 , \"\u661f\u671f\u4e09\" ), THU ( 4 , \"\u661f\u671f\u56db\" ), FRI ( 5 , \"\u661f\u671f\u4e94\" ), SAT ( 6 , \"\u661f\u671f\u516d\" ), SUN ( 0 , \"\u661f\u671f\u65e5\" ); public final int dayValue ; private final String chinese ; private Weekday ( int dayValue , String chinese ) { this . dayValue = dayValue ; this . chinese = chinese ; } @Override public String toString () { // \u8c03\u7528name()\u65f6\u5019\uff0c\u4f1a\u53ea\u8f93\u51fachinese return this . chinese ; } } Android\u5f00\u53d1\u7b80\u4ecb \u00b6 \u56db\u5927\u7ec4\u4ef6 \u6d3b\u52a8( Activity ):\u4f60\u5728\u5e94\u7528\u4e2d\u770b\u5230\u7684\u6240\u6709\u4e1c\u897f\u90fd\u662f\u653e\u5728\u6d3b\u52a8\u4e2d\u7684\u3002 \u670d\u52a1( Service ):\u901a\u5e38\u8fd0\u884c\u5728\u540e\u53f0\uff0c\u5373\u4f7f\u9000\u51fa\u5e94\u7528\uff0c\u670d\u52a1\u4ecd\u7136\u662f\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u7684\u3002 \u5e7f\u64ad\u63a5\u6536\u5668( Broadcast Receiver ):\u5141\u8bb8\u4f60\u7684\u5e94\u7528\u63a5\u6536\u6765\u81ea\u5404\u5904\u7684\u5e7f\u64ad\u6d88\u606f(\u7535\u8bdd\uff0c\u77ed\u4fe1\u7b49)\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u5411\u5916\u53d1\u51fa\u5e7f\u64ad\u6d88\u606f\u3002 \u5185\u5bb9\u63d0\u4f9b\u5668( Content Provider ):\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u63d0\u4f9b\u53ef\u80fd\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u4f60\u8bfb\u53d6\u7cfb\u7edf\u7535\u8bdd\u8584\u4e2d\u7684\u8054\u7cfb\u4eba\u3002 \u4e30\u5bcc\u7684\u7cfb\u7edf\u63a7\u4ef6(\u53ef\u4ee5\u5199\u51fa\u6f02\u4eae\u7684\u754c\u9762)\u3001SQLite\u6570\u636e\u5e93\u3001\u5f3a\u5927\u7684\u591a\u5a92\u4f53(\u97f3\u4e50\u3001\u89c6\u9891\u3001\u5f55\u97f3\u3001\u62cd\u7167\u3001\u95f9\u94c3)\u3001\u5730\u7406\u4f4d\u7f6e\u5b9a\u4f4d(\u5185\u7f6e\u7684GPS) \u5b89\u5353\u6587\u4ef6\u76ee\u5f55\u89e3\u6790 AndroProject | ---.gradle # android\u81ea\u52a8\u751f\u6210\uff0c\u65e0\u9700\u5173\u5fc3 | ---.idea # android\u81ea\u52a8\u751f\u6210\uff0c\u65e0\u9700\u5173\u5fc3 | ---app # \u9879\u76ee\u4e2d\u7684\u4e3b\u76ee\u5f55\uff0c\u4ee3\u7801\u90fd\u653e\u5728\u91cc\u9762,\u4e3b | ---build # \u7f16\u8bd1\u65f6\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6 | ---libs # \u9879\u76ee\u4e2d\u7528\u5230\u4e86\u7b2c\u4e09\u65b9jar\u5305\uff0c\u653e\u5728libs\u76ee\u5f55\u4e0b\uff0c\u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0\u5230\u6784\u5efa\u8def\u5f84\u4e2d\u53bb | ---srcs | ---androidTest #\u7528\u6765\u7f16\u5199Android Test\u6d4b\u8bd5\u7528\u4f8b\u7684\uff0c\u53ef\u4ee5\u5bf9\u9879\u76ee\u8fdb\u884c\u4e00\u4e9b\u81ea\u52a8\u5316\u6d4b\u8bd5 | ---main | ---java # \u653e\u7f6ejava\u4ee3\u7801\u7684\u5730\u65b9 | ---res #\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u56fe\u7247\u3001\u5e03\u5c40\u3001\u5b57\u7b26\u4e32\u7b49\u9700\u8981\u653e\u5728\u8be5\u76ee\u5f55\u4e0b\uff0c\u6709\u591a\u4e2a\u5f00\u5934\u7684\u6587\u4ef6\u662f\u4e3a\u4e86\u517c\u5bb9\u5404\u79cd\u8bbe\u5907 | ---drawable # \u653e\u7f6e\u56fe\u7247 | ---mipmap-xx # \u653e\u7f6e\u5e94\u7528\u56fe\u6807 | ---menu # \u663e\u793a\u83dc\u5355\u4e14\u4e0d\u5360\u7528\u5c4f\u5e55\u7a7a\u95f4 | ---layout # \u653e\u7f6e\u5e03\u5c40 | ---values # \u653e\u7f6e\u5b57\u7b26\u4e32\u3001\u6837\u5f0f\u3001\u989c\u8272\u914d\u7f6e\u7b49 | ---strings.xml # \u5199\u5b57\u7b26\u4e32\u5185\u5bb9\uff0c\u6309\u7167\u5176\u56fa\u5b9a\u683c\u5f0f\u5199 | ---xxx | ---AndroidManifest.xml # \u6574\u4e2aAndroid\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56db\u5927\u7ec4\u4ef6\u9700\u5728\u8be5\u6587\u4ef6\u6ce8\u518c\uff0c\u6dfb\u52a0\u6743\u9650\u58f0\u660e\u7b49 | ---test # \u7f16\u5199Unit Test\u6d4b\u8bd5\u7528\u4f8b\u7684\uff0c\u662f\u5bf9\u9879\u76ee\u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002 | ---.gitignore # \u5c06app\u6a21\u5757\u5185\u6307\u5b9a\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u6392\u9664\u5728\u7248\u672c\u63a7\u5236\u4e4b\u5916 | ---build.gradle # app\u6a21\u5757\u7684gradle\u6784\u5efa\u811a\u672c\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4f1a\u6307\u5b9a\u5f88\u591a\u9879\u76ee\u6784\u5efa\u76f8\u5173\u7684\u914d\u7f6e | ---proguard-rules.pro # \u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u4ee3\u7801\u7684\u6df7\u6dc6\u89c4\u5219\uff0c\u4f1a\u5c06\u4ee3\u7801\u8fdb\u884c\u6df7\u6dc6\uff0c\u9632\u6b62\u88ab\u522b\u4eba\u7834\u89e3 | ---gradle # \u5305\u542bgradle wraper\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u6ca1\u6709\u542f\u7528 | ---.gitignore # \u5c06\u6307\u5b9a\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u6392\u9664\u5728\u7248\u672c\u63a7\u5236\u4e4b\u5916\u7684 | ---build.gradle # \u9879\u76ee\u5168\u5c40\u7684gradle\u6784\u5efa\u811a\u672c\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u4fee\u6539 | ---gradle.properties # \u5168\u5c40\u7684gradle\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u8fd9\u91cc\u914d\u7f6e\u7684\u5c5e\u6027\u5c06\u4f1a\u5f71\u54cd\u5230\u9879\u76ee\u4e2d\u6240\u6709\u7684gradle\u7f16\u8bd1\u811a\u672c | ---gradlew # \u52a0\u4e0a\u4e0b\u9762\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u7528\u6765\u5728\u547d\u4ee4\u884c\u754c\u9762\u4e2d\u6267\u884cgradle\u547d\u4ee4\uff0c\u8be5\u6587\u4ef6\u5728Linux\u548cmac\u4e2d\u4f7f\u7528 | ---gradlew.bat # \u8be5\u6587\u4ef6\u5728windows\u4e2d\u4f7f\u7528 | ---local.properties # \u7528\u4e8e\u6307\u5b9a\u672c\u673a\u7684Android SDK\u8def\u5f84\uff0c\u901a\u5e38\u81ea\u52a8\u751f\u6210\uff0c\u65e0\u9700\u4fee\u6539\uff0c\u6216\u8005SDK\u8def\u5f84\u53d1\u751f\u53d8\u5316\u4fee\u6539 | ---settings.gradle # \u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u4e2d\u6240\u6709\u5f15\u5165\u7684\u6a21\u5757\uff0c\u4e00\u822c\u81ea\u52a8\u5b8c\u6210\uff0c\u4f8b\u5982\u5f15\u5165app\u6a21\u5757 \u6d41\u7a0b\u68b3\u7406 1.AndroidManifest.xml\u4e2d\u6ce8\u518c\u6d3b\u52a8 # \u8fd9\u6bb5\u4ee3\u7801\u662f\u5bf9MainActivity\u6d3b\u52a8\u7684\u6ce8\u518c <activity android:name = \".MainActivity\" > <intent-filter> <action android:name = \"android.intent.action.MAIN\" /> # \u8fd9\u4ee3\u8868\u8fd9\u4e2a\u6d3b\u52a8\u662f\u4e3b\u6d3b\u52a8\uff0c\u70b9\u5f00app\u6253\u5f00\u7684\u5c31\u662f\u8fd9\u4e2a\u6d3b\u52a8\u754c\u9762 <category android:name = \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> 2.MainActivity.java\u91cc\u9762\u5b9e\u73b0\u6d3b\u52a8\u529f\u80fd // \u4e3b\u6d3b\u52a8\u7ee7\u627fAppCompatActivity\uff0c\u8fd9\u4e2a\u7c7b\u662fActivity\u7684\u5b50\u7c7b\uff0c\u4e3a\u4e86\u517c\u5bb9\u7cfb\u7edf\uff0c\u6700\u4f4e\u517c\u5bb9\u5230Android2.1\u7cfb\u7edf public class MainActivity extends AppCompatActivity { @Override // onCreate\u8fd9\u4e2a\u65b9\u6cd5\u662f\u6d3b\u52a8\u88ab\u521b\u5efa\u5fc5\u987b\u6267\u884c\u7684\u65b9\u6cd5\u3002 protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Android\u8bb2\u7a76\u903b\u8f91\u548c\u89c6\u56fe\u5206\u79bb\uff0c\u4e0d\u63a8\u8350\u5728\u6d3b\u52a8\u4e2d\u76f4\u63a5\u7f16\u5199\u754c\u9762\uff0c\u4e00\u822c\u662f\u5728\u5e03\u5c40\u6587\u4ef6\u4e2d\u5199\u754c\u9762\u5728\u6d3b\u52a8\u4e2d\u5f15\u5165 setContentView ( R . layout . activity_main ); // \u8be5\u65b9\u6cd5\u662f\u7ed9\u5f53\u524d\u6d3b\u52a8\u5f15\u5165\u67d0\u79cd\u5e03\u5c40 } } 3.res\u5185\u4e2d\u8d44\u6e90\u7684\u5f15\u7528 # \u4f8b\u5982res/values/strings.xml <resources> <string name = \"app_name\" >HelloWorld</string> </resources> # \u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u5f15\u7528\uff0capp_name\u5982\u679c\u662f\u4e00\u4e2axml\u6587\u4ef6\u4ee3\u8868\u4e00\u4e2a\u8d44\u6e90\uff0c\u53ef\u4ee5\u7528xml\u540d\u4ee3\u66ff # \u65b9\u6cd5\u4e00\uff1a\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7R.string.app_name \u53ef\u4ee5\u83b7\u5f97\u8be5\u5b57\u7b26\u4e32\u7684\u5f15\u7528\uff0c\u5c31\u662f\u4f20\u5165\u8fd9\u4e2a\u5e03\u5c40\u6587\u4ef6\u7684id\u5373\u53ef # \u65b9\u6cd5\u4e8c\uff1a\u5728xml\u4e2d\u901a\u8fc7@string/app_name \u53ef\u4ee5\u83b7\u5f97\u8be5\u5b57\u7b26\u4e32\u7684\u5f15\u7528 # \u5982\u679c\u5f15\u7528\u56fe\u7247\u8d44\u6e90\u53ef\u4ee5\u4f7f\u7528drawalbe\u4ee3\u66ffstring\uff0c\u540c\u7406\uff0c\u5f15\u7528\u56fe\u6807\u5c31\u4f7f\u7528mipmap\u4ee3\u66ffstring\uff0c\u5e03\u5c40\u5c31\u7528layout # \u4e3e\u4f8b:AndroidManifest.xml\u4e2d\u7684\u5f15\u7528 <application android:allowBackup = \"true\" android:icon = \"@mipmap/ic_launcher\" android:label = \"@string/app_name\" android:roundIcon = \"@mipmap/ic_launcher_round\" android:supportsRtl = \"true\" android:theme = \"@style/Theme.HelloWorld\" > ... </application> 4.build.gradle\u8be6\u89e3 Android Studio \u662f\u91c7\u7528 Gradle \u6765\u6784\u5efa\u9879\u76ee\u7684\uff0c\u6bd4 xml \u4f18\u79c0\uff0c\u5175\u5668\u4e86\u8bb8\u591a\u7e41\u7410\u7684\u914d\u7f6e\uff0c\u901a\u5e38\u6709\u4e24\u4e2a\u6587\u4ef6(\u6700\u5916\u5c42\u4e00\u4e2a+app\u76ee\u5f55\u4e0b\u4e00\u4e2a) # \u6700\u5916\u5c42\u7684build.gradle\u89e3\u6790\uff0c\u4e00\u822c\u662f\u81ea\u52a8\u751f\u6210\u7684 buildscript { repositories { google () jcenter () # Android\u4ee3\u7801\u6258\u7ba1\u4ed3\u5e93(git)\uff0c\u5f15\u7528\u8fd9\u4e2a\u540e\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u8f7b\u677e\u5f15\u7528\u4efb\u4f55jcenter\u4e2d\u7684\u5f00\u6e90\u9879\u76ee\u4e86 } dependencies { # \u58f0\u660e\u4e86\u4e00\u4e2aGradle\u63d2\u4ef6\u662f\u5e94\u7528\u4e8eandroid\u5f00\u53d1\uff0c\u56e0\u4e3aGradle\u63d2\u4ef6\u53ef\u4ee5\u7528\u6765java/c++\u7b49\u5f00\u53d1\uff0c\u9700\u8981\u6307\u540d\u7248\u672c classpath \"com.android.tools.build:gradle:4.1.1\" } } # src\u5185\u7684build.gradle # \u8981\u5e94\u7528\u7684\u63d2\u4ef6\uff0c\u6709\u4e24\u79cd\u503c\u65b9\u5f0f\u53ef\u9009\uff1b\u2460\u5e94\u7528\u7a0b\u5e8f\u6a21\u5757;\u2461\u5e93\u6a21\u5757:com.android.library:\u4f5c\u4e3a\u4ee3\u7801\u5e93\u4f9d\u9644\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u6a21\u5757\u8fd0\u884c plugins { id 'com.android.application' # \u5e94\u7528\u7a0b\u5e8f\u6a21\u5757\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c } # android\u95ed\u5305\uff0c\u53ef\u4ee5\u914d\u7f6e\u9879\u76ee\u6784\u5efa\u7684\u5404\u79cd\u5c5e\u6027 android { compileSdkVersion 30 # \u6307\u5b9a\u9879\u76ee\u7684\u7f16\u8bd1\u7248\u672c buildToolsVersion \"30.0.3\" # \u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u6784\u5efa\u5de5\u5177\u7684\u7248\u672c defaultConfig { # \u8be5\u95ed\u5305\u7528\u4e8e\u66f4\u7ec6\u8282\u7684\u914d\u7f6e applicationId \"com.example.helloworld\" # \u9879\u76ee\u7684\u5305\u540d minSdkVersion 16 # \u6307\u5b9a\u9879\u76ee\u6700\u4f4e\u517c\u5bb9\u7684Android\u7cfb\u7edf\u7248\u672c targetSdkVersion 30 # \u8868\u660e\u4f60\u5728\u8be5\u7248\u672c\u4e0a\u505a\u8fc7\u5145\u5206\u6d4b\u8bd5\uff0c\u7cfb\u7edf\u4f1a\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u542f\u7528\u4e00\u4e9b\u6700\u65b0\u7684\u529f\u80fd\u548c\u7279\u6027\uff0c\u5982\u679c\u8fd0\u884c\u5230\u66f4\u9ad8\u7248\u672c\u65b0\u529f\u80fd\u5219\u4e0d\u4f1a\u542f\u52a8 versionCode 1 # \u9879\u76ee\u7684\u7248\u672c\u53f7 versionName \"1.0\" # \u6307\u5b9a\u9879\u76ee\u7684\u7248\u672c\u540d\uff0c\u8fd9\u4e24\u4e2a\u5c5e\u6027\u5728\u751f\u6210\u5b89\u88c5\u6587\u4ef6\u7684\u65f6\u5019\u975e\u5e38\u91cd\u8981 testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" } buildTypes { # \u8be5\u95ed\u5305\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u5b89\u88c5\u6587\u4ef6\u7684\u76f8\u5173\u914d\u7f6e # \u901a\u5e38\u662fdebug\uff1a\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u6d4b\u8bd5\u7248\u5b89\u88c5\u6587\u4ef6\u7684\u914d\u7f6e\uff0c\u53ef\u5ffd\u7565\u4e0d\u5199\uff1brelease:\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u6b63\u5f0f\u7248\u672c\u5b89\u88c5\u6587\u4ef6\u7684\u914d\u7f6e release { minifyEnabled false # \u662f\u5426\u5bf9\u9879\u76ee\u7684\u4ee3\u7801\u8fdb\u884c\u6df7\u6dc6 # \u7528\u4e8e\u6307\u5b9a\u6df7\u6dc6\u65f6\u4f7f\u7528\u7684\u89c4\u5219\u6587\u4ef6\uff0c\u7b2c\u4e00\u4e2a\u6587\u4ef6:\u662f\u5728Android SDK\u76ee\u5f55\u4e0b\u7684\uff0c\u91cc\u9762\u662f\u6240\u6709\u9879\u76ee\u901a\u7528\u7684\u6df7\u6dc6\u89c4\u5219\u3002\u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff1a\u662f\u5728\u5f53\u524d\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u7684\uff0c\u91cc\u9762\u53ef\u4ee5\u7f16\u5199\u5f53\u524d\u9879\u76ee\u7279\u6709\u7684\u6df7\u6dc6\u89c4\u5219\u3002\u6ce8\u610f\u901a\u8fc7Android studio\u76f4\u63a5\u8fd0\u884c\u9879\u76ee\u751f\u6210\u7684\u90fd\u662f\u6d4b\u8bd5\u7248\u5b89\u88c5\u6587\u4ef6\uff0c\u540e\u9762\u4f1a\u8bb2\u5982\u4f55\u751f\u6210\u6b63\u5f0f\u7248\u5b89\u88c5\u6587\u4ef6 proguardFiles getDefaultProguardFile ( 'proguard-android-optimize.txt' ) , 'proguard-rules.pro' } } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } # \u8fd9\u4e2a\u95ed\u5305\u5f88\u5f3a\u5927\uff0c\u53ef\u4ee5\u6307\u5b9a\u5f53\u524d\u9879\u76ee\u6240\u6709\u7684\u4f9d\u8d56\u5173\u7cfb\uff1b\u901a\u5e38\u6709\u4e09\u79cd\u4f9d\u8d56\uff1a\u672c\u5730\u4f9d\u8d56(Jar\u5305/\u76ee\u5f55\u6dfb\u52a0\u4f9d\u8d56)\u3001\u5e93\u4f9d\u8d56(\u9879\u76ee\u4e2d\u5e93\u6a21\u5757\u6dfb\u52a0\u4f9d\u8d56)\u3001\u8fdc\u7a0b\u4f9d\u8d56(\u5bf9jcenter\u5e93\u4e0a\u7684\u5f00\u6e90\u9879\u76ee\u6dfb\u52a0\u4f9d\u8d56) dependencies { implementation 'androidx.appcompat:appcompat:1.1.0' implementation 'com.google.android.material:material:1.1.0' implementation 'androidx.constraintlayout:constraintlayout:1.1.3' testImplementation 'junit:junit:4.+' androidTestImplementation 'androidx.test.ext:junit:1.1.1' androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0' } Android\u7684\u65e5\u5fd7\u5de5\u5177Log // \u5feb\u6377\u952e\uff0conCreate\u65b9\u6cd5\u5916\u9762\u8f93\u5165logt\u53ef\u4ee5\u81ea\u52a8\u751f\u6210tag\u540d\uff0c\u7136\u540e\u65b9\u6cd5\u91cc\u9762\u4f7f\u7528logv/d/i/w/e\u53ef\u5feb\u901f\u751f\u6210 protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Log . d ( \"\u5f53\u524d\u7c7b\u540d\" , \"\u60f3\u8981\u6253\u5370\u7684\u5177\u4f53\u5185\u5bb9\" ); } \u6d3b\u52a8\u8be6\u89e3 \u00b6 Toast :Android\u7cfb\u7edf\u63d0\u4f9b\u7684\u4e00\u79cd\u63d0\u9192\u65b9\u5f0f\uff0c\u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5b83\u5c06\u4e00\u4e9b\u77ed\u5c0f\u4fe1\u606f\u63d0\u4f9b\u7ed9\u7528\u6237\uff0c\u5e76\u4e14\u4f1a\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u81ea\u52a8\u6d88\u5931\u3002 protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . first_layout ); // \u8be5\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5e03\u5c40\u6587\u4ef6\u7684\u5143\u7d20\uff0creturn View\u5bf9\u8c61 Button button1 = ( Button ) findViewById ( R . id . button_1 ); // \u4e3a\u6309\u94ae\u6ce8\u518c\u4e00\u4e2a\u76d1\u542c\u5668\uff0c\u8fd9\u6837\u70b9\u51fb\u6309\u94ae\u5c31\u4f1a\u89e6\u53d1onClick\u65b9\u6cd5 button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // Toast.makeText\u521b\u5efa\u4e00\u4e2aToast\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528show\u663e\u793a\u5373\u53ef\uff0c\u4e09\u4e2a\u53c2\u6570 // 1.Context\u5bf9\u8c61(Toast\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u6d3b\u52a8\u672c\u8eab\u662fContext\u5bf9\u8c61) // 2.Toast\u663e\u793a\u7684\u6587\u672c\u5185\u5bb9 // 3.Toast\u663e\u793a\u7684\u65f6\u957f\uff0c\u901a\u5e38\uff0cToast.LENGTH_SHORT\uff0cToast.LENGTH_LONG Toast . makeText ( FirstActivity . this , \"You clicked Button 1\" , Toast . LENGTH_SHORT ). show (); } }); } menu\u83dc\u5355 # res/mean/main.xml <?xml version = \"1.0\" encoding = \"utf-8\" ?> <menu xmlns:android = \"http://schemas.android.com/apk/res/android\" > <item android:id = \"@+id/add_item\" # \u552f\u4e00\u6807\u8bc6\u7b26 android:title = \"Add\" /> <item android:id = \"@+id/remove_item\" android:title = \"Remove\" /> </menu> @Override // \u521b\u5efa\u83dc\u5355 public boolean onCreateOptionsMenu ( Menu menu ) { // inflate\u65b9\u6cd5\u7ed9\u5f53\u524d\u6d3b\u52a8\u521b\u5efa\u83dc\u5355\uff0c\u4e24\u4e2a\u53c2\u6570 // 1.\u6307\u5b9a\u6211\u4eec\u901a\u8fc7\u54ea\u4e00\u4e2a\u8d44\u6e90\u6587\u4ef6\u6765\u521b\u5efa\u83dc\u5355\uff0c\u8fd9\u91cc\u662fR.mean.main\u6587\u4ef6 // 2.\u6307\u5b9a\u6211\u4eec\u7684\u83dc\u5355\u9879\u5c06\u6dfb\u52a0\u5230\u54ea\u4e00\u4e2aMenu\u5bf9\u8c61\u4e2d // return true; \u8868\u793a\u5141\u8bb8\u521b\u5efa\u7684\u83dc\u5355\u663e\u793a\u51fa\u6765 getMenuInflater (). inflate ( R . menu . main , menu ); return true ; } // \u4f7f\u7528\u83dc\u5355 public boolean onOptionsItemSelected ( @NonNull MenuItem item ) { switch ( item . getItemId ()){ // \u5224\u65ad\u70b9\u51fb\u7684\u662f\u54ea\u4e2a\u83dc\u5355\u9879 case R . id . add_item : Toast . makeText ( this , \"yAdd\" , Toast . LENGTH_SHORT ). show (); break ; case R . id . remove_item : Toast . makeText ( this , \"yRemove\" , Toast . LENGTH_SHORT ). show (); break ; default : } return true ; } \u9500\u6bc1\u4e00\u4e2a\u6d3b\u52a8 // Activity \u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2afinish()\u65b9\u6cd5\uff0c\u6216\u8005\u624b\u673a\u754c\u9762\u4e0aback\u4e5f\u884c button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { finish (); } }); Intent\uff1a\u6d3b\u52a8\u95f4\u7684\u7a7f\u68ad :\u7528\u4e8e\u7a0b\u5e8f\u4e2d\u5404\u7ec4\u4ef6\u7684\u4ea4\u4e92(\u4f20\u9012\u52a8\u4f5c\u3001\u6570\u636e\u7b49)\uff0c\u4e5f\u53ef\u88ab\u7528\u4e8e\u542f\u52a8\u6d3b\u52a8\u3001\u542f\u52a8\u670d\u52a1\u4ee5\u53ca\u53d1\u9001\u5e7f\u64ad\u7b49\u3002 \u663e\u793aIntent\u548c\u9690\u5f0fIntent \u663e\u793aIntent // \u4e3b\u6d3b\u52a8\u4e2dFirstActivity,\u4f7f\u7528\u663e\u793aIntent\u8c03\u7528\uff0cIntent(Context,class) public class FirstActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . first_layout ); Button button1 = ( Button ) findViewById ( R . id . button1 ); button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // 1.Context:\u8981\u6c42\u63d0\u4f9b\u4e00\u4e2a\u542f\u52a8\u6d3b\u52a8\u7684\u4e0a\u4e0b\u6587 // 2.\u6307\u5b9a\u60f3\u8981\u542f\u52a8\u7684\u76ee\u6807\u6d3b\u52a8 Intent intent = new Intent ( FirstActivity . this , SecondActivity . class ); startActivity ( intent ); // Activity\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2astartActivity()\u65b9\u6cd5\uff0c\u4e13\u95e8\u7528\u4e8e\u542f\u52a8\u6d3b\u52a8\u7684\uff0c\u63a5\u6536\u4e00\u4e2aIntent\u5bf9\u8c61\u53c2\u6570\uff0c\u7528\u4e8e\u542f\u52a8\u6d3b\u52a8 } }); } } // \u5176\u4ed6\u6d3b\u52a8SecondActivity public class SecondActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . second_layout ); } } \u9690\u5f0f Intent \uff1a\u5e76\u4e0d\u660e\u786e\u6307\u51fa\u6211\u4eec\u60f3\u8981\u542f\u52a8\u54ea\u4e00\u4e2a\u6d3b\u52a8\uff0c\u800c\u662f\u6307\u5b9a\u4e00\u7cfb\u5217\u66f4\u4e3a\u62bd\u8c61\u7684 action \u548c category \u7b49\u4fe1\u606f\uff0c\u7136\u540e\u4ea4\u7531\u7cfb\u7edf\u53bb\u5206\u6790\u8fd9\u4e2a Intent \uff0c\u5e76\u5e2e\u6211\u4eec\u627e\u51fa\u5408\u9002\u7684\u6d3b\u52a8\u53bb\u542f\u52a8\u3002 # \u901a\u8fc7\u5728<activity>\u6807\u7b7e\u4e0b\u914d\u7f6e<intent-filter>\u5185\u5bb9\u6765\u6307\u5b9a\u5f53\u524d\u6d3b\u52a8\u80fd\u591f\u54cd\u5e94\u7684action\u548ccategory <activity android:name = \".SecondActivity\" > <intent-filter> # action\u4e2d\u6307\u540d\u5f53\u524d\u6d3b\u52a8\u53ef\u4ee5\u54cd\u5e94name\u8fd9\u4e2aaction <action android:name = \"com.example.activitytest.ACTION_START\" /> # category\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u66f4\u7cbe\u786e\u7684\u6307\u540d\u4e86\u5f53\u524d\u7684\u6d3b\u52a8\u80fd\u591f\u54cd\u5e94\u7684Intent\u4e2d\u8fd8\u53ef\u80fd\u5e26\u6709\u7684category <category android:name = \"android.intent.category.DEFAULT\" /> # \u53ea\u6709\u8fd9\u4e24\u4e2a\u6807\u7b7e\u7684\u5185\u5bb9\u540c\u65f6\u5339\u914d\u4e0aIntent\u4e2d\u6307\u5b9a\u7684\u8fd9\u4e24\u4e2a\u6807\u7b7e\u624d\u80fd\u76f8\u5e94\u8be5Intent # \u6bcf\u4e2aIntent\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u4e2aaction\uff0c\u4f46\u5374\u80fd\u6307\u5b9a\u591a\u4e2acategory <category android:name = \"com.example.activitytest.MY_CATEGORY\" /> </intent-filter> </activity> // FirstActivity.java\u4fee\u6539\u70b9\u51fb\u4e8b\u4ef6\u6765\u5339\u914d button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // Intent\u4f20\u5165\u53c2\u6570\u8fdb\u884c\u5339\u914d\uff0c\u53ea\u4f20\u5165\u4e86action\u90a3category\u5339\u914d\u4e0a\u4e86\u5417\uff1f\u5f53\u7136\uff0cDEFAULT\u662f\u9ed8\u8ba4\u7684\u3002 Intent intent = new Intent ( \"com.example.activitytest.ACTION_START\" ); startActivity ( intent ); //category\u5982\u679c\u9ed8\u8ba4\uff0c\u4f1a\u5728\u8be5\u65b9\u6cd5\u8c03\u7528\u65f6\u81ea\u52a8\u52a0\u5230Intent\u4e2d\u7684 } }); // \u6bcf\u4e2aIntent\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u4e2aaction\uff0c\u4f46\u5374\u80fd\u6307\u5b9a\u591a\u4e2acategory button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { Intent intent = new Intent ( \"com.example.activitytest.ACTION_START\" ); // \u53ef\u4ee5\u901a\u8fc7\u8be5\u65b9\u6cd5\u6dfb\u52a0category intent . addCategory ( \"com.example.activitytest.MY_CATEGORY\" ) startActivity ( intent ); } }); \u9690\u5f0f Intent \u6269\u5c55\uff0c\u91cd\u8981\uff1a\u4e0d\u4ec5\u53ef\u4ee5\u542f\u52a8\u81ea\u5df1\u7a0b\u5e8f\u5185\u7684\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u542f\u52a8\u5176\u4ed6\u5f00\u6e90\u7684\u7a0b\u5e8f\uff0c\u6bd4\u5982\u5c55\u793a\u7f51\u9875 \u5c55\u793a\u7f51\u9875 button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { //Intent.ACTION_VIEW\uff1aandroid\u7cfb\u7edf\u5185\u7f6e\u7684\u52a8\u4f5c\uff0c\u5e38\u91cf\u503c\u662fandroid.intent.action.VIEW Intent intent = new Intent ( Intent . ACTION_VIEW ); // Uri.parse\u5c06\u4e00\u4e2astring\u89e3\u6790\u6210Uri\u5bf9\u8c61\uff0cintent.setData()\u5c06uri\u5bf9\u8c61\u4f20\u9012\u8fdb\u53bb\uff0c\u4e3b\u8981\u7528\u4e8e\u6307\u5b9a\u5f53\u524dIntent\u6b63\u5728\u64cd\u4f5c\u7684\u6570\u636e intent . setData ( Uri . parse ( \"http://www.baidu.com\" )); startActivity ( intent ); } }); # \u8be6\u89e3url\u5339\u914d\u548c\u7b5b\u9009,\u6211\u4eec\u53ef\u4ee5\u5728<intent-filter>\u4e2d\u914d\u7f6e\u4e00\u4e2a<data>\u6807\u7b7e\uff0c\u7528\u4e8e\u66f4\u7cbe\u786e\u5730\u6307\u5b9a\u5f53\u524d\u6d3b\u52a8\u80fd\u591f\u54cd\u5e94\u4ec0\u4e48\u7c7b\u578b\u6570\u636e android:scheme # \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u7684\u534f\u8bae\u90e8\u5206\uff0chttp android:host # \u4e3b\u673a\u540d\u90e8\u5206\uff0cwww.baidu.com android:port # \u7aef\u53e3\u90e8\u5206 android:path # \u8d44\u6e90\u8def\u5f84 android:mimeType # \u6307\u5b9a\u53ef\u4ee5\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6da6\u65ed\u4f7f\u7528\u901a\u914d\u7b26\u7684\u65b9\u5f0f\u8fdb\u884c\u6307\u5b9a # \u53ea\u6709<data>\u6807\u7b7e\u4e2d\u6307\u5b9a\u7684\u5185\u5bb9\u548cIntent\u4e2d\u643a\u5e26\u7684Data\u5b8c\u5168\u4e00\u81f4\u65f6\uff0c\u6d3b\u52a8\u624d\u54cd\u5e94\u3002\u5f53\u7136\uff0c\u4e00\u822c\u4e0d\u4f1a\u6307\u5b9a\u8fc7\u591a\uff0c\u901a\u5e38\u53ea\u9700\u8981\u6307\u5b9aandroid:scheme\u5c31\u53ef\u4ee5\u4e86 # \u4e3e\u4f8b\u5b50 <activity android:name = \".ThirdActivity\" > <intent-filter> <action android:name = \"android.intent.action.VIEW\" /> <category android:name = \"android.intent.category.DEFAULT\" /> <data android:scheme = \"http\" /> # \u6307\u5b9adata\u4e2d\u7684scheme </intent-filter> </activity> geo \u8868\u793a\u663e\u793a\u5730\u7406\u4f4d\u7f6e\u3001 tel \u8868\u793a\u62e8\u6253\u7535\u8bdd button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { Toast . makeText ( FirstActivity . this , \"baidu\" , Toast . LENGTH_SHORT ). show (); Intent intent = new Intent ( Intent . ACTION_DIAL ); // \u5185\u7f6e\u52a8\u4f5c intent . setData ( Uri . parse ( \"tel:10086\" )); startActivity ( intent ); } }); \u6d3b\u52a8\u95f4\u4f20\u9012\u6570\u636e : putExtra(\"\u952e\u540d\",\u4f20\u9012\u7684data) \uff0c\u952e\u540d:\u5728\u5f85\u4f20\u9012\u7684\u6d3b\u52a8\u4e2d\u6839\u636e\u8be5\u952e\u53d6\u503c\u3002 // 1.\u6570\u636e\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u6d3b\u52a8 // FirstActivity.java button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { String data = \"Hellow SecondActivity\" ; Intent intent = new Intent ( FirstActivity . this , SecondActivity . classss ); intent . putExtra ( \"extra_data\" , data ); startActivity ( intent ); } }); // SecondActivity.java protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . second_layout ); Intent intent = getIntent (); // \u83b7\u53d6\u7528\u4e8e\u542f\u52a8SecondaActivity\u7684Intent // getStringExtra\u83b7\u53d6\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4f20\u5165int\u578b\u6570\u636e\u5219\u7528getIntExtra();getBooleanExtra()\u7b49 String data = intent . getStringExtra ( \"extra_data\" ); Log . d ( \"input_data\" , data ); } // 2.\u6570\u636e\u56de\u4f20\u7ed9\u4e0a\u4e00\u4e2a\u6d3b\u52a8\uff0cstartActivityForResult()\uff1a\u671f\u671b\u6d3b\u52a8\u9500\u6bc1\u7684\u65f6\u5019\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7ed9\u4e0a\u4e2a\u6d3b\u52a8\uff0c\u5b83\u4e5f\u662f\u542f\u52a8\u6d3b\u52a8\u7684\u53ef\u4ee5\u4ee3\u66ffstartActivity\uff0c\u4e24\u4e2a\u53c2\u6570:1.Intent,2.\u8bf7\u6c42\u7801(\u53ea\u8981\u662f\u552f\u4e00\u503c\u5c31\u53ef\u4ee5\uff0c1) // FirstActivity.java button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { String data = \"Hellow SecondActivity\" ; Intent intent = new Intent ( FirstActivity . this , SecondActivity . class ); intent . putExtra ( \"extra_data\" , data ); startActivityForResult ( intent , 1 ); // Second\u6d3b\u52a8\u9500\u6bc1\u540e\u4f1a\u8c03\u7528First\u6d3b\u52a8\u7684onActivityResult()\u65b9\u6cd5\u6765\u63a5\u6536\u8fd4\u56de\u6570\u636e } }); // SecondActivity.java button2 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { Intent intent = new Intent (); // \u4ec5\u4ec5\u4e3a\u4e86\u4f20\u9012\u6570\u636e intent . putExtra ( \"data_return\" , \"Hellow FirstActivity\" ); // \u975e\u5e38\u91cd\u8981\uff0c\u4e13\u95e8\u7528\u4e8e\u5411\u4e0a\u4e00\u4e2a\u6d3b\u52a8\u8fd4\u56de\u6570\u636e\u7684\uff0c\u4e24\u4e2a\u53c2\u6570:1.\u8fd4\u56de\u5904\u7406\u7ed3\u679cRESULT_OK/RESULT_CANCELED;2.\u628a\u5e26\u6709\u6570\u636e\u7684Intent\u4f20\u9012\u56de\u53bb setResult ( RESULT_OK , intent ); finish (); // \u9500\u6bc1\u5f53\u524d\u6d3b\u52a8\uff0c\u4f1a\u8c03\u7528First\u6d3b\u52a8\u7684onActivityResult()\u65b9\u6cd5\u6765\u63a5\u6536\u8fd4\u56de\u6570\u636e } }); // FirstActivity\u63a5\u6536\u6570\u636e\uff0c\u5e76\u6253\u5370\u6570\u636e // onActivityResult()\u4e09\u4e2a\u53c2\u6570:1.requestCode:\u542f\u52a8\u6d3b\u52a8\u65f6\u7684\u8bf7\u6c42\u7801\uff0c2.resultCode\u8fd4\u56de\u6570\u636e\u65f6\u5904\u7406\u7684\u7ed3\u679c\uff1b3.\u643a\u5e26\u8fd4\u56de\u6570\u636e\u7684Intent private static final String TAG = \"FirstActivity\" ; @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { switch ( requestCode ){ //\u53ef\u4ee5\u542f\u52a8\u4e0d\u540c\u6d3b\u52a8\uff0c\u6d3b\u52a8\u8fd4\u56de\u90fd\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e0d\u540c\u7684requestCode case 1 : if ( resultCode == RESULT_OK ){ // \u518d\u6839\u636eresultCode\u6765\u5224\u65ad\u8fd4\u56de\u662f\u5426\u6210\u529f String returnData = data . getStringExtra ( \"data_return\" ); Log . d ( TAG , returnData ); } break default : } } // \u6709\u4e2a\u5c0f\u95ee\u9898\uff0c\u5982\u679c\u7528\u6237\u5728SecondActivity\u4e2d\u4e0d\u662f\u4f7f\u7528button\uff0c\u800c\u662fback\u8fd4\u56de\uff0c\u6570\u636e\u5c31\u63a5\u53d7\u4e0d\u5230\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u5728SecondActivity\u4e2d\u91cd\u5199onBackPressed\u65b9\u6cd5\u6765\u89e3\u51b3 @Override public void onBackPressed () { Intent intent = new Intent (); intent . putExtra ( \"data_return\" , \"Hellow FirstActivity\" ); setResult ( RESULT_OK , intent ); finish (); } \u6d3b\u52a8\u7684\u751f\u547d\u5468\u671f \u8fd4\u56de\u6808 :Android\u7684\u6d3b\u52a8\u662f\u53ef\u4ee5\u5c42\u53e0\u7684\uff0c\u6bcf\u542f\u52a8\u4e00\u4e2a\u65b0\u6d3b\u52a8\u4f1a\u8986\u76d6\u4e00\u4e2a\u539f\u6d3b\u52a8\uff0c\u70b9\u51fbback\u540e\u9500\u6bc1\u65b0\u6d3b\u52a8\uff0c\u539f\u6d3b\u52a8\u66b4\u9732\u3002\u5185\u90e8\u662f\u7528\u6808\u5b9e\u73b0\u7684\u3002 \u6d3b\u52a8\u7684\u72b6\u6001 \u8fd0\u884c\u72b6\u6001:\u4f4d\u4e8e\u6808\u9876\u7684\u6d3b\u52a8\u5904\u4e8e\u8be5\u72b6\u6001\uff0c\u5c31\u662f\u7528\u6237\u6b63\u5728\u64cd\u4f5c\u7684\u6d3b\u52a8\uff0c\u7cfb\u7edf\u6700\u4e0d\u613f\u610f\u56de\u6536\u7684\u72b6\u6001 \u6682\u505c\u72b6\u6001:\u4e0d\u518d\u4f4d\u4e8e\u6808\u9876\uff0c\u4f46\u4efb\u7136\u53ef\u89c1(\u56e0\u4e3a\u6709\u7684\u6d3b\u52a8\u4e0d\u4f1a\u5360\u636e\u6574\u4e2a\u5c4f\u5e55\uff0c\u4f8b\u5982:\u64cd\u4f5c\u5bf9\u8bdd\u6846\u6d3b\u52a8\u7684\u65f6\u5019\u9875\u9762\u4e0a\u5176\u4ed6\u6d3b\u52a8\u662f\u53ef\u89c1\u7684)\u3002\u53ea\u6709\u5728\u5185\u5b58\u6781\u4f4e\u7684\u60c5\u51b5\u4e0b\u7cfb\u7edf\u624d\u4f1a\u8003\u8651\u56de\u6536 \u505c\u6b62\u72b6\u6001:\u4e0d\u518d\u4f4d\u4e8e\u6808\u9876\uff0c\u4e14\u4e0d\u53ef\u89c1\u3002\u7cfb\u7edf\u867d\u7136\u4ecd\u4f1a\u4fdd\u7559\uff0c\u4f46\u5176\u4ed6\u9700\u8981\u5185\u5b58\u65f6\uff0c\u4f1a\u4f18\u5148\u56de\u6536 \u9500\u6bc1\u72b6\u6001:\u4ece\u8fd4\u56de\u6808\u4e2d\u79fb\u9664\u7684\u4e92\u52a8\uff0c\u7cfb\u7edf\u6700\u503e\u5411\u4e8e\u56de\u6536\u8fd9\u79cd\u7684\u72b6\u6001\u7684\u6d3b\u52a8\uff0c\u4ece\u800c\u4fdd\u8bc1\u624b\u673a\u7684\u5185\u5b58\u5145\u8db3\u3002 Activity \u7c7b\u5b9a\u4e49\u4e86 7 \u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u8986\u76d6\u6d3b\u52a8\u58f0\u660e\u5468\u671f\u7684\u6bcf\u4e00\u4e2a\u73af\u8282 \u4ee3\u7801\u6f14\u793a\u751f\u547d\u5468\u671f\u65f6\u7684\u65b0\u51fa\u73b0\u4ee3\u7801\u89e3\u91ca <activity android:name = \".DialogActivity\" android:theme = \"@android:style/Theme.Dialog\" > # \u7528\u4e8e\u7ed9\u5f53\u524d\u6d3b\u52a8\u6307\u5b9a\u4e3b\u9898\uff0c\u5bf9\u8bdd\u6846\u4e3b\u9898 </activity> \u6d3b\u52a8\u88ab\u56de\u6536\u4e86\u600e\u4e48\u529e \uff1a\u5728\u6d3b\u52a8A\u7684\u57fa\u7840\u4e0a\u542f\u52a8B\uff0c\u5047\u8bbe\u8fd9\u65f6\u5185\u5b58\u4e0d\u8db3\uff0c\u56de\u6536\u4e86A\uff0c\u7528\u6237back\u540e\u4e5f\u662f\u4f1a\u8fd4\u56deA\u7684\uff0c\u53ea\u4e0d\u662f\u6b64\u65f6A\u662f\u91cd\u65b0\u88ab\u521b\u5efa\u7684\u3002\u5982\u679cA\u662f\u6587\u672c\u6846\uff0c\u5df2\u7ecf\u5199\u597d\u4e00\u6bb5\u6587\u5b57\u4e86\uff0c\u64cd\u4f5cB\uff0cback\u540eA\u91cd\u5efa\uff0c\u6587\u5b57\u5168\u6ca1\u4e86\uff0c\u5982\u4f55\u89e3\u51b3\uff1f Activity \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a onSaveInstanceState() \u56de\u8c03\u65b9\u6cd5\uff0c\u4fdd\u8bc1\u5728\u6d3b\u52a8\u88ab\u56de\u6536\u4e4b\u524d\u4e00\u5b9a\u4f1a\u8c03\u7528\uff0c\u53ef\u4ee5\u7528\u8be5\u65b9\u6cd5\u6765\u4fdd\u5b58\u6570\u636e // onSaveInstanceState()\u4f1a\u643a\u5e26\u4e00\u4e2aBundle\u7c7b\u578b\u53c2\u6570\uff0cBundle\u4f1a\u63d0\u4f9b\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\u7528\u4e8e\u4fdd\u5b58\u6570\u636e\u3002putString(key,data)\u5b58\u653e\u5b57\u7b26\u4e32\uff0cputInt(key,data)\u5b58\u653e\u6574\u578b\u3002 @Override protected void onSaveInstanceState ( @NonNull Bundle outState ) { super . onSaveInstanceState ( outState ); String tempData = \"something you just typed\" ; outState . putString ( \"data_key\" , tempData ); } // \u6570\u636e\u4fdd\u5b58\u4e0b\u6765\u540e\u5982\u4f55\u6062\u590d\uff1f\u6211\u4eec\u4e00\u76f4\u7528\u7684onCreate()\u65b9\u6cd5\u91cc\u9762\u4e5f\u6709\u4e00\u4e2aBundle\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u56de\u590d @Override public void onCreate ( @Nullable Bundle savedInstanceState , @Nullable PersistableBundle persistentState ) { super . onCreate ( savedInstanceState , persistentState ); Log . d ( TAG , \"onCreate: \" ); setContentView ( R . layout . activity_main ); if ( savedInstanceState != null ){ String tempData = savedInstanceState . getString ( \"data_key\" ); Log . d ( TAG , tempData ); } } \u6d3b\u52a8\u7684\u542f\u52a8\u6a21\u5f0f(\u56db\u79cd) :\u53ef\u4ee5\u5728 AndroidManifest.xml \u4e2d\u901a\u8fc7\u7ed9 <activity> \u6807\u7b7e android:launchMode \u5c5e\u6027\u6765\u9009\u62e9\u542f\u52a8\u6a21\u5f0f. standard (\u9ed8\u8ba4):\u6bcf\u5f53\u542f\u52a8\u4e00\u4e2a\u65b0\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u5728\u8fd4\u56de\u6808\u4e2d\u5165\u6808\uff0c\u5e76\u5904\u4e8e\u6808\u9876\u7684\u4f4d\u7f6e\u3002 \u7cfb\u7edf\u4e0d\u4f1a\u5728\u610f\u8be5\u6d3b\u52a8\u662f\u5426\u5728\u8fd4\u56de\u6808\u5185\uff0c\u6bcf\u6b21\u542f\u52a8\u90fd\u4f1a\u521b\u5efa\u8be5\u6d3b\u52a8\u7684\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b \u3002 singleTop : \u542f\u52a8\u6d3b\u52a8\u65f6\u5982\u679c\u53d1\u73b0\u8fd4\u56de\u6808\u7684\u6808\u9876\u5df2\u7ecf\u662f\u8be5\u6d3b\u52a8\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\uff0c\u5982\u679c\u672a\u5904\u4e8e\u6808\u9876\uff0c\u8fd8\u662f\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\u7684 singleTask \uff1a \u542f\u52a8\u6d3b\u52a8\u65f6\u5982\u679c\u8be5\u6d3b\u52a8\u5728\u6808\u5185\uff0c\u4f1a\u628a\u8be5\u6d3b\u52a8\u4e4b\u4e0a\u7684\u6240\u6709\u6d3b\u52a8\u7edf\u7edf\u51fa\u6808\uff0c\u5982\u679c\u6ca1\u53d1\u73b0\u4f1a\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b singleInstance : \u7528\u4e8e\u5171\u4eab\u6d3b\u52a8\u5b9e\u4f8b ,\u4e0a\u9762\u4e09\u79cd\u65b9\u6cd5\u5982\u679c\u53d1\u73b0\u6ca1\u6709\u8be5\u6d3b\u52a8\u65f6\u4f1a\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u4f46\u5047\u5982\u6211\u6709\u8fd9\u6837\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u9700\u8981\u5171\u4eab\uff0c\u4e0a\u97623\u79cd\u65b9\u5f0f\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u65e0\u6cd5\u5b9e\u73b0\u3002 \u8be5\u6a21\u5f0f\u4f1a\u542f\u7528\u4e00\u4e2a\u65b0\u7684\u8fd4\u56de\u6808\u6765\u7ba1\u7406\u8fd9\u4e2a\u6d3b\u52a8\uff0c\u4e0d\u7ba1\u54ea\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bbf\u95ee\u8fd9\u4e2a\u6d3b\u52a8\uff0c\u90fd\u5171\u7528\u540c\u4e00\u4e2a\u8fd4\u56de\u6808\u3002 \u6d3b\u52a8\u7684\u4f7f\u7528\u6280\u5de7 \u77e5\u6653\u5f53\u524d\u662f\u5728\u54ea\u4e00\u4e2a\u6d3b\u52a8(\u8fdb\u516c\u53f8\u63a5\u6536\u522b\u4eba\u4ee3\u7801\u65f6\u5e38\u7528) // \u65b0\u5efaBaseActivity\u7c7b\u7ee7\u627fAppCompatActivity\u7c7b\u5e76\u91cd\u65b0onCreate\u65b9\u6cd5\uff0c\u7136\u540e\u8ba9\u4f60\u5199\u7684\u6240\u6709\u6d3b\u52a8\u7c7b\u7ee7\u627fBaseActivity public class BaseActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); Log . d ( \"BaseActivity\" , getClass (). getSimpleName ()); // \u7528\u4e8e\u6253\u5370\u5f53\u524d\u5b9e\u4f8b\u540d\u79f0 } } \u968f\u65f6\u968f\u5730\u9000\u51fa\u7a0b\u5e8f:\u5982\u679c\u4f60\u5904\u4e8e thrid \u6d3b\u52a8\uff0c\u4f60\u60f3\u8981\u9000\u51fa\u9700\u8981\u63093\u6b21back\uff0c\u4f60\u6309home\u952e\u53ea\u662f\u7b80\u5355\u6302\u8d77 // 1.\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u4e13\u95e8\u7684\u96c6\u5408\u7c7b\u5bf9\u6240\u6709\u4e92\u52a8\u8fdb\u884c\u7ba1\u7406\u5373\u53ef public class ActivityCollector { public static List < Activity > activities = new ArrayList <> (); public static void addActivity ( Activity activity ){ activities . add ( activity ); } public static void removeActivity ( Activity activity ) { activities . remove ( activity ); } public static void finishAll () { // \u5c06list\u4e2d\u5b58\u50a8\u7684\u6d3b\u52a8\u5168\u90e8\u9500\u6bc1\u6389 for ( Activity activity : activities ){ if ( ! activity . isFinishing ()){ activity . finish (); } } } } // 2.\u63a5\u4e0b\u6765\u4fee\u6539BaseActivity\u4e2d\u7684\u4ee3\u7801 public class BaseActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); Log . d ( \"BaseActivity\" , getClass (). getSimpleName ()); // \u7528\u4e8e\u6253\u5370\u5f53\u524d\u5b9e\u4f8b\u540d\u79f0 ActivityCollector . addActivity ( this ); } @Override protected void onDestroy () { super . onDestroy (); ActivityCollector . removeActivity ( this ); } } // 3.\u4ece\u6b64\u4ee5\u540e\uff0c\u4e0d\u7ba1\u4f60\u60f3\u5728\u4ec0\u4e48\u5730\u65b9\u9000\u51fa\u7a0b\u5e8f\uff0c\u53ea\u9700\u8981\u8c03\u7528 ActivityCollector.finishAll()\u5373\u53ef public class ThirdActivity extends BaseActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); Log . d ( TAG , \"Task id is: \" + getTaskId ()); setContentView ( R . layout . third_layout ); Button button3 = ( Button ) findViewById ( R . id . button_3 ); button3 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { ActivityCollector . finishAll (); // \u9000\u51fa\u6240\u6709\u6d3b\u52a8 // \u6740\u6389\u5f53\u524d\u8fdb\u7a0b\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u5b8c\u5168\u9000\u51fa\u3002 android . os . Process . killProcess ( android . os . Process . myPid ()); } }); } } \u542f\u52a8\u6d3b\u52a8\u7684\u6700\u4f73\u5199\u6cd5 // 1.second\u6d3b\u52a8\u9700\u8981\u7528\u5230\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5b57\u7b26\u4e32\uff0c\u5728\u542f\u52a8SecondActivity\u65f6\u5fc5\u987b\u4f20\u8fdb\u6765\uff0c\u4e0b\u9762\u7684\u5199\u6cd5\u4e00\u70b9\u95ee\u9898\u6ca1\u6709 Intent intent = new Intent ( FirstActivity . this , SecondActivity . class ); intent . putExtra ( \"param1\" , \"data1\" ); // \u867d\u7136\u7b80\u5355\uff0c\u4f46 intent . putExtra ( \"param2\" , \"data2\" ); startActivity ( intent ); //2.\u5047\u8bbeSecondActivity\u662f\u4f60\u540c\u4e8b\u5199\u7684\uff0c\u4ed6\u4e0d\u6e05\u695a\u9700\u8981\u4f20\u9012\u4ec0\u4e48\u6570\u636e\uff0c\u5982\u4f55\u5728\u4e0d\u9605\u8bfb\u540c\u4e8b\u4ee3\u7801\u548c\u4e0d\u8ba9\u540c\u4e8b\u8be2\u95ee\u4f60\u7684\u60c5\u51b5\u4e0b\u6765\u5b8c\u6210 public class SecondActivity extends BaseActivity { public static void actionStart ( Context context , String data1 , String data2 ){ Intent intent = new Intent ( context , SecondActivity . class ); intent . putExtra ( \"param1\" , data1 ); intent . putExtra ( \"param2\" , data2 ); context . startActivity ( intent ); } } //2.1\u542f\u52a8 button3 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // \u7b80\u5316\u4e86\u542f\u52a8\u4ee3\u7801 SecondActivity . actionStart ( FirstActivity . this , \"data1\" , \"data2\" ); } }); UI\u5f00\u53d1 \u00b6 \u63a7\u4ef6 TextView:\u663e\u793a\u6587\u672c\u4fe1\u606f <TextView android:id = \"@+id/text_view1\" # \u552f\u4e00\u6807\u8bc6\u7b26 android:layout_width = \"match_parent\" # \u540cfill_parent\uff0c\u8ba9\u5f53\u524d\u63a7\u4ef6\u5e03\u5c40\u548c\u7236\u5e03\u5c40\u5927\u5c0f\u4e00\u6837 android:layout_height = \"wrap_content\" # \u8ba9\u5f53\u524d\u7a7a\u95f4\u5927\u5c0f\u521a\u597d\u5305\u542b\u4f4f\u91cc\u9762\u7684\u5185\u5bb9 android:text = \"text_view1\" # \u6307\u5b9aTextView\u4e2d\u663e\u793a\u7684\u6587\u672c\u5185\u5bb9 android:gravity = \"center\" # \u4fee\u6539\u6587\u5b57\u7684\u5bf9\u9f50\u65b9\u5f0ftop/bottom/left/right/center\u4e5f\u53ef\u4ee5\u7528|\u6307\u5b9a\u591a\u4e2a android:textSize = \"24sp\" # \u6307\u5b9a\u6587\u5b57\u5927\u5c0f\uff0c\u5b89\u5353\u5b57\u4f53\u5927\u5c0f\u4f7f\u7528sp\u4e3a\u5355\u4f4d android:textColor = \"#00ff00\" # \u6307\u5b9a\u6587\u5b57\u7684\u989c\u8272 /> Button:\u6309\u94ae <Button android:id = \"@+id/button1\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" android:text = \"Button1\" # \u663e\u793aBUTTON1\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f1a\u5c06\u82f1\u6587\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199 android:textAllCaps = \"false\" # \u7981\u6b62\u82f1\u6587\u5b57\u6bcd\u8f6c\u5927\u5199 /> EditText:\u7528\u4e8e\u8f93\u5165\u548c\u7f16\u8f91\u5185\u5bb9 # \u5e94\u7528\u573a\u666f\u975e\u5e38\u666e\u904d\uff0c\u53d1\u77ed\u4fe1\uff0c\u53d1\u5fae\u535a\uff0c\u53d1qq\u7b49 <EditText android:id = \"@+id/editTextTextPersonName\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" android:ems = \"10\" android:inputType = \"textPersonName\" android:text = \"Name\" android:hint = \"Please input your name\" #\u63d0\u793a\u6027\u6587\u5b57\uff0c\u5f53\u4f60\u8f93\u5165\u5185\u5bb9\u65f6\u4f1a\u6d88\u5931 android:maxLines = \"2\" # \u6307\u5b9a\u6700\u5927\u884c\u6570\u4e3a2\u884c\uff0c\u8d85\u8fc72\u884c\u4f1a\u5411\u4e0a\u6eda\u52a8 /> // \u70b9\u51fb\u6309\u94ae\u5e76\u663e\u793a\u5185\u5bb9 public class MainActivity extends AppCompatActivity { private EditText editText ; // \u58f0\u660e\u53d8\u91cf @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); editText = ( EditText ) findViewById ( R . id . editTextTextPersonName ); Button button = ( Button ) findViewById ( R . id . button1 ); button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { String inputText = editText . getText (). toString (); // \u83b7\u53d6\u5185\u5bb9 Toast . makeText ( MainActivity . this , inputText , Toast . LENGTH_SHORT ). show (); } }); } } ImageView <ImageView android:id = \"@+id/imageView\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" android:src = \"@drawable/img1\" # \u6307\u5b9a\u56fe\u7247\u8def\u5f84 /> # \u4ee3\u7801\u4e2d\u4fee\u6539\u663e\u793a\u56fe\u7247 private ImageView imageView ; imageView = ( ImageView ) findViewById ( R.id.image_view ) ; imageView.setImageResource ( R.drawable.img_2 ) # \u4fee\u6539\u4e3a\u53e6\u4e00\u5f20\u56fe\u7247 ProgressBar :\u663e\u793a\u4e00\u4e2a\u8fdb\u5ea6\u6761\uff0c\u8868\u793a\u7a0b\u5e8f\u6b63\u5728\u52a0\u8f7d\u4e00\u4e9b\u6570\u636e\u3002 # \u5c4f\u5e55\u4e2d\u6709\u4e00\u4e2a\u5706\u5f62\u8fdb\u5ea6\u6761(\u9ed8\u8ba4)\u6b63\u5728\u65cb\u8f6c <ProgressBar android:id = \"@+id/progress_bar\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" style = \"?android:attr/progressBarStyleHorizontal\" # \u6307\u5b9a\u4e3a\u6c34\u5e73\u8fdb\u5ea6\u6761 android:max = \"100\" # \u7ed9\u8fdb\u5ea6\u6761\u8bbe\u7f6e\u4e00\u4e2a\u6700\u5927\u503c /> # \u6570\u636e\u52a0\u8f7d\u5b8c\u540e\u8fdb\u5ea6\u6761\u600e\u4e48\u6d88\u5931\uff1f\u5176\u5b9e\u6240\u6709\u7684Android\u63a7\u4ef6\u90fd\u5177\u6709\u8fd9\u4e2aandroid:visibility\u8fd9\u4e2a\u5c5e\u6027\u6307\u5b9a android:visibility = \"visible(\u9ed8\u8ba4\uff0c\u53ef\u89c1)/invisible(\u4e0d\u53ef\u89c1\uff0c\u4f46\u4ecd\u5360\u539f\u6765\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f)/gone(\u4e0d\u53ef\u89c1\uff0c\u4e0d\u5360\u4efb\u4f55\u5c4f\u5e55\u7a7a\u95f4)\" # \u4ee3\u7801\u4e2d\u4e5f\u53ef\u4ee5\u5224\u65ad private ProgressBar progressBar ; progressBar = ( ProgressBar ) findViewByID ( R.id.progress_bar ) ; if ( progressBar.getVisibility ()== View.GONE ){ progressBar.setVisibility ( View.VISIBLE ) ; } else { progressBar.setVisibility ( View.GONE ) ; } # \u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u52a8\u6001\u7684\u66f4\u6539\u8fdb\u5ea6\u6761\u7684\u8fdb\u5ea6 int progress = progressBar.getProgress () ; progress = progress + 10 ; progressBar.setProgress ( progress ) AletDialog \uff1a\u53ef\u4ee5\u5728\u5f53\u524d\u7684\u754c\u9762\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846(\u4e00\u822c\u662f\u7528\u4e8e\u63d0\u793a\u975e\u5e38\u91cd\u8981\u7684\u5185\u5bb9\u6216\u8005\u8b66\u544a\u4fe1\u606f\uff0c\u4f1a\u7f6e\u4e8e\u6240\u6709\u754c\u9762\u5143\u7d20\u4e4b\u4e0a) // \u6bd4\u5982\u9632\u6b62\u7528\u6237\u8bef\u5220\u91cd\u8981\u5185\u5bb9\uff0c\u5728\u5220\u9664\u524d\u5f39\u51fa\u4e00\u4e2a\u786e\u8ba4\u7684\u5bf9\u8bdd\u6846 button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // \u521b\u5efa\u4e00\u4e2aAlertDialog.Builder\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6807\u9898\uff0c\u5185\u5bb9\uff0c\u53ef\u5426\u53d6\u6d88\u7b49\u5c5e\u6027 AlertDialog . Builder dialog = new AlertDialog . Builder ( MainActivity . this ); dialog . setTitle ( \"This is Dialog\" ); dialog . setMessage ( \"Something important.\" ); dialog . setCancelable ( false ); // \u786e\u5b9a\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 dialog . setPositiveButton ( \"OK\" , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { } }); // \u53d6\u6d88\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 dialog . setNegativeButton ( \"Cancel\" , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { } }); // \u5c06\u5bf9\u8bdd\u6846\u663e\u793a\u51fa\u6765 dialog . show (); } }); ProgressDialog :\u8fdb\u5ea6\u6761\u5bf9\u8bdd\u6846,\u548c Dialog \u7c7b\u4f3c button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { ProgressDialog progressDialog = new ProgressDialog ( MainActivity . this ); progressDialog . setTitle ( \"This is ProgressDialog\" ); progressDialog . setMessage ( \"Loading...\" ); progressDialog . setCancelable ( true ); // \u8bbe\u7f6efalse\u5c31\u4e0d\u80fd\u901a\u8fc7Back\u952e\u6765\u53d6\u6d88 progressDialog . show (); // \u5f53\u6570\u636e\u52a0\u8f7d\u5b8c\u540e\u5fc5\u987b\u8c03\u7528 progressDialog.dismiss()\u65b9\u6cd5\u6765\u5173\u95ed\u5bf9\u8bdd\u6846\uff0c\u5426\u5219\u4f1a\u4e00\u76f4\u5b58\u5728 } }); 4\u4e2d\u5e03\u5c40\u8be6\u89e3 LinearLayout : \u7ebf\u6027\u5e03\u5c40 \uff0c\u4f1a\u8ba9\u6240\u6709\u63a7\u4ef6\u5728\u7ebf\u6027\u65b9\u5411\u4e0a\u4f9d\u6b21\u6392\u5217\uff0c\u53ef\u4ee5\u6c34\u5e73\u65b9\u5411\u6216\u8005\u5782\u76f4\u65b9\u5411\u6392\u5217 <LinearLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" xmlns:app = \"http://schemas.android.com/apk/res-auto\" xmlns:tools = \"http://schemas.android.com/tools\" android:orientation = \"vertical/horizontal\" # \u5782\u76f4\u6392\u5217\u6216\u8005\u6c34\u5e73\u6392\u5217 android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" /> # 1.\u4e0a\u8282\u4e2d\u63a7\u4ef6\u7684android:layout_gravity=\"top/center_vertical/bottom\"\u53ef\u4ee5\u63a7\u5236\u63a7\u4ef6\u4f4d\u7f6e # 2.android:layout_weight\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u6bd4\u4f8b\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\u63a7\u4ef6\u7684\u5927\u5c0f\u3002\u5728\u624b\u673a\u5c4f\u5e55\u9002\u914d\u7684\u8fc7\u7a0b\u4e2d\u53d1\u6325\u5f88\u5927\u4f5c\u7528 <\u63a7\u4ef6 android:layout_width = \"0dp\" # \u56e0\u4e3a\u8981\u4f7f\u7528layout_weight\u6765\u63a7\u5236\u6240\u4ee5width\u8981\u51990 android:layout_weight = \"1\" # \u8fd9\u4e2a1\u662f\u6240\u5360\u6743\u91cd\uff0c\u5982\u679c\u6709\u591a\u4e2a\u63a7\u4ef6\uff0c\u90a3\u4e48\u4f1a\u628aweight\u503c\u6c42\u548c\uff0c\u7136\u540e\u6309\u6bd4\u4f8b\u5206\u914d /> RelativeLayout:\u76f8\u5bf9\u5e03\u5c40 <RelativeLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" /> # 1.\u76f8\u5bf9\u4e8e\u7236\u5e03\u5c40\u8fdb\u884c\u5b9a\u4f4d <Button android:id = \"@+id/button1\" android:layout_width = \"wrap_content\" android:layout_height = \"wrap_content\" android:text = \"Button1\" # \u76f8\u5bf9\u4e8e\u7236\u5143\u7d20\u7684\u5bf9\u9f50\u65b9\u5f0f android:layout_alignParentLeft = \"true\" android:layout_alignParentRight = \"true\" android:layout_alignParentTop = \"true\" android:layout_alignParentBottom = \"true\" android:layout_centerInParent = \"true\" /> # 2.\u76f8\u5bf9\u4e8e\u63a7\u4ef6\u8fdb\u884c\u5b9a\u4f4d <Button android:id = \"@+id/button2\" android:layout_width = \"wrap_content\" android:layout_height = \"wrap_content\" android:text = \"Button2\" # \u76f8\u5bf9\u5176\u4ed6\u63a7\u4ef6 android:layout_above = \"@id/button1\" # button1\u4e0a\u65b9 android:layout_below = \"@id/button1\" android:layout_toLeftOf = \"@id/button1\" android:layout_toRightOf = \"@id/button1\" android:layout_alignLeft = \"@id/button1\" # \u8be5\u63a7\u4ef6\u7684\u5de6\u8fb9\u7f18\u5bf9\u9f50\u53e6\u4e00\u4e2a\u63a7\u4ef6\u7684\u5de6\u8fb9\u7f18 android:layout_alignRight = \"@id/button1\" android:layout_alignTop = \"@id/button1\" android:layout_alignBottom = \"@id/button1\" # \u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u63a7\u4ef6\u5f15\u7528\u53e6\u4e00\u4e2a\u63a7\u4ef6\u7684id\u65f6\uff0c\u8be5\u63a7\u4ef6\u4e00\u5b9a\u8981\u5b9a\u4e49\u5728\u5f15\u7528\u63a7\u4ef6\u7684\u540e\u9762\uff0c\u4e0d\u7136\u4f1a\u627e\u4e0d\u5230id /> FrameLayout\uff1a\u5e27\u5e03\u5c40 ,\u6240\u6709\u7a7a\u95f4\u90fd\u4f1a\u9ed8\u8ba4\u6446\u653e\u5728\u5e03\u5c40\u7684\u5de6\u4e0a\u89d2\uff0c\u4e0d\u5e38\u7528 <FrameLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" /> # \u53ef\u4ee5\u4f7f\u7528android:layout_gravity=\u201cleft/xx\u201d\u6765\u6307\u5b9a\u63a7\u4ef6\u7684\u5bf9\u9f50\u65b9\u5f0f \u767e\u5206\u6bd4\u5e03\u5c40 :\u4e0d\u518d\u4f7f\u7528 match_parent\u3001wrap_content \uff0c\u800c\u662f\u5141\u8bb8\u76f4\u63a5\u6307\u5b9a\u63a7\u4ef6\u5728\u5e03\u5c40\u4e2d\u6240\u5360\u7684\u767e\u5206\u6bd4\u3002\u7531\u4e8e LinearLayout \u5df2\u7ecf\u652f\u6301\u6309\u6bd4\u4f8b\u6307\u5b9a\u63a7\u4ef6\u5927\u5c0f\u4e86\uff0c\u56e0\u6b64\u767e\u5206\u6bd4\u5e03\u5c40\u53ea\u4e3a FrameLayout,RelativeLayout \u63d0\u4f9b\u6269\u5c55\u3002\u63d0\u4f9b\u4e86 PercentFrameLayout,PercentRelativeLayout \u4e24\u4e2a\u5168\u65b0\u7684\u5e03\u5c40\u3002\u5b9a\u4e49\u5728 support \u5e93\u4e2d\uff0c\u9700\u8981\u5728\u9879\u76ee\u7684 build.gradle \u4e2d\u6dfb\u52a0\u767e\u5206\u6bd4\u5e03\u5c40\u5e93\u7684\u4f9d\u8d56\u3002 # app/build.gradle\u6587\u4ef6\uff0c\u6dfb\u52a0\u4f9d\u8d56 dependencies { implementation 'com.android.support:percent:28.0.0' # \u7ee7\u627f\u4e86\u76f8\u5e94\u5e03\u5c40\u7684\u6240\u6709 } # xml\u4e2d\uff0c\u7531\u4e8e\u767e\u5206\u6bd4\u5e03\u5c40\u5e76\u6ca1\u6709\u5728SDK\u4e2d\uff0c\u6240\u4ee5\u8981\u5199\u5b8c\u6574\u8def\u5f84\uff0c\u540c\u65f6\u8fd8\u5f97\u5b9a\u4e49\u4e00\u4e2aapp\u7684\u547d\u540d\u7a7a\u95f4\u3002 <android.support.percent.PercentFrameLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" xmlns:app = \"http://schemas.android.com/apk/res-auto\" android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" > <Button android:id = \"@+id/btn2\" android:layout_gravity = \"right|top\" android:text = \"btn2\" android:textAllCaps = \"false\" app:layout_heightPercent = \"50%\" app:layout_widthPercent = \"50%\" /> </android.support.percent.PercentFrameLayout> \u81ea\u5b9a\u4e49\u63a7\u4ef6 \u81ea\u5b9a\u4e49\u5e03\u5c40 # \u81ea\u5df1\u65b0\u5efa\u4e00\u4e2a\u5e03\u5c40title.xml\uff0c\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\u5199\u597d\uff0c\u5e03\u5c40\u4e2d\u60f3\u52a0\u5165\u5317\u4eac\u56fe\u7247\u53ef\u4ee5\u8bf4\u4f7f\u7528android:background=\"\" # \u5982\u4f55\u5728\u4e3b\u5e03\u5c40\u4e2d\u8c03\u7528\u5462,\u5728activity_main.xml\u4e2d\u53ea\u9700\u8981\u5199\u4e00\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86 <include layout = \"@layout/title\" > # \u5f15\u5165\u5373\u53ef \u81ea\u5b9a\u4e49\u63a7\u4ef6 // \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6807\u9898\u680f\u63a7\u4ef6,\u9700\u8981\u5148\u5199\u4e00\u4e2aTitleLayout\u7c7b public class TitleLayout extends Linearlayout { public TitleLayout ( Context context , AttributeSet attrs ){ super ( context , attrs ); // \u91cd\u5199\u4e86LinearLayout\u4e2d\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0cLayoutInflater.from\u65b9\u6cd5\u53ef\u4ee5\u6784\u5efaLayoutInflater\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528inflate\u65b9\u6cd5\u5c31\u53ef\u4ee5\u52a8\u6001\u52a0\u8f7d\u4e00\u4e2a\u5e03\u5c40\u6587\u4ef6\u3002 // inflate(\u5e03\u5c40\u6587\u4ef6\u7684id\uff0c\u7ed9\u52a0\u8f7d\u597d\u7684\u5e03\u5c40\u518d\u6dfb\u52a0\u4e00\u4e2a\u7236\u5e03\u5c40:\u8fd9\u91cc\u60f3\u6307\u5b9a\u4e3aTitleLayout) LayoutInflater . from ( context ). inflate ( R . layout . title , this ); } } // \u5728\u5e03\u5c40\u6587\u4ef6\u4e2d\u6dfb\u52a0\u8fd9\u4e2a\u63a7\u4ef6 < com . example . xxx . TitleLayout // \u9700\u8981\u6307\u660e\u5b8c\u6574\u7c7b\u540d android : layout_width = \"xx\" android : layout_height = \"xx\" /> ListView(\u83dc\u5355\u76ee\u5f55)\uff1a\u6700\u5e38\u7528\uff0c\u6700\u96be\u7528 // 1.xml\u4e2d\u6ce8\u518c < ListView android : id = \"@+id/list_view\" android : layout_width = \"match_parent\" android : layout_height = \"match_parent\" tools : layout_editor_absoluteX = \"172dp\" tools : layout_editor_absoluteY = \"191dp\" /> // 2.\u4ee3\u7801\u4e2d\u8c03\u7528\uff0c\u6ce8\u610fListView\u5bf9\u8c61\u65e0\u6cd5\u76f4\u63a5\u63a5\u53d7\u6570\u636e\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7\u9002\u914d\u5668ArrayAdapter\u6765\u4f20\u8f93\uff0c\u8be5\u9002\u914d\u5668\u662f\u6cdb\u578b\uff0c\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570,ArrayAdapter(\u5f53\u524d\u4e0a\u4e0b\u6587\uff0cListView\u5b50\u9879\u5e03\u5c40\u7684id,\u6570\u7ec4\u6570\u636e) private String data [] = { \"apple\" , \"pear\" , \"pineapple\" }; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); ArrayAdapter < String > adapter = new ArrayAdapter < String > ( MainActivity . this , android . R . layout . simple_list_item_1 , data ); ListView listView = ( ListView ) findViewById ( R . id . list_view ); listView . setAdapter (( adapter )); }","title":"java\u7b80\u660e\u6559\u7a0band\u5b89\u5353\u5f00\u53d1"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/#java","text":"// 1.\u7b2c\u4e00\u4e2ajava\u7a0b\u5e8f // \u7c7b\u540d:\u9996\u5b57\u6bcd\u5927\u5199\uff0c\u5927\u5c0f\u5199\u654f\u611f\u3002public:\u516c\u5f00\u7684\u3002static:\u9759\u6001\u7684 package yuyang ; public class Hello { public static void main ( String [] args ) { System . out . println ( \"Hello, world!\" ); } } // 1.1 \u5305:package \u7c7b\u4f3cc++\u7684namespace\uff0c\u5305\u53ef\u4ee5\u6709\u591a\u5c42\u7ed3\u6784\uff0c\u7528.\u9694\u5f00:yuyang.utils.xxx // 1.1.1 \u4e0d\u540cpackage\u4e0b\u7684\u76ee\u5f55\u7ed3\u6784 package_sample // \u6839\u76ee\u5f55 - src // \u653e\u7f6e\u6e90\u7801 - hong - Person . java - ming - Person . java - mt - yang - Arrays . java // 1.1.2 \u540c\u4e00\u4e2a\u5305\u4e0b\u7684\u7c7b\u95f4\u8bbf\u95ee\u65e0\u9700import xxx,\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee:\u4f8b\u5982Main\u7c7b\u4e2d\u8bbf\u95eePerson\u7c7b new Person(); // 1.1.3 \u8bbf\u95ee\u5176\u4ed6\u5305\u4e0b\u9762\u7684\u7c7b import mt.yang.Arrays // import mt.yang.* // \u5bfc\u5165\u8fd9\u4e2a\u5305\u4e0b\u6240\u6709\u7c7b public class Person { public void run () { Arrays arrays = new Arrays (); } } // \u6269\u5c55:\u5bfc\u5165\u4e00\u4e2a\u7c7b\u4e2d\u6240\u6709\u7684\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u65b9\u6cd5 import static java.lang.System.* ; // \u5bfc\u5165System\u7c7b\u7684\u6240\u6709\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u65b9\u6cd5: // 1.2 \u547d\u4ee4\u884c\u53c2\u6570: String[] args for ( String arg : args ) { // \u904d\u5386\u8f93\u51fa System . out . println ( arg ); } // 2.\u6570\u636e\u7c7b\u578b // \u6574\u6570\u7c7b\u578b\uff1abyte\uff0cshort\uff0cint\uff0clong\u3002\u4e3e\u4f8b:int x = 100; // \u6d6e\u70b9\u6570\u7c7b\u578b\uff1afloat\uff0cdouble\u3002\u4e3e\u4f8b:float y = 1.34f;// f\u540e\u7f00\u662f\u5fc5\u987b\u7684 // \u5b57\u7b26\u7c7b\u578b\uff1achar\u3002\u4e3e\u4f8b:char a = 'a'/'\u4e2d'; // \u90fd\u5360\u4e24\u4e2a\u5b57\u8282\u3002\u5355\u5f15\u53f7\u8868\u793a\uff0c\u53cc\u5f15\u53f7\u662f\u5b57\u7b26\u4e32 // \u5b57\u7b26\u4e32\u7c7b\u578b\uff1a\u5b57\u7b26\u4e32\u62fc\u63a5: +\u3002\u5185\u5bb9\u4e0d\u53ef\u53d8\u7279\u6027:\u53d8\u91cf\u7c7b\u4f3c\u6307\u9488\u3002\u7a7a\u503c:null\u8868\u793a(null != \"\") //\u8f6c\u4e49\u5b57\u7b26: \\\":\",\\':,\\\\:\\,\\n:\u6362\u884c,\\r:\u56de\u8f66,\\t:tab\u7b26,\\u####:\u8868\u793a\u4e00\u4e2aUnicode\u7f16\u7801\u7684\u5b57\u7b26 //\u5b57\u7b26\u4e32\u7c7b\u578b\uff1as1==s2:s1\u548cs2\u5fc5\u987b\u6307\u5411\u540c\u4e00\u5bf9\u8c61(\u5565\u90fd\u4e00\u6837)\uff0cs1.equals(s2):s1\u548cs2\u53ea\u8981\u7c7b\u578b+\u5185\u5bb9\u76f8\u540c\u5c31\u884c //s1.equals(s2)\u65f6\uff0c\u5982\u679c\u53d8\u91cfs1\u4e3anull\uff0c\u4f1a\u62a5NullPointerException\uff0c\u6240\u4ee5:if (\"hello\".equals(s))\u6216 \u8005if (s1 != null && s1.equals(\"hello\")) // \u5e03\u5c14\u7c7b\u578b\uff1aboolean\u3002\u4e3e\u4f8b:boolean b1 = true/false; // \u5e38\u91cf(\u4e0d\u53ef\u4e8c\u6b21\u8d4b\u503c)\uff1afinal double PI = 3.14; // final\u4fee\u9970\u5e38\u91cf\uff0c\u5e38\u91cf\u540d\u5e38\u5927\u5199\u3002 // var\u7c7b\u578b\uff0cvar sb = new StringBuilder();//\u7cfb\u7edf\u81ea\u52a8\u63a8\u65advar\u4e3aStringBuilder\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u53d8\u91cf\u540d\u592a\u957f,\u7b80\u5199 // \u7c7b\u578b\u5f3a\u8f6c: // 2.1 \u5927\u8303\u56f4\u8f6c\u5c0f\u8303\u56f4\uff0c\u5f3a\u5236\u8f6c\u6362:() --> int i=10;short a = (short)i; \u8d85\u51fa\u8303\u56f4\u53ef\u80fd\u5f97\u5230\u9519\u8bef\u7ed3\u679c\u3002 // 2.2 \u5c0f\u8303\u56f4\u8f6c\u5927\u8303\u56f4\uff0c\u81ea\u52a8\u8f6c\u6362:short+int=int\uff0cshort<int<float<String(\u6700\u9ad8\u7ea7\u522b) // 2.3 \u6570\u7ec4 int [] ns = new int [ 5 ] ; //\u8bbf\u95ee:ns[0]\u3002\u957f\u5ea6:ns.length\u3002\u9ed8\u8ba4\u503c:int=0,float=0.0,boolean=false; int [] ns = new int [] { 68 , 79 , 91 , 85 , 62 }; // \u6307\u5b9a\u521d\u59cb\u5316\u5143\u7d20\uff0c\u7f16\u8bd1\u5668\u81ea\u52a8\u63a8\u65ad\u5927\u5c0f int [] ns = { 68 , 79 , 91 , 85 , 62 }; // \u8fdb\u4e00\u6b65\u7b80\u5199\u3002 String [] names = { \"aa\" , \"bb\" , \"cc\" }; // 3.\u8fd0\u7b97\uff0c\u6ce8\u610f:\u5982\u679c\u8ba1\u7b97\u7ed3\u679c\u8d85\u51fa\u4e86\u8303\u56f4\uff0c\u5c31\u4f1a\u4ea7\u751f\u6ea2\u51fa\uff0c\u800c\u6ea2\u51fa\u4e0d\u4f1a\u51fa\u9519\uff0c\u5374\u4f1a\u5f97\u5230\u4e00\u4e2a\u5947\u602a\u7684\u7ed3\u679c int x = 120 / 11 ; // 10:\u5c5e\u4e8e\u6574\u9664\u7ed3\u679c n += 100 / n -= 100 ; n ++/ n -- ; int a = n << 1 ; // \u79fb\u4f4d\u64cd\u4f5c: \u500d\u589e:<<\uff0c\u500d\u51cf:>>\uff0c\u7b26\u53f7\u4f4d\u8ddf\u7740\u53f3\u79fb\u8fd0\u7b97:n>>>1; n = 0 & 0 ; // \u4f4d\u8fd0\u7b97:& | ~ ^(\u5f02\u6216) // 3.1 \u6ce8\u610f:\u6d6e\u70b9\u6570\u8fd0\u7b97\u5b58\u5728\u7740\u8bef\u5dee\u3002\u4f8b\u59820.1\u6362\u7b97\u6210\u4e8c\u8fdb\u5236\u662f\u4e00\u4e2a\u65e0\u9650\u5faa\u73af\u7684\u5c0f\u6570\uff0c\u53ea\u80fd\u8fd1\u4f3c\u5b58\u50a8\u3002 // 3.2 \u5e03\u5c14\u8fd0\u7b97 && || ! > >= < <= == != false && x // \u7ed3\u679c\u603b\u662ffalse\uff0c\u5c5e\u4e8e\u77ed\u8def\u8fd0\u7b97\uff0c\u56e0\u4e3a\u7b2c\u4e00\u4e2afalse\u5c31\u5df2\u7ecf\u786e\u5b9a\u4e86\uff0c\u7b2c\u4e8c\u4e2a\u4e0d\u4f1a\u88ab\u8ba1\u7b97 // 3.3 \u4e09\u5143\u8fd0\u7b97\u7b26 b ? x : y ; // b\u8868\u8fbe\u5f0f\u4e3atrue,return x,else return y;// x\u548cy\u7684\u7c7b\u578b\u5fc5\u987b\u76f8\u540c // 4.\u6d41\u7a0b\u63a7\u5236 // 4.0 \u8f93\u5165\u64cd\u4f5c import java.util.Scanner ; // \u5bfc\u5165\u67d0\u4e2a\u7c7b ... // System.out\u4ee3\u8868\u6807\u51c6\u8f93\u51fa\u6d41\uff0c\u800cSystem.in\u4ee3\u8868\u6807\u51c6\u8f93\u5165\u6d41 Scanner scanner = new Scanner ( System . in ); //\u521b\u5efaScanner\u5bf9\u8c61 String name = scanner . nextLine (); // \u8bfb\u53d6\u4e00\u884c\u8f93\u5165\u5e76\u83b7\u53d6\u5b57\u7b26\u4e32 int age = scanner . nextInt (); // \u8bfb\u53d6\u4e00\u884c\u8f93\u5165\u5e76\u83b7\u53d6\u6574\u6570,Scanner\u4f1a\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7c7b\u578b,\u56e0\u6b64\u4e0d\u5fc5\u624b\u52a8\u8f6c\u6362\u3002 ... // 4.1 \u683c\u5f0f\u5316\u8f93\u51fa:%(\u5360\u4f4d\u7b26) // %d \u683c\u5f0f\u5316\u8f93\u51fa\u6574\u6570 // %x \u683c\u5f0f\u5316\u8f93\u51fa\u5341\u516d\u8fdb\u5236\u6574\u6570 // %f \u683c\u5f0f\u5316\u8f93\u51fa\u6d6e\u70b9\u6570 // %e \u683c\u5f0f\u5316\u8f93\u51fa\u79d1\u5b66\u8ba1\u6570\u6cd5\u8868\u793a\u7684\u6d6e\u70b9\u6570 // %s \u683c\u5f0f\u5316\u5b57\u7b26\u4e32 // %% \u8868\u793a\u4e00\u4e2a%\u5b57\u7b26\u672c\u8eab System . out . print ( \"xxx \" ); // \u4e0d\u6362\u884c System . out . printf ( \"a = %.2f,b = %08x\" , d , d ); // a=2\u4f4d\u5c0f\u6570,b=\u683c\u5f0f\u5316\u6210\u5341\u516d\u8fdb\u5236\uff0c\u5e76\u75280\u8865\u8db38\u4f4d. // 4.2 if\u8bed\u53e5 if ( n >= 90 ) { // ... } else if ( n >= 60 ) { // ... } else { // ... } // 4.3 switch,\u5fc5\u987b\u4fdd\u8bc1\u6709break switch ( option ) { case 3 : ... break ; case 2 : ... break ; case 1 : ... break ; default : ... break ; } // \u4e0d\u5e26break\u7684switch\u5982\u4f55\u5199\uff1f switch ( fruit ) { case \"apple\" -> System . out . println ( \"Selected apple\" ); case \"pear\" -> System . out . println ( \"Selected pear\" ); // case \"apple\",\"pear\" -> System.out.println(\"Selected apple or pear\"); case \"mango\" -> { // \u65b0\u7b26\u53f7->,\u5982\u679c\u6709\u591a\u6761\u8bed\u53e5\uff0c\u4f7f\u7528{}\u5305\u88f9 System . out . println ( \"Selected mango\" ); System . out . println ( \"Good choice!\" ); } default -> System . out . println ( \"No fruit selected\" ); } // 4.4 while\u5faa\u73af while ( \u6761\u4ef6\u8868\u8fbe\u5f0f ) { // \u5faa\u73af\u8bed\u53e5 } // do-while\u5faa\u73af do { \u6267\u884c\u5faa\u73af\u8bed\u53e5 } while ( \u6761\u4ef6\u8868\u8fbe\u5f0f ); // 4.5 for\u5faa\u73af for ( \u521d\u59cb\u6761\u4ef6 ; \u5faa\u73af\u68c0\u6d4b\u6761\u4ef6 ; \u5faa\u73af\u540e\u66f4\u65b0\u8ba1\u6570\u5668 ) { // \u6267\u884c\u8bed\u53e5 } // \u4e3e\u4f8b\u5b50 for ( int i = 1 ; i <= 100 ; i ++ ) { // \u521d\u59cb\u5316\u53ef\u4ee5\u5728for\u5185\u90e8int i=1; sum = sum + i ; } // \u9ad8\u7ea7\u7528\u6cd5 // 4.5.1 \u4e0d\u8bbe\u7f6e\u7ed3\u675f\u6761\u4ef6: for ( int i = 0 ; ; i ++ ) { ... } //4.5.2 \u4e0d\u8bbe\u7f6e\u7ed3\u675f\u6761\u4ef6\u548c\u66f4\u65b0\u8bed\u53e5: for ( int i = 0 ; ;) { ... } // 4.5.3 \u4ec0\u4e48\u90fd\u4e0d\u8bbe\u7f6e: for (;;) { ... } // 4.6 for-each\u5faa\u73af:\u5e38\u7528\u6765\u904d\u5386\u6570\u7ec4,\u56e0\u4e3a\u6570\u7ec4\u53ef\u8fed\u4ee3(Array,List,Map,...) int [] ns = { 1 , 4 , 9 , 16 , 25 }; for ( int n : ns ) { // n\u76f4\u63a5\u8868\u793a\u5143\u7d20 System . out . println ( n ); } // 5 \u6570\u7ec4\u64cd\u4f5c // 5.1 \u6570\u7ec4\u6392\u5e8f import java.util.Arrays ; int [] ns = { 28 , 12 , 89 , 73 , 65 , 18 , 96 , 50 , 8 , 36 }; System . out . println ( Arrays . toString ( ns )); // \u6392\u5e8f\u524d Arrays . sort ( ns ); // \u5f00\u59cb\u6392\u5e8f System . out . println ( Arrays . toString ( ns )); // \u6392\u5e8f\u540e // 5.2 \u591a\u7ef4\u6570\u7ec4 int [][] ns = { { 1 , 2 , 3 , 4 }, { 5 , 6 , 7 , 8 }, { 9 , 10 , 11 , 12 } }; ns [ 1 ][ 2 ] ; // \u8bbf\u95ee // \u5faa\u73af\u8bbf\u95ee for ( int [] arr : ns ) { for ( int n : arr ) { System . out . print ( n ); System . out . print ( ' , ' ); } System . out . println (); }","title":"java\u57fa\u7840"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/#_1","text":"// 1 \u7c7b class Person { private String name ; // \u79c1\u6709\u5c5e\u6027\uff0c\u5916\u90e8\u4e0d\u53ef\u8bbf\u95ee,\u5982\u679c\u6ca1\u8d4b\u503c,\u9ed8\u8ba4String=null,int=0,boolean=false; private int age ; // \u6784\u9020\u65b9\u6cd5:\u65e0\u8fd4\u56de\u503c\uff0c\u540d\u79f0\u662f\u7c7b\u540d\uff0c\u53c2\u6570\u65e0\u9650\u5236\uff0c\u8c03\u7528\u662f\u5fc5\u987b\u4f7f\u7528new,\u5982\u679c\u4e0d\u81ea\u5df1\u5b9a\u4e49\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u751f\u6210\u4e00\u4e2a\uff0c\u4e00\u65e6\u4e00\u5b9a\u540e\u5c31\u4e0d\u4f1a\u518d\u9ed8\u8ba4\u751f\u6210\u4e86\uff0c\u6240\u4ee5\u5e38\u5e38\u76f4\u63a5\u5b9a\u4e49\u4e24\u4e2a,\u6240\u4ee5\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u5b9a\u4e49\u591a\u4e2a public Person (){ } public Person ( String name ) { this . name = name ; } // \u5f53\u7136\u4e00\u4e2a\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u8c03\u7528\u5176\u4ed6\u6784\u9020\u65b9\u6cd5,\u8c03\u7528\u65b9\u6cd5\uff0cthis() public Person ( String name , int age ){ this ( name ); this . age = age ; } // \u4e0b\u9762\u662f\u666e\u901a\u65b9\u6cd5\u7684\u4f7f\u7528 public String getName () { // \u516c\u6709\u65b9\u6cd5,\u5916\u90e8\u53ef\u4ee5\u8bbf\u95ee return this . name ; } public void setName ( String name ) { // \u5bf9name\u8fdb\u884c\u68c0\u67e5 if ( name == null || name . isBlank ()) { throw new IllegalArgumentException ( \"invalid name\" ); } // this\u53d8\u91cf:\u9690\u542b\u7684\u53d8\u91cfthis\uff0c\u5b83\u59cb\u7ec8\u6307\u5411\u5f53\u524d\u5b9e\u4f8b\u3002\u56e0\u6b64\uff0c\u901a\u8fc7this.field\u5c31\u53ef\u4ee5\u8bbf\u95ee\u5f53\u524d\u5b9e\u4f8b\u7684\u5b57\u6bb5 this . name = name . strip (); // \u53bb\u6389\u9996\u5c3e\u7a7a\u683c } // \u65b9\u6cd5\u91cd\u8f7d:\u65b9\u6cd5\u540c\u540d\uff0c\u4f46\u53c2\u6570\u4e0d\u540c(\u53c2\u6570\u987a\u5e8f\u3001\u53c2\u6570\u7c7b\u578b\u7b49)\uff0c\u4e00\u822c\u800c\u8a00\u8fd4\u56de\u503c\u90fd\u662f\u76f8\u540c\u7684\u3002\u8fd4\u56de\u503c\u7c7b\u578b\u4e0d\u540c\u4e0d\u7b97 public void hello () { System . out . println ( \"Hello, world!\" ); } public void hello ( String name ) { System . out . println ( \"Hello, \" + name + \"!\" ); } } // 1.1 \u4fee\u9970\u7b26 private : \u5916\u90e8\u4ee3\u7801\u65e0\u6cd5\u8bbf\u95ee \uff0c \u5185\u90e8\u4ee3\u7801\u53ef\u4ee5\u8bbf\u95ee // 1.2 \u65b9\u6cd5\u5b9a\u4e49 \u4fee\u9970\u7b26 \u65b9\u6cd5\u8fd4\u56de\u7c7b\u578b \u65b9\u6cd5\u540d ( \u65b9\u6cd5\u53c2\u6570\u5217\u8868 ) { \u82e5\u5e72\u65b9\u6cd5\u8bed\u53e5 ; return \u65b9\u6cd5\u8fd4\u56de\u503c ; // \u5982\u679c\u65e0\u8fd4\u56de\u503c\uff0c\u8fd4\u56de\u7c7b\u578bvoid } // 1.3 \u65b9\u6cd5\u4f20\u53c2\uff0c\u53ef\u53d8\u53c2\u6570:\u53ef\u53d8\u53c2\u6570\u7528\u7c7b\u578b...\u5b9a\u4e49\uff0c\u53ef\u53d8\u53c2\u6570\u76f8\u5f53\u4e8e\u6570\u7ec4\u7c7b\u578b,\u6ce8\u610f\u53c2\u6570\u4e0d\u80fd\u662fnull public void setNames ( String ... names ){ this . names = names }; // \u8c03\u7528\u65f6\u4f20\u5165\u7684\u53c2\u6570\u4e2a\u6570\u53ef\u4ee5\u968f\u610f // \u7b49\u4ef7\u4e8e public void setNames ( String [] names ){ this . names = names } // 1.3.1 \u65b9\u6cd5\u7684\u5f15\u7528\u4f20\u53c2:\u4f8b\u5982\u4f20\u5165\u6570\u7ec4\u540d\uff0c\u8fd9\u6837\uff0c\u5916\u90e8\u7684\u6570\u7ec4\u6539\u53d8\uff0c\u65b9\u6cd5\u4e2d\u7684\u6570\u7ec4\u4e5f\u4f1a\u6539\u53d8\uff0c\u7c7b\u4f3c\u6307\u9488 // 2 \u7ee7\u627f:extends\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u80fd\u4ece\u591a\u4e2a\u7c7b\u7ee7\u627f\uff0c\u4f46\u53ef\u4ee5\u5b9e\u73b0\u591a\u63a5\u53e3(\u89c1\u4e0b\u6587) class Student extends Person { // \u65e0\u9700\u91cd\u590d\u5199Person\u7c7b\u4e2d\u7684\u5df2\u6709\u65b9\u6cd5\uff0c\u56e0\u4e3a\u7ee7\u627f\u540e\u5df2\u7ecf\u5305\u542b // \u589e\u52a0\u65b0\u7684\u65b9\u6cd5\u5c31\u884c public String hello (){ return \"Hello\" + super . name ; // super\u5173\u952e\u5b57\u8868\u793a\u7236\u7c7b(==\u7236\u7c7bthis),\u6ce8\u610f\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7236\u7c7b\u79c1\u6709 } } // 2.1 \u4fee\u9970\u7b26 private : \u65e0\u6cd5\u88ab\u5176\u4ed6\u7c7b\u8bbf\u95ee\u6216\u5b50\u7c7b\u65e0\u6cd5\u8bbf\u95ee\u7236\u7c7b\u7684private\u5b57\u6bb5\u6216\u8005private\u65b9\u6cd5 protected : \u7528\u4e8e\u7ee7\u627f -> \u7528protected\u4fee\u9970\u7684\u5b57\u6bb5\u53ef\u4ee5\u88ab\u5b50\u7c7b\u6216\u5b50\u7c7b\u7684\u5b50\u7c7b\u8bbf\u95ee public : \u53ef\u4ee5\u88ab\u5176\u4ed6\u7c7b\u6216\u6240\u6709\u5b50\u7c7b\u8bbf\u95ee // 2.2 \u7ee7\u627f\u540e\u7684\u6784\u9020\u51fd\u6570 class Student extends Person { protected int score ; public Student ( String name , int age , int score ) { // super(); \u5982\u679c\u53ea\u662f\u60f3\u8c03\u7528\u65e0\u53c2\u7684\u6784\u9020\u51fd\u6570\uff0c\u8fd9\u53e5\u53ef\u4ee5\u7701\u7565 super ( name , age ); // \u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5Person(String,int),\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u7236\u7c7b\u6267\u884c\u6709\u53c2\u7684\u6784\u9020\u51fd\u6570 this . score = score ; } } // 2.3 \u5411\u4e0a\u8f6c\u578b(\u4e3a\u591a\u6001\u94fa\u8def) Person p = new Student (); // p instanceof Student : true Object o1 = new Student (); // instanceof\u5b9e\u9645\u4e0a\u5224\u65ad\u4e00\u4e2a\u53d8\u91cf\u6240\u6307\u5411\u7684\u5b9e\u4f8b\u662f\u5426\u662f\u6307\u5b9a\u7c7b\u578b\uff0c\u6216\u8005\u662f\u5426\u662f\u8fd9\u4e2a\u7c7b\u578b\u7684\u5b50\u7c7b p instanceof Person ; // ture s instanceof Person ; // true null instanceof xxx ; // false \u5982\u679c\u4e00\u4e2a\u5f15\u7528\u53d8\u91cf\u4e3anull\uff0c\u90a3\u4e48\u5bf9\u4efb\u4f55instanceof\u7684\u5224\u65ad\u90fd\u4e3afalse // \u6269\u5c55\uff0c\u5411\u4e0b\u8f6c\u578b\uff0c\u7528\u4e8e\u5f3a\u8f6c Person p1 = new Student (); // upcasting, ok Student s1 = ( Student ) p1 ; // ok Person p2 = new Person (); // \u4e0d\u80fd\u628a\u7236\u7c7b\u53d8\u4e3a\u5b50\u7c7b\uff0c\u56e0\u4e3a\u5b50\u7c7b\u529f\u80fd\u6bd4\u7236\u7c7b\u591a\uff0c\u591a\u7684\u529f\u80fd\u65e0\u6cd5\u51ed\u7a7a\u53d8\u51fa\u6765\u3002 Student s2 = ( Student ) p2 ; // runtime error! ClassCastException! // 2.4 \u591a\u6001\uff1aJava\u7684\u5b9e\u4f8b\u65b9\u6cd5\u8c03\u7528\u662f\u57fa\u4e8e\u8fd0\u884c\u65f6\u7684\u5b9e\u9645\u7c7b\u578b\u7684\u52a8\u6001\u8c03\u7528\uff0c\u800c\u975e\u53d8\u91cf\u7684\u58f0\u660e\u7c7b\u578b class Person { public void run () { System . out . println ( \"Person.run\" ); } // \u6269\u5c55:final\u4fee\u9970\u7684\u65b9\u6cd5\u4e0d\u80fd\u88abOverride public final String hello (){ return \"Father Hello\" ; } } class Student extends Person { @Override // \u8986\u5199:\u76f4\u63a5\u628a\u7236\u7c7b\u65b9\u6cd5\u8986\u76d6\uff0c\u65b9\u6cd5\u7b7e\u540d\u76f8\u540c\uff0c\u5e76\u4e14\u8fd4\u56de\u503c\u4e5f\u76f8\u540c public void run () { System . out . println ( \"Student.run\" ); } // \u6269\u5c55\uff0c\u5b50\u7c7b\u4e2d\u60f3\u8c03\u7528\u7236\u7c7b\u7684\u88ab\u8986\u76d6\u7684\u65b9\u6cd5 public void printFatherRun (){ return super . run (); } } Person p = new Student (); p . run (); // \u5b9e\u9645\u8c03\u7528\u7684\u662f\u8c01\uff1f\u7b54\u6848:Student public void runTwice ( Person p ) { p . run (); p . run (); } runTwice ( xxx ); // \u4f20\u5165\u7684\u5b9e\u4f8b\u662f\u8c01\u5c31\u8c03\u7528\u8c01 // 2.5 final // 2.5.1 final\u4fee\u9970\u7684\u7c7b\u4e0d\u80fd\u88ab\u7ee7\u627f final class Person {...} // 2.5.2 final\u4fee\u9970\u7684\u65b9\u6cd5\u4e0d\u80fd\u88abOverride public final String Hello (){...} // 2.5.3 final\u4fee\u9970\u7684\u5c5e\u6027\u4e0d\u80fd\u88ab\u6539\u5199 public final String name = \"xiaoming\" ; // 2.5.4 final\u4fee\u9970\u7684\u5c5e\u6027\u53ef\u4ee5\u4f7f\u7528\u6784\u9020\u65b9\u6cd5\u521d\u59cb\u5316\uff0c\u5e38\u7528 class Person { public final String name ; // \u5e38\u7528:\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4fdd\u8bc1\u5b9e\u4f8b\u4e00\u65e6\u521b\u5efa\uff0c\u5176final\u5b57\u6bb5\u5c31\u4e0d\u53ef\u4fee\u6539 public Person ( String name ) { this . name = name ; } } // 3 \u62bd\u8c61\u7c7b // 3.1 \u62bd\u8c61\u65b9\u6cd5:\u5982\u679c\u7236\u7c7b\u7684\u65b9\u6cd5\u672c\u8eab\u4e0d\u9700\u8981\u5b9e\u73b0\u4efb\u4f55\u529f\u80fd\uff0c\u4ec5\u4ec5\u662f\u4e3a\u4e86\u5b9a\u4e49\u65b9\u6cd5\u7b7e\u540d\uff0c\u76ee\u7684\u662f\u8ba9\u5b50\u7c7b\u53bb\u8986\u5199\u5b83\uff0c\u90a3\u4e48\uff0c\u53ef\u4ee5\u628a\u7236\u7c7b\u7684\u65b9\u6cd5\u58f0\u660e\u4e3a\u62bd\u8c61\u65b9\u6cd5,\u6ce8\u610f:\u6709\u62bd\u8c61\u65b9\u6cd5\u7684\u7c7b\u5fc5\u987b\u662f\u62bd\u8c61\u7c7b\uff0c\u5426\u5219\u65e0\u6cd5\u7f16\u8bd1 abstract class Person { // public abstract void run (); // \u6b64\u65f6\u65e0\u6cd5\u7f16\u8bd1Person\u7c7b\uff0c\u56e0\u4e3a\u5b83\u5305\u542b\u62bd\u8c61\u65b9\u6cd5\uff0c\u6240\u4ee5Person\u7c7b\u65e0\u6cd5\u88ab\u5b9e\u4f8b\u5316 } class Student extends Person { @Override public void run () { \u2026 } } // 4 \u63a5\u53e3:\u7eaf\u62bd\u8c61\u7c7b\u7684\u7701\u7565\u5b9a\u4e49\uff0c\u63a5\u53e3\u5b9a\u4e49\u7684\u6240\u6709\u65b9\u6cd5\u9ed8\u8ba4\u90fd\u662fpublic abstract\u7684 interface Person { void run (); // \u867d\u7136\u6ca1\u5199\uff0c\u4f46\u662f\u90fd\u662fpublic abstract\u4fee\u9970\u7684 // \u6269\u5c551:\u63a5\u53e3\u4e2d\u53ef\u4ee5\u5b9a\u4e49default\u65b9\u6cd5,\u6ce8\u610f:\u5b9e\u73b0\u7c7b\u53ef\u4ee5\u4e0d\u5fc5\u8986\u5199default\u65b9\u6cd5\u3002default\u65b9\u6cd5\u7684\u76ee\u7684\u662f\uff0c\u5f53\u6211\u4eec\u9700\u8981\u7ed9\u63a5\u53e3\u65b0\u589e\u4e00\u4e2a\u65b9\u6cd5\u65f6\uff0c\u4f1a\u6d89\u53ca\u5230\u4fee\u6539\u5168\u90e8\u5b50\u7c7b\u3002\u5982\u679c\u65b0\u589e\u7684\u662fdefault\u65b9\u6cd5\uff0c\u90a3\u4e48\u5b50\u7c7b\u5c31\u4e0d\u5fc5\u5168\u90e8\u4fee\u6539\uff0c\u53ea\u9700\u8981\u5728\u9700\u8981\u8986\u5199\u7684\u5730\u65b9\u53bb\u8986\u5199\u65b0\u589e\u65b9\u6cd5\u3002 default void hello (){ xxx ;} // interface\u6ca1\u6709\u5b57\u6bb5\uff0cdefault\u65b9\u6cd5\u65e0\u6cd5\u8bbf\u95ee\u5c5e\u6027 } // 4.1 \u5177\u4f53\u7c7b\u5b9e\u73b0interface\u63a5\u53e3\u65f6 class Student implements Person { @override public void run (){ xxx ;} } //4.2 \u5728Java\u4e2d\uff0c\u4e00\u4e2a\u7c7b\u53ea\u80fd\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2a\u7c7b\uff0c\u4e0d\u80fd\u4ece\u591a\u4e2a\u7c7b\u7ee7\u627f\u3002\u4f46\u662f\uff0c\u4e00\u4e2a\u7c7b\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2ainterface class Student implements Person , Hello { // \u5b9e\u73b0\u4e86\u4e24\u4e2ainterface ... } //4.3 \u63a5\u53e3\u7ee7\u627f:\u4e00\u4e2ainterface\u53ef\u4ee5\u7ee7\u627f\u81ea\u53e6\u4e00\u4e2ainterface\u3002interface\u7ee7\u627f\u81eainterface\u4f7f\u7528extends interface Hello { void hello (); } interface Person extends Hello { void run (); String getName (); } // 5 \u9759\u6001\u5c5e\u6027\u548c\u9759\u6001\u65b9\u6cd5:\u53ea\u6709\u4e00\u4e2a\u5171\u4eab\u201c\u7a7a\u95f4\u201d\uff0c\u6240\u6709\u5b9e\u4f8b\u4f1a\u5171\u4eab\u8be5\u5c5e\u6027/\u65b9\u6cd5 // \u6ce8\u610f:\u9759\u6001\u5b57\u6bb5\u548c\u9759\u6001\u65b9\u6cd5\u90fd\u5c5e\u4e8e\u7c7b\uff0c\u800c\u4e0d\u5c5e\u4e8e\u5b9e\u4f8b\u5bf9\u8c61\u3002\u56e0\u6b64\uff0c\u9759\u6001\u65b9\u6cd5\u5185\u90e8\uff0c\u65e0\u6cd5\u8bbf\u95eethis\u53d8\u91cf\uff0c\u4e5f\u65e0\u6cd5\u8bbf\u95ee\u5b9e\u4f8b\u5b57\u6bb5\uff0c\u5b83\u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u5b57\u6bb5\u3002 class Person { public static int number ; // \u9759\u6001\u5b57\u6bb5 public static void setNumber ( int value ){ // \u53ea\u80fd\u8bbf\u95ee\u9759\u6001\u5b57\u6bb5\u3002 number = value ; } } Person . number ; // \u63a8\u8350\u8fd9\u79cd\u65b9\u5f0f\u8bbf\u95ee\uff0cp.number(\u5b9e\u4f8b\u5bf9\u8c61\u65e0\u9759\u6001\u5b57\u6bb5)\u4e4b\u6240\u4ee5\u80fd\u8bbf\u95ee\u662f\u56e0\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u8f6c\u6362\u4e3a:\u7c7b\u540d.\u9759\u6001\u5b57\u6bb5 // 5.1 \u63a5\u53e3\u7684\u9759\u6001\u5b57\u6bb5:\u56e0\u4e3ainterface\u662f\u4e00\u4e2a\u7eaf\u62bd\u8c61\u7c7b\uff0c\u6240\u4ee5\u5b83\u4e0d\u80fd\u5b9a\u4e49\u5b9e\u4f8b\u5b57\u6bb5\u3002\u4f46\u662f\uff0cinterface\u662f\u53ef\u4ee5\u6709\u9759\u6001\u5b57\u6bb5\u7684\uff0c\u5e76\u4e14\u9759\u6001\u5b57\u6bb5\u5fc5\u987b\u4e3afinal\u7c7b\u578b public interface Person { public static final int MALE = 1 ; public static final int FEMALE = 2 ; } // \u56e0\u4e3ainterface\u7684\u5b57\u6bb5\u53ea\u80fd\u662fpublic static final\u7c7b\u578b\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e9b\u4fee\u9970\u7b26\u90fd\u53bb\u6389\uff0c\u7b80\u5199 public interface Person { // \u7f16\u8bd1\u5668\u4f1a\u81ea\u52a8\u52a0\u4e0apublic statc final: int MALE = 1 ; int FEMALE = 2 ; } // 6 jar\u5305\uff1a\u5982\u679c\u6709\u5f88\u591a.class\u6587\u4ef6\uff0c\u6563\u843d\u5728\u5404\u5c42\u76ee\u5f55\u4e2d\uff0c\u80af\u5b9a\u4e0d\u4fbf\u4e8e\u7ba1\u7406\u3002\u5982\u679c\u80fd\u628a\u76ee\u5f55\u6253\u4e00\u4e2a\u5305\uff0c\u53d8\u6210\u4e00\u4e2a\u6587\u4ef6\uff0c\u5c31\u65b9\u4fbf\u591a\u4e86\u3002jar\u5305\u5c31\u662f\u7528\u6765\u5e72\u8fd9\u4e2a\u4e8b\u7684\uff0c\u5b83\u53ef\u4ee5\u628apackage\u7ec4\u7ec7\u7684\u76ee\u5f55\u5c42\u7ea7\uff0c\u4ee5\u53ca\u5404\u4e2a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff08\u5305\u62ec.class\u6587\u4ef6\u548c\u5176\u4ed6\u6587\u4ef6\uff09\u90fd\u6253\u6210\u4e00\u4e2ajar\u6587\u4ef6\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u65e0\u8bba\u662f\u5907\u4efd\uff0c\u8fd8\u662f\u53d1\u7ed9\u5ba2\u6237\uff0c\u5c31\u7b80\u5355\u591a\u4e86\u3002jar\u5305\u5c31\u662fzip\u5305 // 6.1 \u6253\u6210jar\u5305 package_sample \u2514\u2500 bin // jar\u5305\u7684\u7b2c\u4e00\u5c42\u76ee\u5f55\u4e0d\u80fd\u662fbin\uff0c\u5e94\u8be5\u662fhong/ming/mr \u251c\u2500 hong // \u4f8b\u5982\uff0c\u76f4\u63a5\u628ahong\u8fd9\u4e2a\u76ee\u5f55\u7684\u6240\u6709\u6587\u4ef6\u538b\u7f29\u4e3ahong.zip,\u7136\u540e\u6539\u4e3ahong.jar \u2502 \u2514\u2500 Person . class \u2502 ming \u2502 \u2514\u2500 Person . class \u2514\u2500 mr \u2514\u2500 jun \u2514\u2500 Arrays . class // 6.2 jar\u5305\u6253\u5305\u5de5\u5177Maven:https://www.liaoxuefeng.com/wiki/1252599548343744/1255945359327200 // 7 \u6a21\u5757\u5316:\u6253\u5305\u7684\u65f6\u5019a.jar\u4f9d\u8d56\u7b2c\u4e09\u65b9\u5e93\u592a\u591a\uff0c\u6253\u6210\u7684jar\u5305\u597d\u51e0\u767e\u5146\uff1f\u89e3\u51b3:https://www.liaoxuefeng.com/wiki/1252599548343744/1281795926523938","title":"\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/#java_1","text":"\u5f15\u7528\u7c7b\u578b\u6bd4\u8f83\uff0c\u8981\u4f7f\u7528 equals() \u65b9\u6cd5\uff0c\u4e0d\u8981\u4f7f\u7528 == (\u5b83\u6bd4\u8f83\u7684\u662f\u4e24\u4e2a\u5f15\u7528\u7c7b\u578b\u7684\u53d8\u91cf\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61) \u7f16\u7801 // \u5168\u7403\u7edf\u4e00\u7801\u8054\u76df\u53d1\u5e03\u4e86Unicode\u7f16\u7801 // \u4e2d\u6587\u5b57\u7b26'\u4e2d'\u6709GB2312\u7f16\u7801\u548cUnicode\u7f16\u7801 // UTF-8\u7f16\u7801(\u907f\u514d\u4e86Unicode\u7f16\u7801\u6d6a\u8d39\u5927\u91cf\u7a7a\u95f4\u7684\u7b80\u7248) // \u59cb\u7ec8\u7262\u8bb0\uff1aJava\u7684String\u548cchar\u5728\u5185\u5b58\u4e2d\u603b\u662f\u4ee5Unicode\u7f16\u7801\u8868\u793a,\u6240\u4ee5\u6709\u65f6\u5019\u9700\u8981\u7f16\u7801\u548c\u89e3\u7801 // \u8f6c\u6362\u7f16\u7801:\u6ce8\u610f,\u8f6c\u6362\u7f16\u7801\u540e\uff0c\u5c31\u4e0d\u518d\u662fchar\u7c7b\u578b\uff0c\u800c\u662fbyte\u7c7b\u578b\u8868\u793a\u7684\u6570\u7ec4 byte [] b1 = \"Hello\" . getBytes (); // \u6309\u7cfb\u7edf\u9ed8\u8ba4\u7f16\u7801\u8f6c\u6362\uff0c\u4e0d\u63a8\u8350 byte [] b2 = \"Hello\" . getBytes ( \"UTF-8\" ); // \u6309UTF-8\u7f16\u7801\u8f6c\u6362 byte [] b2 = \"Hello\" . getBytes ( \"GBK\" ); // \u6309GBK\u7f16\u7801\u8f6c\u6362 byte [] b3 = \"Hello\" . getBytes ( StandardCharsets . UTF_8 ); // \u6309UTF-8\u7f16\u7801\u8f6c\u6362 // byte[] -> String byte [] b = ... String s1 = new String ( b , \"GBK\" ); // \u6309GBK\u8f6c\u6362 String s2 = new String ( b , StandardCharsets . UTF_8 ); // \u6309UTF-8\u8f6c\u6362 String String s1 = \"hello!\" ; String s2 = \"HELLO!\" ; s1 . equals ( s2 ); // \u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u5185\u5bb9\u662f\u5426\u76f8\u540c\uff0c\u5fc5\u987b\u4f7f\u7528equals()\u65b9\u6cd5\u800c\u4e0d\u80fd\u7528== s1 . equalsIgnoreCase ( s2 ); // \u5ffd\u7565\u5927\u5c0f\u5199\u6bd4\u8f83 \"Hello\" . contains ( \"ll\" ); // true\uff0c\u662f\u5426\u5305\u542b\u5b50\u4e32 // \u641c\u7d22\u5b50\u4e32 \"Hello\" . indexOf ( \"l\" ); // 2 \"Hello\" . lastIndexOf ( \"l\" ); // 3 \"Hello\" . startsWith ( \"He\" ); // true \"Hello\" . endsWith ( \"lo\" ); // true // \u63d0\u53d6\u5b50\u4e32 \"Hello\" . substring ( 2 ); // \"llo\" \"Hello\" . substring ( 2 , 4 ); \"ll\" // \u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u7a7a\u548c\u7a7a\u767d\u5b57\u7b26\u4e32 \"\" . isEmpty (); // true\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a0 \" \" . isEmpty (); // false\uff0c\u56e0\u4e3a\u5b57\u7b26\u4e32\u957f\u5ea6\u4e0d\u4e3a0 \" \\n\" . isBlank (); // true\uff0c\u56e0\u4e3a\u53ea\u5305\u542b\u7a7a\u767d\u5b57\u7b26 \" Hello \" . isBlank (); // false\uff0c\u56e0\u4e3a\u5305\u542b\u975e\u7a7a\u767d\u5b57\u7b26 // \u53bb\u9664\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26 \" \\tHello\\r\\n \" . trim (); // \"Hello\":\u79fb\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26\u3002\u7a7a\u767d\u5b57\u7b26\u5305\u62ec\u7a7a\u683c\uff0c\\t\uff0c\\r\uff0c\\n,\u8fd4\u56de\u65b0\u5b57\u7b26\u4e32 \"\\u3000Hello\\u3000\" . strip (); // \"Hello\"\uff0c\u79fb\u9664\u5b57\u7b26\u4e32\u9996\u5c3e\u7a7a\u767d\u5b57\u7b26\u3002\u5b83\u548ctrim()\u4e0d\u540c\u7684\u662f\uff0c\u7c7b\u4f3c\u4e2d\u6587\u7684\u7a7a\u683c\u5b57\u7b26\\u3000\u4e5f\u4f1a\u88ab\u79fb\u9664 \" Hello \" . stripLeading (); // \"Hello \" \" Hello \" . stripTrailing (); // \" Hello\" // \u66ff\u6362\u5b50\u4e32 String s = \"hello\" ; s . replace ( 'l' , 'w' ); // \"hewwo\"\uff0c\u6240\u6709\u5b57\u7b26'l'\u88ab\u66ff\u6362\u4e3a'w' s . replace ( \"ll\" , \"~~\" ); // \"he~~o\"\uff0c\u6240\u6709\u5b50\u4e32\"ll\"\u88ab\u66ff\u6362\u4e3a\"~~\" // \u6b63\u5219\u8868\u8fbe\u5f0f\u66ff\u6362 String s = \"A,,B;C ,D\" ; s . replaceAll ( \"[\\\\,\\\\;\\\\s]+\" , \",\" ); // \"A,B,C,D\" // \u5206\u5272\u5b57\u7b26\u4e32\uff0c\u4f20\u5165\u7684\u4e5f\u662f\u6b63\u5219 String s = \"A,B,C,D\" ; String [] ss = s . split ( \"\\\\,\" ); // {\"A\", \"B\", \"C\", \"D\"} // \u62fc\u63a5\u5b57\u7b26\u4e32String.join(split,arr):\u7528\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u8fde\u63a5\u5b57\u7b26\u4e32\u6570\u7ec4 String [] arr = { \"A\" , \"B\" , \"C\" }; String s = String . join ( \"***\" , arr ); // \"A***B***C\" // \u7c7b\u578b\u8f6c\u6362:\u628a\u4efb\u610f\u57fa\u672c\u7c7b\u578b\u6216\u5f15\u7528\u7c7b\u578b\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32 \u9759\u6001\u65b9\u6cd5:valueOf String . valueOf ( 123 ); // \"123\" String . valueOf ( 45.67 ); // \"45.67\" String . valueOf ( true ); // \"true\" String . valueOf ( new Object ()); // \u7c7b\u4f3cjava.lang.Object@636be97c // \u628a\u5b57\u7b26\u4e32\u8f6c\u4e3a\u5176\u4ed6\u7c7b\u578b import java.lang.Boolean / Byte / Short / Integer / Long / Float / Double / Character int n1 = Integer . parseInt ( \"123\" ); // 123 int n2 = Integer . parseInt ( \"ff\" , 16 ); // \u6309\u5341\u516d\u8fdb\u5236\u8f6c\u6362\uff0c255 Integer . getInteger ( \"java.version\" ); // \u7248\u672c\u53f7\uff0c11\uff0c\u7279\u4f8b:\u628a\u8be5\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u7cfb\u7edf\u53d8\u91cf\u8f6c\u6362\u4e3aInteger boolean b1 = Boolean . parseBoolean ( \"true\" ); // true boolean b2 = Boolean . parseBoolean ( \"FALSE\" ); // false // \u8f6c\u4e3achar[] char [] cs = \"Hello\" . toCharArray (); // String -> char[] String s = new String ( cs ); // char[] -> String StringBuilder:\u7528\u6765\u9ad8\u6548\u62fc\u63a5\u5b57\u7b26\u4e32 \u5982\u679c\u5728\u5faa\u73af\u4e2d\u4f7f\u7528 + \u62fc\u63a5 String \uff0c\u6bcf\u6b21\u5faa\u73af\u90fd\u4f1a\u521b\u5efa\u65b0\u7684\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u7136\u540e\u6254\u6389\u65e7\u7684\u5b57\u7b26\u4e32\u3002\u8fd9\u6837\uff0c\u7edd\u5927\u90e8\u5206\u5b57\u7b26\u4e32\u90fd\u662f\u4e34\u65f6\u5bf9\u8c61\uff0c\u4e0d\u4f46\u6d6a\u8d39\u5185\u5b58\uff0c\u8fd8\u4f1a\u5f71\u54cdGC\u6548\u7387\u3002Java\u6807\u51c6\u5e93\u63d0\u4f9b\u4e86 StringBuilder \uff0c\u5b83\u662f\u4e00\u4e2a\u53ef\u53d8\u5bf9\u8c61\uff0c\u53ef\u4ee5\u9884\u5206\u914d\u7f13\u51b2\u533a\uff0c\u8fd9\u6837\uff0c\u5f80 StringBuilder \u4e2d\u65b0\u589e\u5b57\u7b26\u65f6\uff0c\u4e0d\u4f1a\u521b\u5efa\u65b0\u7684\u4e34\u65f6\u5bf9\u8c61\uff1a // StringBuilder\u5e38\u5e38\u7528\u4e8e\u63d0\u9ad8String\u591a\u6b21\u7528\u5230+\u65f6\u7684\u6548\u7387 // \u5faa\u73af\u64cd\u4f5c StringBuilder sb = new StringBuilder ( 1024 ); for ( int i = 0 ; i < 1000 ; i ++ ) { sb . append ( ',' ); sb . append ( i ); } String s = sb . toString (); // \u94fe\u5f0f\u64cd\u4f5c:\u56e0\u4e3a\u5b9a\u4e49\u7684append()\u65b9\u6cd5\u4f1a\u8fd4\u56dethis\uff0c\u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4e0d\u65ad\u8c03\u7528\u81ea\u8eab\u7684\u5176\u4ed6\u65b9\u6cd5\u3002 public class Main { public static void main ( String [] args ) { var sb = new StringBuilder ( 1024 ); sb . append ( \"Mr \" ) . append ( \"Bob\" ) . append ( \"!\" ) . insert ( 0 , \"Hello, \" ); System . out . println ( sb . toString ()); } } // StringBuffer\u662fStringBuilder\u7684\u7ebf\u7a0b\u5b89\u5168\u7248\u672c\uff0c\u73b0\u5728\u5f88\u5c11\u4f7f\u7528\uff0c\u56e0\u4e3a\u6548\u7387\u4f1a\u964d\u4f4e\u3002 Math // Java\u6807\u51c6\u5e93\u4e5f\u63d0\u4f9b\u4e86strictMath,\u548cMath\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u65b9\u6cd5\u3002StrictMath\u4fdd\u8bc1\u6240\u6709\u5e73\u53f0\u8ba1\u7b97\u7ed3\u679c\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\uff0c\u800cMath\u4f1a\u5c3d\u91cf\u9488\u5bf9\u5e73\u53f0\u4f18\u5316\u8ba1\u7b97\u901f\u5ea6\uff0c\u6240\u4ee5\uff0c\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528Math\u5c31\u8db3\u591f\u4e86 Math . abs ( value ); // \u7edd\u5bf9\u503c Math . max ( val1 , vla2 ); // \u6700\u5927\u503c Math . min ( val1 , vla2 ); // \u6700\u5c0f\u503c Math . pow ( 2 , 10 ); // 2\u768410\u6b21\u65b9 Math . sqrt ( 4 ); // 2 Math . exp ( 2 ); // e\u76842\u6b21\u65b9 Math . log ( 4 ); // \u4ee5e\u4e3a\u5e95 Math . log10 ( 100 ); // \u4ee510\u4e3a\u5e95 // \u4e09\u89d2\u51fd\u6570 Math . sin ( 3.14 ); // 0.00159... Math . cos ( 3.14 ); // -0.9999... Math . tan ( 3.14 ); // -0.0015... Math . asin ( 1.0 ); // 1.57079... Math . acos ( 1.0 ); // 0.0 // \u6570\u5b66\u5e38\u91cf double pi = Math . PI ; // 3.14159... double e = Math . E ; // 2.7182818... Math . sin ( Math . PI / 6 ); // sin(\u03c0/6) = 0.5 // \u751f\u6210\u968f\u673a\u6570[0,1]\uff0cMath.random();\u5b9e\u9645\u4e0a\u5185\u90e8\u8c03\u7528\u4e86Random\u7c7b\uff0c\u6240\u4ee5\u5b83\u4e5f\u662f\u4f2a\u968f\u673a\u6570\uff0c\u53ea\u662f\u6211\u4eec\u65e0\u6cd5\u6307\u5b9a\u79cd\u5b50 Math . random (); // 0.53907... \u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837 Math . random () * ( max - min ) + min ; // \u968f\u673a\u6570\u8303\u56f4[min,max] Random import java.util.Random ; // Random\u7528\u6765\u521b\u5efa\u4f2a\u968f\u673a\u6570\u3002\u6240\u8c13\u4f2a\u968f\u673a\u6570\uff0c\u662f\u6307\u53ea\u8981\u7ed9\u5b9a\u4e00\u4e2a\u521d\u59cb\u7684\u79cd\u5b50\uff0c\u4ea7\u751f\u7684\u968f\u673a\u6570\u5e8f\u5217\u662f\u5b8c\u5168\u4e00\u6837\u7684\u3002 // 1 \u4e0d\u7ed9\u5b9a\u79cd\u5b50\uff0c\u5c31\u4f7f\u7528\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u6233\u4f5c\u4e3a\u79cd\u5b50\uff0c\u56e0\u6b64\u6bcf\u6b21\u8fd0\u884c\u65f6\uff0c\u79cd\u5b50\u4e0d\u540c\uff0c\u5f97\u5230\u7684\u4f2a\u968f\u673a\u6570\u5e8f\u5217\u5c31\u4e0d\u540c\u3002 Random r = new Random (); r . nextInt (); // 2071575453,\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837 r . nextInt ( 10 ); // 5,\u751f\u6210\u4e00\u4e2a[0,10)\u4e4b\u95f4\u7684int r . nextLong (); // 8811649292570369305,\u6bcf\u6b21\u90fd\u4e0d\u4e00\u6837 r . nextFloat (); // 0.54335...\u751f\u6210\u4e00\u4e2a[0,1)\u4e4b\u95f4\u7684float r . nextDouble (); // 0.3716...\u751f\u6210\u4e00\u4e2a[0,1)\u4e4b\u95f4\u7684double // 2 \u7ed9\u5b9a\u79cd\u5b50 Random r = new Random ( 12345 ); SecureRandom \u6709\u4f2a\u968f\u673a\u6570\uff0c\u5c31\u6709\u771f\u968f\u673a\u6570\u3002\u5b9e\u9645\u4e0a\u771f\u6b63\u7684\u771f\u968f\u673a\u6570\u53ea\u80fd\u901a\u8fc7\u91cf\u5b50\u529b\u5b66\u539f\u7406\u6765\u83b7\u53d6\uff0c\u800c\u6211\u4eec\u60f3\u8981\u7684\u662f\u4e00\u4e2a\u4e0d\u53ef\u9884\u6d4b\u7684\u5b89\u5168\u7684\u968f\u673a\u6570\uff0c SecureRandom \u5c31\u662f\u7528\u6765\u521b\u5efa\u5b89\u5168\u7684\u968f\u673a\u6570\u7684\uff1a SecureRandom \u65e0\u6cd5\u6307\u5b9a\u79cd\u5b50\uff0c\u5b83\u4f7f\u7528RNG\uff08random number generator\uff09\u7b97\u6cd5\u3002 SecureRandom \u7684\u5b89\u5168\u6027\u662f\u901a\u8fc7\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u7684\u5b89\u5168\u7684\u968f\u673a\u79cd\u5b50\u6765\u751f\u6210\u968f\u673a\u6570\u3002\u8fd9\u4e2a\u79cd\u5b50\u662f\u901a\u8fc7CPU\u7684\u70ed\u566a\u58f0\u3001\u8bfb\u5199\u78c1\u76d8\u7684\u5b57\u8282\u3001\u7f51\u7edc\u6d41\u91cf\u7b49\u5404\u79cd\u968f\u673a\u4e8b\u4ef6\u4ea7\u751f\u7684\u201c\u71b5\u201d\u3002 import java.security.SecureRandom ; // \u7b80\u5355\u7528\u6cd5 SecureRandom sr = new SecureRandom (); System . out . println ( sr . nextInt ( 100 )); // \u9ad8\u7ea7\u7528\u6cd5 import java.util.Arrays ; import java.security.SecureRandom ; import java.security.NoSuchAlgorithmException ; public class Main { public static void main ( String [] args ) { SecureRandom sr = null ; try { sr = SecureRandom . getInstanceStrong (); // \u83b7\u53d6\u9ad8\u5f3a\u5ea6\u5b89\u5168\u968f\u673a\u6570\u751f\u6210\u5668 } catch ( NoSuchAlgorithmException e ) { sr = new SecureRandom (); // \u83b7\u53d6\u666e\u901a\u7684\u5b89\u5168\u968f\u673a\u6570\u751f\u6210\u5668 } byte [] buffer = new byte [ 16 ] ; sr . nextBytes ( buffer ); // \u7528\u5b89\u5168\u968f\u673a\u6570\u586b\u5145buffer System . out . println ( Arrays . toString ( buffer )); } } \u5305\u88c5\u7c7b\u578b // 1 \u57fa\u672c\u7c7b\u578b int n = null ; // compile error // 2 \u57fa\u672c\u7c7b\u578b\u8f6c\u5f15\u7528\u7c7b\u578b:\u5341\u5206\u6709\u7528 import java.lang.Integer // \u6240\u6709\u7684\u5305\u88c5\u7c7b\u578b\u90fd\u662f\u4e0d\u53d8\u7c7b,\u4e0d\u80fd\u4f7f\u7528==\u6bd4\u8f83\uff0c\u5fc5\u987b\u4f7f\u7528equals()\u6bd4\u8f83 // 2.1 java\u7f16\u8bd1\u5668int\u548cInterger\u81ea\u52a8\u8f6c\u6362 int i = 100 ; Integer n = Integer . valueOf ( i ); // \u9759\u6001\u65b9\u6cd5:\u5c3d\u53ef\u80fd\u5730\u8fd4\u56de\u7f13\u5b58\u7684\u5b9e\u4f8b\u4ee5\u8282\u7701\u5185\u5b58 int x = n . intValue (); // 2.2 \u66f4\u7b80\u5355\u65b9\u5f0f:Auto Boxing and Auto Unboxing\uff08\u81ea\u52a8\u5c01\u7bb1\u548c\u81ea\u52a8\u62c6\u7bb1\uff09 Integer n = 100 ; // \u7f16\u8bd1\u5668\u81ea\u52a8\u4f7f\u7528Integer.valueOf(int) int x = n ; // \u7f16\u8bd1\u5668\u81ea\u52a8\u4f7f\u7528Integer.intValue() // 2.3 Integer\u8fdb\u5236\u8f6c\u6362 int x1 = Integer . parseInt ( \"100\" ); // 100 int x2 = Integer . parseInt ( \"100\" , 16 ); // 256,\u56e0\u4e3a\u630916\u8fdb\u5236\u89e3\u6790 Integer . toString ( 100 )); // \"100\",\u8868\u793a\u4e3a10\u8fdb\u5236 Integer . toString ( 100 , 36 ); // \"2s\",\u8868\u793a\u4e3a36\u8fdb\u5236 Integer . toHexString ( 100 ); // \"64\",\u8868\u793a\u4e3a16\u8fdb\u5236 Integer . toOctalString ( 100 ); // \"144\",\u8868\u793a\u4e3a8\u8fdb\u5236 Integer . toBinaryString ( 100 ); // \"1100100\",\u8868\u793a\u4e3a2\u8fdb\u5236 // 2.4 \u5305\u88c5\u7c7b\u578b\u7684\u4e00\u4e9b\u6709\u7528\u9759\u6001\u53d8\u91cf // boolean\u53ea\u6709\u4e24\u4e2a\u503ctrue/false\uff0c\u5176\u5305\u88c5\u7c7b\u578b\u53ea\u9700\u8981\u5f15\u7528Boolean\u63d0\u4f9b\u7684\u9759\u6001\u5b57\u6bb5: Boolean t = Boolean . TRUE ; Boolean f = Boolean . FALSE ; // int\u53ef\u8868\u793a\u7684\u6700\u5927/\u6700\u5c0f\u503c: int max = Integer . MAX_VALUE ; // 2147483647 int min = Integer . MIN_VALUE ; // -2147483648 // long\u7c7b\u578b\u5360\u7528\u7684bit\u548cbyte\u6570\u91cf: int sizeOfLong = Long . SIZE ; // 64 (bits) int bytesOfLong = Long . BYTES ; // 8 (bytes) // 2.5 \u6240\u6709\u7684\u6574\u6570\u548c\u6d6e\u70b9\u6570\u7684\u5305\u88c5\u7c7b\u578b\u90fd\u7ee7\u627f\u81eaNumber\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u975e\u5e38\u65b9\u4fbf\u5730\u76f4\u63a5\u901a\u8fc7\u5305\u88c5\u7c7b\u578b\u83b7\u53d6\u5404\u79cd\u57fa\u672c\u7c7b\u578b Number num = new Integer ( 999 ); // \u5411\u4e0a\u8f6c\u578b\u4e3aNumber: // \u83b7\u53d6byte, int, long, float, double: byte b = num . byteValue (); int n = num . intValue (); long ln = num . longValue (); float f = num . floatValue (); double d = num . doubleValue (); // 2.6 \u65e0\u7b26\u53f7\u6574\u6570:java\u4e2d\u6ca1\u6709\u8be5\u7c7b\u578b\uff0c\u4f46\u662f\u53ef\u4ee5\u501f\u52a9Byte\u5305\u88c5\u7c7b\u578b\u5b8c\u6210\uff0cbyte\u8303\u56f4(-128~+127),\u770b\u6210\u65e0\u7b26\u53f7\u6574\u578b\uff0c\u5b83\u7684\u8303\u56f4\u5c31\u662f0~255 byte x = - 1 ; byte y = 127 ; System . out . println ( Byte . toUnsignedInt ( x )); // 255 System . out . println ( Byte . toUnsignedInt ( y )); // 127 \u679a\u4e3e\u7c7b \u867d\u7136\u4e3a\u5f15\u7528\u7c7b\u578b\uff0c\u4f46\u662f\u53ef\u4ee5\u4f7f\u7528 == \u505a\u6bd4\u8f83\uff0c\u56e0\u4e3a enum \u7c7b\u578b\u7684\u6bcf\u4e2a\u5e38\u91cf\u5728JVM\u4e2d\u53ea\u6709\u4e00\u4e2a\u552f\u4e00\u5b9e\u4f8b\u3002 public class Main { public static void main ( String [] args ) { Weekday day = Weekday . SUN ; // \u8c03\u7528\uff0c\u7f16\u8f91\u5668\u4f1a\u81ea\u52a8\u68c0\u67e5\u7c7b\u578b\u662f\u5426\u5c5e\u4e8e(Weekday) // int day = 1; // if (day == Weekday.SUN) {xxx} // \u7f16\u8bd1\u9519\u8bef\uff0cday\u7c7b\u578b\u548cWeekday.SUN\u7c7b\u578b\u4e0d\u4e00\u81f4 if ( day == Weekday . SAT || day == Weekday . SUN ) { System . out . println ( \"Work at home!\" ); } else { System . out . println ( \"Work at office!\" ); } } } // \u679a\u4e3e\u7c7b\uff0c\u548c\u666e\u901a\u7c7b\u65e0\u4efb\u4f55\u533a\u522b\uff0c\u4f46\u662f\u6709\u56db\u4e2a\u7279\u70b9 // \u5b9a\u4e49\u7684enum\u7c7b\u578b\u603b\u662f\u7ee7\u627f\u81eajava.lang.Enum\uff0c\u4e14\u65e0\u6cd5\u88ab\u7ee7\u627f\uff1b // \u53ea\u80fd\u5b9a\u4e49\u51faenum\u7684\u5b9e\u4f8b\uff0c\u800c\u65e0\u6cd5\u901a\u8fc7new\u64cd\u4f5c\u7b26\u521b\u5efaenum\u7684\u5b9e\u4f8b\uff1b // \u5b9a\u4e49\u7684\u6bcf\u4e2a\u5b9e\u4f8b\u90fd\u662f\u5f15\u7528\u7c7b\u578b\u7684\u552f\u4e00\u5b9e\u4f8b\uff1b // \u53ef\u4ee5\u5c06enum\u7c7b\u578b\u7528\u4e8eswitch\u8bed\u53e5\u3002 enum Weekday { SUN , MON , TUE , WED , THU , FRI , SAT ; // \u9ed8\u8ba4\u4ece0\u5f00\u59cb\u8ba1\u6570 } // 1 \u679a\u4e3e\u7c7b\u4e00\u4e9b\u5e38\u7528\u7684\u65b9\u6cd5 String s = Weekday . SUN . name (); // \"SUN\" return \u5e38\u91cf\u540d int n = Weekday . MON . ordinal (); // 1 return \u5b9a\u4e49\u7684\u5e38\u91cf\u7684\u987a\u5e8f\uff0c\u4ece0\u5f00\u59cb\u8ba1\u6570 // 2 \u679a\u4e3e\u7c7b\u6709\u4e2a\u5f0a\u7aef\uff0c\u5c31\u662f\u65b0\u589e\u4e00\u4e2a\u53d8\u91cf\u5fc5\u987b\u5199\u5728\u540e\u9762\uff0c\u5426\u5219\u4ee5\u524d\u7684\u987a\u5e8f\u5c31\u4f1a\u88ab\u6539\u53d8\uff0c\u7136\u540eordinal()\u5c31\u4f1a\u6539\u53d8 enum Weekday { MON ( 1 ), TUE ( 2 ), WED ( 3 ), THU ( 4 ), FRI ( 5 ), SAT ( 6 ), SUN ( 0 ); // \u5b57\u6bb5\u5f3a\u70c8\u5efa\u8bae\u58f0\u660e\u4e3afinal public final int dayValue ; // enum\u7684\u6784\u9020\u65b9\u6cd5\u8981\u58f0\u660e\u4e3aprivate private Weekday ( int dayValue ) { // \u7528\u6784\u9020\u65b9\u6cd5\u89e3\u51b3 this . dayValue = dayValue ; } } // 2.1 \u518d\u9ad8\u7ea7\u4e00\u70b9\uff0ctoString()\u53ef\u4ee5\u88ab\u8986\u5199\uff0c\u800cname()\u5219\u4e0d\u884c\u3002\u6211\u4eec\u53ef\u4ee5\u7ed9Weekday\u6dfb\u52a0toString()\u65b9\u6cd5\uff1a public class Main { public static void main ( String [] args ) { Weekday day = Weekday . SUN ; if ( day . dayValue == 6 || day . dayValue == 0 ) { System . out . println ( \"Today is \" + day + \". Work at home!\" ); } else { System . out . println ( \"Today is \" + day + \". Work at office!\" ); } } } enum Weekday { MON ( 1 , \"\u661f\u671f\u4e00\" ), TUE ( 2 , \"\u661f\u671f\u4e8c\" ), WED ( 3 , \"\u661f\u671f\u4e09\" ), THU ( 4 , \"\u661f\u671f\u56db\" ), FRI ( 5 , \"\u661f\u671f\u4e94\" ), SAT ( 6 , \"\u661f\u671f\u516d\" ), SUN ( 0 , \"\u661f\u671f\u65e5\" ); public final int dayValue ; private final String chinese ; private Weekday ( int dayValue , String chinese ) { this . dayValue = dayValue ; this . chinese = chinese ; } @Override public String toString () { // \u8c03\u7528name()\u65f6\u5019\uff0c\u4f1a\u53ea\u8f93\u51fachinese return this . chinese ; } }","title":"java\u6838\u5fc3\u7c7b"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/#android","text":"\u56db\u5927\u7ec4\u4ef6 \u6d3b\u52a8( Activity ):\u4f60\u5728\u5e94\u7528\u4e2d\u770b\u5230\u7684\u6240\u6709\u4e1c\u897f\u90fd\u662f\u653e\u5728\u6d3b\u52a8\u4e2d\u7684\u3002 \u670d\u52a1( Service ):\u901a\u5e38\u8fd0\u884c\u5728\u540e\u53f0\uff0c\u5373\u4f7f\u9000\u51fa\u5e94\u7528\uff0c\u670d\u52a1\u4ecd\u7136\u662f\u53ef\u4ee5\u7ee7\u7eed\u8fd0\u884c\u7684\u3002 \u5e7f\u64ad\u63a5\u6536\u5668( Broadcast Receiver ):\u5141\u8bb8\u4f60\u7684\u5e94\u7528\u63a5\u6536\u6765\u81ea\u5404\u5904\u7684\u5e7f\u64ad\u6d88\u606f(\u7535\u8bdd\uff0c\u77ed\u4fe1\u7b49)\uff0c\u540c\u6837\u4e5f\u53ef\u4ee5\u5411\u5916\u53d1\u51fa\u5e7f\u64ad\u6d88\u606f\u3002 \u5185\u5bb9\u63d0\u4f9b\u5668( Content Provider ):\u4e3a\u5e94\u7528\u7a0b\u5e8f\u4e4b\u95f4\u5171\u4eab\u6570\u636e\u63d0\u4f9b\u53ef\u80fd\uff0c\u6bd4\u5982\u53ef\u4ee5\u8ba9\u4f60\u8bfb\u53d6\u7cfb\u7edf\u7535\u8bdd\u8584\u4e2d\u7684\u8054\u7cfb\u4eba\u3002 \u4e30\u5bcc\u7684\u7cfb\u7edf\u63a7\u4ef6(\u53ef\u4ee5\u5199\u51fa\u6f02\u4eae\u7684\u754c\u9762)\u3001SQLite\u6570\u636e\u5e93\u3001\u5f3a\u5927\u7684\u591a\u5a92\u4f53(\u97f3\u4e50\u3001\u89c6\u9891\u3001\u5f55\u97f3\u3001\u62cd\u7167\u3001\u95f9\u94c3)\u3001\u5730\u7406\u4f4d\u7f6e\u5b9a\u4f4d(\u5185\u7f6e\u7684GPS) \u5b89\u5353\u6587\u4ef6\u76ee\u5f55\u89e3\u6790 AndroProject | ---.gradle # android\u81ea\u52a8\u751f\u6210\uff0c\u65e0\u9700\u5173\u5fc3 | ---.idea # android\u81ea\u52a8\u751f\u6210\uff0c\u65e0\u9700\u5173\u5fc3 | ---app # \u9879\u76ee\u4e2d\u7684\u4e3b\u76ee\u5f55\uff0c\u4ee3\u7801\u90fd\u653e\u5728\u91cc\u9762,\u4e3b | ---build # \u7f16\u8bd1\u65f6\u81ea\u52a8\u751f\u6210\u7684\u6587\u4ef6 | ---libs # \u9879\u76ee\u4e2d\u7528\u5230\u4e86\u7b2c\u4e09\u65b9jar\u5305\uff0c\u653e\u5728libs\u76ee\u5f55\u4e0b\uff0c\u4f1a\u88ab\u81ea\u52a8\u6dfb\u52a0\u5230\u6784\u5efa\u8def\u5f84\u4e2d\u53bb | ---srcs | ---androidTest #\u7528\u6765\u7f16\u5199Android Test\u6d4b\u8bd5\u7528\u4f8b\u7684\uff0c\u53ef\u4ee5\u5bf9\u9879\u76ee\u8fdb\u884c\u4e00\u4e9b\u81ea\u52a8\u5316\u6d4b\u8bd5 | ---main | ---java # \u653e\u7f6ejava\u4ee3\u7801\u7684\u5730\u65b9 | ---res #\u9879\u76ee\u4e2d\u4f7f\u7528\u7684\u56fe\u7247\u3001\u5e03\u5c40\u3001\u5b57\u7b26\u4e32\u7b49\u9700\u8981\u653e\u5728\u8be5\u76ee\u5f55\u4e0b\uff0c\u6709\u591a\u4e2a\u5f00\u5934\u7684\u6587\u4ef6\u662f\u4e3a\u4e86\u517c\u5bb9\u5404\u79cd\u8bbe\u5907 | ---drawable # \u653e\u7f6e\u56fe\u7247 | ---mipmap-xx # \u653e\u7f6e\u5e94\u7528\u56fe\u6807 | ---menu # \u663e\u793a\u83dc\u5355\u4e14\u4e0d\u5360\u7528\u5c4f\u5e55\u7a7a\u95f4 | ---layout # \u653e\u7f6e\u5e03\u5c40 | ---values # \u653e\u7f6e\u5b57\u7b26\u4e32\u3001\u6837\u5f0f\u3001\u989c\u8272\u914d\u7f6e\u7b49 | ---strings.xml # \u5199\u5b57\u7b26\u4e32\u5185\u5bb9\uff0c\u6309\u7167\u5176\u56fa\u5b9a\u683c\u5f0f\u5199 | ---xxx | ---AndroidManifest.xml # \u6574\u4e2aAndroid\u9879\u76ee\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u56db\u5927\u7ec4\u4ef6\u9700\u5728\u8be5\u6587\u4ef6\u6ce8\u518c\uff0c\u6dfb\u52a0\u6743\u9650\u58f0\u660e\u7b49 | ---test # \u7f16\u5199Unit Test\u6d4b\u8bd5\u7528\u4f8b\u7684\uff0c\u662f\u5bf9\u9879\u76ee\u8fdb\u884c\u81ea\u52a8\u5316\u6d4b\u8bd5\u7684\u53e6\u4e00\u79cd\u65b9\u5f0f\u3002 | ---.gitignore # \u5c06app\u6a21\u5757\u5185\u6307\u5b9a\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u6392\u9664\u5728\u7248\u672c\u63a7\u5236\u4e4b\u5916 | ---build.gradle # app\u6a21\u5757\u7684gradle\u6784\u5efa\u811a\u672c\uff0c\u8fd9\u4e2a\u6587\u4ef6\u4f1a\u6307\u5b9a\u5f88\u591a\u9879\u76ee\u6784\u5efa\u76f8\u5173\u7684\u914d\u7f6e | ---proguard-rules.pro # \u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u4ee3\u7801\u7684\u6df7\u6dc6\u89c4\u5219\uff0c\u4f1a\u5c06\u4ee3\u7801\u8fdb\u884c\u6df7\u6dc6\uff0c\u9632\u6b62\u88ab\u522b\u4eba\u7834\u89e3 | ---gradle # \u5305\u542bgradle wraper\u914d\u7f6e\u6587\u4ef6\uff0c\u9ed8\u8ba4\u6ca1\u6709\u542f\u7528 | ---.gitignore # \u5c06\u6307\u5b9a\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u6392\u9664\u5728\u7248\u672c\u63a7\u5236\u4e4b\u5916\u7684 | ---build.gradle # \u9879\u76ee\u5168\u5c40\u7684gradle\u6784\u5efa\u811a\u672c\uff0c\u901a\u5e38\u4e0d\u9700\u8981\u4fee\u6539 | ---gradle.properties # \u5168\u5c40\u7684gradle\u914d\u7f6e\u6587\u4ef6\uff0c\u5728\u8fd9\u91cc\u914d\u7f6e\u7684\u5c5e\u6027\u5c06\u4f1a\u5f71\u54cd\u5230\u9879\u76ee\u4e2d\u6240\u6709\u7684gradle\u7f16\u8bd1\u811a\u672c | ---gradlew # \u52a0\u4e0a\u4e0b\u9762\u8fd9\u4e2a\u6587\u4ef6\uff0c\u8fd9\u4e24\u4e2a\u6587\u4ef6\u7528\u6765\u5728\u547d\u4ee4\u884c\u754c\u9762\u4e2d\u6267\u884cgradle\u547d\u4ee4\uff0c\u8be5\u6587\u4ef6\u5728Linux\u548cmac\u4e2d\u4f7f\u7528 | ---gradlew.bat # \u8be5\u6587\u4ef6\u5728windows\u4e2d\u4f7f\u7528 | ---local.properties # \u7528\u4e8e\u6307\u5b9a\u672c\u673a\u7684Android SDK\u8def\u5f84\uff0c\u901a\u5e38\u81ea\u52a8\u751f\u6210\uff0c\u65e0\u9700\u4fee\u6539\uff0c\u6216\u8005SDK\u8def\u5f84\u53d1\u751f\u53d8\u5316\u4fee\u6539 | ---settings.gradle # \u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u4e2d\u6240\u6709\u5f15\u5165\u7684\u6a21\u5757\uff0c\u4e00\u822c\u81ea\u52a8\u5b8c\u6210\uff0c\u4f8b\u5982\u5f15\u5165app\u6a21\u5757 \u6d41\u7a0b\u68b3\u7406 1.AndroidManifest.xml\u4e2d\u6ce8\u518c\u6d3b\u52a8 # \u8fd9\u6bb5\u4ee3\u7801\u662f\u5bf9MainActivity\u6d3b\u52a8\u7684\u6ce8\u518c <activity android:name = \".MainActivity\" > <intent-filter> <action android:name = \"android.intent.action.MAIN\" /> # \u8fd9\u4ee3\u8868\u8fd9\u4e2a\u6d3b\u52a8\u662f\u4e3b\u6d3b\u52a8\uff0c\u70b9\u5f00app\u6253\u5f00\u7684\u5c31\u662f\u8fd9\u4e2a\u6d3b\u52a8\u754c\u9762 <category android:name = \"android.intent.category.LAUNCHER\" /> </intent-filter> </activity> 2.MainActivity.java\u91cc\u9762\u5b9e\u73b0\u6d3b\u52a8\u529f\u80fd // \u4e3b\u6d3b\u52a8\u7ee7\u627fAppCompatActivity\uff0c\u8fd9\u4e2a\u7c7b\u662fActivity\u7684\u5b50\u7c7b\uff0c\u4e3a\u4e86\u517c\u5bb9\u7cfb\u7edf\uff0c\u6700\u4f4e\u517c\u5bb9\u5230Android2.1\u7cfb\u7edf public class MainActivity extends AppCompatActivity { @Override // onCreate\u8fd9\u4e2a\u65b9\u6cd5\u662f\u6d3b\u52a8\u88ab\u521b\u5efa\u5fc5\u987b\u6267\u884c\u7684\u65b9\u6cd5\u3002 protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); // Android\u8bb2\u7a76\u903b\u8f91\u548c\u89c6\u56fe\u5206\u79bb\uff0c\u4e0d\u63a8\u8350\u5728\u6d3b\u52a8\u4e2d\u76f4\u63a5\u7f16\u5199\u754c\u9762\uff0c\u4e00\u822c\u662f\u5728\u5e03\u5c40\u6587\u4ef6\u4e2d\u5199\u754c\u9762\u5728\u6d3b\u52a8\u4e2d\u5f15\u5165 setContentView ( R . layout . activity_main ); // \u8be5\u65b9\u6cd5\u662f\u7ed9\u5f53\u524d\u6d3b\u52a8\u5f15\u5165\u67d0\u79cd\u5e03\u5c40 } } 3.res\u5185\u4e2d\u8d44\u6e90\u7684\u5f15\u7528 # \u4f8b\u5982res/values/strings.xml <resources> <string name = \"app_name\" >HelloWorld</string> </resources> # \u53ef\u4ee5\u4f7f\u7528\u4e24\u79cd\u65b9\u6cd5\u5f15\u7528\uff0capp_name\u5982\u679c\u662f\u4e00\u4e2axml\u6587\u4ef6\u4ee3\u8868\u4e00\u4e2a\u8d44\u6e90\uff0c\u53ef\u4ee5\u7528xml\u540d\u4ee3\u66ff # \u65b9\u6cd5\u4e00\uff1a\u5728\u4ee3\u7801\u4e2d\u901a\u8fc7R.string.app_name \u53ef\u4ee5\u83b7\u5f97\u8be5\u5b57\u7b26\u4e32\u7684\u5f15\u7528\uff0c\u5c31\u662f\u4f20\u5165\u8fd9\u4e2a\u5e03\u5c40\u6587\u4ef6\u7684id\u5373\u53ef # \u65b9\u6cd5\u4e8c\uff1a\u5728xml\u4e2d\u901a\u8fc7@string/app_name \u53ef\u4ee5\u83b7\u5f97\u8be5\u5b57\u7b26\u4e32\u7684\u5f15\u7528 # \u5982\u679c\u5f15\u7528\u56fe\u7247\u8d44\u6e90\u53ef\u4ee5\u4f7f\u7528drawalbe\u4ee3\u66ffstring\uff0c\u540c\u7406\uff0c\u5f15\u7528\u56fe\u6807\u5c31\u4f7f\u7528mipmap\u4ee3\u66ffstring\uff0c\u5e03\u5c40\u5c31\u7528layout # \u4e3e\u4f8b:AndroidManifest.xml\u4e2d\u7684\u5f15\u7528 <application android:allowBackup = \"true\" android:icon = \"@mipmap/ic_launcher\" android:label = \"@string/app_name\" android:roundIcon = \"@mipmap/ic_launcher_round\" android:supportsRtl = \"true\" android:theme = \"@style/Theme.HelloWorld\" > ... </application> 4.build.gradle\u8be6\u89e3 Android Studio \u662f\u91c7\u7528 Gradle \u6765\u6784\u5efa\u9879\u76ee\u7684\uff0c\u6bd4 xml \u4f18\u79c0\uff0c\u5175\u5668\u4e86\u8bb8\u591a\u7e41\u7410\u7684\u914d\u7f6e\uff0c\u901a\u5e38\u6709\u4e24\u4e2a\u6587\u4ef6(\u6700\u5916\u5c42\u4e00\u4e2a+app\u76ee\u5f55\u4e0b\u4e00\u4e2a) # \u6700\u5916\u5c42\u7684build.gradle\u89e3\u6790\uff0c\u4e00\u822c\u662f\u81ea\u52a8\u751f\u6210\u7684 buildscript { repositories { google () jcenter () # Android\u4ee3\u7801\u6258\u7ba1\u4ed3\u5e93(git)\uff0c\u5f15\u7528\u8fd9\u4e2a\u540e\u53ef\u4ee5\u5728\u9879\u76ee\u4e2d\u8f7b\u677e\u5f15\u7528\u4efb\u4f55jcenter\u4e2d\u7684\u5f00\u6e90\u9879\u76ee\u4e86 } dependencies { # \u58f0\u660e\u4e86\u4e00\u4e2aGradle\u63d2\u4ef6\u662f\u5e94\u7528\u4e8eandroid\u5f00\u53d1\uff0c\u56e0\u4e3aGradle\u63d2\u4ef6\u53ef\u4ee5\u7528\u6765java/c++\u7b49\u5f00\u53d1\uff0c\u9700\u8981\u6307\u540d\u7248\u672c classpath \"com.android.tools.build:gradle:4.1.1\" } } # src\u5185\u7684build.gradle # \u8981\u5e94\u7528\u7684\u63d2\u4ef6\uff0c\u6709\u4e24\u79cd\u503c\u65b9\u5f0f\u53ef\u9009\uff1b\u2460\u5e94\u7528\u7a0b\u5e8f\u6a21\u5757;\u2461\u5e93\u6a21\u5757:com.android.library:\u4f5c\u4e3a\u4ee3\u7801\u5e93\u4f9d\u9644\u522b\u7684\u5e94\u7528\u7a0b\u5e8f\u6a21\u5757\u8fd0\u884c plugins { id 'com.android.application' # \u5e94\u7528\u7a0b\u5e8f\u6a21\u5757\uff0c\u53ef\u4ee5\u76f4\u63a5\u8fd0\u884c } # android\u95ed\u5305\uff0c\u53ef\u4ee5\u914d\u7f6e\u9879\u76ee\u6784\u5efa\u7684\u5404\u79cd\u5c5e\u6027 android { compileSdkVersion 30 # \u6307\u5b9a\u9879\u76ee\u7684\u7f16\u8bd1\u7248\u672c buildToolsVersion \"30.0.3\" # \u7528\u4e8e\u6307\u5b9a\u9879\u76ee\u6784\u5efa\u5de5\u5177\u7684\u7248\u672c defaultConfig { # \u8be5\u95ed\u5305\u7528\u4e8e\u66f4\u7ec6\u8282\u7684\u914d\u7f6e applicationId \"com.example.helloworld\" # \u9879\u76ee\u7684\u5305\u540d minSdkVersion 16 # \u6307\u5b9a\u9879\u76ee\u6700\u4f4e\u517c\u5bb9\u7684Android\u7cfb\u7edf\u7248\u672c targetSdkVersion 30 # \u8868\u660e\u4f60\u5728\u8be5\u7248\u672c\u4e0a\u505a\u8fc7\u5145\u5206\u6d4b\u8bd5\uff0c\u7cfb\u7edf\u4f1a\u4e3a\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u542f\u7528\u4e00\u4e9b\u6700\u65b0\u7684\u529f\u80fd\u548c\u7279\u6027\uff0c\u5982\u679c\u8fd0\u884c\u5230\u66f4\u9ad8\u7248\u672c\u65b0\u529f\u80fd\u5219\u4e0d\u4f1a\u542f\u52a8 versionCode 1 # \u9879\u76ee\u7684\u7248\u672c\u53f7 versionName \"1.0\" # \u6307\u5b9a\u9879\u76ee\u7684\u7248\u672c\u540d\uff0c\u8fd9\u4e24\u4e2a\u5c5e\u6027\u5728\u751f\u6210\u5b89\u88c5\u6587\u4ef6\u7684\u65f6\u5019\u975e\u5e38\u91cd\u8981 testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\" } buildTypes { # \u8be5\u95ed\u5305\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u5b89\u88c5\u6587\u4ef6\u7684\u76f8\u5173\u914d\u7f6e # \u901a\u5e38\u662fdebug\uff1a\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u6d4b\u8bd5\u7248\u5b89\u88c5\u6587\u4ef6\u7684\u914d\u7f6e\uff0c\u53ef\u5ffd\u7565\u4e0d\u5199\uff1brelease:\u7528\u4e8e\u6307\u5b9a\u751f\u6210\u6b63\u5f0f\u7248\u672c\u5b89\u88c5\u6587\u4ef6\u7684\u914d\u7f6e release { minifyEnabled false # \u662f\u5426\u5bf9\u9879\u76ee\u7684\u4ee3\u7801\u8fdb\u884c\u6df7\u6dc6 # \u7528\u4e8e\u6307\u5b9a\u6df7\u6dc6\u65f6\u4f7f\u7528\u7684\u89c4\u5219\u6587\u4ef6\uff0c\u7b2c\u4e00\u4e2a\u6587\u4ef6:\u662f\u5728Android SDK\u76ee\u5f55\u4e0b\u7684\uff0c\u91cc\u9762\u662f\u6240\u6709\u9879\u76ee\u901a\u7528\u7684\u6df7\u6dc6\u89c4\u5219\u3002\u7b2c\u4e8c\u4e2a\u6587\u4ef6\uff1a\u662f\u5728\u5f53\u524d\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u7684\uff0c\u91cc\u9762\u53ef\u4ee5\u7f16\u5199\u5f53\u524d\u9879\u76ee\u7279\u6709\u7684\u6df7\u6dc6\u89c4\u5219\u3002\u6ce8\u610f\u901a\u8fc7Android studio\u76f4\u63a5\u8fd0\u884c\u9879\u76ee\u751f\u6210\u7684\u90fd\u662f\u6d4b\u8bd5\u7248\u5b89\u88c5\u6587\u4ef6\uff0c\u540e\u9762\u4f1a\u8bb2\u5982\u4f55\u751f\u6210\u6b63\u5f0f\u7248\u5b89\u88c5\u6587\u4ef6 proguardFiles getDefaultProguardFile ( 'proguard-android-optimize.txt' ) , 'proguard-rules.pro' } } compileOptions { sourceCompatibility JavaVersion.VERSION_1_8 targetCompatibility JavaVersion.VERSION_1_8 } } # \u8fd9\u4e2a\u95ed\u5305\u5f88\u5f3a\u5927\uff0c\u53ef\u4ee5\u6307\u5b9a\u5f53\u524d\u9879\u76ee\u6240\u6709\u7684\u4f9d\u8d56\u5173\u7cfb\uff1b\u901a\u5e38\u6709\u4e09\u79cd\u4f9d\u8d56\uff1a\u672c\u5730\u4f9d\u8d56(Jar\u5305/\u76ee\u5f55\u6dfb\u52a0\u4f9d\u8d56)\u3001\u5e93\u4f9d\u8d56(\u9879\u76ee\u4e2d\u5e93\u6a21\u5757\u6dfb\u52a0\u4f9d\u8d56)\u3001\u8fdc\u7a0b\u4f9d\u8d56(\u5bf9jcenter\u5e93\u4e0a\u7684\u5f00\u6e90\u9879\u76ee\u6dfb\u52a0\u4f9d\u8d56) dependencies { implementation 'androidx.appcompat:appcompat:1.1.0' implementation 'com.google.android.material:material:1.1.0' implementation 'androidx.constraintlayout:constraintlayout:1.1.3' testImplementation 'junit:junit:4.+' androidTestImplementation 'androidx.test.ext:junit:1.1.1' androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0' } Android\u7684\u65e5\u5fd7\u5de5\u5177Log // \u5feb\u6377\u952e\uff0conCreate\u65b9\u6cd5\u5916\u9762\u8f93\u5165logt\u53ef\u4ee5\u81ea\u52a8\u751f\u6210tag\u540d\uff0c\u7136\u540e\u65b9\u6cd5\u91cc\u9762\u4f7f\u7528logv/d/i/w/e\u53ef\u5feb\u901f\u751f\u6210 protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); Log . d ( \"\u5f53\u524d\u7c7b\u540d\" , \"\u60f3\u8981\u6253\u5370\u7684\u5177\u4f53\u5185\u5bb9\" ); }","title":"Android\u5f00\u53d1\u7b80\u4ecb"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/#_2","text":"Toast :Android\u7cfb\u7edf\u63d0\u4f9b\u7684\u4e00\u79cd\u63d0\u9192\u65b9\u5f0f\uff0c\u5728\u7a0b\u5e8f\u4e2d\u53ef\u4ee5\u4f7f\u7528\u5b83\u5c06\u4e00\u4e9b\u77ed\u5c0f\u4fe1\u606f\u63d0\u4f9b\u7ed9\u7528\u6237\uff0c\u5e76\u4e14\u4f1a\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u81ea\u52a8\u6d88\u5931\u3002 protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . first_layout ); // \u8be5\u65b9\u6cd5\u53ef\u4ee5\u83b7\u53d6\u5e03\u5c40\u6587\u4ef6\u7684\u5143\u7d20\uff0creturn View\u5bf9\u8c61 Button button1 = ( Button ) findViewById ( R . id . button_1 ); // \u4e3a\u6309\u94ae\u6ce8\u518c\u4e00\u4e2a\u76d1\u542c\u5668\uff0c\u8fd9\u6837\u70b9\u51fb\u6309\u94ae\u5c31\u4f1a\u89e6\u53d1onClick\u65b9\u6cd5 button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // Toast.makeText\u521b\u5efa\u4e00\u4e2aToast\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528show\u663e\u793a\u5373\u53ef\uff0c\u4e09\u4e2a\u53c2\u6570 // 1.Context\u5bf9\u8c61(Toast\u7684\u4e0a\u4e0b\u6587\u5bf9\u8c61\uff0c\u6d3b\u52a8\u672c\u8eab\u662fContext\u5bf9\u8c61) // 2.Toast\u663e\u793a\u7684\u6587\u672c\u5185\u5bb9 // 3.Toast\u663e\u793a\u7684\u65f6\u957f\uff0c\u901a\u5e38\uff0cToast.LENGTH_SHORT\uff0cToast.LENGTH_LONG Toast . makeText ( FirstActivity . this , \"You clicked Button 1\" , Toast . LENGTH_SHORT ). show (); } }); } menu\u83dc\u5355 # res/mean/main.xml <?xml version = \"1.0\" encoding = \"utf-8\" ?> <menu xmlns:android = \"http://schemas.android.com/apk/res/android\" > <item android:id = \"@+id/add_item\" # \u552f\u4e00\u6807\u8bc6\u7b26 android:title = \"Add\" /> <item android:id = \"@+id/remove_item\" android:title = \"Remove\" /> </menu> @Override // \u521b\u5efa\u83dc\u5355 public boolean onCreateOptionsMenu ( Menu menu ) { // inflate\u65b9\u6cd5\u7ed9\u5f53\u524d\u6d3b\u52a8\u521b\u5efa\u83dc\u5355\uff0c\u4e24\u4e2a\u53c2\u6570 // 1.\u6307\u5b9a\u6211\u4eec\u901a\u8fc7\u54ea\u4e00\u4e2a\u8d44\u6e90\u6587\u4ef6\u6765\u521b\u5efa\u83dc\u5355\uff0c\u8fd9\u91cc\u662fR.mean.main\u6587\u4ef6 // 2.\u6307\u5b9a\u6211\u4eec\u7684\u83dc\u5355\u9879\u5c06\u6dfb\u52a0\u5230\u54ea\u4e00\u4e2aMenu\u5bf9\u8c61\u4e2d // return true; \u8868\u793a\u5141\u8bb8\u521b\u5efa\u7684\u83dc\u5355\u663e\u793a\u51fa\u6765 getMenuInflater (). inflate ( R . menu . main , menu ); return true ; } // \u4f7f\u7528\u83dc\u5355 public boolean onOptionsItemSelected ( @NonNull MenuItem item ) { switch ( item . getItemId ()){ // \u5224\u65ad\u70b9\u51fb\u7684\u662f\u54ea\u4e2a\u83dc\u5355\u9879 case R . id . add_item : Toast . makeText ( this , \"yAdd\" , Toast . LENGTH_SHORT ). show (); break ; case R . id . remove_item : Toast . makeText ( this , \"yRemove\" , Toast . LENGTH_SHORT ). show (); break ; default : } return true ; } \u9500\u6bc1\u4e00\u4e2a\u6d3b\u52a8 // Activity \u7c7b\u63d0\u4f9b\u4e86\u4e00\u4e2afinish()\u65b9\u6cd5\uff0c\u6216\u8005\u624b\u673a\u754c\u9762\u4e0aback\u4e5f\u884c button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { finish (); } }); Intent\uff1a\u6d3b\u52a8\u95f4\u7684\u7a7f\u68ad :\u7528\u4e8e\u7a0b\u5e8f\u4e2d\u5404\u7ec4\u4ef6\u7684\u4ea4\u4e92(\u4f20\u9012\u52a8\u4f5c\u3001\u6570\u636e\u7b49)\uff0c\u4e5f\u53ef\u88ab\u7528\u4e8e\u542f\u52a8\u6d3b\u52a8\u3001\u542f\u52a8\u670d\u52a1\u4ee5\u53ca\u53d1\u9001\u5e7f\u64ad\u7b49\u3002 \u663e\u793aIntent\u548c\u9690\u5f0fIntent \u663e\u793aIntent // \u4e3b\u6d3b\u52a8\u4e2dFirstActivity,\u4f7f\u7528\u663e\u793aIntent\u8c03\u7528\uff0cIntent(Context,class) public class FirstActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . first_layout ); Button button1 = ( Button ) findViewById ( R . id . button1 ); button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // 1.Context:\u8981\u6c42\u63d0\u4f9b\u4e00\u4e2a\u542f\u52a8\u6d3b\u52a8\u7684\u4e0a\u4e0b\u6587 // 2.\u6307\u5b9a\u60f3\u8981\u542f\u52a8\u7684\u76ee\u6807\u6d3b\u52a8 Intent intent = new Intent ( FirstActivity . this , SecondActivity . class ); startActivity ( intent ); // Activity\u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2astartActivity()\u65b9\u6cd5\uff0c\u4e13\u95e8\u7528\u4e8e\u542f\u52a8\u6d3b\u52a8\u7684\uff0c\u63a5\u6536\u4e00\u4e2aIntent\u5bf9\u8c61\u53c2\u6570\uff0c\u7528\u4e8e\u542f\u52a8\u6d3b\u52a8 } }); } } // \u5176\u4ed6\u6d3b\u52a8SecondActivity public class SecondActivity extends AppCompatActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . second_layout ); } } \u9690\u5f0f Intent \uff1a\u5e76\u4e0d\u660e\u786e\u6307\u51fa\u6211\u4eec\u60f3\u8981\u542f\u52a8\u54ea\u4e00\u4e2a\u6d3b\u52a8\uff0c\u800c\u662f\u6307\u5b9a\u4e00\u7cfb\u5217\u66f4\u4e3a\u62bd\u8c61\u7684 action \u548c category \u7b49\u4fe1\u606f\uff0c\u7136\u540e\u4ea4\u7531\u7cfb\u7edf\u53bb\u5206\u6790\u8fd9\u4e2a Intent \uff0c\u5e76\u5e2e\u6211\u4eec\u627e\u51fa\u5408\u9002\u7684\u6d3b\u52a8\u53bb\u542f\u52a8\u3002 # \u901a\u8fc7\u5728<activity>\u6807\u7b7e\u4e0b\u914d\u7f6e<intent-filter>\u5185\u5bb9\u6765\u6307\u5b9a\u5f53\u524d\u6d3b\u52a8\u80fd\u591f\u54cd\u5e94\u7684action\u548ccategory <activity android:name = \".SecondActivity\" > <intent-filter> # action\u4e2d\u6307\u540d\u5f53\u524d\u6d3b\u52a8\u53ef\u4ee5\u54cd\u5e94name\u8fd9\u4e2aaction <action android:name = \"com.example.activitytest.ACTION_START\" /> # category\u4e2d\u5305\u542b\u4e86\u4e00\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u66f4\u7cbe\u786e\u7684\u6307\u540d\u4e86\u5f53\u524d\u7684\u6d3b\u52a8\u80fd\u591f\u54cd\u5e94\u7684Intent\u4e2d\u8fd8\u53ef\u80fd\u5e26\u6709\u7684category <category android:name = \"android.intent.category.DEFAULT\" /> # \u53ea\u6709\u8fd9\u4e24\u4e2a\u6807\u7b7e\u7684\u5185\u5bb9\u540c\u65f6\u5339\u914d\u4e0aIntent\u4e2d\u6307\u5b9a\u7684\u8fd9\u4e24\u4e2a\u6807\u7b7e\u624d\u80fd\u76f8\u5e94\u8be5Intent # \u6bcf\u4e2aIntent\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u4e2aaction\uff0c\u4f46\u5374\u80fd\u6307\u5b9a\u591a\u4e2acategory <category android:name = \"com.example.activitytest.MY_CATEGORY\" /> </intent-filter> </activity> // FirstActivity.java\u4fee\u6539\u70b9\u51fb\u4e8b\u4ef6\u6765\u5339\u914d button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // Intent\u4f20\u5165\u53c2\u6570\u8fdb\u884c\u5339\u914d\uff0c\u53ea\u4f20\u5165\u4e86action\u90a3category\u5339\u914d\u4e0a\u4e86\u5417\uff1f\u5f53\u7136\uff0cDEFAULT\u662f\u9ed8\u8ba4\u7684\u3002 Intent intent = new Intent ( \"com.example.activitytest.ACTION_START\" ); startActivity ( intent ); //category\u5982\u679c\u9ed8\u8ba4\uff0c\u4f1a\u5728\u8be5\u65b9\u6cd5\u8c03\u7528\u65f6\u81ea\u52a8\u52a0\u5230Intent\u4e2d\u7684 } }); // \u6bcf\u4e2aIntent\u4e2d\u53ea\u80fd\u6307\u5b9a\u4e00\u4e2aaction\uff0c\u4f46\u5374\u80fd\u6307\u5b9a\u591a\u4e2acategory button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { Intent intent = new Intent ( \"com.example.activitytest.ACTION_START\" ); // \u53ef\u4ee5\u901a\u8fc7\u8be5\u65b9\u6cd5\u6dfb\u52a0category intent . addCategory ( \"com.example.activitytest.MY_CATEGORY\" ) startActivity ( intent ); } }); \u9690\u5f0f Intent \u6269\u5c55\uff0c\u91cd\u8981\uff1a\u4e0d\u4ec5\u53ef\u4ee5\u542f\u52a8\u81ea\u5df1\u7a0b\u5e8f\u5185\u7684\u5e94\u7528\uff0c\u4e5f\u53ef\u4ee5\u542f\u52a8\u5176\u4ed6\u5f00\u6e90\u7684\u7a0b\u5e8f\uff0c\u6bd4\u5982\u5c55\u793a\u7f51\u9875 \u5c55\u793a\u7f51\u9875 button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { //Intent.ACTION_VIEW\uff1aandroid\u7cfb\u7edf\u5185\u7f6e\u7684\u52a8\u4f5c\uff0c\u5e38\u91cf\u503c\u662fandroid.intent.action.VIEW Intent intent = new Intent ( Intent . ACTION_VIEW ); // Uri.parse\u5c06\u4e00\u4e2astring\u89e3\u6790\u6210Uri\u5bf9\u8c61\uff0cintent.setData()\u5c06uri\u5bf9\u8c61\u4f20\u9012\u8fdb\u53bb\uff0c\u4e3b\u8981\u7528\u4e8e\u6307\u5b9a\u5f53\u524dIntent\u6b63\u5728\u64cd\u4f5c\u7684\u6570\u636e intent . setData ( Uri . parse ( \"http://www.baidu.com\" )); startActivity ( intent ); } }); # \u8be6\u89e3url\u5339\u914d\u548c\u7b5b\u9009,\u6211\u4eec\u53ef\u4ee5\u5728<intent-filter>\u4e2d\u914d\u7f6e\u4e00\u4e2a<data>\u6807\u7b7e\uff0c\u7528\u4e8e\u66f4\u7cbe\u786e\u5730\u6307\u5b9a\u5f53\u524d\u6d3b\u52a8\u80fd\u591f\u54cd\u5e94\u4ec0\u4e48\u7c7b\u578b\u6570\u636e android:scheme # \u7528\u4e8e\u6307\u5b9a\u6570\u636e\u7684\u534f\u8bae\u90e8\u5206\uff0chttp android:host # \u4e3b\u673a\u540d\u90e8\u5206\uff0cwww.baidu.com android:port # \u7aef\u53e3\u90e8\u5206 android:path # \u8d44\u6e90\u8def\u5f84 android:mimeType # \u6307\u5b9a\u53ef\u4ee5\u5904\u7406\u7684\u6570\u636e\u7c7b\u578b\uff0c\u6da6\u65ed\u4f7f\u7528\u901a\u914d\u7b26\u7684\u65b9\u5f0f\u8fdb\u884c\u6307\u5b9a # \u53ea\u6709<data>\u6807\u7b7e\u4e2d\u6307\u5b9a\u7684\u5185\u5bb9\u548cIntent\u4e2d\u643a\u5e26\u7684Data\u5b8c\u5168\u4e00\u81f4\u65f6\uff0c\u6d3b\u52a8\u624d\u54cd\u5e94\u3002\u5f53\u7136\uff0c\u4e00\u822c\u4e0d\u4f1a\u6307\u5b9a\u8fc7\u591a\uff0c\u901a\u5e38\u53ea\u9700\u8981\u6307\u5b9aandroid:scheme\u5c31\u53ef\u4ee5\u4e86 # \u4e3e\u4f8b\u5b50 <activity android:name = \".ThirdActivity\" > <intent-filter> <action android:name = \"android.intent.action.VIEW\" /> <category android:name = \"android.intent.category.DEFAULT\" /> <data android:scheme = \"http\" /> # \u6307\u5b9adata\u4e2d\u7684scheme </intent-filter> </activity> geo \u8868\u793a\u663e\u793a\u5730\u7406\u4f4d\u7f6e\u3001 tel \u8868\u793a\u62e8\u6253\u7535\u8bdd button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { Toast . makeText ( FirstActivity . this , \"baidu\" , Toast . LENGTH_SHORT ). show (); Intent intent = new Intent ( Intent . ACTION_DIAL ); // \u5185\u7f6e\u52a8\u4f5c intent . setData ( Uri . parse ( \"tel:10086\" )); startActivity ( intent ); } }); \u6d3b\u52a8\u95f4\u4f20\u9012\u6570\u636e : putExtra(\"\u952e\u540d\",\u4f20\u9012\u7684data) \uff0c\u952e\u540d:\u5728\u5f85\u4f20\u9012\u7684\u6d3b\u52a8\u4e2d\u6839\u636e\u8be5\u952e\u53d6\u503c\u3002 // 1.\u6570\u636e\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u6d3b\u52a8 // FirstActivity.java button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { String data = \"Hellow SecondActivity\" ; Intent intent = new Intent ( FirstActivity . this , SecondActivity . classss ); intent . putExtra ( \"extra_data\" , data ); startActivity ( intent ); } }); // SecondActivity.java protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . second_layout ); Intent intent = getIntent (); // \u83b7\u53d6\u7528\u4e8e\u542f\u52a8SecondaActivity\u7684Intent // getStringExtra\u83b7\u53d6\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u4f20\u5165int\u578b\u6570\u636e\u5219\u7528getIntExtra();getBooleanExtra()\u7b49 String data = intent . getStringExtra ( \"extra_data\" ); Log . d ( \"input_data\" , data ); } // 2.\u6570\u636e\u56de\u4f20\u7ed9\u4e0a\u4e00\u4e2a\u6d3b\u52a8\uff0cstartActivityForResult()\uff1a\u671f\u671b\u6d3b\u52a8\u9500\u6bc1\u7684\u65f6\u5019\u80fd\u591f\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u7ed9\u4e0a\u4e2a\u6d3b\u52a8\uff0c\u5b83\u4e5f\u662f\u542f\u52a8\u6d3b\u52a8\u7684\u53ef\u4ee5\u4ee3\u66ffstartActivity\uff0c\u4e24\u4e2a\u53c2\u6570:1.Intent,2.\u8bf7\u6c42\u7801(\u53ea\u8981\u662f\u552f\u4e00\u503c\u5c31\u53ef\u4ee5\uff0c1) // FirstActivity.java button1 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { String data = \"Hellow SecondActivity\" ; Intent intent = new Intent ( FirstActivity . this , SecondActivity . class ); intent . putExtra ( \"extra_data\" , data ); startActivityForResult ( intent , 1 ); // Second\u6d3b\u52a8\u9500\u6bc1\u540e\u4f1a\u8c03\u7528First\u6d3b\u52a8\u7684onActivityResult()\u65b9\u6cd5\u6765\u63a5\u6536\u8fd4\u56de\u6570\u636e } }); // SecondActivity.java button2 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { Intent intent = new Intent (); // \u4ec5\u4ec5\u4e3a\u4e86\u4f20\u9012\u6570\u636e intent . putExtra ( \"data_return\" , \"Hellow FirstActivity\" ); // \u975e\u5e38\u91cd\u8981\uff0c\u4e13\u95e8\u7528\u4e8e\u5411\u4e0a\u4e00\u4e2a\u6d3b\u52a8\u8fd4\u56de\u6570\u636e\u7684\uff0c\u4e24\u4e2a\u53c2\u6570:1.\u8fd4\u56de\u5904\u7406\u7ed3\u679cRESULT_OK/RESULT_CANCELED;2.\u628a\u5e26\u6709\u6570\u636e\u7684Intent\u4f20\u9012\u56de\u53bb setResult ( RESULT_OK , intent ); finish (); // \u9500\u6bc1\u5f53\u524d\u6d3b\u52a8\uff0c\u4f1a\u8c03\u7528First\u6d3b\u52a8\u7684onActivityResult()\u65b9\u6cd5\u6765\u63a5\u6536\u8fd4\u56de\u6570\u636e } }); // FirstActivity\u63a5\u6536\u6570\u636e\uff0c\u5e76\u6253\u5370\u6570\u636e // onActivityResult()\u4e09\u4e2a\u53c2\u6570:1.requestCode:\u542f\u52a8\u6d3b\u52a8\u65f6\u7684\u8bf7\u6c42\u7801\uff0c2.resultCode\u8fd4\u56de\u6570\u636e\u65f6\u5904\u7406\u7684\u7ed3\u679c\uff1b3.\u643a\u5e26\u8fd4\u56de\u6570\u636e\u7684Intent private static final String TAG = \"FirstActivity\" ; @Override protected void onActivityResult ( int requestCode , int resultCode , @Nullable Intent data ) { switch ( requestCode ){ //\u53ef\u4ee5\u542f\u52a8\u4e0d\u540c\u6d3b\u52a8\uff0c\u6d3b\u52a8\u8fd4\u56de\u90fd\u4f1a\u8c03\u7528\u8be5\u65b9\u6cd5\uff0c\u8fd4\u56de\u4e0d\u540c\u7684requestCode case 1 : if ( resultCode == RESULT_OK ){ // \u518d\u6839\u636eresultCode\u6765\u5224\u65ad\u8fd4\u56de\u662f\u5426\u6210\u529f String returnData = data . getStringExtra ( \"data_return\" ); Log . d ( TAG , returnData ); } break default : } } // \u6709\u4e2a\u5c0f\u95ee\u9898\uff0c\u5982\u679c\u7528\u6237\u5728SecondActivity\u4e2d\u4e0d\u662f\u4f7f\u7528button\uff0c\u800c\u662fback\u8fd4\u56de\uff0c\u6570\u636e\u5c31\u63a5\u53d7\u4e0d\u5230\u4e86\uff0c\u6240\u4ee5\u9700\u8981\u5728SecondActivity\u4e2d\u91cd\u5199onBackPressed\u65b9\u6cd5\u6765\u89e3\u51b3 @Override public void onBackPressed () { Intent intent = new Intent (); intent . putExtra ( \"data_return\" , \"Hellow FirstActivity\" ); setResult ( RESULT_OK , intent ); finish (); } \u6d3b\u52a8\u7684\u751f\u547d\u5468\u671f \u8fd4\u56de\u6808 :Android\u7684\u6d3b\u52a8\u662f\u53ef\u4ee5\u5c42\u53e0\u7684\uff0c\u6bcf\u542f\u52a8\u4e00\u4e2a\u65b0\u6d3b\u52a8\u4f1a\u8986\u76d6\u4e00\u4e2a\u539f\u6d3b\u52a8\uff0c\u70b9\u51fbback\u540e\u9500\u6bc1\u65b0\u6d3b\u52a8\uff0c\u539f\u6d3b\u52a8\u66b4\u9732\u3002\u5185\u90e8\u662f\u7528\u6808\u5b9e\u73b0\u7684\u3002 \u6d3b\u52a8\u7684\u72b6\u6001 \u8fd0\u884c\u72b6\u6001:\u4f4d\u4e8e\u6808\u9876\u7684\u6d3b\u52a8\u5904\u4e8e\u8be5\u72b6\u6001\uff0c\u5c31\u662f\u7528\u6237\u6b63\u5728\u64cd\u4f5c\u7684\u6d3b\u52a8\uff0c\u7cfb\u7edf\u6700\u4e0d\u613f\u610f\u56de\u6536\u7684\u72b6\u6001 \u6682\u505c\u72b6\u6001:\u4e0d\u518d\u4f4d\u4e8e\u6808\u9876\uff0c\u4f46\u4efb\u7136\u53ef\u89c1(\u56e0\u4e3a\u6709\u7684\u6d3b\u52a8\u4e0d\u4f1a\u5360\u636e\u6574\u4e2a\u5c4f\u5e55\uff0c\u4f8b\u5982:\u64cd\u4f5c\u5bf9\u8bdd\u6846\u6d3b\u52a8\u7684\u65f6\u5019\u9875\u9762\u4e0a\u5176\u4ed6\u6d3b\u52a8\u662f\u53ef\u89c1\u7684)\u3002\u53ea\u6709\u5728\u5185\u5b58\u6781\u4f4e\u7684\u60c5\u51b5\u4e0b\u7cfb\u7edf\u624d\u4f1a\u8003\u8651\u56de\u6536 \u505c\u6b62\u72b6\u6001:\u4e0d\u518d\u4f4d\u4e8e\u6808\u9876\uff0c\u4e14\u4e0d\u53ef\u89c1\u3002\u7cfb\u7edf\u867d\u7136\u4ecd\u4f1a\u4fdd\u7559\uff0c\u4f46\u5176\u4ed6\u9700\u8981\u5185\u5b58\u65f6\uff0c\u4f1a\u4f18\u5148\u56de\u6536 \u9500\u6bc1\u72b6\u6001:\u4ece\u8fd4\u56de\u6808\u4e2d\u79fb\u9664\u7684\u4e92\u52a8\uff0c\u7cfb\u7edf\u6700\u503e\u5411\u4e8e\u56de\u6536\u8fd9\u79cd\u7684\u72b6\u6001\u7684\u6d3b\u52a8\uff0c\u4ece\u800c\u4fdd\u8bc1\u624b\u673a\u7684\u5185\u5b58\u5145\u8db3\u3002 Activity \u7c7b\u5b9a\u4e49\u4e86 7 \u4e2a\u56de\u8c03\u65b9\u6cd5\uff0c\u8986\u76d6\u6d3b\u52a8\u58f0\u660e\u5468\u671f\u7684\u6bcf\u4e00\u4e2a\u73af\u8282 \u4ee3\u7801\u6f14\u793a\u751f\u547d\u5468\u671f\u65f6\u7684\u65b0\u51fa\u73b0\u4ee3\u7801\u89e3\u91ca <activity android:name = \".DialogActivity\" android:theme = \"@android:style/Theme.Dialog\" > # \u7528\u4e8e\u7ed9\u5f53\u524d\u6d3b\u52a8\u6307\u5b9a\u4e3b\u9898\uff0c\u5bf9\u8bdd\u6846\u4e3b\u9898 </activity> \u6d3b\u52a8\u88ab\u56de\u6536\u4e86\u600e\u4e48\u529e \uff1a\u5728\u6d3b\u52a8A\u7684\u57fa\u7840\u4e0a\u542f\u52a8B\uff0c\u5047\u8bbe\u8fd9\u65f6\u5185\u5b58\u4e0d\u8db3\uff0c\u56de\u6536\u4e86A\uff0c\u7528\u6237back\u540e\u4e5f\u662f\u4f1a\u8fd4\u56deA\u7684\uff0c\u53ea\u4e0d\u662f\u6b64\u65f6A\u662f\u91cd\u65b0\u88ab\u521b\u5efa\u7684\u3002\u5982\u679cA\u662f\u6587\u672c\u6846\uff0c\u5df2\u7ecf\u5199\u597d\u4e00\u6bb5\u6587\u5b57\u4e86\uff0c\u64cd\u4f5cB\uff0cback\u540eA\u91cd\u5efa\uff0c\u6587\u5b57\u5168\u6ca1\u4e86\uff0c\u5982\u4f55\u89e3\u51b3\uff1f Activity \u4e2d\u63d0\u4f9b\u4e86\u4e00\u4e2a onSaveInstanceState() \u56de\u8c03\u65b9\u6cd5\uff0c\u4fdd\u8bc1\u5728\u6d3b\u52a8\u88ab\u56de\u6536\u4e4b\u524d\u4e00\u5b9a\u4f1a\u8c03\u7528\uff0c\u53ef\u4ee5\u7528\u8be5\u65b9\u6cd5\u6765\u4fdd\u5b58\u6570\u636e // onSaveInstanceState()\u4f1a\u643a\u5e26\u4e00\u4e2aBundle\u7c7b\u578b\u53c2\u6570\uff0cBundle\u4f1a\u63d0\u4f9b\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\u7528\u4e8e\u4fdd\u5b58\u6570\u636e\u3002putString(key,data)\u5b58\u653e\u5b57\u7b26\u4e32\uff0cputInt(key,data)\u5b58\u653e\u6574\u578b\u3002 @Override protected void onSaveInstanceState ( @NonNull Bundle outState ) { super . onSaveInstanceState ( outState ); String tempData = \"something you just typed\" ; outState . putString ( \"data_key\" , tempData ); } // \u6570\u636e\u4fdd\u5b58\u4e0b\u6765\u540e\u5982\u4f55\u6062\u590d\uff1f\u6211\u4eec\u4e00\u76f4\u7528\u7684onCreate()\u65b9\u6cd5\u91cc\u9762\u4e5f\u6709\u4e00\u4e2aBundle\u7c7b\u578b\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u56de\u590d @Override public void onCreate ( @Nullable Bundle savedInstanceState , @Nullable PersistableBundle persistentState ) { super . onCreate ( savedInstanceState , persistentState ); Log . d ( TAG , \"onCreate: \" ); setContentView ( R . layout . activity_main ); if ( savedInstanceState != null ){ String tempData = savedInstanceState . getString ( \"data_key\" ); Log . d ( TAG , tempData ); } } \u6d3b\u52a8\u7684\u542f\u52a8\u6a21\u5f0f(\u56db\u79cd) :\u53ef\u4ee5\u5728 AndroidManifest.xml \u4e2d\u901a\u8fc7\u7ed9 <activity> \u6807\u7b7e android:launchMode \u5c5e\u6027\u6765\u9009\u62e9\u542f\u52a8\u6a21\u5f0f. standard (\u9ed8\u8ba4):\u6bcf\u5f53\u542f\u52a8\u4e00\u4e2a\u65b0\u6d3b\u52a8\u7684\u65f6\u5019\uff0c\u5b83\u5c31\u4f1a\u5728\u8fd4\u56de\u6808\u4e2d\u5165\u6808\uff0c\u5e76\u5904\u4e8e\u6808\u9876\u7684\u4f4d\u7f6e\u3002 \u7cfb\u7edf\u4e0d\u4f1a\u5728\u610f\u8be5\u6d3b\u52a8\u662f\u5426\u5728\u8fd4\u56de\u6808\u5185\uff0c\u6bcf\u6b21\u542f\u52a8\u90fd\u4f1a\u521b\u5efa\u8be5\u6d3b\u52a8\u7684\u4e00\u4e2a\u65b0\u7684\u5b9e\u4f8b \u3002 singleTop : \u542f\u52a8\u6d3b\u52a8\u65f6\u5982\u679c\u53d1\u73b0\u8fd4\u56de\u6808\u7684\u6808\u9876\u5df2\u7ecf\u662f\u8be5\u6d3b\u52a8\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5b83\uff0c\u5982\u679c\u672a\u5904\u4e8e\u6808\u9876\uff0c\u8fd8\u662f\u4f1a\u521b\u5efa\u65b0\u7684\u5b9e\u4f8b\u7684 singleTask \uff1a \u542f\u52a8\u6d3b\u52a8\u65f6\u5982\u679c\u8be5\u6d3b\u52a8\u5728\u6808\u5185\uff0c\u4f1a\u628a\u8be5\u6d3b\u52a8\u4e4b\u4e0a\u7684\u6240\u6709\u6d3b\u52a8\u7edf\u7edf\u51fa\u6808\uff0c\u5982\u679c\u6ca1\u53d1\u73b0\u4f1a\u521b\u5efa\u4e00\u4e2a\u5b9e\u4f8b singleInstance : \u7528\u4e8e\u5171\u4eab\u6d3b\u52a8\u5b9e\u4f8b ,\u4e0a\u9762\u4e09\u79cd\u65b9\u6cd5\u5982\u679c\u53d1\u73b0\u6ca1\u6709\u8be5\u6d3b\u52a8\u65f6\u4f1a\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u4f46\u5047\u5982\u6211\u6709\u8fd9\u6837\u4e00\u4e2a\u5b9e\u4f8b\uff0c\u9700\u8981\u5171\u4eab\uff0c\u4e0a\u97623\u79cd\u65b9\u5f0f\u90fd\u521b\u5efa\u65b0\u5b9e\u4f8b\uff0c\u65e0\u6cd5\u5b9e\u73b0\u3002 \u8be5\u6a21\u5f0f\u4f1a\u542f\u7528\u4e00\u4e2a\u65b0\u7684\u8fd4\u56de\u6808\u6765\u7ba1\u7406\u8fd9\u4e2a\u6d3b\u52a8\uff0c\u4e0d\u7ba1\u54ea\u4e2a\u5e94\u7528\u7a0b\u5e8f\u6765\u8bbf\u95ee\u8fd9\u4e2a\u6d3b\u52a8\uff0c\u90fd\u5171\u7528\u540c\u4e00\u4e2a\u8fd4\u56de\u6808\u3002 \u6d3b\u52a8\u7684\u4f7f\u7528\u6280\u5de7 \u77e5\u6653\u5f53\u524d\u662f\u5728\u54ea\u4e00\u4e2a\u6d3b\u52a8(\u8fdb\u516c\u53f8\u63a5\u6536\u522b\u4eba\u4ee3\u7801\u65f6\u5e38\u7528) // \u65b0\u5efaBaseActivity\u7c7b\u7ee7\u627fAppCompatActivity\u7c7b\u5e76\u91cd\u65b0onCreate\u65b9\u6cd5\uff0c\u7136\u540e\u8ba9\u4f60\u5199\u7684\u6240\u6709\u6d3b\u52a8\u7c7b\u7ee7\u627fBaseActivity public class BaseActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); Log . d ( \"BaseActivity\" , getClass (). getSimpleName ()); // \u7528\u4e8e\u6253\u5370\u5f53\u524d\u5b9e\u4f8b\u540d\u79f0 } } \u968f\u65f6\u968f\u5730\u9000\u51fa\u7a0b\u5e8f:\u5982\u679c\u4f60\u5904\u4e8e thrid \u6d3b\u52a8\uff0c\u4f60\u60f3\u8981\u9000\u51fa\u9700\u8981\u63093\u6b21back\uff0c\u4f60\u6309home\u952e\u53ea\u662f\u7b80\u5355\u6302\u8d77 // 1.\u53ea\u9700\u8981\u7528\u4e00\u4e2a\u4e13\u95e8\u7684\u96c6\u5408\u7c7b\u5bf9\u6240\u6709\u4e92\u52a8\u8fdb\u884c\u7ba1\u7406\u5373\u53ef public class ActivityCollector { public static List < Activity > activities = new ArrayList <> (); public static void addActivity ( Activity activity ){ activities . add ( activity ); } public static void removeActivity ( Activity activity ) { activities . remove ( activity ); } public static void finishAll () { // \u5c06list\u4e2d\u5b58\u50a8\u7684\u6d3b\u52a8\u5168\u90e8\u9500\u6bc1\u6389 for ( Activity activity : activities ){ if ( ! activity . isFinishing ()){ activity . finish (); } } } } // 2.\u63a5\u4e0b\u6765\u4fee\u6539BaseActivity\u4e2d\u7684\u4ee3\u7801 public class BaseActivity extends AppCompatActivity { @Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); Log . d ( \"BaseActivity\" , getClass (). getSimpleName ()); // \u7528\u4e8e\u6253\u5370\u5f53\u524d\u5b9e\u4f8b\u540d\u79f0 ActivityCollector . addActivity ( this ); } @Override protected void onDestroy () { super . onDestroy (); ActivityCollector . removeActivity ( this ); } } // 3.\u4ece\u6b64\u4ee5\u540e\uff0c\u4e0d\u7ba1\u4f60\u60f3\u5728\u4ec0\u4e48\u5730\u65b9\u9000\u51fa\u7a0b\u5e8f\uff0c\u53ea\u9700\u8981\u8c03\u7528 ActivityCollector.finishAll()\u5373\u53ef public class ThirdActivity extends BaseActivity { @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); Log . d ( TAG , \"Task id is: \" + getTaskId ()); setContentView ( R . layout . third_layout ); Button button3 = ( Button ) findViewById ( R . id . button_3 ); button3 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { ActivityCollector . finishAll (); // \u9000\u51fa\u6240\u6709\u6d3b\u52a8 // \u6740\u6389\u5f53\u524d\u8fdb\u7a0b\uff0c\u4fdd\u8bc1\u7a0b\u5e8f\u5b8c\u5168\u9000\u51fa\u3002 android . os . Process . killProcess ( android . os . Process . myPid ()); } }); } } \u542f\u52a8\u6d3b\u52a8\u7684\u6700\u4f73\u5199\u6cd5 // 1.second\u6d3b\u52a8\u9700\u8981\u7528\u5230\u4e24\u4e2a\u975e\u5e38\u91cd\u8981\u7684\u5b57\u7b26\u4e32\uff0c\u5728\u542f\u52a8SecondActivity\u65f6\u5fc5\u987b\u4f20\u8fdb\u6765\uff0c\u4e0b\u9762\u7684\u5199\u6cd5\u4e00\u70b9\u95ee\u9898\u6ca1\u6709 Intent intent = new Intent ( FirstActivity . this , SecondActivity . class ); intent . putExtra ( \"param1\" , \"data1\" ); // \u867d\u7136\u7b80\u5355\uff0c\u4f46 intent . putExtra ( \"param2\" , \"data2\" ); startActivity ( intent ); //2.\u5047\u8bbeSecondActivity\u662f\u4f60\u540c\u4e8b\u5199\u7684\uff0c\u4ed6\u4e0d\u6e05\u695a\u9700\u8981\u4f20\u9012\u4ec0\u4e48\u6570\u636e\uff0c\u5982\u4f55\u5728\u4e0d\u9605\u8bfb\u540c\u4e8b\u4ee3\u7801\u548c\u4e0d\u8ba9\u540c\u4e8b\u8be2\u95ee\u4f60\u7684\u60c5\u51b5\u4e0b\u6765\u5b8c\u6210 public class SecondActivity extends BaseActivity { public static void actionStart ( Context context , String data1 , String data2 ){ Intent intent = new Intent ( context , SecondActivity . class ); intent . putExtra ( \"param1\" , data1 ); intent . putExtra ( \"param2\" , data2 ); context . startActivity ( intent ); } } //2.1\u542f\u52a8 button3 . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // \u7b80\u5316\u4e86\u542f\u52a8\u4ee3\u7801 SecondActivity . actionStart ( FirstActivity . this , \"data1\" , \"data2\" ); } });","title":"\u6d3b\u52a8\u8be6\u89e3"},{"location":"java%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8Band%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/#ui","text":"\u63a7\u4ef6 TextView:\u663e\u793a\u6587\u672c\u4fe1\u606f <TextView android:id = \"@+id/text_view1\" # \u552f\u4e00\u6807\u8bc6\u7b26 android:layout_width = \"match_parent\" # \u540cfill_parent\uff0c\u8ba9\u5f53\u524d\u63a7\u4ef6\u5e03\u5c40\u548c\u7236\u5e03\u5c40\u5927\u5c0f\u4e00\u6837 android:layout_height = \"wrap_content\" # \u8ba9\u5f53\u524d\u7a7a\u95f4\u5927\u5c0f\u521a\u597d\u5305\u542b\u4f4f\u91cc\u9762\u7684\u5185\u5bb9 android:text = \"text_view1\" # \u6307\u5b9aTextView\u4e2d\u663e\u793a\u7684\u6587\u672c\u5185\u5bb9 android:gravity = \"center\" # \u4fee\u6539\u6587\u5b57\u7684\u5bf9\u9f50\u65b9\u5f0ftop/bottom/left/right/center\u4e5f\u53ef\u4ee5\u7528|\u6307\u5b9a\u591a\u4e2a android:textSize = \"24sp\" # \u6307\u5b9a\u6587\u5b57\u5927\u5c0f\uff0c\u5b89\u5353\u5b57\u4f53\u5927\u5c0f\u4f7f\u7528sp\u4e3a\u5355\u4f4d android:textColor = \"#00ff00\" # \u6307\u5b9a\u6587\u5b57\u7684\u989c\u8272 /> Button:\u6309\u94ae <Button android:id = \"@+id/button1\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" android:text = \"Button1\" # \u663e\u793aBUTTON1\uff0c\u7cfb\u7edf\u9ed8\u8ba4\u4f1a\u5c06\u82f1\u6587\u5b57\u6bcd\u8f6c\u4e3a\u5927\u5199 android:textAllCaps = \"false\" # \u7981\u6b62\u82f1\u6587\u5b57\u6bcd\u8f6c\u5927\u5199 /> EditText:\u7528\u4e8e\u8f93\u5165\u548c\u7f16\u8f91\u5185\u5bb9 # \u5e94\u7528\u573a\u666f\u975e\u5e38\u666e\u904d\uff0c\u53d1\u77ed\u4fe1\uff0c\u53d1\u5fae\u535a\uff0c\u53d1qq\u7b49 <EditText android:id = \"@+id/editTextTextPersonName\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" android:ems = \"10\" android:inputType = \"textPersonName\" android:text = \"Name\" android:hint = \"Please input your name\" #\u63d0\u793a\u6027\u6587\u5b57\uff0c\u5f53\u4f60\u8f93\u5165\u5185\u5bb9\u65f6\u4f1a\u6d88\u5931 android:maxLines = \"2\" # \u6307\u5b9a\u6700\u5927\u884c\u6570\u4e3a2\u884c\uff0c\u8d85\u8fc72\u884c\u4f1a\u5411\u4e0a\u6eda\u52a8 /> // \u70b9\u51fb\u6309\u94ae\u5e76\u663e\u793a\u5185\u5bb9 public class MainActivity extends AppCompatActivity { private EditText editText ; // \u58f0\u660e\u53d8\u91cf @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); editText = ( EditText ) findViewById ( R . id . editTextTextPersonName ); Button button = ( Button ) findViewById ( R . id . button1 ); button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { String inputText = editText . getText (). toString (); // \u83b7\u53d6\u5185\u5bb9 Toast . makeText ( MainActivity . this , inputText , Toast . LENGTH_SHORT ). show (); } }); } } ImageView <ImageView android:id = \"@+id/imageView\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" android:src = \"@drawable/img1\" # \u6307\u5b9a\u56fe\u7247\u8def\u5f84 /> # \u4ee3\u7801\u4e2d\u4fee\u6539\u663e\u793a\u56fe\u7247 private ImageView imageView ; imageView = ( ImageView ) findViewById ( R.id.image_view ) ; imageView.setImageResource ( R.drawable.img_2 ) # \u4fee\u6539\u4e3a\u53e6\u4e00\u5f20\u56fe\u7247 ProgressBar :\u663e\u793a\u4e00\u4e2a\u8fdb\u5ea6\u6761\uff0c\u8868\u793a\u7a0b\u5e8f\u6b63\u5728\u52a0\u8f7d\u4e00\u4e9b\u6570\u636e\u3002 # \u5c4f\u5e55\u4e2d\u6709\u4e00\u4e2a\u5706\u5f62\u8fdb\u5ea6\u6761(\u9ed8\u8ba4)\u6b63\u5728\u65cb\u8f6c <ProgressBar android:id = \"@+id/progress_bar\" android:layout_width = \"match_parent\" android:layout_height = \"wrap_content\" style = \"?android:attr/progressBarStyleHorizontal\" # \u6307\u5b9a\u4e3a\u6c34\u5e73\u8fdb\u5ea6\u6761 android:max = \"100\" # \u7ed9\u8fdb\u5ea6\u6761\u8bbe\u7f6e\u4e00\u4e2a\u6700\u5927\u503c /> # \u6570\u636e\u52a0\u8f7d\u5b8c\u540e\u8fdb\u5ea6\u6761\u600e\u4e48\u6d88\u5931\uff1f\u5176\u5b9e\u6240\u6709\u7684Android\u63a7\u4ef6\u90fd\u5177\u6709\u8fd9\u4e2aandroid:visibility\u8fd9\u4e2a\u5c5e\u6027\u6307\u5b9a android:visibility = \"visible(\u9ed8\u8ba4\uff0c\u53ef\u89c1)/invisible(\u4e0d\u53ef\u89c1\uff0c\u4f46\u4ecd\u5360\u539f\u6765\u7684\u4f4d\u7f6e\u548c\u5927\u5c0f)/gone(\u4e0d\u53ef\u89c1\uff0c\u4e0d\u5360\u4efb\u4f55\u5c4f\u5e55\u7a7a\u95f4)\" # \u4ee3\u7801\u4e2d\u4e5f\u53ef\u4ee5\u5224\u65ad private ProgressBar progressBar ; progressBar = ( ProgressBar ) findViewByID ( R.id.progress_bar ) ; if ( progressBar.getVisibility ()== View.GONE ){ progressBar.setVisibility ( View.VISIBLE ) ; } else { progressBar.setVisibility ( View.GONE ) ; } # \u53ef\u4ee5\u5728\u4ee3\u7801\u4e2d\u52a8\u6001\u7684\u66f4\u6539\u8fdb\u5ea6\u6761\u7684\u8fdb\u5ea6 int progress = progressBar.getProgress () ; progress = progress + 10 ; progressBar.setProgress ( progress ) AletDialog \uff1a\u53ef\u4ee5\u5728\u5f53\u524d\u7684\u754c\u9762\u5f39\u51fa\u4e00\u4e2a\u5bf9\u8bdd\u6846(\u4e00\u822c\u662f\u7528\u4e8e\u63d0\u793a\u975e\u5e38\u91cd\u8981\u7684\u5185\u5bb9\u6216\u8005\u8b66\u544a\u4fe1\u606f\uff0c\u4f1a\u7f6e\u4e8e\u6240\u6709\u754c\u9762\u5143\u7d20\u4e4b\u4e0a) // \u6bd4\u5982\u9632\u6b62\u7528\u6237\u8bef\u5220\u91cd\u8981\u5185\u5bb9\uff0c\u5728\u5220\u9664\u524d\u5f39\u51fa\u4e00\u4e2a\u786e\u8ba4\u7684\u5bf9\u8bdd\u6846 button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { // \u521b\u5efa\u4e00\u4e2aAlertDialog.Builder\u5b9e\u4f8b\uff0c\u53ef\u4ee5\u8bbe\u7f6e\u6807\u9898\uff0c\u5185\u5bb9\uff0c\u53ef\u5426\u53d6\u6d88\u7b49\u5c5e\u6027 AlertDialog . Builder dialog = new AlertDialog . Builder ( MainActivity . this ); dialog . setTitle ( \"This is Dialog\" ); dialog . setMessage ( \"Something important.\" ); dialog . setCancelable ( false ); // \u786e\u5b9a\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 dialog . setPositiveButton ( \"OK\" , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { } }); // \u53d6\u6d88\u6309\u94ae\u70b9\u51fb\u4e8b\u4ef6 dialog . setNegativeButton ( \"Cancel\" , new DialogInterface . OnClickListener () { @Override public void onClick ( DialogInterface dialog , int which ) { } }); // \u5c06\u5bf9\u8bdd\u6846\u663e\u793a\u51fa\u6765 dialog . show (); } }); ProgressDialog :\u8fdb\u5ea6\u6761\u5bf9\u8bdd\u6846,\u548c Dialog \u7c7b\u4f3c button . setOnClickListener ( new View . OnClickListener () { @Override public void onClick ( View v ) { ProgressDialog progressDialog = new ProgressDialog ( MainActivity . this ); progressDialog . setTitle ( \"This is ProgressDialog\" ); progressDialog . setMessage ( \"Loading...\" ); progressDialog . setCancelable ( true ); // \u8bbe\u7f6efalse\u5c31\u4e0d\u80fd\u901a\u8fc7Back\u952e\u6765\u53d6\u6d88 progressDialog . show (); // \u5f53\u6570\u636e\u52a0\u8f7d\u5b8c\u540e\u5fc5\u987b\u8c03\u7528 progressDialog.dismiss()\u65b9\u6cd5\u6765\u5173\u95ed\u5bf9\u8bdd\u6846\uff0c\u5426\u5219\u4f1a\u4e00\u76f4\u5b58\u5728 } }); 4\u4e2d\u5e03\u5c40\u8be6\u89e3 LinearLayout : \u7ebf\u6027\u5e03\u5c40 \uff0c\u4f1a\u8ba9\u6240\u6709\u63a7\u4ef6\u5728\u7ebf\u6027\u65b9\u5411\u4e0a\u4f9d\u6b21\u6392\u5217\uff0c\u53ef\u4ee5\u6c34\u5e73\u65b9\u5411\u6216\u8005\u5782\u76f4\u65b9\u5411\u6392\u5217 <LinearLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" xmlns:app = \"http://schemas.android.com/apk/res-auto\" xmlns:tools = \"http://schemas.android.com/tools\" android:orientation = \"vertical/horizontal\" # \u5782\u76f4\u6392\u5217\u6216\u8005\u6c34\u5e73\u6392\u5217 android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" /> # 1.\u4e0a\u8282\u4e2d\u63a7\u4ef6\u7684android:layout_gravity=\"top/center_vertical/bottom\"\u53ef\u4ee5\u63a7\u5236\u63a7\u4ef6\u4f4d\u7f6e # 2.android:layout_weight\u5141\u8bb8\u6211\u4eec\u4f7f\u7528\u6bd4\u4f8b\u7684\u65b9\u5f0f\u6765\u6307\u5b9a\u63a7\u4ef6\u7684\u5927\u5c0f\u3002\u5728\u624b\u673a\u5c4f\u5e55\u9002\u914d\u7684\u8fc7\u7a0b\u4e2d\u53d1\u6325\u5f88\u5927\u4f5c\u7528 <\u63a7\u4ef6 android:layout_width = \"0dp\" # \u56e0\u4e3a\u8981\u4f7f\u7528layout_weight\u6765\u63a7\u5236\u6240\u4ee5width\u8981\u51990 android:layout_weight = \"1\" # \u8fd9\u4e2a1\u662f\u6240\u5360\u6743\u91cd\uff0c\u5982\u679c\u6709\u591a\u4e2a\u63a7\u4ef6\uff0c\u90a3\u4e48\u4f1a\u628aweight\u503c\u6c42\u548c\uff0c\u7136\u540e\u6309\u6bd4\u4f8b\u5206\u914d /> RelativeLayout:\u76f8\u5bf9\u5e03\u5c40 <RelativeLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" /> # 1.\u76f8\u5bf9\u4e8e\u7236\u5e03\u5c40\u8fdb\u884c\u5b9a\u4f4d <Button android:id = \"@+id/button1\" android:layout_width = \"wrap_content\" android:layout_height = \"wrap_content\" android:text = \"Button1\" # \u76f8\u5bf9\u4e8e\u7236\u5143\u7d20\u7684\u5bf9\u9f50\u65b9\u5f0f android:layout_alignParentLeft = \"true\" android:layout_alignParentRight = \"true\" android:layout_alignParentTop = \"true\" android:layout_alignParentBottom = \"true\" android:layout_centerInParent = \"true\" /> # 2.\u76f8\u5bf9\u4e8e\u63a7\u4ef6\u8fdb\u884c\u5b9a\u4f4d <Button android:id = \"@+id/button2\" android:layout_width = \"wrap_content\" android:layout_height = \"wrap_content\" android:text = \"Button2\" # \u76f8\u5bf9\u5176\u4ed6\u63a7\u4ef6 android:layout_above = \"@id/button1\" # button1\u4e0a\u65b9 android:layout_below = \"@id/button1\" android:layout_toLeftOf = \"@id/button1\" android:layout_toRightOf = \"@id/button1\" android:layout_alignLeft = \"@id/button1\" # \u8be5\u63a7\u4ef6\u7684\u5de6\u8fb9\u7f18\u5bf9\u9f50\u53e6\u4e00\u4e2a\u63a7\u4ef6\u7684\u5de6\u8fb9\u7f18 android:layout_alignRight = \"@id/button1\" android:layout_alignTop = \"@id/button1\" android:layout_alignBottom = \"@id/button1\" # \u6ce8\u610f\uff0c\u5f53\u4e00\u4e2a\u63a7\u4ef6\u5f15\u7528\u53e6\u4e00\u4e2a\u63a7\u4ef6\u7684id\u65f6\uff0c\u8be5\u63a7\u4ef6\u4e00\u5b9a\u8981\u5b9a\u4e49\u5728\u5f15\u7528\u63a7\u4ef6\u7684\u540e\u9762\uff0c\u4e0d\u7136\u4f1a\u627e\u4e0d\u5230id /> FrameLayout\uff1a\u5e27\u5e03\u5c40 ,\u6240\u6709\u7a7a\u95f4\u90fd\u4f1a\u9ed8\u8ba4\u6446\u653e\u5728\u5e03\u5c40\u7684\u5de6\u4e0a\u89d2\uff0c\u4e0d\u5e38\u7528 <FrameLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" /> # \u53ef\u4ee5\u4f7f\u7528android:layout_gravity=\u201cleft/xx\u201d\u6765\u6307\u5b9a\u63a7\u4ef6\u7684\u5bf9\u9f50\u65b9\u5f0f \u767e\u5206\u6bd4\u5e03\u5c40 :\u4e0d\u518d\u4f7f\u7528 match_parent\u3001wrap_content \uff0c\u800c\u662f\u5141\u8bb8\u76f4\u63a5\u6307\u5b9a\u63a7\u4ef6\u5728\u5e03\u5c40\u4e2d\u6240\u5360\u7684\u767e\u5206\u6bd4\u3002\u7531\u4e8e LinearLayout \u5df2\u7ecf\u652f\u6301\u6309\u6bd4\u4f8b\u6307\u5b9a\u63a7\u4ef6\u5927\u5c0f\u4e86\uff0c\u56e0\u6b64\u767e\u5206\u6bd4\u5e03\u5c40\u53ea\u4e3a FrameLayout,RelativeLayout \u63d0\u4f9b\u6269\u5c55\u3002\u63d0\u4f9b\u4e86 PercentFrameLayout,PercentRelativeLayout \u4e24\u4e2a\u5168\u65b0\u7684\u5e03\u5c40\u3002\u5b9a\u4e49\u5728 support \u5e93\u4e2d\uff0c\u9700\u8981\u5728\u9879\u76ee\u7684 build.gradle \u4e2d\u6dfb\u52a0\u767e\u5206\u6bd4\u5e03\u5c40\u5e93\u7684\u4f9d\u8d56\u3002 # app/build.gradle\u6587\u4ef6\uff0c\u6dfb\u52a0\u4f9d\u8d56 dependencies { implementation 'com.android.support:percent:28.0.0' # \u7ee7\u627f\u4e86\u76f8\u5e94\u5e03\u5c40\u7684\u6240\u6709 } # xml\u4e2d\uff0c\u7531\u4e8e\u767e\u5206\u6bd4\u5e03\u5c40\u5e76\u6ca1\u6709\u5728SDK\u4e2d\uff0c\u6240\u4ee5\u8981\u5199\u5b8c\u6574\u8def\u5f84\uff0c\u540c\u65f6\u8fd8\u5f97\u5b9a\u4e49\u4e00\u4e2aapp\u7684\u547d\u540d\u7a7a\u95f4\u3002 <android.support.percent.PercentFrameLayout xmlns:android = \"http://schemas.android.com/apk/res/android\" xmlns:app = \"http://schemas.android.com/apk/res-auto\" android:layout_width = \"match_parent\" android:layout_height = \"match_parent\" > <Button android:id = \"@+id/btn2\" android:layout_gravity = \"right|top\" android:text = \"btn2\" android:textAllCaps = \"false\" app:layout_heightPercent = \"50%\" app:layout_widthPercent = \"50%\" /> </android.support.percent.PercentFrameLayout> \u81ea\u5b9a\u4e49\u63a7\u4ef6 \u81ea\u5b9a\u4e49\u5e03\u5c40 # \u81ea\u5df1\u65b0\u5efa\u4e00\u4e2a\u5e03\u5c40title.xml\uff0c\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u89c4\u5219\u5199\u597d\uff0c\u5e03\u5c40\u4e2d\u60f3\u52a0\u5165\u5317\u4eac\u56fe\u7247\u53ef\u4ee5\u8bf4\u4f7f\u7528android:background=\"\" # \u5982\u4f55\u5728\u4e3b\u5e03\u5c40\u4e2d\u8c03\u7528\u5462,\u5728activity_main.xml\u4e2d\u53ea\u9700\u8981\u5199\u4e00\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86 <include layout = \"@layout/title\" > # \u5f15\u5165\u5373\u53ef \u81ea\u5b9a\u4e49\u63a7\u4ef6 // \u81ea\u5b9a\u4e49\u4e00\u4e2a\u6807\u9898\u680f\u63a7\u4ef6,\u9700\u8981\u5148\u5199\u4e00\u4e2aTitleLayout\u7c7b public class TitleLayout extends Linearlayout { public TitleLayout ( Context context , AttributeSet attrs ){ super ( context , attrs ); // \u91cd\u5199\u4e86LinearLayout\u4e2d\u5e26\u6709\u4e24\u4e2a\u53c2\u6570\u7684\u6784\u9020\u51fd\u6570\uff0cLayoutInflater.from\u65b9\u6cd5\u53ef\u4ee5\u6784\u5efaLayoutInflater\u5bf9\u8c61\uff0c\u7136\u540e\u8c03\u7528inflate\u65b9\u6cd5\u5c31\u53ef\u4ee5\u52a8\u6001\u52a0\u8f7d\u4e00\u4e2a\u5e03\u5c40\u6587\u4ef6\u3002 // inflate(\u5e03\u5c40\u6587\u4ef6\u7684id\uff0c\u7ed9\u52a0\u8f7d\u597d\u7684\u5e03\u5c40\u518d\u6dfb\u52a0\u4e00\u4e2a\u7236\u5e03\u5c40:\u8fd9\u91cc\u60f3\u6307\u5b9a\u4e3aTitleLayout) LayoutInflater . from ( context ). inflate ( R . layout . title , this ); } } // \u5728\u5e03\u5c40\u6587\u4ef6\u4e2d\u6dfb\u52a0\u8fd9\u4e2a\u63a7\u4ef6 < com . example . xxx . TitleLayout // \u9700\u8981\u6307\u660e\u5b8c\u6574\u7c7b\u540d android : layout_width = \"xx\" android : layout_height = \"xx\" /> ListView(\u83dc\u5355\u76ee\u5f55)\uff1a\u6700\u5e38\u7528\uff0c\u6700\u96be\u7528 // 1.xml\u4e2d\u6ce8\u518c < ListView android : id = \"@+id/list_view\" android : layout_width = \"match_parent\" android : layout_height = \"match_parent\" tools : layout_editor_absoluteX = \"172dp\" tools : layout_editor_absoluteY = \"191dp\" /> // 2.\u4ee3\u7801\u4e2d\u8c03\u7528\uff0c\u6ce8\u610fListView\u5bf9\u8c61\u65e0\u6cd5\u76f4\u63a5\u63a5\u53d7\u6570\u636e\u6570\u636e\uff0c\u9700\u8981\u901a\u8fc7\u9002\u914d\u5668ArrayAdapter\u6765\u4f20\u8f93\uff0c\u8be5\u9002\u914d\u5668\u662f\u6cdb\u578b\uff0c\u6709\u591a\u4e2a\u6784\u9020\u51fd\u6570,ArrayAdapter(\u5f53\u524d\u4e0a\u4e0b\u6587\uff0cListView\u5b50\u9879\u5e03\u5c40\u7684id,\u6570\u7ec4\u6570\u636e) private String data [] = { \"apple\" , \"pear\" , \"pineapple\" }; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); ArrayAdapter < String > adapter = new ArrayAdapter < String > ( MainActivity . this , android . R . layout . simple_list_item_1 , data ); ListView listView = ( ListView ) findViewById ( R . id . list_view ); listView . setAdapter (( adapter )); }","title":"UI\u5f00\u53d1"},{"location":"onnx%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/","text":"\u7b80\u4ecb \u00b6 onnx\u5c06\u6bcf\u4e00\u4e2a\u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u6216\u8005\u8bf4\u662f\u6bcf\u4e00\u4e2a\u7b97\u5b50\u5f53\u4f5c\u8282\u70b9**Node**\uff0c\u518d\u7531\u8fd9\u4e9b**Node**\u53bb\u6784\u5efa\u4e00\u4e2a**Graph**\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u7f51\u7edc\u3002\u6700\u540e\u5c06**Graph**\u548c\u8fd9\u4e2aonnx\u6a21\u578b\u7684\u5176\u4ed6\u4fe1\u606f\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u751f\u6210\u4e00\u4e2a**model**\uff0c\u4e5f\u5c31\u662f\u6700\u7ec8\u7684.onnx\u7684\u6a21\u578b\u3002 onnx.helper.make_node/make_graph/make_model \u7528\u4e8e\u6784\u5efa\u6a21\u578b\uff0c onnx.helper.make_tensor_value_info/make_tensor \u662f\u6784\u5efa graph \u6240\u9700\u8981\u7684 \u7b80\u5355\u7ed3\u6784 \u5e38\u7528\u51fd\u6570\u89e3\u6790 \u00b6 onnx.helper.make_node(op_type,inputs,outputs,name=None,doc_string=None,**kwargs) -> NodeProto op_type :\u8282\u70b9\u7684\u7b97\u5b50\u7c7b\u578b(\u5b57\u7b26\u4e32:Conv,Relu,Add,...)\uff0c\u5177\u4f53\u652f\u6301\u7c7b\u578b\u89c1 onnx\u652f\u6301\u7684\u7b97\u5b50\u5217\u8868 \uff0c\u4e0d\u8981\u778e\u5199 inputs :\u5b58\u653e\u8282\u70b9\u8f93\u5165\u7684\u540d\u5b57(\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u4ee5Conv\u4e3a\u4f8b\uff0c\u5fc5\u6709\u8f93\u5165X\u548c\u6743\u91cdW\uff0c\u504f\u7f6eB\u4f5c\u4e3a\u53ef\u9009) outputs :\u5b58\u653e\u8282\u70b9\u8f93\u51fa\u7684\u540d\u5b57(\u5b57\u7b26\u4e32\u5217\u8868,\u5e38\u5e38\u662f\u4e00\u4e2a\u8f93\u51fa) name :\u8282\u70b9\u540d\uff0c\u53ef\u6709\u53ef\u65e0\uff0c\u4e0d\u8981\u548cop_type\u641e\u6df7\u4e86 doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNon kwargs :\u5b58\u653e\u8282\u70b9\u7684\u5c5e\u6027 attributes \uff0c\u5e38\u5e38\u4f20\u5165\u5b57\u5178\u7c7b\u578b\u5373\u53ef, Conv \u4e3e\u4f8b dict = { \"kernel_shape\" : ( 7 , 7 ), \"group\" : 1 , #default\u4e3a1\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5199 \"strides\" : ( 2 , 2 ), \"auto_pad\" : \"VALID\" , \"dilations\" : [ 1 , 1 , 1 ], \"pads\" : [ 3 , 3 , 3 , 3 ] } #\u987a\u5e8f\u65e0\u6240\u8c13 node_def = helper . make_node ( NodeType , # \u8282\u70b9\u540d X_name , # \u8f93\u5165 Y_name , # \u8f93\u51fa ** dict ) onnx.helper.make_graph(nodes,name,inputs,outputs,initializer=None,doc_string=None,value_info=[]) \u2192 GraphProto nodes :\u7528make_node\u751f\u6210\u7684\u8282\u70b9( NodeProto\u7c7b\u578b )\u5217\u8868:[node1,node2,node3,\u2026] name : graph \u7684\u540d\u5b57(\u5b57\u7b26\u4e32) inputs :\u5b58\u653e graph \u7684\u8f93\u5165\u6570\u636e\u4fe1\u606f( ValueInfoProto \u7c7b\u578b)\uff0c make_tensor_value_info \u751f\u6210 \u628a\u6765\u81ea\u5916\u754c\u7684\u8d85\u53c2\u6570\u4fe1\u606f\u548c\u8f93\u5165\u6570\u636e\u4fe1\u606f\u7edf\u4e00\u653e\u5728inputs\u91cc onnx.helper.make_tensor_value_info \u2192 ValueInfoProto name :\u6570\u636e\u4fe1\u606f\u540d\u5b57 [\u7c7b\u578b:\u5b57\u7b26\u4e32] elem_type :\u6570\u636e\u7c7b\u578b [\u7c7b\u578b: TensorProto.DataType ] shape :\u6570\u636e\u7ef4\u5ea6(\u5f62\u72b6) [\u7c7b\u578b:int\u5217\u8868/\u5143\u7ec4] doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNone [\u7c7b\u578b:\u5b57\u7b26\u4e32] shape_denotation :\u5bf9shape\u7684\u63cf\u8ff0 [\u7c7b\u578b:\u5b57\u7b26\u4e32\u5217\u8868],\u6839\u636e\u6570\u636e\u7c7b\u578b\u548c\u5f62\u72b6\u521b\u5efa\u4e00\u4e2a ValueInfoProto \u3002 outputs :\u5b58\u653e graph \u7684\u8f93\u51fa\u6570\u636e\u4fe1\u606f( ValueInfoProto \u7c7b\u578b)\uff0c initializer :\u5b58\u653e\u8d85\u53c2\u6570( TensorProto \u7c7b\u578b:Conv\u7684\u6743\u91cdW\u3001\u504f\u7f6eB\uff0cBatchNormalization\u7684scale\u3001B\u3001mean\u3001var)\uff0c make_tensor \u6765\u8f6c\u6362\u6210 TensorProto \u5f62\u5f0f onnx.helper.make_tensor(name,data_type,dims,vals,raw=False) ---> TensorProto name :\u6570\u636e\u540d\u5b57\uff0c\u8981\u4e0e\u8be5\u6570\u636e\u7684\u4fe1\u606ftensor value info\u4e2d\u540d\u5b57\u5bf9\u5e94 [\u7c7b\u578b:\u5b57\u7b26\u4e32] data_type :\u6570\u636e\u7c7b\u578b [\u7c7b\u578b:TensorProto.DataType] \u5982TensorProto.FLOAT,TensorProto.UINT8\u3001TensorProto.FLOAT16\u7b49 dims :\u6570\u636e\u7ef4\u5ea6 [\u7c7b\u578b:int\u5217\u8868/\u5143\u7ec4] vals :\u6570\u636e\u503c\uff0c\u597d\u50cf\u8981\u53ef\u8fed\u4ee3\u7684 [\u7c7b\u578b:\u4efb\u610f] raw :\u9009\u62e9\u662f\u5426\u7528\u4e8c\u8fdb\u5236\u7f16\u7801 [\u7c7b\u578b:bool],raw\u4e3aFalse\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u7528\u76f8\u5e94\u7684TensorProto\u6765\u5b58\u50a8\u57fa\u4e8edata_type\u7684\u503c\uff0c\u82e5raw\u4e3aTrue\uff0c\u5219\u662f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u6765\u5b58\u50a8\u6570\u636e\u3002**\u6ce8\uff1a**\u6211\u53d1\u73b0cntk\u5b98\u65b9\u8f6connx\u7528\u7684\u662fraw\u4e3aFalse\u7684\u65b9\u5f0f\uff0c\u800cpytorch\u5b98\u65b9\u8f6connx\u7528\u7684\u662fraw\u4e3aTrue\u7684\u65b9\u5f0f\u3002 doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNone value_info :\u5b58\u653e\u4e2d\u95f4\u5c42\u4ea7\u751f\u7684\u8f93\u51fa\u6570\u636e\u7684\u4fe1\u606f ( ValueInfoProto \u7c7b\u578b)\uff0c\u6ce8\u610f\u662f\u4fe1\u606f\u4e0d\u662f\u5177\u4f53\u6570\u503c\u3002 onnx.helper.make_model(graph,**kwargs) \uff1a\u628agraph\u548c\u6a21\u578b\u5176\u4ed6\u4fe1\u606f(ir_version(\u73b0\u5728\u9ed8\u8ba4\u662f3),....)\u7ec4\u5408\u5728\u4e00\u8d77\u6784\u5efa\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684onnx model\u7684\u51fd\u6570 graph :\u7528 make_graph \u751f\u6210\u7684 GraphProto kwargs :\u6784\u5efaModelProto\u4e2d\u7684opset_import onnx.helper.make_attribute(key,value,doc_string=None) \u2192 AttributeProto key :\u952e\u503c [\u7c7b\u578b:\u5b57\u7b26\u4e32] value :\u6570\u503c [\u7c7b\u578b:\u4efb\u610f] doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNone [\u7c7b\u578b:\u5b57\u7b26\u4e32],\u6839\u636e\u6570\u503c\u7c7b\u578b\u6765\u521b\u5efa\u4e00\u4e2aAttributeProto\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u5728\u4e86make_node\u91cc\uff0c\u7528\u4e8e\u5c06make_node\u4f20\u5165\u7684**kwargs\u8f6c\u4e3aAttributeProto\u5f62\u5f0f\u3002 \u7b80\u5355\u4f7f\u7528 \u00b6 #1.\u6a21\u578b\u52a0\u8f7d\u548c\u5b58\u50a8 import onnx onnx_model = onnx . load ( \"xx.onnx\" ) # \u6a21\u578b\u52a0\u8f7d onnx . save ( onnx_model , 're_xx.onnx' ) # \u6a21\u578b\u5b58\u50a8 #2.TensorProto(\u5e38\u7528\u6765\u5b58\u653e\u53c2\u6570)\u548cnumpy\u7684\u76f8\u4e92\u8f6c\u6362 import numpy as np from onnx import numpy_helper numpy_array = np . array ([[ 1.0 , 2.0 , 3.0 ], [ 4.0 , 5.0 , 6.0 ]], dtype = float ) tensor = numpy_helper . from_array ( numpy_array ) # TensorProto\u7c7b\u578b new_array = numpy_helper . to_array ( tensor ) # numpy\u7c7b\u578b # Save the TensorProto with open ( 'tensor.pb' , 'wb' ) as f : f . write ( tensor . SerializeToString ()) # Load a TensorProto new_tensor = onnx . TensorProto () with open ( 'tensor.pb' , 'rb' ) as f : new_tensor . ParseFromString ( f . read ()) # \u521b\u5efa\u6a21\u578b import onnx from onnx import helper from onnx import AttributeProto , TensorProto , GraphProto # Create one input (ValueInfoProto) X = helper . make_tensor_value_info ( 'X' , TensorProto . FLOAT , [ 1 , 2 ]) # Create second input (ValueInfoProto) Pads = helper . make_tensor_value_info ( 'Pads' , TensorProto . INT64 , [ 4 ]) # Create one output (ValueInfoProto) Y = helper . make_tensor_value_info ( 'Y' , TensorProto . FLOAT , [ 1 , 4 ]) # Create a node (NodeProto) node_def = helper . make_node ( 'Pad' , # node name [ 'X' , 'Pads' ], # inputs [ 'Y' ], # outputs mode = 'constant' , # Attributes ) # Create the graph (GraphProto) graph_def = helper . make_graph ( [ node_def ], \"test-model\" , [ X , Pads ], [ Y ], [ helper . make_tensor ( 'Pads' , TensorProto . INT64 , [ 4 ,], [ 0 , 0 , 1 , 1 ,])], ) # Create the model (ModelProto) model_def = helper . make_model ( graph_def , producer_name = 'onnx-example' ) print ( 'The ir_version in model: {} \\n ' . format ( model_def . ir_version )) print ( 'The producer_name in model: {} \\n ' . format ( model_def . producer_name )) print ( 'The graph in model: \\n {} ' . format ( model_def . graph )) onnx . checker . check_model ( model_def ) print ( 'The model is checked!' )","title":"ONNX\u7b80\u660e\u6559\u7a0b"},{"location":"onnx%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_1","text":"onnx\u5c06\u6bcf\u4e00\u4e2a\u7f51\u7edc\u7684\u6bcf\u4e00\u5c42\u6216\u8005\u8bf4\u662f\u6bcf\u4e00\u4e2a\u7b97\u5b50\u5f53\u4f5c\u8282\u70b9**Node**\uff0c\u518d\u7531\u8fd9\u4e9b**Node**\u53bb\u6784\u5efa\u4e00\u4e2a**Graph**\uff0c\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a\u7f51\u7edc\u3002\u6700\u540e\u5c06**Graph**\u548c\u8fd9\u4e2aonnx\u6a21\u578b\u7684\u5176\u4ed6\u4fe1\u606f\u7ed3\u5408\u5728\u4e00\u8d77\uff0c\u751f\u6210\u4e00\u4e2a**model**\uff0c\u4e5f\u5c31\u662f\u6700\u7ec8\u7684.onnx\u7684\u6a21\u578b\u3002 onnx.helper.make_node/make_graph/make_model \u7528\u4e8e\u6784\u5efa\u6a21\u578b\uff0c onnx.helper.make_tensor_value_info/make_tensor \u662f\u6784\u5efa graph \u6240\u9700\u8981\u7684 \u7b80\u5355\u7ed3\u6784","title":"\u7b80\u4ecb"},{"location":"onnx%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_2","text":"onnx.helper.make_node(op_type,inputs,outputs,name=None,doc_string=None,**kwargs) -> NodeProto op_type :\u8282\u70b9\u7684\u7b97\u5b50\u7c7b\u578b(\u5b57\u7b26\u4e32:Conv,Relu,Add,...)\uff0c\u5177\u4f53\u652f\u6301\u7c7b\u578b\u89c1 onnx\u652f\u6301\u7684\u7b97\u5b50\u5217\u8868 \uff0c\u4e0d\u8981\u778e\u5199 inputs :\u5b58\u653e\u8282\u70b9\u8f93\u5165\u7684\u540d\u5b57(\u5b57\u7b26\u4e32\u5217\u8868\uff0c\u4ee5Conv\u4e3a\u4f8b\uff0c\u5fc5\u6709\u8f93\u5165X\u548c\u6743\u91cdW\uff0c\u504f\u7f6eB\u4f5c\u4e3a\u53ef\u9009) outputs :\u5b58\u653e\u8282\u70b9\u8f93\u51fa\u7684\u540d\u5b57(\u5b57\u7b26\u4e32\u5217\u8868,\u5e38\u5e38\u662f\u4e00\u4e2a\u8f93\u51fa) name :\u8282\u70b9\u540d\uff0c\u53ef\u6709\u53ef\u65e0\uff0c\u4e0d\u8981\u548cop_type\u641e\u6df7\u4e86 doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNon kwargs :\u5b58\u653e\u8282\u70b9\u7684\u5c5e\u6027 attributes \uff0c\u5e38\u5e38\u4f20\u5165\u5b57\u5178\u7c7b\u578b\u5373\u53ef, Conv \u4e3e\u4f8b dict = { \"kernel_shape\" : ( 7 , 7 ), \"group\" : 1 , #default\u4e3a1\uff0c\u6240\u4ee5\u53ef\u4ee5\u4e0d\u5199 \"strides\" : ( 2 , 2 ), \"auto_pad\" : \"VALID\" , \"dilations\" : [ 1 , 1 , 1 ], \"pads\" : [ 3 , 3 , 3 , 3 ] } #\u987a\u5e8f\u65e0\u6240\u8c13 node_def = helper . make_node ( NodeType , # \u8282\u70b9\u540d X_name , # \u8f93\u5165 Y_name , # \u8f93\u51fa ** dict ) onnx.helper.make_graph(nodes,name,inputs,outputs,initializer=None,doc_string=None,value_info=[]) \u2192 GraphProto nodes :\u7528make_node\u751f\u6210\u7684\u8282\u70b9( NodeProto\u7c7b\u578b )\u5217\u8868:[node1,node2,node3,\u2026] name : graph \u7684\u540d\u5b57(\u5b57\u7b26\u4e32) inputs :\u5b58\u653e graph \u7684\u8f93\u5165\u6570\u636e\u4fe1\u606f( ValueInfoProto \u7c7b\u578b)\uff0c make_tensor_value_info \u751f\u6210 \u628a\u6765\u81ea\u5916\u754c\u7684\u8d85\u53c2\u6570\u4fe1\u606f\u548c\u8f93\u5165\u6570\u636e\u4fe1\u606f\u7edf\u4e00\u653e\u5728inputs\u91cc onnx.helper.make_tensor_value_info \u2192 ValueInfoProto name :\u6570\u636e\u4fe1\u606f\u540d\u5b57 [\u7c7b\u578b:\u5b57\u7b26\u4e32] elem_type :\u6570\u636e\u7c7b\u578b [\u7c7b\u578b: TensorProto.DataType ] shape :\u6570\u636e\u7ef4\u5ea6(\u5f62\u72b6) [\u7c7b\u578b:int\u5217\u8868/\u5143\u7ec4] doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNone [\u7c7b\u578b:\u5b57\u7b26\u4e32] shape_denotation :\u5bf9shape\u7684\u63cf\u8ff0 [\u7c7b\u578b:\u5b57\u7b26\u4e32\u5217\u8868],\u6839\u636e\u6570\u636e\u7c7b\u578b\u548c\u5f62\u72b6\u521b\u5efa\u4e00\u4e2a ValueInfoProto \u3002 outputs :\u5b58\u653e graph \u7684\u8f93\u51fa\u6570\u636e\u4fe1\u606f( ValueInfoProto \u7c7b\u578b)\uff0c initializer :\u5b58\u653e\u8d85\u53c2\u6570( TensorProto \u7c7b\u578b:Conv\u7684\u6743\u91cdW\u3001\u504f\u7f6eB\uff0cBatchNormalization\u7684scale\u3001B\u3001mean\u3001var)\uff0c make_tensor \u6765\u8f6c\u6362\u6210 TensorProto \u5f62\u5f0f onnx.helper.make_tensor(name,data_type,dims,vals,raw=False) ---> TensorProto name :\u6570\u636e\u540d\u5b57\uff0c\u8981\u4e0e\u8be5\u6570\u636e\u7684\u4fe1\u606ftensor value info\u4e2d\u540d\u5b57\u5bf9\u5e94 [\u7c7b\u578b:\u5b57\u7b26\u4e32] data_type :\u6570\u636e\u7c7b\u578b [\u7c7b\u578b:TensorProto.DataType] \u5982TensorProto.FLOAT,TensorProto.UINT8\u3001TensorProto.FLOAT16\u7b49 dims :\u6570\u636e\u7ef4\u5ea6 [\u7c7b\u578b:int\u5217\u8868/\u5143\u7ec4] vals :\u6570\u636e\u503c\uff0c\u597d\u50cf\u8981\u53ef\u8fed\u4ee3\u7684 [\u7c7b\u578b:\u4efb\u610f] raw :\u9009\u62e9\u662f\u5426\u7528\u4e8c\u8fdb\u5236\u7f16\u7801 [\u7c7b\u578b:bool],raw\u4e3aFalse\u7684\u65f6\u5019\uff0c\u5c31\u4f1a\u7528\u76f8\u5e94\u7684TensorProto\u6765\u5b58\u50a8\u57fa\u4e8edata_type\u7684\u503c\uff0c\u82e5raw\u4e3aTrue\uff0c\u5219\u662f\u7528\u4e8c\u8fdb\u5236\u7f16\u7801\u6765\u5b58\u50a8\u6570\u636e\u3002**\u6ce8\uff1a**\u6211\u53d1\u73b0cntk\u5b98\u65b9\u8f6connx\u7528\u7684\u662fraw\u4e3aFalse\u7684\u65b9\u5f0f\uff0c\u800cpytorch\u5b98\u65b9\u8f6connx\u7528\u7684\u662fraw\u4e3aTrue\u7684\u65b9\u5f0f\u3002 doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNone value_info :\u5b58\u653e\u4e2d\u95f4\u5c42\u4ea7\u751f\u7684\u8f93\u51fa\u6570\u636e\u7684\u4fe1\u606f ( ValueInfoProto \u7c7b\u578b)\uff0c\u6ce8\u610f\u662f\u4fe1\u606f\u4e0d\u662f\u5177\u4f53\u6570\u503c\u3002 onnx.helper.make_model(graph,**kwargs) \uff1a\u628agraph\u548c\u6a21\u578b\u5176\u4ed6\u4fe1\u606f(ir_version(\u73b0\u5728\u9ed8\u8ba4\u662f3),....)\u7ec4\u5408\u5728\u4e00\u8d77\u6784\u5efa\u51fa\u4e00\u4e2a\u5b8c\u6574\u7684onnx model\u7684\u51fd\u6570 graph :\u7528 make_graph \u751f\u6210\u7684 GraphProto kwargs :\u6784\u5efaModelProto\u4e2d\u7684opset_import onnx.helper.make_attribute(key,value,doc_string=None) \u2192 AttributeProto key :\u952e\u503c [\u7c7b\u578b:\u5b57\u7b26\u4e32] value :\u6570\u503c [\u7c7b\u578b:\u4efb\u610f] doc_string :\u63cf\u8ff0\u6587\u6863\u7684\u5b57\u7b26\u4e32\uff0c\u8fd9\u4e2a\u9ed8\u8ba4\u4e3aNone [\u7c7b\u578b:\u5b57\u7b26\u4e32],\u6839\u636e\u6570\u503c\u7c7b\u578b\u6765\u521b\u5efa\u4e00\u4e2aAttributeProto\uff0c\u8fd9\u4e2a\u51fd\u6570\u7528\u5728\u4e86make_node\u91cc\uff0c\u7528\u4e8e\u5c06make_node\u4f20\u5165\u7684**kwargs\u8f6c\u4e3aAttributeProto\u5f62\u5f0f\u3002","title":"\u5e38\u7528\u51fd\u6570\u89e3\u6790"},{"location":"onnx%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/#_3","text":"#1.\u6a21\u578b\u52a0\u8f7d\u548c\u5b58\u50a8 import onnx onnx_model = onnx . load ( \"xx.onnx\" ) # \u6a21\u578b\u52a0\u8f7d onnx . save ( onnx_model , 're_xx.onnx' ) # \u6a21\u578b\u5b58\u50a8 #2.TensorProto(\u5e38\u7528\u6765\u5b58\u653e\u53c2\u6570)\u548cnumpy\u7684\u76f8\u4e92\u8f6c\u6362 import numpy as np from onnx import numpy_helper numpy_array = np . array ([[ 1.0 , 2.0 , 3.0 ], [ 4.0 , 5.0 , 6.0 ]], dtype = float ) tensor = numpy_helper . from_array ( numpy_array ) # TensorProto\u7c7b\u578b new_array = numpy_helper . to_array ( tensor ) # numpy\u7c7b\u578b # Save the TensorProto with open ( 'tensor.pb' , 'wb' ) as f : f . write ( tensor . SerializeToString ()) # Load a TensorProto new_tensor = onnx . TensorProto () with open ( 'tensor.pb' , 'rb' ) as f : new_tensor . ParseFromString ( f . read ()) # \u521b\u5efa\u6a21\u578b import onnx from onnx import helper from onnx import AttributeProto , TensorProto , GraphProto # Create one input (ValueInfoProto) X = helper . make_tensor_value_info ( 'X' , TensorProto . FLOAT , [ 1 , 2 ]) # Create second input (ValueInfoProto) Pads = helper . make_tensor_value_info ( 'Pads' , TensorProto . INT64 , [ 4 ]) # Create one output (ValueInfoProto) Y = helper . make_tensor_value_info ( 'Y' , TensorProto . FLOAT , [ 1 , 4 ]) # Create a node (NodeProto) node_def = helper . make_node ( 'Pad' , # node name [ 'X' , 'Pads' ], # inputs [ 'Y' ], # outputs mode = 'constant' , # Attributes ) # Create the graph (GraphProto) graph_def = helper . make_graph ( [ node_def ], \"test-model\" , [ X , Pads ], [ Y ], [ helper . make_tensor ( 'Pads' , TensorProto . INT64 , [ 4 ,], [ 0 , 0 , 1 , 1 ,])], ) # Create the model (ModelProto) model_def = helper . make_model ( graph_def , producer_name = 'onnx-example' ) print ( 'The ir_version in model: {} \\n ' . format ( model_def . ir_version )) print ( 'The producer_name in model: {} \\n ' . format ( model_def . producer_name )) print ( 'The graph in model: \\n {} ' . format ( model_def . graph )) onnx . checker . check_model ( model_def ) print ( 'The model is checked!' )","title":"\u7b80\u5355\u4f7f\u7528"},{"location":"pandas%E3%80%81matplotlib%E7%AE%80%E6%B4%81%E7%AC%94%E8%AE%B0/","text":"Pandas \u00b6 Series:\u4e00\u7ef4 import pandas as pd from pandas import Series , DataFrame # Series,\u521b\u5efa\u53ef\u4ee5\u4f20\u5165:list,dict,\u9ed8\u8ba4\u7d22\u5f15\u4ece0~N-1\uff0c\u53ef\u7528index\u6307\u5b9a\u7d22\u5f15\u540d obj = pd . Series ([ 4 , 7 , - 5 , 3 ]) # \u666e\u901a\u521b\u5efa:(\u7d22\u5f15,\u503c)\u96c6\u5408 obj = pd . Series ([ 4 , 7 , - 5 , 3 ], index = [ 'd' , 'b' , 'a' , 'c' ]) # \u6307\u5b9a\u7d22\u5f15 obj1 = pd . Series ({ 'a' : 1 , 'b' : 2 , 'c' : 3 }) # index:a,b,c values:1,2,3 obj1 = pd . Series ({ 'a' : 1 , 'b' : 2 , 'c' : 3 }, index = [ 'c' , 'b' , 'a' ]) # \u4f7f\u7528index\u6307\u5b9a\u987a\u5e8f obj2 = obj1 . reindex ([ 'b' , 'c' , 'a' ]) # \u91cd\u5efa\u7d22\u5f15 # \u91cd\u5efa\u7d22\u5f15\u9ad8\u7ea7\u7528\u6cd5 obj3 = pd . Series ([ 'blue' , 'purple' , 'yellow' ], index = [ 0 , 2 , 4 ]) obj3 . reindex ( range ( 6 ), method = 'ffill' ) # ffill\u662f\u91cd\u5efa\u7d22\u5f15\u65f6\u5411\u524d\u63d2\u503c\uff0c\u590d\u5236\u524d\u65b9\u503c\u5f53\u505a\u5df1\u65b9\u503c obj + obj1 # Series\u7684\u6570\u5b66\u64cd\u4f5c\u4f1a\u6839\u636e\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\uff0c\u6709\u5171\u540c\u7d22\u5f15\u7684\u6267\u884c\u6570\u5b66\u8fd0\u7b97\uff0c\u65e0\u7684value=NaN # \u5c5e\u6027+\u65b9\u6cd5 obj . index # get/set\u6240\u6709\u7d22\u5f15 obj . values # \u83b7\u53d6\u6240\u6709\u503c obj . index . name # get/set\u7d22\u5f15\u540d,\u56e0\u4e3avalues\u8fd4\u56de\u7684\u662farray\u5bf9\u8c61\uff0c\u6240\u4ee5\u6ca1\u6709.name\u5c5e\u6027 obj . index . is_unique # \u5224\u65ad\u7d22\u5f15\u540d\u662f\u5426\u662f\u552f\u4e00\u7684\uff0c\u542b\u6709\u91cd\u590d\u5417 obj . value_counts () # \u5e38\u7528:\u8fd4\u56de\u6bcf\u4e2avalue\u51fa\u73b0\u7684\u6b21\u6570(value:times) pd . value_counts ( obj . values , sort = False ) # \u66f4\u52a0\u5e38\u7528 uniques = obj . unique () # \u5e38\u7528:\u7c7b\u4f3cset() obj [ 'd' ] == obj [ 0 ] # \u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u7d22\u5f15\u662f\u2018d\u2019\u7684\u503c obj [[ 'b' , 'a' , 'c' ]] # \u83b7\u53d6\u90e8\u5206\u503c obj [ 2 : 4 ] # \u867d\u7136\u7d22\u5f15\u6539\u6210\u4e86a,b,c,d,\u4f46\u662f\u7167\u6837\u53ef\u4ee5\u4f7f\u7528\u6574\u6570\u7d22\u5f15\u83b7\u53d6\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5207\u7247 obj [ 'b' : 'c' ] # \u5f53\u4f7f\u7528\u7d22\u5f15\u5207\u7247\u65f6\uff0c\u6ce8\u610f:\u8fd9\u4e2a\u5207\u7247\u5305\u542b\u7740\u5c3e\u90e8\uff0c\u548c\u6570\u7ec4\u5207\u7247\u4e0d\u540c # \u6574\u6570\u7d22\u5f15\u548c\u540d\u79f0\u7d22\u5f15\u50bb\u50bb\u5206\u4e0d\u6e05\uff0c\u4ee5\u540e\u89c4\u5b9a\uff0c\u60f3\u8981\u5207\u7247\u7edf\u4e00\u4f7f\u7528iloc\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u50cfnumpy\u4e00\u6837\u9a9a\u64cd\u4f5c\u4e86 obj . iloc [:] # \u7b49\u4ef7\u4e8e\u6574\u6570\u7d22\u5f15\uff0c\u4e0d\u8fc7\u4ee5\u540e\u53d6\u503c\u7edf\u4e00\u52a0\u4e0ailoc 'b' in obj # True mask = obj . isin ([ 'b' , 'c' ]) # \u8fd4\u56de\u4e00\u4e2amask\u6a21\u677f\uff0cobj[mask] #\u8fd9\u6837\u5c31\u53ef\u4ee5\u9009\u62e9\u51fa\u6765\u4e86 new_obj = obj . drop ( 'a' ) # \u5220\u9664\u7d22\u5f15a\u8fd9\u4e00\u503c new_obj = obj . drop ([ 'a' , 'b' ]) # \u5220\u9664\u591a\u503c obj [ obj > 0 ] # \u901a\u8fc7\u503c\u8fdb\u884c\u7b5b\u9009 obj * 2 # \u5bf9\u503c\u8fdb\u884c\u589e\u500d np . exp ( obj ) # \u53ef\u4ee5\u5bf9Series\u8fdb\u884c\u64cd\u4f5c # \u5224\u65ad\u7f3a\u5931\u6570\u636e,\u6839\u636evalue\u503c\u8fdb\u884c\u5224\u65ad pd . isnull ( obj ) == obj . isnull () # return (index,bools) pd . notnull ( obj ) # \u6392\u5e8f obj . sort_index () # \u6309\u7167\u7d22\u5f15\u6392\u5e8f obj . sort_values () # \u6309\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u6240\u6709\u7f3a\u5931\u503c\u90fd\u4f1a\u88ab\u6392\u5e8f\u5230Series\u7684\u5c3e\u90e8 # \u5176\u4ed6\u5e38\u7528\u65b9\u6cd5 obj . str . lower () obj . replace ([ 4 , 7 ], np . nan ) obj . replace ([ 4 , 7 ],[ 999 , 1000 ]) obj . replace ({ 4 : 999 , 7 : 1000 }) obj . rename ( index = { 'a' : 'aa' }, inplace = True ) DataFrame:\u4e8c\u7ef4 import pandas as pd from pandas import Series , DataFrame # DataFrame,\u521b\u5efa\u53ef\u4ee5\u4f20\u5165:dict,\u9ed8\u8ba4\u7d22\u5f15\u4ece0~N-1,\u53ef\u7528index\u6307\u5b9a\u7d22\u5f15\u540d,columns\u6307\u5b9a\u5217\u540d # dict{key:list}\u521b\u5efa frame = pd . DataFrame ({ 'colN1' :[ 1 , 2 , 3 , 4 ], # \u5217\u540d:values 'colN2' :[ 1 , 2 , 3 , 4 ], 'colN3' :[ 1 , 2 , 3 , 4 ],}, index = [ 'index1' , 'index2' , 'index3' , 'index4' ], # \u6307\u5b9a\u7d22\u5f15\u540d columns = [ 'colN2' , 'colN3' , 'colN1' ]) # \u6307\u5b9a\u5217\u540d\u6392\u5217\u987a\u5e8f # dict{key:dict} # \u521b\u5efa frame1 = pd . DataFrame ({ 'colN1' :{ 'index1' : 1 , 'index2' : 1 }, 'colN2' :{ 'index1' : 2 , 'index2' : 2 }}) # dict{key:Series} frame2 = pd . DataFrame ({ 'colN1' : frame [ 'colN1' ], 'colN2' : frame [ 'colN2' ]}) # \u91cd\u5efa\u7d22\u5f15 frame . reindex ( index = [ ... ], columns = [ ... ]) # \u66f4\u591a\u4eba\u7528\u4e0b\u9762\u65b9\u5f0f\u66f4\u6539\u6807\u7b7e\u7d22\u5f15 frame . loc [[ indexs ],[ columns ]] # \u5c5e\u6027 frame . head () # \u524d\u4e94\u884c frame . index # get\u6240\u6709\u7d22\u5f15\uff0c\u6ce8\u610f:\u7d22\u5f15\u5bf9\u8c61\u662f\u65e0\u6cd5\u4fee\u6539\u7684\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u5b89\u5168\u6027\u3002 frame . index . name # get/set\u7d22\u5f15\u540d frame . columns # get/set\u6240\u6709\u5217 frame . columns . name # get/set\u5217\u540d frame . values # \u83b7\u53d6\u6240\u6709\u503c(return:\u4e8c\u7ef4array) frame . T # \u884c\u5217\u8f6c\u6362 # \u83b7\u53d6\u548c\u64cd\u4f5c\u6570\u503c frame [ 'colN1' ] == frame . colN1 # \u9009\u62e9\u67d0\u5217,\u6ce8\u610f\u662f\u5217\u540d frame . loc [ 'index1' ] # \u9009\u62e9\u67d0\u884c\uff0c\u884c\u7684\u9009\u62e9\u6bd4\u8f83\u590d\u6742 frame . loc [[ 'index1' , 'index2' ]] # \u9009\u62e9\u591a\u884c\uff0c\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5207\u7247 frame [: 2 ] # \u884c\u9009\u62e9,\u5207\u7247\u4f7f\u7528\uff0c\u548cnumpy\u6570\u7ec4\u7c7b\u4f3c\uff0c\u8fd9\u4e2a\u6307\u524d\u4e24\u884c # \u5f3a\u5927\u7684\u6570\u636e\u9009\u62e9\u65b9\u6cd5iloc,\u4f7f\u7528iloc\u540e\u5c31\u80fd\u50cfnumpy\u4e00\u6837\u4e3a\u6240\u6b32\u4e3a frame . iloc [ 2 ] # [index] frame . iloc [ 2 ,[ 3 , 0 , 1 ]] #[index,[columns]] frame . iloc [[ 1 , 2 ],[ 3 , 0 , 1 ]] # [[index],[columns]] frame . iloc [:,: 3 ][ frame [ 'colN1' ] > 1 ] frame [ frame [ 'colN1' ] > 1 ] # \u6309\u503c\u7b5b\u9009 frame [ 'colN1' ][: 2 ] # \u9009\u62e9\u8fd9\u5217\u524d\u4e24\u884c\u5143\u7d20 frame [ 'colNull' ] = 5 # \u65b0\u5efa\u67d0\u5217\uff0c\u5e76\u8d4b\u503c\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5e7f\u64ad\u7684 frame [ 'colNull' ] = np . arange ( 4 ) # \u4fee\u6539\u67d0\u5217\u503c frame [ 'colNull' ] = pd . Series ([ 5 , 5 , 5 , 5 ], index = [ 'index1' , 'index2' , 'index3' , 'index4' ]) del frame [ 'colNull' ] # \u5220\u9664\u67d0\u5217 new_frame = frame . drop ([ 'index1' , 'index2' ]) # \u5220\u9664\u4e24\u884c,\u9ed8\u8ba4axis=0,\u7bad\u5934\u7531\u4e0a\u5f80\u4e0b\uff0c\u6307\u884c:\u6309\u884c\u5904\u7406 new_fame = frame . drop ([ 'colN2' ], axis = 1 ) # \u5220\u9664\u67d0\u5217\uff0caxis=1,\u7bad\u5934\u7531\u5de6\u5f80\u53f3\uff0c\u6307\u5217:\u6309\u5217\u5904\u7406 frame . drop ( ... , inplace = True ) # \u63a8\u8350\u4f7f\u7528\uff0c\u76f4\u63a5\u5728\u539f\u5bf9\u8c61\u4e2d\u4fee\u6539 # \u8be6\u89e3\u7d22\u5f15\u5bf9\u8c61,\u6ce8\u610f:\u7d22\u5f15\u5bf9\u8c61\u91cc\u9762\u7684\u503c\u662f\u53ef\u4ee5\u91cd\u590d\u7684 index1 = pd . Index ([ 'foo' , 'foo' , 'bar' ]) index2 = index1 . append ( pd . Index ([ 'bar' , 'test' ])) # \u6dfb\u52a0\u989d\u5916\u7d22\u5f15\u5230\u539f\u7d22\u5f15\uff0c\u8fd4\u56de\u65b0\u7d22\u5f15 index2 . difference ( index1 ) # \u5dee\u96c6 index2 . intersection ( index1 ) # \u4ea4\u96c6 index2 . union ( index1 ) # \u5e76\u96c6 pd . Index ([ 'test' ]) . isin ( index1 ) index1 . delete ( index ) # \u8fd4\u56de\u5220\u9664\u7684\u503c\uff0c\u6ce8\u610f\u539f\u5148\u7684\u7d22\u5f15\u6ca1\u6709\u5220\u9664 # \u586b\u5145 frame1 + frame2 # \u7d22\u5f15\u548c\u5217\u540d\u4f1a\u81ea\u52a8\u5bf9\u5e94\uff0c\u6ca1\u6709\u5bf9\u5e94\u4e0a\u7684\u4f1a\u7528NaN\u8fdb\u884c\u586b\u5145 # \u89e3\u51b3\u65b9\u6848 frame1 . add ( frame2 , fill_value = 0 ) # \u52a0\u6cd5 frame1 . sub ( frame2 , fill_value = 0 ) # \u51cf\u6cd5 frame1 . div ( frame2 , fill_value = 0 ) # \u9664\u6cd5 frame1 . floordiv ( frame2 , fill_value = 0 ) # \u6574\u9664 frame1 . mul ( frame2 , fill_value = 0 ) # \u4e58\u6cd5 frame1 . pow ( frame2 , fill_value = 0 ) # \u5e42\u6b21\u65b9 # apply\u51fd\u6570:\u628a\u67d0\u4e00\u51fd\u6570\u5e94\u7528\u5230\u4e00\u884c\u6216\u4e00\u5217\u7684\u4e00\u7ef4\u6570\u7ec4\u4e0a frame . apply ( lambda x : x . max () - x . min ()) # \u9ed8\u8ba4axis=0,\u6309\u7167\u884c\u8ba1\u7b97 frame . apply ( lambda x : x . max () - x . min (), axis = 1 ) # \u6309\u7167\u5217\u8ba1\u7b97 # applymap\u51fd\u6570:\u662f\u9010\u5143\u7d20\u8ba1\u7b97\u7684\u3002\u6ce8\u610f:Series\u91cc\u9762\u4e5f\u6709\u7c7b\u4f3c\u7684\u51fd\u6570:map() frame . applymap ( lambda x : f ' { x : .2f } ' ) # \u6240\u6709\u5143\u7d20\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 # \u6392\u5e8f frame . sort_index () # \u9ed8\u8ba4axi=0 frame . sort_index ( axis = 1 ) frame . sort_index ( axis = 1 , ascending = False ) # \u964d\u5e8f frame . sort_values ( by = [ 'col1' , 'col2' ]) # \u6309\u7167\u67d0\u5217/\u591a\u5217\u8fdb\u884c\u6392\u5e8f # \u7edf\u8ba1:NaN\u9ed8\u8ba4\u662f\u88ab\u6392\u9664\u7684,\u53ef\u4ee5\u4f7f\u7528skipna=False,\u6765\u4fdd\u7559NaN frame . sum () / frame . sum ( axis = xx ) frame . mean () / frame . mean ( axis = xx ,) frame . idxmax ( axis = xx ) / frame . idxmin ( axis = xx ) # \u7edf\u8ba1\u6700\u5c0f\u503c\u6216\u6700\u5927\u503c\u7684\u7d22\u5f15\u503c frame . cumsum () # \u7d2f\u52a0\u578b frame . describe () # \u6c47\u603b\u7edf\u8ba1\uff0c\u5e38\u7528 # \u7f3a\u5931\u503c\u5220\u9664 obj . dropna () == obj [ obj . notnull ()] # \u76f4\u63a5\u5220\u9664\u503c\u662fna\u7684\u884c frame . dropna ( axis = xx ) # \u4e25\u683c:\u542b\u6709NaN\u7684\u884c\u5c31\u5220\u9664,axis=1,\u5c31\u662f\u5220\u9664\u5217 frame . dropna ( how = 'all' ) # \u5bbd\u677e:\u8fd9\u884c\u6240\u6709\u503c\u5747\u4e3aNaN\u624d\u5220\u9664 frame . dropna ( thresh = 2 ) # \u7b5b\u9009\u4e00\u4e0b:\u5220\u9664>=thresh\u4e2aNaN\u7684\u884c # \u8865\u5168\u7f3a\u5931\u503c frame . fillna ( 0 , inplace = True ) # \u5168\u90e8\u8865\u5168\u4e3a0,inplace\u64cd\u4f5c frame . fillna ({ \"colN1\" : 0 , \"colN2\" : 1 }) # \u4e3a\u4e0d\u540c\u5217\u8865\u5168\u4e3a\u4e0d\u540c\u7684\u503c frame . fillna ( method = 'ffill' ) # \u7528\u4e0a\u9762\u7684\u503c\u4ee3\u66ff\u81ea\u5df1\u7684NaN frame . fillna ( method = 'ffill' , limit = 2 ) # \u7528\u524d\u5411\u6216\u540e\u5411\u586b\u5145\u65f6\u6700\u5927\u7684\u586b\u5145\u8303\u56f4 frame . fillna ( frame . mean ()) # \u4f7f\u7528Series\u7684\u5e73\u5747\u503c\u8fdb\u884c\u8865\u5145 # \u5220\u9664\u91cd\u590d\u503c:\u9ed8\u8ba4\u4fdd\u7559\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u60f3\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u503c:keep='last' frame . duplicated () # return:\u6bcf\u884cbool,\u53cd\u5e94\u662f\u5426\u542b\u6709\u91cd\u590d\u884c frame . drop_duplicates () # \u5220\u9664\u91cd\u590d\u884c\uff0c\u9ed8\u8ba4\u662f:\u4e24\u884c\u6240\u6709\u5217\u7684\u503c\u90fd\u91cd\u590d\u624d\u7b97\u91cd\u590d frame . drop_duplicates ([ 'colN1' ]) # \u53ea\u8981colN1\u5217\u7684\u503c\u91cd\u590d\u5c31\u5220\u9664 # \u5176\u4ed6\u91cd\u7528\u65b9\u6cd5 # \u91cd\u547d\u540d\u65b9\u6cd5 frame . rename ( index = { 'index1' : 'new_index1' }, columns = { 'colN1' : 'new_colN1' }, inplace = True ) # \u968f\u673a\u6392\u5217frame\u7684\u884c\u987a\u5e8f frame . take ( np . random . permutation ( frame . shape [ 0 ])) Matplotlib \u00b6 import matplotlib.pyplot as plt # \u666e\u901a\u7528\u6cd5:\u591a\u4e2a\u5b50\u56fe\u4f5c\u753b fig = plt . figure ( figsize = ( 10 , 8 )) # \u753b\u5e03 ax1 = fig . add_subplot ( 2 , 2 , 1 ) # \u628a\u753b\u5e03\u5e73\u5747\u5206\u4e3a4\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u753b\u7b14 ax1 . plt ( .. ) # \u5f00\u59cb\u4f5c\u753b # \u9ad8\u7ea7\u7528\u6cd5:\u591a\u4e2a\u5b50\u56fe\u4f5c\u753b fig , axes = plt . subplots ( 2 , 2 , sharex = True , sharey = True , figsize = ( 8 , 6 )) # 2\u884c2\u5217\u4e2a\u5b50\u56fe axes [ 0 , 0 ] # \u9009\u53d6\u7b2c\u4e00\u4e2a\u5b50\u56fe # \u5b50\u56fe\u7684\u65b9\u6cd5 plt . subplots ( nrows = 1 , # \u5b50\u56fe\u884c\u6570 ncols = 1 , # \u5b50\u56fe\u5217\u6570 sharex = False , # \u6240\u6709\u5b50\u56fe\u4f7f\u7528\u76f8\u540c\u7684x\u8f74\u523b\u5ea6 sharey = False , # \u6240\u6709\u5b50\u56fe\u4f7f\u7528\u76f8\u540cy\u8f74\u523b\u5ea6 squeeze = True , subplot_kw = None , gridspec_kw = None , ** fig_kw , # \u989d\u5916\u53c2\u6570:figsize=(10,8) ) # \u8c03\u6574\u5b50\u56fe\u5468\u56f4\u95f4\u8ddd plt . subplots_adjust ( left = None , bottom = None , right = None , top = None , wspace = None , # wspace=0 hspace = None , # hspace=0,\u8fd9\u4e24\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a0\u540e\uff0c\u6240\u6709\u5b50\u56fe\u90fd\u7d27\u90bb\u9760\u8fd1 ) # 'g--'\u67e5\u770b axes [ 0 , 0 ] . plt ( x , y , 'g--' ) == plt . plot ( x , y , linestyle = '--' , color = 'g' ) # \u53ef\u7528help(plt.plot)\u67e5\u770b # \u4e0b\u9762\u7528\u4e3e\u4f8b\u4f8b\u5b50\u6765\u8fdb\u884c\u89e3\u91ca import numpy as np import matplotlib.pyplot as plt # \u521b\u5efa\u753b\u7b14\u548c\u5b50\u56fe fig , axes = plt . subplots ( 2 , 2 , sharex = True , sharey = True , figsize = ( 8 , 6 )) axes [ 0 , 0 ] . plot ( np . arange ( 0 , 5 ), np . arange ( 0 , 5 ), 'ko--' , label = 'line' ) axes [ 0 , 0 ] . plot ( np . random . randn ( 80 ), 'g--' , drawstyle = 'steps-post' , label = 'step' ) axes [ 0 , 0 ] . set_xticks ([ 0 , 40 , 80 ]) #\u8868\u793a\u5728\u6570\u636e\u8303\u56f4\u5185\u8bbe\u5b9a\u523b\u5ea6\u7684\u4f4d\u7f6e # \u4e3ax\u523b\u5ea6\u8bbe\u7f6elabel axes [ 0 , 0 ] . set_xticklabels ([ 'one' , 'two' , 'three' ], rotation = 30 , fontsize = 'small' ) axes [ 0 , 0 ] . set_title ( 'line' ) # \u8bbe\u7f6e\u540d\u79f0 axes [ 0 , 0 ] . set_xlabel ( \"x-line\" ) # \u8bbe\u7f6ex\u8f74\u540d\u79f0 # \u7b49\u4ef7\u4e8e props = { \"title\" : 'line' , 'xlabel' : 'x-line' } axes [ 0 , 0 ] . set ( ** props ) # \u6dfb\u52a0\u6ce8\u91ca\u548c\u6587\u672c:\u5750\u6807(x,y),test/arrow/annote axes [ 0 , 0 ] . text ( 4 , 3 , 'This is a line' ) # \u6587\u672c\u6ce8\u91ca axes [ 0 , 0 ] . legend ( loc = 'best' ) # \u663e\u793alabel # plt.subplots_adjust(wspace=0,hspace=0) # \u8c03\u6574\u5b50\u56fe\u4e4b\u95f4\u7684\u95f4\u8ddd plt . savefig ( 'save.jpg' , dpi = 400 ) plt . show ()","title":"PD+PLT\u7b80\u6d01\u7b14\u8bb0"},{"location":"pandas%E3%80%81matplotlib%E7%AE%80%E6%B4%81%E7%AC%94%E8%AE%B0/#pandas","text":"Series:\u4e00\u7ef4 import pandas as pd from pandas import Series , DataFrame # Series,\u521b\u5efa\u53ef\u4ee5\u4f20\u5165:list,dict,\u9ed8\u8ba4\u7d22\u5f15\u4ece0~N-1\uff0c\u53ef\u7528index\u6307\u5b9a\u7d22\u5f15\u540d obj = pd . Series ([ 4 , 7 , - 5 , 3 ]) # \u666e\u901a\u521b\u5efa:(\u7d22\u5f15,\u503c)\u96c6\u5408 obj = pd . Series ([ 4 , 7 , - 5 , 3 ], index = [ 'd' , 'b' , 'a' , 'c' ]) # \u6307\u5b9a\u7d22\u5f15 obj1 = pd . Series ({ 'a' : 1 , 'b' : 2 , 'c' : 3 }) # index:a,b,c values:1,2,3 obj1 = pd . Series ({ 'a' : 1 , 'b' : 2 , 'c' : 3 }, index = [ 'c' , 'b' , 'a' ]) # \u4f7f\u7528index\u6307\u5b9a\u987a\u5e8f obj2 = obj1 . reindex ([ 'b' , 'c' , 'a' ]) # \u91cd\u5efa\u7d22\u5f15 # \u91cd\u5efa\u7d22\u5f15\u9ad8\u7ea7\u7528\u6cd5 obj3 = pd . Series ([ 'blue' , 'purple' , 'yellow' ], index = [ 0 , 2 , 4 ]) obj3 . reindex ( range ( 6 ), method = 'ffill' ) # ffill\u662f\u91cd\u5efa\u7d22\u5f15\u65f6\u5411\u524d\u63d2\u503c\uff0c\u590d\u5236\u524d\u65b9\u503c\u5f53\u505a\u5df1\u65b9\u503c obj + obj1 # Series\u7684\u6570\u5b66\u64cd\u4f5c\u4f1a\u6839\u636e\u7d22\u5f15\u81ea\u52a8\u5bf9\u9f50\uff0c\u6709\u5171\u540c\u7d22\u5f15\u7684\u6267\u884c\u6570\u5b66\u8fd0\u7b97\uff0c\u65e0\u7684value=NaN # \u5c5e\u6027+\u65b9\u6cd5 obj . index # get/set\u6240\u6709\u7d22\u5f15 obj . values # \u83b7\u53d6\u6240\u6709\u503c obj . index . name # get/set\u7d22\u5f15\u540d,\u56e0\u4e3avalues\u8fd4\u56de\u7684\u662farray\u5bf9\u8c61\uff0c\u6240\u4ee5\u6ca1\u6709.name\u5c5e\u6027 obj . index . is_unique # \u5224\u65ad\u7d22\u5f15\u540d\u662f\u5426\u662f\u552f\u4e00\u7684\uff0c\u542b\u6709\u91cd\u590d\u5417 obj . value_counts () # \u5e38\u7528:\u8fd4\u56de\u6bcf\u4e2avalue\u51fa\u73b0\u7684\u6b21\u6570(value:times) pd . value_counts ( obj . values , sort = False ) # \u66f4\u52a0\u5e38\u7528 uniques = obj . unique () # \u5e38\u7528:\u7c7b\u4f3cset() obj [ 'd' ] == obj [ 0 ] # \u83b7\u53d6\u5355\u4e2a\u503c\uff0c\u7d22\u5f15\u662f\u2018d\u2019\u7684\u503c obj [[ 'b' , 'a' , 'c' ]] # \u83b7\u53d6\u90e8\u5206\u503c obj [ 2 : 4 ] # \u867d\u7136\u7d22\u5f15\u6539\u6210\u4e86a,b,c,d,\u4f46\u662f\u7167\u6837\u53ef\u4ee5\u4f7f\u7528\u6574\u6570\u7d22\u5f15\u83b7\u53d6\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5207\u7247 obj [ 'b' : 'c' ] # \u5f53\u4f7f\u7528\u7d22\u5f15\u5207\u7247\u65f6\uff0c\u6ce8\u610f:\u8fd9\u4e2a\u5207\u7247\u5305\u542b\u7740\u5c3e\u90e8\uff0c\u548c\u6570\u7ec4\u5207\u7247\u4e0d\u540c # \u6574\u6570\u7d22\u5f15\u548c\u540d\u79f0\u7d22\u5f15\u50bb\u50bb\u5206\u4e0d\u6e05\uff0c\u4ee5\u540e\u89c4\u5b9a\uff0c\u60f3\u8981\u5207\u7247\u7edf\u4e00\u4f7f\u7528iloc\u51fd\u6570\uff0c\u8fd9\u6837\u5c31\u80fd\u50cfnumpy\u4e00\u6837\u9a9a\u64cd\u4f5c\u4e86 obj . iloc [:] # \u7b49\u4ef7\u4e8e\u6574\u6570\u7d22\u5f15\uff0c\u4e0d\u8fc7\u4ee5\u540e\u53d6\u503c\u7edf\u4e00\u52a0\u4e0ailoc 'b' in obj # True mask = obj . isin ([ 'b' , 'c' ]) # \u8fd4\u56de\u4e00\u4e2amask\u6a21\u677f\uff0cobj[mask] #\u8fd9\u6837\u5c31\u53ef\u4ee5\u9009\u62e9\u51fa\u6765\u4e86 new_obj = obj . drop ( 'a' ) # \u5220\u9664\u7d22\u5f15a\u8fd9\u4e00\u503c new_obj = obj . drop ([ 'a' , 'b' ]) # \u5220\u9664\u591a\u503c obj [ obj > 0 ] # \u901a\u8fc7\u503c\u8fdb\u884c\u7b5b\u9009 obj * 2 # \u5bf9\u503c\u8fdb\u884c\u589e\u500d np . exp ( obj ) # \u53ef\u4ee5\u5bf9Series\u8fdb\u884c\u64cd\u4f5c # \u5224\u65ad\u7f3a\u5931\u6570\u636e,\u6839\u636evalue\u503c\u8fdb\u884c\u5224\u65ad pd . isnull ( obj ) == obj . isnull () # return (index,bools) pd . notnull ( obj ) # \u6392\u5e8f obj . sort_index () # \u6309\u7167\u7d22\u5f15\u6392\u5e8f obj . sort_values () # \u6309\u503c\u8fdb\u884c\u6392\u5e8f\uff0c\u6240\u6709\u7f3a\u5931\u503c\u90fd\u4f1a\u88ab\u6392\u5e8f\u5230Series\u7684\u5c3e\u90e8 # \u5176\u4ed6\u5e38\u7528\u65b9\u6cd5 obj . str . lower () obj . replace ([ 4 , 7 ], np . nan ) obj . replace ([ 4 , 7 ],[ 999 , 1000 ]) obj . replace ({ 4 : 999 , 7 : 1000 }) obj . rename ( index = { 'a' : 'aa' }, inplace = True ) DataFrame:\u4e8c\u7ef4 import pandas as pd from pandas import Series , DataFrame # DataFrame,\u521b\u5efa\u53ef\u4ee5\u4f20\u5165:dict,\u9ed8\u8ba4\u7d22\u5f15\u4ece0~N-1,\u53ef\u7528index\u6307\u5b9a\u7d22\u5f15\u540d,columns\u6307\u5b9a\u5217\u540d # dict{key:list}\u521b\u5efa frame = pd . DataFrame ({ 'colN1' :[ 1 , 2 , 3 , 4 ], # \u5217\u540d:values 'colN2' :[ 1 , 2 , 3 , 4 ], 'colN3' :[ 1 , 2 , 3 , 4 ],}, index = [ 'index1' , 'index2' , 'index3' , 'index4' ], # \u6307\u5b9a\u7d22\u5f15\u540d columns = [ 'colN2' , 'colN3' , 'colN1' ]) # \u6307\u5b9a\u5217\u540d\u6392\u5217\u987a\u5e8f # dict{key:dict} # \u521b\u5efa frame1 = pd . DataFrame ({ 'colN1' :{ 'index1' : 1 , 'index2' : 1 }, 'colN2' :{ 'index1' : 2 , 'index2' : 2 }}) # dict{key:Series} frame2 = pd . DataFrame ({ 'colN1' : frame [ 'colN1' ], 'colN2' : frame [ 'colN2' ]}) # \u91cd\u5efa\u7d22\u5f15 frame . reindex ( index = [ ... ], columns = [ ... ]) # \u66f4\u591a\u4eba\u7528\u4e0b\u9762\u65b9\u5f0f\u66f4\u6539\u6807\u7b7e\u7d22\u5f15 frame . loc [[ indexs ],[ columns ]] # \u5c5e\u6027 frame . head () # \u524d\u4e94\u884c frame . index # get\u6240\u6709\u7d22\u5f15\uff0c\u6ce8\u610f:\u7d22\u5f15\u5bf9\u8c61\u662f\u65e0\u6cd5\u4fee\u6539\u7684\uff0c\u8fd9\u6837\u4fdd\u8bc1\u4e86\u5b89\u5168\u6027\u3002 frame . index . name # get/set\u7d22\u5f15\u540d frame . columns # get/set\u6240\u6709\u5217 frame . columns . name # get/set\u5217\u540d frame . values # \u83b7\u53d6\u6240\u6709\u503c(return:\u4e8c\u7ef4array) frame . T # \u884c\u5217\u8f6c\u6362 # \u83b7\u53d6\u548c\u64cd\u4f5c\u6570\u503c frame [ 'colN1' ] == frame . colN1 # \u9009\u62e9\u67d0\u5217,\u6ce8\u610f\u662f\u5217\u540d frame . loc [ 'index1' ] # \u9009\u62e9\u67d0\u884c\uff0c\u884c\u7684\u9009\u62e9\u6bd4\u8f83\u590d\u6742 frame . loc [[ 'index1' , 'index2' ]] # \u9009\u62e9\u591a\u884c\uff0c\u8fd8\u6709\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\uff0c\u5207\u7247 frame [: 2 ] # \u884c\u9009\u62e9,\u5207\u7247\u4f7f\u7528\uff0c\u548cnumpy\u6570\u7ec4\u7c7b\u4f3c\uff0c\u8fd9\u4e2a\u6307\u524d\u4e24\u884c # \u5f3a\u5927\u7684\u6570\u636e\u9009\u62e9\u65b9\u6cd5iloc,\u4f7f\u7528iloc\u540e\u5c31\u80fd\u50cfnumpy\u4e00\u6837\u4e3a\u6240\u6b32\u4e3a frame . iloc [ 2 ] # [index] frame . iloc [ 2 ,[ 3 , 0 , 1 ]] #[index,[columns]] frame . iloc [[ 1 , 2 ],[ 3 , 0 , 1 ]] # [[index],[columns]] frame . iloc [:,: 3 ][ frame [ 'colN1' ] > 1 ] frame [ frame [ 'colN1' ] > 1 ] # \u6309\u503c\u7b5b\u9009 frame [ 'colN1' ][: 2 ] # \u9009\u62e9\u8fd9\u5217\u524d\u4e24\u884c\u5143\u7d20 frame [ 'colNull' ] = 5 # \u65b0\u5efa\u67d0\u5217\uff0c\u5e76\u8d4b\u503c\uff0c\u8fd9\u91cc\u53ef\u4ee5\u5e7f\u64ad\u7684 frame [ 'colNull' ] = np . arange ( 4 ) # \u4fee\u6539\u67d0\u5217\u503c frame [ 'colNull' ] = pd . Series ([ 5 , 5 , 5 , 5 ], index = [ 'index1' , 'index2' , 'index3' , 'index4' ]) del frame [ 'colNull' ] # \u5220\u9664\u67d0\u5217 new_frame = frame . drop ([ 'index1' , 'index2' ]) # \u5220\u9664\u4e24\u884c,\u9ed8\u8ba4axis=0,\u7bad\u5934\u7531\u4e0a\u5f80\u4e0b\uff0c\u6307\u884c:\u6309\u884c\u5904\u7406 new_fame = frame . drop ([ 'colN2' ], axis = 1 ) # \u5220\u9664\u67d0\u5217\uff0caxis=1,\u7bad\u5934\u7531\u5de6\u5f80\u53f3\uff0c\u6307\u5217:\u6309\u5217\u5904\u7406 frame . drop ( ... , inplace = True ) # \u63a8\u8350\u4f7f\u7528\uff0c\u76f4\u63a5\u5728\u539f\u5bf9\u8c61\u4e2d\u4fee\u6539 # \u8be6\u89e3\u7d22\u5f15\u5bf9\u8c61,\u6ce8\u610f:\u7d22\u5f15\u5bf9\u8c61\u91cc\u9762\u7684\u503c\u662f\u53ef\u4ee5\u91cd\u590d\u7684 index1 = pd . Index ([ 'foo' , 'foo' , 'bar' ]) index2 = index1 . append ( pd . Index ([ 'bar' , 'test' ])) # \u6dfb\u52a0\u989d\u5916\u7d22\u5f15\u5230\u539f\u7d22\u5f15\uff0c\u8fd4\u56de\u65b0\u7d22\u5f15 index2 . difference ( index1 ) # \u5dee\u96c6 index2 . intersection ( index1 ) # \u4ea4\u96c6 index2 . union ( index1 ) # \u5e76\u96c6 pd . Index ([ 'test' ]) . isin ( index1 ) index1 . delete ( index ) # \u8fd4\u56de\u5220\u9664\u7684\u503c\uff0c\u6ce8\u610f\u539f\u5148\u7684\u7d22\u5f15\u6ca1\u6709\u5220\u9664 # \u586b\u5145 frame1 + frame2 # \u7d22\u5f15\u548c\u5217\u540d\u4f1a\u81ea\u52a8\u5bf9\u5e94\uff0c\u6ca1\u6709\u5bf9\u5e94\u4e0a\u7684\u4f1a\u7528NaN\u8fdb\u884c\u586b\u5145 # \u89e3\u51b3\u65b9\u6848 frame1 . add ( frame2 , fill_value = 0 ) # \u52a0\u6cd5 frame1 . sub ( frame2 , fill_value = 0 ) # \u51cf\u6cd5 frame1 . div ( frame2 , fill_value = 0 ) # \u9664\u6cd5 frame1 . floordiv ( frame2 , fill_value = 0 ) # \u6574\u9664 frame1 . mul ( frame2 , fill_value = 0 ) # \u4e58\u6cd5 frame1 . pow ( frame2 , fill_value = 0 ) # \u5e42\u6b21\u65b9 # apply\u51fd\u6570:\u628a\u67d0\u4e00\u51fd\u6570\u5e94\u7528\u5230\u4e00\u884c\u6216\u4e00\u5217\u7684\u4e00\u7ef4\u6570\u7ec4\u4e0a frame . apply ( lambda x : x . max () - x . min ()) # \u9ed8\u8ba4axis=0,\u6309\u7167\u884c\u8ba1\u7b97 frame . apply ( lambda x : x . max () - x . min (), axis = 1 ) # \u6309\u7167\u5217\u8ba1\u7b97 # applymap\u51fd\u6570:\u662f\u9010\u5143\u7d20\u8ba1\u7b97\u7684\u3002\u6ce8\u610f:Series\u91cc\u9762\u4e5f\u6709\u7c7b\u4f3c\u7684\u51fd\u6570:map() frame . applymap ( lambda x : f ' { x : .2f } ' ) # \u6240\u6709\u5143\u7d20\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570 # \u6392\u5e8f frame . sort_index () # \u9ed8\u8ba4axi=0 frame . sort_index ( axis = 1 ) frame . sort_index ( axis = 1 , ascending = False ) # \u964d\u5e8f frame . sort_values ( by = [ 'col1' , 'col2' ]) # \u6309\u7167\u67d0\u5217/\u591a\u5217\u8fdb\u884c\u6392\u5e8f # \u7edf\u8ba1:NaN\u9ed8\u8ba4\u662f\u88ab\u6392\u9664\u7684,\u53ef\u4ee5\u4f7f\u7528skipna=False,\u6765\u4fdd\u7559NaN frame . sum () / frame . sum ( axis = xx ) frame . mean () / frame . mean ( axis = xx ,) frame . idxmax ( axis = xx ) / frame . idxmin ( axis = xx ) # \u7edf\u8ba1\u6700\u5c0f\u503c\u6216\u6700\u5927\u503c\u7684\u7d22\u5f15\u503c frame . cumsum () # \u7d2f\u52a0\u578b frame . describe () # \u6c47\u603b\u7edf\u8ba1\uff0c\u5e38\u7528 # \u7f3a\u5931\u503c\u5220\u9664 obj . dropna () == obj [ obj . notnull ()] # \u76f4\u63a5\u5220\u9664\u503c\u662fna\u7684\u884c frame . dropna ( axis = xx ) # \u4e25\u683c:\u542b\u6709NaN\u7684\u884c\u5c31\u5220\u9664,axis=1,\u5c31\u662f\u5220\u9664\u5217 frame . dropna ( how = 'all' ) # \u5bbd\u677e:\u8fd9\u884c\u6240\u6709\u503c\u5747\u4e3aNaN\u624d\u5220\u9664 frame . dropna ( thresh = 2 ) # \u7b5b\u9009\u4e00\u4e0b:\u5220\u9664>=thresh\u4e2aNaN\u7684\u884c # \u8865\u5168\u7f3a\u5931\u503c frame . fillna ( 0 , inplace = True ) # \u5168\u90e8\u8865\u5168\u4e3a0,inplace\u64cd\u4f5c frame . fillna ({ \"colN1\" : 0 , \"colN2\" : 1 }) # \u4e3a\u4e0d\u540c\u5217\u8865\u5168\u4e3a\u4e0d\u540c\u7684\u503c frame . fillna ( method = 'ffill' ) # \u7528\u4e0a\u9762\u7684\u503c\u4ee3\u66ff\u81ea\u5df1\u7684NaN frame . fillna ( method = 'ffill' , limit = 2 ) # \u7528\u524d\u5411\u6216\u540e\u5411\u586b\u5145\u65f6\u6700\u5927\u7684\u586b\u5145\u8303\u56f4 frame . fillna ( frame . mean ()) # \u4f7f\u7528Series\u7684\u5e73\u5747\u503c\u8fdb\u884c\u8865\u5145 # \u5220\u9664\u91cd\u590d\u503c:\u9ed8\u8ba4\u4fdd\u7559\u7684\u7b2c\u4e00\u4e2a\u503c\uff0c\u5982\u679c\u60f3\u4fdd\u7559\u6700\u540e\u4e00\u4e2a\u503c:keep='last' frame . duplicated () # return:\u6bcf\u884cbool,\u53cd\u5e94\u662f\u5426\u542b\u6709\u91cd\u590d\u884c frame . drop_duplicates () # \u5220\u9664\u91cd\u590d\u884c\uff0c\u9ed8\u8ba4\u662f:\u4e24\u884c\u6240\u6709\u5217\u7684\u503c\u90fd\u91cd\u590d\u624d\u7b97\u91cd\u590d frame . drop_duplicates ([ 'colN1' ]) # \u53ea\u8981colN1\u5217\u7684\u503c\u91cd\u590d\u5c31\u5220\u9664 # \u5176\u4ed6\u91cd\u7528\u65b9\u6cd5 # \u91cd\u547d\u540d\u65b9\u6cd5 frame . rename ( index = { 'index1' : 'new_index1' }, columns = { 'colN1' : 'new_colN1' }, inplace = True ) # \u968f\u673a\u6392\u5217frame\u7684\u884c\u987a\u5e8f frame . take ( np . random . permutation ( frame . shape [ 0 ]))","title":"Pandas"},{"location":"pandas%E3%80%81matplotlib%E7%AE%80%E6%B4%81%E7%AC%94%E8%AE%B0/#matplotlib","text":"import matplotlib.pyplot as plt # \u666e\u901a\u7528\u6cd5:\u591a\u4e2a\u5b50\u56fe\u4f5c\u753b fig = plt . figure ( figsize = ( 10 , 8 )) # \u753b\u5e03 ax1 = fig . add_subplot ( 2 , 2 , 1 ) # \u628a\u753b\u5e03\u5e73\u5747\u5206\u4e3a4\u90e8\u5206\uff0c\u7b2c\u4e00\u4e2a\u753b\u7b14 ax1 . plt ( .. ) # \u5f00\u59cb\u4f5c\u753b # \u9ad8\u7ea7\u7528\u6cd5:\u591a\u4e2a\u5b50\u56fe\u4f5c\u753b fig , axes = plt . subplots ( 2 , 2 , sharex = True , sharey = True , figsize = ( 8 , 6 )) # 2\u884c2\u5217\u4e2a\u5b50\u56fe axes [ 0 , 0 ] # \u9009\u53d6\u7b2c\u4e00\u4e2a\u5b50\u56fe # \u5b50\u56fe\u7684\u65b9\u6cd5 plt . subplots ( nrows = 1 , # \u5b50\u56fe\u884c\u6570 ncols = 1 , # \u5b50\u56fe\u5217\u6570 sharex = False , # \u6240\u6709\u5b50\u56fe\u4f7f\u7528\u76f8\u540c\u7684x\u8f74\u523b\u5ea6 sharey = False , # \u6240\u6709\u5b50\u56fe\u4f7f\u7528\u76f8\u540cy\u8f74\u523b\u5ea6 squeeze = True , subplot_kw = None , gridspec_kw = None , ** fig_kw , # \u989d\u5916\u53c2\u6570:figsize=(10,8) ) # \u8c03\u6574\u5b50\u56fe\u5468\u56f4\u95f4\u8ddd plt . subplots_adjust ( left = None , bottom = None , right = None , top = None , wspace = None , # wspace=0 hspace = None , # hspace=0,\u8fd9\u4e24\u4e2a\u53c2\u6570\u8bbe\u7f6e\u4e3a0\u540e\uff0c\u6240\u6709\u5b50\u56fe\u90fd\u7d27\u90bb\u9760\u8fd1 ) # 'g--'\u67e5\u770b axes [ 0 , 0 ] . plt ( x , y , 'g--' ) == plt . plot ( x , y , linestyle = '--' , color = 'g' ) # \u53ef\u7528help(plt.plot)\u67e5\u770b # \u4e0b\u9762\u7528\u4e3e\u4f8b\u4f8b\u5b50\u6765\u8fdb\u884c\u89e3\u91ca import numpy as np import matplotlib.pyplot as plt # \u521b\u5efa\u753b\u7b14\u548c\u5b50\u56fe fig , axes = plt . subplots ( 2 , 2 , sharex = True , sharey = True , figsize = ( 8 , 6 )) axes [ 0 , 0 ] . plot ( np . arange ( 0 , 5 ), np . arange ( 0 , 5 ), 'ko--' , label = 'line' ) axes [ 0 , 0 ] . plot ( np . random . randn ( 80 ), 'g--' , drawstyle = 'steps-post' , label = 'step' ) axes [ 0 , 0 ] . set_xticks ([ 0 , 40 , 80 ]) #\u8868\u793a\u5728\u6570\u636e\u8303\u56f4\u5185\u8bbe\u5b9a\u523b\u5ea6\u7684\u4f4d\u7f6e # \u4e3ax\u523b\u5ea6\u8bbe\u7f6elabel axes [ 0 , 0 ] . set_xticklabels ([ 'one' , 'two' , 'three' ], rotation = 30 , fontsize = 'small' ) axes [ 0 , 0 ] . set_title ( 'line' ) # \u8bbe\u7f6e\u540d\u79f0 axes [ 0 , 0 ] . set_xlabel ( \"x-line\" ) # \u8bbe\u7f6ex\u8f74\u540d\u79f0 # \u7b49\u4ef7\u4e8e props = { \"title\" : 'line' , 'xlabel' : 'x-line' } axes [ 0 , 0 ] . set ( ** props ) # \u6dfb\u52a0\u6ce8\u91ca\u548c\u6587\u672c:\u5750\u6807(x,y),test/arrow/annote axes [ 0 , 0 ] . text ( 4 , 3 , 'This is a line' ) # \u6587\u672c\u6ce8\u91ca axes [ 0 , 0 ] . legend ( loc = 'best' ) # \u663e\u793alabel # plt.subplots_adjust(wspace=0,hspace=0) # \u8c03\u6574\u5b50\u56fe\u4e4b\u95f4\u7684\u95f4\u8ddd plt . savefig ( 'save.jpg' , dpi = 400 ) plt . show ()","title":"Matplotlib"},{"location":"python%E5%88%B7%E9%A2%98/","text":"\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 \u5b57\u7b26\u4e32 \u00b6 \u6d4b\u8bd5\u51fd\u6570 s . endswith ( t ) #s\u4ee5\u5b57\u7b26\u4e32t\u7ed3\u5c3e\uff0c\u533a\u5206\u5927\u5c0f\u5199 s . startswith ( t ) #s\u4ee5\u5b57\u7b26\u4e32t\u5f00\u5934\uff0c\u533a\u5206\u5927\u5c0f\u5199 s . isalnum () #s\u53ea\u5305\u542b\u5b57\u7b26\u4e32\u6216\u6570\u5b57 s . isalpha () #s\u53ea\u5305\u542b\u5b57\u7b26\u4e32 s . isdigit () #s\u53ea\u5305\u542b\u6570\u5b57\u5b57\u7b26 s . isidentifier () #s\u662f\u5426\u5408\u6cd5\u6807\u8bc6\u7b26 s . islower () #s\u662f\u5426\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u7b26 s . isnumeric () #s\u53ea\u5305\u542b\u6570\u5b57 s . isprintable () #s\u662f\u5426\u53ea\u5305\u542b\u53ef\u6253\u5370\u5b57\u7b26 s . isspace () #s\u53ea\u5305\u542b\u7a7a\u767d\u5b57\u7b26 s . istitle () #s\u662f\u5426\u7b26\u5408\u5934\u8854\u5927\u5c0f\u5199 s . isupper () #s\u662f\u5426\u53ea\u5305\u542b\u5927\u5199\u5b57\u6bcd #s in t t\u662f\u5426\u5305\u542bs \u6539\u53d8\u5b57\u7b26\u4e32\u5927\u5c0f\u5199 s . capitalize () #\u5c06s[0]\u53d8\u6210\u5927\u5199 s . lower () #\u5c06\u5b57\u6bcd\u5168\u90e8\u6539\u6210\u5c0f\u5199 s . upper () #\u5c06\u5b57\u6bcd\u5168\u90e8\u6539\u6210\u5927\u5199 s . swapcase () #\u4ea4\u6362\u5927\u5c0f\u5199 s . title () #\u5c06\u5b57\u7b26\u4e32\u6539\u6210\u7b26\u5408\u5934\u8854\u5927\u5c0f\u5199 \u641c\u7d22\u51fd\u6570 s . find ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e s . rfind ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u7684\u4f4d\u7f6e s . index ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56deValueError\u5f02\u5e38\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e s . rindex ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56deValueError\u5f02\u5e38\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u7684\u4f4d\u7f6e \u8bbe\u7f6e\u683c\u5f0f\u51fd\u6570 s . center ( n , ch ) #\u5305\u542bn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2ds\u4f4d\u4e8e\u4e2d\u95f4\uff0c\u4e24\u8fb9\u4f7f\u7528ch\u586b\u5145 s . ljust ( n , ch ) #\u5305\u542bn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2ds\u4f4d\u4e8e\u53f3\u8fb9\uff0c\u5de6\u8fb9\u4f7f\u7528ch\u586b\u5145 s . rjust ( n , ch ) #\u5305\u542bn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2ds\u4f4d\u4e8e\u5de6\u8fb9\uff0c\u53f3\u8fb9\u4f7f\u7528ch\u586b\u5145 s . format ( ch1 , ch2 ) #s\u4e2d\u5305\u542b{0}{1}\u7684\u4f4d\u7f6e\u88abch1\u3001ch2\u586b\u5145 \u5b57\u7b26\u4e32\u5265\u9664\u51fd\u6570 s . strip ( ch ) #\u53bb\u9664\u5b57\u7b26\u4e32s\u4e2d\u5f00\u5934\u548c\u7ed3\u5c3e\u7684ch\u5b57\u7b26\u4e32 s . lstrip ( ch ) #\u53bb\u9664\u5b57\u7b26\u4e32s\u4e2d\u5f00\u5934\u7684ch\u5b57\u7b26\u4e32 s . rstrip ( ch ) #\u53bb\u9664\u5b57\u7b26\u4e32s\u4e2d\u7ed3\u5c3e\u7684ch\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u62c6\u5206\u51fd\u6570 s . partition ( 'ch' ) #\u5c06\u5b57\u7b26\u4e32s\u6309\u7167ch\u5b57\u7b26\u4e32\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f s . rpartition ( 'ch' ) #\u5c06\u5b57\u7b26\u4e32s\u6309\u7167ch\u5b57\u7b26\u4e32\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff0c\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f s . split ( 'ch' ) #\u4ee5ch\u4e3a\u5206\u9694\u7b26\uff0c\u5c06s\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u8fd4\u56de\u5206\u5272\u540e\u7684\u5217\u8868 s . rsplit ( 'ch' ) #\u4ee5ch\u4e3a\u5206\u9694\u7b26\uff0c\u5c06s\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u8fd4\u56de\u5206\u5272\u540e\u7684\u5217\u8868,\u4eces\u7684\u53f3\u7aef\u5f00\u59cb\u641c\u7d22ch \u5b57\u7b26\u4e32\u66ff\u6362 s . replace ( old , new ) #\u5c06\u5b57\u7b26\u4e32s\u4e2d\u7684old\u5b50\u5b57\u7b26\u4e32\u5168\u90e8\u66ff\u6362\u6210new s . expandtabs ( n ) #\u5c06\u5b57\u7b26\u4e32s\u4e2d\u7684\u6bcf\u4e2a\u5236\u8868\u7b26\u66ff\u6362\u6210n\u4e2a\u7a7a\u683c \u5176\u4ed6\u51fd\u6570 'sep' . join ( seq ) # \u4ee5sep\u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u5c06seq\u6240\u6709\u7684\u5143\u7d20\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s . count ( 'ch' ) #\u7edf\u8ba1\u5b57\u7b26\u4e32s\u4e2dch\u7684\u51fa\u73b0\u6b21\u6570 s . maketrans ( 'old' , 'new' ) -> t #\u521b\u5efa\u4e00\u4e2a\u8f6c\u6362\u8868t\uff0c\u7528\u4e8e\u5c06s\u4e2d\u7684old\u66ff\u6362\u6210new s . translate ( t ) #\u6309\u7167\u8f6c\u6362\u8868t\u5c06s\u4e2d\u7684\u5b57\u7b26\u8fdb\u884c\u66ff\u6362 List-\u6570\u7ec4 \u00b6 list . append ( value ) # \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u65b0\u7684\u5bf9\u8c61 list . extend ( list1 ) # \u6269\u5c55\u5217\u8868\uff0c\u5728\u5217\u8868\u672b\u5c3e\u4e00\u6b21\u6027\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u503c\uff08\u76f8\u5f53\u4e8e\u628alist1\u7684\u5143\u7d20\u590d\u5236\u5230\u4e86list\uff09 list . pop ( index ) # \u79fb\u51fa\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u662findex\u7684\u5143\u7d20\uff0c\uff08\u9ed8\u8ba4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09 list . remove ( value ) # \u79fb\u9664\u5217\u8868\u4e2d\u67d0\u4e2a\u503c\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff08\u53ea\u4f1a\u79fb\u51fa\u7b2c\u4e00\u4e2a\uff09 list . index ( value ) # \u4ece\u5217\u8868\u4e2d\u627e\u51fa\u67d0\u4e2a\u503c\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u7d22\u5f15\u4f4d\u7f6e list . insert ( index , value ) # \u5c06\u5bf9\u8c61\u63d2\u5165\u5217\u8868\u7684\u7b2cindex\u4e2a\u4f4d\u7f6e list . sort () # \u4ece\u5c0f\u5230\u5927\u6392\u5e8f list . reverse () # \u53cd\u5411\u5217\u8868\u4e2d\u7684\u5143\u7d20 list . count ( value ) # \u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 list . copy () # \u590d\u5236\u4e00\u4e2a\u526f\u672c\uff0c\u539f\u503c\u548c\u65b0\u590d\u5236\u7684\u53d8\u91cf\u4e92\u4e0d\u5f71\u54cd len ( list ) \u3001 max ( list ) \u3001 min ( list ) \u6570\u7ec4\u5b57\u7b26\u4e32\u9898\u76ee \u00b6 1.\u5927\u6570\u76f8\u52a0 import time L1 = \"2649821731631836529481632803462831616487712734074314936141303241873417434716340124362304724324324324324323412121323164329751831\" L2 = \"1232141045091731748365195814509145981509438583247509149821493213241431431319999999999999999999999999999999999999999999999999341344779\" startTime = time . time () max_len = max ( len ( L1 ), len ( L2 )) # str.zfill(width) \u6307\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u539f\u5b57\u7b26\u4e32\u53f3\u5bf9\u9f50\uff0c\u524d\u9762\u586b\u51450\u3002 l1 = L1 . zfill ( max_len ) l2 = L2 . zfill ( max_len ) a1 = list ( l1 ) a2 = list ( l2 ) a3 = [ 0 ] * ( max_len + 1 ) for index in range ( max_len - 1 , - 1 , - 1 ): index_sum = a3 [ index + 1 ] + int ( a1 [ index ]) + int ( a2 [ index ]) less = index_sum - 10 a3 [ index + 1 ] = index_sum % 10 a3 [ index ] = 1 if less >= 0 else 0 if ( a3 [ 0 ] == 0 ): a3 . pop ( 0 ) a33 = [ str ( i ) for i in a3 ] print ( '' . join ( a33 )) print ( '\u8017\u65f6 {0} ms' . format ( time . time () - startTime )) 2.\u5bfb\u627e\u6570\u7ec4\u7684\u4e2d\u5fc3\u7d22\u5f15 class Solution : def pivotIndex ( self , nums : List [ int ]) -> int : total_sum = sum ( nums ) left_sums = 0 for index in range ( 0 , len ( nums )): if index == 0 : left_sums = 0 else : left_sums += nums [ index - 1 ] if ( left_sums * 2 + nums [ index ]) == total_sum : return index return - 1 3.\u81f3\u5c11\u662f\u5176\u4ed6\u6570\u5b57\u4e24\u500d\u7684\u6700\u5927\u6570 class Solution : def dominantIndex ( self , nums : List [ int ]) -> int : max_num = max ( nums ) result = nums . index ( max_num ) nums . remove ( max_num ) for i in range ( len ( nums )): if nums [ i ] * 2 > max_num : return - 1 return result 4.\u52a0\u4e00 class Solution : def plusOne ( self , digits : List [ int ]) -> List [ int ]: if len ( digits ) == 0 : digits = [ 1 ] elif digits [ - 1 ] == 9 : # \u5018\u82e5\u6bcf\u4e00\u6b65\u90fd\u662f\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52 digits = self . plusOne ( digits [: - 1 ]) digits . append ( 0 ) else : digits [ - 1 ] += 1 return digits \u94fe\u8868 \u00b6 \u5355\u94fe\u8868 class Node ( object ): def __init__ ( self , value = None , next = None ): self . value , self . next = value , next class LinkedList ( object ): def __init__ ( self , maxsize = None ): self . maxsize = maxsize self . root = Node () self . taillNode = None self . length = 0 def __len__ ( self ): return self . length def append ( self , value ): if len ( self ) > self . maxsize and self . maxsize is not None : raise Exception ( \"Full\" ) node = Node ( value = value ) if self . taillNode is None : self . root . next = node else : self . taillNode . next = node self . taillNode = node self . length += 1 def appendLeft ( self , value ): if len ( self ) > self . maxsize and self . maxsize is not None : raise Exception ( \"Full\" ) node = Node ( value = value ) tempNode = self . root . next self . root . next = node node . next = tempNode self . length += 1 def iterNode ( self ): tempNode = self . root . next while tempNode is not self . taillNode : yield tempNode tempNode = tempNode . next yield tempNode # \u8fd9\u4e2a\u8fd4\u56de\u7684\u662ftailNode def __iter__ ( self ): for node in self . iterNode (): yield node . value def find ( self , value ): for index , node in enumerate ( self . iterNode ()): if node . value == value : return index return - 1 def remove ( self , value ): preNode = self . root curNode = self . root . next for curNode in self . iterNode (): if curNode . value == value : preNode . next = curNode . next if curNode is self . taillNode : self . taillNode = preNode del curNode self . length -= 1 return 1 else : preNode = curNode return - 1 def popLeft ( self ): if self . root . next is None : raise Exception ( \"This LinkedList is empty!\" ) tempNode = self . root . next self . root . next = tempNode . next resultValue = tempNode . value del tempNode self . length -= 1 return resultValue def clear ( self ): for node in self . iterNode (): del node self . root . next = None self . length = 0 \u5faa\u73af\u53cc\u94fe\u8868 class Node ( object ): def __init__ ( self , value = None , prev = None , next = None ): self . value , self . prev , self . next = value , prev , next class CircleDoubleLinkedList ( object ): def __init__ ( self , maxsize = None ): self . maxsize = maxsize node = Node () node . prev , node . next = node , node self . root = node self . length = 0 def __len__ ( self ): return self . length def headNone ( self ): return self . root . next def tailNode ( self ): return self . root . prev def append ( self , value ): if self . maxsize is not None and len ( self ) > self . maxsize : raise Exception ( \"Full\" ) node = Node ( value ) tailNode = self . tailNode () tailNode . next = node node . prev = tailNode node . next = self . root self . root . prev = node self . length += 1 def appendLeft ( self , value ): if self . maxsize is not None and len ( self ) > self . maxsize : raise Exception ( \"Full\" ) node = Node ( value ) if self . root . next is self . root : # empty node . next = self . root self . root . prev = node self . root . next = node node . prev = self . root else : headNode = self . root . next node . prev = self . root headNode . next = node node . next = headNode headNode . prev = node self . length += 1 def remove ( self , node ): if node is self . root : raise Exception ( \"This node is not deleted!\" ) else : node . prev = node . next node . next . prev = node . prev del node self . length -= 1 return node def iterNode ( self ): if self . root . next is self . root : raise Exception ( \"Empty\" ) tempNode = self . root . next while tempNode . next is not self . root : yield tempNode tempNode = tempNode . next yield tempNode def __iter__ ( self ): for node in self . iterNode (): yield node . value def iterNodeReverse ( self ): if self . root . prev is self . root : return tempNode = self . root . prev while tempNode . prev is not self . root : yield tempNode tempNode = tempNode . prev yield tempNode \u5feb\u6162\u6307\u9488 \u5feb\u6162\u6307\u9488\u4e2d\u7684\u5feb\u6162\u6307\u7684\u662f\u79fb\u52a8\u7684\u6b65\u957f\uff0c\u5373\u6bcf\u6b21\u5411\u524d\u79fb\u52a8\u901f\u5ea6\u7684\u5feb\u6162\u3002\u4f8b\u5982\u53ef\u4ee5\u8ba9\u5feb\u6307\u9488\u6bcf\u6b21\u6cbf\u94fe\u8868\u5411\u524d\u79fb\u52a8n(\u4e00\u822cn=2)\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u5411\u524d\u79fb\u52a81\u6b21\u3002 class LinkNode : def __init__ ( self , val ): self . val , self . next = val , None # 1\u3001\u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u662f\u5faa\u73af\u94fe\u8868,\u7c7b\u4f3c\u56f4\u7740\u64cd\u573a\u8dd1\u6b65\uff0c\u7528\u5feb\u6162\u6307\u9488\uff0c\u8dd1\u7684\u5feb\u7684\u603b\u4f1a\u8d76\u4e0a\u8dd1\u7684\u6162\u7684 class JudgeCircle ( object ): def hasCycle ( self , head ): fast , low = head , head while ( fast is not None ) and ( low is not None ): fast = fast . next . next low = low . next if low == fast : return True return False # 2\u3001\u5bfb\u627e\u6709\u5e8f\u94fe\u8868\u7684\u4e2d\u4f4d\u6570:\u5feb\u6307\u9488\u7684\u79fb\u52a8\u901f\u5ea6\u662f\u6162\u6307\u9488\u79fb\u52a8\u901f\u5ea6\u76842\u500d\uff0c\u56e0\u6b64\u5f53\u5feb\u6307\u9488\u5230\u8fbe\u94fe\u8868\u5c3e\u65f6\uff0c\u6162\u6307\u9488\u5230\u8fbe\u4e2d\u70b9\u3002 # \u6ce8\u610f:\u5feb\u6307\u9488\u5230\u8fbe\u5c3e\u90e8\u5206\u5947\u5076\uff0c\u4f8b\u5982fast.next==None,fast.next.next==None class FindMiddle ( object ): def findMid ( self , head ): fast , low = head , head while ( fast is not None ) and ( low is not None ): if fast . next is None : return low . val elif fast . next . next is None : # \u94fe\u8868\u7ed3\u70b9\u4e2a\u6570\u662f\u5076\u6570\uff0c\u8fd9\u65f6\u53ef\u4ee5\u6839\u636e\u201c\u89c4\u5219\u201d\u8fd4\u56de\u4e0a\u4e2d\u4f4d\u6570\u6216\u4e0b\u4e2d\u4f4d\u6570\u6216\uff08\u4e0a\u4e2d\u4f4d\u6570+\u4e0b\u4e2d\u4f4d\u6570\uff09\u7684\u4e00\u534a\u3002 return ( low . val + low . next . val ) / 2 else : fast = fast . next . next low = low . next # 3\u3001\u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9,\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9:\u4f7f\u7528\u524d\u540e\u6307\u9488\u3002\u524d\u6307\u9488\u5148\u8d70n\u6b65\uff0c\u7136\u540e\u524d\u3001\u540e\u6307\u9488\u540c\u65f6\u8d70\uff0c\u5f53\u524d\u6307\u9488\u8d70\u5230\u8282\u70b9\u5c3e\u65f6\uff0c\u540e\u6307\u9488\u521a\u597d\u8d70\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\u3002 class Solution : def removeNthFromEnd ( self , head : ListNode , n : int ) -> ListNode : tempNode = head fast , low = head , head for i in range ( n ): if fast . next : fast = fast . next else : return head . next while fast . next : fast = fast . next low = low . next low . next = low . next . next return tempNode # 4\u3001\u4e0d\u6b62\u94fe\u8868\u4e2d\u53ef\u4ee5\u4f7f\u7528\uff0clist\u4e2d\u4e5f\u53ef\u4ee5\uff0c\u53ea\u4e0d\u8fc7\u662f\u7528\u7d22\u5f15\uff0c\u7ed3\u675f\u6761\u4ef6\u662f<len(nums),\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879,\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6.\u4f8b\u5982:nums = [0,0,1,1,1,2,2,3,3,4]---> [0,1,2,3,4] class Solution : def removeDuplicates ( self , nums : List [ int ]) -> int : low , fast = 0 , 1 while fast < len ( nums ): if nums [ low ] == nums [ fast ]: nums . pop ( fast ) else : low += 1 fast += 1 return len ( nums ) **LRU\u7f13\u5b58\u673a\u5236\uff1a**\u9996\u5148\u6dd8\u6c70**\u6700\u957f\u65f6\u95f4\u672a\u88ab\u4f7f\u7528**\u7684 # \u5982\u4f55\u4f18\u5316\u6590\u6ce2\u90a3\u5951\u7b97\u6cd5:\u4e0b\u9762\u662f\u4f7f\u7528\u9012\u5f52\u7684\uff0c\u9012\u5f52\u610f\u5473\u7740\u6709\u5f88\u591a\u91cd\u590d\u7684 def fib ( n ): if n <= 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) \u666e\u901a\u4f18\u5316:\u6dfb\u52a0\u88c5\u9970\u5668\uff0c\u628a\u91cd\u590d\u7684\u90e8\u5206\u8bb0\u5f55\u4e0b\u6765\u76f4\u63a5\u62ff\u6765\u7528\uff0c\u65e0\u9700\u505a\u7b2c\u4e8c\u6b21\u8ba1\u7b97 import time from functools import wraps # \u88c5\u9970\u5668\u65f6\u5c3d\u91cf\u52a0\u4e0a # \u539f\u56e0:https://www.cnblogs.com/wangtaobiu/p/10614451.html def wrapper ( func ): data = {} # \u7528\u4e8e\u6536\u96c6\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u90e8\u5206 @wraps ( func ) # \u52a0\u4e0awraps\u88c5\u9970\u5668,\u4fdd\u8bc1\u539f\u51fd\u6570\u5728\u6267\u884c\u65f6\u4e0d\u4f1a\u53d1\u751f\u5f02\u5e38 def collect_repeat ( n ): if n in data : return data [ n ] else : res = func ( n ) data [ n ] = res return res return collect_repeat # \u4e0d\u52a0\u88c5\u9970\u5668\u8017\u65f6:5.364307165145874ms # \u52a0\u4e86\u88c5\u9970\u5668\u8017\u65f6:0.0002818107604980469ms @wrapper def fib ( n ): if n <= 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) if __name__ == \"__main__\" : s = time . time () for i in range ( 1 , 35 ): print ( fib ( i )) total_time = time . time () - s print ( f \"total time: { total_time } ms\" ) \u5185\u5b58\u6709\u9650\u600e\u4e48\u529e \uff1f \u95ee\u9898\u6765\u4e86\uff0c\u5047\u5982\u7a7a\u95f4\u6709\u9650\u600e\u4e48\u529e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u4e00\u76f4\u5411\u7f13\u5b58\u585e\u4e1c\u897f\uff0c\u5f53\u7f13\u5b58\u8fbe\u5230\u4e00\u5b9a\u4e2a\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u7b56\u7565\u8e22\u51fa\u4e00\u4e9b\u5143\u7d20\uff0c\u7528\u6765\u7ed9\u65b0\u7684\u5143\u7d20\u817e\u51fa\u7a7a\u95f4\u3002 \u4e00\u822c\u7f13\u5b58\u5931\u6548\u7b56\u7565\u6709 LRU(Least-Recently-Used): \u66ff\u6362\u6389\u6700\u8fd1\u8bf7\u6c42\u6700\u5c11\u7684\u5bf9\u8c61\uff0c \u5b9e\u9645\u4e2d\u4f7f\u7528\u6700\u5e7f \u3002cpu\u7f13\u5b58\u6dd8\u6c70\u548c\u865a\u62df\u5185\u5b58\u6548\u679c\u597d\uff0cweb\u5e94\u7528\u6b20\u4f73 LFU(Least-Frequently-Used): \u7f13\u5b58\u6c61\u67d3\u95ee\u9898(\u4e00\u4e2a\u5148\u524d\u6d41\u884c\u7684\u7f13\u5b58\u5bf9\u8c61\u4f1a\u5728\u7f13\u5b58\u4e2d\u9a7b\u7559\u5f88\u957f\u65f6\u95f4) First in First out(FIFO) Random Cache: \u968f\u673a\u9009\u4e00\u4e2a\u5220\u9664 LRU \u662f\u5e38\u7528\u7684\u4e00\u4e2a\uff0c\u8981\u60f3\u5b9e\u73b0\u4e00\u4e2a LRU\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\u80fd\u591f\u8bb0\u5f55\u8bbf\u95ee\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u6bcf\u6b21\u8bbf\u95ee\u4e4b\u540e\u6211\u4eec\u8981\u628a\u6700\u65b0\u4f7f\u7528\u5230\u7684\u5143\u7d20\u653e\u5230\u6700\u540e\uff08\u8868\u793a\u6700\u65b0\u8bbf\u95ee\uff09\u3002\u5f53\u5bb9\u91cf\u6ee1\u4e86\u4ee5\u540e\uff0c\u6211\u4eec\u8e22\u51fa\u6700\u65e9\u8bbf\u95ee\u7684\u5143\u7d20\u3002\u5047\u5982\u7528\u4e00\u4e2a\u94fe\u8868\u6765\u8868\u793a\u7684\u8bdd\uff1a[1] -> [2] -> [3]\u3002\u5047\u8bbe\u6700\u540e\u8fb9\u662f\u6700\u540e\u8bbf\u95ee\u7684\uff0c\u5f53\u8bbf\u95ee\u5230\u4e00\u4e2a\u5143\u7d20\u4ee5\u540e\uff0c\u6211\u4eec\u628a\u5b83\u653e\u5230\u6700\u540e\u3002\u5f53\u5bb9\u91cf\u6ee1\u4e86\uff0c\u6211\u4eec\u8e22\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u884c\u4e86\u3002 \u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u53ef\u80fd\u662f\u7528\u4e00\u4e2a\u94fe\u8868\u6765\u8bb0\u5f55\u8bbf\u95ee\u987a\u5e8f\uff0c\u4f46\u662f\u5355\u94fe\u8868\u6709\u4e2a\u95ee\u9898\u5c31\u662f\u5982\u679c\u8bbf\u95ee\u4e86\u4e2d\u95f4\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u9700\u8981\u62ff\u6389\u5b83\u5e76\u4e14\u653e\u5230\u94fe\u8868\u5c3e\u90e8\u3002\u800c\u5355\u94fe\u8868\u65e0\u6cd5\u5728O(1)\u7684\u65f6\u95f4\u5185\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff08\u5fc5\u987b\u8981\u5148\u641c\u7d22\u5230\u5b83\uff09\u3002 \u4f46\u662f\u53cc\u7aef\u94fe\u8868\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e86\u5b83\u7684\u524d\u540e\u8282\u70b9\uff0c\u53ea\u9700\u8981\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u540e\u8282\u70b9\u94fe\u63a5\u8d77\u6765\u5c31\u884c\u4e86\u3002 \u8fd8\u6709\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u628a\u5220\u9664\u540e\u7684\u8282\u70b9\u653e\u5230\u94fe\u8868\u5c3e\u90e8\uff0c\u5982\u679c\u662f\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u5c31\u53ef\u4ee5\u5566\uff0c\u6211\u4eec\u6709\u4e2a root \u8282\u70b9\u94fe\u63a5\u4e86\u9996\u4f4d\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9 root \u7684\u524d\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u88ab\u5220\u9664\u8282\u70b9\uff0c\u7136\u540e\u8ba9\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e5f\u6307\u5411\u5b83\u5c31\u884c\u4e86\u3002\u4f7f\u7528\u4e86\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u64cd\u4f5c\u5c31\u90fd\u662f O(1) \u7684\u4e86\u3002 \u8fd9\u4e5f\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a dict \u548c\u4e00\u4e2a \u5faa\u73af\u53cc\u7aef\u94fe\u8868 \u5b9e\u73b0LRU \u7684\u601d\u8def\u3002 \u4e0d\u8fc7\u4e00\u822c\u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684 OrderedDict(\u539f\u7406\u548c\u8fd9\u4e2a\u7c7b\u4f3c)\u5c31\u597d\u4e86\uff0c\u8981\u5b9e\u73b0\u4e00\u4e2a\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u662f\u4e00\u4e2a\u4e0d\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u94fe\u8868\u64cd\u4f5c\u5f88\u5bb9\u6613\u51fa\u9519\u3002 \u8865\u5145\uff1a\u5176\u5b9e lru \u6709\u4e2a\u7f3a\u70b9\u5c31\u662f\u989d\u5916\u7684\u94fe\u8868\u6bd4\u8f83\u5360\u7528\u7a7a\u95f4 \uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u770b\u770b redis \u5982\u4f55\u5b9e\u73b0\u7684 lru \u7b97\u6cd5\u3002 \u8865\u51452:OrderedDict # \u4f7f\u7528dict\u65f6\uff0cKey\u662f\u65e0\u5e8f\u7684\u3002\u5728\u5bf9dict\u505a\u8fed\u4ee3\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u786e\u5b9aKey\u7684\u987a\u5e8f\u3002\u5982\u679c\u8981\u4fdd\u6301Key\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u7528OrderedDict\uff0cKey\u4f1a\u6309\u7167\u63d2\u5165\u7684\u987a\u5e8f\u6392\u5217\uff0c\u800c\u4e0d\u662fKey\u672c\u8eab\u6392\u5e8f\u3002\u6709\u5e8f\u5b9e\u9645\u4e0a\u662f\u7531\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u7684\u3002 OrderedDict . move_to_end ( key , last = True ) >>> d = OrderedDict . fromkeys ( 'abcde' ) >>> d . move_to_end ( 'b' ) >>> '' . join ( d . keys ()) 'acdeb' >>> d . move_to_end ( 'b' , last = False ) >>> '' . join ( d . keys ()) 'bacde' OrderedDict . popitem ( last = True ) # \u9ed8\u8ba4\u4ece\u5220\u9664\u6700\u540e\u4e00\u4e2a(key,value),\u5e76\u4e14\u8fd4\u56de\u5220\u9664\u7684(key,value),last=False\u8868\u793a\u4ece\u9996\u4f4d\u5f00\u59cb\u5220\u9664 LRU\u7f13\u5b58\u4ee3\u7801 # \u603b\u5171\u8017\u65f6:0.0007581710815429688ms,\u867d\u7136\u65f6\u95f4\u7565\u957f,\u4f46\u662f\u5185\u5b58\u8282\u7ea6\u4e0b\u6765\u4e86 import time from collections import OrderedDict class LRUCache : def __init__ ( self , capacity = 128 ): self . capacity = capacity # \u501f\u52a9OrderedDict \u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5b9e\u73b0\u4e00\u4e2aLRUCache\uff0cOrderedDict\u5185\u90e8\u5176\u5b9e\u4e5f\u662f\u4f7f\u7528\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u5b9e\u73b0\u7684 self . od = OrderedDict () def get ( self , key , default = None ): val = self . od . get ( key , default ) # \u5982\u679c\u6ca1\u6709\u8fd4\u56de default\uff0c\u4fdd\u6301 dict \u8bed\u4e49 if val is not None : self . od . move_to_end ( key ) # \u6bcf\u6b21\u8bbf\u95ee\u5c31\u628akey \u653e\u5230\u6700\u540e\u8868\u793a\u6700\u65b0\u8bbf\u95ee return val def add_or_update ( self , key , value ): if key in self . od : # update self . od [ key ] = value self . od . move_to_end ( key ) else : # insert self . od [ key ] = value if len ( self . od ) > self . capacity : # full self . od . popitem ( last = False ) def __call__ ( self , func ): \"\"\" \u4e00\u4e2a\u7b80\u5355\u7684 LRU \u5b9e\u73b0\u3002\u6709\u4e00\u4e9b\u95ee\u9898\u9700\u8981\u601d\u8003\u4e0b\uff1a - \u8fd9\u91cc\u4e3a\u4e86\u7b80\u5316\u9ed8\u8ba4\u53c2\u6570\u53ea\u6709\u4e00\u4e2a\u6570\u5b57 n\uff0c\u5047\u5982\u53ef\u4ee5\u4f20\u5165\u591a\u4e2a\u53c2\u6570\uff0c\u5982\u4f55\u786e\u5b9a\u7f13\u5b58\u7684key \u5462\uff1f - \u8fd9\u91cc\u5b9e\u73b0\u6ca1\u6709\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u7684\u95ee\u9898\uff0c\u8981\u5982\u4f55\u624d\u80fd\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684 LRU \u5462\uff1f\u5f53\u7136\u5982\u679c\u4e0d\u662f\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4f7f\u7528\u662f\u4e0d\u9700\u8981\u8003\u8651\u7684 - \u5047\u5982\u8fd9\u91cc\u6ca1\u6709\u7528\u5185\u7f6e\u7684 dict\uff0c\u4f60\u80fd\u4f7f\u7528 redis \u6765\u5b9e\u73b0\u8fd9\u4e2a LRU \u5417\uff0c\u5982\u679c\u4f7f\u7528\u4e86 redis\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u66f4\u591a\u6570\u636e\u5230\u670d\u52a1\u5668\u3002\u800c\u4f7f\u7528\u5b57\u5178\u5b9e\u9645\u4e0a\u662f\u7f13\u5b58\u4e86Python\u8fdb\u7a0b\u91cc(localCache)\u3002 - \u8fd9\u91cc\u53ea\u662f\u5b9e\u73b0\u4e86 lru \u7b56\u7565\uff0c\u4f60\u80fd\u540c\u65f6\u5b9e\u73b0\u4e00\u4e2a\u8d85\u65f6 timeout \u53c2\u6570\u5417\uff1f\u6bd4\u5982\u50cf\u662fmemcache \u5b9e\u73b0\u7684 lazy expiration \u7b56\u7565 - LRU\u6709\u4e2a\u7f3a\u70b9\u5c31\u662f\uff0c\u5bf9\u4e8e\u5468\u671f\u6027\u7684\u6570\u636e\u8bbf\u95ee\u4f1a\u5bfc\u81f4\u547d\u4e2d\u7387\u8fc5\u901f\u4e0b\u964d\uff0c\u6709\u4e00\u79cd\u4f18\u5316\u662f LRU-K\uff0c\u8bbf\u95ee\u4e86\u6b21\u6570\u8fbe\u5230 k \u6b21\u624d\u4f1a\u5c06\u6570\u636e\u653e\u5165\u7f13\u5b58 \"\"\" def _ ( n ): if n in self . od : return self . get ( n ) else : val = func ( n ) self . add_or_update ( n , val ) return val return _ @LRUCache ( 10 ) def fib ( n ): if n <= 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) if __name__ == \"__main__\" : s = time . time () for i in range ( 1 , 35 ): print ( fib ( i )) total_time = time . time () - s print ( f \"total time: { total_time } ms\" ) \u53cc\u7aef\u961f\u5217(\u5177\u6709\u961f\u5217\u548c\u6808\u7684\u6027\u8d28) \u00b6 from collections import deque d = collections . deque ([]) d . append ( 'a' ) # \u5728\u6700\u53f3\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6 d=deque('a') d . appendleft ( 'b' ) # \u5728\u6700\u5de6\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6 d=deque(['b', 'a']) d . index ( 'a' , start , end ) #\u67e5\u627e\u6307\u5b9a\u533a\u95f4\u7684\u7d22\u5f15 d . insert ( index , val ) # \u518dindex\u4e4b\u524d\u63d2\u5165val\u5143\u7d20 d . extend ([ 'c' , 'd' ]) # \u5728\u6700\u53f3\u8fb9\u6dfb\u52a0\u6240\u6709\u5143\u7d20\uff0c\u6b64\u65f6 d=deque(['b', 'a', 'c', 'd']) d . extendleft ([ 'e' , 'f' ]) # \u5728\u6700\u5de6\u8fb9\u6dfb\u52a0\u6240\u6709\u5143\u7d20\uff0c\u6b64\u65f6 d=deque(['f', 'e', 'b', 'a', 'c', 'd']) d . pop () # \u5c06\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u53d6\u51fa\uff0c\u8fd4\u56de 'd'\uff0c\u6b64\u65f6 d=deque(['f', 'e', 'b', 'a', 'c']) d . popleft () # \u5c06\u6700\u5de6\u8fb9\u7684\u5143\u7d20\u53d6\u51fa\uff0c\u8fd4\u56de 'f'\uff0c\u6b64\u65f6 d=deque(['e', 'b', 'a', 'c']) d . rotate ( - 2 ) # \u628a\u5de6\u8fb9n\u4e2a\u5143\u7d20\u653e\u53f3\u8fb9\uff08+\u5219\u628a\u53f3\u8fb9\u5143\u7d20\u653e\u5de6\u8fb9\uff09\uff0c\u6b64\u65f6 d=deque(['a', 'c', 'e', 'b']) d . count ( 'a' ) # \u961f\u5217\u4e2d'a'\u7684\u4e2a\u6570\uff0c\u8fd4\u56de 1 d . remove ( 'c' ) # \u4ece\u961f\u5217\u4e2d\u5c06'c'\u5220\u9664\uff0c\u6b64\u65f6 d=deque(['a', 'e', 'b']) d . reverse () # \u5c06\u961f\u5217\u5012\u5e8f\uff0c\u6b64\u65f6 d=deque(['b', 'e', 'a']) d . copy () # \u6d45\u62f7\u8d1d d . clear () # \u5c06\u961f\u5217\u6e05\u7a7a\uff0c\u6b64\u65f6 d=deque([]) \u4f7f\u7528deque\u7684\u65cb\u8f6c\u89e3\u51b3\u7ea6\u745f\u592b\u73af\u95ee\u9898 \"\"\" \u7ea6\u745f\u592b\u7b97\u6cd5 \u636e\u8bf4\u8457\u540d\u72b9\u592a\u5386\u53f2\u5b66\u5bb6 Josephus \u6709\u8fc7\u4ee5\u4e0b\u7684\u6545\u4e8b\uff1a \u5728\u7f57\u9a6c\u4eba\u5360\u9886\u6865\u5854\u5e15\u7279\u540e\uff0c39\u4e2a\u72b9\u592a\u4eba\u4e0e Josephus \u53ca\u4ed6\u7684\u670b\u53cb\u8eb2\u5230\u4e00\u4e2a\u6d1e\u4e2d\uff0c 39\u4e2a\u72b9\u592a\u4eba\u51b3\u5b9a\u5b81\u613f\u6b7b\u4e5f\u4e0d\u8981\u88ab\u654c\u4eba\u6293\u5230\uff0c\u4e8e\u662f\u51b3\u5b9a\u4e86\u4e00\u4e2a\u81ea\u6740\u65b9\u5f0f\uff0c41\u4e2a\u4eba\u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c \u7531\u7b2c1\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570\uff0c\u6bcf\u62a5\u6570\u5230\u7b2c3\u4eba\u8be5\u4eba\u5c31\u5fc5\u987b\u81ea\u6740\uff0c\u7136\u540e\u518d\u7531\u4e0b\u4e00\u4e2a\u91cd\u65b0\u62a5\u6570\uff0c \u76f4\u5230\u6240\u6709\u4eba\u90fd\u81ea\u6740\u8eab\u4ea1\u4e3a\u6b62\u3002\u7136\u800c Josephus \u548c\u4ed6\u7684\u670b\u53cb\u5e76\u4e0d\u60f3\u81ea\u6740\uff0c \u95ee\u4ed6\u4fe9\u5b89\u6392\u7684\u54ea\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9003\u8fc7\u8fd9\u573a\u6b7b\u4ea1\u6e38\u620f\uff1f \"\"\" import collections def ysf ( totalNum , mod ): d = collections . deque ( range ( 1 , totalNum + 1 )) # \u5c06\u6bcf\u4e2a\u4eba\u4f9d\u6b21\u7f16\u53f7\uff0c\u653e\u5165\u5230\u961f\u5217\u4e2d while d : d . rotate ( - mod ) # \u961f\u5217\u5411\u5de6\u65cb\u8f6cb\u6b65 print ( d . pop ()) # \u5c06\u6700\u53f3\u8fb9\u7684\u5220\u9664\uff0c\u5373\u81ea\u6740\u7684\u4eba if __name__ == '__main__' : ysf ( 41 , 3 ) # \u8f93\u51fa\u7684\u662f\u81ea\u6740\u7684\u987a\u5e8f\u3002\u6700\u540e\u4e24\u4e2a\u662f16\u548c31\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u4fdd\u8bc1\u4ed6\u4fe9\u7684\u5b89\u5168\u3002 \u54c8\u5e0c\u8868(\u6563\u5217\u8868) \u00b6 \u6709\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u548c\u5220\u9664\u5143\u7d20\u5417\uff1f\u7ed9\u6bcf\u4e2a\u5143\u7d20\u4e00\u79cd\u300e\u903b\u8f91\u4e0b\u6807\u300f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u5b83\uff0c\u54c8\u5e0c\u8868\u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\u3002\u5b83\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u653e\u5728\u6570\u7ec4\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u5143\u7d20\uff0c\u54c8\u5e0c\u51fd\u6570\u6bcf\u6b21\u8ba1\u7b97\u7684\u4e0b\u6807\u5fc5\u987b\u8981\u4e00\u6837\u624d\u53ef\u4ee5\uff0c\u800c\u4e14\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u3002 \u4e3e\u4f8b\u5b50 # \u54c8\u5e0c\u51fd\u6570\uff1ah(key) = key % M,\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u56fa\u5b9a\uff0c\u4f46\u662f\u6709\u5f0a\u7aef:\u4e0b\u6807\u53d1\u751f\u51b2\u7a81\u600e\u4e48\u529e\u5462\uff1f M = 13 h ( 765 ) = 765 % M = 11 h ( 431 ) = 431 % M = 2 h ( 96 ) = 96 % M = 5 h ( 142 ) = 142 % M = 12 h ( 579 ) = 579 % M = 7 h ( 226 ) = 226 % M = 5 h ( 903 ) = 903 % M = 6 h ( 388 ) = 388 % M = 11 \u4f46\u662f\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9009\u4e0d\u597d\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u5bfc\u81f4\u51b2\u7a81\u592a\u591a\u4e00\u4e2a\u94fe\u53d8\u5f97\u592a\u957f\uff0c\u8fd9\u6837\u67e5\u627e\u5c31\u4e0d\u518d\u662f O(1) \u7684\u4e86 \u5f00\u653e\u5bfb\u5740\u6cd5 \u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e00\u79cd\u65b9\u5f0f\u6765\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \uff08\u8fd9\u91cc\u69fd\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6839\u636e\u627e\u4e0b\u4e00\u4e2a\u69fd\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3a: # \u672c\u6b21\u9009\u7528 \u4e8c\u6b21\u63a2\u67e5\u51fd\u6570\uff0c\u4ee3\u7801\u4e3e\u4f8b\u5982\u4e0b inserted_index_set = set () M = 13 def h ( key , M = 13 ): return key % M to_insert = [ 765 , 431 , 96 , 142 , 579 , 226 , 903 , 388 ] for number in to_insert : index = h ( number ) first_index = index # \u5018\u82e5\u51b2\u7a81\u4e86\uff0c\u4f7f\u7528first_index\u53c2\u4e0e\u8ba1\u7b97 i = 1 while index in inserted_index_set : # \u5982\u679c\u8ba1\u7b97\u53d1\u73b0\u5df2\u7ecf\u5360\u7528\uff0c\u7ee7\u7eed\u8ba1\u7b97\u5f97\u5230\u4e0b\u4e00\u4e2a\u53ef\u7528\u69fd\u7684\u4f4d\u7f6e print ( ' \\t h( {number} ) = {number} % M = {index} collision' . format ( number = number , index = index )) index = ( first_index + i * i ) % M # \u6839\u636e\u4e8c\u6b21\u65b9\u63a2\u67e5\u7684\u516c\u5f0f\u91cd\u65b0\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e i += 1 else : print ( 'h( {number} ) = {number} % M = {index} ' . format ( number = number , index = index )) inserted_index_set . add ( index ) \u88c5\u8f7d\u56e0\u5b50 \u5982\u679c\u7ee7\u7eed\u5f80\u6211\u4eec\u7684\u54c8\u5e0c\u8868\u91cc\u585e\u4e1c\u897f\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7a7a\u95f4\u4e0d\u591f\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8d1f\u8f7d\u56e0\u5b50\u7684\u6982\u5ff5(load factor)\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5df2\u7ecf\u4f7f\u7528\u7684\u69fd\u6570\u6bd4\u54c8\u5e0c\u8868\u5927\u5c0f\u3002 \u6bd4\u5982\u6211\u4eec\u4e0a\u8fb9\u7684\u4f8b\u5b50\u63d2\u5165\u4e86 8 \u4e2a\u5143\u7d20\uff0c\u54c8\u5e0c\u8868\u603b\u5927\u5c0f\u662f 13\uff0c \u5b83\u7684 load factor \u5c31\u662f 8/13\u22480.62 \u3002\u5f53\u6211\u4eec\u7ee7\u7eed\u5f80\u54c8\u5e0c\u8868\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5f88\u5feb\u5c31\u4e0d\u591f\u7528\u4e86\u3002 \u901a\u5e38\u5f53\u8d1f\u8f7d\u56e0\u5b50\u5f00\u59cb\u8d85\u8fc7 0.8 \u7684\u65f6\u5019\uff0c\u5c31\u8981\u65b0\u5f00\u8f9f\u7a7a\u95f4\u5e76\u4e14\u91cd\u65b0\u8fdb\u884c\u6563\u5217\u4e86\u3002\u91cd\u54c8\u5e0c\u89c4\u5219: cpython\u4e2d\u89c4\u5219 : Currently set to used*3 \u4ee3\u7801\u9610\u8ff0 # -*- coding: utf-8 -*- # \u4ece\u6570\u7ec4\u548c\u5217\u8868\u7ae0\u590d\u5236\u7684\u4ee3\u7801 class Array ( object ): def __init__ ( self , size = 32 , init = None ): self . _size = size self . _items = [ init ] * size def __getitem__ ( self , index ): return self . _items [ index ] def __setitem__ ( self , index , value ): self . _items [ index ] = value def __len__ ( self ): return self . _size def clear ( self , value = None ): for i in range ( len ( self . _items )): self . _items [ i ] = value def __iter__ ( self ): for item in self . _items : yield item class Slot ( object ): \"\"\"\u5b9a\u4e49\u4e00\u4e2a hash \u8868\u6570\u7ec4\u7684\u69fd(slot \u8fd9\u91cc\u6307\u7684\u5c31\u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u4f4d\u7f6e) hash table \u5c31\u662f\u4e00\u4e2a \u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\uff08\u4e5f\u53ebslot\u69fd\uff09\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u8c61\u5305\u542b\u4e24\u4e2a\u5c5e\u6027 key \u548c value\u3002 \u6ce8\u610f\uff0c\u4e00\u4e2a\u69fd\u6709\u4e09\u79cd\u72b6\u6001\uff0c\u770b\u4f60\u80fd\u5426\u60f3\u660e\u767d\u3002\u76f8\u6bd4\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\uff0c\u63a2\u67e5\u6cd5\u5220\u9664\u4e00\u4e2a key \u7684\u64cd\u4f5c\u7a0d\u5fae\u590d\u6742\u3002 1.\u4ece\u672a\u4f7f\u7528 HashMap.UNUSED\u3002\u6b64\u69fd\u6ca1\u6709\u88ab\u4f7f\u7528\u548c\u51b2\u7a81\u8fc7\uff0c\u67e5\u627e\u65f6\u53ea\u8981\u627e\u5230 UNUSED \u5c31\u4e0d\u7528\u518d\u7ee7\u7eed\u63a2\u67e5\u4e86 2.\u4f7f\u7528\u8fc7\u4f46\u662f remove \u4e86\uff0c\u6b64\u65f6\u662f HashMap.EMPTY\uff0c\u8be5\u63a2\u67e5\u70b9\u540e\u8fb9\u7684\u5143\u7d20\u4ecd\u7136\u53ef\u80fd\u662f\u6709key\u7684\uff0c\u9700\u8981\u7ee7\u7eed\u67e5\u627e 3.\u69fd\u6b63\u5728\u4f7f\u7528 Slot \u8282\u70b9 \"\"\" def __init__ ( self , key , value ): self . key , self . value = key , value class HashTable ( object ): UNUSED = None # \u6ca1\u88ab\u4f7f\u7528\u8fc7 EMPTY = Slot ( None , None ) # \u4f7f\u7528\u5374\u88ab\u5220\u9664\u8fc7 def __init__ ( self ): self . _table = Array ( 8 , init = HashTable . UNUSED ) # \u4fdd\u6301 2*i \u6b21\u65b9 self . length = 0 @property # \u88c5\u8f7d\u56e0\u5b50 def _load_factor ( self ): # load_factor \u8d85\u8fc7 0.8 \u91cd\u65b0\u5206\u914d\uff0c\u81ea\u8eab\u6570\u503c\u957f\u5ea6/Array\u603b\u957f\u5ea6 return self . length / float ( len ( self . _table )) def __len__ ( self ): return self . length # \u54c8\u5e0c\u51fd\u6570 def _hash ( self , key ): return abs ( hash ( key )) % len ( self . _table ) def _find_key ( self , key ): \"\"\" \u89e3\u91ca\u4e00\u4e2a slot \u4e3a UNUSED \u548c EMPTY \u7684\u533a\u522b \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u4e8c\u6b21\u63a2\u67e5\u7684\u65b9\u5f0f\uff0c\u5047\u5982\u6709\u4e24\u4e2a\u5143\u7d20 A\uff0cB \u51b2\u7a81\u4e86\uff0c\u9996\u5148A hash \u5f97\u5230\u662f slot \u4e0b\u68075\uff0cA \u653e\u5230\u4e86\u7b2c5\u4e2a\u69fd\uff0c\u4e4b\u540e\u63d2\u5165 B \u56e0\u4e3a\u51b2\u7a81\u4e86\uff0c\u6240\u4ee5\u7ee7\u7eed\u6839\u636e\u4e8c\u6b21\u63a2\u67e5\u65b9\u5f0f\u653e\u5230\u4e86 slot8\u3002 \u7136\u540e\u5220\u9664 A\uff0c\u69fd 5 \u88ab\u7f6e\u4e3a EMPTY\u3002\u7136\u540e\u6211\u53bb\u67e5\u627e B\uff0c\u7b2c\u4e00\u6b21 hash \u5f97\u5230\u7684\u662f \u69fd5\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u6211\u8fd8\u662f\u9700\u8981\u7b2c\u4e8c\u6b21\u8ba1\u7b97 hash \u624d\u80fd\u627e\u5230 B\u3002\u4f46\u662f\u5982\u679c\u69fd\u662f UNUSED \u6211\u5c31\u4e0d\u7528\u7ee7\u7eed\u627e\u4e86\uff0c \u6211\u8ba4\u4e3a B \u5c31\u662f\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u5c31\u662f UNUSED \u548c EMPTY \u7684\u533a\u522b\u3002 \"\"\" origin_index = index = self . _hash ( key ) # origin_index \u5224\u65ad\u662f\u5426\u53c8\u8d70\u5230\u4e86\u8d77\u70b9\uff0c\u5982\u679c\u67e5\u627e\u4e00\u5708\u4e86\u90fd\u627e\u4e0d\u5230\u5219\u65e0\u6b64\u5143\u7d20 _len = len ( self . _table ) while self . _table [ index ] is not HashTable . UNUSED : if self . _table [ index ] is HashTable . EMPTY : # \u6ce8\u610f\u5982\u679c\u662f EMPTY\uff0c\u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u69fd index = ( index * 5 + 1 ) % _len # \u672c\u6b21\u4f7f\u7528\u7684\u4e8c\u6b21\u63a2\u67e5\u6cd5\u4f7f\u7528\u89c4\u5219 if index == origin_index : break continue if self . _table [ index ] . key == key : # \u627e\u5230\u4e86key return index else : index = ( index * 5 + 1 ) % _len # \u6ca1\u6709\u627e\u5230\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e if index == origin_index : break return None def _find_slot_for_insert ( self , key ): index = self . _hash ( key ) _len = len ( self . _table ) while not self . _slot_can_insert ( index ): # \u76f4\u5230\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u7528\u7684\u69fd index = ( index * 5 + 1 ) % _len return index def _slot_can_insert ( self , index ): return ( self . _table [ index ] is HashTable . EMPTY or self . _table [ index ] is HashTable . UNUSED ) def __contains__ ( self , key ): # in operator\uff0c\u5b9e\u73b0\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 in \u64cd\u4f5c\u7b26\u5224\u65ad index = self . _find_key ( key ) return index is not None def add ( self , key , value ): if key in self : # update index = self . _find_key ( key ) self . _table [ index ] . value = value return False else : index = self . _find_slot_for_insert ( key ) self . _table [ index ] = Slot ( key , value ) self . length += 1 if self . _load_factor >= 0.8 : self . _rehash () return True def _rehash ( self ): old_table = self . _table newsize = len ( self . _table ) * 2 self . _table = Array ( newsize , HashTable . UNUSED ) self . length = 0 for slot in old_table : if slot is not HashTable . UNUSED and slot is not HashTable . EMPTY : index = self . _find_slot_for_insert ( slot . key ) self . _table [ index ] = slot self . length += 1 def get ( self , key , default = None ): index = self . _find_key ( key ) if index is None : return default else : return self . _table [ index ] . value def remove ( self , key ): index = self . _find_key ( key ) if index is None : raise KeyError () value = self . _table [ index ] . value self . length -= 1 self . _table [ index ] = HashTable . EMPTY return value def __iter__ ( self ): for slot in self . _table : if slot not in ( HashTable . EMPTY , HashTable . UNUSED ): yield slot . key def test_hash_table (): h = HashTable () h . add ( 'a' , 0 ) h . add ( 'b' , 1 ) h . add ( 'c' , 2 ) assert len ( h ) == 3 assert h . get ( 'a' ) == 0 assert h . get ( 'b' ) == 1 assert h . get ( 'hehe' ) is None h . remove ( 'a' ) assert h . get ( 'a' ) is None assert sorted ( list ( h )) == [ 'b' , 'c' ] n = 50 for i in range ( n ): h . add ( i , i ) for i in range ( n ): assert h . get ( i ) == i if __name__ == '__main__' : print ( 'beg' , test_hash_table (), 'end' , ) dict + set \u00b6 dict D . clear () #\u79fb\u9664D\u4e2d\u7684\u6240\u6709\u9879 D . copy () #\u8fd4\u56deD\u7684\u526f\u672c D . fromkeys ( seq [, val ]) #\u8fd4\u56de\u4eceseq\u4e2d\u83b7\u5f97\u7684\u952e\u548c\u88ab\u8bbe\u7f6e\u4e3aval\u7684\u503c\u7684\u5b57\u5178\u3002\u53ef\u505a\u7c7b\u65b9\u6cd5\u8c03\u7528 D . get ( key [, default ]) #\u5982\u679cD[key]\u5b58\u5728\uff0c\u5c06\u5176\u8fd4\u56de\uff1b\u5426\u5219\u8fd4\u56de\u7ed9\u5b9a\u7684\u9ed8\u8ba4\u503cNone D . has_key ( key ) #\u68c0\u67e5D\u662f\u5426\u6709\u7ed9\u5b9a\u952ekey D . items () #\u8fd4\u56de\u8868\u793aD\u9879\u7684(\u952e\uff0c\u503c)\u5bf9\u5217\u8868 D . iteritems () #\u4eceD.items()\u8fd4\u56de\u7684(\u952e\uff0c\u503c)\u5bf9\u4e2d\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61 D . iterkeys () #\u4eceD\u7684\u952e\u4e2d\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 D . itervalues () #\u4eceD\u7684\u503c\u4e2d\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 D . keys () #\u8fd4\u56deD\u952e\u7684\u5217\u8868 D . pop ( key [, d ]) #\u79fb\u9664\u5e76\u4e14\u8fd4\u56de\u5bf9\u5e94\u7ed9\u5b9a\u952ekey\u6216\u7ed9\u5b9a\u7684\u9ed8\u8ba4\u503cD\u7684\u503c D . popitem () #\u4eceD\u4e2d\u79fb\u9664\u4efb\u610f\u4e00\u9879\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a(\u952e\uff0c\u503c)\u5bf9\u8fd4\u56de D . setdefault ( key [, default ]) #\u5982\u679cD[key]\u5b58\u5728\u5219\u5c06\u5176\u8fd4\u56de\uff1b\u5426\u5219\u8fd4\u56de\u9ed8\u8ba4\u503cNone D . update ( other ) #\u5c06other\u4e2d\u7684\u6bcf\u4e00\u9879\u52a0\u5165\u5230D\u4e2d\u3002 D . values () #\u8fd4\u56deD\u4e2d\u503c\u7684\u5217\u8868 set # \u7279\u70b9\uff1a\u4e00\u4e2a\u65e0\u5e8f\u4e0d\u91cd\u590d\u5143\u7d20\u96c6 # \u6784\u9020 set () #\u7a7a\u96c6\u5408\u5b9a\u4e49 Set1 = { \"1\" , \"2\" } set2 = set ( list1 ) Set3 = set ( str ) #\u4f8b\u5982\uff1aset('spam') ==set(['a', 'p', 's', 'm'])=={'a', 'p', 's', 'm'} str-->\u5b57\u7b26list-->set t = s #t\u4e3a\u96c6\u5408s\u7684\u4e00\u4e2a\u5f15\u7528 t = s . copy () #t\u4e3a\u96c6\u5408s\u7684\u4e00\u4e2a\u6d45\u590d\u5236 # \u589e t . add ( x ) # \u6dfb\u52a0\u4e00\u9879 s . update ( t ) # \u5728s\u4e2d\u6dfb\u52a0\u591a\u9879 # \u5220 s . remove ( x ) #\u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 x,\u8fd4\u56de\u96c6\u5408 , \u5982\u679c\u4e0d\u5b58\u5728\u5219\u5f15\u53d1 KeyError s . discard ( x ) #\u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 x,\u8fd4\u56de\u96c6\u5408\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de\u96c6\u5408\u672c\u8eab s . pop () #\u5220\u9664\u96c6\u5408\u4e2d\u7684\u4efb\u4e00\u4e0d\u786e\u5b9a\u7684\u5143\u7d20, \u8fd4\u56de\u96c6\u5408\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u5f15\u53d1 KeyError s . clear () #\u6e05\u7a7a\u96c6\u5408 # \u67e5 len ( s ) #set \u7684\u957f\u5ea6 hash ( s ) #\u8fd4\u56de s \u7684 hash \u503c # \u903b\u8f91\u8fd0\u7b97 a = t | s # t \u548c s\u7684\u5e76\u96c6 s.union(t) b = t & s # t \u548c s\u7684\u4ea4\u96c6 s.intersection(t) ) c = t \u2013 s # \u6c42\u5dee\u96c6\uff08\u9879\u5728t\u4e2d\uff0c\u4f46\u4e0d\u5728s\u4e2d\uff09 s.difference(t) d = t ^ s # \u5bf9\u79f0\u5dee\u96c6\uff08\u9879\u5728t\u6216s\u4e2d\uff0c\u4f46\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u4e8c\u8005\u4e2d\uff09 s.symmetric_difference(t) s |= t # \u5c06t\u6dfb\u52a0\u5230s\u4e2d s.update(t) s <= t #s\u662ft\u7684\u5b50\u96c6 \u8fd4\u56debool s.issubset(t) s >= t #s\u662ft\u7684\u7236\u96c6 \u8fd4\u56debool s.issuperset(t) s == t #s\u4e0et\u4e92\u4e3a\u5b50\u96c6 s != t #\u96c6\u5408s\u4e0et\u4e0d\u76f8\u7b49 x in s # x \u5728\u96c6\u5408 s \u4e2d \u8fd4\u56debool x not in s # x \u4e0d\u5728\u96c6\u5408 s \u4e2d \u8fd4\u56debool \u9012\u5f52 \u00b6 \u9012\u5f52\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u57fa\u672c\u7684\u51fa\u53e3(base case)\uff0c\u5426\u5219\u5c31\u4f1a\u65e0\u9650\u9012\u5f52\uff0c\u6700\u7ec8\u5bfc\u81f4**\u6808\u6ea2\u51fa**\u3002 \u9012\u5f52\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u5206\u89e3\u7684\u95ee\u9898(recursive case)\u3002 \u9012\u5f52\u5fc5\u987b\u5fc5\u987b\u8981\u5411\u7740\u9012\u5f52\u51fa\u53e3\u9760\u8fd1(toward the base case)\u3002 def fact ( n ): if n == 0 : return 1 else : return n * fact ( n - 1 ) \u6253\u5370\u5341\u4e2a\u6570\u7ec4\u7406\u89e3\u9012\u5f52 # \u6b63\u5e8f\u6253\u5370 def print_num_recursive ( n ): if n > 0 : print_num_recursive ( n - 1 ) print ( n ) # \u5012\u5e8f\u6253\u5370 def print_num_recursive_revserve ( n ): if n > 0 : print ( n ) print_num_recursive_revserve ( n - 1 ) # \u5c3e\u9012\u5f52:\u5c31\u662f\u9012\u5f52\u8c03\u7528\u653e\u5728\u4e86\u51fd\u6570\u7684\u6700\u540e # \u5c3e\u9012\u5f52\u4f5c\u7528: # \u666e\u901a\u7684\u9012\u5f52, \u6bcf\u4e00\u7ea7\u9012\u5f52\u90fd\u4ea7\u751f\u4e86\u65b0\u7684\u5c40\u90e8\u53d8\u91cf, \u5fc5\u987b\u521b\u5efa\u65b0\u7684\u8c03\u7528\u6808, \u968f\u7740\u9012\u5f52\u6df1\u5ea6\u7684\u589e\u52a0, \u521b\u5efa\u7684\u6808\u8d8a\u6765\u8d8a\u591a, \u9020\u6210\u7206\u6808\u3002\u867d\u7136\u5c3e\u9012\u5f52\u8c03\u7528\u4e5f\u4f1a\u521b\u5efa\u65b0\u7684\u6808, \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4f7f\u5f97\u5c3e\u9012\u5f52\u7684\u6bcf\u4e00\u7ea7\u8c03\u7528\u5171\u7528\u4e00\u4e2a\u6808!, \u5982\u6b64\u4fbf\u53ef\u89e3\u51b3\u7206\u6808\u548c\u9012\u5f52\u6df1\u5ea6\u9650\u5236\u7684\u95ee\u9898! \u4e0d\u5e78\u7684\u662f python \u9ed8\u8ba4\u4e0d\u652f\u6301\u5c3e\u9012\u5f52\u4f18\u5316\uff08\u89c1\u5ef6\u4f38\u9605\u8bfb\uff09\uff0c\u4e0d\u8fc7\u4e00\u822c\u5c3e\u9012\u5f52\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u8fed\u4ee3\u6765\u4f18\u5316\u5b83\u3002 \u6c49\u8bfa\u5854\u95ee\u9898 '''\u9012\u5f52\u65b9\u6cd5: \u628a\u4e0a\u8fb9\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece S \u79fb\u52a8\u5230 I\uff0c\u501f\u52a9 D \u6746 \u628a\u6700\u5e95\u4e0b\u7684\u76d8\u5b50\u4ece S \u79fb\u52a8\u5230 D \u628a n-1 \u4e2a\u76d8\u5b50\u4ece I \u79fb\u52a8\u5230 D\uff0c\u501f\u52a9 S ''' def hanoi_move ( n , source , dest , intermediate ): if n >= 1 : # \u9012\u5f52\u51fa\u53e3\uff0c\u53ea\u5269\u4e00\u4e2a\u76d8\u5b50 hanoi_move ( n - 1 , source , intermediate , dest ) print ( \"Move %s -> %s \" % ( source , dest )) hanoi_move ( n - 1 , intermediate , dest , source ) hanoi_move ( 3 , 'A' , 'C' , 'B' ) # \u8f93\u51fa\uff0c\u5efa\u8bae\u4f60\u624b\u52a8\u6a21\u62df\u4e0b\u3002\u4e09\u4e2a\u76d8\u5b50 A(Source), B(intermediate), C(Destination) \"\"\" Move A -> C Move A -> B Move C -> B Move A -> C Move B -> A Move B -> C Move A -> C \"\"\" \u67e5\u627e+\u6392\u5e8f \u00b6 \u4e8c\u5206\u67e5\u627e def binary_search ( sorted_array , val ): if not sorted_array : return - 1 beg = 0 end = len ( sorted_array ) - 1 while beg <= end : mid = int (( beg + end ) / 2 ) # beg + (end-beg)/2\uff0c \u4e3a\u4e86\u5c4f\u853d python 2/3 \u5dee\u5f02\u6211\u7528\u4e86\u5f3a\u8f6c if sorted_array [ mid ] == val : return mid elif sorted_array [ mid ] > val : end = mid - 1 else : beg = mid + 1 return - 1 def test_binary_search (): a = list ( range ( 10 )) # \u6b63\u5e38\u503c assert binary_search ( a , 1 ) == 1 assert binary_search ( a , - 1 ) == - 1 # \u5f02\u5e38\u503c assert binary_search ( None , 1 ) == - 1 # \u8fb9\u754c\u503c assert binary_search ( a , 0 ) == 0 bisect(\u4e8c\u5206\u6a21\u5757) # \u8fd9\u4e2a\u6a21\u5757\u7684\u8f93\u5165\u662f\u6392\u5e8f\u7684\uff0c\u9ed8\u8ba4\u90fd\u662finplace=True import bisect data = [ 2 , 4 , 9 , 7 ] bisect . insort ( data , 3 ) # \u63d2\u5165\u4f46\u4e0d\u6539\u53d8\u73b0\u6709\u6392\u5e8f data->[2,3,4,9,7] bisect . bisect ( data , 1 ) # 0 \u67e5\u627e\u8be5\u6570\u503c\u5c06\u4f1a\u63d2\u5165\u7684\u4f4d\u7f6e\u5e76\u8fd4\u56de\uff0c\u800c\u4e0d\u4f1a\u63d2\u5165\u3002data->[2,3,4,9,7] # \u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7528\u5165\u5904\u7406\u5c06\u4f1a\u63d2\u5165\u91cd\u590d\u6570\u503c\u7684\u60c5\u51b5\uff0c\u8fd4\u56de\u5c06\u4f1a\u63d2\u5165\u7684\u4f4d\u7f6e bisect . bisect_left ( data , 4 ) # 2 [2,3,4,4,9,7] bisect . bisect_right ( data , 4 ) # 3 [2,3,4,4,9,7] \u57fa\u672c\u6392\u5e8f(\u7b80\u5355\u4f46\u8017\u65f6:\u5192\u6ce1/\u9009\u62e9/\u63d2\u5165) \u5192\u6ce1\u6392\u5e8f(O(N^2)) ''' \u5bf9\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c n-1 \u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c \u5982\u679c\u76f8\u90bb\u7684\u5143\u7d20\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u64cd\u4f5c\u800c\u4e0d\u662f\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\uff0c\u6240\u4ee5\u662f\u4e00\u4e2a inplace \u7684\u64cd\u4f5c\u3002 \u8fd9\u91cc\u5192\u6ce1\u7684\u610f\u601d\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u4e0d\u65ad\u6bd4\u8f83\u548c\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u4f7f\u5b83\u8f6c\u79fb\u5230\u6700\u53f3\u8fb9\u3002 ''' import random def bubble_sort ( seq ): # O(n^2), n(n-1)/2 = 1/2(n^2 + n) n = len ( seq ) for i in range ( n - 1 ): print ( seq ) # \u6211\u6253\u5370\u51fa\u6765\u8ba9\u4f60\u770b\u6e05\u695a\u6bcf\u4e00\u8f6e\u6700\u9ad8\u3001\u6b21\u9ad8\u3001\u6b21\u6b21\u9ad8...\u7684\u5c0f\u670b\u53cb\u4f1a\u5192\u6ce1\u5230\u53f3\u8fb9 for j in range ( n - 1 - i ): # \u8fd9\u91cc\u4e4b\u6240\u4ee5 n-1 \u8fd8\u9700\u8981 \u51cf\u53bb i \u662f\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u5192\u6ce1\u6700\u5927\u7684\u5143\u7d20\u90fd\u4f1a\u5192\u6ce1\u5230\u6700\u540e\uff0c\u65e0\u9700\u518d\u6bd4\u8f83 if seq [ j ] > seq [ j + 1 ]: seq [ j ], seq [ j + 1 ] = seq [ j + 1 ], seq [ j ] print ( seq ) def test_bubble_sort (): seq = list ( range ( 10 )) # \u6ce8\u610f python3 \u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u6211\u90fd\u7528 list \u5f3a\u8f6c\u4e86\uff0cpython2 range \u8fd4\u56de\u7684\u5c31\u662f list random . shuffle ( seq ) # shuffle inplace \u64cd\u4f5c\uff0c\u6253\u4e71\u6570\u7ec4 bubble_sort ( seq ) assert seq == sorted ( seq ) # \u6ce8\u610f\u5466\uff0c\u5185\u7f6e\u7684 sorted \u5c31\u4e0d\u662f inplace \u7684\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u4e0d\u5f71\u54cd\u4f20\u5165\u7684\u53c2\u6570 \"\"\" \u6211\u6253\u5370\u51fa\u6765\u8ba9\u4f60\u770b\u5230\u6bcf\u6b21\u4ece\u6700\u9ad8\u5230\u6b21\u9ad8\u7684\u5c0f\u76c6\u53cb\u5c31\u8fd9\u4e48\u6392\u597d\u5e8f\u4e86\uff0c\u56e0\u4e3a\u662f\u968f\u673a\u6570\uff0c\u4f60\u7b2c\u4e00\u4e2a\u6ca1\u6709\u6392\u5e8f\u7684\u6570\u7ec4\u5e94\u8be5\u548c\u6211\u7684\u4e0d\u4e00\u6837 [3, 4, 5, 0, 9, 1, 7, 8, 6, 2] [3, 4, 0, 5, 1, 7, 8, 6, 2, 9] [3, 0, 4, 1, 5, 7, 6, 2, 8, 9] [0, 3, 1, 4, 5, 6, 2, 7, 8, 9] [0, 1, 3, 4, 5, 2, 6, 7, 8, 9] [0, 1, 3, 4, 2, 5, 6, 7, 8, 9] [0, 1, 3, 2, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \"\"\" \u9009\u62e9\u6392\u5e8f(O(N^2)) ''' \u6bcf\u6b21\u6211\u4eec\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\u63d2\u5165\u8fed\u4ee3\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6bcf\u4e2a\u4f4d\u7f6e\u4ece\u5b83\u81ea\u5df1\u7684\u4f4d\u7f6e\u5f00\u59cb\u5b83\u5c31\u662f\u6700\u5c0f\u7684\u4e86\uff0c\u4e00\u5708\u4e0b\u6765\u6570\u7ec4\u5c31\u6709\u5e8f\u4e86\u3002 \u9009\u62e9\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e00\u4e2a 0 \u5230 n-1 \u7684\u8fed\u4ee3\uff0c\u6bcf\u6b21\u5411\u540e\u67e5\u627e\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002 ''' def select_sort ( seq ): n = len ( seq ) for i in range ( n - 1 ): min_idx = i # \u6211\u4eec\u5047\u8bbe\u5f53\u524d\u4e0b\u6807\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684 for j in range ( i + 1 , n ): # \u4ece i \u7684\u540e\u8fb9\u5f00\u59cb\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5f97\u5230\u5b83\u7684\u4e0b\u6807 if seq [ j ] < seq [ min_idx ]: min_idx = j # \u4e00\u4e2a j \u5faa\u73af\u4e0b\u6765\u4e4b\u540e\u5c31\u627e\u5230\u4e86\u6700\u5c0f\u7684\u5143\u7d20\u5b83\u7684\u4e0b\u6807 if min_idx != i : # swap seq [ i ], seq [ min_idx ] = seq [ min_idx ], seq [ i ] def test_select_sort (): seq = list ( range ( 10 )) random . shuffle ( seq ) select_sort ( seq ) assert seq == sorted ( seq ) \"\"\" [4, 7, 5, 3, 6, 0, 2, 9, 8, 1] [0, 7, 5, 3, 6, 4, 2, 9, 8, 1] [0, 1, 5, 3, 6, 4, 2, 9, 8, 7] [0, 1, 2, 3, 6, 4, 5, 9, 8, 7] [0, 1, 2, 3, 6, 4, 5, 9, 8, 7] [0, 1, 2, 3, 4, 6, 5, 9, 8, 7] [0, 1, 2, 3, 4, 5, 6, 9, 8, 7] [0, 1, 2, 3, 4, 5, 6, 9, 8, 7] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \"\"\" \u63d2\u5165\u6392\u5e8f(O(N^2)) ''' \u6bcf\u6b21\u6311\u9009\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u7ecf\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d,\u521d\u59cb\u65f6\u5df2\u6392\u5e8f\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20: \u60f3\u8c61\u4f60\u624b\u91cc\u6709\u4e00\u4e9b\u6251\u514b\u724c\uff0c\u5b83\u4eec\u987a\u5e8f\u662f\u6563\u4e71\u7684\uff0c\u73b0\u5728\u9700\u8981\u4f60\u628a\u5b83\u4eec\u6574\u7406\u6210\u6709\u5e8f\u7684\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u5462\uff1f \u9996\u5148\u62ff\u6700\u9876\u4e0a\u7684\u4e00\u5f20\uff0c\u7136\u540e\u62ff\u7b2c\u4e8c\u5f20\uff0c\u7b2c\u4e8c\u5f20\u70b9\u6570\u5927\uff0c\u4f60\u5c31\u628a\u7b2c\u4e8c\u5f20\u653e\u5728\u7b2c\u4e00\u5f20\u7684\u4e0b\u8fb9\uff0c\u5426\u5219\u653e\u5728\u7b2c\u4e00\u5f20\u4e0a\u8fb9\u3002 \u5f53\u4f60\u62ff\u7b2c\u4e09\u5f20\u7684\u65f6\u5019\uff0c\u4f60\u540c\u6837\u4f1a\u627e\u5230\u9002\u5408\u5b83\u5927\u5c0f\u7684\u4f4d\u7f6e\u63d2\u5165\u8fdb\u53bb\u3002 ''' def insertion_sort ( seq ): \"\"\" \u6bcf\u6b21\u6311\u9009\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u7ecf\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d,\u521d\u59cb\u65f6\u5df2\u6392\u5e8f\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\"\"\" n = len ( seq ) print ( seq ) for i in range ( 1 , n ): value = seq [ i ] # \u4fdd\u5b58\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\uff0c\u56e0\u4e3a\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\u5b83\u7684\u4f4d\u7f6e\u53ef\u80fd\u88ab\u8986\u76d6 # \u627e\u5230\u8fd9\u4e2a\u503c\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u524d\u8fb9\u7684\u6570\u7ec4\u6709\u5e8f [0,i] \u6709\u5e8f pos = i while pos > 0 and value < seq [ pos - 1 ]: seq [ pos ] = seq [ pos - 1 ] # \u5982\u679c\u524d\u8fb9\u7684\u5143\u7d20\u6bd4\u5b83\u5927\uff0c\u5c31\u8ba9\u5b83\u4e00\u76f4\u524d\u79fb pos -= 1 seq [ pos ] = value # \u627e\u5230\u4e86\u5408\u9002\u7684\u4f4d\u7f6e\u8d4b\u503c\u5c31\u597d print ( seq ) \"\"\" \u4e0d\u65ad\u628a\u65b0\u5143\u7d20\u653e\u5230\u5df2\u7ecf\u6709\u5e8f\u7684\u6570\u7ec4\u4e2d [1, 7, 3, 0, 9, 4, 8, 2, 6, 5] [1, 7, 3, 0, 9, 4, 8, 2, 6, 5] [1, 3, 7, 0, 9, 4, 8, 2, 6, 5] [0, 1, 3, 7, 9, 4, 8, 2, 6, 5] [0, 1, 3, 7, 9, 4, 8, 2, 6, 5] [0, 1, 3, 4, 7, 9, 8, 2, 6, 5] [0, 1, 3, 4, 7, 8, 9, 2, 6, 5] [0, 1, 2, 3, 4, 7, 8, 9, 6, 5] [0, 1, 2, 3, 4, 6, 7, 8, 9, 5] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \"\"\" \u9ad8\u7ea7\u6392\u5e8f\u7b97\u6cd5(\u5f52\u5e76\u6392\u5e8f/\u5feb\u901f\u6392\u5e8f) \u5f52\u5e76\u6392\u5e8f(\u5206\u6cbb\u601d\u8def:O(n*log2n)) \u5206\u89e3 \uff1a\u5c06\u5f85\u6392\u5e8f\u7684 n \u4e2a\u5143\u7d20\u5206\u6210\u5404\u5305\u542b n/2 \u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217 \u89e3\u51b3 \uff1a\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u9012\u5f52\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217 \u5408\u5e76 \uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5b50\u5e8f\u5217\u4ee5\u4ea7\u751f\u5df2\u6392\u5e8f\u7684\u7b54\u6848 # \u5f52\u5e76\u6392\u5e8f\u4f7f\u7528\u9012\u5f52\u5b9e\u73b0 # -*- coding: utf-8 -*- def merge_sort ( seq ): if len ( seq ) <= 1 : # \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u662f\u9012\u5f52\u51fa\u53e3 return seq else : # \u524d\u534a\u90e8\u5206\u5206\u5f00 mid = int ( len ( seq ) / 2 ) left_half = merge_sort ( seq [: mid ]) right_half = merge_sort ( seq [ mid :]) # \u540e\u534a\u90e8\u5206\u5408\u5e76:\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4 new_seq = merge_sorted_list ( left_half , right_half ) return new_seq def merge_sorted_list ( sorted_a , sorted_b ): \"\"\" \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u5e8f\u5217 :param sorted_a: :param sorted_b: \"\"\" length_a , length_b = len ( sorted_a ), len ( sorted_b ) a = b = 0 # \u53ef\u4ee5\u770b\u505a\u662f\u4ece0\u5f00\u59cb\u7684\u6307\u9488 new_sorted_seq = list () while a < length_a and b < length_b : if sorted_a [ a ] < sorted_b [ b ]: new_sorted_seq . append ( sorted_a [ a ]) a += 1 else : new_sorted_seq . append ( sorted_b [ b ]) b += 1 # \u5982\u679c a\u6216b \u4e2d\u8fd8\u6709\u5269\u4f59\u5143\u7d20\uff0c\u9700\u8981\u653e\u5230\u6700\u540e if a < length_a : new_sorted_seq . extend ( sorted_a [ a :]) else : new_sorted_seq . extend ( sorted_b [ b :]) return new_sorted_seq def test_merge_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) assert merge_sort ( seq ) == sorted ( seq ) \u5feb\u901f\u6392\u5e8f(\u5206\u6cbb\u601d\u60f3,\u5e94\u7528\u5e7f\u6cdb:O(n*logn)) \u9009\u62e9\u57fa\u51c6\u503c pivot( \u7b2c\u4e00\u4e2a\u5143\u7d20 ) \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff1a\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e4b\u4e3a partition \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002 \u5408\u5e76\u7ed3\u679c # \u5b9e\u73b0\u65b9\u5f0f1:\u4e0d\u8db3 # \u7b2c\u4e00\u662f\u5b83\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u6211\u4eec\u60f3\u5b9e\u73b0 inplace \u539f\u5730\u6392\u5e8f\u3002 # \u7b2c\u4e8c\u662f\u5b83\u7684 partition \u64cd\u4f5c\u6bcf\u6b21\u90fd\u8981\u4e24\u6b21\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u60f3\u6539\u5584\u4e00\u4e0b\u3002 def quicksort ( array ): size = len ( array ) if not array or size < 2 : # NOTE: \u9012\u5f52\u51fa\u53e3\uff0c\u7a7a\u6570\u7ec4\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u90fd\u662f\u6709\u5e8f\u7684 return array pivot_idx = 0 pivot = array [ pivot_idx ] less_part = [ array [ i ] for i in range ( size ) if array [ i ] <= pivot and pivot_idx != i ] great_part = [ array [ i ] for i in range ( size ) if array [ i ] > pivot and pivot_idx != i ] return quicksort ( less_part ) + [ pivot ] + quicksort ( great_part ) def test_quicksort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) assert quicksort ( seq ) == sorted ( seq ) # \u5b9e\u73b0\u65b9\u5f0f2:\u4f18\u53161 def partition ( array , beg , end ): \"\"\"\u5bf9\u7ed9\u5b9a\u6570\u7ec4\u6267\u884c partition \u64cd\u4f5c\uff0c\u8fd4\u56de\u65b0\u7684 pivot \u4f4d\u7f6e\"\"\" pivot_index = beg pivot = array [ pivot_index ] left = pivot_index + 1 right = end - 1 # \u5f00\u533a\u95f4\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e\u662f end-1 [0, end-1] or [0: end)\uff0c\u62ec\u53f7\u8868\u793a\u5f00\u533a\u95f4 while True : # \u4ece\u5de6\u8fb9\u627e\u5230\u6bd4 pivot \u5927\u7684 while left <= right and array [ left ] < pivot : left += 1 while right >= left and array [ right ] >= pivot : right -= 1 if left > right : break else : array [ left ], array [ right ] = array [ right ], array [ left ] array [ pivot_index ], array [ right ] = array [ right ], array [ pivot_index ] return right # \u65b0\u7684 pivot \u4f4d\u7f6e def quicksort_inplace ( array , beg , end ): # \u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u90fd\u7528\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0cend \u4f20\u5165 len(array) if beg < end : # beg == end \u7684\u65f6\u5019\u9012\u5f52\u51fa\u53e3 pivot = partition ( array , beg , end ) quicksort_inplace ( array , beg , pivot ) quicksort_inplace ( array , pivot + 1 , end ) def test_quicksort_inplace (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) sorted_seq = sorted ( seq ) quicksort_inplace ( seq , 0 , len ( seq )) assert seq == sorted_seq \u6811\u4e0e\u4e8c\u53c9\u6811 \u00b6 \u6839\u8282\u70b9(root): \u6811\u7684\u6700\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u4efb\u4f55\u975e\u7a7a\u7684\u6811\u90fd\u6709\u4e00\u4e2a\u8282\u70b9 \u8def\u5f84(path): \u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u7ecf\u5386\u8fc7\u7684\u8fb9 \u7236\u4eb2(parent)\uff1a\u9664\u4e86\u6839\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0a\u4e00\u5c42\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u5c31\u662f\u5b83\u7684\u7236\u4eb2(\u8282\u70b9) \u5b69\u5b50(children): \u6bcf\u4e2a\u8282\u70b9\u7531\u8fb9\u6307\u5411\u7684\u4e0b\u4e00\u5c42\u8282\u70b9 \u5144\u5f1f(siblings): \u540c\u4e00\u4e2a\u7236\u4eb2\u5e76\u4e14\u5904\u5728\u540c\u4e00\u5c42\u7684\u8282\u70b9 \u5b50\u6811(subtree): \u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u5b83\u6240\u6709\u7684\u540e\u4ee3\u7ec4\u6210\u7684\u5b50\u6811 \u53f6\u5b50\u8282\u70b9(leaf node): \u6ca1\u6709\u5b69\u5b50\u7684\u8282\u70b9\u6210\u4e3a\u53f6\u5b50\u8282\u70b9 \u4e8c\u53c9\u6811:\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u5b69\u5b50 \u4e00\u68f5 size \u4e3a n \u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6\u6700\u591a\u53ef\u4ee5\u662f n\uff0c\u6700\u5c0f\u7684\u9ad8\u5ea6\u662f\u230algn\u230b+1\uff0c\u8fd9\u91cc log \u4ee5 2 \u4e3a\u5e95\u7b80\u5199\u4e3a lgn \u6ee1\u4e8c\u53c9\u6811 \uff1a\u5982\u679c\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\uff08\u975e\u53f6\u8282\u70b9\uff09\u90fd\u5305\u542b\u4e24\u4e2a\u5b69\u5b50\uff0c\u5c31\u6210\u4e3a\u6ee1\u4e8c\u53c9\u6811\u3002 \u5b8c\u7f8e\u4e8c\u53c9\u6811 \uff1a\u5f53\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\u5c31\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6beb\u65e0\u95f4\u9699\u586b\u5145\u4e86 h \u5c42\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811(\u5806\u7684\u5b9e\u73b0) \uff1a\u5f53\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\u51cf\u5c11\u5230 h-1\uff0c\u5e76\u4e14\u6700\u5e95\u5c42\u7684\u69fd\u88ab\u6beb\u65e0\u95f4\u9699\u5730\u4ece\u5de6\u5230\u53f3\u586b\u5145\uff0c\u6211\u4eec\u5c31\u53eb\u5b83\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u4ee3\u7801\u5b9e\u73b0\u4e8c\u53c9\u6811 # \u94fe\u8868\u5b9e\u73b0 class BinTreeNode ( object ): def __init__ ( self , data , left = None , right = None ): self . data , self . left , self . right = data , left , right # \u4e8c\u53c9\u6811\u8868\u793a node_list = [ { 'data' : 'A' , 'left' : 'B' , 'right' : 'C' , 'is_root' : True }, { 'data' : 'B' , 'left' : 'D' , 'right' : 'E' , 'is_root' : False }, { 'data' : 'D' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'E' , 'left' : 'H' , 'right' : None , 'is_root' : False }, { 'data' : 'H' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'C' , 'left' : 'F' , 'right' : 'G' , 'is_root' : False }, { 'data' : 'F' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'G' , 'left' : 'I' , 'right' : 'J' , 'is_root' : False }, { 'data' : 'I' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'J' , 'left' : None , 'right' : None , 'is_root' : False }, ] class BinTree ( object ): def __init__ ( self , root = None ): self . root = root @classmethod def build_from ( cls , node_list ): \"\"\"\u901a\u8fc7\u8282\u70b9\u4fe1\u606f\u6784\u9020\u4e8c\u53c9\u6811 \u7b2c\u4e00\u6b21\u904d\u5386\u6211\u4eec\u6784\u9020 node \u8282\u70b9 \u7b2c\u4e8c\u6b21\u904d\u5386\u6211\u4eec\u7ed9 root \u548c \u5b69\u5b50\u8d4b\u503c \u6700\u540e\u6211\u4eec\u7528 root \u521d\u59cb\u5316\u8fd9\u4e2a\u7c7b\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 :param node_list: {'data': 'A', 'left': None, 'right': None, 'is_root': False} \"\"\" node_dict = {} for node_data in node_list : data = node_data [ 'data' ] node_dict [ data ] = BinTreeNode ( data ) for node_data in node_list : data = node_data [ 'data' ] node = node_dict [ data ] if node_data [ 'is_root' ]: root = node node . left = node_dict . get ( node_data [ 'left' ]) node . right = node_dict . get ( node_data [ 'right' ]) return cls ( root ) btree . preorder_trav ( btree . root ) # \u8f93\u51fa A, B, D, E, H, C, F, G, I, J print ( btree ) \u4e8c\u53c9\u6811\u7684\u904d\u5386(\u9012\u5f52\u5b9e\u73b0) \u5148(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u6839\uff0c\u4e4b\u540e\u662f\u5de6\u5b50\u6811\uff0c\u7136\u540e\u662f\u53f3\u5b50\u6811: A, B, D, E, H, C, F, G, I, J \u4e2d(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u5de6\u5b50\u6811\uff0c\u4e4b\u540e\u662f\u6839\uff0c\u6700\u540e\u662f\u53f3\u5b50\u6811: D B H E A F C I G J \u540e(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u5de6\u5b50\u6811\uff0c\u4e4b\u540e\u662f\u53f3\u5b50\u6811\uff0c\u6700\u540e\u662f\u6839: D H E B F I J G C A # \u5148\u5e8f\u904d\u5386:root->left->right def preorder_trav ( self , subtree ): if subtree is not None : print ( subtree . data , end = \" \" ) self . preorder_trav ( subtree . left ) self . preorder_trav ( subtree . right ) # \u4e2d\u5e8f\u904d\u5386:left->root->right def inorder_trav ( self , subtree ): if subtree is not None : self . inorder_trav ( subtree . left ) print ( subtree . data , end = \" \" ) self . inorder_trav ( subtree . right ) # \u540e\u5e8f\u904d\u5386:left->right->root def postorder_trav ( self , subtree ): if subtree is not None : self . postorder_trav ( subtree . left ) self . postorder_trav ( subtree . right ) print ( subtree . data , end = \" \" ) btree = BinTree . build_from ( node_list ) btree . preorder_trav ( btree . root ) # A, B, D, E, H, C, F, G, I, J btree . inorder_trav ( btree . root ) # D B H E A F C I G J btree . postorder_trav ( btree . root ) # D H E B F I J G C A \u53cd\u8f6c\u4e8c\u53c9\u6811 def reverse ( self , subtree ): if subtree is not None : subtree . left , subtree . right = subtree . right , subtree . left self . reverse ( subtree . left ) self . reverse ( subtree . right ) \u5806\u6392\u5e8f \u00b6 \u5806\u662f\u4e00\u79cd**\u5b8c\u5168\u4e8c\u53c9\u6811(\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0)**\u6709\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u4e24\u79cd\u3002 \u6700\u5927\u5806: \u5bf9\u4e8e\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 V\uff0cV \u7684\u503c\u90fd\u6bd4\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u5927 \uff0c\u79f0\u4e3a \u6700\u5927\u5806\u7279\u6027(heap order property) \u6700\u5927\u5806\u91cc\u7684\u6839\u603b\u662f\u5b58\u50a8\u6700\u5927\u503c\uff0c\u6700\u5c0f\u7684\u503c\u5b58\u50a8\u5728\u53f6\u8282\u70b9\u3002 \u6700\u5c0f\u5806\uff1a\u548c\u6700\u5927\u5806\u76f8\u53cd\uff0c \u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 V\uff0cV \u7684\u4e24\u4e2a\u5b69\u5b50\u7684\u503c\u90fd\u6bd4\u5b83\u5927 \u3002 \u5806\u7684\u8868\u793a(\u5b8c\u5168\u4e8c\u53c9\u6811) ''' \u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7279\u6027\uff0c\u6811\u4e0d\u4f1a\u6709\u95f4\u9699\u3002\u5bf9\u4e8e\u6570\u7ec4\u91cc\u7684\u4e00\u4e2a\u4e0b\u6807 i\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u7236\u4eb2\u548c\u5b69\u5b50\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u4e0b\u6807 ''' # \u8d85\u51fa\u4e0b\u6807\u8868\u793a\u6ca1\u6709\u5bf9\u5e94\u7684\u5b69\u5b50\u8282\u70b9\u3002 parent = int (( i - 1 ) / 2 ) # \u53d6\u6574 left = 2 * i + 1 right = 2 * i + 2 \u5806\u7684\u63d2\u5165 \u83b7\u53d6\u5806\u7684\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c(\u5806\u7684\u6839\u8282\u70b9\u662f\u6700\u5927/\u6700\u5c0f\u503c) \u5806\u5b9e\u73b0+\u5806\u6392\u5e8f # -*- coding:utf-8 -*- # \u7b2c\u4e8c\u7ae0\u62f7\u8d1d\u7684 Array \u4ee3\u7801 class Array ( object ): def __init__ ( self , size = 32 ): self . _size = size self . _items = [ None ] * size def __getitem__ ( self , index ): return self . _items [ index ] def __setitem__ ( self , index , value ): self . _items [ index ] = value def __len__ ( self ): return self . _size def clear ( self , value = None ): for i in range ( len ( self . _items )): self . _items [ i ] = value def __iter__ ( self ): for item in self . _items : yield item ##################################################### # heap \u5b9e\u73b0 ##################################################### class MaxHeap ( object ): \"\"\" Heaps: \u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6700\u5927\u5806\u7684\u975e\u53f6\u5b50\u8282\u70b9\u7684\u503c\u90fd\u6bd4\u5b69\u5b50\u5927\uff0c\u6700\u5c0f\u5806\u7684\u975e\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\u90fd\u6bd4\u5b69\u5b50\u5c0f Heap\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\uff0corder property \u548c shape property(a complete binary tree)\uff0c\u5728\u63d2\u5165 \u4e00\u4e2a\u65b0\u8282\u70b9\u7684\u65f6\u5019\uff0c\u59cb\u7ec8\u8981\u4fdd\u6301\u8fd9\u4e24\u4e2a\u5c5e\u6027 \u63d2\u5165\u64cd\u4f5c\uff1a\u4fdd\u6301\u5806\u5c5e\u6027\u548c\u5b8c\u5168\u4e8c\u53c9\u6811\u5c5e\u6027, sift-up \u64cd\u4f5c\u7ef4\u6301\u5806\u5c5e\u6027 extract\u64cd\u4f5c\uff1a\u53ea\u83b7\u53d6\u6839\u8282\u70b9\u6570\u636e\uff0c\u5e76\u628a\u6811\u6700\u5e95\u5c42\u6700\u53f3\u8282\u70b9copy\u5230\u6839\u8282\u70b9\u540e\uff0csift-down\u64cd\u4f5c\u7ef4\u6301\u5806\u5c5e\u6027 \u7528\u6570\u7ec4\u5b9e\u73b0heap\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4ece\u4e0a\u5f80\u4e0b\u4ece\u5de6\u5230\u53f3\u7ed9\u6bcf\u4e2a\u8282\u70b9\u7f16\u53f7\uff0c\u5219\u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684 \u6027\u8d28\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u8282\u70b9i\uff0c \u5176\u7236\u4eb2\u548c\u5b69\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u5206\u522b\u662f: parent = (i-1) // 2 left = 2 * i + 1 rgiht = 2 * i + 2 \u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\u5806\u4e00\u65b9\u9762\u6548\u7387\u66f4\u9ad8\uff0c\u8282\u7701\u6811\u8282\u70b9\u7684\u5185\u5b58\u5360\u7528\uff0c\u4e00\u65b9\u9762\u8fd8\u53ef\u4ee5\u907f\u514d\u590d\u6742\u7684\u6307\u9488\u64cd\u4f5c\uff0c\u51cf\u5c11 \u8c03\u8bd5\u96be\u5ea6\u3002 \"\"\" def __init__ ( self , maxsize = None ): self . maxsize = maxsize self . _elements = Array ( maxsize ) self . _count = 0 def __len__ ( self ): return self . _count def add ( self , value ): if self . _count >= self . maxsize : raise Exception ( 'full' ) self . _elements [ self . _count ] = value self . _count += 1 self . _siftup ( self . _count - 1 ) # \u7ef4\u6301\u5806\u7684\u7279\u6027 def _siftup ( self , ndx ): if ndx > 0 : parent = int (( ndx - 1 ) / 2 ) if self . _elements [ ndx ] > self . _elements [ parent ]: # \u5982\u679c\u63d2\u5165\u7684\u503c\u5927\u4e8e parent\uff0c\u4e00\u76f4\u4ea4\u6362 self . _elements [ ndx ], self . _elements [ parent ] = self . _elements [ parent ], self . _elements [ ndx ] self . _siftup ( parent ) # \u9012\u5f52 def extract ( self ): if self . _count <= 0 : raise Exception ( 'empty' ) value = self . _elements [ 0 ] # \u4fdd\u5b58 root \u503c self . _count -= 1 self . _elements [ 0 ] = self . _elements [ self . _count ] # \u6700\u53f3\u4e0b\u7684\u8282\u70b9\u653e\u5230root\u540esiftDown self . _siftdown ( 0 ) # \u7ef4\u6301\u5806\u7279\u6027 return value def _siftdown ( self , ndx ): left = 2 * ndx + 1 right = 2 * ndx + 2 # determine which node contains the larger value largest = ndx if ( left < self . _count and # \u6709\u5de6\u5b69\u5b50 self . _elements [ left ] >= self . _elements [ largest ] and self . _elements [ left ] >= self . _elements [ right ]): # \u539f\u4e66\u8fd9\u4e2a\u5730\u65b9\u6ca1\u5199\u5b9e\u9645\u4e0a\u627e\u7684\u672a\u5fc5\u662flargest largest = left elif right < self . _count and self . _elements [ right ] >= self . _elements [ largest ]: largest = right if largest != ndx : self . _elements [ ndx ], self . _elements [ largest ] = self . _elements [ largest ], self . _elements [ ndx ] self . _siftdown ( largest ) def test_maxheap (): import random n = 5 h = MaxHeap ( n ) for i in range ( n ): h . add ( i ) for i in reversed ( range ( n )): assert i == h . extract () # \u5b9e\u73b0\u5806\u6392\u5e8f def heapsort_reverse ( array ): length = len ( array ) maxheap = MaxHeap ( length ) for i in array : maxheap . add ( i ) res = [] for i in range ( length ): res . append ( maxheap . extract ()) return res def test_heapsort_reverse (): import random l = list ( range ( 10 )) random . shuffle ( l ) assert heapsort_reverse ( l ) == sorted ( l , reverse = True ) # \u4f7f\u7528\u81ea\u5e26\u5e93\u5b9e\u73b0\u5806\u6392\u5e8f def heapsort_use_heapq ( iterable ): from heapq import heappush , heappop items = [] for value in iterable : heappush ( items , value ) return [ heappop ( items ) for i in range ( len ( items ))] def test_heapsort_use_heapq (): import random l = list ( range ( 10 )) random . shuffle ( l ) assert heapsort_use_heapq ( l ) == sorted ( l ) python\u81ea\u5e26\u5e93:heapq heappush ( heap , item ) #\u5f80\u5806\u4e2d\u63d2\u5165\u4e00\u6761\u65b0\u7684\u503c heappop ( heap ) #\u4ece\u5806\u4e2d\u5f39\u51fa\u6700\u5c0f\u503c heapreplace ( heap , item ) #\u4ece\u5806\u4e2d\u5f39\u51fa\u6700\u5c0f\u503c\uff0c\u5e76\u5f80\u5806\u4e2d\u63d2\u5165item heappushpop ( heap , item ) #Python3\u4e2d\u7684heappushpop\u66f4\u9ad8\u7ea7 heapify ( x ) #\u4ee5\u7ebf\u6027\u65f6\u95f4\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u5316\u4e3a\u5806 merge ( * iterables , key = None , reverse = False ) #\u5408\u5e76\u5bf9\u4e2a\u5806\uff0c\u7136\u540e\u8f93\u51fa nlargest ( n , iterable , key = None ) #\u8fd4\u56de\u53ef\u679a\u4e3e\u5bf9\u8c61\u4e2d\u7684n\u4e2a\u6700\u5927\u503c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6list nsmallest ( n , iterable , key = None ) #\u8fd4\u56de\u53ef\u679a\u4e3e\u5bf9\u8c61\u4e2d\u7684n\u4e2a\u6700\u5c0f\u503c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6list Top K\u95ee\u9898 \u9762\u8bd5\u9898\u4e2d\u6709\u8fd9\u6837\u4e00\u7c7b\u95ee\u9898\uff0c\u8ba9\u6c42\u51fa\u5927\u91cf\u6570\u636e\u4e2d\u7684top k \u4e2a\u5143\u7d20\uff0c\u6bd4\u5982\u4e00\u4ebf\u4e2a\u6570\u5b57\u4e2d\u6700\u5927\u7684100\u4e2a\u6570\u5b57\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u6709\u5f88\u591a\u79cd\u89e3\u6cd5\uff0c\u6bd4\u5982\u76f4\u63a5\u6392\u5e8f\u3001mapreduce\u3001trie \u6811\u3001\u5206\u6cbb\u6cd5\u7b49\uff0c\u5f53\u7136\u5982\u679c\u5185\u5b58\u591f\u7528\u76f4\u63a5\u6392\u5e8f\u662f\u6700\u7b80\u5355\u7684\u3002 \u5982\u679c\u5185\u5b58\u4e0d\u591f\u7528\u5462\uff1f \u8fd9\u91cc\u6211\u4eec\u63d0\u4e00\u4e0b\u4f7f\u7528\u56fa\u5b9a\u5927\u5c0f\u7684\u5806\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u5f0f\u3002 \u4e00\u5f00\u59cb\u7684\u601d\u8def\u53ef\u80fd\u662f\uff0c\u65e2\u7136\u6c42\u6700\u5927\u7684 k \u4e2a\u6570\uff0c\u662f\u4e0d\u662f\u5e94\u8be5\u7ef4\u62a4\u4e00\u4e2a\u5305\u542b k \u4e2a\u5143\u7d20\u7684\u6700\u5927\u5806\u5462\uff1f \u7a0d\u5fae\u5c1d\u8bd5\u4e0b\u4f60\u4f1a\u53d1\u73b0\u8d70\u4e0d\u901a\u3002\u6211\u4eec\u5148\u7528\u6570\u7ec4\u7684\u524d\u9762 k \u4e2a\u5143\u7d20\u5efa\u7acb\u6700\u5927\u5806\uff0c\u7136\u540e\u5bf9\u5269\u4e0b\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u5bf9\uff0c\u4f46\u662f\u6700\u5927\u5806\u53ea\u80fd\u6bcf\u6b21\u83b7\u53d6\u5806\u9876 \u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6211\u4eec\u53d6\u4e0b\u4e00\u4e2a\u5927\u4e8e\u5806\u9876\u7684\u503c\u548c\u5806\u9876\u66ff\u6362\uff0c\u4f60\u4f1a\u53d1\u73b0\u5806\u5e95\u90e8\u7684\u5c0f\u6570\u4e00\u76f4\u4e0d\u4f1a\u88ab\u6362\u6389\u3002\u5982\u679c\u4e0b\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5806\u9876 \u5c31\u66ff\u6362\u4e5f\u4e0d\u5bf9\uff0c\u8fd9\u6837\u53ef\u80fd\u6700\u5927\u7684\u5143\u7d20\u5c31\u88ab\u6211\u4eec\u4e22\u6389\u4e86\u3002 \u76f8\u53cd\u6211\u4eec\u7528\u6700\u5c0f\u5806\u5462\uff1f \u5148\u8fed\u4ee3\u524d k \u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u4e4b\u540e\u7684\u5143\u7d20\u5982\u679c\u5c0f\u4e8e\u5806\u9876\u6700\u5c0f\u503c\uff0c\u8df3\u8fc7\uff0c\u5426\u5219\u66ff\u6362\u5806\u9876\u5143\u7d20\u5e76\u91cd\u65b0\u8c03\u6574\u5806\u3002\u4f60\u4f1a\u53d1\u73b0\u6700\u5c0f\u5806\u91cc \u6162\u6162\u5c31\u88ab\u66ff\u6362\u6210\u4e86\u6700\u5927\u7684\u90a3\u4e9b\u503c\uff0c\u5e76\u4e14\u6700\u540e\u5806\u9876\u662f\u6700\u5927\u7684 topk \u4e2a\u503c\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \uff08\u6bd4\u59821000\u4e2a\u6570\u627e10\u4e2a\uff0c\u6700\u540e\u5806\u91cc\u5269\u4f59\u7684\u662f [990, 991, 992, 996, 994, 993, 997, 998, 999, 995]\uff0c\u7b2c\u4e00\u4e2a 990 \u6700\u5c0f) import heapq class TopK : \"\"\"\u83b7\u53d6\u5927\u91cf\u5143\u7d20 topk \u5927\u4e2a\u5143\u7d20\uff0c\u56fa\u5b9a\u5185\u5b58 \u601d\u8def\uff1a 1. \u5148\u653e\u5165\u5143\u7d20\u524d k \u4e2a\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806 2. \u8fed\u4ee3\u5269\u4f59\u5143\u7d20\uff1a \u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u8df3\u8fc7\u8be5\u5143\u7d20\uff08\u80af\u5b9a\u4e0d\u662f\u524d k \u5927\uff09 \u5426\u5219\u66ff\u6362\u5806\u9876\u5143\u7d20\u4e3a\u5f53\u524d\u5143\u7d20\uff0c\u5e76\u91cd\u65b0\u8c03\u6574\u5806 \"\"\" def __init__ ( self , iterable , k ): self . minheap = [] self . capacity = k self . iterable = iterable def push ( self , val ): if len ( self . minheap ) >= self . capacity : min_val = self . minheap [ 0 ] if val < min_val : # \u5f53\u7136\u4f60\u53ef\u4ee5\u76f4\u63a5 if val > min_val\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u53ea\u662f\u663e\u793a\u6307\u51fa\u8df3\u8fc7\u8fd9\u4e2a\u5143\u7d20 pass else : heapq . heapreplace ( self . minheap , val ) # \u8fd4\u56de\u5e76\u4e14pop\u5806\u9876\u6700\u5c0f\u503c\uff0c\u63a8\u5165\u65b0\u7684 val \u503c\u5e76\u8c03\u6574\u5806 else : heapq . heappush ( self . minheap , val ) # \u524d\u9762 k \u4e2a\u5143\u7d20\u76f4\u63a5\u653e\u5165minheap def get_topk ( self ): for val in self . iterable : self . push ( val ) return self . minheap def test (): import random i = list ( range ( 1000 )) # \u8fd9\u91cc\u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5143\u7d20\uff0c\u8282\u7701\u5185\u5b58 random . shuffle ( i ) _ = TopK ( i , 10 ) print ( _ . get_topk ()) # [990, 991, 992, 996, 994, 993, 997, 998, 999, 995] if __name__ == '__main__' : test () \u4f18\u5148\u7ea7\u961f\u5217 \u00b6 \u4f60\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u961f\u5217\u4e0d\u662f\u65e9\u5c31\u8bb2\u4e86\u561b\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u653e\u5230\u8fd9\u91cc\u8bb2\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u662f\u56e0\u4e3a\u867d\u7136\u540d\u5b57\u6709\u961f\u5217\uff0c \u4f46\u5176\u5b9e\u662f\u4f7f\u7528\u5806\u6765\u5b9e\u73b0\u7684\u3002\u4e0a\u4e00\u7ae0\u8bb2\u5b8c\u4e86\u5806\uff0c\u8fd9\u4e00\u7ae0\u6211\u4eec\u5c31\u8d81\u70ed\u6253\u94c1\u6765\u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u3002 \u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217 \u4f18\u5148\u7ea7\u961f\u5217(Priority Queue) \u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5165\u961f\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u901a\u5e38\u662f\u4e2a\u6570\u5b57\u6216\u8005\u65f6\u95f4\u6233\u7b49\uff0c \u5f53\u51fa\u961f\u7684\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u6309\u7167\u7ed9\u5b9a\u7684\u4f18\u5148\u7ea7\u51fa\u961f\uff0c\u6211\u4eec\u6309\u7167 TDD(\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1) \u7684\u65b9\u5f0f\u5148\u6765\u5199\u6d4b\u8bd5\u4ee3\u7801\uff1a def test_priority_queue (): size = 5 pq = PriorityQueue ( size ) pq . push ( 5 , 'purple' ) # priority, value pq . push ( 0 , 'white' ) pq . push ( 3 , 'orange' ) pq . push ( 1 , 'black' ) res = [] while not pq . is_empty (): res . append ( pq . pop ()) assert res == [ 'purple' , 'orange' , 'black' , 'white' ] \u4e0a\u8fb9\u5c31\u662f\u671f\u671b\u7684\u884c\u4e3a\uff0c\u5199\u5b8c\u6d4b\u8bd5\u4ee3\u7801\u540e\u6211\u4eec\u6765\u7f16\u5199\u4f18\u5148\u7ea7\u961f\u5217\u7684\u4ee3\u7801\uff0c\u6309\u7167\u51fa\u961f\u7684\u65f6\u5019\u6700\u5927\u4f18\u5148\u7ea7\u5148\u51fa\u7684\u987a\u5e8f\uff1a class PriorityQueue ( object ): def __init__ ( self , maxsize ): self . maxsize = maxsize self . _maxheap = MaxHeap ( maxsize ) def push ( self , priority , value ): # \u6ce8\u610f\u8fd9\u91cc\u628a\u8fd9\u4e2a tuple push \u8fdb\u53bb\uff0cpython \u6bd4\u8f83 tuple \u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u6bd4\u8f83 # \u8fd9\u6837\u5c31\u5f88\u5de7\u5999\u5730\u5b9e\u73b0\u4e86\u6309\u7167\u4f18\u5148\u7ea7\u6392\u5e8f entry = ( priority , value ) # \u5165\u961f\u7684\u65f6\u5019\u4f1a\u6839\u636e priority \u7ef4\u6301\u5806\u7684\u7279\u6027 self . _maxheap . add ( entry ) def pop ( self , with_priority = False ): entry = self . _maxheap . extract () if with_priority : return entry else : return entry [ 1 ] def is_empty ( self ): return len ( self . _maxheap ) == 0 \u4e8c\u53c9\u67e5\u627e\u6811(\u6548\u7387\u6700\u9ad8:O(N)) \u00b6 \u4e8c\u53c9\u67e5\u627e\u6811\u662f\u8fd9\u6837\u4e00\u79cd\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a key \u548c\u5b83\u9644\u5e26\u7684\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9 V\uff1a \u6240\u6709 key \u5c0f\u4e8e V \u7684\u90fd\u88ab\u5b58\u50a8\u5728 V \u7684\u5de6\u5b50\u6811 \u6240\u6709 key \u5927\u4e8e V \u7684\u90fd\u5b58\u50a8\u5728 V \u7684\u53f3\u5b50\u6811 \u8bf4\u767d\u4e86\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u7684 key \u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u90fd\u6bd4\u5b83\u5927\u3002 \u5982\u679c\u4e2d\u5e8f\u904d\u5386(\u4e8c\u53c9\u6811\u904d\u5386\u8bb2\u8fc7\u4e86)\u8fd9\u9897\u4e8c\u53c9\u6811\uff0c\u4f60\u4f1a\u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u6b63\u597d\u662f\u6709\u5e8f\u7684\u3002 # -*- coding: utf-8 -*- class BSTNode ( object ): def __init__ ( self , key , value , left = None , right = None ): self . key , self . value , self . left , self . right = key , value , left , right class BST ( object ): def __init__ ( self , root = None ): self . root = root @classmethod def build_from ( cls , node_list ): cls . size = 0 key_to_node_dict = {} for node_dict in node_list : key = node_dict [ 'key' ] key_to_node_dict [ key ] = BSTNode ( key , value = key ) # \u8fd9\u91cc\u503c\u6682\u65f6\u7528 \u548c key\u4e00\u6837\u7684 for node_dict in node_list : key = node_dict [ 'key' ] node = key_to_node_dict [ key ] if node_dict [ 'is_root' ]: root = node node . left = key_to_node_dict . get ( node_dict [ 'left' ]) node . right = key_to_node_dict . get ( node_dict [ 'right' ]) cls . size += 1 return cls ( root ) # \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c search_key \u5927\u4e8e\u5f53\u524d key\uff0c\u5c31\u53bb\u53f3\u5b50\u6811\u67e5\u627e\uff0c\u5426\u5219\u53bb\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u4e00\u76f4\u5230\u5f53\u524d\u8282\u70b9\u662f None \u4e86\u8bf4\u660e\u6ca1\u627e\u5230\u5bf9\u5e94 key\u3002 def _bst_search ( self , subtree , key ): if subtree is None : # \u6ca1\u627e\u5230 return None elif key < subtree . key : return self . _bst_search ( subtree . left , key ) elif key > subtree . key : return self . _bst_search ( subtree . right , key ) else : return subtree def __contains__ ( self , key ): \"\"\"\u5b9e\u73b0 in \u64cd\u4f5c\u7b26\"\"\" return self . _bst_search ( self . root , key ) is not None def get ( self , key , default = None ): node = self . _bst_search ( self . root , key ) if node is None : return default else : return node . value # \u6700\u5c0f\u503c\u5c31\u4e00\u76f4\u5411\u7740\u5de6\u5b50\u6811\u627e\uff0c\u6700\u5927\u503c\u4e00\u76f4\u5411\u53f3\u5b50\u6811\u627e\uff0c\u9012\u5f52\u67e5\u627e\u5c31\u884c def _bst_min_node ( self , subtree ): if subtree is None : return None elif subtree . left is None : # \u627e\u5230\u5de6\u5b50\u6811\u7684\u5934 return subtree else : return self . _bst_min_node ( subtree . left ) def bst_min ( self ): node = self . _bst_min_node ( self . root ) return node . value if node else None # \u63d2\u5165\u8282\u70b9\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u4e00\u76f4\u4fdd\u6301 BST \u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u901a\u8fc7\u9012\u5f52\u6bd4\u8f83\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u4f60\u4f1a\u53d1\u73b0\u65b0\u8282\u70b9\u603b\u662f\u88ab\u4f5c\u4e3a\u53f6\u5b50\u7ed3\u70b9\u63d2\u5165(\u56e0\u4e3a\u63d2\u5165\u7684\u503c\u603b\u662f\u4f1a\u4e00\u76f4\u548c\u6bd4\u8f83\uff0c\u4e00\u76f4\u5f80\u4e0b\u8d70) def _bst_insert ( self , subtree , key , value ): \"\"\" \u63d2\u5165\u5e76\u4e14\u8fd4\u56de\u6839\u8282\u70b9 :param subtree: :param key: :param value: \"\"\" if subtree is None : # \u63d2\u5165\u7684\u8282\u70b9\u4e00\u5b9a\u662f\u6839\u8282\u70b9\uff0c\u5305\u62ec root \u4e3a\u7a7a\u7684\u60c5\u51b5 subtree = BSTNode ( key , value ) elif key < subtree . key : subtree . left = self . _bst_insert ( subtree . left , key , value ) elif key > subtree . key : subtree . right = self . _bst_insert ( subtree . right , key , value ) return subtree def add ( self , key , value ): node = self . _bst_search ( self . root , key ) if node is not None : # \u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684 key node . value = value return False else : self . root = self . _bst_insert ( self . root , key , value ) self . size += 1 return True # \u5220\u9664\u64cd\u4f5c\u76f8\u6bd4\u4e0a\u8fb9\u7684\u64cd\u4f5c\u8981\u9ebb\u70e6\u5f88\u591a\uff0c\u9996\u5148\u9700\u8981\u5b9a\u4f4d\u4e00\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8282\u70b9\u540e\uff0c\u6211\u4eec\u9700\u8981\u59cb\u7ec8\u4fdd\u6301 BST \u7684\u6027\u8d28\u3002 \u5220\u9664\u4e00\u4e2a\u8282\u70b9\u6d89\u53ca\u5230\u4e09\u79cd\u60c5\u51b5\uff1a\u8282\u70b9\u662f\u53f6\u8282\u70b9,\u8282\u70b9\u6709\u4e00\u4e2a\u5b69\u5b50,\u8282\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50 def _bst_remove ( self , subtree , key ): \"\"\"\u5220\u9664\u8282\u70b9\u5e76\u8fd4\u56de\u6839\u8282\u70b9\"\"\" if subtree is None : return None elif key < subtree . key : subtree . left = self . _bst_remove ( subtree . left , key ) return subtree elif key > subtree . key : subtree . right = self . _bst_remove ( subtree . right , key ) return subtree else : # \u627e\u5230\u4e86\u9700\u8981\u5220\u9664\u7684\u8282\u70b9 if subtree . left is None and subtree . right is None : # \u53f6\u8282\u70b9(\u6700\u7b80\u5355\u7684\u60c5\u51b5)\uff0c\u8fd4\u56de None \u5373\u53ea\u9700\u8981\u628a\u5b83\u7684\u7236\u4eb2\u6307\u5411\u5b83\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a None \u5c31\u597d return None # \u5220\u9664\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u62ff\u6389\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u4e4b\u540e\u628a\u5b83\u7684\u7236\u4eb2\u6307\u5411\u5b83\u7684\u5b69\u5b50\u5c31\u884c\uff0c\u56e0\u4e3a\u6839\u636e BST \u5de6\u5b50\u6811\u90fd\u5c0f\u4e8e\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u90fd\u5927\u4e8e\u8282\u70b9\u7684\u7279\u6027\uff0c\u5220\u9664\u5b83\u4e4b\u540e\u8fd9\u4e2a\u6761\u4ef6\u4f9d\u65e7\u6ee1\u8db3\u3002 elif subtree . left is None or subtree . right is None : # \u53ea\u6709\u4e00\u4e2a\u5b69\u5b50 if subtree . left is not None : return subtree . left # \u8fd4\u56de\u5b83\u7684\u5b69\u5b50\u5e76\u8ba9\u5b83\u7684\u7236\u4eb2\u6307\u8fc7\u53bb else : return subtree . right # \u5220\u9664\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u8282\u70b9:\u6bd4\u8f83\u9ebb\u70e6\uff0c\u540e\u7eed\u89e3\u91ca else : # \u4fe9\u5b69\u5b50\uff0c\u5bfb\u627e\u540e\u7ee7\u8282\u70b9\u66ff\u6362\uff0c\u5e76\u5220\u9664\u5176\u53f3\u5b50\u6811\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u540c\u65f6\u66f4\u65b0\u5176\u53f3\u5b50\u6811 successor_node = self . _bst_min_node ( subtree . right ) subtree . key , subtree . value = successor_node . key , successor_node . value subtree . right = self . _bst_remove ( subtree . right , successor_node . key ) return subtree def remove ( self , key ): assert key in self self . size -= 1 return self . _bst_remove ( self . root , key ) NODE_LIST = [ { 'key' : 60 , 'left' : 12 , 'right' : 90 , 'is_root' : True }, { 'key' : 12 , 'left' : 4 , 'right' : 41 , 'is_root' : False }, { 'key' : 4 , 'left' : 1 , 'right' : None , 'is_root' : False }, { 'key' : 1 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 41 , 'left' : 29 , 'right' : None , 'is_root' : False }, { 'key' : 29 , 'left' : 23 , 'right' : 37 , 'is_root' : False }, { 'key' : 23 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 37 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 90 , 'left' : 71 , 'right' : 100 , 'is_root' : False }, { 'key' : 71 , 'left' : None , 'right' : 84 , 'is_root' : False }, { 'key' : 100 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 84 , 'left' : None , 'right' : None , 'is_root' : False }, ] def test_bst_tree (): bst = BST . build_from ( NODE_LIST ) for node_dict in NODE_LIST : key = node_dict [ 'key' ] assert bst . get ( key ) == key assert bst . size == len ( NODE_LIST ) assert bst . get ( - 1 ) is None # \u5355\u4f8b\u7684 None \u6211\u4eec\u7528 is \u6765\u6bd4\u8f83 assert bst . bst_min () == 1 bst . add ( 0 , 0 ) assert bst . bst_min () == 0 bst . remove ( 12 ) assert bst . get ( 12 ) is None bst . remove ( 1 ) assert bst . get ( 1 ) is None bst . remove ( 29 ) assert bst . get ( 29 ) is None \u5220\u9664\u542b\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u8282\u70b9 \u8fd9\u91cc\u6211\u4eec\u7528\u53e6\u4e00\u79cd\u975e\u5e38\u5de7\u5999\u7684\u65b9\u5f0f\u3002 \u8fd8\u8bb0\u5f97\u4e0a\u8fb9\u63d0\u5230\u7684\u5417\uff0c\u5982\u679c\u4f60\u4e2d\u5e8f\u904d\u5386 BST \u5e76\u4e14\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 key\uff0c\u4f60\u4f1a\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u3002 [1 4 12 23 29 37 41 60 71 84 90 100] \u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6982\u5ff5\uff0c\u903b\u8f91\u524d\u4efb(predecessor)\u548c\u540e\u7ee7(successor)\uff0c\u8bf7\u770b\u4e0b\u56fe: 12 \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u903b\u8f91\u524d\u4efb\u548c\u540e\u7ee7\u5206\u522b\u662f 4 \u548c 23 \u8282\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u5220\u9664 12 \u8fd9\u4e2a\u8282\u70b9\uff1a \u627e\u5230\u5f85\u5220\u9664\u8282\u70b9 N(12) \u7684\u540e\u7ee7\u8282\u70b9 S(23) \u590d\u5236\u8282\u70b9 S \u5230\u8282\u70b9 N \u4ece N \u7684\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u8282\u70b9 S\uff0c\u5e76\u66f4\u65b0\u5176\u5220\u9664\u540e\u7ee7\u8282\u70b9\u540e\u7684\u53f3\u5b50\u6811 \u8bf4\u767d\u4e86\u5c31\u662f\u627e\u5230\u540e\u7ee7\u5e76\u4e14\u66ff\u6362\uff0c\u8fd9\u91cc\u4e4b\u6240\u4ee5\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u65b9\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u4f60\u4f1a\u53d1\u73b0\u66ff\u6362\u540e\u4f9d\u65e7\u662f\u4fdd\u6301\u4e86 BST \u7684\u6027\u8d28\u3002 \u6709\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u627e\u5230\u540e\u7ee7\u8282\u70b9\u5462\uff1f\u5f85\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u7684\u8282\u70b9\u4e0d\u5c31\u662f\u540e\u7ee7\u561b\uff0c\u4e0a\u8fb9\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u627e\u5230\u6700\u5c0f key \u7684\u65b9\u6cd5\u4e86\u3002 \u56fe \u00b6 \u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6709\u8282\u70b9(node)\u548c\u8fb9(edge)\u7ec4\u6210\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u90bb\u7684\u8282\u70b9\u79f0\u4e4b\u4e3a\u90bb\u5c45\u3002 \u6ce8\u610f\u56fe\u5206\u4e3a\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\uff0c \u6bd4\u5982\u6709\u4e9b\u8def\u662f\u5355\u884c\u9053\uff0c\u6709\u4e9b\u662f\u53cc\u884c\u9053\uff0c\u6709\u5411\u56fe\u6211\u4eec\u7528\u7bad\u5934\u6307\u5411\uff0c\u65e0\u5411\u56fe\u5c31\u662f\u4e00\u6761\u76f4\u7ebf\u8fde\u63a5\u3002 \u90bb\u63a5\u8868\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u56fe\u4e2d\u7684\u70b9\uff0c\u5c06\u5b83\u7684\u90bb\u5c45\u653e\u5230\u4e00\u4e2a\u94fe\u8868\u91cc \u90bb\u63a5\u77e9\u9635\uff1a\u5bf9\u4e8e n \u4e2a\u70b9\uff0c\u6784\u9020\u4e00\u4e2a n * n \u7684\u77e9\u9635\uff0c\u5982\u679c\u6709\u4ece\u70b9 i \u5230\u70b9 j \u7684\u8fb9\uff0c\u5c31\u5c06\u77e9\u9635\u7684\u4f4d\u7f6e matrix[i][j] \u7f6e\u4e3a 1. \u7528\u77e9\u9635\u5b58\u50a8\u56fe\u662f\u975e\u5e38\u8017\u8d39\u7a7a\u95f4\u7684\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u77e9\u9635\u662f\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u8fb9\u9009\u62e9\u4f7f\u7528\u90bb\u63a5\u8868\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(BFS) BFS \u7c7b\u4f3c\u4e8e\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5148\u8bbf\u95ee\u79bb A \u6700\u8fd1\u7684\u70b9\uff0c\u63a5\u7740\u8bbf\u95ee\u6b21\u8fd1\u7684\u70b9\u3002\u6211\u4eec\u5148\u6765\u6784\u9020\u4e00\u4e2a\u56fe\uff1a graph = { 'A' : [ 'B' , 'F' ], 'B' : [ 'C' , 'I' , 'G' ], 'C' : [ 'B' , 'I' , 'D' ], 'D' : [ 'C' , 'I' , 'G' , 'H' , 'E' ], 'E' : [ 'D' , 'H' , 'F' ], 'F' : [ 'A' , 'G' , 'E' ], 'G' : [ 'B' , 'F' , 'H' , 'D' ], 'H' : [ 'G' , 'D' , 'E' ], 'I' : [ 'B' , 'C' , 'D' ], } \u5982\u4f55\u300e\u7531\u8fd1\u53ca\u8fdc\u300f\u5730\u8bbf\u95ee\u8282\u70b9\u5462\uff1f\u6211\u4eec\u5148\u8bbf\u95ee\u8d77\u70b9 A \u7684\u90bb\u5c45\uff0c\u7136\u540e\u90bb\u5c45\u8bbf\u95ee\u5b8c\u518d\u8bbf\u95ee\u90bb\u5c45\u7684\u90bb\u5c45\u4e0d\u5c31\u884c\u4e86\uff1f \u5c31\u662f\u8fd9\u4e2a\u601d\u60f3\uff0c\u4e0d\u8fc7\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u961f\u5217\u8f85\u52a9\uff0c\u961f\u5217\u4e4b\u524d\u8bf4\u8fc7\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7ed3\u6784\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u8d77\u70b9\u7684\u90bb\u5c45\u5148\u5165\u961f\uff0c \u5f53\u90bb\u5c45\u8bbf\u95ee\u5b8c\u4e86\u518d\u53bb\u8bbf\u95ee\u90bb\u5c45\u7684\u90bb\u5c45\u5c31\u53ef\u4ee5\u4e86\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u4e2a set \u8bb0\u5f55\u5b83\u5c31\u597d\u4e86\u3002\u4ee3\u7801\u5982\u4e0b # -*- coding: utf-8 -*- from collections import deque GRAPH = { 'A' : [ 'B' , 'F' ], 'B' : [ 'C' , 'I' , 'G' ], 'C' : [ 'B' , 'I' , 'D' ], 'D' : [ 'C' , 'I' , 'G' , 'H' , 'E' ], 'E' : [ 'D' , 'H' , 'F' ], 'F' : [ 'A' , 'G' , 'E' ], 'G' : [ 'B' , 'F' , 'H' , 'D' ], 'H' : [ 'G' , 'D' , 'E' ], 'I' : [ 'B' , 'C' , 'D' ], } class Queue ( object ): def __init__ ( self ): self . _deque = deque () def push ( self , value ): return self . _deque . append ( value ) def pop ( self ): return self . _deque . popleft () def __len__ ( self ): return len ( self . _deque ) def bfs ( graph , start ): search_queue = Queue () search_queue . push ( start ) searched = set () while search_queue : # \u961f\u5217\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed cur_node = search_queue . pop () if cur_node not in searched : yield cur_node searched . add ( cur_node ) for node in graph [ cur_node ]: search_queue . push ( node ) print ( 'bfs:' ) bfs ( GRAPH , 'A' ) \"\"\" bfs: A B F C I G E D H \"\"\" \u6df1\u5ea6\u4f18\u5148\u641c\u7d22(DFS) \u6df1\u5ea6\u4f18\u5148\u641c\u7d22(DFS)\u662f\u6bcf\u9047\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u76f4\u63a5\u53bb\u8bbf\u95ee\u5b83\u7684\u90bb\u5c45\u8282\u70b9\uff0c\u4e0d\u65ad\u52a0\u6df1\u3002\u4ee3\u7801\u5176\u5b9e\u5f88\u7b80\u5355\uff1a DFS_SEARCHED = set () def dfs ( graph , start ): if start not in DFS_SEARCHED : print ( start ) DFS_SEARCHED . add ( start ) for node in graph [ start ]: if node not in DFS_SEARCHED : dfs ( graph , node ) print ( 'dfs:' ) dfs ( GRAPH , 'A' ) # A B C I D G F E H","title":"python\u5237\u9898"},{"location":"python%E5%88%B7%E9%A2%98/#_1","text":"\u6d4b\u8bd5\u51fd\u6570 s . endswith ( t ) #s\u4ee5\u5b57\u7b26\u4e32t\u7ed3\u5c3e\uff0c\u533a\u5206\u5927\u5c0f\u5199 s . startswith ( t ) #s\u4ee5\u5b57\u7b26\u4e32t\u5f00\u5934\uff0c\u533a\u5206\u5927\u5c0f\u5199 s . isalnum () #s\u53ea\u5305\u542b\u5b57\u7b26\u4e32\u6216\u6570\u5b57 s . isalpha () #s\u53ea\u5305\u542b\u5b57\u7b26\u4e32 s . isdigit () #s\u53ea\u5305\u542b\u6570\u5b57\u5b57\u7b26 s . isidentifier () #s\u662f\u5426\u5408\u6cd5\u6807\u8bc6\u7b26 s . islower () #s\u662f\u5426\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u7b26 s . isnumeric () #s\u53ea\u5305\u542b\u6570\u5b57 s . isprintable () #s\u662f\u5426\u53ea\u5305\u542b\u53ef\u6253\u5370\u5b57\u7b26 s . isspace () #s\u53ea\u5305\u542b\u7a7a\u767d\u5b57\u7b26 s . istitle () #s\u662f\u5426\u7b26\u5408\u5934\u8854\u5927\u5c0f\u5199 s . isupper () #s\u662f\u5426\u53ea\u5305\u542b\u5927\u5199\u5b57\u6bcd #s in t t\u662f\u5426\u5305\u542bs \u6539\u53d8\u5b57\u7b26\u4e32\u5927\u5c0f\u5199 s . capitalize () #\u5c06s[0]\u53d8\u6210\u5927\u5199 s . lower () #\u5c06\u5b57\u6bcd\u5168\u90e8\u6539\u6210\u5c0f\u5199 s . upper () #\u5c06\u5b57\u6bcd\u5168\u90e8\u6539\u6210\u5927\u5199 s . swapcase () #\u4ea4\u6362\u5927\u5c0f\u5199 s . title () #\u5c06\u5b57\u7b26\u4e32\u6539\u6210\u7b26\u5408\u5934\u8854\u5927\u5c0f\u5199 \u641c\u7d22\u51fd\u6570 s . find ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e s . rfind ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56de-1\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u7684\u4f4d\u7f6e s . index ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56deValueError\u5f02\u5e38\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e s . rindex ( t ) #\u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u5b57\u7b26\u4e32t\uff0c\u8fd4\u56deValueError\u5f02\u5e38\uff0c\u5426\u5219\u8fd4\u56det\u5728s\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u7684\u4f4d\u7f6e \u8bbe\u7f6e\u683c\u5f0f\u51fd\u6570 s . center ( n , ch ) #\u5305\u542bn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2ds\u4f4d\u4e8e\u4e2d\u95f4\uff0c\u4e24\u8fb9\u4f7f\u7528ch\u586b\u5145 s . ljust ( n , ch ) #\u5305\u542bn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2ds\u4f4d\u4e8e\u53f3\u8fb9\uff0c\u5de6\u8fb9\u4f7f\u7528ch\u586b\u5145 s . rjust ( n , ch ) #\u5305\u542bn\u4e2a\u5b57\u7b26\u4e32\uff0c\u5176\u4e2ds\u4f4d\u4e8e\u5de6\u8fb9\uff0c\u53f3\u8fb9\u4f7f\u7528ch\u586b\u5145 s . format ( ch1 , ch2 ) #s\u4e2d\u5305\u542b{0}{1}\u7684\u4f4d\u7f6e\u88abch1\u3001ch2\u586b\u5145 \u5b57\u7b26\u4e32\u5265\u9664\u51fd\u6570 s . strip ( ch ) #\u53bb\u9664\u5b57\u7b26\u4e32s\u4e2d\u5f00\u5934\u548c\u7ed3\u5c3e\u7684ch\u5b57\u7b26\u4e32 s . lstrip ( ch ) #\u53bb\u9664\u5b57\u7b26\u4e32s\u4e2d\u5f00\u5934\u7684ch\u5b57\u7b26\u4e32 s . rstrip ( ch ) #\u53bb\u9664\u5b57\u7b26\u4e32s\u4e2d\u7ed3\u5c3e\u7684ch\u5b57\u7b26\u4e32 \u5b57\u7b26\u4e32\u62c6\u5206\u51fd\u6570 s . partition ( 'ch' ) #\u5c06\u5b57\u7b26\u4e32s\u6309\u7167ch\u5b57\u7b26\u4e32\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff0c\u4ece\u5de6\u5230\u53f3\u7684\u987a\u5e8f s . rpartition ( 'ch' ) #\u5c06\u5b57\u7b26\u4e32s\u6309\u7167ch\u5b57\u7b26\u4e32\u5206\u6210\u4e09\u4e2a\u90e8\u5206\uff0c\u4ece\u53f3\u5230\u5de6\u7684\u987a\u5e8f s . split ( 'ch' ) #\u4ee5ch\u4e3a\u5206\u9694\u7b26\uff0c\u5c06s\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u8fd4\u56de\u5206\u5272\u540e\u7684\u5217\u8868 s . rsplit ( 'ch' ) #\u4ee5ch\u4e3a\u5206\u9694\u7b26\uff0c\u5c06s\u8fdb\u884c\u5206\u5272\uff0c\u5e76\u8fd4\u56de\u5206\u5272\u540e\u7684\u5217\u8868,\u4eces\u7684\u53f3\u7aef\u5f00\u59cb\u641c\u7d22ch \u5b57\u7b26\u4e32\u66ff\u6362 s . replace ( old , new ) #\u5c06\u5b57\u7b26\u4e32s\u4e2d\u7684old\u5b50\u5b57\u7b26\u4e32\u5168\u90e8\u66ff\u6362\u6210new s . expandtabs ( n ) #\u5c06\u5b57\u7b26\u4e32s\u4e2d\u7684\u6bcf\u4e2a\u5236\u8868\u7b26\u66ff\u6362\u6210n\u4e2a\u7a7a\u683c \u5176\u4ed6\u51fd\u6570 'sep' . join ( seq ) # \u4ee5sep\u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u5c06seq\u6240\u6709\u7684\u5143\u7d20\u5408\u5e76\u6210\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32 s . count ( 'ch' ) #\u7edf\u8ba1\u5b57\u7b26\u4e32s\u4e2dch\u7684\u51fa\u73b0\u6b21\u6570 s . maketrans ( 'old' , 'new' ) -> t #\u521b\u5efa\u4e00\u4e2a\u8f6c\u6362\u8868t\uff0c\u7528\u4e8e\u5c06s\u4e2d\u7684old\u66ff\u6362\u6210new s . translate ( t ) #\u6309\u7167\u8f6c\u6362\u8868t\u5c06s\u4e2d\u7684\u5b57\u7b26\u8fdb\u884c\u66ff\u6362","title":"\u5b57\u7b26\u4e32"},{"location":"python%E5%88%B7%E9%A2%98/#list-","text":"list . append ( value ) # \u5728\u5217\u8868\u672b\u5c3e\u6dfb\u52a0\u65b0\u7684\u5bf9\u8c61 list . extend ( list1 ) # \u6269\u5c55\u5217\u8868\uff0c\u5728\u5217\u8868\u672b\u5c3e\u4e00\u6b21\u6027\u8ffd\u52a0\u53e6\u4e00\u4e2a\u5217\u8868\u4e2d\u7684\u591a\u4e2a\u503c\uff08\u76f8\u5f53\u4e8e\u628alist1\u7684\u5143\u7d20\u590d\u5236\u5230\u4e86list\uff09 list . pop ( index ) # \u79fb\u51fa\u5217\u8868\u4e2d\u7684\u7d22\u5f15\u662findex\u7684\u5143\u7d20\uff0c\uff08\u9ed8\u8ba4\u6700\u540e\u4e00\u4e2a\u5143\u7d20\uff09 list . remove ( value ) # \u79fb\u9664\u5217\u8868\u4e2d\u67d0\u4e2a\u503c\u7684\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\uff08\u53ea\u4f1a\u79fb\u51fa\u7b2c\u4e00\u4e2a\uff09 list . index ( value ) # \u4ece\u5217\u8868\u4e2d\u627e\u51fa\u67d0\u4e2a\u503c\u7b2c\u4e00\u4e2a\u5339\u914d\u9879\u7684\u7d22\u5f15\u4f4d\u7f6e list . insert ( index , value ) # \u5c06\u5bf9\u8c61\u63d2\u5165\u5217\u8868\u7684\u7b2cindex\u4e2a\u4f4d\u7f6e list . sort () # \u4ece\u5c0f\u5230\u5927\u6392\u5e8f list . reverse () # \u53cd\u5411\u5217\u8868\u4e2d\u7684\u5143\u7d20 list . count ( value ) # \u7edf\u8ba1\u67d0\u4e2a\u5143\u7d20\u5728\u5217\u8868\u4e2d\u51fa\u73b0\u7684\u6b21\u6570 list . copy () # \u590d\u5236\u4e00\u4e2a\u526f\u672c\uff0c\u539f\u503c\u548c\u65b0\u590d\u5236\u7684\u53d8\u91cf\u4e92\u4e0d\u5f71\u54cd len ( list ) \u3001 max ( list ) \u3001 min ( list )","title":"List-\u6570\u7ec4"},{"location":"python%E5%88%B7%E9%A2%98/#_2","text":"1.\u5927\u6570\u76f8\u52a0 import time L1 = \"2649821731631836529481632803462831616487712734074314936141303241873417434716340124362304724324324324324323412121323164329751831\" L2 = \"1232141045091731748365195814509145981509438583247509149821493213241431431319999999999999999999999999999999999999999999999999341344779\" startTime = time . time () max_len = max ( len ( L1 ), len ( L2 )) # str.zfill(width) \u6307\u5b9a\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\u539f\u5b57\u7b26\u4e32\u53f3\u5bf9\u9f50\uff0c\u524d\u9762\u586b\u51450\u3002 l1 = L1 . zfill ( max_len ) l2 = L2 . zfill ( max_len ) a1 = list ( l1 ) a2 = list ( l2 ) a3 = [ 0 ] * ( max_len + 1 ) for index in range ( max_len - 1 , - 1 , - 1 ): index_sum = a3 [ index + 1 ] + int ( a1 [ index ]) + int ( a2 [ index ]) less = index_sum - 10 a3 [ index + 1 ] = index_sum % 10 a3 [ index ] = 1 if less >= 0 else 0 if ( a3 [ 0 ] == 0 ): a3 . pop ( 0 ) a33 = [ str ( i ) for i in a3 ] print ( '' . join ( a33 )) print ( '\u8017\u65f6 {0} ms' . format ( time . time () - startTime )) 2.\u5bfb\u627e\u6570\u7ec4\u7684\u4e2d\u5fc3\u7d22\u5f15 class Solution : def pivotIndex ( self , nums : List [ int ]) -> int : total_sum = sum ( nums ) left_sums = 0 for index in range ( 0 , len ( nums )): if index == 0 : left_sums = 0 else : left_sums += nums [ index - 1 ] if ( left_sums * 2 + nums [ index ]) == total_sum : return index return - 1 3.\u81f3\u5c11\u662f\u5176\u4ed6\u6570\u5b57\u4e24\u500d\u7684\u6700\u5927\u6570 class Solution : def dominantIndex ( self , nums : List [ int ]) -> int : max_num = max ( nums ) result = nums . index ( max_num ) nums . remove ( max_num ) for i in range ( len ( nums )): if nums [ i ] * 2 > max_num : return - 1 return result 4.\u52a0\u4e00 class Solution : def plusOne ( self , digits : List [ int ]) -> List [ int ]: if len ( digits ) == 0 : digits = [ 1 ] elif digits [ - 1 ] == 9 : # \u5018\u82e5\u6bcf\u4e00\u6b65\u90fd\u662f\u91cd\u590d\u7684\u64cd\u4f5c\uff0c\u5efa\u8bae\u4f7f\u7528\u9012\u5f52 digits = self . plusOne ( digits [: - 1 ]) digits . append ( 0 ) else : digits [ - 1 ] += 1 return digits","title":"\u6570\u7ec4\u5b57\u7b26\u4e32\u9898\u76ee"},{"location":"python%E5%88%B7%E9%A2%98/#_3","text":"\u5355\u94fe\u8868 class Node ( object ): def __init__ ( self , value = None , next = None ): self . value , self . next = value , next class LinkedList ( object ): def __init__ ( self , maxsize = None ): self . maxsize = maxsize self . root = Node () self . taillNode = None self . length = 0 def __len__ ( self ): return self . length def append ( self , value ): if len ( self ) > self . maxsize and self . maxsize is not None : raise Exception ( \"Full\" ) node = Node ( value = value ) if self . taillNode is None : self . root . next = node else : self . taillNode . next = node self . taillNode = node self . length += 1 def appendLeft ( self , value ): if len ( self ) > self . maxsize and self . maxsize is not None : raise Exception ( \"Full\" ) node = Node ( value = value ) tempNode = self . root . next self . root . next = node node . next = tempNode self . length += 1 def iterNode ( self ): tempNode = self . root . next while tempNode is not self . taillNode : yield tempNode tempNode = tempNode . next yield tempNode # \u8fd9\u4e2a\u8fd4\u56de\u7684\u662ftailNode def __iter__ ( self ): for node in self . iterNode (): yield node . value def find ( self , value ): for index , node in enumerate ( self . iterNode ()): if node . value == value : return index return - 1 def remove ( self , value ): preNode = self . root curNode = self . root . next for curNode in self . iterNode (): if curNode . value == value : preNode . next = curNode . next if curNode is self . taillNode : self . taillNode = preNode del curNode self . length -= 1 return 1 else : preNode = curNode return - 1 def popLeft ( self ): if self . root . next is None : raise Exception ( \"This LinkedList is empty!\" ) tempNode = self . root . next self . root . next = tempNode . next resultValue = tempNode . value del tempNode self . length -= 1 return resultValue def clear ( self ): for node in self . iterNode (): del node self . root . next = None self . length = 0 \u5faa\u73af\u53cc\u94fe\u8868 class Node ( object ): def __init__ ( self , value = None , prev = None , next = None ): self . value , self . prev , self . next = value , prev , next class CircleDoubleLinkedList ( object ): def __init__ ( self , maxsize = None ): self . maxsize = maxsize node = Node () node . prev , node . next = node , node self . root = node self . length = 0 def __len__ ( self ): return self . length def headNone ( self ): return self . root . next def tailNode ( self ): return self . root . prev def append ( self , value ): if self . maxsize is not None and len ( self ) > self . maxsize : raise Exception ( \"Full\" ) node = Node ( value ) tailNode = self . tailNode () tailNode . next = node node . prev = tailNode node . next = self . root self . root . prev = node self . length += 1 def appendLeft ( self , value ): if self . maxsize is not None and len ( self ) > self . maxsize : raise Exception ( \"Full\" ) node = Node ( value ) if self . root . next is self . root : # empty node . next = self . root self . root . prev = node self . root . next = node node . prev = self . root else : headNode = self . root . next node . prev = self . root headNode . next = node node . next = headNode headNode . prev = node self . length += 1 def remove ( self , node ): if node is self . root : raise Exception ( \"This node is not deleted!\" ) else : node . prev = node . next node . next . prev = node . prev del node self . length -= 1 return node def iterNode ( self ): if self . root . next is self . root : raise Exception ( \"Empty\" ) tempNode = self . root . next while tempNode . next is not self . root : yield tempNode tempNode = tempNode . next yield tempNode def __iter__ ( self ): for node in self . iterNode (): yield node . value def iterNodeReverse ( self ): if self . root . prev is self . root : return tempNode = self . root . prev while tempNode . prev is not self . root : yield tempNode tempNode = tempNode . prev yield tempNode \u5feb\u6162\u6307\u9488 \u5feb\u6162\u6307\u9488\u4e2d\u7684\u5feb\u6162\u6307\u7684\u662f\u79fb\u52a8\u7684\u6b65\u957f\uff0c\u5373\u6bcf\u6b21\u5411\u524d\u79fb\u52a8\u901f\u5ea6\u7684\u5feb\u6162\u3002\u4f8b\u5982\u53ef\u4ee5\u8ba9\u5feb\u6307\u9488\u6bcf\u6b21\u6cbf\u94fe\u8868\u5411\u524d\u79fb\u52a8n(\u4e00\u822cn=2)\uff0c\u6162\u6307\u9488\u6bcf\u6b21\u5411\u524d\u79fb\u52a81\u6b21\u3002 class LinkNode : def __init__ ( self , val ): self . val , self . next = val , None # 1\u3001\u5224\u65ad\u5355\u94fe\u8868\u662f\u5426\u662f\u5faa\u73af\u94fe\u8868,\u7c7b\u4f3c\u56f4\u7740\u64cd\u573a\u8dd1\u6b65\uff0c\u7528\u5feb\u6162\u6307\u9488\uff0c\u8dd1\u7684\u5feb\u7684\u603b\u4f1a\u8d76\u4e0a\u8dd1\u7684\u6162\u7684 class JudgeCircle ( object ): def hasCycle ( self , head ): fast , low = head , head while ( fast is not None ) and ( low is not None ): fast = fast . next . next low = low . next if low == fast : return True return False # 2\u3001\u5bfb\u627e\u6709\u5e8f\u94fe\u8868\u7684\u4e2d\u4f4d\u6570:\u5feb\u6307\u9488\u7684\u79fb\u52a8\u901f\u5ea6\u662f\u6162\u6307\u9488\u79fb\u52a8\u901f\u5ea6\u76842\u500d\uff0c\u56e0\u6b64\u5f53\u5feb\u6307\u9488\u5230\u8fbe\u94fe\u8868\u5c3e\u65f6\uff0c\u6162\u6307\u9488\u5230\u8fbe\u4e2d\u70b9\u3002 # \u6ce8\u610f:\u5feb\u6307\u9488\u5230\u8fbe\u5c3e\u90e8\u5206\u5947\u5076\uff0c\u4f8b\u5982fast.next==None,fast.next.next==None class FindMiddle ( object ): def findMid ( self , head ): fast , low = head , head while ( fast is not None ) and ( low is not None ): if fast . next is None : return low . val elif fast . next . next is None : # \u94fe\u8868\u7ed3\u70b9\u4e2a\u6570\u662f\u5076\u6570\uff0c\u8fd9\u65f6\u53ef\u4ee5\u6839\u636e\u201c\u89c4\u5219\u201d\u8fd4\u56de\u4e0a\u4e2d\u4f4d\u6570\u6216\u4e0b\u4e2d\u4f4d\u6570\u6216\uff08\u4e0a\u4e2d\u4f4d\u6570+\u4e0b\u4e2d\u4f4d\u6570\uff09\u7684\u4e00\u534a\u3002 return ( low . val + low . next . val ) / 2 else : fast = fast . next . next low = low . next # 3\u3001\u5220\u9664\u5012\u6570\u7b2cn\u4e2a\u8282\u70b9,\uff0c\u5e76\u4e14\u8fd4\u56de\u94fe\u8868\u7684\u5934\u7ed3\u70b9:\u4f7f\u7528\u524d\u540e\u6307\u9488\u3002\u524d\u6307\u9488\u5148\u8d70n\u6b65\uff0c\u7136\u540e\u524d\u3001\u540e\u6307\u9488\u540c\u65f6\u8d70\uff0c\u5f53\u524d\u6307\u9488\u8d70\u5230\u8282\u70b9\u5c3e\u65f6\uff0c\u540e\u6307\u9488\u521a\u597d\u8d70\u5230\u8981\u5220\u9664\u7684\u8282\u70b9\u3002 class Solution : def removeNthFromEnd ( self , head : ListNode , n : int ) -> ListNode : tempNode = head fast , low = head , head for i in range ( n ): if fast . next : fast = fast . next else : return head . next while fast . next : fast = fast . next low = low . next low . next = low . next . next return tempNode # 4\u3001\u4e0d\u6b62\u94fe\u8868\u4e2d\u53ef\u4ee5\u4f7f\u7528\uff0clist\u4e2d\u4e5f\u53ef\u4ee5\uff0c\u53ea\u4e0d\u8fc7\u662f\u7528\u7d22\u5f15\uff0c\u7ed3\u675f\u6761\u4ef6\u662f<len(nums),\u5220\u9664\u6392\u5e8f\u6570\u7ec4\u4e2d\u7684\u91cd\u590d\u9879,\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6.\u4f8b\u5982:nums = [0,0,1,1,1,2,2,3,3,4]---> [0,1,2,3,4] class Solution : def removeDuplicates ( self , nums : List [ int ]) -> int : low , fast = 0 , 1 while fast < len ( nums ): if nums [ low ] == nums [ fast ]: nums . pop ( fast ) else : low += 1 fast += 1 return len ( nums ) **LRU\u7f13\u5b58\u673a\u5236\uff1a**\u9996\u5148\u6dd8\u6c70**\u6700\u957f\u65f6\u95f4\u672a\u88ab\u4f7f\u7528**\u7684 # \u5982\u4f55\u4f18\u5316\u6590\u6ce2\u90a3\u5951\u7b97\u6cd5:\u4e0b\u9762\u662f\u4f7f\u7528\u9012\u5f52\u7684\uff0c\u9012\u5f52\u610f\u5473\u7740\u6709\u5f88\u591a\u91cd\u590d\u7684 def fib ( n ): if n <= 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) \u666e\u901a\u4f18\u5316:\u6dfb\u52a0\u88c5\u9970\u5668\uff0c\u628a\u91cd\u590d\u7684\u90e8\u5206\u8bb0\u5f55\u4e0b\u6765\u76f4\u63a5\u62ff\u6765\u7528\uff0c\u65e0\u9700\u505a\u7b2c\u4e8c\u6b21\u8ba1\u7b97 import time from functools import wraps # \u88c5\u9970\u5668\u65f6\u5c3d\u91cf\u52a0\u4e0a # \u539f\u56e0:https://www.cnblogs.com/wangtaobiu/p/10614451.html def wrapper ( func ): data = {} # \u7528\u4e8e\u6536\u96c6\u5df2\u7ecf\u8ba1\u7b97\u8fc7\u7684\u90e8\u5206 @wraps ( func ) # \u52a0\u4e0awraps\u88c5\u9970\u5668,\u4fdd\u8bc1\u539f\u51fd\u6570\u5728\u6267\u884c\u65f6\u4e0d\u4f1a\u53d1\u751f\u5f02\u5e38 def collect_repeat ( n ): if n in data : return data [ n ] else : res = func ( n ) data [ n ] = res return res return collect_repeat # \u4e0d\u52a0\u88c5\u9970\u5668\u8017\u65f6:5.364307165145874ms # \u52a0\u4e86\u88c5\u9970\u5668\u8017\u65f6:0.0002818107604980469ms @wrapper def fib ( n ): if n <= 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) if __name__ == \"__main__\" : s = time . time () for i in range ( 1 , 35 ): print ( fib ( i )) total_time = time . time () - s print ( f \"total time: { total_time } ms\" ) \u5185\u5b58\u6709\u9650\u600e\u4e48\u529e \uff1f \u95ee\u9898\u6765\u4e86\uff0c\u5047\u5982\u7a7a\u95f4\u6709\u9650\u600e\u4e48\u529e\uff0c\u6211\u4eec\u4e0d\u53ef\u80fd\u4e00\u76f4\u5411\u7f13\u5b58\u585e\u4e1c\u897f\uff0c\u5f53\u7f13\u5b58\u8fbe\u5230\u4e00\u5b9a\u4e2a\u6570\u4e4b\u540e\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u7b56\u7565\u8e22\u51fa\u4e00\u4e9b\u5143\u7d20\uff0c\u7528\u6765\u7ed9\u65b0\u7684\u5143\u7d20\u817e\u51fa\u7a7a\u95f4\u3002 \u4e00\u822c\u7f13\u5b58\u5931\u6548\u7b56\u7565\u6709 LRU(Least-Recently-Used): \u66ff\u6362\u6389\u6700\u8fd1\u8bf7\u6c42\u6700\u5c11\u7684\u5bf9\u8c61\uff0c \u5b9e\u9645\u4e2d\u4f7f\u7528\u6700\u5e7f \u3002cpu\u7f13\u5b58\u6dd8\u6c70\u548c\u865a\u62df\u5185\u5b58\u6548\u679c\u597d\uff0cweb\u5e94\u7528\u6b20\u4f73 LFU(Least-Frequently-Used): \u7f13\u5b58\u6c61\u67d3\u95ee\u9898(\u4e00\u4e2a\u5148\u524d\u6d41\u884c\u7684\u7f13\u5b58\u5bf9\u8c61\u4f1a\u5728\u7f13\u5b58\u4e2d\u9a7b\u7559\u5f88\u957f\u65f6\u95f4) First in First out(FIFO) Random Cache: \u968f\u673a\u9009\u4e00\u4e2a\u5220\u9664 LRU \u662f\u5e38\u7528\u7684\u4e00\u4e2a\uff0c\u8981\u60f3\u5b9e\u73b0\u4e00\u4e2a LRU\uff0c\u6211\u4eec\u9700\u8981\u4e00\u79cd\u65b9\u5f0f\u80fd\u591f\u8bb0\u5f55\u8bbf\u95ee\u7684\u987a\u5e8f\uff0c\u5e76\u4e14\u6bcf\u6b21\u8bbf\u95ee\u4e4b\u540e\u6211\u4eec\u8981\u628a\u6700\u65b0\u4f7f\u7528\u5230\u7684\u5143\u7d20\u653e\u5230\u6700\u540e\uff08\u8868\u793a\u6700\u65b0\u8bbf\u95ee\uff09\u3002\u5f53\u5bb9\u91cf\u6ee1\u4e86\u4ee5\u540e\uff0c\u6211\u4eec\u8e22\u51fa\u6700\u65e9\u8bbf\u95ee\u7684\u5143\u7d20\u3002\u5047\u5982\u7528\u4e00\u4e2a\u94fe\u8868\u6765\u8868\u793a\u7684\u8bdd\uff1a[1] -> [2] -> [3]\u3002\u5047\u8bbe\u6700\u540e\u8fb9\u662f\u6700\u540e\u8bbf\u95ee\u7684\uff0c\u5f53\u8bbf\u95ee\u5230\u4e00\u4e2a\u5143\u7d20\u4ee5\u540e\uff0c\u6211\u4eec\u628a\u5b83\u653e\u5230\u6700\u540e\u3002\u5f53\u5bb9\u91cf\u6ee1\u4e86\uff0c\u6211\u4eec\u8e22\u51fa\u7b2c\u4e00\u4e2a\u5143\u7d20\u5c31\u884c\u4e86\u3002 \u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u53ef\u80fd\u662f\u7528\u4e00\u4e2a\u94fe\u8868\u6765\u8bb0\u5f55\u8bbf\u95ee\u987a\u5e8f\uff0c\u4f46\u662f\u5355\u94fe\u8868\u6709\u4e2a\u95ee\u9898\u5c31\u662f\u5982\u679c\u8bbf\u95ee\u4e86\u4e2d\u95f4\u4e00\u4e2a\u5143\u7d20\uff0c\u6211\u4eec\u9700\u8981\u62ff\u6389\u5b83\u5e76\u4e14\u653e\u5230\u94fe\u8868\u5c3e\u90e8\u3002\u800c\u5355\u94fe\u8868\u65e0\u6cd5\u5728O(1)\u7684\u65f6\u95f4\u5185\u5220\u9664\u4e00\u4e2a\u8282\u70b9\uff08\u5fc5\u987b\u8981\u5148\u641c\u7d22\u5230\u5b83\uff09\u3002 \u4f46\u662f\u53cc\u7aef\u94fe\u8868\u53ef\u4ee5\uff0c\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u8bb0\u5f55\u4e86\u5b83\u7684\u524d\u540e\u8282\u70b9\uff0c\u53ea\u9700\u8981\u628a\u8981\u5220\u9664\u7684\u8282\u70b9\u7684\u524d\u540e\u8282\u70b9\u94fe\u63a5\u8d77\u6765\u5c31\u884c\u4e86\u3002 \u8fd8\u6709\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u628a\u5220\u9664\u540e\u7684\u8282\u70b9\u653e\u5230\u94fe\u8868\u5c3e\u90e8\uff0c\u5982\u679c\u662f\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u5c31\u53ef\u4ee5\u5566\uff0c\u6211\u4eec\u6709\u4e2a root \u8282\u70b9\u94fe\u63a5\u4e86\u9996\u4f4d\u8282\u70b9\uff0c\u53ea\u9700\u8981\u8ba9 root \u7684\u524d\u4e00\u4e2a\u6307\u5411\u8fd9\u4e2a\u88ab\u5220\u9664\u8282\u70b9\uff0c\u7136\u540e\u8ba9\u4e4b\u524d\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u4e5f\u6307\u5411\u5b83\u5c31\u884c\u4e86\u3002\u4f7f\u7528\u4e86\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u4e4b\u540e\uff0c\u6211\u4eec\u7684\u64cd\u4f5c\u5c31\u90fd\u662f O(1) \u7684\u4e86\u3002 \u8fd9\u4e5f\u5c31\u662f\u4f7f\u7528\u4e00\u4e2a dict \u548c\u4e00\u4e2a \u5faa\u73af\u53cc\u7aef\u94fe\u8868 \u5b9e\u73b0LRU \u7684\u601d\u8def\u3002 \u4e0d\u8fc7\u4e00\u822c\u6211\u4eec\u4f7f\u7528\u5185\u7f6e\u7684 OrderedDict(\u539f\u7406\u548c\u8fd9\u4e2a\u7c7b\u4f3c)\u5c31\u597d\u4e86\uff0c\u8981\u5b9e\u73b0\u4e00\u4e2a\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u662f\u4e00\u4e2a\u4e0d\u7b80\u5355\u7684\u4e8b\u60c5\uff0c\u56e0\u4e3a\u94fe\u8868\u64cd\u4f5c\u5f88\u5bb9\u6613\u51fa\u9519\u3002 \u8865\u5145\uff1a\u5176\u5b9e lru \u6709\u4e2a\u7f3a\u70b9\u5c31\u662f\u989d\u5916\u7684\u94fe\u8868\u6bd4\u8f83\u5360\u7528\u7a7a\u95f4 \uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u7684\u8bdd\u53ef\u4ee5\u770b\u770b redis \u5982\u4f55\u5b9e\u73b0\u7684 lru \u7b97\u6cd5\u3002 \u8865\u51452:OrderedDict # \u4f7f\u7528dict\u65f6\uff0cKey\u662f\u65e0\u5e8f\u7684\u3002\u5728\u5bf9dict\u505a\u8fed\u4ee3\u65f6\uff0c\u6211\u4eec\u65e0\u6cd5\u786e\u5b9aKey\u7684\u987a\u5e8f\u3002\u5982\u679c\u8981\u4fdd\u6301Key\u7684\u987a\u5e8f\uff0c\u53ef\u4ee5\u7528OrderedDict\uff0cKey\u4f1a\u6309\u7167\u63d2\u5165\u7684\u987a\u5e8f\u6392\u5217\uff0c\u800c\u4e0d\u662fKey\u672c\u8eab\u6392\u5e8f\u3002\u6709\u5e8f\u5b9e\u9645\u4e0a\u662f\u7531\u4e00\u4e2a\u53cc\u5411\u94fe\u8868\u5b9e\u73b0\u7684\u3002 OrderedDict . move_to_end ( key , last = True ) >>> d = OrderedDict . fromkeys ( 'abcde' ) >>> d . move_to_end ( 'b' ) >>> '' . join ( d . keys ()) 'acdeb' >>> d . move_to_end ( 'b' , last = False ) >>> '' . join ( d . keys ()) 'bacde' OrderedDict . popitem ( last = True ) # \u9ed8\u8ba4\u4ece\u5220\u9664\u6700\u540e\u4e00\u4e2a(key,value),\u5e76\u4e14\u8fd4\u56de\u5220\u9664\u7684(key,value),last=False\u8868\u793a\u4ece\u9996\u4f4d\u5f00\u59cb\u5220\u9664 LRU\u7f13\u5b58\u4ee3\u7801 # \u603b\u5171\u8017\u65f6:0.0007581710815429688ms,\u867d\u7136\u65f6\u95f4\u7565\u957f,\u4f46\u662f\u5185\u5b58\u8282\u7ea6\u4e0b\u6765\u4e86 import time from collections import OrderedDict class LRUCache : def __init__ ( self , capacity = 128 ): self . capacity = capacity # \u501f\u52a9OrderedDict \u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u5b9e\u73b0\u4e00\u4e2aLRUCache\uff0cOrderedDict\u5185\u90e8\u5176\u5b9e\u4e5f\u662f\u4f7f\u7528\u5faa\u73af\u53cc\u7aef\u94fe\u8868\u5b9e\u73b0\u7684 self . od = OrderedDict () def get ( self , key , default = None ): val = self . od . get ( key , default ) # \u5982\u679c\u6ca1\u6709\u8fd4\u56de default\uff0c\u4fdd\u6301 dict \u8bed\u4e49 if val is not None : self . od . move_to_end ( key ) # \u6bcf\u6b21\u8bbf\u95ee\u5c31\u628akey \u653e\u5230\u6700\u540e\u8868\u793a\u6700\u65b0\u8bbf\u95ee return val def add_or_update ( self , key , value ): if key in self . od : # update self . od [ key ] = value self . od . move_to_end ( key ) else : # insert self . od [ key ] = value if len ( self . od ) > self . capacity : # full self . od . popitem ( last = False ) def __call__ ( self , func ): \"\"\" \u4e00\u4e2a\u7b80\u5355\u7684 LRU \u5b9e\u73b0\u3002\u6709\u4e00\u4e9b\u95ee\u9898\u9700\u8981\u601d\u8003\u4e0b\uff1a - \u8fd9\u91cc\u4e3a\u4e86\u7b80\u5316\u9ed8\u8ba4\u53c2\u6570\u53ea\u6709\u4e00\u4e2a\u6570\u5b57 n\uff0c\u5047\u5982\u53ef\u4ee5\u4f20\u5165\u591a\u4e2a\u53c2\u6570\uff0c\u5982\u4f55\u786e\u5b9a\u7f13\u5b58\u7684key \u5462\uff1f - \u8fd9\u91cc\u5b9e\u73b0\u6ca1\u6709\u8003\u8651\u7ebf\u7a0b\u5b89\u5168\u7684\u95ee\u9898\uff0c\u8981\u5982\u4f55\u624d\u80fd\u5b9e\u73b0\u7ebf\u7a0b\u5b89\u5168\u7684 LRU \u5462\uff1f\u5f53\u7136\u5982\u679c\u4e0d\u662f\u591a\u7ebf\u7a0b\u73af\u5883\u4e0b\u4f7f\u7528\u662f\u4e0d\u9700\u8981\u8003\u8651\u7684 - \u5047\u5982\u8fd9\u91cc\u6ca1\u6709\u7528\u5185\u7f6e\u7684 dict\uff0c\u4f60\u80fd\u4f7f\u7528 redis \u6765\u5b9e\u73b0\u8fd9\u4e2a LRU \u5417\uff0c\u5982\u679c\u4f7f\u7528\u4e86 redis\uff0c\u6211\u4eec\u53ef\u4ee5\u5b58\u50a8\u66f4\u591a\u6570\u636e\u5230\u670d\u52a1\u5668\u3002\u800c\u4f7f\u7528\u5b57\u5178\u5b9e\u9645\u4e0a\u662f\u7f13\u5b58\u4e86Python\u8fdb\u7a0b\u91cc(localCache)\u3002 - \u8fd9\u91cc\u53ea\u662f\u5b9e\u73b0\u4e86 lru \u7b56\u7565\uff0c\u4f60\u80fd\u540c\u65f6\u5b9e\u73b0\u4e00\u4e2a\u8d85\u65f6 timeout \u53c2\u6570\u5417\uff1f\u6bd4\u5982\u50cf\u662fmemcache \u5b9e\u73b0\u7684 lazy expiration \u7b56\u7565 - LRU\u6709\u4e2a\u7f3a\u70b9\u5c31\u662f\uff0c\u5bf9\u4e8e\u5468\u671f\u6027\u7684\u6570\u636e\u8bbf\u95ee\u4f1a\u5bfc\u81f4\u547d\u4e2d\u7387\u8fc5\u901f\u4e0b\u964d\uff0c\u6709\u4e00\u79cd\u4f18\u5316\u662f LRU-K\uff0c\u8bbf\u95ee\u4e86\u6b21\u6570\u8fbe\u5230 k \u6b21\u624d\u4f1a\u5c06\u6570\u636e\u653e\u5165\u7f13\u5b58 \"\"\" def _ ( n ): if n in self . od : return self . get ( n ) else : val = func ( n ) self . add_or_update ( n , val ) return val return _ @LRUCache ( 10 ) def fib ( n ): if n <= 2 : return 1 else : return fib ( n - 1 ) + fib ( n - 2 ) if __name__ == \"__main__\" : s = time . time () for i in range ( 1 , 35 ): print ( fib ( i )) total_time = time . time () - s print ( f \"total time: { total_time } ms\" )","title":"\u94fe\u8868"},{"location":"python%E5%88%B7%E9%A2%98/#_4","text":"from collections import deque d = collections . deque ([]) d . append ( 'a' ) # \u5728\u6700\u53f3\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6 d=deque('a') d . appendleft ( 'b' ) # \u5728\u6700\u5de6\u8fb9\u6dfb\u52a0\u4e00\u4e2a\u5143\u7d20\uff0c\u6b64\u65f6 d=deque(['b', 'a']) d . index ( 'a' , start , end ) #\u67e5\u627e\u6307\u5b9a\u533a\u95f4\u7684\u7d22\u5f15 d . insert ( index , val ) # \u518dindex\u4e4b\u524d\u63d2\u5165val\u5143\u7d20 d . extend ([ 'c' , 'd' ]) # \u5728\u6700\u53f3\u8fb9\u6dfb\u52a0\u6240\u6709\u5143\u7d20\uff0c\u6b64\u65f6 d=deque(['b', 'a', 'c', 'd']) d . extendleft ([ 'e' , 'f' ]) # \u5728\u6700\u5de6\u8fb9\u6dfb\u52a0\u6240\u6709\u5143\u7d20\uff0c\u6b64\u65f6 d=deque(['f', 'e', 'b', 'a', 'c', 'd']) d . pop () # \u5c06\u6700\u53f3\u8fb9\u7684\u5143\u7d20\u53d6\u51fa\uff0c\u8fd4\u56de 'd'\uff0c\u6b64\u65f6 d=deque(['f', 'e', 'b', 'a', 'c']) d . popleft () # \u5c06\u6700\u5de6\u8fb9\u7684\u5143\u7d20\u53d6\u51fa\uff0c\u8fd4\u56de 'f'\uff0c\u6b64\u65f6 d=deque(['e', 'b', 'a', 'c']) d . rotate ( - 2 ) # \u628a\u5de6\u8fb9n\u4e2a\u5143\u7d20\u653e\u53f3\u8fb9\uff08+\u5219\u628a\u53f3\u8fb9\u5143\u7d20\u653e\u5de6\u8fb9\uff09\uff0c\u6b64\u65f6 d=deque(['a', 'c', 'e', 'b']) d . count ( 'a' ) # \u961f\u5217\u4e2d'a'\u7684\u4e2a\u6570\uff0c\u8fd4\u56de 1 d . remove ( 'c' ) # \u4ece\u961f\u5217\u4e2d\u5c06'c'\u5220\u9664\uff0c\u6b64\u65f6 d=deque(['a', 'e', 'b']) d . reverse () # \u5c06\u961f\u5217\u5012\u5e8f\uff0c\u6b64\u65f6 d=deque(['b', 'e', 'a']) d . copy () # \u6d45\u62f7\u8d1d d . clear () # \u5c06\u961f\u5217\u6e05\u7a7a\uff0c\u6b64\u65f6 d=deque([]) \u4f7f\u7528deque\u7684\u65cb\u8f6c\u89e3\u51b3\u7ea6\u745f\u592b\u73af\u95ee\u9898 \"\"\" \u7ea6\u745f\u592b\u7b97\u6cd5 \u636e\u8bf4\u8457\u540d\u72b9\u592a\u5386\u53f2\u5b66\u5bb6 Josephus \u6709\u8fc7\u4ee5\u4e0b\u7684\u6545\u4e8b\uff1a \u5728\u7f57\u9a6c\u4eba\u5360\u9886\u6865\u5854\u5e15\u7279\u540e\uff0c39\u4e2a\u72b9\u592a\u4eba\u4e0e Josephus \u53ca\u4ed6\u7684\u670b\u53cb\u8eb2\u5230\u4e00\u4e2a\u6d1e\u4e2d\uff0c 39\u4e2a\u72b9\u592a\u4eba\u51b3\u5b9a\u5b81\u613f\u6b7b\u4e5f\u4e0d\u8981\u88ab\u654c\u4eba\u6293\u5230\uff0c\u4e8e\u662f\u51b3\u5b9a\u4e86\u4e00\u4e2a\u81ea\u6740\u65b9\u5f0f\uff0c41\u4e2a\u4eba\u6392\u6210\u4e00\u4e2a\u5706\u5708\uff0c \u7531\u7b2c1\u4e2a\u4eba\u5f00\u59cb\u62a5\u6570\uff0c\u6bcf\u62a5\u6570\u5230\u7b2c3\u4eba\u8be5\u4eba\u5c31\u5fc5\u987b\u81ea\u6740\uff0c\u7136\u540e\u518d\u7531\u4e0b\u4e00\u4e2a\u91cd\u65b0\u62a5\u6570\uff0c \u76f4\u5230\u6240\u6709\u4eba\u90fd\u81ea\u6740\u8eab\u4ea1\u4e3a\u6b62\u3002\u7136\u800c Josephus \u548c\u4ed6\u7684\u670b\u53cb\u5e76\u4e0d\u60f3\u81ea\u6740\uff0c \u95ee\u4ed6\u4fe9\u5b89\u6392\u7684\u54ea\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u9003\u8fc7\u8fd9\u573a\u6b7b\u4ea1\u6e38\u620f\uff1f \"\"\" import collections def ysf ( totalNum , mod ): d = collections . deque ( range ( 1 , totalNum + 1 )) # \u5c06\u6bcf\u4e2a\u4eba\u4f9d\u6b21\u7f16\u53f7\uff0c\u653e\u5165\u5230\u961f\u5217\u4e2d while d : d . rotate ( - mod ) # \u961f\u5217\u5411\u5de6\u65cb\u8f6cb\u6b65 print ( d . pop ()) # \u5c06\u6700\u53f3\u8fb9\u7684\u5220\u9664\uff0c\u5373\u81ea\u6740\u7684\u4eba if __name__ == '__main__' : ysf ( 41 , 3 ) # \u8f93\u51fa\u7684\u662f\u81ea\u6740\u7684\u987a\u5e8f\u3002\u6700\u540e\u4e24\u4e2a\u662f16\u548c31\uff0c\u8bf4\u660e\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u53ef\u4ee5\u4fdd\u8bc1\u4ed6\u4fe9\u7684\u5b89\u5168\u3002","title":"\u53cc\u7aef\u961f\u5217(\u5177\u6709\u961f\u5217\u548c\u6808\u7684\u6027\u8d28)"},{"location":"python%E5%88%B7%E9%A2%98/#_5","text":"\u6709\u6ca1\u6709\u4e00\u79cd\u65b9\u6cd5\u53ef\u4ee5\u5feb\u901f\u5b9a\u4f4d\u548c\u5220\u9664\u5143\u7d20\u5417\uff1f\u7ed9\u6bcf\u4e2a\u5143\u7d20\u4e00\u79cd\u300e\u903b\u8f91\u4e0b\u6807\u300f\uff0c\u7136\u540e\u76f4\u63a5\u627e\u5230\u5b83\uff0c\u54c8\u5e0c\u8868\u5c31\u662f\u8fd9\u79cd\u5b9e\u73b0\u3002\u5b83\u901a\u8fc7\u4e00\u4e2a\u54c8\u5e0c\u51fd\u6570\u6765\u8ba1\u7b97\u4e00\u4e2a\u5143\u7d20\u5e94\u8be5\u653e\u5728\u6570\u7ec4\u54ea\u4e2a\u4f4d\u7f6e\uff0c\u5f53\u7136\u5bf9\u4e8e\u4e00\u4e2a\u7279\u5b9a\u7684\u5143\u7d20\uff0c\u54c8\u5e0c\u51fd\u6570\u6bcf\u6b21\u8ba1\u7b97\u7684\u4e0b\u6807\u5fc5\u987b\u8981\u4e00\u6837\u624d\u53ef\u4ee5\uff0c\u800c\u4e14\u8303\u56f4\u4e0d\u80fd\u8d85\u8fc7\u7ed9\u5b9a\u7684\u6570\u7ec4\u957f\u5ea6\u3002 \u4e3e\u4f8b\u5b50 # \u54c8\u5e0c\u51fd\u6570\uff1ah(key) = key % M,\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u6bcf\u4e2a\u5143\u7d20\u7684\u4e0b\u6807\u56fa\u5b9a\uff0c\u4f46\u662f\u6709\u5f0a\u7aef:\u4e0b\u6807\u53d1\u751f\u51b2\u7a81\u600e\u4e48\u529e\u5462\uff1f M = 13 h ( 765 ) = 765 % M = 11 h ( 431 ) = 431 % M = 2 h ( 96 ) = 96 % M = 5 h ( 142 ) = 142 % M = 12 h ( 579 ) = 579 % M = 7 h ( 226 ) = 226 % M = 5 h ( 903 ) = 903 % M = 6 h ( 388 ) = 388 % M = 11 \u4f46\u662f\u5982\u679c\u54c8\u5e0c\u51fd\u6570\u9009\u4e0d\u597d\u7684\u8bdd\uff0c\u53ef\u80fd\u5c31\u5bfc\u81f4\u51b2\u7a81\u592a\u591a\u4e00\u4e2a\u94fe\u53d8\u5f97\u592a\u957f\uff0c\u8fd9\u6837\u67e5\u627e\u5c31\u4e0d\u518d\u662f O(1) \u7684\u4e86 \u5f00\u653e\u5bfb\u5740\u6cd5 \u5b83\u7684\u57fa\u672c\u601d\u60f3\u662f\u5f53\u4e00\u4e2a\u69fd\u88ab\u5360\u7528\u7684\u65f6\u5019\uff0c\u91c7\u7528\u4e00\u79cd\u65b9\u5f0f\u6765\u5bfb\u627e\u4e0b\u4e00\u4e2a\u53ef\u7528\u7684\u69fd\u3002 \uff08\u8fd9\u91cc\u69fd\u6307\u7684\u662f\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6839\u636e\u627e\u4e0b\u4e00\u4e2a\u69fd\u7684\u65b9\u5f0f\u4e0d\u540c\uff0c\u5206\u4e3a: # \u672c\u6b21\u9009\u7528 \u4e8c\u6b21\u63a2\u67e5\u51fd\u6570\uff0c\u4ee3\u7801\u4e3e\u4f8b\u5982\u4e0b inserted_index_set = set () M = 13 def h ( key , M = 13 ): return key % M to_insert = [ 765 , 431 , 96 , 142 , 579 , 226 , 903 , 388 ] for number in to_insert : index = h ( number ) first_index = index # \u5018\u82e5\u51b2\u7a81\u4e86\uff0c\u4f7f\u7528first_index\u53c2\u4e0e\u8ba1\u7b97 i = 1 while index in inserted_index_set : # \u5982\u679c\u8ba1\u7b97\u53d1\u73b0\u5df2\u7ecf\u5360\u7528\uff0c\u7ee7\u7eed\u8ba1\u7b97\u5f97\u5230\u4e0b\u4e00\u4e2a\u53ef\u7528\u69fd\u7684\u4f4d\u7f6e print ( ' \\t h( {number} ) = {number} % M = {index} collision' . format ( number = number , index = index )) index = ( first_index + i * i ) % M # \u6839\u636e\u4e8c\u6b21\u65b9\u63a2\u67e5\u7684\u516c\u5f0f\u91cd\u65b0\u8ba1\u7b97\u4e0b\u4e00\u4e2a\u9700\u8981\u63d2\u5165\u7684\u4f4d\u7f6e i += 1 else : print ( 'h( {number} ) = {number} % M = {index} ' . format ( number = number , index = index )) inserted_index_set . add ( index ) \u88c5\u8f7d\u56e0\u5b50 \u5982\u679c\u7ee7\u7eed\u5f80\u6211\u4eec\u7684\u54c8\u5e0c\u8868\u91cc\u585e\u4e1c\u897f\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1f\u7a7a\u95f4\u4e0d\u591f\u7528\u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e00\u4e2a\u8d1f\u8f7d\u56e0\u5b50\u7684\u6982\u5ff5(load factor)\uff0c\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u5df2\u7ecf\u4f7f\u7528\u7684\u69fd\u6570\u6bd4\u54c8\u5e0c\u8868\u5927\u5c0f\u3002 \u6bd4\u5982\u6211\u4eec\u4e0a\u8fb9\u7684\u4f8b\u5b50\u63d2\u5165\u4e86 8 \u4e2a\u5143\u7d20\uff0c\u54c8\u5e0c\u8868\u603b\u5927\u5c0f\u662f 13\uff0c \u5b83\u7684 load factor \u5c31\u662f 8/13\u22480.62 \u3002\u5f53\u6211\u4eec\u7ee7\u7eed\u5f80\u54c8\u5e0c\u8868\u63d2\u5165\u6570\u636e\u7684\u65f6\u5019\uff0c\u5f88\u5feb\u5c31\u4e0d\u591f\u7528\u4e86\u3002 \u901a\u5e38\u5f53\u8d1f\u8f7d\u56e0\u5b50\u5f00\u59cb\u8d85\u8fc7 0.8 \u7684\u65f6\u5019\uff0c\u5c31\u8981\u65b0\u5f00\u8f9f\u7a7a\u95f4\u5e76\u4e14\u91cd\u65b0\u8fdb\u884c\u6563\u5217\u4e86\u3002\u91cd\u54c8\u5e0c\u89c4\u5219: cpython\u4e2d\u89c4\u5219 : Currently set to used*3 \u4ee3\u7801\u9610\u8ff0 # -*- coding: utf-8 -*- # \u4ece\u6570\u7ec4\u548c\u5217\u8868\u7ae0\u590d\u5236\u7684\u4ee3\u7801 class Array ( object ): def __init__ ( self , size = 32 , init = None ): self . _size = size self . _items = [ init ] * size def __getitem__ ( self , index ): return self . _items [ index ] def __setitem__ ( self , index , value ): self . _items [ index ] = value def __len__ ( self ): return self . _size def clear ( self , value = None ): for i in range ( len ( self . _items )): self . _items [ i ] = value def __iter__ ( self ): for item in self . _items : yield item class Slot ( object ): \"\"\"\u5b9a\u4e49\u4e00\u4e2a hash \u8868\u6570\u7ec4\u7684\u69fd(slot \u8fd9\u91cc\u6307\u7684\u5c31\u662f\u6570\u7ec4\u7684\u4e00\u4e2a\u4f4d\u7f6e) hash table \u5c31\u662f\u4e00\u4e2a \u6570\u7ec4\uff0c\u6bcf\u4e2a\u6570\u7ec4\u7684\u5143\u7d20\uff08\u4e5f\u53ebslot\u69fd\uff09\u662f\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u8c61\u5305\u542b\u4e24\u4e2a\u5c5e\u6027 key \u548c value\u3002 \u6ce8\u610f\uff0c\u4e00\u4e2a\u69fd\u6709\u4e09\u79cd\u72b6\u6001\uff0c\u770b\u4f60\u80fd\u5426\u60f3\u660e\u767d\u3002\u76f8\u6bd4\u94fe\u63a5\u6cd5\u89e3\u51b3\u51b2\u7a81\uff0c\u63a2\u67e5\u6cd5\u5220\u9664\u4e00\u4e2a key \u7684\u64cd\u4f5c\u7a0d\u5fae\u590d\u6742\u3002 1.\u4ece\u672a\u4f7f\u7528 HashMap.UNUSED\u3002\u6b64\u69fd\u6ca1\u6709\u88ab\u4f7f\u7528\u548c\u51b2\u7a81\u8fc7\uff0c\u67e5\u627e\u65f6\u53ea\u8981\u627e\u5230 UNUSED \u5c31\u4e0d\u7528\u518d\u7ee7\u7eed\u63a2\u67e5\u4e86 2.\u4f7f\u7528\u8fc7\u4f46\u662f remove \u4e86\uff0c\u6b64\u65f6\u662f HashMap.EMPTY\uff0c\u8be5\u63a2\u67e5\u70b9\u540e\u8fb9\u7684\u5143\u7d20\u4ecd\u7136\u53ef\u80fd\u662f\u6709key\u7684\uff0c\u9700\u8981\u7ee7\u7eed\u67e5\u627e 3.\u69fd\u6b63\u5728\u4f7f\u7528 Slot \u8282\u70b9 \"\"\" def __init__ ( self , key , value ): self . key , self . value = key , value class HashTable ( object ): UNUSED = None # \u6ca1\u88ab\u4f7f\u7528\u8fc7 EMPTY = Slot ( None , None ) # \u4f7f\u7528\u5374\u88ab\u5220\u9664\u8fc7 def __init__ ( self ): self . _table = Array ( 8 , init = HashTable . UNUSED ) # \u4fdd\u6301 2*i \u6b21\u65b9 self . length = 0 @property # \u88c5\u8f7d\u56e0\u5b50 def _load_factor ( self ): # load_factor \u8d85\u8fc7 0.8 \u91cd\u65b0\u5206\u914d\uff0c\u81ea\u8eab\u6570\u503c\u957f\u5ea6/Array\u603b\u957f\u5ea6 return self . length / float ( len ( self . _table )) def __len__ ( self ): return self . length # \u54c8\u5e0c\u51fd\u6570 def _hash ( self , key ): return abs ( hash ( key )) % len ( self . _table ) def _find_key ( self , key ): \"\"\" \u89e3\u91ca\u4e00\u4e2a slot \u4e3a UNUSED \u548c EMPTY \u7684\u533a\u522b \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u4e8c\u6b21\u63a2\u67e5\u7684\u65b9\u5f0f\uff0c\u5047\u5982\u6709\u4e24\u4e2a\u5143\u7d20 A\uff0cB \u51b2\u7a81\u4e86\uff0c\u9996\u5148A hash \u5f97\u5230\u662f slot \u4e0b\u68075\uff0cA \u653e\u5230\u4e86\u7b2c5\u4e2a\u69fd\uff0c\u4e4b\u540e\u63d2\u5165 B \u56e0\u4e3a\u51b2\u7a81\u4e86\uff0c\u6240\u4ee5\u7ee7\u7eed\u6839\u636e\u4e8c\u6b21\u63a2\u67e5\u65b9\u5f0f\u653e\u5230\u4e86 slot8\u3002 \u7136\u540e\u5220\u9664 A\uff0c\u69fd 5 \u88ab\u7f6e\u4e3a EMPTY\u3002\u7136\u540e\u6211\u53bb\u67e5\u627e B\uff0c\u7b2c\u4e00\u6b21 hash \u5f97\u5230\u7684\u662f \u69fd5\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u6211\u8fd8\u662f\u9700\u8981\u7b2c\u4e8c\u6b21\u8ba1\u7b97 hash \u624d\u80fd\u627e\u5230 B\u3002\u4f46\u662f\u5982\u679c\u69fd\u662f UNUSED \u6211\u5c31\u4e0d\u7528\u7ee7\u7eed\u627e\u4e86\uff0c \u6211\u8ba4\u4e3a B \u5c31\u662f\u4e0d\u5b58\u5728\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u5c31\u662f UNUSED \u548c EMPTY \u7684\u533a\u522b\u3002 \"\"\" origin_index = index = self . _hash ( key ) # origin_index \u5224\u65ad\u662f\u5426\u53c8\u8d70\u5230\u4e86\u8d77\u70b9\uff0c\u5982\u679c\u67e5\u627e\u4e00\u5708\u4e86\u90fd\u627e\u4e0d\u5230\u5219\u65e0\u6b64\u5143\u7d20 _len = len ( self . _table ) while self . _table [ index ] is not HashTable . UNUSED : if self . _table [ index ] is HashTable . EMPTY : # \u6ce8\u610f\u5982\u679c\u662f EMPTY\uff0c\u7ee7\u7eed\u5bfb\u627e\u4e0b\u4e00\u4e2a\u69fd index = ( index * 5 + 1 ) % _len # \u672c\u6b21\u4f7f\u7528\u7684\u4e8c\u6b21\u63a2\u67e5\u6cd5\u4f7f\u7528\u89c4\u5219 if index == origin_index : break continue if self . _table [ index ] . key == key : # \u627e\u5230\u4e86key return index else : index = ( index * 5 + 1 ) % _len # \u6ca1\u6709\u627e\u5230\u7ee7\u7eed\u627e\u4e0b\u4e00\u4e2a\u4f4d\u7f6e if index == origin_index : break return None def _find_slot_for_insert ( self , key ): index = self . _hash ( key ) _len = len ( self . _table ) while not self . _slot_can_insert ( index ): # \u76f4\u5230\u627e\u5230\u4e00\u4e2a\u53ef\u4ee5\u7528\u7684\u69fd index = ( index * 5 + 1 ) % _len return index def _slot_can_insert ( self , index ): return ( self . _table [ index ] is HashTable . EMPTY or self . _table [ index ] is HashTable . UNUSED ) def __contains__ ( self , key ): # in operator\uff0c\u5b9e\u73b0\u4e4b\u540e\u53ef\u4ee5\u4f7f\u7528 in \u64cd\u4f5c\u7b26\u5224\u65ad index = self . _find_key ( key ) return index is not None def add ( self , key , value ): if key in self : # update index = self . _find_key ( key ) self . _table [ index ] . value = value return False else : index = self . _find_slot_for_insert ( key ) self . _table [ index ] = Slot ( key , value ) self . length += 1 if self . _load_factor >= 0.8 : self . _rehash () return True def _rehash ( self ): old_table = self . _table newsize = len ( self . _table ) * 2 self . _table = Array ( newsize , HashTable . UNUSED ) self . length = 0 for slot in old_table : if slot is not HashTable . UNUSED and slot is not HashTable . EMPTY : index = self . _find_slot_for_insert ( slot . key ) self . _table [ index ] = slot self . length += 1 def get ( self , key , default = None ): index = self . _find_key ( key ) if index is None : return default else : return self . _table [ index ] . value def remove ( self , key ): index = self . _find_key ( key ) if index is None : raise KeyError () value = self . _table [ index ] . value self . length -= 1 self . _table [ index ] = HashTable . EMPTY return value def __iter__ ( self ): for slot in self . _table : if slot not in ( HashTable . EMPTY , HashTable . UNUSED ): yield slot . key def test_hash_table (): h = HashTable () h . add ( 'a' , 0 ) h . add ( 'b' , 1 ) h . add ( 'c' , 2 ) assert len ( h ) == 3 assert h . get ( 'a' ) == 0 assert h . get ( 'b' ) == 1 assert h . get ( 'hehe' ) is None h . remove ( 'a' ) assert h . get ( 'a' ) is None assert sorted ( list ( h )) == [ 'b' , 'c' ] n = 50 for i in range ( n ): h . add ( i , i ) for i in range ( n ): assert h . get ( i ) == i if __name__ == '__main__' : print ( 'beg' , test_hash_table (), 'end' , )","title":"\u54c8\u5e0c\u8868(\u6563\u5217\u8868)"},{"location":"python%E5%88%B7%E9%A2%98/#dict-set","text":"dict D . clear () #\u79fb\u9664D\u4e2d\u7684\u6240\u6709\u9879 D . copy () #\u8fd4\u56deD\u7684\u526f\u672c D . fromkeys ( seq [, val ]) #\u8fd4\u56de\u4eceseq\u4e2d\u83b7\u5f97\u7684\u952e\u548c\u88ab\u8bbe\u7f6e\u4e3aval\u7684\u503c\u7684\u5b57\u5178\u3002\u53ef\u505a\u7c7b\u65b9\u6cd5\u8c03\u7528 D . get ( key [, default ]) #\u5982\u679cD[key]\u5b58\u5728\uff0c\u5c06\u5176\u8fd4\u56de\uff1b\u5426\u5219\u8fd4\u56de\u7ed9\u5b9a\u7684\u9ed8\u8ba4\u503cNone D . has_key ( key ) #\u68c0\u67e5D\u662f\u5426\u6709\u7ed9\u5b9a\u952ekey D . items () #\u8fd4\u56de\u8868\u793aD\u9879\u7684(\u952e\uff0c\u503c)\u5bf9\u5217\u8868 D . iteritems () #\u4eceD.items()\u8fd4\u56de\u7684(\u952e\uff0c\u503c)\u5bf9\u4e2d\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u7684\u5bf9\u8c61 D . iterkeys () #\u4eceD\u7684\u952e\u4e2d\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 D . itervalues () #\u4eceD\u7684\u503c\u4e2d\u8fd4\u56de\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5bf9\u8c61 D . keys () #\u8fd4\u56deD\u952e\u7684\u5217\u8868 D . pop ( key [, d ]) #\u79fb\u9664\u5e76\u4e14\u8fd4\u56de\u5bf9\u5e94\u7ed9\u5b9a\u952ekey\u6216\u7ed9\u5b9a\u7684\u9ed8\u8ba4\u503cD\u7684\u503c D . popitem () #\u4eceD\u4e2d\u79fb\u9664\u4efb\u610f\u4e00\u9879\uff0c\u5e76\u5c06\u5176\u4f5c\u4e3a(\u952e\uff0c\u503c)\u5bf9\u8fd4\u56de D . setdefault ( key [, default ]) #\u5982\u679cD[key]\u5b58\u5728\u5219\u5c06\u5176\u8fd4\u56de\uff1b\u5426\u5219\u8fd4\u56de\u9ed8\u8ba4\u503cNone D . update ( other ) #\u5c06other\u4e2d\u7684\u6bcf\u4e00\u9879\u52a0\u5165\u5230D\u4e2d\u3002 D . values () #\u8fd4\u56deD\u4e2d\u503c\u7684\u5217\u8868 set # \u7279\u70b9\uff1a\u4e00\u4e2a\u65e0\u5e8f\u4e0d\u91cd\u590d\u5143\u7d20\u96c6 # \u6784\u9020 set () #\u7a7a\u96c6\u5408\u5b9a\u4e49 Set1 = { \"1\" , \"2\" } set2 = set ( list1 ) Set3 = set ( str ) #\u4f8b\u5982\uff1aset('spam') ==set(['a', 'p', 's', 'm'])=={'a', 'p', 's', 'm'} str-->\u5b57\u7b26list-->set t = s #t\u4e3a\u96c6\u5408s\u7684\u4e00\u4e2a\u5f15\u7528 t = s . copy () #t\u4e3a\u96c6\u5408s\u7684\u4e00\u4e2a\u6d45\u590d\u5236 # \u589e t . add ( x ) # \u6dfb\u52a0\u4e00\u9879 s . update ( t ) # \u5728s\u4e2d\u6dfb\u52a0\u591a\u9879 # \u5220 s . remove ( x ) #\u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 x,\u8fd4\u56de\u96c6\u5408 , \u5982\u679c\u4e0d\u5b58\u5728\u5219\u5f15\u53d1 KeyError s . discard ( x ) #\u5220\u9664\u96c6\u5408\u4e2d\u7684\u5143\u7d20 x,\u8fd4\u56de\u96c6\u5408\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u8fd4\u56de\u96c6\u5408\u672c\u8eab s . pop () #\u5220\u9664\u96c6\u5408\u4e2d\u7684\u4efb\u4e00\u4e0d\u786e\u5b9a\u7684\u5143\u7d20, \u8fd4\u56de\u96c6\u5408\uff0c\u5982\u679c\u4e3a\u7a7a\u5219\u5f15\u53d1 KeyError s . clear () #\u6e05\u7a7a\u96c6\u5408 # \u67e5 len ( s ) #set \u7684\u957f\u5ea6 hash ( s ) #\u8fd4\u56de s \u7684 hash \u503c # \u903b\u8f91\u8fd0\u7b97 a = t | s # t \u548c s\u7684\u5e76\u96c6 s.union(t) b = t & s # t \u548c s\u7684\u4ea4\u96c6 s.intersection(t) ) c = t \u2013 s # \u6c42\u5dee\u96c6\uff08\u9879\u5728t\u4e2d\uff0c\u4f46\u4e0d\u5728s\u4e2d\uff09 s.difference(t) d = t ^ s # \u5bf9\u79f0\u5dee\u96c6\uff08\u9879\u5728t\u6216s\u4e2d\uff0c\u4f46\u4e0d\u4f1a\u540c\u65f6\u51fa\u73b0\u5728\u4e8c\u8005\u4e2d\uff09 s.symmetric_difference(t) s |= t # \u5c06t\u6dfb\u52a0\u5230s\u4e2d s.update(t) s <= t #s\u662ft\u7684\u5b50\u96c6 \u8fd4\u56debool s.issubset(t) s >= t #s\u662ft\u7684\u7236\u96c6 \u8fd4\u56debool s.issuperset(t) s == t #s\u4e0et\u4e92\u4e3a\u5b50\u96c6 s != t #\u96c6\u5408s\u4e0et\u4e0d\u76f8\u7b49 x in s # x \u5728\u96c6\u5408 s \u4e2d \u8fd4\u56debool x not in s # x \u4e0d\u5728\u96c6\u5408 s \u4e2d \u8fd4\u56debool","title":"dict + set"},{"location":"python%E5%88%B7%E9%A2%98/#_6","text":"\u9012\u5f52\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u57fa\u672c\u7684\u51fa\u53e3(base case)\uff0c\u5426\u5219\u5c31\u4f1a\u65e0\u9650\u9012\u5f52\uff0c\u6700\u7ec8\u5bfc\u81f4**\u6808\u6ea2\u51fa**\u3002 \u9012\u5f52\u5fc5\u987b\u5305\u542b\u4e00\u4e2a\u53ef\u4ee5\u5206\u89e3\u7684\u95ee\u9898(recursive case)\u3002 \u9012\u5f52\u5fc5\u987b\u5fc5\u987b\u8981\u5411\u7740\u9012\u5f52\u51fa\u53e3\u9760\u8fd1(toward the base case)\u3002 def fact ( n ): if n == 0 : return 1 else : return n * fact ( n - 1 ) \u6253\u5370\u5341\u4e2a\u6570\u7ec4\u7406\u89e3\u9012\u5f52 # \u6b63\u5e8f\u6253\u5370 def print_num_recursive ( n ): if n > 0 : print_num_recursive ( n - 1 ) print ( n ) # \u5012\u5e8f\u6253\u5370 def print_num_recursive_revserve ( n ): if n > 0 : print ( n ) print_num_recursive_revserve ( n - 1 ) # \u5c3e\u9012\u5f52:\u5c31\u662f\u9012\u5f52\u8c03\u7528\u653e\u5728\u4e86\u51fd\u6570\u7684\u6700\u540e # \u5c3e\u9012\u5f52\u4f5c\u7528: # \u666e\u901a\u7684\u9012\u5f52, \u6bcf\u4e00\u7ea7\u9012\u5f52\u90fd\u4ea7\u751f\u4e86\u65b0\u7684\u5c40\u90e8\u53d8\u91cf, \u5fc5\u987b\u521b\u5efa\u65b0\u7684\u8c03\u7528\u6808, \u968f\u7740\u9012\u5f52\u6df1\u5ea6\u7684\u589e\u52a0, \u521b\u5efa\u7684\u6808\u8d8a\u6765\u8d8a\u591a, \u9020\u6210\u7206\u6808\u3002\u867d\u7136\u5c3e\u9012\u5f52\u8c03\u7528\u4e5f\u4f1a\u521b\u5efa\u65b0\u7684\u6808, \u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u4f18\u5316\u4f7f\u5f97\u5c3e\u9012\u5f52\u7684\u6bcf\u4e00\u7ea7\u8c03\u7528\u5171\u7528\u4e00\u4e2a\u6808!, \u5982\u6b64\u4fbf\u53ef\u89e3\u51b3\u7206\u6808\u548c\u9012\u5f52\u6df1\u5ea6\u9650\u5236\u7684\u95ee\u9898! \u4e0d\u5e78\u7684\u662f python \u9ed8\u8ba4\u4e0d\u652f\u6301\u5c3e\u9012\u5f52\u4f18\u5316\uff08\u89c1\u5ef6\u4f38\u9605\u8bfb\uff09\uff0c\u4e0d\u8fc7\u4e00\u822c\u5c3e\u9012\u5f52\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u8fed\u4ee3\u6765\u4f18\u5316\u5b83\u3002 \u6c49\u8bfa\u5854\u95ee\u9898 '''\u9012\u5f52\u65b9\u6cd5: \u628a\u4e0a\u8fb9\u7684 n-1 \u4e2a\u76d8\u5b50\u4ece S \u79fb\u52a8\u5230 I\uff0c\u501f\u52a9 D \u6746 \u628a\u6700\u5e95\u4e0b\u7684\u76d8\u5b50\u4ece S \u79fb\u52a8\u5230 D \u628a n-1 \u4e2a\u76d8\u5b50\u4ece I \u79fb\u52a8\u5230 D\uff0c\u501f\u52a9 S ''' def hanoi_move ( n , source , dest , intermediate ): if n >= 1 : # \u9012\u5f52\u51fa\u53e3\uff0c\u53ea\u5269\u4e00\u4e2a\u76d8\u5b50 hanoi_move ( n - 1 , source , intermediate , dest ) print ( \"Move %s -> %s \" % ( source , dest )) hanoi_move ( n - 1 , intermediate , dest , source ) hanoi_move ( 3 , 'A' , 'C' , 'B' ) # \u8f93\u51fa\uff0c\u5efa\u8bae\u4f60\u624b\u52a8\u6a21\u62df\u4e0b\u3002\u4e09\u4e2a\u76d8\u5b50 A(Source), B(intermediate), C(Destination) \"\"\" Move A -> C Move A -> B Move C -> B Move A -> C Move B -> A Move B -> C Move A -> C \"\"\"","title":"\u9012\u5f52"},{"location":"python%E5%88%B7%E9%A2%98/#_7","text":"\u4e8c\u5206\u67e5\u627e def binary_search ( sorted_array , val ): if not sorted_array : return - 1 beg = 0 end = len ( sorted_array ) - 1 while beg <= end : mid = int (( beg + end ) / 2 ) # beg + (end-beg)/2\uff0c \u4e3a\u4e86\u5c4f\u853d python 2/3 \u5dee\u5f02\u6211\u7528\u4e86\u5f3a\u8f6c if sorted_array [ mid ] == val : return mid elif sorted_array [ mid ] > val : end = mid - 1 else : beg = mid + 1 return - 1 def test_binary_search (): a = list ( range ( 10 )) # \u6b63\u5e38\u503c assert binary_search ( a , 1 ) == 1 assert binary_search ( a , - 1 ) == - 1 # \u5f02\u5e38\u503c assert binary_search ( None , 1 ) == - 1 # \u8fb9\u754c\u503c assert binary_search ( a , 0 ) == 0 bisect(\u4e8c\u5206\u6a21\u5757) # \u8fd9\u4e2a\u6a21\u5757\u7684\u8f93\u5165\u662f\u6392\u5e8f\u7684\uff0c\u9ed8\u8ba4\u90fd\u662finplace=True import bisect data = [ 2 , 4 , 9 , 7 ] bisect . insort ( data , 3 ) # \u63d2\u5165\u4f46\u4e0d\u6539\u53d8\u73b0\u6709\u6392\u5e8f data->[2,3,4,9,7] bisect . bisect ( data , 1 ) # 0 \u67e5\u627e\u8be5\u6570\u503c\u5c06\u4f1a\u63d2\u5165\u7684\u4f4d\u7f6e\u5e76\u8fd4\u56de\uff0c\u800c\u4e0d\u4f1a\u63d2\u5165\u3002data->[2,3,4,9,7] # \u4e0b\u9762\u4e24\u4e2a\u51fd\u6570\u7528\u5165\u5904\u7406\u5c06\u4f1a\u63d2\u5165\u91cd\u590d\u6570\u503c\u7684\u60c5\u51b5\uff0c\u8fd4\u56de\u5c06\u4f1a\u63d2\u5165\u7684\u4f4d\u7f6e bisect . bisect_left ( data , 4 ) # 2 [2,3,4,4,9,7] bisect . bisect_right ( data , 4 ) # 3 [2,3,4,4,9,7] \u57fa\u672c\u6392\u5e8f(\u7b80\u5355\u4f46\u8017\u65f6:\u5192\u6ce1/\u9009\u62e9/\u63d2\u5165) \u5192\u6ce1\u6392\u5e8f(O(N^2)) ''' \u5bf9\u4e00\u4e2a\u6570\u7ec4\u8fdb\u884c n-1 \u8f6e\u8fed\u4ee3\uff0c\u6bcf\u6b21\u6bd4\u8f83\u76f8\u90bb\u4e24\u4e2a\u5143\u7d20\uff0c \u5982\u679c\u76f8\u90bb\u7684\u5143\u7d20\u524d\u8005\u5927\u4e8e\u540e\u8005\uff0c\u5c31\u4ea4\u6362\u5b83\u4eec\u3002\u56e0\u4e3a\u76f4\u63a5\u5728\u5143\u7d20\u4e0a\u64cd\u4f5c\u800c\u4e0d\u662f\u8fd4\u56de\u65b0\u7684\u6570\u7ec4\uff0c\u6240\u4ee5\u662f\u4e00\u4e2a inplace \u7684\u64cd\u4f5c\u3002 \u8fd9\u91cc\u5192\u6ce1\u7684\u610f\u601d\u5176\u5b9e\u5c31\u662f\u6bcf\u4e00\u8f6e\u5192\u6ce1\u4e00\u4e2a\u6700\u5927\u7684\u5143\u7d20\u5c31\u4f1a\u901a\u8fc7\u4e0d\u65ad\u6bd4\u8f83\u548c\u4ea4\u6362\u76f8\u90bb\u5143\u7d20\u4f7f\u5b83\u8f6c\u79fb\u5230\u6700\u53f3\u8fb9\u3002 ''' import random def bubble_sort ( seq ): # O(n^2), n(n-1)/2 = 1/2(n^2 + n) n = len ( seq ) for i in range ( n - 1 ): print ( seq ) # \u6211\u6253\u5370\u51fa\u6765\u8ba9\u4f60\u770b\u6e05\u695a\u6bcf\u4e00\u8f6e\u6700\u9ad8\u3001\u6b21\u9ad8\u3001\u6b21\u6b21\u9ad8...\u7684\u5c0f\u670b\u53cb\u4f1a\u5192\u6ce1\u5230\u53f3\u8fb9 for j in range ( n - 1 - i ): # \u8fd9\u91cc\u4e4b\u6240\u4ee5 n-1 \u8fd8\u9700\u8981 \u51cf\u53bb i \u662f\u56e0\u4e3a\u6bcf\u4e00\u8f6e\u5192\u6ce1\u6700\u5927\u7684\u5143\u7d20\u90fd\u4f1a\u5192\u6ce1\u5230\u6700\u540e\uff0c\u65e0\u9700\u518d\u6bd4\u8f83 if seq [ j ] > seq [ j + 1 ]: seq [ j ], seq [ j + 1 ] = seq [ j + 1 ], seq [ j ] print ( seq ) def test_bubble_sort (): seq = list ( range ( 10 )) # \u6ce8\u610f python3 \u8fd4\u56de\u8fed\u4ee3\u5668\uff0c\u6240\u4ee5\u6211\u90fd\u7528 list \u5f3a\u8f6c\u4e86\uff0cpython2 range \u8fd4\u56de\u7684\u5c31\u662f list random . shuffle ( seq ) # shuffle inplace \u64cd\u4f5c\uff0c\u6253\u4e71\u6570\u7ec4 bubble_sort ( seq ) assert seq == sorted ( seq ) # \u6ce8\u610f\u5466\uff0c\u5185\u7f6e\u7684 sorted \u5c31\u4e0d\u662f inplace \u7684\uff0c\u5b83\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6570\u7ec4\uff0c\u4e0d\u5f71\u54cd\u4f20\u5165\u7684\u53c2\u6570 \"\"\" \u6211\u6253\u5370\u51fa\u6765\u8ba9\u4f60\u770b\u5230\u6bcf\u6b21\u4ece\u6700\u9ad8\u5230\u6b21\u9ad8\u7684\u5c0f\u76c6\u53cb\u5c31\u8fd9\u4e48\u6392\u597d\u5e8f\u4e86\uff0c\u56e0\u4e3a\u662f\u968f\u673a\u6570\uff0c\u4f60\u7b2c\u4e00\u4e2a\u6ca1\u6709\u6392\u5e8f\u7684\u6570\u7ec4\u5e94\u8be5\u548c\u6211\u7684\u4e0d\u4e00\u6837 [3, 4, 5, 0, 9, 1, 7, 8, 6, 2] [3, 4, 0, 5, 1, 7, 8, 6, 2, 9] [3, 0, 4, 1, 5, 7, 6, 2, 8, 9] [0, 3, 1, 4, 5, 6, 2, 7, 8, 9] [0, 1, 3, 4, 5, 2, 6, 7, 8, 9] [0, 1, 3, 4, 2, 5, 6, 7, 8, 9] [0, 1, 3, 2, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \"\"\" \u9009\u62e9\u6392\u5e8f(O(N^2)) ''' \u6bcf\u6b21\u6211\u4eec\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\u63d2\u5165\u8fed\u4ee3\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u8fd9\u6837\u6bcf\u4e2a\u4f4d\u7f6e\u4ece\u5b83\u81ea\u5df1\u7684\u4f4d\u7f6e\u5f00\u59cb\u5b83\u5c31\u662f\u6700\u5c0f\u7684\u4e86\uff0c\u4e00\u5708\u4e0b\u6765\u6570\u7ec4\u5c31\u6709\u5e8f\u4e86\u3002 \u9009\u62e9\u53ef\u4ee5\u7406\u89e3\u4e3a \u4e00\u4e2a 0 \u5230 n-1 \u7684\u8fed\u4ee3\uff0c\u6bcf\u6b21\u5411\u540e\u67e5\u627e\u9009\u62e9\u4e00\u4e2a\u6700\u5c0f\u7684\u5143\u7d20\u3002 ''' def select_sort ( seq ): n = len ( seq ) for i in range ( n - 1 ): min_idx = i # \u6211\u4eec\u5047\u8bbe\u5f53\u524d\u4e0b\u6807\u7684\u5143\u7d20\u662f\u6700\u5c0f\u7684 for j in range ( i + 1 , n ): # \u4ece i \u7684\u540e\u8fb9\u5f00\u59cb\u627e\u5230\u6700\u5c0f\u7684\u5143\u7d20\uff0c\u5f97\u5230\u5b83\u7684\u4e0b\u6807 if seq [ j ] < seq [ min_idx ]: min_idx = j # \u4e00\u4e2a j \u5faa\u73af\u4e0b\u6765\u4e4b\u540e\u5c31\u627e\u5230\u4e86\u6700\u5c0f\u7684\u5143\u7d20\u5b83\u7684\u4e0b\u6807 if min_idx != i : # swap seq [ i ], seq [ min_idx ] = seq [ min_idx ], seq [ i ] def test_select_sort (): seq = list ( range ( 10 )) random . shuffle ( seq ) select_sort ( seq ) assert seq == sorted ( seq ) \"\"\" [4, 7, 5, 3, 6, 0, 2, 9, 8, 1] [0, 7, 5, 3, 6, 4, 2, 9, 8, 1] [0, 1, 5, 3, 6, 4, 2, 9, 8, 7] [0, 1, 2, 3, 6, 4, 5, 9, 8, 7] [0, 1, 2, 3, 6, 4, 5, 9, 8, 7] [0, 1, 2, 3, 4, 6, 5, 9, 8, 7] [0, 1, 2, 3, 4, 5, 6, 9, 8, 7] [0, 1, 2, 3, 4, 5, 6, 9, 8, 7] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \"\"\" \u63d2\u5165\u6392\u5e8f(O(N^2)) ''' \u6bcf\u6b21\u6311\u9009\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u7ecf\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d,\u521d\u59cb\u65f6\u5df2\u6392\u5e8f\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20: \u60f3\u8c61\u4f60\u624b\u91cc\u6709\u4e00\u4e9b\u6251\u514b\u724c\uff0c\u5b83\u4eec\u987a\u5e8f\u662f\u6563\u4e71\u7684\uff0c\u73b0\u5728\u9700\u8981\u4f60\u628a\u5b83\u4eec\u6574\u7406\u6210\u6709\u5e8f\u7684\uff0c\u4f60\u4f1a\u600e\u4e48\u505a\u5462\uff1f \u9996\u5148\u62ff\u6700\u9876\u4e0a\u7684\u4e00\u5f20\uff0c\u7136\u540e\u62ff\u7b2c\u4e8c\u5f20\uff0c\u7b2c\u4e8c\u5f20\u70b9\u6570\u5927\uff0c\u4f60\u5c31\u628a\u7b2c\u4e8c\u5f20\u653e\u5728\u7b2c\u4e00\u5f20\u7684\u4e0b\u8fb9\uff0c\u5426\u5219\u653e\u5728\u7b2c\u4e00\u5f20\u4e0a\u8fb9\u3002 \u5f53\u4f60\u62ff\u7b2c\u4e09\u5f20\u7684\u65f6\u5019\uff0c\u4f60\u540c\u6837\u4f1a\u627e\u5230\u9002\u5408\u5b83\u5927\u5c0f\u7684\u4f4d\u7f6e\u63d2\u5165\u8fdb\u53bb\u3002 ''' def insertion_sort ( seq ): \"\"\" \u6bcf\u6b21\u6311\u9009\u4e0b\u4e00\u4e2a\u5143\u7d20\u63d2\u5165\u5df2\u7ecf\u6392\u5e8f\u7684\u6570\u7ec4\u4e2d,\u521d\u59cb\u65f6\u5df2\u6392\u5e8f\u6570\u7ec4\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\"\"\" n = len ( seq ) print ( seq ) for i in range ( 1 , n ): value = seq [ i ] # \u4fdd\u5b58\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\uff0c\u56e0\u4e3a\u8f6c\u79fb\u7684\u8fc7\u7a0b\u4e2d\u5b83\u7684\u4f4d\u7f6e\u53ef\u80fd\u88ab\u8986\u76d6 # \u627e\u5230\u8fd9\u4e2a\u503c\u7684\u5408\u9002\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u524d\u8fb9\u7684\u6570\u7ec4\u6709\u5e8f [0,i] \u6709\u5e8f pos = i while pos > 0 and value < seq [ pos - 1 ]: seq [ pos ] = seq [ pos - 1 ] # \u5982\u679c\u524d\u8fb9\u7684\u5143\u7d20\u6bd4\u5b83\u5927\uff0c\u5c31\u8ba9\u5b83\u4e00\u76f4\u524d\u79fb pos -= 1 seq [ pos ] = value # \u627e\u5230\u4e86\u5408\u9002\u7684\u4f4d\u7f6e\u8d4b\u503c\u5c31\u597d print ( seq ) \"\"\" \u4e0d\u65ad\u628a\u65b0\u5143\u7d20\u653e\u5230\u5df2\u7ecf\u6709\u5e8f\u7684\u6570\u7ec4\u4e2d [1, 7, 3, 0, 9, 4, 8, 2, 6, 5] [1, 7, 3, 0, 9, 4, 8, 2, 6, 5] [1, 3, 7, 0, 9, 4, 8, 2, 6, 5] [0, 1, 3, 7, 9, 4, 8, 2, 6, 5] [0, 1, 3, 7, 9, 4, 8, 2, 6, 5] [0, 1, 3, 4, 7, 9, 8, 2, 6, 5] [0, 1, 3, 4, 7, 8, 9, 2, 6, 5] [0, 1, 2, 3, 4, 7, 8, 9, 6, 5] [0, 1, 2, 3, 4, 6, 7, 8, 9, 5] [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \"\"\" \u9ad8\u7ea7\u6392\u5e8f\u7b97\u6cd5(\u5f52\u5e76\u6392\u5e8f/\u5feb\u901f\u6392\u5e8f) \u5f52\u5e76\u6392\u5e8f(\u5206\u6cbb\u601d\u8def:O(n*log2n)) \u5206\u89e3 \uff1a\u5c06\u5f85\u6392\u5e8f\u7684 n \u4e2a\u5143\u7d20\u5206\u6210\u5404\u5305\u542b n/2 \u4e2a\u5143\u7d20\u7684\u5b50\u5e8f\u5217 \u89e3\u51b3 \uff1a\u4f7f\u7528\u5f52\u5e76\u6392\u5e8f\u9012\u5f52\u6392\u5e8f\u4e24\u4e2a\u5b50\u5e8f\u5217 \u5408\u5e76 \uff1a\u5408\u5e76\u4e24\u4e2a\u5df2\u7ecf\u6392\u5e8f\u7684\u5b50\u5e8f\u5217\u4ee5\u4ea7\u751f\u5df2\u6392\u5e8f\u7684\u7b54\u6848 # \u5f52\u5e76\u6392\u5e8f\u4f7f\u7528\u9012\u5f52\u5b9e\u73b0 # -*- coding: utf-8 -*- def merge_sort ( seq ): if len ( seq ) <= 1 : # \u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u662f\u9012\u5f52\u51fa\u53e3 return seq else : # \u524d\u534a\u90e8\u5206\u5206\u5f00 mid = int ( len ( seq ) / 2 ) left_half = merge_sort ( seq [: mid ]) right_half = merge_sort ( seq [ mid :]) # \u540e\u534a\u90e8\u5206\u5408\u5e76:\u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4 new_seq = merge_sorted_list ( left_half , right_half ) return new_seq def merge_sorted_list ( sorted_a , sorted_b ): \"\"\" \u5408\u5e76\u4e24\u4e2a\u6709\u5e8f\u5e8f\u5217\uff0c\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u6709\u5e8f\u5e8f\u5217 :param sorted_a: :param sorted_b: \"\"\" length_a , length_b = len ( sorted_a ), len ( sorted_b ) a = b = 0 # \u53ef\u4ee5\u770b\u505a\u662f\u4ece0\u5f00\u59cb\u7684\u6307\u9488 new_sorted_seq = list () while a < length_a and b < length_b : if sorted_a [ a ] < sorted_b [ b ]: new_sorted_seq . append ( sorted_a [ a ]) a += 1 else : new_sorted_seq . append ( sorted_b [ b ]) b += 1 # \u5982\u679c a\u6216b \u4e2d\u8fd8\u6709\u5269\u4f59\u5143\u7d20\uff0c\u9700\u8981\u653e\u5230\u6700\u540e if a < length_a : new_sorted_seq . extend ( sorted_a [ a :]) else : new_sorted_seq . extend ( sorted_b [ b :]) return new_sorted_seq def test_merge_sort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) assert merge_sort ( seq ) == sorted ( seq ) \u5feb\u901f\u6392\u5e8f(\u5206\u6cbb\u601d\u60f3,\u5e94\u7528\u5e7f\u6cdb:O(n*logn)) \u9009\u62e9\u57fa\u51c6\u503c pivot( \u7b2c\u4e00\u4e2a\u5143\u7d20 ) \u5c06\u6570\u7ec4\u5206\u6210\u4e24\u4e2a\u5b50\u6570\u7ec4\uff1a\u5c0f\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u548c\u5927\u4e8e\u57fa\u51c6\u503c\u7684\u5143\u7d20\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u79f0\u4e4b\u4e3a partition \u5bf9\u8fd9\u4e24\u4e2a\u5b50\u6570\u7ec4\u8fdb\u884c\u5feb\u901f\u6392\u5e8f\u3002 \u5408\u5e76\u7ed3\u679c # \u5b9e\u73b0\u65b9\u5f0f1:\u4e0d\u8db3 # \u7b2c\u4e00\u662f\u5b83\u9700\u8981\u989d\u5916\u7684\u5b58\u50a8\u7a7a\u95f4\uff0c\u6211\u4eec\u60f3\u5b9e\u73b0 inplace \u539f\u5730\u6392\u5e8f\u3002 # \u7b2c\u4e8c\u662f\u5b83\u7684 partition \u64cd\u4f5c\u6bcf\u6b21\u90fd\u8981\u4e24\u6b21\u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u6211\u4eec\u60f3\u6539\u5584\u4e00\u4e0b\u3002 def quicksort ( array ): size = len ( array ) if not array or size < 2 : # NOTE: \u9012\u5f52\u51fa\u53e3\uff0c\u7a7a\u6570\u7ec4\u6216\u8005\u53ea\u6709\u4e00\u4e2a\u5143\u7d20\u7684\u6570\u7ec4\u90fd\u662f\u6709\u5e8f\u7684 return array pivot_idx = 0 pivot = array [ pivot_idx ] less_part = [ array [ i ] for i in range ( size ) if array [ i ] <= pivot and pivot_idx != i ] great_part = [ array [ i ] for i in range ( size ) if array [ i ] > pivot and pivot_idx != i ] return quicksort ( less_part ) + [ pivot ] + quicksort ( great_part ) def test_quicksort (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) assert quicksort ( seq ) == sorted ( seq ) # \u5b9e\u73b0\u65b9\u5f0f2:\u4f18\u53161 def partition ( array , beg , end ): \"\"\"\u5bf9\u7ed9\u5b9a\u6570\u7ec4\u6267\u884c partition \u64cd\u4f5c\uff0c\u8fd4\u56de\u65b0\u7684 pivot \u4f4d\u7f6e\"\"\" pivot_index = beg pivot = array [ pivot_index ] left = pivot_index + 1 right = end - 1 # \u5f00\u533a\u95f4\uff0c\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u4f4d\u7f6e\u662f end-1 [0, end-1] or [0: end)\uff0c\u62ec\u53f7\u8868\u793a\u5f00\u533a\u95f4 while True : # \u4ece\u5de6\u8fb9\u627e\u5230\u6bd4 pivot \u5927\u7684 while left <= right and array [ left ] < pivot : left += 1 while right >= left and array [ right ] >= pivot : right -= 1 if left > right : break else : array [ left ], array [ right ] = array [ right ], array [ left ] array [ pivot_index ], array [ right ] = array [ right ], array [ pivot_index ] return right # \u65b0\u7684 pivot \u4f4d\u7f6e def quicksort_inplace ( array , beg , end ): # \u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u90fd\u7528\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0cend \u4f20\u5165 len(array) if beg < end : # beg == end \u7684\u65f6\u5019\u9012\u5f52\u51fa\u53e3 pivot = partition ( array , beg , end ) quicksort_inplace ( array , beg , pivot ) quicksort_inplace ( array , pivot + 1 , end ) def test_quicksort_inplace (): import random seq = list ( range ( 10 )) random . shuffle ( seq ) sorted_seq = sorted ( seq ) quicksort_inplace ( seq , 0 , len ( seq )) assert seq == sorted_seq","title":"\u67e5\u627e+\u6392\u5e8f"},{"location":"python%E5%88%B7%E9%A2%98/#_8","text":"\u6839\u8282\u70b9(root): \u6811\u7684\u6700\u4e0a\u5c42\u7684\u8282\u70b9\uff0c\u4efb\u4f55\u975e\u7a7a\u7684\u6811\u90fd\u6709\u4e00\u4e2a\u8282\u70b9 \u8def\u5f84(path): \u4ece\u8d77\u59cb\u8282\u70b9\u5230\u7ec8\u6b62\u8282\u70b9\u7ecf\u5386\u8fc7\u7684\u8fb9 \u7236\u4eb2(parent)\uff1a\u9664\u4e86\u6839\u8282\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9\u7684\u4e0a\u4e00\u5c42\u8fb9\u8fde\u63a5\u7684\u8282\u70b9\u5c31\u662f\u5b83\u7684\u7236\u4eb2(\u8282\u70b9) \u5b69\u5b50(children): \u6bcf\u4e2a\u8282\u70b9\u7531\u8fb9\u6307\u5411\u7684\u4e0b\u4e00\u5c42\u8282\u70b9 \u5144\u5f1f(siblings): \u540c\u4e00\u4e2a\u7236\u4eb2\u5e76\u4e14\u5904\u5728\u540c\u4e00\u5c42\u7684\u8282\u70b9 \u5b50\u6811(subtree): \u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u5b83\u6240\u6709\u7684\u540e\u4ee3\u7ec4\u6210\u7684\u5b50\u6811 \u53f6\u5b50\u8282\u70b9(leaf node): \u6ca1\u6709\u5b69\u5b50\u7684\u8282\u70b9\u6210\u4e3a\u53f6\u5b50\u8282\u70b9 \u4e8c\u53c9\u6811:\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u6700\u591a\u53ea\u80fd\u5305\u542b\u4e24\u4e2a\u5b69\u5b50 \u4e00\u68f5 size \u4e3a n \u7684\u4e8c\u53c9\u6811\u9ad8\u5ea6\u6700\u591a\u53ef\u4ee5\u662f n\uff0c\u6700\u5c0f\u7684\u9ad8\u5ea6\u662f\u230algn\u230b+1\uff0c\u8fd9\u91cc log \u4ee5 2 \u4e3a\u5e95\u7b80\u5199\u4e3a lgn \u6ee1\u4e8c\u53c9\u6811 \uff1a\u5982\u679c\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\uff08\u975e\u53f6\u8282\u70b9\uff09\u90fd\u5305\u542b\u4e24\u4e2a\u5b69\u5b50\uff0c\u5c31\u6210\u4e3a\u6ee1\u4e8c\u53c9\u6811\u3002 \u5b8c\u7f8e\u4e8c\u53c9\u6811 \uff1a\u5f53\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u90fd\u5728\u540c\u4e00\u5c42\u5c31\u662f\u5b8c\u7f8e\u4e8c\u53c9\u6811\uff0c\u6beb\u65e0\u95f4\u9699\u586b\u5145\u4e86 h \u5c42\u3002 \u5b8c\u5168\u4e8c\u53c9\u6811(\u5806\u7684\u5b9e\u73b0) \uff1a\u5f53\u4e00\u4e2a\u9ad8\u5ea6\u4e3a h \u7684\u5b8c\u7f8e\u4e8c\u53c9\u6811\u51cf\u5c11\u5230 h-1\uff0c\u5e76\u4e14\u6700\u5e95\u5c42\u7684\u69fd\u88ab\u6beb\u65e0\u95f4\u9699\u5730\u4ece\u5de6\u5230\u53f3\u586b\u5145\uff0c\u6211\u4eec\u5c31\u53eb\u5b83\u5b8c\u5168\u4e8c\u53c9\u6811\u3002 \u4ee3\u7801\u5b9e\u73b0\u4e8c\u53c9\u6811 # \u94fe\u8868\u5b9e\u73b0 class BinTreeNode ( object ): def __init__ ( self , data , left = None , right = None ): self . data , self . left , self . right = data , left , right # \u4e8c\u53c9\u6811\u8868\u793a node_list = [ { 'data' : 'A' , 'left' : 'B' , 'right' : 'C' , 'is_root' : True }, { 'data' : 'B' , 'left' : 'D' , 'right' : 'E' , 'is_root' : False }, { 'data' : 'D' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'E' , 'left' : 'H' , 'right' : None , 'is_root' : False }, { 'data' : 'H' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'C' , 'left' : 'F' , 'right' : 'G' , 'is_root' : False }, { 'data' : 'F' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'G' , 'left' : 'I' , 'right' : 'J' , 'is_root' : False }, { 'data' : 'I' , 'left' : None , 'right' : None , 'is_root' : False }, { 'data' : 'J' , 'left' : None , 'right' : None , 'is_root' : False }, ] class BinTree ( object ): def __init__ ( self , root = None ): self . root = root @classmethod def build_from ( cls , node_list ): \"\"\"\u901a\u8fc7\u8282\u70b9\u4fe1\u606f\u6784\u9020\u4e8c\u53c9\u6811 \u7b2c\u4e00\u6b21\u904d\u5386\u6211\u4eec\u6784\u9020 node \u8282\u70b9 \u7b2c\u4e8c\u6b21\u904d\u5386\u6211\u4eec\u7ed9 root \u548c \u5b69\u5b50\u8d4b\u503c \u6700\u540e\u6211\u4eec\u7528 root \u521d\u59cb\u5316\u8fd9\u4e2a\u7c7b\u5e76\u8fd4\u56de\u4e00\u4e2a\u5bf9\u8c61 :param node_list: {'data': 'A', 'left': None, 'right': None, 'is_root': False} \"\"\" node_dict = {} for node_data in node_list : data = node_data [ 'data' ] node_dict [ data ] = BinTreeNode ( data ) for node_data in node_list : data = node_data [ 'data' ] node = node_dict [ data ] if node_data [ 'is_root' ]: root = node node . left = node_dict . get ( node_data [ 'left' ]) node . right = node_dict . get ( node_data [ 'right' ]) return cls ( root ) btree . preorder_trav ( btree . root ) # \u8f93\u51fa A, B, D, E, H, C, F, G, I, J print ( btree ) \u4e8c\u53c9\u6811\u7684\u904d\u5386(\u9012\u5f52\u5b9e\u73b0) \u5148(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u6839\uff0c\u4e4b\u540e\u662f\u5de6\u5b50\u6811\uff0c\u7136\u540e\u662f\u53f3\u5b50\u6811: A, B, D, E, H, C, F, G, I, J \u4e2d(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u5de6\u5b50\u6811\uff0c\u4e4b\u540e\u662f\u6839\uff0c\u6700\u540e\u662f\u53f3\u5b50\u6811: D B H E A F C I G J \u540e(\u6839)\u5e8f\u904d\u5386: \u5148\u5904\u7406\u5de6\u5b50\u6811\uff0c\u4e4b\u540e\u662f\u53f3\u5b50\u6811\uff0c\u6700\u540e\u662f\u6839: D H E B F I J G C A # \u5148\u5e8f\u904d\u5386:root->left->right def preorder_trav ( self , subtree ): if subtree is not None : print ( subtree . data , end = \" \" ) self . preorder_trav ( subtree . left ) self . preorder_trav ( subtree . right ) # \u4e2d\u5e8f\u904d\u5386:left->root->right def inorder_trav ( self , subtree ): if subtree is not None : self . inorder_trav ( subtree . left ) print ( subtree . data , end = \" \" ) self . inorder_trav ( subtree . right ) # \u540e\u5e8f\u904d\u5386:left->right->root def postorder_trav ( self , subtree ): if subtree is not None : self . postorder_trav ( subtree . left ) self . postorder_trav ( subtree . right ) print ( subtree . data , end = \" \" ) btree = BinTree . build_from ( node_list ) btree . preorder_trav ( btree . root ) # A, B, D, E, H, C, F, G, I, J btree . inorder_trav ( btree . root ) # D B H E A F C I G J btree . postorder_trav ( btree . root ) # D H E B F I J G C A \u53cd\u8f6c\u4e8c\u53c9\u6811 def reverse ( self , subtree ): if subtree is not None : subtree . left , subtree . right = subtree . right , subtree . left self . reverse ( subtree . left ) self . reverse ( subtree . right )","title":"\u6811\u4e0e\u4e8c\u53c9\u6811"},{"location":"python%E5%88%B7%E9%A2%98/#_9","text":"\u5806\u662f\u4e00\u79cd**\u5b8c\u5168\u4e8c\u53c9\u6811(\u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0)**\u6709\u6700\u5927\u5806\u548c\u6700\u5c0f\u5806\u4e24\u79cd\u3002 \u6700\u5927\u5806: \u5bf9\u4e8e\u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 V\uff0cV \u7684\u503c\u90fd\u6bd4\u5b83\u7684\u4e24\u4e2a\u5b69\u5b50\u5927 \uff0c\u79f0\u4e3a \u6700\u5927\u5806\u7279\u6027(heap order property) \u6700\u5927\u5806\u91cc\u7684\u6839\u603b\u662f\u5b58\u50a8\u6700\u5927\u503c\uff0c\u6700\u5c0f\u7684\u503c\u5b58\u50a8\u5728\u53f6\u8282\u70b9\u3002 \u6700\u5c0f\u5806\uff1a\u548c\u6700\u5927\u5806\u76f8\u53cd\uff0c \u6bcf\u4e2a\u975e\u53f6\u5b50\u8282\u70b9 V\uff0cV \u7684\u4e24\u4e2a\u5b69\u5b50\u7684\u503c\u90fd\u6bd4\u5b83\u5927 \u3002 \u5806\u7684\u8868\u793a(\u5b8c\u5168\u4e8c\u53c9\u6811) ''' \u56e0\u4e3a\u5b8c\u5168\u4e8c\u53c9\u6811\u7684\u7279\u6027\uff0c\u6811\u4e0d\u4f1a\u6709\u95f4\u9699\u3002\u5bf9\u4e8e\u6570\u7ec4\u91cc\u7684\u4e00\u4e2a\u4e0b\u6807 i\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5b83\u7684\u7236\u4eb2\u548c\u5b69\u5b50\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u4e0b\u6807 ''' # \u8d85\u51fa\u4e0b\u6807\u8868\u793a\u6ca1\u6709\u5bf9\u5e94\u7684\u5b69\u5b50\u8282\u70b9\u3002 parent = int (( i - 1 ) / 2 ) # \u53d6\u6574 left = 2 * i + 1 right = 2 * i + 2 \u5806\u7684\u63d2\u5165 \u83b7\u53d6\u5806\u7684\u6700\u5927\u503c\u6216\u6700\u5c0f\u503c(\u5806\u7684\u6839\u8282\u70b9\u662f\u6700\u5927/\u6700\u5c0f\u503c) \u5806\u5b9e\u73b0+\u5806\u6392\u5e8f # -*- coding:utf-8 -*- # \u7b2c\u4e8c\u7ae0\u62f7\u8d1d\u7684 Array \u4ee3\u7801 class Array ( object ): def __init__ ( self , size = 32 ): self . _size = size self . _items = [ None ] * size def __getitem__ ( self , index ): return self . _items [ index ] def __setitem__ ( self , index , value ): self . _items [ index ] = value def __len__ ( self ): return self . _size def clear ( self , value = None ): for i in range ( len ( self . _items )): self . _items [ i ] = value def __iter__ ( self ): for item in self . _items : yield item ##################################################### # heap \u5b9e\u73b0 ##################################################### class MaxHeap ( object ): \"\"\" Heaps: \u5b8c\u5168\u4e8c\u53c9\u6811\uff0c\u6700\u5927\u5806\u7684\u975e\u53f6\u5b50\u8282\u70b9\u7684\u503c\u90fd\u6bd4\u5b69\u5b50\u5927\uff0c\u6700\u5c0f\u5806\u7684\u975e\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\u90fd\u6bd4\u5b69\u5b50\u5c0f Heap\u5305\u542b\u4e24\u4e2a\u5c5e\u6027\uff0corder property \u548c shape property(a complete binary tree)\uff0c\u5728\u63d2\u5165 \u4e00\u4e2a\u65b0\u8282\u70b9\u7684\u65f6\u5019\uff0c\u59cb\u7ec8\u8981\u4fdd\u6301\u8fd9\u4e24\u4e2a\u5c5e\u6027 \u63d2\u5165\u64cd\u4f5c\uff1a\u4fdd\u6301\u5806\u5c5e\u6027\u548c\u5b8c\u5168\u4e8c\u53c9\u6811\u5c5e\u6027, sift-up \u64cd\u4f5c\u7ef4\u6301\u5806\u5c5e\u6027 extract\u64cd\u4f5c\uff1a\u53ea\u83b7\u53d6\u6839\u8282\u70b9\u6570\u636e\uff0c\u5e76\u628a\u6811\u6700\u5e95\u5c42\u6700\u53f3\u8282\u70b9copy\u5230\u6839\u8282\u70b9\u540e\uff0csift-down\u64cd\u4f5c\u7ef4\u6301\u5806\u5c5e\u6027 \u7528\u6570\u7ec4\u5b9e\u73b0heap\uff0c\u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u4ece\u4e0a\u5f80\u4e0b\u4ece\u5de6\u5230\u53f3\u7ed9\u6bcf\u4e2a\u8282\u70b9\u7f16\u53f7\uff0c\u5219\u6839\u636e\u5b8c\u5168\u4e8c\u53c9\u6811\u7684 \u6027\u8d28\uff0c\u7ed9\u5b9a\u4e00\u4e2a\u8282\u70b9i\uff0c \u5176\u7236\u4eb2\u548c\u5b69\u5b50\u8282\u70b9\u7684\u7f16\u53f7\u5206\u522b\u662f: parent = (i-1) // 2 left = 2 * i + 1 rgiht = 2 * i + 2 \u4f7f\u7528\u6570\u7ec4\u5b9e\u73b0\u5806\u4e00\u65b9\u9762\u6548\u7387\u66f4\u9ad8\uff0c\u8282\u7701\u6811\u8282\u70b9\u7684\u5185\u5b58\u5360\u7528\uff0c\u4e00\u65b9\u9762\u8fd8\u53ef\u4ee5\u907f\u514d\u590d\u6742\u7684\u6307\u9488\u64cd\u4f5c\uff0c\u51cf\u5c11 \u8c03\u8bd5\u96be\u5ea6\u3002 \"\"\" def __init__ ( self , maxsize = None ): self . maxsize = maxsize self . _elements = Array ( maxsize ) self . _count = 0 def __len__ ( self ): return self . _count def add ( self , value ): if self . _count >= self . maxsize : raise Exception ( 'full' ) self . _elements [ self . _count ] = value self . _count += 1 self . _siftup ( self . _count - 1 ) # \u7ef4\u6301\u5806\u7684\u7279\u6027 def _siftup ( self , ndx ): if ndx > 0 : parent = int (( ndx - 1 ) / 2 ) if self . _elements [ ndx ] > self . _elements [ parent ]: # \u5982\u679c\u63d2\u5165\u7684\u503c\u5927\u4e8e parent\uff0c\u4e00\u76f4\u4ea4\u6362 self . _elements [ ndx ], self . _elements [ parent ] = self . _elements [ parent ], self . _elements [ ndx ] self . _siftup ( parent ) # \u9012\u5f52 def extract ( self ): if self . _count <= 0 : raise Exception ( 'empty' ) value = self . _elements [ 0 ] # \u4fdd\u5b58 root \u503c self . _count -= 1 self . _elements [ 0 ] = self . _elements [ self . _count ] # \u6700\u53f3\u4e0b\u7684\u8282\u70b9\u653e\u5230root\u540esiftDown self . _siftdown ( 0 ) # \u7ef4\u6301\u5806\u7279\u6027 return value def _siftdown ( self , ndx ): left = 2 * ndx + 1 right = 2 * ndx + 2 # determine which node contains the larger value largest = ndx if ( left < self . _count and # \u6709\u5de6\u5b69\u5b50 self . _elements [ left ] >= self . _elements [ largest ] and self . _elements [ left ] >= self . _elements [ right ]): # \u539f\u4e66\u8fd9\u4e2a\u5730\u65b9\u6ca1\u5199\u5b9e\u9645\u4e0a\u627e\u7684\u672a\u5fc5\u662flargest largest = left elif right < self . _count and self . _elements [ right ] >= self . _elements [ largest ]: largest = right if largest != ndx : self . _elements [ ndx ], self . _elements [ largest ] = self . _elements [ largest ], self . _elements [ ndx ] self . _siftdown ( largest ) def test_maxheap (): import random n = 5 h = MaxHeap ( n ) for i in range ( n ): h . add ( i ) for i in reversed ( range ( n )): assert i == h . extract () # \u5b9e\u73b0\u5806\u6392\u5e8f def heapsort_reverse ( array ): length = len ( array ) maxheap = MaxHeap ( length ) for i in array : maxheap . add ( i ) res = [] for i in range ( length ): res . append ( maxheap . extract ()) return res def test_heapsort_reverse (): import random l = list ( range ( 10 )) random . shuffle ( l ) assert heapsort_reverse ( l ) == sorted ( l , reverse = True ) # \u4f7f\u7528\u81ea\u5e26\u5e93\u5b9e\u73b0\u5806\u6392\u5e8f def heapsort_use_heapq ( iterable ): from heapq import heappush , heappop items = [] for value in iterable : heappush ( items , value ) return [ heappop ( items ) for i in range ( len ( items ))] def test_heapsort_use_heapq (): import random l = list ( range ( 10 )) random . shuffle ( l ) assert heapsort_use_heapq ( l ) == sorted ( l ) python\u81ea\u5e26\u5e93:heapq heappush ( heap , item ) #\u5f80\u5806\u4e2d\u63d2\u5165\u4e00\u6761\u65b0\u7684\u503c heappop ( heap ) #\u4ece\u5806\u4e2d\u5f39\u51fa\u6700\u5c0f\u503c heapreplace ( heap , item ) #\u4ece\u5806\u4e2d\u5f39\u51fa\u6700\u5c0f\u503c\uff0c\u5e76\u5f80\u5806\u4e2d\u63d2\u5165item heappushpop ( heap , item ) #Python3\u4e2d\u7684heappushpop\u66f4\u9ad8\u7ea7 heapify ( x ) #\u4ee5\u7ebf\u6027\u65f6\u95f4\u5c06\u4e00\u4e2a\u5217\u8868\u8f6c\u5316\u4e3a\u5806 merge ( * iterables , key = None , reverse = False ) #\u5408\u5e76\u5bf9\u4e2a\u5806\uff0c\u7136\u540e\u8f93\u51fa nlargest ( n , iterable , key = None ) #\u8fd4\u56de\u53ef\u679a\u4e3e\u5bf9\u8c61\u4e2d\u7684n\u4e2a\u6700\u5927\u503c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6list nsmallest ( n , iterable , key = None ) #\u8fd4\u56de\u53ef\u679a\u4e3e\u5bf9\u8c61\u4e2d\u7684n\u4e2a\u6700\u5c0f\u503c\u5e76\u8fd4\u56de\u4e00\u4e2a\u7ed3\u679c\u96c6list Top K\u95ee\u9898 \u9762\u8bd5\u9898\u4e2d\u6709\u8fd9\u6837\u4e00\u7c7b\u95ee\u9898\uff0c\u8ba9\u6c42\u51fa\u5927\u91cf\u6570\u636e\u4e2d\u7684top k \u4e2a\u5143\u7d20\uff0c\u6bd4\u5982\u4e00\u4ebf\u4e2a\u6570\u5b57\u4e2d\u6700\u5927\u7684100\u4e2a\u6570\u5b57\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\u6709\u5f88\u591a\u79cd\u89e3\u6cd5\uff0c\u6bd4\u5982\u76f4\u63a5\u6392\u5e8f\u3001mapreduce\u3001trie \u6811\u3001\u5206\u6cbb\u6cd5\u7b49\uff0c\u5f53\u7136\u5982\u679c\u5185\u5b58\u591f\u7528\u76f4\u63a5\u6392\u5e8f\u662f\u6700\u7b80\u5355\u7684\u3002 \u5982\u679c\u5185\u5b58\u4e0d\u591f\u7528\u5462\uff1f \u8fd9\u91cc\u6211\u4eec\u63d0\u4e00\u4e0b\u4f7f\u7528\u56fa\u5b9a\u5927\u5c0f\u7684\u5806\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u65b9\u5f0f\u3002 \u4e00\u5f00\u59cb\u7684\u601d\u8def\u53ef\u80fd\u662f\uff0c\u65e2\u7136\u6c42\u6700\u5927\u7684 k \u4e2a\u6570\uff0c\u662f\u4e0d\u662f\u5e94\u8be5\u7ef4\u62a4\u4e00\u4e2a\u5305\u542b k \u4e2a\u5143\u7d20\u7684\u6700\u5927\u5806\u5462\uff1f \u7a0d\u5fae\u5c1d\u8bd5\u4e0b\u4f60\u4f1a\u53d1\u73b0\u8d70\u4e0d\u901a\u3002\u6211\u4eec\u5148\u7528\u6570\u7ec4\u7684\u524d\u9762 k \u4e2a\u5143\u7d20\u5efa\u7acb\u6700\u5927\u5806\uff0c\u7136\u540e\u5bf9\u5269\u4e0b\u7684\u5143\u7d20\u8fdb\u884c\u6bd4\u5bf9\uff0c\u4f46\u662f\u6700\u5927\u5806\u53ea\u80fd\u6bcf\u6b21\u83b7\u53d6\u5806\u9876 \u6700\u5927\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u6211\u4eec\u53d6\u4e0b\u4e00\u4e2a\u5927\u4e8e\u5806\u9876\u7684\u503c\u548c\u5806\u9876\u66ff\u6362\uff0c\u4f60\u4f1a\u53d1\u73b0\u5806\u5e95\u90e8\u7684\u5c0f\u6570\u4e00\u76f4\u4e0d\u4f1a\u88ab\u6362\u6389\u3002\u5982\u679c\u4e0b\u4e00\u4e2a\u5143\u7d20\u5c0f\u4e8e\u5806\u9876 \u5c31\u66ff\u6362\u4e5f\u4e0d\u5bf9\uff0c\u8fd9\u6837\u53ef\u80fd\u6700\u5927\u7684\u5143\u7d20\u5c31\u88ab\u6211\u4eec\u4e22\u6389\u4e86\u3002 \u76f8\u53cd\u6211\u4eec\u7528\u6700\u5c0f\u5806\u5462\uff1f \u5148\u8fed\u4ee3\u524d k \u4e2a\u5143\u7d20\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806\uff0c\u4e4b\u540e\u7684\u5143\u7d20\u5982\u679c\u5c0f\u4e8e\u5806\u9876\u6700\u5c0f\u503c\uff0c\u8df3\u8fc7\uff0c\u5426\u5219\u66ff\u6362\u5806\u9876\u5143\u7d20\u5e76\u91cd\u65b0\u8c03\u6574\u5806\u3002\u4f60\u4f1a\u53d1\u73b0\u6700\u5c0f\u5806\u91cc \u6162\u6162\u5c31\u88ab\u66ff\u6362\u6210\u4e86\u6700\u5927\u7684\u90a3\u4e9b\u503c\uff0c\u5e76\u4e14\u6700\u540e\u5806\u9876\u662f\u6700\u5927\u7684 topk \u4e2a\u503c\u4e2d\u7684\u6700\u5c0f\u503c\u3002 \uff08\u6bd4\u59821000\u4e2a\u6570\u627e10\u4e2a\uff0c\u6700\u540e\u5806\u91cc\u5269\u4f59\u7684\u662f [990, 991, 992, 996, 994, 993, 997, 998, 999, 995]\uff0c\u7b2c\u4e00\u4e2a 990 \u6700\u5c0f) import heapq class TopK : \"\"\"\u83b7\u53d6\u5927\u91cf\u5143\u7d20 topk \u5927\u4e2a\u5143\u7d20\uff0c\u56fa\u5b9a\u5185\u5b58 \u601d\u8def\uff1a 1. \u5148\u653e\u5165\u5143\u7d20\u524d k \u4e2a\u5efa\u7acb\u4e00\u4e2a\u6700\u5c0f\u5806 2. \u8fed\u4ee3\u5269\u4f59\u5143\u7d20\uff1a \u5982\u679c\u5f53\u524d\u5143\u7d20\u5c0f\u4e8e\u5806\u9876\u5143\u7d20\uff0c\u8df3\u8fc7\u8be5\u5143\u7d20\uff08\u80af\u5b9a\u4e0d\u662f\u524d k \u5927\uff09 \u5426\u5219\u66ff\u6362\u5806\u9876\u5143\u7d20\u4e3a\u5f53\u524d\u5143\u7d20\uff0c\u5e76\u91cd\u65b0\u8c03\u6574\u5806 \"\"\" def __init__ ( self , iterable , k ): self . minheap = [] self . capacity = k self . iterable = iterable def push ( self , val ): if len ( self . minheap ) >= self . capacity : min_val = self . minheap [ 0 ] if val < min_val : # \u5f53\u7136\u4f60\u53ef\u4ee5\u76f4\u63a5 if val > min_val\u64cd\u4f5c\uff0c\u8fd9\u91cc\u6211\u53ea\u662f\u663e\u793a\u6307\u51fa\u8df3\u8fc7\u8fd9\u4e2a\u5143\u7d20 pass else : heapq . heapreplace ( self . minheap , val ) # \u8fd4\u56de\u5e76\u4e14pop\u5806\u9876\u6700\u5c0f\u503c\uff0c\u63a8\u5165\u65b0\u7684 val \u503c\u5e76\u8c03\u6574\u5806 else : heapq . heappush ( self . minheap , val ) # \u524d\u9762 k \u4e2a\u5143\u7d20\u76f4\u63a5\u653e\u5165minheap def get_topk ( self ): for val in self . iterable : self . push ( val ) return self . minheap def test (): import random i = list ( range ( 1000 )) # \u8fd9\u91cc\u53ef\u4ee5\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u5143\u7d20\uff0c\u8282\u7701\u5185\u5b58 random . shuffle ( i ) _ = TopK ( i , 10 ) print ( _ . get_topk ()) # [990, 991, 992, 996, 994, 993, 997, 998, 999, 995] if __name__ == '__main__' : test ()","title":"\u5806\u6392\u5e8f"},{"location":"python%E5%88%B7%E9%A2%98/#_10","text":"\u4f60\u53ef\u80fd\u6bd4\u8f83\u5947\u602a\uff0c\u961f\u5217\u4e0d\u662f\u65e9\u5c31\u8bb2\u4e86\u561b\u3002\u8fd9\u91cc\u4e4b\u6240\u4ee5\u653e\u5230\u8fd9\u91cc\u8bb2\u4f18\u5148\u7ea7\u961f\u5217\uff0c\u662f\u56e0\u4e3a\u867d\u7136\u540d\u5b57\u6709\u961f\u5217\uff0c \u4f46\u5176\u5b9e\u662f\u4f7f\u7528\u5806\u6765\u5b9e\u73b0\u7684\u3002\u4e0a\u4e00\u7ae0\u8bb2\u5b8c\u4e86\u5806\uff0c\u8fd9\u4e00\u7ae0\u6211\u4eec\u5c31\u8d81\u70ed\u6253\u94c1\u6765\u5b9e\u73b0\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u3002 \u5b9e\u73b0\u4f18\u5148\u7ea7\u961f\u5217 \u4f18\u5148\u7ea7\u961f\u5217(Priority Queue) \u987e\u540d\u601d\u4e49\uff0c\u5c31\u662f\u5165\u961f\u7684\u65f6\u5019\u53ef\u4ee5\u7ed9\u4e00\u4e2a\u4f18\u5148\u7ea7\uff0c\u901a\u5e38\u662f\u4e2a\u6570\u5b57\u6216\u8005\u65f6\u95f4\u6233\u7b49\uff0c \u5f53\u51fa\u961f\u7684\u65f6\u5019\u6211\u4eec\u5e0c\u671b\u6309\u7167\u7ed9\u5b9a\u7684\u4f18\u5148\u7ea7\u51fa\u961f\uff0c\u6211\u4eec\u6309\u7167 TDD(\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1) \u7684\u65b9\u5f0f\u5148\u6765\u5199\u6d4b\u8bd5\u4ee3\u7801\uff1a def test_priority_queue (): size = 5 pq = PriorityQueue ( size ) pq . push ( 5 , 'purple' ) # priority, value pq . push ( 0 , 'white' ) pq . push ( 3 , 'orange' ) pq . push ( 1 , 'black' ) res = [] while not pq . is_empty (): res . append ( pq . pop ()) assert res == [ 'purple' , 'orange' , 'black' , 'white' ] \u4e0a\u8fb9\u5c31\u662f\u671f\u671b\u7684\u884c\u4e3a\uff0c\u5199\u5b8c\u6d4b\u8bd5\u4ee3\u7801\u540e\u6211\u4eec\u6765\u7f16\u5199\u4f18\u5148\u7ea7\u961f\u5217\u7684\u4ee3\u7801\uff0c\u6309\u7167\u51fa\u961f\u7684\u65f6\u5019\u6700\u5927\u4f18\u5148\u7ea7\u5148\u51fa\u7684\u987a\u5e8f\uff1a class PriorityQueue ( object ): def __init__ ( self , maxsize ): self . maxsize = maxsize self . _maxheap = MaxHeap ( maxsize ) def push ( self , priority , value ): # \u6ce8\u610f\u8fd9\u91cc\u628a\u8fd9\u4e2a tuple push \u8fdb\u53bb\uff0cpython \u6bd4\u8f83 tuple \u4ece\u7b2c\u4e00\u4e2a\u5f00\u59cb\u6bd4\u8f83 # \u8fd9\u6837\u5c31\u5f88\u5de7\u5999\u5730\u5b9e\u73b0\u4e86\u6309\u7167\u4f18\u5148\u7ea7\u6392\u5e8f entry = ( priority , value ) # \u5165\u961f\u7684\u65f6\u5019\u4f1a\u6839\u636e priority \u7ef4\u6301\u5806\u7684\u7279\u6027 self . _maxheap . add ( entry ) def pop ( self , with_priority = False ): entry = self . _maxheap . extract () if with_priority : return entry else : return entry [ 1 ] def is_empty ( self ): return len ( self . _maxheap ) == 0","title":"\u4f18\u5148\u7ea7\u961f\u5217"},{"location":"python%E5%88%B7%E9%A2%98/#on","text":"\u4e8c\u53c9\u67e5\u627e\u6811\u662f\u8fd9\u6837\u4e00\u79cd\u4e8c\u53c9\u6811\u7ed3\u6784\uff0c\u5b83\u7684\u6bcf\u4e2a\u8282\u70b9\u5305\u542b\u4e00\u4e2a key \u548c\u5b83\u9644\u5e26\u7684\u6570\u636e\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9 V\uff1a \u6240\u6709 key \u5c0f\u4e8e V \u7684\u90fd\u88ab\u5b58\u50a8\u5728 V \u7684\u5de6\u5b50\u6811 \u6240\u6709 key \u5927\u4e8e V \u7684\u90fd\u5b58\u50a8\u5728 V \u7684\u53f3\u5b50\u6811 \u8bf4\u767d\u4e86\u5c31\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u5185\u90e8\u8282\u70b9\uff0c\u5de6\u5b50\u6811\u7684 key \u90fd\u6bd4\u5b83\u5c0f\uff0c\u53f3\u5b50\u6811\u90fd\u6bd4\u5b83\u5927\u3002 \u5982\u679c\u4e2d\u5e8f\u904d\u5386(\u4e8c\u53c9\u6811\u904d\u5386\u8bb2\u8fc7\u4e86)\u8fd9\u9897\u4e8c\u53c9\u6811\uff0c\u4f60\u4f1a\u53d1\u73b0\u8f93\u51fa\u7684\u987a\u5e8f\u6b63\u597d\u662f\u6709\u5e8f\u7684\u3002 # -*- coding: utf-8 -*- class BSTNode ( object ): def __init__ ( self , key , value , left = None , right = None ): self . key , self . value , self . left , self . right = key , value , left , right class BST ( object ): def __init__ ( self , root = None ): self . root = root @classmethod def build_from ( cls , node_list ): cls . size = 0 key_to_node_dict = {} for node_dict in node_list : key = node_dict [ 'key' ] key_to_node_dict [ key ] = BSTNode ( key , value = key ) # \u8fd9\u91cc\u503c\u6682\u65f6\u7528 \u548c key\u4e00\u6837\u7684 for node_dict in node_list : key = node_dict [ 'key' ] node = key_to_node_dict [ key ] if node_dict [ 'is_root' ]: root = node node . left = key_to_node_dict . get ( node_dict [ 'left' ]) node . right = key_to_node_dict . get ( node_dict [ 'right' ]) cls . size += 1 return cls ( root ) # \u4ece\u6839\u8282\u70b9\u5f00\u59cb\uff0c\u5982\u679c search_key \u5927\u4e8e\u5f53\u524d key\uff0c\u5c31\u53bb\u53f3\u5b50\u6811\u67e5\u627e\uff0c\u5426\u5219\u53bb\u5de6\u5b50\u6811\u67e5\u627e\u3002 \u4e00\u76f4\u5230\u5f53\u524d\u8282\u70b9\u662f None \u4e86\u8bf4\u660e\u6ca1\u627e\u5230\u5bf9\u5e94 key\u3002 def _bst_search ( self , subtree , key ): if subtree is None : # \u6ca1\u627e\u5230 return None elif key < subtree . key : return self . _bst_search ( subtree . left , key ) elif key > subtree . key : return self . _bst_search ( subtree . right , key ) else : return subtree def __contains__ ( self , key ): \"\"\"\u5b9e\u73b0 in \u64cd\u4f5c\u7b26\"\"\" return self . _bst_search ( self . root , key ) is not None def get ( self , key , default = None ): node = self . _bst_search ( self . root , key ) if node is None : return default else : return node . value # \u6700\u5c0f\u503c\u5c31\u4e00\u76f4\u5411\u7740\u5de6\u5b50\u6811\u627e\uff0c\u6700\u5927\u503c\u4e00\u76f4\u5411\u53f3\u5b50\u6811\u627e\uff0c\u9012\u5f52\u67e5\u627e\u5c31\u884c def _bst_min_node ( self , subtree ): if subtree is None : return None elif subtree . left is None : # \u627e\u5230\u5de6\u5b50\u6811\u7684\u5934 return subtree else : return self . _bst_min_node ( subtree . left ) def bst_min ( self ): node = self . _bst_min_node ( self . root ) return node . value if node else None # \u63d2\u5165\u8282\u70b9\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u4e00\u76f4\u4fdd\u6301 BST \u7684\u6027\u8d28\uff0c\u6bcf\u6b21\u63d2\u5165\u4e00\u4e2a\u8282\u70b9\uff0c\u6211\u4eec\u90fd\u901a\u8fc7\u9012\u5f52\u6bd4\u8f83\u628a\u5b83\u653e\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u4f60\u4f1a\u53d1\u73b0\u65b0\u8282\u70b9\u603b\u662f\u88ab\u4f5c\u4e3a\u53f6\u5b50\u7ed3\u70b9\u63d2\u5165(\u56e0\u4e3a\u63d2\u5165\u7684\u503c\u603b\u662f\u4f1a\u4e00\u76f4\u548c\u6bd4\u8f83\uff0c\u4e00\u76f4\u5f80\u4e0b\u8d70) def _bst_insert ( self , subtree , key , value ): \"\"\" \u63d2\u5165\u5e76\u4e14\u8fd4\u56de\u6839\u8282\u70b9 :param subtree: :param key: :param value: \"\"\" if subtree is None : # \u63d2\u5165\u7684\u8282\u70b9\u4e00\u5b9a\u662f\u6839\u8282\u70b9\uff0c\u5305\u62ec root \u4e3a\u7a7a\u7684\u60c5\u51b5 subtree = BSTNode ( key , value ) elif key < subtree . key : subtree . left = self . _bst_insert ( subtree . left , key , value ) elif key > subtree . key : subtree . right = self . _bst_insert ( subtree . right , key , value ) return subtree def add ( self , key , value ): node = self . _bst_search ( self . root , key ) if node is not None : # \u66f4\u65b0\u5df2\u7ecf\u5b58\u5728\u7684 key node . value = value return False else : self . root = self . _bst_insert ( self . root , key , value ) self . size += 1 return True # \u5220\u9664\u64cd\u4f5c\u76f8\u6bd4\u4e0a\u8fb9\u7684\u64cd\u4f5c\u8981\u9ebb\u70e6\u5f88\u591a\uff0c\u9996\u5148\u9700\u8981\u5b9a\u4f4d\u4e00\u4e2a\u8282\u70b9\uff0c\u5220\u9664\u8282\u70b9\u540e\uff0c\u6211\u4eec\u9700\u8981\u59cb\u7ec8\u4fdd\u6301 BST \u7684\u6027\u8d28\u3002 \u5220\u9664\u4e00\u4e2a\u8282\u70b9\u6d89\u53ca\u5230\u4e09\u79cd\u60c5\u51b5\uff1a\u8282\u70b9\u662f\u53f6\u8282\u70b9,\u8282\u70b9\u6709\u4e00\u4e2a\u5b69\u5b50,\u8282\u70b9\u6709\u4e24\u4e2a\u5b69\u5b50 def _bst_remove ( self , subtree , key ): \"\"\"\u5220\u9664\u8282\u70b9\u5e76\u8fd4\u56de\u6839\u8282\u70b9\"\"\" if subtree is None : return None elif key < subtree . key : subtree . left = self . _bst_remove ( subtree . left , key ) return subtree elif key > subtree . key : subtree . right = self . _bst_remove ( subtree . right , key ) return subtree else : # \u627e\u5230\u4e86\u9700\u8981\u5220\u9664\u7684\u8282\u70b9 if subtree . left is None and subtree . right is None : # \u53f6\u8282\u70b9(\u6700\u7b80\u5355\u7684\u60c5\u51b5)\uff0c\u8fd4\u56de None \u5373\u53ea\u9700\u8981\u628a\u5b83\u7684\u7236\u4eb2\u6307\u5411\u5b83\u7684\u6307\u9488\u8bbe\u7f6e\u4e3a None \u5c31\u597d return None # \u5220\u9664\u6709\u4e00\u4e2a\u5b69\u5b50\u7684\u8282\u70b9\u65f6\uff0c\u6211\u4eec\u62ff\u6389\u9700\u8981\u5220\u9664\u7684\u8282\u70b9\uff0c\u4e4b\u540e\u628a\u5b83\u7684\u7236\u4eb2\u6307\u5411\u5b83\u7684\u5b69\u5b50\u5c31\u884c\uff0c\u56e0\u4e3a\u6839\u636e BST \u5de6\u5b50\u6811\u90fd\u5c0f\u4e8e\u8282\u70b9\uff0c\u53f3\u5b50\u6811\u90fd\u5927\u4e8e\u8282\u70b9\u7684\u7279\u6027\uff0c\u5220\u9664\u5b83\u4e4b\u540e\u8fd9\u4e2a\u6761\u4ef6\u4f9d\u65e7\u6ee1\u8db3\u3002 elif subtree . left is None or subtree . right is None : # \u53ea\u6709\u4e00\u4e2a\u5b69\u5b50 if subtree . left is not None : return subtree . left # \u8fd4\u56de\u5b83\u7684\u5b69\u5b50\u5e76\u8ba9\u5b83\u7684\u7236\u4eb2\u6307\u8fc7\u53bb else : return subtree . right # \u5220\u9664\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u8282\u70b9:\u6bd4\u8f83\u9ebb\u70e6\uff0c\u540e\u7eed\u89e3\u91ca else : # \u4fe9\u5b69\u5b50\uff0c\u5bfb\u627e\u540e\u7ee7\u8282\u70b9\u66ff\u6362\uff0c\u5e76\u5220\u9664\u5176\u53f3\u5b50\u6811\u7684\u540e\u7ee7\u8282\u70b9\uff0c\u540c\u65f6\u66f4\u65b0\u5176\u53f3\u5b50\u6811 successor_node = self . _bst_min_node ( subtree . right ) subtree . key , subtree . value = successor_node . key , successor_node . value subtree . right = self . _bst_remove ( subtree . right , successor_node . key ) return subtree def remove ( self , key ): assert key in self self . size -= 1 return self . _bst_remove ( self . root , key ) NODE_LIST = [ { 'key' : 60 , 'left' : 12 , 'right' : 90 , 'is_root' : True }, { 'key' : 12 , 'left' : 4 , 'right' : 41 , 'is_root' : False }, { 'key' : 4 , 'left' : 1 , 'right' : None , 'is_root' : False }, { 'key' : 1 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 41 , 'left' : 29 , 'right' : None , 'is_root' : False }, { 'key' : 29 , 'left' : 23 , 'right' : 37 , 'is_root' : False }, { 'key' : 23 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 37 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 90 , 'left' : 71 , 'right' : 100 , 'is_root' : False }, { 'key' : 71 , 'left' : None , 'right' : 84 , 'is_root' : False }, { 'key' : 100 , 'left' : None , 'right' : None , 'is_root' : False }, { 'key' : 84 , 'left' : None , 'right' : None , 'is_root' : False }, ] def test_bst_tree (): bst = BST . build_from ( NODE_LIST ) for node_dict in NODE_LIST : key = node_dict [ 'key' ] assert bst . get ( key ) == key assert bst . size == len ( NODE_LIST ) assert bst . get ( - 1 ) is None # \u5355\u4f8b\u7684 None \u6211\u4eec\u7528 is \u6765\u6bd4\u8f83 assert bst . bst_min () == 1 bst . add ( 0 , 0 ) assert bst . bst_min () == 0 bst . remove ( 12 ) assert bst . get ( 12 ) is None bst . remove ( 1 ) assert bst . get ( 1 ) is None bst . remove ( 29 ) assert bst . get ( 29 ) is None \u5220\u9664\u542b\u6709\u4e24\u4e2a\u5b69\u5b50\u7684\u5185\u90e8\u8282\u70b9 \u8fd9\u91cc\u6211\u4eec\u7528\u53e6\u4e00\u79cd\u975e\u5e38\u5de7\u5999\u7684\u65b9\u5f0f\u3002 \u8fd8\u8bb0\u5f97\u4e0a\u8fb9\u63d0\u5230\u7684\u5417\uff0c\u5982\u679c\u4f60\u4e2d\u5e8f\u904d\u5386 BST \u5e76\u4e14\u8f93\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684 key\uff0c\u4f60\u4f1a\u53d1\u73b0\u5c31\u662f\u4e00\u4e2a\u6709\u5e8f\u7684\u6570\u7ec4\u3002 [1 4 12 23 29 37 41 60 71 84 90 100] \u3002\u8fd9\u91cc\u6211\u4eec\u5b9a\u4e49\u4e24\u4e2a\u6982\u5ff5\uff0c\u903b\u8f91\u524d\u4efb(predecessor)\u548c\u540e\u7ee7(successor)\uff0c\u8bf7\u770b\u4e0b\u56fe: 12 \u5728\u4e2d\u5e8f\u904d\u5386\u4e2d\u7684\u903b\u8f91\u524d\u4efb\u548c\u540e\u7ee7\u5206\u522b\u662f 4 \u548c 23 \u8282\u70b9\u3002\u4e8e\u662f\u6211\u4eec\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u6765\u5220\u9664 12 \u8fd9\u4e2a\u8282\u70b9\uff1a \u627e\u5230\u5f85\u5220\u9664\u8282\u70b9 N(12) \u7684\u540e\u7ee7\u8282\u70b9 S(23) \u590d\u5236\u8282\u70b9 S \u5230\u8282\u70b9 N \u4ece N \u7684\u53f3\u5b50\u6811\u4e2d\u5220\u9664\u8282\u70b9 S\uff0c\u5e76\u66f4\u65b0\u5176\u5220\u9664\u540e\u7ee7\u8282\u70b9\u540e\u7684\u53f3\u5b50\u6811 \u8bf4\u767d\u4e86\u5c31\u662f\u627e\u5230\u540e\u7ee7\u5e76\u4e14\u66ff\u6362\uff0c\u8fd9\u91cc\u4e4b\u6240\u4ee5\u80fd\u4fdd\u8bc1\u8fd9\u79cd\u65b9\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u4f60\u4f1a\u53d1\u73b0\u66ff\u6362\u540e\u4f9d\u65e7\u662f\u4fdd\u6301\u4e86 BST \u7684\u6027\u8d28\u3002 \u6709\u4e2a\u95ee\u9898\u662f\u5982\u4f55\u627e\u5230\u540e\u7ee7\u8282\u70b9\u5462\uff1f\u5f85\u5220\u9664\u8282\u70b9\u7684\u53f3\u5b50\u6811\u7684\u6700\u5c0f\u7684\u8282\u70b9\u4e0d\u5c31\u662f\u540e\u7ee7\u561b\uff0c\u4e0a\u8fb9\u6211\u4eec\u5df2\u7ecf\u5b9e\u73b0\u4e86\u627e\u5230\u6700\u5c0f key \u7684\u65b9\u6cd5\u4e86\u3002","title":"\u4e8c\u53c9\u67e5\u627e\u6811(\u6548\u7387\u6700\u9ad8:O(N))"},{"location":"python%E5%88%B7%E9%A2%98/#_11","text":"\u7b80\u5355\u5730\u8bf4\u5c31\u662f\u6709\u8282\u70b9(node)\u548c\u8fb9(edge)\u7ec4\u6210\u7684\u4e00\u79cd\u6570\u636e\u7ed3\u6784\uff0c\u76f8\u90bb\u7684\u8282\u70b9\u79f0\u4e4b\u4e3a\u90bb\u5c45\u3002 \u6ce8\u610f\u56fe\u5206\u4e3a\u6709\u5411\u56fe\u548c\u65e0\u5411\u56fe\uff0c \u6bd4\u5982\u6709\u4e9b\u8def\u662f\u5355\u884c\u9053\uff0c\u6709\u4e9b\u662f\u53cc\u884c\u9053\uff0c\u6709\u5411\u56fe\u6211\u4eec\u7528\u7bad\u5934\u6307\u5411\uff0c\u65e0\u5411\u56fe\u5c31\u662f\u4e00\u6761\u76f4\u7ebf\u8fde\u63a5\u3002 \u90bb\u63a5\u8868\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u56fe\u4e2d\u7684\u70b9\uff0c\u5c06\u5b83\u7684\u90bb\u5c45\u653e\u5230\u4e00\u4e2a\u94fe\u8868\u91cc \u90bb\u63a5\u77e9\u9635\uff1a\u5bf9\u4e8e n \u4e2a\u70b9\uff0c\u6784\u9020\u4e00\u4e2a n * n \u7684\u77e9\u9635\uff0c\u5982\u679c\u6709\u4ece\u70b9 i \u5230\u70b9 j \u7684\u8fb9\uff0c\u5c31\u5c06\u77e9\u9635\u7684\u4f4d\u7f6e matrix[i][j] \u7f6e\u4e3a 1. \u7528\u77e9\u9635\u5b58\u50a8\u56fe\u662f\u975e\u5e38\u8017\u8d39\u7a7a\u95f4\u7684\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\u77e9\u9635\u662f\u7a00\u758f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u540e\u8fb9\u9009\u62e9\u4f7f\u7528\u90bb\u63a5\u8868\u3002 \u5e7f\u5ea6\u4f18\u5148\u641c\u7d22(BFS) BFS \u7c7b\u4f3c\u4e8e\u6811\u7684\u5c42\u5e8f\u904d\u5386\uff0c\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\uff0c\u5148\u8bbf\u95ee\u79bb A \u6700\u8fd1\u7684\u70b9\uff0c\u63a5\u7740\u8bbf\u95ee\u6b21\u8fd1\u7684\u70b9\u3002\u6211\u4eec\u5148\u6765\u6784\u9020\u4e00\u4e2a\u56fe\uff1a graph = { 'A' : [ 'B' , 'F' ], 'B' : [ 'C' , 'I' , 'G' ], 'C' : [ 'B' , 'I' , 'D' ], 'D' : [ 'C' , 'I' , 'G' , 'H' , 'E' ], 'E' : [ 'D' , 'H' , 'F' ], 'F' : [ 'A' , 'G' , 'E' ], 'G' : [ 'B' , 'F' , 'H' , 'D' ], 'H' : [ 'G' , 'D' , 'E' ], 'I' : [ 'B' , 'C' , 'D' ], } \u5982\u4f55\u300e\u7531\u8fd1\u53ca\u8fdc\u300f\u5730\u8bbf\u95ee\u8282\u70b9\u5462\uff1f\u6211\u4eec\u5148\u8bbf\u95ee\u8d77\u70b9 A \u7684\u90bb\u5c45\uff0c\u7136\u540e\u90bb\u5c45\u8bbf\u95ee\u5b8c\u518d\u8bbf\u95ee\u90bb\u5c45\u7684\u90bb\u5c45\u4e0d\u5c31\u884c\u4e86\uff1f \u5c31\u662f\u8fd9\u4e2a\u601d\u60f3\uff0c\u4e0d\u8fc7\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u961f\u5217\u8f85\u52a9\uff0c\u961f\u5217\u4e4b\u524d\u8bf4\u8fc7\u662f\u4e00\u79cd\u5148\u8fdb\u5148\u51fa\u7ed3\u6784\uff0c\u6211\u4eec\u53ea\u9700\u8981\u628a\u8d77\u70b9\u7684\u90bb\u5c45\u5148\u5165\u961f\uff0c \u5f53\u90bb\u5c45\u8bbf\u95ee\u5b8c\u4e86\u518d\u53bb\u8bbf\u95ee\u90bb\u5c45\u7684\u90bb\u5c45\u5c31\u53ef\u4ee5\u4e86\uff0c\u5bf9\u4e8e\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u7684\u8282\u70b9\uff0c\u6211\u4eec\u7528\u4e00\u4e2a set \u8bb0\u5f55\u5b83\u5c31\u597d\u4e86\u3002\u4ee3\u7801\u5982\u4e0b # -*- coding: utf-8 -*- from collections import deque GRAPH = { 'A' : [ 'B' , 'F' ], 'B' : [ 'C' , 'I' , 'G' ], 'C' : [ 'B' , 'I' , 'D' ], 'D' : [ 'C' , 'I' , 'G' , 'H' , 'E' ], 'E' : [ 'D' , 'H' , 'F' ], 'F' : [ 'A' , 'G' , 'E' ], 'G' : [ 'B' , 'F' , 'H' , 'D' ], 'H' : [ 'G' , 'D' , 'E' ], 'I' : [ 'B' , 'C' , 'D' ], } class Queue ( object ): def __init__ ( self ): self . _deque = deque () def push ( self , value ): return self . _deque . append ( value ) def pop ( self ): return self . _deque . popleft () def __len__ ( self ): return len ( self . _deque ) def bfs ( graph , start ): search_queue = Queue () search_queue . push ( start ) searched = set () while search_queue : # \u961f\u5217\u4e0d\u4e3a\u7a7a\u5c31\u7ee7\u7eed cur_node = search_queue . pop () if cur_node not in searched : yield cur_node searched . add ( cur_node ) for node in graph [ cur_node ]: search_queue . push ( node ) print ( 'bfs:' ) bfs ( GRAPH , 'A' ) \"\"\" bfs: A B F C I G E D H \"\"\" \u6df1\u5ea6\u4f18\u5148\u641c\u7d22(DFS) \u6df1\u5ea6\u4f18\u5148\u641c\u7d22(DFS)\u662f\u6bcf\u9047\u5230\u4e00\u4e2a\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5c31\u76f4\u63a5\u53bb\u8bbf\u95ee\u5b83\u7684\u90bb\u5c45\u8282\u70b9\uff0c\u4e0d\u65ad\u52a0\u6df1\u3002\u4ee3\u7801\u5176\u5b9e\u5f88\u7b80\u5355\uff1a DFS_SEARCHED = set () def dfs ( graph , start ): if start not in DFS_SEARCHED : print ( start ) DFS_SEARCHED . add ( start ) for node in graph [ start ]: if node not in DFS_SEARCHED : dfs ( graph , node ) print ( 'dfs:' ) dfs ( GRAPH , 'A' ) # A B C I D G F E H","title":"\u56fe"},{"location":"vim_cmake_git/","text":"Vim\u7b80\u5355\u914d\u7f6e \u00b6 filetype plugin on \" \u6309 F5 \u6267\u884c\u5f53\u524d Python \u4ee3\u7801\" map <F5> :call PRUN () <CR> func! PRUN () exec \"w\" if & filetype == 'python' exec \"!python %\" endif endfunc \"\u66f4\u591a\u914d\u8272\u65b9\u6848:https://hub.fastgit.org/wklken/k-vim\" \"colorscheme desert \u8bbe\u5b9a\u914d\u8272\u65b9\u6848\" \"python \u81ea\u52a8\u7f29\u8fdb\" set filetype = python au BufNewFile,BufRead *.py,*.pyw setf python set helplang = cn \"\u4e2d\u6587\u5e2e\u52a9\u6587\u6863(\u524d\u63d0\u662f\u4e0b\u4e86\u4e2d\u6587\u5305) syntax enable syntax on \" \u81ea\u52a8\u8bed\u6cd5\u9ad8\u4eae set guifont = Consolas:h12:cANSI \"\u82f1\u6587\u5b57\u4f53 set guifontwide=SimSun-ExtB:h12:cGB2312 autocmd FileType python set tabstop=4 | set expandtab | set autoindent set autoread \" \u5f53\u6587\u4ef6\u5728\u5916\u90e8\u88ab\u4fee\u6539\u65f6\uff0c\u81ea\u52a8\u91cd\u65b0\u8bfb\u53d6 set history = 400 \"vim\u8bb0\u4f4f\u7684\u5386\u53f2\u64cd\u4f5c\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u7684\u662f20 set nocompatible \" \u4f7f\u7528vim\u81ea\u5df1\u7684\u952e\u76d8\u6a21\u5f0f,\u800c\u4e0d\u662f\u517c\u5bb9vi\u7684\u6a21\u5f0f set confirm \"\u5904\u7406\u672a\u4fdd\u5b58\u6216\u8005\u53ea\u8bfb\u6587\u4ef6\u65f6,\u7ed9\u51fa\u63d0\u793a set smartindent \" \u667a\u80fd\u5bf9\u9f50 \" set shiftwidth=4 \" \u8bbe\u7f6e\u7f16\u7801,\u652f\u6301\u4e2d\u6587\u4e0d\u4e71\u7801 \" set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 set termencoding=utf-8 set encoding=utf-8 \" \u663e\u793a\u884c\u53f7 \" set nu set number \" \u7a81\u51fa\u663e\u793a\u5f53\u524d\u884c \" set cursorline set cul \" cursorline\u7684\u7f29\u5199\u5f62\u5f0f \" set autoindent \" \u7ee7\u627f\u524d\u4e00\u884c\u7684\u7f29\u8fdb\u65b9\u5f0f\uff0c\u9002\u7528\u4e8e\u591a\u884c\u6ce8\u91ca \" set laststatus=2 \" \u603b\u662f\u663e\u793a\u72b6\u6001\u680f \" set ruler \" \u663e\u793a\u5149\u6807\u5f53\u524d\u4f4d\u7f6e \" set ignorecase \" \u67e5\u627e\u65f6\u5ffd\u7565\u5927\u5c0f\u5199 \" set nohlsearch \" \u9ad8\u4eae\u663e\u793a\u67e5\u627e\u5185 \" \" \u8ba9vimrc\u914d\u7f6e\u53d8\u66f4\u7acb\u5373\u751f\u6548 \" autocmd BufWritePost $MYVIMRC source $MYVIMRC git\u914d\u7f6e \u00b6 \u5e72\u8d27\u535a\u5ba2 # \u56e0\u4e3aGit\u662f\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u6240\u4ee5\u9700\u8981\u586b\u5199\u7528\u6237\u540d\u548c\u90ae\u7bb1\u4f5c\u4e3a\u4e00\u4e2a\u6807\u8bc6 # git config --global \u53c2\u6570\uff0c\u6709\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f60\u8fd9\u53f0\u673a\u5668\u4e0a\u6240\u6709\u7684Git\u4ed3\u5e93\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u67d0\u4e2a\u4ed3\u5e93\u6307\u5b9a\u7684\u4e0d\u540c\u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1\u3002 git config --global user.name \"\u7528\u6237\u540d\" git config --global user.email \"\u90ae\u7bb1\" # \u63d0\u4ea4\u4ee3\u7801 mkdir MyProject && cd MyProject # \u521b\u5efa\u9879\u76ee\u540d git init # \u628a\u76ee\u5f55\u53d8\u6210git\u53ef\u4ee5\u7ba1\u7406\u7684\u4ed3\u5e93,\u9879\u76ee\u4e0b\u4f1a\u591a\u4e00\u4e2a.git\u6587\u4ef6 vi readme.txt # 111111 \u5728\u8be5\u9879\u76ee\u4e0b\u5199\u4ee3\u7801\u5373\u53ef\uff0c\u672c\u6b21\u4f7f\u7528readme.txt\u4f5c\u4e3a\u6f14\u793a git add readme.txt # \u628a\u5185\u5bb9\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u91cc git commit -m \"\u63d0\u4ea4\u6ce8\u91ca\" # \u628a\u6587\u4ef6\u63d0\u4ea4\u5230\u4ed3\u5e93 git status # \u67e5\u770b\u662f\u5426\u8fd8\u6709\u6587\u4ef6\u672a\u63d0\u4ea4 vi readme.txt # append 222222,\u4fee\u6539readme.txt git status # \u8fd9\u4e2a\u547d\u4ee4\u544a\u8bc9\u6211\u4eec readme.txt\u6587\u4ef6\u5df2\u88ab\u4fee\u6539\uff0c\u4f46\u662f\u672a\u88ab\u63d0\u4ea4\u7684\u4fee\u6539 git diff readme.txt # \u770b\u4e0breadme.txt\u6587\u4ef6\u5230\u5e95\u6539\u4e86\u4ec0\u4e48\u5185\u5bb9 git add readme.txt # \u628a\u5185\u5bb9\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u91cc git status # \u63d0\u4ea4\u4e4b\u524d\u67e5\u770b\u72b6\u6001 git commit -m \"\u518d\u6b21\u6dfb\u52a0\u6ce8\u91ca\" # \u628a\u6587\u4ef6\u63d0\u4ea4\u5230\u4ed3\u5e93 # \u7248\u672c\u56de\u9000 vi readme.txt # append 333333,readme.txt\u6587\u4ef6\u603b\u5171\u8fdb\u884c\u4e86\u4e09\u6b21\u66f4\u6539 git log # \u67e5\u770b\u5386\u53f2\u8bb0\u5f55\uff0c\u663e\u793a\u4ece\u6700\u8fd1\u5230\u6700\u8fdc\u7684\u663e\u793a\u65e5\u5fd7\uff0c\u9ed8\u8ba4\u663e\u793a\u8be6\u7ec6\u4fe1\u606f git log --pretty = oneline # \u663e\u793a\u7b80\u6d01\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u663e\u793a3\u6b21\u66f4\u6539 # \u5f00\u59cb\u7248\u672c\u56de\u9000 git reset --hard HEAD^ # \u56de\u9000\u5230\u4e0a\u4e2a\u7248\u672c git reset --hard HEAD^^ # \u56de\u9000\u5230\u4e0a\u4e0a\u4e2a\u7248\u672c,\u4f9d\u6b21\u7c7b\u63a8\uff0c\u5982\u679c\u60f3\u56de\u9000\u5230\u524d100\u4e2a\u7248\u672c\u5462\uff1f git reset --hard HEAD~100 # \u56de\u9000\u5230\u524d100\u4e2a\u7248\u672c git log --pretty = oneline # \u663e\u793a2\u6b21\u66f4\u6539\u00a7 # \u5982\u4f55\u83b7\u53d6\u6bcf\u6b21\u66f4\u6539\u540e\u7684\u7248\u672c\u53f7\u5462\uff1f git reflog # \u5373\u4f7f\u6211\u6267\u884c\u8fc7\u4e00\u6b21\u56de\u9000\uff0c\u4f46\u662f\u6211\u5fd8\u8bb0\u4e86\u8fd9\u6b21\u56de\u9000\uff0c\u4e5f\u53ef\u4ee5\u663e\u793a\u51fa\u6765 git reset --hard \u7248\u672c\u53f7 ( 6fcfc89 ) # \u5982\u679c\u56de\u9000\u9519\u4e86\uff0c\u60f3\u8fd4\u56de\u5230\u6700\u65b0\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u6700\u65b0\u7248\u672c\u53f7\u6765\u56de\u9000 # \u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a # \u5de5\u4f5c\u533a:\u5c31\u662f\u4f60\u5728\u7535\u8111\u4e0a\u770b\u5230\u7684\u76ee\u5f55\u3002 # \u6682\u5b58\u533a:\u5de5\u4f5c\u533a\u6709\u4e00\u4e2a\u9690\u85cf\u76ee\u5f55.git,\u8fd9\u4e2a\u4e0d\u5c5e\u4e8e\u5de5\u4f5c\u533a\uff0c\u8fd9\u662f\u7248\u672c\u5e93,\u7248\u672c\u5e93\u91cc\u9762\u6709\u4e2astage\u7684\u6682\u5b58\u533a\uff0c\u8fd8\u6709Git\u4e3a\u6211\u4eec\u81ea\u52a8\u521b\u5efa\u4e86\u7b2c\u4e00\u4e2a\u5206\u652fmaster,\u4ee5\u53ca\u6307\u5411master\u7684\u4e00\u4e2a\u6307\u9488HEAD\u3002 vi readme.txt # append 555555,\u7a81\u7136\u53d1\u73b0\u6dfb\u52a0\u7684\u5185\u5bb9\u6709\u9519\u8bef\uff0c\u4f46\u662f\u4f60\u5fd8\u8bb0\u4e86\u4fee\u6539\u4e86\u5565\u5982\u4f55\u64a4\u9500\uff1f\u5f53\u7136\u662f\u5728\u672a\u63d0\u4ea4\u4e4b\u524d git status # \u67e5\u770b\u4e00\u4e0b\u662f\u4e0d\u662f\u672a\u63d0\u4ea4\uff0c\u5982\u679c\u672a\u63d0\u4ea4 git checkout --readme.txt # git checkout -- file \u53ef\u4ee5\u4e22\u5f03\u5728\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u3002 # \u6ce8\u610f \u547d\u4ee4git checkout -- readme.txt \u4e2d\u7684 -- \u5f88\u91cd\u8981\uff0c\u5982\u679c\u6ca1\u6709 -- \u7684\u8bdd\uff0c\u90a3\u4e48\u547d\u4ee4\u53d8\u6210\u521b\u5efa\u5206\u652f\u4e86\u3002 # \u8fdc\u7a0b\u4ed3\u5e93 ssh-keygen -t rsa \u2013C \u201cyouremail@example.com\u201d # \u521b\u5efassh\u79d8\u94a5\uff0c\u627e\u5230.ssh/id_rsa.pub\u516c\u94a5 # \u767b\u5f55github,\u6253\u5f00\u201d settings\u201d\u4e2d\u7684SSH Keys\u9875\u9762\uff0c\u7136\u540e\u70b9\u51fb\u201cAdd SSH Key\u201d,\u586b\u4e0a\u4efb\u610ftitle\uff0c\u5728Key\u6587\u672c\u6846\u91cc\u9ecf\u8d34id_rsa.pub\u6587\u4ef6\u7684\u5185\u5bb9 # \u6211\u4eec\u5df2\u7ecf\u5728\u672c\u5730\u521b\u5efa\u4e86\u4e00\u4e2aGit\u4ed3\u5e93\u540e\uff0c\u53c8\u60f3\u5728github\u521b\u5efa\u4e00\u4e2aGit\u4ed3\u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u8fd9\u4e24\u4e2a\u4ed3\u5e93\u8fdb\u884c\u8fdc\u7a0b\u540c\u6b65\uff0c\u8fd9\u6837github\u7684\u4ed3\u5e93\u53ef\u4ee5\u4f5c\u4e3a\u5907\u4efd\uff0c\u53c8\u53ef\u4ee5\u5176\u4ed6\u4eba\u901a\u8fc7\u8be5\u4ed3\u5e93\u6765\u534f\u4f5c\uff0c\u5728github\u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u4ed3\u5e93\uff0c\u4ed3\u5e93\u540d\u4fdd\u6301\u4e00\u81f4\uff0c\u5176\u4ed6\u9ed8\u8ba4 git remote add origin https://github.com/tugenhua0707/testgit.git # \u540e\u9762\u7684\u94fe\u63a5\u6539\u4e3a\u81ea\u5df1\u7684 # \u7531\u4e8e\u8fdc\u7a0b\u5e93\u662f\u7a7a\u7684\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u63a8\u9001master\u5206\u652f\u65f6\uff0c\u52a0\u4e0a\u4e86 \u2013u\u53c2\u6570\uff0cGit\u4e0d\u4f46\u4f1a\u628a\u672c\u5730\u7684master\u5206\u652f\u5185\u5bb9\u63a8\u9001\u7684\u8fdc\u7a0b\u65b0\u7684master\u5206\u652f\uff0c\u8fd8\u4f1a\u628a\u672c\u5730\u7684master\u5206\u652f\u548c\u8fdc\u7a0b\u7684master\u5206\u652f\u5173\u8054\u8d77\u6765\uff0c\u5728\u4ee5\u540e\u7684\u63a8\u9001\u6216\u8005\u62c9\u53d6\u65f6\u5c31\u53ef\u4ee5\u7b80\u5316\u547d\u4ee4\u3002 git push -u origin master # \u628a\u672c\u5730\u4ed3\u5e93\u5206\u652fmaster\u5185\u5bb9\u63a8\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u53bb git push origin master # \u4ee5\u540e\u7528\u8fd9\u4e2a\u547d\u4ee4\u5c31\u53ef\u4ee5\u4e86 # \u521b\u5efa\u5176\u4ed6\u5206\u652f git checkout -b dev # \u521b\u5efa\u5e76\u5207\u6362\u5206\u652f\u4e3adev\uff0cgit checkout -b\u76f8\u5f53\u4e8e git branch dev+git checkout dev git branch # \u67e5\u770b\u5f53\u524d\u5206\u652f # \u628adev\u5206\u652f\u4e0a\u7684\u5185\u5bb9\u5408\u5e76\u5230\u5206\u652fmaster\u4e0a\u4e86\uff0c\u53ef\u4ee5\u5728master\u5206\u652f\u4e0a\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4 git merge dev git merge dev # \u628adev\u5206\u652f\u4e0a\u7684\u5185\u5bb9\u5408\u5e76\u5230\u5206\u652fmaster\u4e0a\u4e86,\u9700\u5728master\u5206\u652f\u4e0a\u6267\u884c\u8be5\u547d\u4ee4\uff0c\u8fd9\u6837\u5c31\u5408\u5e76\u4e86\u4e24\u4e2a\u5206\u652f git branch -d dev # \u5220\u9664dev\u5206\u652f\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5408\u5e76\u5230master\u4e0a\u4e86 # \u89e3\u51b3\u51b2\u7a81\uff0c\u5047\u8bbereadme.txt\u6587\u4ef6\uff0cdev\u5206\u652f\u4e0a\u6dfb\u52a0\u4e86888888\uff0c\u800cmaster\u5206\u652f\u4e0a\u6dfb\u52a0\u4e86999999 git merge dev # \u4f1a\u62a5\u9519\uff0c\u6709\u51b2\u7a81\uff0c\u67e5\u770breadme.txt\u4f1a\u51fa\u73b0\u51b2\u7a81\u7684\u4ee3\u7801\u4f4d\u7f6e:<<<HEAD\u662f\u6307\u4e3b\u5206\u652f\u4fee\u6539\u7684\u5185\u5bb9\uff0c>>>>>dev \u662f\u6307dev\u4e0a\u4fee\u6539\u7684\u5185\u5bb9 # \u89e3\u51b3:\u4fee\u6539\u4ee3\u7801\u548cmaster\u5206\u652f\u4e0a\u7684\u5185\u5bb9\u4fdd\u6301\u4e00\u81f4\u5373\u53ef CMake \u00b6 \u57fa\u7840\u7528\u6cd5(\u5916\u90e8\u6784\u5efa) # 1.\u53d8\u91cf\u5f15\u7528\u65b9\u5f0f,\u5176\u5b9e\u5c31\u662f\u8868\u793a\u53d8\u91cf\u7684\u503c:${\u53d8\u91cf}\uff0cIF\u8bed\u53e5\u662f\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\u5f15\u7528\uff0c\u800c\u4e0d\u9700\u8981${}\u3002\u5982\u679c\u4f7f\u7528\u4e86${}\u53bb\u5e94\u7528\u53d8 \u91cf\uff0c\u5176\u5b9e IF \u4f1a\u53bb\u5224\u65ad\u540d\u4e3a${}\u6240\u4ee3\u8868\u7684\u503c\u7684\u53d8\u91cf\uff0c\u90a3\u5f53\u7136\u662f\u4e0d\u5b58\u5728\u7684\u4e86\u3002 # 2.\u6307\u4ee4\u4e2d\u53c2\u6570\u683c\u5f0f:\u6307\u4ee4(\u53c2\u65701 \u53c2\u65702 \u53c2\u65703)\uff0c\u6307\u4ee4\u662f\u5927\u5c0f\u5199\u65e0\u5173\u7684\uff0c\u53c2\u6570\u548c\u53d8\u91cf\u662f\u5927\u5c0f\u5199\u76f8\u5173\u7684\u3002\u4f46\uff0c\u63a8\u8350\u4f60\u5168\u90e8\u4f7f\u7528\u5927\u5199\u6307\u4ee4\u3002 # 3.\u9700\u8981\u4e3a\u4efb\u4f55\u5b50\u76ee\u5f55\u5efa\u7acbCMakeLists.txt\u6587\u4ef6 cmake_minimum_required ( VERSION 3 .15 ) # PROJECT(projectname [CXX] [C] [Java]),\u53ef\u4ee5\u6307\u5b9a\u5de5\u7a0b\u540d\u79f0+\u8bed\u8a00 # \u8fd9\u4e2a\u6307\u4ee4\u9ed8\u8ba4\u751f\u6210\u4e24\u4e2a\u53d8\u91cf:Test_BINARY_DIR+Test_SOURCE_DIR,\u4f46\u662fcmake\u7cfb\u7edf\u4e5f\u9884\u5b9a\u4e49\u4e86:PROJECT_BINARY_DIR+PROJECT_SOURCE_DIR(\u5efa\u8bae\u4f7f\u7528) project ( Test ) # \u5de5\u7a0b\u540d\u548c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6hello\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684 # SET \u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u663e\u5f0f\u7684\u5b9a\u4e49\u53d8\u91cf,\u5f53\u7136\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a.c\u6587\u4ef6\uff0cSET(SRC_LIST main.c t1.c t2.c) set ( CMAKE_CXX_STANDARD 14 ) set ( SRC_LIST main.cpp ) # \u7b49\u4ef7\u4e8eset(SRC_LIST \"main.cpp\")\uff0c\u5982\u679c\u67d0\u6587\u4ef6\u540d\u5305\u542b\u7a7a\u683c:fu nc.c\uff0c\u5fc5\u987b\u5e26\u53cc\u5f15\u53f7 # \u5411\u7ec8\u7aef\u8f93\u51fa\u7528\u6237\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u5305\u542b\u4e86\u4e09\u79cd\u7c7b\u578b: SEND_ERROR\uff0c\u4ea7\u751f\u9519\u8bef\uff0c\u751f\u6210\u8fc7\u7a0b\u88ab\u8df3\u8fc7\u3002 SATUS\uff0c\u8f93\u51fa\u524d\u7f00\u4e3a\u2014\u7684\u4fe1\u606f\u3002FATAL_ERROR\uff0c\u7acb\u5373\u7ec8\u6b62\u6240\u6709 cmake \u8fc7\u7a0b. MESSAGE ( STATUS \"This is BINARY dir \" ${ PROJECT_BINARY_DIR } ) # \u7f16\u8bd1\u6240\u5728\u8def\u5f84\uff0c\u4e00\u822c\u662fbuild\u6587\u4ef6\u8def\u5f84 MESSAGE ( STATUS \"This is SOURCE dir \" ${ PROJECT_SOURCE_DIR } ) # \u6307\u4ee3\u5de5\u7a0b\u8def\u5f84\uff0c\u7edd\u5bf9\u8def\u5f84\u5c31\u5230\u5de5\u7a0b\u540d\u79f0 #\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u5de5\u7a0b\u4f1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u540d\u4e3a hello \u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u76f8\u5173\u7684\u6e90\u6587\u4ef6\u662f SRC_LIST \u4e2d \u5b9a\u4e49\u7684\u6e90\u6587\u4ef6\u5217\u8868\uff0c \u672c\u4f8b\u4e2d\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u6210 ADD_EXECUTABLE(hello main.c)\u3002 add_executable ( Test ${ SRC_LIST } ) # \u53ef\u6267\u884c\u6587\u4ef6\u540d\uff0c\u4f60\u53ef\u4ee5\u968f\u4fbf\u8d77\u540d\u79f0\uff0c\u4e00\u822c\u548c\u5de5\u7a0b\u540d\u76f8\u540c # \u548ccmake\u540c\u7ea7\u76ee\u5f55\u4e0b\u6784\u5efabuild\u6587\u4ef6\u5939\uff0c\u7136\u540ecd \u8fdb\u5165 # \u751f\u6210MakeFile\u6587\u4ef6:cmake .. # \u6784\u5efa\u5de5\u7a0b:make,\u5982\u679c\u60f3\u770b\u5230\u8be6\u7ec6\u6784\u5efa\u8fc7\u7a0b\uff0cmake VERBOSE=1 # \u6e05\u7406\u5de5\u7a0b:make clean \u6784\u5efa\u6574\u4e2a\u5de5\u7a0b\u7528\u6cd5 -src | -CMakeLists.txt | -main.cpp -build | -\u8981\u6267\u884ccmake ..\u7684\u7f16\u8bd1\u6587\u4ef6 -doc # \u7528\u4e8e\u9632\u6b62\u672c\u5de5\u7a0b\u7684\u6587\u6863 | -hello.txt # \u5199\u4e00\u4e9b\u63cf\u8ff0\u6027\u5185\u5bb9 -runhello.sh # \u8c03\u7528\u7ed3\u679c\u4e8c\u8fdb\u5236\uff0c\u672c\u6b21\u5185\u5bb9\u4e3ahello -COPYRIGHT # \u6dfb\u52a0\u6587\u672c\u6587\u4ef6 -README # \u6dfb\u52a0\u6587\u672c\u6587\u4ef6 -CMakeLists.txt # \u6700\u7ec8\u5b89\u88c5\u8fd9\u4e9b\u6587\u4ef6\uff1a\u5c06 hello \u4e8c\u8fdb\u5236\u4e0e runhello.sh \u5b89\u88c5\u81f3/usr/bin\uff0c\u5c06 doc \u76ee\u5f55 \u7684\u5185\u5bb9\u4ee5\u53ca COPYRIGHT/README \u5b89\u88c5\u5230/usr/share/doc/cmake/t2 # \u6ce8\u610f\uff0c\u9700\u8981\u4e3a\u4efb\u4f55\u5b50\u76ee\u5f55\u5efa\u7acb\u4e00\u4e2aCMakeLists.txt\u6587\u4ef6 # src/CMakeLists.txt\u7684\u7f16\u5199 ADD_EXECUTABLE ( hello main.c ) # \u5de5\u7a0b\u4e0bCMakeLists.txt\u7684\u7f16\u5199 PROJECT ( HELLO ) # ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) # \u7528\u4e8e\u5411\u5f53\u524d\u5de5\u7a0b\u6dfb\u52a0\u5b58\u653e\u6e90\u6587\u4ef6\u7684\u5b50\u76ee\u5f55,\u5e76\u53ef\u4ee5\u6307\u5b9a\u4e2d\u95f4\u4e8c\u8fdb\u5236\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u5b58 \u653e\u7684\u4f4d\u7f6e\u3002 ADD_SUBDIRECTORY ( src bin ) # \u6307\u5b9a\u7f16\u8bd1\u8f93\u51fa(\u5305\u542b\u7f16\u8bd1\u4e2d\u95f4\u7ed3\u679c)\u8def\u5f84\u4e3a bin \u76ee\u5f55,\u5982\u679c\u4e0d\u6307\u5b9a\u90a3\u4e48\u7f16\u8bd1\u7ed3\u679c(\u5305\u62ec\u4e2d\u95f4\u7ed3\u679c)\u90fd\u5c06\u5b58\u653e\u5728 build/src \u76ee\u5f55(\u8fd9\u4e2a\u76ee\u5f55\u8ddf\u539f\u6709\u7684 src \u76ee\u5f55\u5bf9\u5e94)\uff0c\u6307\u5b9a bin \u76ee\u5f55\u540e\uff0c\u76f8\u5f53\u4e8e\u5728\u7f16\u8bd1\u65f6 \u5c06 src \u91cd\u547d\u540d\u4e3a bin\uff0c\u6240\u6709\u7684\u4e2d\u95f4\u7ed3\u679c\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u90fd\u5c06\u5b58\u653e\u5728 bin \u76ee\u5f55\u3002 #\u7136\u540e\u5efa\u7acb build \u76ee\u5f55\uff0c\u8fdb\u5165 build \u76ee\u5f55\u8fdb\u884c\u5916\u90e8\u7f16\u8bd1\u3002 #cmake .. #make #\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6 hello \u4f4d\u4e8e build/bin \u76ee\u5f55\u4e2d\u3002 # \u5f53\u7136\uff0c\u5982\u679c\u4e0d\u60f3\u7f16\u8bd1\u8f93\u51fa\u76f4\u63a5\u653e\u5728build/bin\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7set\u6307\u4ee4\u91cd\u65b0\u5b9a\u4e49EXECUTABLE_OUTPUT_PATH \u548c LIBRARY_OUTPUT_PATH \u53d8\u91cf \u6765\u6307\u5b9a\u6700\u7ec8\u7684\u76ee\u6807\u4e8c\u8fdb\u5236\u7684\u4f4d\u7f6e(\u6307\u6700\u7ec8\u751f\u6210\u7684 hello \u6216\u8005\u6700\u7ec8\u7684\u5171\u4eab\u5e93\uff0c\u4e0d\u5305\u542b\u7f16\u8bd1\u751f\u6210 \u7684\u4e2d\u95f4\u6587\u4ef6),\u4f46\u662f\u4e24\u884c\u653e\u5728\u54ea\u5462\uff1f\u628a\u63e1\u4e00\u4e2a\u7b80\u5355\u7684\u539f\u5219\uff0c\u5728\u54ea\u91cc ADD_EXECUTABLE \u6216 ADD_LIBRARY\uff0c \u5982\u679c\u9700\u8981\u6539\u53d8\u76ee\u6807\u5b58\u653e\u8def\u5f84\uff0c\u5c31\u5728\u54ea\u91cc\u52a0\u5165\u4e0a\u8ff0\u7684\u5b9a\u4e49\u3002\u8fd9\u91cc\u653e\u5728src/CMakeLists.txt\u91cc\u9762 SET ( EXECUTABLE_OUTPUT_PATH ${ PROJECT_BINARY_DIR } /bin ) # \u4e8c\u8fdb\u5236\u7684\u8f93\u51fa\u8def\u5f84 SET ( LIBRARY_OUTPUT_PATH ${ PROJECT_BINARY_DIR } /lib ) # \u5e93\u7684\u8f93\u51fa\u8def\u5f84\uff0c\u5e38\u7528\u4e8e\u5171\u4eab\u5e93\u548c\u9759\u6001\u5e93 # \u5b89\u88c5\u9879\u76ee:\u4e00\u4e2a\u9879\u76eeclone\u4e0b\u6765\u540e\u662f\u9700\u8981\u5b89\u88c5\u7684\uff0c\u4f8b\u5982opencv\uff0c\u5b89\u88c5\u5230\u672c\u5730\u540e\u4f7f\u7528\u975e\u5e38\u65b9\u4fbf\uff0c\u4e0b\u9762\u4ecb\u7ecdhello\u9879\u76ee\u7684\u5b89\u88c5 make install # \u76f4\u63a5\u5b89\u88c5\uff0c\u9ed8\u8ba4\u5b89\u88c5\u8def\u5f84:/usr/bin\u76ee\u5f55 make install DESTDIR = /tmp/test # \u6307\u5b9a\u76ee\u5f55\u5b89\u88c5:\u5b89\u88c5\u5230/tmp/test/usr/bin\u76ee\u5f55\uff08\u6253\u5305\u65f6\u5e38\u7528\uff09 # INSTALL\u547d\u4ee4:\u7528\u4e8e\u5b9a\u4e49\u5b89\u88c5\u89c4\u5219\uff0c\u5b89\u88c5\u7684\u5185\u5bb9\u53ef\u4ee5\u5305\u62ec\u76ee\u6807\u4e8c\u8fdb\u5236\u3001\u52a8\u6001\u5e93\u3001\u9759\u6001\u5e93\u4ee5\u53ca \u6587\u4ef6\u3001\u76ee\u5f55\u3001\u811a\u672c\u7b49 # 1.\u76ee\u6807\u6587\u4ef6\u5b89\u88c5 INSTALL ( TARGETS targets...# \u540e\u9762\u8ddf\u7684\u5c31\u662f\u6211\u4eec\u901a\u8fc7 ADD_EXECUTABLE \u6216\u8005 ADD_LIBRARY \u5b9a\u4e49\u7684 \u76ee\u6807\u6587\u4ef6\uff0c\u53ef\u80fd\u662f\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u3001\u52a8\u6001\u5e93\u3001\u9759\u6001\u5e93 [[ ARCHIVE | LIBRARY | RUNTIME ] # \u76ee\u6807\u7c7b\u578b\u4e5f\u5c31\u76f8\u5bf9\u5e94\u7684\u6709\u4e09\u79cd\uff0cARCHIVE \u7279\u6307\u9759\u6001\u5e93\uff0cLIBRARY \u7279\u6307\u52a8\u6001\u5e93\uff0cRUNTIME \u7279\u6307\u53ef\u6267\u884c\u76ee\u6807\u4e8c\u8fdb\u5236\u3002 [ DESTINATION <dir> ] # \u5b9a\u4e49\u4e86\u5b89\u88c5\u7684\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4ee5/\u5f00\u5934\uff0c\u90a3\u4e48\u6307\u7684\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd9\u65f6\u5019 CMAKE_INSTALL_PREFIX \u5176\u5b9e\u5c31\u65e0\u6548\u4e86\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528 CMAKE_INSTALL_PREFIX \u6765 \u5b9a\u4e49\u5b89\u88c5\u8def\u5f84\uff0c\u5c31\u8981\u5199\u6210\u76f8\u5bf9\u8def\u5f84\uff0c\u5373\u4e0d\u8981\u4ee5/\u5f00\u5934\uff0c\u90a3\u4e48\u5b89\u88c5\u540e\u7684\u8def\u5f84\u5c31\u662f ${CMAKE_INSTALL_PREFIX}/<DESTINATION \u5b9a\u4e49\u7684\u8def\u5f84>,\u6ce8\u610f\u76f8\u5bf9\u8def\u5f84\u8981\u4e0d\u8981\u4ee5/\u7ed3\u5c3e(abc,abc/)\uff0c\u5982\u679c\u76ee\u5f55\u540d\u4e0d\u4ee5/\u7ed3\u5c3e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u76ee\u5f55\u5c06\u88ab\u5b89\u88c5\u4e3a\u76ee\u6807\u8def\u5f84\u4e0b\u7684 abc\uff0c\u5982\u679c\u76ee\u5f55\u540d\u4ee5/\u7ed3\u5c3e\uff0c \u4ee3\u8868\u5c06\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9\u5b89\u88c5\u5230\u76ee\u6807\u8def\u5f84\uff0c\u4f46\u4e0d\u5305\u62ec\u8fd9\u4e2a\u76ee\u5f55\u672c\u8eab\u3002 [ PERMISSIONS permissions... ] [ CONFIGURATIONS [ Debug | Release | ... ]] [ COMPONENT <component> ] [ OPTIONAL ] ] [ ... ]) # \u4e3e\u4f8b\u5b50 INSTALL ( TARGETS myrun mylib mystaticlib # DESTINATION\u63cf\u8ff0\u7684\u662f\u5b89\u88c5\u8def\u5f84 RUNTIME DESTINATION bin # \u53ef\u6267\u884c\u4e8c\u8fdb\u5236myrun\u5b89\u88c5\u5230${CMAKE_INSTALL_PREFIX}/bin\u76ee\u5f55 LIBRARY DESTINATION lib# \u52a8\u6001\u5e93lib mylib \u5b89\u88c5\u5230 ${ CMAKE_INSTALL_PREFIX } /lib \u76ee\u5f55 ARCHIVE DESTINATION libstatic ) # \u9759\u6001\u5e93lib mystaticlib \u5b89\u88c5\u5230${CMAKE_INSTALL_PREFIX}/libstatic \u76ee\u5f55 # 2.\u666e\u901a\u6587\u4ef6\u5b89\u88c5\uff0c\u53ef\u7528\u4e8e\u5b89\u88c5\u4e00\u822c\u6587\u4ef6\uff0c\u5e76\u53ef\u4ee5\u6307\u5b9a\u8bbf\u95ee\u6743\u9650\uff0c\u6587\u4ef6\u540d\u662f\u6b64\u6307\u4ee4\u6240\u5728\u8def\u5f84\u4e0b\u7684\u76f8\u5bf9\u8def\u5f84 INSTALL ( FILES files... DESTINATION <dir> # dir\u5199\u76f8\u5bf9\u8def\u5f84\u4e3a\u597d [ PERMISSIONS permissions... ] # \u540e\u9762\u7684\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u6743\u9650:\u9ed8\u8ba4644\u6743\u9650 [ CONFIGURATIONS [ Debug | Release | ... ]] [ COMPONENT <component> ] [ OPTIONAL ] ] [ ... ]) # 3.\u975e\u76ee\u6807\u6587\u4ef6\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u5b89\u88c5(\u6bd4\u5982\u811a\u672c\u7b49) INSTALL ( PROGRAMS files... DESTINATION <dir> # dir\u5199\u76f8\u5bf9\u8def\u5f84\u4e3a\u597d [ PERMISSIONS permissions... ] # \u540e\u9762\u7684\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u6743\u9650:\u9ed8\u8ba4755\u6743\u9650 [ CONFIGURATIONS [ Debug | Release | ... ]] [ COMPONENT <component> ] [ OPTIONAL ] ] [ ... ]) # \u4ecb\u7ecd\u5b89\u88c5\u6b65\u9aa4 # 1\uff0c\u5b89\u88c5 COPYRIGHT|README\uff0c\u76f4\u63a5\u4fee\u6539\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakelists.txt\uff0c\u52a0\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a INSTALL ( FILES COPYRIGHT README DESTINATION share/doc/cmake/t2 ) # 2\uff0c\u5b89\u88c5 runhello.sh\uff0c\u76f4\u63a5\u4fee\u6539\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakeLists.txt\uff0c\u52a0\u5165\u5982\u4e0b\u6307\u4ee4\uff1a INSTALL ( PROGRAMS runhello.sh DESTINATION bin ) # 3\uff0c\u5b89\u88c5 doc \u4e2d\u7684 hello.txt\uff0c\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a # * \u4e00\u662f\u901a\u8fc7\u5728 doc \u76ee\u5f55\u5efa\u7acb CMakeLists.txt \u5e76\u5c06 doc \u76ee\u5f55\u901a\u8fc7 ADD_SUBDIRECTORY \u52a0\u5165\u5de5\u7a0b\u6765\u5b8c\u6210\u3002 # * \u53e6\u4e00\u79cd\u65b9\u6cd5 \u662f\u76f4\u63a5\u5728\u5de5\u7a0b\u76ee\u5f55\u901a\u8fc7 INSTALL(DIRECTORY \u6765\u5b8c\u6210)\uff0c\u524d\u8005\u6bd4\u8f83\u7b80\u5355\uff0c\u5404\u4f4d\u53ef\u4ee5\u6839\u636e\u5174\u8da3\u81ea\u5df1\u5b8c\u6210\uff0c\u6211\u4eec\u6765\u5c1d\u8bd5 \u540e\u8005\uff0c\u987a\u4fbf\u6f14\u793a\u4ee5\u4e0b DIRECTORY \u7684\u5b89\u88c5\u3002\u56e0\u4e3a hello.txt \u8981\u5b89\u88c5\u5230/<prefix>/share/doc/cmake/t2\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5b89\u88c5 \u6574\u4e2a doc \u76ee\u5f55\uff0c\u8fd9\u91cc\u91c7\u7528\u7684\u65b9\u5f0f\u662f\u5b89\u88c5 doc \u76ee\u5f55\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u201ddoc/\u201d\uff0c\u5728\u5de5\u7a0b\u6587\u4ef6\u4e2d\u6dfb\u52a0 INSTALL ( DIRECTORY doc/ DESTINATION share/doc/cmake/t2 ) # \u7f16\u8bd1\u548c\u5b89\u88c5\uff0c\u73b0\u5728\u8fdb\u5165 build \u76ee\u5f55\u8fdb\u884c\u5916\u90e8\u7f16\u8bd1\uff0c\u6ce8\u610f\u4f7f\u7528 CMAKE_INSTALL_PREFIX \u53c2\u6570\uff0c\u8fd9\u91cc\u6211\u4eec \u5c06\u5b83\u5b89\u88c5\u5230\u4e86/tmp/t2 \u76ee\u5f55 cmake -DCMAKE_INSTALL_PREFIX = /tmp/t2/usr .. # \u5982\u679c\u4f60\u60f3\u76f4\u63a5\u5b89\u88c5\u5230\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528 cmake -DCMAKE_INSTALL_PREFIX=/usr .. # \u5982\u679c\u6ca1\u6709\u5b9a\u4e49 CMAKE_INSTALL_PREFIX\uff0c\u9ed8\u8ba4\u4f1a\u5b89\u88c5\u5230:/usr/local make make install # \u8ba9\u6211\u4eec\u8fdb\u5165/tmp/t2 \u76ee\u5f55\u770b\u4e00\u4e0b\u5b89\u88c5\u7ed3\u679c\uff1a ./usr ./usr/share ./usr/share/doc ./usr/share/doc/cmake ./usr/share/doc/cmake/t2 ./usr/share/doc/cmake/t2/hello.txt ./usr/share/doc/cmake/t2/README ./usr/share/doc/cmake/t2/COPYRIGHT ./usr/bin ./usr/bin/hello ./usr/bin/runhello.sh \u9759\u6001\u5e93\u4e0e\u52a8\u6001\u5e93\u6784\u5efa # \u76ee\u5f55\u7ed3\u6784 -lib | -hello.c | -hello.h | -CMakeLists.txt -CMakeLists.txt # \u5de5\u7a0b\u76ee\u5f55\u4e0b CMakeLists.txt PROJECT ( HELLOLIB ) ADD_SUBDIRECTORY ( lib <\u76ee\u5f55> ) # \u5176\u5b9e\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u6307\u5b9a.so\u6587\u4ef6\u7684\u8f93\u51fa\u4f4d\u7f6e # lib/CMakeLists.txt SET ( LIBHELLO_SRC hello.cpp ) SET ( LIBRARY_OUTPUT_PATH ${ PROJECT_BINARY_DIR } /aa ) # \u6307\u5b9a.so\u6587\u4ef6\u7684\u8f93\u51fa\u4f4d\u7f6e # \u89e3\u91ca\u9644\u5f551 ADD_LIBRARY ( hello SHARED ${ LIBHELLO_SRC } ) # \u6dfb\u52a0\u52a8\u6001\u5e93 xxx.so # \u6216\u8005,\u5982\u679c\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u7684libname\u540d\u79f0\u76f8\u540c\uff0c\u90a3\u4e48\u540e\u8005\u6784\u5efa\u6307\u4ee4\u5931\u6548,\u65b9\u6848\u4e00:\u91c7\u7528\u4e0d\u540c\u540d\u65b9\u6848 ADD_LIBRARY ( hello_static STATIC ${ LIBHELLO_SRC } ) # \u6dfb\u52a0\u9759\u6001\u5e93 xxx.a # \u65b9\u6848\u4e8c:\u5982\u679c\u60f3\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u540c\u540d\u4e14\u540c\u65f6\u5b58\u5728\uff0c\u9700\u8981\u5728lib/CMakeLists.txt\u4e2d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4\uff0c\u8be6\u89e3\u89c1\u9644\u5f552 SET_TARGET_PROPERTIES ( hello_static PROPERTIES OUTPUT_NAME \"hello\" ) # \u6307\u5b9a\u52a8\u6001\u5e93\u7248\u672c\uff0c\u4e00\u822c\u800c\u8a00\u52a8\u6001\u5e93\u662f\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u7248\u672c\u53f7\u7684\uff0c\u4f8b\u5982:libhello.so.1.2 # VERSION \u6307\u4ee3\u52a8\u6001\u5e93\u7248\u672c\uff0cSOVERSION \u6307\u4ee3 API \u7248\u672c\u3002 SET_TARGET_PROPERTIES ( hello PROPERTIES VERSION 1 .2 SOVERSION 1 ) # \u8fd9\u6837\u6784\u5efa\u540e\u4f1a\u751f\u6210\u4e09\u4e2a\u6587\u4ef6 libhello.so.1.2 libhello.so.1->libhello.so.1.2 libhello.so ->libhello.so.1 # \u9644\u5f551.\u6307\u4ee4 ADD_LIBRARY\u8be6\u89e3 ADD_LIBRARY ( libname # \u4e0d\u9700\u8981\u5b8c\u5168\u586b\u5199libhello.so\uff0c\u53ea\u9700\u8981\u586b\u5199hello\uff0ccmake\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210.x\u6587\u4ef6 [ SHARED | STATIC | MODULE ] # \u52a8\u6001\u5e93|\u9759\u6001\u5e93|\u7c7b\u4f3c\u52a8\u6001\u5e93\uff0cdyld \u7684\u7cfb\u7edf\u6709\u6548 [ EXCLUDE_FROM_ALL ] # \u8fd9\u4e2a\u5e93\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u6784\u5efa source1 source2 ... sourceN ) # \u9644\u5f552:SET_TARGET_PROPERTIES,\u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u8f93\u51fa\u7684\u540d\u79f0\uff0c\u5bf9\u4e8e\u52a8\u6001\u5e93\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u52a8\u6001\u5e93\u7248\u672c\u548c API \u7248\u672c SET_TARGET_PROPERTIES ( target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ... ) #\u7f16\u8bd1 mkdir build && cd build cmake .. make # \u53ef\u4ee5\u5728build/aa\u76ee\u5f55\u4e0b\u5f97\u5230\u4e00\u4e2alibhello.so # \u5b89\u88c5\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5c06 libhello.a, libhello.so.x \u4ee5\u53ca hello.h \u5b89\u88c5\u5230\u7cfb\u7edf\u76ee \u5f55\uff0c\u624d\u80fd\u771f\u6b63\u8ba9\u5176\u4ed6\u4eba\u5f00\u53d1\u4f7f\u7528 # \u9700\u8981\u5728lib/CMakeLists.txt\u4e2d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4 INSTALL ( TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib ) # \u6ce8\u610f\uff0c\u9759\u6001\u5e93\u8981\u4f7f\u7528 ARCHIVE \u5173\u952e\u5b57 INSTALL ( FILES hello.h DESTINATION include/hello ) # \u901a\u8fc7: cmake -DCMAKE_INSTALL_PREFIX = /usr .. make make install # \u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5934\u6587\u4ef6\u548c\u5171\u4eab\u5e93\u5b89\u88c5\u5230\u7cfb\u7edf\u76ee\u5f55/usr/lib \u548c/usr/include/hello \u4e2d\u4e86\u3002 \u4f7f\u7528\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6 // 1.\u5efa\u7acb src \u76ee\u5f55\uff0c\u7f16\u5199\u6e90\u6587\u4ef6 main.c #include <hello.h> int main () { HelloFunc (); // \u8fd9\u4e2a\u51fd\u6570\u662f\u5199\u5728\u539f\u6765\u7684hell.cpp\u4e2d\u7684\uff0c\u58f0\u660e\u5728hello.h\u4e2d\u7684 return 0 ; } // \u7f16\u5199\u5de5\u7a0b\u4e3b\u6587\u4ef6 CMakeLists.txt PROJECT ( NEWHELLO ) ADD_SUBDIRECTORY ( src ) // \u7f16\u5199 src/CMakeLists.txt ADD_EXECUTABLE ( main main . c ) // \u5f00\u59cb\u6784\u5efa\uff0cbuild ...,\u51fa\u9519\u4e86\uff0c\u770b\u770b\u4e3a\u5565\u51fa\u9519\uff0c\u7528make VERBOSE=1\u6765\u8be6\u7ec6\u6784\u5efa\u6253\u5370\u6784\u5efa\u8fc7\u7a0b\uff0c\u6ca1\u6709<hello.h>\u6587\u4ef6\uff0chello.h \u4f4d\u4e8e/usr/include/hello \u76ee\u5f55\u4e2d\uff0c\u5e76\u6ca1\u6709\u4f4d\u4e8e\u7cfb\u7edf\u6807\u51c6\u7684\u5934\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528 #include <hello/hello.h>\uff0c\u90a3\u8fd9\u4e00\u8282\u4e5f\u6ca1\u5565\u53ef\u8bb2\u7684\u5566 // 2.\u5f15\u5165\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u5de5\u7a0b\u80fd\u591f\u627e\u5230 hello.h \u5934\u6587\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4 //\u5728src/CMakeLists.txt \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 INCLUDE_DIRECTORIES ( / usr / include / hello ) // \u6307\u4ee4\u8be6\u89e3 INCLUDE_DIRECTORIES ([ AFTER | BEFORE ] [ SYSTEM ] dir1 dir2 ...) // \u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u8def\u5f84\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u5272\uff0c\u5982\u679c\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u7a7a\u683c\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7\u5c06\u5b83\u62ec\u8d77\u6765\uff0c\u9ed8\u8ba4\u7684\u884c\u4e3a\u662f\u8ffd\u52a0\u5230\u5f53\u524d\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\u7684\u540e\u9762\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u63a7\u5236\u641c\u7d22\u8def\u5f84\u6dfb\u52a0\u7684\u65b9\u5f0f\uff1a //\uff11\uff0cCMAKE_INCLUDE_DIRECTORIES_BEFORE\uff0c\u901a\u8fc7 SET \u8fd9\u4e2a cmake \u53d8\u91cf\u4e3a on\uff0c\u53ef\u4ee5 \u5c06\u6dfb\u52a0\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\u653e\u5728\u5df2\u6709\u8def\u5f84\u7684\u524d\u9762\u3002 //\uff12\uff0c\u901a\u8fc7 AFTER \u6216\u8005 BEFORE \u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u63a7\u5236\u662f\u8ffd\u52a0\u8fd8\u662f\u7f6e\u524d\u3002 // \u91cd\u65b0\u6784\u5efa\u4f1a\u51fa\u73b0HelloFunc\u627e\u4e0d\u5230\u7684\u9519\u8bef\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709 link \u5230\u5171\u4eab\u5e93 libhello \u4e0a\uff0c\u53ea\u5305\u542b\u5934\u6587\u4ef6\u5f53\u7136\u4e0d\u80fd\u4f7f\u7528\u4e86 // 3.\u4e3atarget\u6dfb\u52a0\u5171\u4eab\u5e93,\u5728src/CMakeLists.txt \u4e2d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4 TARGET_LINK_LIBRARIES ( main hello ) // hello\u4e5f\u53ef\u4ee5\u5199\u6210libhello.so,\u6784\u5efa\u6210\u529f\u540e\u6094\u5f97\u5230main\u7684\u53ef\u6267\u884c\u6587\u4ef6 // \u6307\u4ee4\u8be6\u89e3 // \u8fd9\u91cc\u9700\u8981\u5f15\u5165\u4e24\u4e2a\u65b0\u7684\u6307\u4ee4:LINK_DIRECTORIES \u548c TARGET_LINK_LIBRARIES LINK_DIRECTORIES ( directory1 directory2 ...) // \u6dfb\u52a0\u975e\u6807\u51c6\u7684\u5171\u4eab\u5e93\u641c\u7d22\u8def\u5f84,\u6bd4\u5982\uff0c\u5728\u5de5\u7a0b\u5185\u90e8\u540c\u65f6\u5b58\u5728\u5171\u4eab\u5e93\u548c\u53ef \u6267\u884c\u4e8c\u8fdb\u5236\uff0c\u5728\u7f16\u8bd1\u65f6\u5c31\u9700\u8981\u6307\u5b9a\u4e00\u4e0b\u8fd9\u4e9b\u5171\u4eab\u5e93\u7684\u8def\u5f84\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u6ca1\u6709\u7528\u5230\u8fd9\u4e2a\u6307\u4ee4\u3002 TARGET_LINK_LIBRARIES ( target library1 // \u8fd9\u4e2a\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u4e3a target \u6dfb\u52a0\u9700\u8981\u94fe\u63a5\u7684\u5171\u4eab\u5e93 < debug | optimized > library2 ...) // 4.\u5982\u4f55\u94fe\u63a5\u5230\u9759\u6001\u5e93\u5462,\u5f88\u7b80\u5355 TARGET_LINK_LIBRARIES ( main libhello . a ) \u4e24\u4e2a\u7279\u6b8a\u7684\u73af\u5883\u53d8\u91cf(\u4e0d\u662fcmake\u53d8\u91cf) CMAKE_INCLUDE_PATH \u548c CMAKE_LIBRARY_PATH # \u7528\u6cd5:\u5728 bash \u4e2d\u7528 export \u6216\u8005\u5728 csh \u4e2d\u4f7f\u7528 set \u547d\u4ee4\u8bbe\u7f6e # \u6216\u8005: CMAKE_INCLUDE_PATH = /home/include cmake .. # \u7b49\u65b9\u5f0f\u3002 # \u4e3b\u8981\u662f\u89e3\u51b3:\u5934\u6587\u4ef6\u6ca1\u6709\u5b58\u653e\u5728\u5e38\u89c4\u8def\u5f84(/usr/include,/usr/local/include \u7b49),\u5219\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u53d8\u91cf\u5c31\u884c\u5f25\u8865\u3002 # \u6211\u4eec\u4ee5\u672c\u4f8b\u4e2d\u7684 hello.h \u4e3a\u4f8b\uff0c\u5b83\u5b58\u653e\u5728/usr/include/hello \u76ee\u5f55\uff0c\u6240\u4ee5\u76f4\u63a5\u67e5\u627e\u80af\u5b9a\u662f\u627e\u4e0d\u5230\u7684\u3002\u524d\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u4e86\u7edd\u5bf9\u8def\u5f84 INCLUDE_DIRECTORIES(/usr/include/hello)\u544a\u8bc9\u5de5\u7a0b\u8fd9\u4e2a\u5934\u6587\u4ef6\u76ee\u5f55\u3002\u4e3a\u4e86\u5c06\u7a0b\u5e8f\u66f4\u667a\u80fd\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 CMAKE_INCLUDE_PATH \u6765\u8fdb\u884c\uff0c\u4f7f\u7528 bash \u7684\u65b9\u6cd5 \u5982\u4e0b\uff1a export CMAKE_INCLUDE_PATH = /usr/include/hello # \u7136\u540e\u5728\u5934\u6587\u4ef6\u4e2d\u5c06 INCLUDE_DIRECTORIES(/usr/include/hello)\u66ff\u6362\u4e3a\uff1a FIND_PATH ( myHeader hello.h ) # FIND_PATH \u7528\u6765\u5728\u6307\u5b9a\u8def\u5f84\u4e2d\u641c\u7d22\u6587\u4ef6\u540d,\u8fd9\u91cc\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u8def\u5f84\uff0c\u4f46\u662f\uff0ccmake \u4ecd\u7136\u53ef\u4ee5\u5e2e\u6211\u4eec\u627e\u5230 hello.h \u5b58\u653e\u7684\u8def\u5f84\uff0c\u5c31\u662f\u56e0 \u4e3a\u6211\u4eec\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf CMAKE_INCLUDE_PATH\u3002 IF ( myHeader ) INCLUDE_DIRECTORIES ( ${ myHeader } ) ENDIF ( myHeader ) # \u4ee5\u6b64\u4e3a\u4f8b\uff0cCMAKE_LIBRARY_PATH \u53ef\u4ee5\u7528\u5728 FIND_LIBRARY \u4e2d\u3002 Cmake\u5e38\u7528\u53d8\u91cf\u548c\u5e38\u7528\u73af\u5883\u53d8\u91cf # 1.cmake\u53d8\u91cf${},IF\u8bed\u53e5\u4e2d\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d # 2.cmake\u53d8\u91cf\u7684\u9690\u5f0f\u5b9a\u4e49(\u4e49<projectname>_BINARY_DIR \u548c<projectname>_SOURCE_DIR)\u548c\u663e\u793a\u5b9a\u4e49(SET(HELLO_SRC main.c)) # 3.cmake\u5e38\u7528\u53d8\u91cf CMAKE_BINARY_DIR == PROJECT_BINARY_DIR == <projectname>_BINARY_DIR # \u6307\u7684\u662f\u5de5\u7a0b\u7f16\u8bd1\u53d1\u751f\u7684\u76ee\u5f55 CMAKE_SOURCE_DIR == PROJECT_SOURCE_DIR == <projectname>_SOURCE_DIR # \u6307\u7684\u662f\u5de5\u7a0b\u9876\u5c42\u76ee\u5f55 CMAKE_CURRRENT_BINARY_DIR # \u6307\u7684\u662f target \u7f16\u8bd1\u76ee\u5f55\uff0c\u4f7f\u7528\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684 ADD_SUBDIRECTORY(src bin)\u53ef\u4ee5\u66f4\u6539\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u3002\u4f7f\u7528 SET(EXECUTABLE_OUTPUT_PATH <\u65b0\u8def\u5f84>)\u5e76\u4e0d\u4f1a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u9020\u6210\u5f71\u54cd\uff0c\u5b83\u4ec5\u4ec5 \u4fee\u6539\u4e86\u6700\u7ec8\u76ee\u6807\u6587\u4ef6\u5b58\u653e\u7684\u8def\u5f84\u3002 CMAKE_CURRENT_LIST_FILE # \u8f93\u51fa\u8c03\u7528\u8fd9\u4e2a\u53d8\u91cf\u7684 CMakeLists.txt \u7684\u5b8c\u6574\u8def\u5f84 CMAKE_CURRENT_LIST_LINE # \u8f93\u51fa\u8fd9\u4e2a\u53d8\u91cf\u6240\u5728\u7684\u884c CMAKE_MODULE_PATH # \u8fd9\u4e2a\u53d8\u91cf\u7528\u6765\u5b9a\u4e49\u81ea\u5df1\u7684 cmake \u6a21\u5757\u6240\u5728\u7684\u8def\u5f84\u3002\u5982\u679c\u4f60\u7684\u5de5\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u6709\u53ef\u80fd\u4f1a\u81ea\u5df1 \u7f16\u5199\u4e00\u4e9b cmake \u6a21\u5757\uff0c\u8fd9\u4e9b cmake \u6a21\u5757\u662f\u968f\u4f60\u7684\u5de5\u7a0b\u53d1\u5e03\u7684\uff0c\u4e3a\u4e86\u8ba9 cmake \u5728\u5904\u7406 CMakeLists.txt \u65f6\u627e\u5230\u8fd9\u4e9b\u6a21\u5757\uff0c\u4f60\u9700\u8981\u901a\u8fc7 SET \u6307\u4ee4\uff0c\u5c06\u81ea\u5df1\u7684 cmake \u6a21\u5757\u8def\u5f84\u8bbe \u7f6e\u4e00\u4e0b\u3002\u6bd4\u5982 SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake) \u8fd9\u65f6\u5019\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 INCLUDE \u6307\u4ee4\u6765\u8c03\u7528\u81ea\u5df1\u7684\u6a21\u5757\u4e86\u3002 EXECUTABLE_OUTPUT_PATH \u548c LIBRARY_OUTPUT_PATH # \u5206\u522b\u7528\u6765\u91cd\u65b0\u5b9a\u4e49\u6700\u7ec8\u7ed3\u679c\u7684\u5b58\u653e\u76ee\u5f55 PROJECT_NAME # \u8fd4\u56de\u901a\u8fc7 PROJECT \u6307\u4ee4\u5b9a\u4e49\u7684\u9879\u76ee\u540d\u79f0 # 4.cmake \u8c03\u7528\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f MESSAGE ( STATUS \"HOME dir: $ENV {HOME}\" ) # \u4f7f\u7528$ENV{NAME}\u6307\u4ee4\u5c31\u53ef\u4ee5\u8c03\u7528\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u4e86\u3002 SET ( ENV { \u53d8\u91cf\u540d } \u503c ) # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f # 1.CMAKE_INCLUDE_CURRENT_DIR:\u81ea\u52a8\u6dfb\u52a0 CMAKE_CURRENT_BINARY_DIR \u548c CMAKE_CURRENT_SOURCE_DIR \u5230\u5f53\u524d\u5904\u7406 \u7684 CMakeLists.txt\u3002\u76f8\u5f53\u4e8e\u5728\u6bcf\u4e2a CMakeLists.txt \u52a0\u5165\uff1a INCLUDE_DIRECTORIES ( ${ CMAKE_CURRENT_BINARY_DIR } ${ CMAKE_CURRENT_SOURCE_DIR } ) # 2.CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE:\u5c06\u5de5\u7a0b\u63d0\u4f9b\u7684\u5934\u6587\u4ef6\u76ee\u5f55\u59cb\u7ec8\u81f3\u4e8e\u7cfb\u7edf\u5934\u6587\u4ef6\u76ee\u5f55\u7684\u524d\u9762\uff0c\u5f53\u4f60\u5b9a\u4e49\u7684\u5934\u6587\u4ef6\u786e\u5b9e\u8ddf\u7cfb\u7edf\u53d1\u751f\u51b2\u7a81\u65f6\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002 # 3.CMAKE_INCLUDE_PATH \u548c CMAKE_LIBRARY_PATH \u6211\u4eec\u5728\u4e0a\u4e00\u8282\u5df2\u7ecf\u63d0\u53ca\u3002 # 5.\u7cfb\u7edf\u4fe1\u606f 1 ,CMAKE_MAJOR_VERSION\uff0cCMAKE \u4e3b\u7248\u672c\u53f7\uff0c\u6bd4\u5982 2 .4.6 \u4e2d\u7684 2 2 ,CMAKE_MINOR_VERSION\uff0cCMAKE \u6b21\u7248\u672c\u53f7\uff0c\u6bd4\u5982 2 .4.6 \u4e2d\u7684 4 3 ,CMAKE_PATCH_VERSION\uff0cCMAKE \u8865\u4e01\u7b49\u7ea7\uff0c\u6bd4\u5982 2 .4.6 \u4e2d\u7684 6 4 ,CMAKE_SYSTEM\uff0c\u7cfb\u7edf\u540d\u79f0\uff0c\u6bd4\u5982 Linux-2.6.22 5 ,CMAKE_SYSTEM_NAME\uff0c\u4e0d\u5305\u542b\u7248\u672c\u7684\u7cfb\u7edf\u540d\uff0c\u6bd4\u5982 Linux 6 ,CMAKE_SYSTEM_VERSION\uff0c\u7cfb\u7edf\u7248\u672c\uff0c\u6bd4\u5982 2 .6.22 7 ,CMAKE_SYSTEM_PROCESSOR\uff0c\u5904\u7406\u5668\u540d\u79f0\uff0c\u6bd4\u5982 i686. 8 ,UNIX\uff0c\u5728\u6240\u6709\u7684\u7c7b UNIX \u5e73\u53f0\u4e3a TRUE\uff0c\u5305\u62ec OS X \u548c cygwin 9 ,WIN32\uff0c\u5728\u6240\u6709\u7684 win32 \u5e73\u53f0\u4e3a TRUE\uff0c\u5305\u62ec cygwin # 6:\u4e3b\u8981\u7684\u5f00\u5173\u9009\u9879 # 1\uff0cCMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS\uff0c\u7528\u6765\u63a7\u5236 IF ELSE \u8bed\u53e5\u7684\u4e66\u5199\u65b9\u5f0f # 2\uff0cBUILD_SHARED_LIBS,\u8fd9\u4e2a\u5f00\u5173\u7528\u6765\u63a7\u5236\u9ed8\u8ba4\u7684\u5e93\u7f16\u8bd1\u65b9\u5f0f\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f7f\u7528 ADD_LIBRARY \u5e76\u6ca1\u6709\u6307\u5b9a\u5e93 \u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u7f16\u8bd1\u751f\u6210\u7684\u5e93\u90fd\u662f\u9759\u6001\u5e93\u3002 \u5982\u679c SET(BUILD_SHARED_LIBS ON)\u540e\uff0c\u9ed8\u8ba4\u751f\u6210\u7684\u4e3a\u52a8\u6001\u5e93\u3002 # \uff13\uff0cCMAKE_C_FLAGS \u8bbe\u7f6e C \u7f16\u8bd1\u9009\u9879\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4 ADD_DEFINITIONS()\u6dfb\u52a0\u3002 # 4\uff0cCMAKE_CXX_FLAGS \u8bbe\u7f6e C++\u7f16\u8bd1\u9009\u9879\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4 ADD_DEFINITIONS()\u6dfb\u52a0\u3002 CMake\u57fa\u672c\u6307\u4ee4 # 1\uff0cADD_DEFINITIONS\uff0c\u5411 C/C++\u7f16\u8bd1\u5668\u6dfb\u52a0-D \u5b9a\u4e49\uff0c\u6bd4\u5982: ADD_DEFINITIONS ( -DENABLE_DEBUG -DABC ) # \u53c2\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u5272\u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e86#ifdef ENABLE_DEBUG #endif\uff0c\u8fd9\u4e2a\u4ee3\u7801\u5757\u5c31\u4f1a\u751f\u6548\u3002\u5982\u679c\u8981\u6dfb\u52a0\u5176\u4ed6\u7684\u7f16\u8bd1\u5668\u5f00\u5173\uff0c\u53ef\u4ee5\u901a\u8fc7 CMAKE_C_FLAGS \u53d8\u91cf\u548c CMAKE_CXX_FLAGS \u53d8 \u91cf\u8bbe\u7f6e\u3002 # \uff12\uff0cADD_DEPENDENCIES\u5b9a\u4e49 target \u4f9d\u8d56\u7684\u5176\u4ed6target\uff0c\u786e\u4fdd\u5728\u7f16\u8bd1\u672ctarget\u4e4b\u524d\uff0c\u5176\u4ed6\u7684target\u5df2\u7ecf\u88ab\u6784\u5efa\u3002 ADD_DEPENDENCIES ( target-name depend-target1 depend-target2 ... ) # \uff13\uff0cADD_EXECUTABLE\u3001ADD_LIBRARY\u3001ADD_SUBDIRECTORY \u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u7f57\u5506\u3002 # \uff14\uff0cADD_TEST \u4e0e ENABLE_TESTING \u6307\u4ee4\u3002 ENABLE_TESTING \u6307\u4ee4\u7528\u6765\u63a7\u5236 Makefile \u662f\u5426\u6784\u5efa test \u76ee\u6807\uff0c\u6d89\u53ca\u5de5\u7a0b\u6240\u6709\u76ee\u5f55\u3002\u8bed \u6cd5\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0cENABLE_TESTING()\uff0c\u4e00\u822c\u60c5\u51b5\u8fd9\u4e2a\u6307\u4ee4\u653e\u5728\u5de5\u7a0b\u7684\u4e3b CMakeLists.txt \u4e2d.ADD_TEST \u6307\u4ee4\u7684\u8bed\u6cd5\u662f: ADD_TEST ( testname # testname \u662f\u81ea\u5b9a\u4e49\u7684 test \u540d\u79f0 Exename arg1 arg2 ... ) # Exename \u53ef\u4ee5\u662f\u6784\u5efa\u7684\u76ee\u6807\u6587\u4ef6\u4e5f\u53ef\u4ee5\u662f\u5916\u90e8\u811a\u672c\u7b49 \u7b49\u3002\u540e\u9762\u8fde\u63a5\u4f20\u9012\u7ed9\u53ef\u6267\u884c\u6587\u4ef6\u7684\u53c2\u6570 # \u5982\u679c\u6ca1\u6709\u5728\u540c\u4e00\u4e2a CMakeLists.txt \u4e2d\u6253\u5f00 ENABLE_TESTING()\u6307\u4ee4\uff0c\u4efb\u4f55 ADD_TEST \u90fd\u662f\u65e0\u6548\u7684\u3002\u6bd4\u5982\u6211\u4eec\u524d\u9762\u7684 Helloworld \u4f8b\u5b50\uff0c\u53ef\u4ee5\u5728\u5de5\u7a0b\u4e3b CMakeLists.txt \u4e2d\u6dfb\u52a0 ADD_TEST ( mytest ${ PROJECT_BINARY_DIR } /bin/main ) ENABLE_TESTING () # \u751f\u6210 Makefile \u540e\uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c make test \u6765\u6267\u884c\u6d4b\u8bd5\u4e86\u3002 # \uff15\uff0cAUX_SOURCE_DIRECTORY \u57fa\u672c\u8bed\u6cd5\u662f\uff1a AUX_SOURCE_DIRECTORY ( dir VARIABLE ) # \u4f5c\u7528\u662f\u53d1\u73b0\u4e00\u4e2a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u5e76\u5c06\u5217\u8868\u5b58\u50a8\u5728\u4e00\u4e2a\u53d8\u91cf\u4e2d\uff0c\u8fd9\u4e2a\u6307\u4ee4\u4e34\u65f6\u88ab\u7528\u6765 \u81ea\u52a8\u6784\u5efa\u6e90\u6587\u4ef6\u5217\u8868\u3002\u56e0\u4e3a\u76ee\u524d cmake \u8fd8\u4e0d\u80fd\u81ea\u52a8\u53d1\u73b0\u65b0\u6dfb\u52a0\u7684\u6e90\u6587\u4ef6\u3002 \u6bd4\u5982 AUX_SOURCE_DIRECTORY ( . SRC_LIST ) ADD_EXECUTABLE ( main ${ SRC_LIST } ) # \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u540e\u9762\u63d0\u5230\u7684 FOREACH \u6307\u4ee4\u6765\u5904\u7406\u8fd9\u4e2a LIST # 6\uff0cCMAKE_MINIMUM_REQUIRED \u5176\u8bed\u6cd5\u4e3a CMAKE_MINIMUM_REQUIRED ( VERSION versionNumber [ FATAL_ERROR ]) # \u6bd4\u5982 CMAKE_MINIMUM_REQUIRED ( VERSION 2 .5 FATAL_ERROR ) # \u5982\u679c cmake \u7248\u672c\u5c0f\u4e0e 2.5\uff0c\u5219\u51fa\u73b0\u4e25\u91cd\u9519\u8bef\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6b62\u3002 # 7\uff0cEXEC_PROGRAM \u5728 CMakeLists.txt \u5904\u7406\u8fc7\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\uff0c\u5e76\u4e0d\u4f1a\u5728\u751f\u6210\u7684 Makefile \u4e2d\u6267\u884c\u3002\u5177\u4f53\u8bed\u6cd5 \u4e3a\uff1a EXEC_PROGRAM ( Executable [ directory in which to run ] [ ARGS <arguments to executable> ] [ OUTPUT_VARIABLE <var> ] [ RETURN_VALUE <var> ]) # \u7528\u4e8e\u5728\u6307\u5b9a\u7684\u76ee\u5f55\u8fd0\u884c\u67d0\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7 ARGS \u6dfb\u52a0\u53c2\u6570\uff0c\u5982\u679c\u8981\u83b7\u53d6\u8f93\u51fa\u548c\u8fd4\u56de\u503c\uff0c\u53ef\u901a\u8fc7 OUTPUT_VARIABLE \u548c RETURN_VALUE \u5206\u522b\u5b9a\u4e49\u4e24\u4e2a\u53d8\u91cf.\u8fd9\u4e2a\u6307\u4ee4\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5728 CMakeLists.txt \u5904\u7406\u8fc7\u7a0b\u4e2d\u652f\u6301\u4efb\u4f55\u547d\u4ee4\uff0c\u6bd4\u5982\u6839\u636e\u7cfb\u7edf\u60c5\u51b5\u53bb \u4fee\u6539\u4ee3\u7801\u6587\u4ef6\u7b49\u7b49\u3002 \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u8981\u5728 src \u76ee\u5f55\u6267\u884c ls \u547d\u4ee4\uff0c\u5e76\u628a\u7ed3\u679c\u548c\u8fd4\u56de\u503c\u5b58\u4e0b\u6765\u3002\u53ef\u4ee5\u76f4\u63a5\u5728 src/CMakeLists.txt \u4e2d\u6dfb\u52a0\uff1a EXEC_PROGRAM ( ls ARGS \"*.c\" OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE ) IF ( not LS_RVALUE ) MESSAGE ( STATUS \"ls result: \" ${ LS_OUTPUT } ) ENDIF ( not LS_RVALUE ) # \u5728 cmake \u751f\u6210 Makefile \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u4f1a\u6267\u884c ls \u547d\u4ee4\uff0c\u5982\u679c\u8fd4\u56de 0\uff0c\u5219\u8bf4\u660e\u6210\u529f\u6267\u884c\uff0c \u90a3\u4e48\u5c31\u8f93\u51fa ls *.c \u7684\u7ed3\u679c\u3002\u5173\u4e8e IF \u8bed\u53e5\uff0c\u540e\u9762\u7684\u63a7\u5236\u6307\u4ee4\u4f1a\u63d0\u5230\u3002 # 8\uff0cFILE \u6307\u4ee4 \u6587\u4ef6\u64cd\u4f5c\u6307\u4ee4\uff0c\u57fa\u672c\u8bed\u6cd5\u4e3a: FILE ( WRITE filename \"message to write\" ... ) FILE ( APPEND filename \"message to write\" ... ) FILE ( READ filename variable ) FILE ( GLOB variable [ RELATIVE path ] [ globbing expressions ] ... ) FILE ( GLOB_RECURSE variable [ RELATIVE path ] [ globbing expressions ] ... ) FILE ( REMOVE [ directory ] ... ) FILE ( REMOVE_RECURSE [ directory ] ... ) FILE ( MAKE_DIRECTORY [ directory ] ... ) FILE ( RELATIVE_PATH variable directory file ) FILE ( TO_CMAKE_PATH path result ) FILE ( TO_NATIVE_PATH path result ) # 9\uff0cINCLUDE \u6307\u4ee4\uff0c\u7528\u6765\u8f7d\u5165 CMakeLists.txt \u6587\u4ef6\uff0c\u4e5f\u7528\u4e8e\u8f7d\u5165\u9884\u5b9a\u4e49\u7684 cmake \u6a21\u5757. INCLUDE ( file1 [ OPTIONAL ]) INCLUDE ( module [ OPTIONAL ]) # OPTIONAL\u53c2\u6570\u7684\u4f5c\u7528\u662f\u6587\u4ef6\u4e0d\u5b58\u5728\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u4f60\u53ef\u4ee5\u6307\u5b9a\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u90a3\u4e48\u5c06\u5728 CMAKE_MODULE_PATH \u4e2d\u641c \u7d22\u8fd9\u4e2a\u6a21\u5757\u5e76\u8f7d\u5165\u3002\u8f7d\u5165\u7684\u5185\u5bb9\u5c06\u5728\u5904\u7406\u5230 INCLUDE \u8bed\u53e5\u662f\u76f4\u63a5\u6267\u884c\u3002 FIND_\u6307\u4ee4 FIND_FILE ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u4ee3\u8868\u627e\u5230\u7684\u6587\u4ef6\u5168\u8def\u5f84\uff0c\u5305\u542b\u6587\u4ef6\u540d FIND_LIBRARY ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u8868\u793a\u627e\u5230\u7684\u5e93\u5168\u8def\u5f84\uff0c\u5305\u542b\u5e93\u6587\u4ef6\u540d FIND_PATH ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u4ee3\u8868\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\u7684\u8def\u5f84\u3002 FIND_PROGRAM ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u4ee3\u8868\u5305\u542b\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5168\u8def\u5f84\u3002 FIND_PACKAGE ( <name> [ major.minor ] [ QUIET ] [ NO_MODULE ] [[ REQUIRED | COMPONENTS ] [ componets... ]]) # \u7528\u6765\u8c03\u7528\u9884\u5b9a\u4e49\u5728 CMAKE_MODULE_PATH \u4e0b\u7684 Find<name>.cmake \u6a21\u5757\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1 \u5b9a\u4e49 Find<name>\u6a21\u5757\uff0c\u901a\u8fc7 SET(CMAKE_MODULE_PATH dir)\u5c06\u5176\u653e\u5165\u5de5\u7a0b\u7684\u67d0\u4e2a\u76ee\u5f55 \u4e2d\u4f9b\u5de5\u7a0b\u4f7f\u7528\uff0c\u6211\u4eec\u5728\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u8be6\u7ec6\u4ecb\u7ecd FIND_PACKAGE \u7684\u4f7f\u7528\u65b9\u6cd5\u548c Find \u6a21\u5757\u7684 \u7f16\u5199\u3002 FIND_LIBRARY \u793a\u4f8b\uff1a FIND_LIBRARY ( libX X11 /usr/lib ) IF ( NOT libX ) MESSAGE ( FATAL_ERROR \u201clibX not found\u201d ) ENDIF ( NOT libX ) \u63a7\u5236\u6307\u4ee4 # 1,IF \u6307\u4ee4,\u53e6\u5916\u4e00\u4e2a\u6307\u4ee4\u662f ELSEIF\uff0c\u603b\u4f53\u628a\u63e1\u4e00\u4e2a\u539f\u5219\uff0c\u51e1\u662f\u51fa\u73b0 IF \u7684\u5730\u65b9\u4e00\u5b9a\u8981\u6709\u5bf9\u5e94\u7684 ENDIF.\u51fa\u73b0 ELSEIF \u7684\u5730\u65b9\uff0cENDIF \u662f\u53ef\u9009\u7684\u3002\u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a IF ( expression ) # THEN section. COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ELSE ( expression ) # ELSE section. COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ENDIF ( expression ) # \u8868\u8fbe\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5 IF ( var ) # \u5982\u679c\u53d8\u91cf\u4e0d\u662f\uff1a\u7a7a\uff0c0\uff0cN, NO, OFF, FALSE, NOTFOUND \u6216 <var>_NOTFOUND \u65f6\uff0c\u8868\u8fbe\u5f0f\u4e3a\u771f\u3002 IF ( NOT var ) # \u4e0e\u4e0a\u8ff0\u6761\u4ef6\u76f8\u53cd\u3002 IF ( var1 AND var2 ) # \u5f53\u4e24\u4e2a\u53d8\u91cf\u90fd\u4e3a\u771f\u662f\u4e3a\u771f\u3002 IF ( var1 OR var2 ) # \u5f53\u4e24\u4e2a\u53d8\u91cf\u5176\u4e2d\u4e00\u4e2a\u4e3a\u771f\u65f6\u4e3a\u771f\u3002 IF ( COMMAND cmd ) # \u5f53\u7ed9\u5b9a\u7684 cmd \u786e\u5b9e\u662f\u547d\u4ee4\u5e76\u53ef\u4ee5\u8c03\u7528\u662f\u4e3a\u771f\u3002 IF ( EXISTS dir ) \u6216\u8005 IF ( EXISTS file ) # \u5f53\u76ee\u5f55\u540d\u6216\u8005\u6587\u4ef6\u540d\u5b58\u5728\u65f6\u4e3a\u771f\u3002 IF ( file1 IS_NEWER_THAN file2 ) # \u5f53 file1 \u6bd4 file2 \u65b0\uff0c\u6216\u8005 file1/file2 \u5176 \u4e2d\u6709\u4e00\u4e2a\u4e0d\u5b58\u5728\u65f6\u4e3a\u771f\uff0c\u6587\u4ef6\u540d\u8bf7\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u3002 IF ( IS_DIRECTORY dirname ) # \u5f53 dirname \u662f\u76ee\u5f55\u65f6\uff0c\u4e3a\u771f\u3002 IF ( variable MATCHES regex ) IF ( string MATCHES regex ) # \u5f53\u7ed9\u5b9a\u7684\u53d8\u91cf\u6216\u8005\u5b57\u7b26\u4e32\u80fd\u591f\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f regex \u65f6\u4e3a\u771f\u3002\u6bd4\u5982\uff1a IF ( \"hello\" MATCHES \"ell\" ) MESSAGE ( \"true\" ) ENDIF ( \"hello\" MATCHES \"ell\" ) # \u6570\u5b57\u6bd4\u8f83\u8868\u8fbe\u5f0f IF ( variable LESS number ) IF ( string LESS number ) IF ( variable GREATER number ) IF ( string GREATER number ) IF ( variable EQUAL number ) IF ( string EQUAL number ) # \u6309\u7167\u5b57\u6bcd\u5e8f\u7684\u6392\u5217\u8fdb\u884c\u6bd4\u8f83. IF ( variable STRLESS string ) IF ( string STRLESS string ) IF ( variable STRGREATER string ) IF ( string STRGREATER string ) IF ( variable STREQUAL string ) IF ( string STREQUAL string ) IF ( DEFINED variable ) # \u5982\u679c\u53d8\u91cf\u88ab\u5b9a\u4e49\uff0c\u4e3a\u771f\u3002 # \u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u7528\u6765\u5224\u65ad\u5e73\u53f0\u5dee\u5f02\uff1a I F ( WIN32 ) MESSAGE ( STATUS \u201cThis is windows.\u201d ) #\u4f5c\u4e00\u4e9b Windows \u76f8\u5173\u7684\u64cd\u4f5c ELSE ( WIN32 ) MESSAGE ( STATUS \u201cThis is not windows\u201d ) #\u4f5c\u4e00\u4e9b\u975e Windows \u76f8\u5173\u7684\u64cd\u4f5c ENDIF ( WIN32 ) #\u4e0a\u8ff0\u4ee3\u7801\u7528\u6765\u63a7\u5236\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u8fdb\u884c\u4e0d\u540c\u7684\u63a7\u5236\uff0c\u4f46\u662f\uff0c\u9605\u8bfb\u8d77\u6765\u5374\u5e76\u4e0d\u662f\u90a3\u4e48\u8212\u670d\uff0c ELSE(WIN32)\u4e4b\u7c7b\u7684\u8bed\u53e5\u5f88\u5bb9\u6613\u5f15\u8d77\u6b67\u4e49\u3002 # \u8fd9\u5c31\u7528\u5230\u4e86\u6211\u4eec\u5728\u201c\u5e38\u7528\u53d8\u91cf\u201d\u4e00\u8282\u63d0\u5230\u7684 CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS \u5f00\u5173\u3002 \u53ef\u4ee5 SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON) \u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u5199\u6210: IF ( WIN32 ) ELSE () ENDIF () # \u5982\u679c\u914d\u5408 ELSEIF \u4f7f\u7528\uff0c\u53ef\u80fd\u7684\u5199\u6cd5\u662f\u8fd9\u6837: IF ( WIN32 ) #do something related to WIN32 ELSEIF ( UNIX ) #do something related to UNIX ELSEIF ( APPLE ) #do something related to APPLE ENDIF(WIN32) # 2.WHELE\u6307\u4ee4\uff0c\u5176\u771f\u5047\u5224\u65ad\u6761\u4ef6\u53ef\u4ee5\u53c2\u8003 IF \u6307\u4ee4\u3002 WHILE ( condition ) COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ENDWHILE ( condition ) # 3.FOREACH\u6307\u4ee4\uff0c\u4e09\u79cd\u5f62\u5f0f # 1.\u5217\u8868 FOREACH ( loop_var arg1 arg2 ... ) COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ENDFOREACH ( loop_var ) # \u50cf\u6211\u4eec\u524d\u9762\u4f7f\u7528\u7684 AUX_SOURCE_DIRECTORY \u7684\u4f8b\u5b50 AUX_SOURCE_DIRECTORY ( . SRC_LIST ) FOREACH ( F ${ SRC_LIST } ) MESSAGE ( ${ F } ) ENDFOREACH ( F ) # 2.\u8303\u56f4 FOREACH ( loop_var RANGE total ) ENDFOREACH ( loop_var ) # \u4e3e\u4f8b\u5b50:\u4ece 0 \u5230 total \u4ee5\uff11\u4e3a\u6b65\u8fdb FOREACH ( VAR RANGE 10 ) MESSAGE ( ${ VAR } ) ENDFOREACH ( VAR ) # 3.\u8303\u56f4\u548c\u6b65\u8fdb FOREACH ( loop_var RANGE start stop [ step ]) ENDFOREACH ( loop_var ) # \u4ece start \u5f00\u59cb\u5230 stop \u7ed3\u675f\uff0c\u4ee5 step \u4e3a\u6b65\u8fdb\uff0c \u4e3e\u4f8b\u5982\u4e0b FOREACH ( A RANGE 5 15 3 ) MESSAGE ( ${ A } ) ENDFOREACH ( A ) # 5 8 11 14 # \u8fd9\u4e2a\u6307\u4ee4\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u76f4\u5230\u9047\u5230 ENDFOREACH \u6307\u4ee4\uff0c\u6574\u4e2a\u8bed\u53e5\u5757\u624d\u4f1a\u5f97\u5230\u771f\u6b63\u7684\u6267\u884c\u3002 Find_PACKAGE FIND_PACKAGE ( <name> [ major.minor ] [ QUIET ] # QUIET \u53c2\u6570\uff0c\u5bf9\u5e94\u4e0e\u6211\u4eec\u7f16\u5199\u7684 FindHELLO \u4e2d\u7684 HELLO_FIND_QUIETLY\uff0c\u5982\u679c\u4e0d\u6307\u5b9a \u8fd9\u4e2a\u53c2\u6570\uff0c\u5c31\u4f1a\u6267\u884c\uff1a MESSAGE(STATUS \"Found Hello: ${HELLO_LIBRARY}\") [ NO_MODULE ] [[ REQUIRED | COMPONENTS ] [ componets... ]]) # REQUIRED \u53c2\u6570\uff0c\u5176\u542b\u4e49\u662f\u6307\u8fd9\u4e2a\u5171\u4eab\u5e93\u662f\u5426\u662f\u5de5\u7a0b\u5fc5\u987b\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf4\u660e\u8fd9 \u4e2a\u94fe\u63a5\u5e93\u662f\u5fc5\u5907\u5e93\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u4e2a\u94fe\u63a5\u5e93\uff0c\u5219\u5de5\u7a0b\u4e0d\u80fd\u7f16\u8bd1\u3002 -src | -main.c # \u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2ainclude <curl/curl.h> | -CMakeLists.txt -CMakeLists.txt # \u5efa\u7acb\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakeLists.txt PROJECT ( CURLTEST ) ADD_SUBDIRECTORY ( src ) # \u5efa\u7acb src/CMakeLists.txt ADD_EXECUTABLE ( curltest main.c ) # \u73b0\u5728\u81ea\u7136\u662f\u6ca1\u529e\u6cd5\u7f16\u8bd1\u7684\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0 curl \u7684\u5934\u6587\u4ef6\u8def\u5f84\u548c\u5e93\u6587\u4ef6\u3002 # \u65b9\u6cd51\uff1a\u76f4\u63a5\u901a\u8fc7 INCLUDE_DIRECTORIES \u548c TARGET_LINK_LIBRARIES \u6307\u4ee4\u6dfb\u52a0\uff1a \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 src/CMakeLists.txt \u4e2d\u6dfb\u52a0\uff1a INCLUDE_DIRECTORIES ( /usr/include ) TARGET_LINK_LIBRARIES ( curltest curl ) # \u7136\u540e\u5efa\u7acb build \u76ee\u5f55\u8fdb\u884c\u5916\u90e8\u6784\u5efa\u5373\u53ef\u3002 # \u65b9\u6cd52:\u4f7f\u7528 FindCURL \u6a21\u5757\u3002\u5411 src/CMakeLists.txt \u4e2d\u6dfb\u52a0\uff1a FIND_PACKAGE ( CURL ) IF ( CURL_FOUND ) INCLUDE_DIRECTORIES ( ${ CURL_INCLUDE_DIR } ) TARGET_LINK_LIBRARIES ( curltest ${ CURL_LIBRARY } ) # \u5728\u4f7f\u7528opencv\u65f6\uff0c\u7528${OpenCV_LIBRARIES}\u901a\u8fc7\u4e86 ELSE ( CURL_FOUND ) MESSAGE ( FATAL_ERROR \u201dCURL library not found\u201d ) ENDIF ( CURL_FOUND ) # \u5bf9\u4e8e\u7cfb\u7edf\u9884\u5b9a\u4e49\u7684 Find<name>.cmake \u6a21\u5757\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e00\u822c\u5982\u4e0a\u4f8b\u6240\u793a\uff1a \u6bcf\u4e00\u4e2a\u6a21\u5757\u90fd\u4f1a\u5b9a\u4e49\u4ee5\u4e0b\u51e0\u4e2a\u53d8\u91cf <name>_FOUND # \u5224\u65ad\u6a21\u5757\u662f\u5426\u88ab\u627e\u5230\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u6309\u7167\u5de5\u7a0b\u7684\u9700\u8981\u5173\u95ed \u67d0\u4e9b\u7279\u6027\u3001\u7ed9\u51fa\u63d0\u9192\u6216\u8005\u4e2d\u6b62\u7f16\u8bd1\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u62a5\u51fa\u81f4\u547d\u9519\u8bef\u5e76\u7ec8\u6b62\u6784\u5efa\u3002 <name>_INCLUDE_DIR or <name>_INCLUDES <name>_LIBRARY or <name>_LIBRARIES # \u5982\u679c<name>_FOUND \u4e3a\u771f\uff0c\u5219\u5c06<name>_INCLUDE_DIR \u52a0\u5165 INCLUDE_DIRECTORIES\uff0c \u5c06<name>_LIBRARY \u52a0\u5165 TARGET_LINK_LIBRARIES \u4e2d\u3002 # \u4e3e\u4f8b\u5b50\uff0c\u901a\u8fc7<name>_FOUND \u6765\u63a7\u5236\u5de5\u7a0b\u7279\u6027\uff1a SET ( mySources viewer.c ) SET ( optionalSources ) SET ( optionalLibs ) FIND_PACKAGE ( JPEG ) IF ( JPEG_FOUND ) SET ( optionalSources ${ optionalSources } jpegview.c ) INCLUDE_DIRECTORIES ( ${ JPEG_INCLUDE_DIR } ) SET ( optionalLibs ${ optionalLibs } ${ JPEG_LIBRARIES } ) ADD_DEFINITIONS ( -DENABLE_JPEG_SUPPORT ) ENDIF ( JPEG_FOUND ) IF ( PNG_FOUND ) SET ( optionalSources ${ optionalSources } pngview.c ) INCLUDE_DIRECTORIES ( ${ PNG_INCLUDE_DIR } ) SET ( optionalLibs ${ optionalLibs } ${ PNG_LIBRARIES } ) ADD_DEFINITIONS ( -DENABLE_PNG_SUPPORT ) ENDIF ( PNG_FOUND ) ADD_EXECUTABLE ( viewer ${ mySources } ${ optionalSources } ) TARGET_LINK_LIBRARIES ( viewer ${ optionalLibs } # \u901a\u8fc7\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u63d0\u4f9b\u4e86 JPEG \u5e93\u6765\u51b3\u5b9a\u7a0b\u5e8f\u662f\u5426\u652f\u6301 JPEG \u529f\u80fd\u3002 \u81ea\u5b9a\u4e49 FindHELLO \u6a21\u5757\u5e76\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5757\u6784\u5efa\u5de5\u7a0b -cmake # \u5efa\u7acb cmake \u76ee\u5f55\u7528\u4e8e\u5b58\u653e\u6211\u4eec\u81ea\u5df1 \u5b9a\u4e49\u7684 FindHELLO.cmake \u6a21\u5757 | -FindHELLO.cmake -src# \u7528\u4e8e\u5efa\u7acbsrc\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u6211\u4eec\u7684\u6e90\u6587\u4ef6 | -main.c | -CMakeLists.txt -CMakeLists.txt # \u5b9a\u4e49 cmake/FindHELLO.cmake \u6a21\u5757 FIND_PATH ( HELLO_INCLUDE_DIR hello.h /usr/include/hello /usr/local/include/hello ) FIND_LIBRARY ( HELLO_LIBRARY NAMES hello PATH /usr/lib /usr/local/lib ) IF ( HELLO_INCLUDE_DIR AND HELLO_LIBRARY ) SET ( HELLO_FOUND TRUE ) ENDIF ( HELLO_INCLUDE_DIR AND HELLO_LIBRARY ) IF ( HELLO_FOUND ) IF ( NOT HELLO_FIND_QUIETLY ) MESSAGE ( STATUS \"Found Hello: ${ HELLO_LIBRARY } \" ) ENDIF ( NOT HELLO_FIND_QUIETLY ) ELSE ( HELLO_FOUND ) IF ( HELLO_FIND_REQUIRED ) # HELLO_FIND_REQUIRED\u5bf9\u5e94\u4e8eFIND_PACKAGE\u7684REQUIRED\u53c2\u6570 MESSAGE ( FATAL_ERROR \"Could not find hello library\" ) ENDIF ( HELLO_FIND_REQUIRED ) ENDIF ( HELLO_FOUND ) # HELLO_FOUND, HELLO_INCLUDE_DIR,HELLO_LIBRARY \u53d8\u91cf\u4f9b\u5f00\u53d1\u8005\u5728 FIND_PACKAGE \u6307\u4ee4\u4e2d\u4f7f\u7528 # src/man.c #include <hello.h> int main () { HelloFunc () ; return 0 ; } # \u5efa\u7acb src/CMakeLists.txt \u6587\u4ef6 FIND_PACKAGE ( HELLO ) IF ( HELLO_FOUND ) ADD_EXECUTABLE ( hello main.c ) INCLUDE_DIRECTORIES ( ${ HELLO_INCLUDE_DIR } ) TARGET_LINK_LIBRARIES ( hello ${ HELLO_LIBRARY } ) ENDIF ( HELLO_FOUND ) # \u4e3a\u4e86\u80fd\u591f\u8ba9\u5de5\u7a0b\u627e\u5230 FindHELLO.cmake \u6a21\u5757(\u5b58\u653e\u5728\u5de5\u7a0b\u4e2d\u7684 cmake \u76ee\u5f55) \u6211\u4eec\u5728\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakeLists.txt \u4e2d\u52a0\u5165\uff1a SET ( CMAKE_MODULE_PATH ${ PROJECT_SOURCE_DIR } /cmake ) # \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 FindHELLO \u6a21\u5757\u6784\u5efa\u5de5\u7a0b mkdir build && cd build cmake .. # \u8f93\u51fa:Found Hello: /usr/lib/libhello.so # \u5982\u679c\u6211\u4eec\u628a\u4e0a\u9762\u7684 FIND_PACKAGE(HELLO)\u4fee\u6539\u4e3a FIND_PACKAGE(HELLO QUIET),\u5219 \u4e0d\u4f1a\u770b\u5230\u4e0a\u9762\u7684\u8f93\u51fa\u3002 make ./src/hello # \u8f93\u51faHello World # \u5982\u679c\u6ca1\u6709\u627e\u5230 hello library \u5462 # \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5c06/usr/lib/libhello.x \u79fb\u52a8\u5230/tmp \u76ee\u5f55\uff0c\u8fd9\u6837\uff0c\u6309\u7167 FindHELLO \u6a21\u5757 \u7684\u5b9a\u4e49\uff0c\u5c31\u627e\u4e0d\u5230 hello library \u4e86\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b\u6784\u5efa\u7ed3\u679c\uff1a cmake ..# \u4ecd\u7136\u53ef\u4ee5\u6210\u529f\u8fdb\u884c\u6784\u5efa\uff0c\u4f46\u662f\u8fd9\u65f6\u5019\u662f\u6ca1\u6709\u529e\u6cd5\u7f16\u8bd1\u7684\u3002 # \u4fee\u6539 FIND_PACKAGE(HELLO)\u4e3a FIND_PACKAGE(HELLO REQUIRED)\uff0c\u5c06 hello library \u5b9a\u4e49\u4e3a\u5de5\u7a0b\u5fc5\u987b\u7684\u5171\u4eab\u5e93\u3002 \u8fd9\u65f6\u5019\u518d\u6b21\u8fd0\u884c cmake .. # \u6211\u4eec\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1a CMake Error: Could not find hello library.\u56e0\u4e3a\u627e\u4e0d\u5230 libhello.x\uff0c\u6240\u4ee5\uff0c\u6574\u4e2a Makefile \u751f\u6210\u8fc7\u7a0b\u88ab\u51fa\u9519\u4e2d\u6b62\u3002 \u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u7684\u533a\u522b \u5e93\u662f\u5199\u597d\u7684\u73b0\u6709\u7684\uff0c\u6210\u719f\u7684\uff0c\u53ef\u4ee5\u590d\u7528\u7684\u4ee3\u7801\u3002 \u73b0\u5b9e\u4e2d\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8981\u4f9d\u8d56\u5f88\u591a\u57fa\u7840\u7684\u5e95\u5c42\u5e93\uff0c\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u4eba\u7684\u4ee3\u7801\u90fd\u4ece\u96f6\u5f00\u59cb\uff0c\u56e0\u6b64\u5e93\u7684\u5b58\u5728\u610f\u4e49\u975e\u540c\u5bfb\u5e38 \u3002\u672c\u8d28\u4e0a\u6765\u8bf4\u5e93\u662f\u4e00\u79cd\u53ef\u6267\u884c\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u53ef\u4ee5\u88ab\u64cd\u4f5c\u7cfb\u7edf\u8f7d\u5165\u5185\u5b58\u6267\u884c\u3002\u5e93\u6709\u4e24\u79cd\uff1a\u9759\u6001\u5e93\uff08.a\u3001.lib\uff09\u548c\u52a8\u6001\u5e93\uff08.so\u3001.dll\uff09\u3002 \u9759\u6001\u5e93 \uff1a\u5728\u94fe\u63a5\u9636\u6bb5\uff0c\u4f1a\u5c06\u6c47\u7f16\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6.o\u4e0e\u5f15\u7528\u5230\u7684\u5e93\u4e00\u8d77\u94fe\u63a5\u6253\u5305\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u56e0\u6b64\u5bf9\u5e94\u7684\u94fe\u63a5\u65b9\u5f0f\u79f0\u4e3a\u9759\u6001\u94fe\u63a5\u3002\u5176\u5b9e\u4e00\u4e2a\u9759\u6001\u5e93\u53ef\u4ee5\u7b80\u5355\u770b\u6210\u662f**\u4e00\u7ec4\u76ee\u6807\u6587\u4ef6\uff08.o/.obj\u6587\u4ef6\uff09\u7684\u96c6\u5408**\uff0c\u5373\u5f88\u591a\u76ee\u6807\u6587\u4ef6\u7ecf\u8fc7\u538b\u7f29\u6253\u5305\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u6587\u4ef6\u3002\u9759\u6001\u5e93\u7279\u70b9\u603b\u7ed3\uff1a \u9759\u6001\u5e93\u5bf9\u51fd\u6570\u5e93\u7684\u94fe\u63a5\u662f\u653e\u5728**\u7f16\u8bd1\u65f6\u671f**\u5b8c\u6210\u7684\u3002 \u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4e0e\u51fd\u6570\u5e93\u518d\u65e0\u74dc\u845b\uff0c\u79fb\u690d\u65b9\u4fbf\u3002 \u6d6a\u8d39\u7a7a\u95f4\u548c\u8d44\u6e90\uff0c\u56e0\u4e3a\u6240\u6709\u76f8\u5173\u7684\u76ee\u6807\u6587\u4ef6\u4e0e\u7275\u6d89\u5230\u7684\u51fd\u6570\u5e93\u88ab\u94fe\u63a5\u5408\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u9759\u6001\u5e93\u7f3a\u70b9\uff1a \u7a7a\u95f4\u6d6a\u8d39\u662f\u9759\u6001\u5e93\u7684\u4e00\u4e2a\u95ee\u9898 \u53e6\u4e00\u4e2a\u95ee\u9898\u662f\u9759\u6001\u5e93\u5bf9\u7a0b\u5e8f\u7684\u66f4\u65b0\u3001\u90e8\u7f72\u548c\u53d1\u5e03\u9875\u4f1a\u5e26\u6765\u9ebb\u70e6\u3002\u5982\u679c\u9759\u6001\u5e93liba.lib\u66f4\u65b0\u4e86\uff0c\u6240\u4ee5\u4f7f\u7528\u5b83\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3001\u53d1\u5e03\u7ed9\u7528\u6237\uff08\u5bf9\u4e8e\u73a9\u5bb6\u6765\u8bf4\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u6539\u52a8\uff0c\u5374\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f\u91cd\u65b0\u4e0b\u8f7d\uff0c \u5168\u91cf\u66f4\u65b0 \uff09 \u52a8\u6001\u5e93 \uff1a\u52a8\u6001\u5e93\u5728\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u5e76\u4e0d\u4f1a\u88ab\u8fde\u63a5\u5230\u76ee\u6807\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u88ab\u8f7d\u5165\u3002 \u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u5982\u679c\u8c03\u7528\u76f8\u540c\u7684\u5e93\uff0c\u90a3\u4e48\u5728\u5185\u5b58\u91cc\u53ea\u9700\u8981\u6709\u4e00\u4efd\u8be5\u5171\u4eab\u5e93\u7684\u5b9e\u4f8b \uff0c\u89c4\u907f\u4e86\u7a7a\u95f4\u6d6a\u8d39\u95ee\u9898\u3002\u52a8\u6001\u5e93\u5728\u7a0b\u5e8f\u8fd0\u884c\u662f\u624d\u88ab\u8f7d\u5165\uff0c\u4e5f\u89e3\u51b3\u4e86\u9759\u6001\u5e93\u5bf9\u7a0b\u5e8f\u7684\u66f4\u65b0\u3001\u90e8\u7f72\u548c\u53d1\u5e03\u9875\u4f1a\u5e26\u6765\u9ebb\u70e6\u3002\u7528\u6237\u53ea\u9700\u8981\u66f4\u65b0\u52a8\u6001\u5e93\u5373\u53ef\uff0c \u589e\u91cf\u66f4\u65b0 \u3002 \u52a8\u6001\u5e93\u628a\u5bf9\u4e00\u4e9b\u5e93\u51fd\u6570\u7684\u94fe\u63a5\u8f7d\u5165\u63a8\u8fdf\u5230\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u671f\u3002 \u53ef\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u4e4b\u95f4\u7684\u8d44\u6e90\u5171\u4eab\u3002\uff08\u56e0\u6b64\u52a8\u6001\u5e93\u4e5f\u79f0\u4e3a\u5171\u4eab\u5e93\uff09 \u5c06\u4e00\u4e9b\u7a0b\u5e8f\u5347\u7ea7\u53d8\u5f97\u7b80\u5355\u3002\u751a\u81f3\u53ef\u4ee5\u771f\u6b63\u505a\u5230\u94fe\u63a5\u8f7d\u5165\u5b8c\u5168\u7531\u7a0b\u5e8f\u5458\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u63a7\u5236\uff08 \u663e\u793a\u8c03\u7528 \uff09\u3002 # \u5982\u679c\u60f3\u67e5\u770b\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5171\u4eab\u5e93\uff0c\u4f7f\u7528ldd\u547d\u4ee4 ldd libhello.so docker \u00b6 \u955c\u50cf\uff0c\u5bb9\u5668\uff0c\u4ed3\u5e93 Docker\u955c\u50cf(\u53ea\u8bfb) :\u5bf9\u4e8e Linux \u800c\u8a00\uff0c\u5185\u6838\u542f\u52a8\u540e\uff0c\u4f1a\u6302\u8f7d root \u6587\u4ef6\u7cfb\u7edf\u4e3a\u5176\u63d0\u4f9b\u7528\u6237\u7a7a\u95f4\u652f\u6301\u3002\u800c Docker \u955c\u50cf\uff08Image\uff09\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a root \u6587\u4ef6\u7cfb\u7edf\u3002 \u955c\u50cf\u662f\u5206\u5c42\uff08Layer\uff09\u7684\uff1a\u5373\u4e00\u4e2a\u955c\u50cf\u53ef\u4ee5\u591a\u4e2a\u4e2d\u95f4\u5c42\u7ec4\u6210\uff0c\u591a\u4e2a\u955c\u50cf\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u4e2d\u95f4\u5c42\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u955c\u50cf\u6dfb\u52a0\u591a\u4e00\u5c42\u6765\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u955c\u50cf\u3002 \u955c\u50cf\u662f\u53ea\u8bfb\u7684\uff08read-only\uff09\uff1a\u955c\u50cf\u5728\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u4fbf\u4e0d\u53ef\u4ee5\u518d\u4fee\u6539\uff0c\u800c\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u6dfb\u52a0\u4e00\u5c42\u6784\u5efa\u65b0\u7684\u955c\u50cf\uff0c\u8fd9\u4e2d\u95f4\u5b9e\u9645\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u4e0a\u589e\u52a0\u6216\u5220\u9664\u6587\u4ef6\uff0c\u4ece\u800c\u5f62\u6210\u65b0\u7684\u955c\u50cf\uff0c\u56e0\u4e3a\u5bb9\u5668\u662f\u53ef\u4ee5\u52a8\u6001\u6539\u53d8\u7684\u3002 \u5bb9\u5668(\u53ef\u8bfb\u53ef\u5199) :\u5bb9\u5668\u662f\u901a\u8fc7\u955c\u50cf\u6765\u521b\u5efa\u7684\uff0c\u5bb9\u5668\u662f\u5728\u955c\u50cf\u4e0a\u9762\u6dfb\u4e00\u5c42\u8bfb\u5199\u5c42( \u5bb9\u5668\u5b58\u50a8\u5c42 )\uff08writer/read layer\uff09\u6765\u5b9e\u73b0\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u6709\u955c\u50cf\u624d\u80fd\u521b\u5efa\u5bb9\u5668\uff0c\u800c\u751f\u6210\u7684\u5bb9\u5668\u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e\u5bbf\u4e3b\u673a\u7684\u9694\u79bb**\u8fdb\u7a0b**\uff0c\u5e76\u4e14\u6709\u5c5e\u4e8e\u5bb9\u5668\u81ea\u5df1\u7684\u7f51\u7edc\u548c\u547d\u540d\u7a7a\u95f4\u3002 \u5bb9\u5668\u5b58\u50a8\u5c42\u7684\u751f\u5b58\u5468\u671f\u548c\u5bb9\u5668\u4e00\u6837\uff0c\u5bb9\u5668\u6d88\u4ea1\u65f6\uff0c\u5bb9\u5668\u5b58\u50a8\u5c42\u4e5f\u968f\u4e4b\u6d88\u4ea1\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u4fdd\u5b58\u4e8e\u5bb9\u5668\u5b58\u50a8\u5c42\u7684\u4fe1\u606f\u90fd\u4f1a\u968f\u5bb9\u5668\u5220\u9664\u800c\u4e22\u5931\u3002 \u6309\u7167 Docker \u6700\u4f73\u5b9e\u8df5\u7684\u8981\u6c42\uff0c\u5bb9\u5668\u4e0d\u5e94\u8be5\u5411\u5176\u5b58\u50a8\u5c42\u5185\u5199\u5165\u4efb\u4f55\u6570\u636e\uff0c\u5bb9\u5668\u5b58\u50a8\u5c42\u8981\u4fdd\u6301\u65e0\u72b6\u6001\u5316\u3002\u6240\u6709\u7684\u6587\u4ef6\u5199\u5165\u64cd\u4f5c\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528**\u6570\u636e\u5377**\u3001\u6216\u8005\u7ed1\u5b9a\u5bbf\u4e3b\u76ee\u5f55\uff0c\u5728\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u8bfb\u5199\u4f1a\u8df3\u8fc7\u5bb9\u5668\u5b58\u50a8\u5c42\uff0c\u76f4\u63a5\u5bf9\u5bbf\u4e3b\uff08\u6216\u7f51\u7edc\u5b58\u50a8\uff09\u53d1\u751f\u8bfb\u5199\uff0c\u5176\u6027\u80fd\u548c\u7a33\u5b9a\u6027\u66f4\u9ad8\u3002 \u6570\u636e\u5377\u7684\u751f\u5b58\u5468\u671f\u72ec\u7acb\u4e8e\u5bb9\u5668\uff0c\u5bb9\u5668\u6d88\u4ea1\uff0c\u6570\u636e\u5377\u4e0d\u4f1a\u6d88\u4ea1 \u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u6570\u636e\u5377\u540e\uff0c\u5bb9\u5668\u5220\u9664\u6216\u8005\u91cd\u65b0\u8fd0\u884c\u4e4b\u540e\uff0c\u6570\u636e\u5374\u4e0d\u4f1a\u4e22\u5931\u3002 \u4ed3\u5e93 :\u6bcf\u4e2a\u4ed3\u5e93\u53ef\u4ee5\u5305\u542b\u591a\u4e2a \u6807\u7b7e \uff08 Tag \uff09\uff1b\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u4e00\u4e2a\u955c\u50cf\u3002\u901a\u5e38\uff0c\u4e00\u4e2a\u4ed3\u5e93\u4f1a\u5305\u542b\u540c\u4e00\u4e2a\u8f6f\u4ef6\u4e0d\u540c\u7248\u672c\u7684\u955c\u50cf\uff0c\u800c\u6807\u7b7e\u5c31\u5e38\u7528\u4e8e\u5bf9\u5e94\u8be5\u8f6f\u4ef6\u7684\u5404\u4e2a\u7248\u672c\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <\u4ed3\u5e93\u540d>:<\u6807\u7b7e> \u7684\u683c\u5f0f\u6765\u6307\u5b9a\u5177\u4f53\u662f\u8fd9\u4e2a\u8f6f\u4ef6\u54ea\u4e2a\u7248\u672c\u7684\u955c\u50cf\u3002\u5982\u679c\u4e0d\u7ed9\u51fa\u6807\u7b7e\uff0c\u5c06\u4ee5 latest \u4f5c\u4e3a\u9ed8\u8ba4\u6807\u7b7e\u3002","title":"vim_git_cmake"},{"location":"vim_cmake_git/#vim","text":"filetype plugin on \" \u6309 F5 \u6267\u884c\u5f53\u524d Python \u4ee3\u7801\" map <F5> :call PRUN () <CR> func! PRUN () exec \"w\" if & filetype == 'python' exec \"!python %\" endif endfunc \"\u66f4\u591a\u914d\u8272\u65b9\u6848:https://hub.fastgit.org/wklken/k-vim\" \"colorscheme desert \u8bbe\u5b9a\u914d\u8272\u65b9\u6848\" \"python \u81ea\u52a8\u7f29\u8fdb\" set filetype = python au BufNewFile,BufRead *.py,*.pyw setf python set helplang = cn \"\u4e2d\u6587\u5e2e\u52a9\u6587\u6863(\u524d\u63d0\u662f\u4e0b\u4e86\u4e2d\u6587\u5305) syntax enable syntax on \" \u81ea\u52a8\u8bed\u6cd5\u9ad8\u4eae set guifont = Consolas:h12:cANSI \"\u82f1\u6587\u5b57\u4f53 set guifontwide=SimSun-ExtB:h12:cGB2312 autocmd FileType python set tabstop=4 | set expandtab | set autoindent set autoread \" \u5f53\u6587\u4ef6\u5728\u5916\u90e8\u88ab\u4fee\u6539\u65f6\uff0c\u81ea\u52a8\u91cd\u65b0\u8bfb\u53d6 set history = 400 \"vim\u8bb0\u4f4f\u7684\u5386\u53f2\u64cd\u4f5c\u7684\u6570\u91cf\uff0c\u9ed8\u8ba4\u7684\u662f20 set nocompatible \" \u4f7f\u7528vim\u81ea\u5df1\u7684\u952e\u76d8\u6a21\u5f0f,\u800c\u4e0d\u662f\u517c\u5bb9vi\u7684\u6a21\u5f0f set confirm \"\u5904\u7406\u672a\u4fdd\u5b58\u6216\u8005\u53ea\u8bfb\u6587\u4ef6\u65f6,\u7ed9\u51fa\u63d0\u793a set smartindent \" \u667a\u80fd\u5bf9\u9f50 \" set shiftwidth=4 \" \u8bbe\u7f6e\u7f16\u7801,\u652f\u6301\u4e2d\u6587\u4e0d\u4e71\u7801 \" set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 set termencoding=utf-8 set encoding=utf-8 \" \u663e\u793a\u884c\u53f7 \" set nu set number \" \u7a81\u51fa\u663e\u793a\u5f53\u524d\u884c \" set cursorline set cul \" cursorline\u7684\u7f29\u5199\u5f62\u5f0f \" set autoindent \" \u7ee7\u627f\u524d\u4e00\u884c\u7684\u7f29\u8fdb\u65b9\u5f0f\uff0c\u9002\u7528\u4e8e\u591a\u884c\u6ce8\u91ca \" set laststatus=2 \" \u603b\u662f\u663e\u793a\u72b6\u6001\u680f \" set ruler \" \u663e\u793a\u5149\u6807\u5f53\u524d\u4f4d\u7f6e \" set ignorecase \" \u67e5\u627e\u65f6\u5ffd\u7565\u5927\u5c0f\u5199 \" set nohlsearch \" \u9ad8\u4eae\u663e\u793a\u67e5\u627e\u5185 \" \" \u8ba9vimrc\u914d\u7f6e\u53d8\u66f4\u7acb\u5373\u751f\u6548 \" autocmd BufWritePost $MYVIMRC source $MYVIMRC","title":"Vim\u7b80\u5355\u914d\u7f6e"},{"location":"vim_cmake_git/#git","text":"\u5e72\u8d27\u535a\u5ba2 # \u56e0\u4e3aGit\u662f\u5206\u5e03\u5f0f\u7248\u672c\u63a7\u5236\u7cfb\u7edf\uff0c\u6240\u4ee5\u9700\u8981\u586b\u5199\u7528\u6237\u540d\u548c\u90ae\u7bb1\u4f5c\u4e3a\u4e00\u4e2a\u6807\u8bc6 # git config --global \u53c2\u6570\uff0c\u6709\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8868\u793a\u4f60\u8fd9\u53f0\u673a\u5668\u4e0a\u6240\u6709\u7684Git\u4ed3\u5e93\u90fd\u4f1a\u4f7f\u7528\u8fd9\u4e2a\u914d\u7f6e\uff0c\u5f53\u7136\u4f60\u4e5f\u53ef\u4ee5\u5bf9\u67d0\u4e2a\u4ed3\u5e93\u6307\u5b9a\u7684\u4e0d\u540c\u7684\u7528\u6237\u540d\u548c\u90ae\u7bb1\u3002 git config --global user.name \"\u7528\u6237\u540d\" git config --global user.email \"\u90ae\u7bb1\" # \u63d0\u4ea4\u4ee3\u7801 mkdir MyProject && cd MyProject # \u521b\u5efa\u9879\u76ee\u540d git init # \u628a\u76ee\u5f55\u53d8\u6210git\u53ef\u4ee5\u7ba1\u7406\u7684\u4ed3\u5e93,\u9879\u76ee\u4e0b\u4f1a\u591a\u4e00\u4e2a.git\u6587\u4ef6 vi readme.txt # 111111 \u5728\u8be5\u9879\u76ee\u4e0b\u5199\u4ee3\u7801\u5373\u53ef\uff0c\u672c\u6b21\u4f7f\u7528readme.txt\u4f5c\u4e3a\u6f14\u793a git add readme.txt # \u628a\u5185\u5bb9\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u91cc git commit -m \"\u63d0\u4ea4\u6ce8\u91ca\" # \u628a\u6587\u4ef6\u63d0\u4ea4\u5230\u4ed3\u5e93 git status # \u67e5\u770b\u662f\u5426\u8fd8\u6709\u6587\u4ef6\u672a\u63d0\u4ea4 vi readme.txt # append 222222,\u4fee\u6539readme.txt git status # \u8fd9\u4e2a\u547d\u4ee4\u544a\u8bc9\u6211\u4eec readme.txt\u6587\u4ef6\u5df2\u88ab\u4fee\u6539\uff0c\u4f46\u662f\u672a\u88ab\u63d0\u4ea4\u7684\u4fee\u6539 git diff readme.txt # \u770b\u4e0breadme.txt\u6587\u4ef6\u5230\u5e95\u6539\u4e86\u4ec0\u4e48\u5185\u5bb9 git add readme.txt # \u628a\u5185\u5bb9\u6dfb\u52a0\u5230\u6682\u5b58\u533a\u91cc git status # \u63d0\u4ea4\u4e4b\u524d\u67e5\u770b\u72b6\u6001 git commit -m \"\u518d\u6b21\u6dfb\u52a0\u6ce8\u91ca\" # \u628a\u6587\u4ef6\u63d0\u4ea4\u5230\u4ed3\u5e93 # \u7248\u672c\u56de\u9000 vi readme.txt # append 333333,readme.txt\u6587\u4ef6\u603b\u5171\u8fdb\u884c\u4e86\u4e09\u6b21\u66f4\u6539 git log # \u67e5\u770b\u5386\u53f2\u8bb0\u5f55\uff0c\u663e\u793a\u4ece\u6700\u8fd1\u5230\u6700\u8fdc\u7684\u663e\u793a\u65e5\u5fd7\uff0c\u9ed8\u8ba4\u663e\u793a\u8be6\u7ec6\u4fe1\u606f git log --pretty = oneline # \u663e\u793a\u7b80\u6d01\u7684\u5386\u53f2\u4fe1\u606f\uff0c\u663e\u793a3\u6b21\u66f4\u6539 # \u5f00\u59cb\u7248\u672c\u56de\u9000 git reset --hard HEAD^ # \u56de\u9000\u5230\u4e0a\u4e2a\u7248\u672c git reset --hard HEAD^^ # \u56de\u9000\u5230\u4e0a\u4e0a\u4e2a\u7248\u672c,\u4f9d\u6b21\u7c7b\u63a8\uff0c\u5982\u679c\u60f3\u56de\u9000\u5230\u524d100\u4e2a\u7248\u672c\u5462\uff1f git reset --hard HEAD~100 # \u56de\u9000\u5230\u524d100\u4e2a\u7248\u672c git log --pretty = oneline # \u663e\u793a2\u6b21\u66f4\u6539\u00a7 # \u5982\u4f55\u83b7\u53d6\u6bcf\u6b21\u66f4\u6539\u540e\u7684\u7248\u672c\u53f7\u5462\uff1f git reflog # \u5373\u4f7f\u6211\u6267\u884c\u8fc7\u4e00\u6b21\u56de\u9000\uff0c\u4f46\u662f\u6211\u5fd8\u8bb0\u4e86\u8fd9\u6b21\u56de\u9000\uff0c\u4e5f\u53ef\u4ee5\u663e\u793a\u51fa\u6765 git reset --hard \u7248\u672c\u53f7 ( 6fcfc89 ) # \u5982\u679c\u56de\u9000\u9519\u4e86\uff0c\u60f3\u8fd4\u56de\u5230\u6700\u65b0\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528\u6700\u65b0\u7248\u672c\u53f7\u6765\u56de\u9000 # \u5de5\u4f5c\u533a\u548c\u6682\u5b58\u533a # \u5de5\u4f5c\u533a:\u5c31\u662f\u4f60\u5728\u7535\u8111\u4e0a\u770b\u5230\u7684\u76ee\u5f55\u3002 # \u6682\u5b58\u533a:\u5de5\u4f5c\u533a\u6709\u4e00\u4e2a\u9690\u85cf\u76ee\u5f55.git,\u8fd9\u4e2a\u4e0d\u5c5e\u4e8e\u5de5\u4f5c\u533a\uff0c\u8fd9\u662f\u7248\u672c\u5e93,\u7248\u672c\u5e93\u91cc\u9762\u6709\u4e2astage\u7684\u6682\u5b58\u533a\uff0c\u8fd8\u6709Git\u4e3a\u6211\u4eec\u81ea\u52a8\u521b\u5efa\u4e86\u7b2c\u4e00\u4e2a\u5206\u652fmaster,\u4ee5\u53ca\u6307\u5411master\u7684\u4e00\u4e2a\u6307\u9488HEAD\u3002 vi readme.txt # append 555555,\u7a81\u7136\u53d1\u73b0\u6dfb\u52a0\u7684\u5185\u5bb9\u6709\u9519\u8bef\uff0c\u4f46\u662f\u4f60\u5fd8\u8bb0\u4e86\u4fee\u6539\u4e86\u5565\u5982\u4f55\u64a4\u9500\uff1f\u5f53\u7136\u662f\u5728\u672a\u63d0\u4ea4\u4e4b\u524d git status # \u67e5\u770b\u4e00\u4e0b\u662f\u4e0d\u662f\u672a\u63d0\u4ea4\uff0c\u5982\u679c\u672a\u63d0\u4ea4 git checkout --readme.txt # git checkout -- file \u53ef\u4ee5\u4e22\u5f03\u5728\u5de5\u4f5c\u533a\u7684\u4fee\u6539\u3002 # \u6ce8\u610f \u547d\u4ee4git checkout -- readme.txt \u4e2d\u7684 -- \u5f88\u91cd\u8981\uff0c\u5982\u679c\u6ca1\u6709 -- \u7684\u8bdd\uff0c\u90a3\u4e48\u547d\u4ee4\u53d8\u6210\u521b\u5efa\u5206\u652f\u4e86\u3002 # \u8fdc\u7a0b\u4ed3\u5e93 ssh-keygen -t rsa \u2013C \u201cyouremail@example.com\u201d # \u521b\u5efassh\u79d8\u94a5\uff0c\u627e\u5230.ssh/id_rsa.pub\u516c\u94a5 # \u767b\u5f55github,\u6253\u5f00\u201d settings\u201d\u4e2d\u7684SSH Keys\u9875\u9762\uff0c\u7136\u540e\u70b9\u51fb\u201cAdd SSH Key\u201d,\u586b\u4e0a\u4efb\u610ftitle\uff0c\u5728Key\u6587\u672c\u6846\u91cc\u9ecf\u8d34id_rsa.pub\u6587\u4ef6\u7684\u5185\u5bb9 # \u6211\u4eec\u5df2\u7ecf\u5728\u672c\u5730\u521b\u5efa\u4e86\u4e00\u4e2aGit\u4ed3\u5e93\u540e\uff0c\u53c8\u60f3\u5728github\u521b\u5efa\u4e00\u4e2aGit\u4ed3\u5e93\uff0c\u5e76\u4e14\u5e0c\u671b\u8fd9\u4e24\u4e2a\u4ed3\u5e93\u8fdb\u884c\u8fdc\u7a0b\u540c\u6b65\uff0c\u8fd9\u6837github\u7684\u4ed3\u5e93\u53ef\u4ee5\u4f5c\u4e3a\u5907\u4efd\uff0c\u53c8\u53ef\u4ee5\u5176\u4ed6\u4eba\u901a\u8fc7\u8be5\u4ed3\u5e93\u6765\u534f\u4f5c\uff0c\u5728github\u4e0a\u521b\u5efa\u4e00\u4e2a\u65b0\u4ed3\u5e93\uff0c\u4ed3\u5e93\u540d\u4fdd\u6301\u4e00\u81f4\uff0c\u5176\u4ed6\u9ed8\u8ba4 git remote add origin https://github.com/tugenhua0707/testgit.git # \u540e\u9762\u7684\u94fe\u63a5\u6539\u4e3a\u81ea\u5df1\u7684 # \u7531\u4e8e\u8fdc\u7a0b\u5e93\u662f\u7a7a\u7684\uff0c\u6211\u4eec\u7b2c\u4e00\u6b21\u63a8\u9001master\u5206\u652f\u65f6\uff0c\u52a0\u4e0a\u4e86 \u2013u\u53c2\u6570\uff0cGit\u4e0d\u4f46\u4f1a\u628a\u672c\u5730\u7684master\u5206\u652f\u5185\u5bb9\u63a8\u9001\u7684\u8fdc\u7a0b\u65b0\u7684master\u5206\u652f\uff0c\u8fd8\u4f1a\u628a\u672c\u5730\u7684master\u5206\u652f\u548c\u8fdc\u7a0b\u7684master\u5206\u652f\u5173\u8054\u8d77\u6765\uff0c\u5728\u4ee5\u540e\u7684\u63a8\u9001\u6216\u8005\u62c9\u53d6\u65f6\u5c31\u53ef\u4ee5\u7b80\u5316\u547d\u4ee4\u3002 git push -u origin master # \u628a\u672c\u5730\u4ed3\u5e93\u5206\u652fmaster\u5185\u5bb9\u63a8\u5230\u8fdc\u7a0b\u4ed3\u5e93\u4e2d\u53bb git push origin master # \u4ee5\u540e\u7528\u8fd9\u4e2a\u547d\u4ee4\u5c31\u53ef\u4ee5\u4e86 # \u521b\u5efa\u5176\u4ed6\u5206\u652f git checkout -b dev # \u521b\u5efa\u5e76\u5207\u6362\u5206\u652f\u4e3adev\uff0cgit checkout -b\u76f8\u5f53\u4e8e git branch dev+git checkout dev git branch # \u67e5\u770b\u5f53\u524d\u5206\u652f # \u628adev\u5206\u652f\u4e0a\u7684\u5185\u5bb9\u5408\u5e76\u5230\u5206\u652fmaster\u4e0a\u4e86\uff0c\u53ef\u4ee5\u5728master\u5206\u652f\u4e0a\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4 git merge dev git merge dev # \u628adev\u5206\u652f\u4e0a\u7684\u5185\u5bb9\u5408\u5e76\u5230\u5206\u652fmaster\u4e0a\u4e86,\u9700\u5728master\u5206\u652f\u4e0a\u6267\u884c\u8be5\u547d\u4ee4\uff0c\u8fd9\u6837\u5c31\u5408\u5e76\u4e86\u4e24\u4e2a\u5206\u652f git branch -d dev # \u5220\u9664dev\u5206\u652f\uff0c\u56e0\u4e3a\u5df2\u7ecf\u5408\u5e76\u5230master\u4e0a\u4e86 # \u89e3\u51b3\u51b2\u7a81\uff0c\u5047\u8bbereadme.txt\u6587\u4ef6\uff0cdev\u5206\u652f\u4e0a\u6dfb\u52a0\u4e86888888\uff0c\u800cmaster\u5206\u652f\u4e0a\u6dfb\u52a0\u4e86999999 git merge dev # \u4f1a\u62a5\u9519\uff0c\u6709\u51b2\u7a81\uff0c\u67e5\u770breadme.txt\u4f1a\u51fa\u73b0\u51b2\u7a81\u7684\u4ee3\u7801\u4f4d\u7f6e:<<<HEAD\u662f\u6307\u4e3b\u5206\u652f\u4fee\u6539\u7684\u5185\u5bb9\uff0c>>>>>dev \u662f\u6307dev\u4e0a\u4fee\u6539\u7684\u5185\u5bb9 # \u89e3\u51b3:\u4fee\u6539\u4ee3\u7801\u548cmaster\u5206\u652f\u4e0a\u7684\u5185\u5bb9\u4fdd\u6301\u4e00\u81f4\u5373\u53ef","title":"git\u914d\u7f6e"},{"location":"vim_cmake_git/#cmake","text":"\u57fa\u7840\u7528\u6cd5(\u5916\u90e8\u6784\u5efa) # 1.\u53d8\u91cf\u5f15\u7528\u65b9\u5f0f,\u5176\u5b9e\u5c31\u662f\u8868\u793a\u53d8\u91cf\u7684\u503c:${\u53d8\u91cf}\uff0cIF\u8bed\u53e5\u662f\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d\u5f15\u7528\uff0c\u800c\u4e0d\u9700\u8981${}\u3002\u5982\u679c\u4f7f\u7528\u4e86${}\u53bb\u5e94\u7528\u53d8 \u91cf\uff0c\u5176\u5b9e IF \u4f1a\u53bb\u5224\u65ad\u540d\u4e3a${}\u6240\u4ee3\u8868\u7684\u503c\u7684\u53d8\u91cf\uff0c\u90a3\u5f53\u7136\u662f\u4e0d\u5b58\u5728\u7684\u4e86\u3002 # 2.\u6307\u4ee4\u4e2d\u53c2\u6570\u683c\u5f0f:\u6307\u4ee4(\u53c2\u65701 \u53c2\u65702 \u53c2\u65703)\uff0c\u6307\u4ee4\u662f\u5927\u5c0f\u5199\u65e0\u5173\u7684\uff0c\u53c2\u6570\u548c\u53d8\u91cf\u662f\u5927\u5c0f\u5199\u76f8\u5173\u7684\u3002\u4f46\uff0c\u63a8\u8350\u4f60\u5168\u90e8\u4f7f\u7528\u5927\u5199\u6307\u4ee4\u3002 # 3.\u9700\u8981\u4e3a\u4efb\u4f55\u5b50\u76ee\u5f55\u5efa\u7acbCMakeLists.txt\u6587\u4ef6 cmake_minimum_required ( VERSION 3 .15 ) # PROJECT(projectname [CXX] [C] [Java]),\u53ef\u4ee5\u6307\u5b9a\u5de5\u7a0b\u540d\u79f0+\u8bed\u8a00 # \u8fd9\u4e2a\u6307\u4ee4\u9ed8\u8ba4\u751f\u6210\u4e24\u4e2a\u53d8\u91cf:Test_BINARY_DIR+Test_SOURCE_DIR,\u4f46\u662fcmake\u7cfb\u7edf\u4e5f\u9884\u5b9a\u4e49\u4e86:PROJECT_BINARY_DIR+PROJECT_SOURCE_DIR(\u5efa\u8bae\u4f7f\u7528) project ( Test ) # \u5de5\u7a0b\u540d\u548c\u751f\u6210\u7684\u53ef\u6267\u884c\u6587\u4ef6hello\u662f\u6ca1\u6709\u4efb\u4f55\u5173\u7cfb\u7684 # SET \u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u663e\u5f0f\u7684\u5b9a\u4e49\u53d8\u91cf,\u5f53\u7136\u53ef\u4ee5\u6307\u5b9a\u591a\u4e2a.c\u6587\u4ef6\uff0cSET(SRC_LIST main.c t1.c t2.c) set ( CMAKE_CXX_STANDARD 14 ) set ( SRC_LIST main.cpp ) # \u7b49\u4ef7\u4e8eset(SRC_LIST \"main.cpp\")\uff0c\u5982\u679c\u67d0\u6587\u4ef6\u540d\u5305\u542b\u7a7a\u683c:fu nc.c\uff0c\u5fc5\u987b\u5e26\u53cc\u5f15\u53f7 # \u5411\u7ec8\u7aef\u8f93\u51fa\u7528\u6237\u5b9a\u4e49\u7684\u4fe1\u606f\uff0c\u5305\u542b\u4e86\u4e09\u79cd\u7c7b\u578b: SEND_ERROR\uff0c\u4ea7\u751f\u9519\u8bef\uff0c\u751f\u6210\u8fc7\u7a0b\u88ab\u8df3\u8fc7\u3002 SATUS\uff0c\u8f93\u51fa\u524d\u7f00\u4e3a\u2014\u7684\u4fe1\u606f\u3002FATAL_ERROR\uff0c\u7acb\u5373\u7ec8\u6b62\u6240\u6709 cmake \u8fc7\u7a0b. MESSAGE ( STATUS \"This is BINARY dir \" ${ PROJECT_BINARY_DIR } ) # \u7f16\u8bd1\u6240\u5728\u8def\u5f84\uff0c\u4e00\u822c\u662fbuild\u6587\u4ef6\u8def\u5f84 MESSAGE ( STATUS \"This is SOURCE dir \" ${ PROJECT_SOURCE_DIR } ) # \u6307\u4ee3\u5de5\u7a0b\u8def\u5f84\uff0c\u7edd\u5bf9\u8def\u5f84\u5c31\u5230\u5de5\u7a0b\u540d\u79f0 #\u5b9a\u4e49\u4e86\u8fd9\u4e2a\u5de5\u7a0b\u4f1a\u751f\u6210\u4e00\u4e2a\u6587\u4ef6\u540d\u4e3a hello \u7684\u53ef\u6267\u884c\u6587\u4ef6\uff0c\u76f8\u5173\u7684\u6e90\u6587\u4ef6\u662f SRC_LIST \u4e2d \u5b9a\u4e49\u7684\u6e90\u6587\u4ef6\u5217\u8868\uff0c \u672c\u4f8b\u4e2d\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u6210 ADD_EXECUTABLE(hello main.c)\u3002 add_executable ( Test ${ SRC_LIST } ) # \u53ef\u6267\u884c\u6587\u4ef6\u540d\uff0c\u4f60\u53ef\u4ee5\u968f\u4fbf\u8d77\u540d\u79f0\uff0c\u4e00\u822c\u548c\u5de5\u7a0b\u540d\u76f8\u540c # \u548ccmake\u540c\u7ea7\u76ee\u5f55\u4e0b\u6784\u5efabuild\u6587\u4ef6\u5939\uff0c\u7136\u540ecd \u8fdb\u5165 # \u751f\u6210MakeFile\u6587\u4ef6:cmake .. # \u6784\u5efa\u5de5\u7a0b:make,\u5982\u679c\u60f3\u770b\u5230\u8be6\u7ec6\u6784\u5efa\u8fc7\u7a0b\uff0cmake VERBOSE=1 # \u6e05\u7406\u5de5\u7a0b:make clean \u6784\u5efa\u6574\u4e2a\u5de5\u7a0b\u7528\u6cd5 -src | -CMakeLists.txt | -main.cpp -build | -\u8981\u6267\u884ccmake ..\u7684\u7f16\u8bd1\u6587\u4ef6 -doc # \u7528\u4e8e\u9632\u6b62\u672c\u5de5\u7a0b\u7684\u6587\u6863 | -hello.txt # \u5199\u4e00\u4e9b\u63cf\u8ff0\u6027\u5185\u5bb9 -runhello.sh # \u8c03\u7528\u7ed3\u679c\u4e8c\u8fdb\u5236\uff0c\u672c\u6b21\u5185\u5bb9\u4e3ahello -COPYRIGHT # \u6dfb\u52a0\u6587\u672c\u6587\u4ef6 -README # \u6dfb\u52a0\u6587\u672c\u6587\u4ef6 -CMakeLists.txt # \u6700\u7ec8\u5b89\u88c5\u8fd9\u4e9b\u6587\u4ef6\uff1a\u5c06 hello \u4e8c\u8fdb\u5236\u4e0e runhello.sh \u5b89\u88c5\u81f3/usr/bin\uff0c\u5c06 doc \u76ee\u5f55 \u7684\u5185\u5bb9\u4ee5\u53ca COPYRIGHT/README \u5b89\u88c5\u5230/usr/share/doc/cmake/t2 # \u6ce8\u610f\uff0c\u9700\u8981\u4e3a\u4efb\u4f55\u5b50\u76ee\u5f55\u5efa\u7acb\u4e00\u4e2aCMakeLists.txt\u6587\u4ef6 # src/CMakeLists.txt\u7684\u7f16\u5199 ADD_EXECUTABLE ( hello main.c ) # \u5de5\u7a0b\u4e0bCMakeLists.txt\u7684\u7f16\u5199 PROJECT ( HELLO ) # ADD_SUBDIRECTORY(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) # \u7528\u4e8e\u5411\u5f53\u524d\u5de5\u7a0b\u6dfb\u52a0\u5b58\u653e\u6e90\u6587\u4ef6\u7684\u5b50\u76ee\u5f55,\u5e76\u53ef\u4ee5\u6307\u5b9a\u4e2d\u95f4\u4e8c\u8fdb\u5236\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u5b58 \u653e\u7684\u4f4d\u7f6e\u3002 ADD_SUBDIRECTORY ( src bin ) # \u6307\u5b9a\u7f16\u8bd1\u8f93\u51fa(\u5305\u542b\u7f16\u8bd1\u4e2d\u95f4\u7ed3\u679c)\u8def\u5f84\u4e3a bin \u76ee\u5f55,\u5982\u679c\u4e0d\u6307\u5b9a\u90a3\u4e48\u7f16\u8bd1\u7ed3\u679c(\u5305\u62ec\u4e2d\u95f4\u7ed3\u679c)\u90fd\u5c06\u5b58\u653e\u5728 build/src \u76ee\u5f55(\u8fd9\u4e2a\u76ee\u5f55\u8ddf\u539f\u6709\u7684 src \u76ee\u5f55\u5bf9\u5e94)\uff0c\u6307\u5b9a bin \u76ee\u5f55\u540e\uff0c\u76f8\u5f53\u4e8e\u5728\u7f16\u8bd1\u65f6 \u5c06 src \u91cd\u547d\u540d\u4e3a bin\uff0c\u6240\u6709\u7684\u4e2d\u95f4\u7ed3\u679c\u548c\u76ee\u6807\u4e8c\u8fdb\u5236\u90fd\u5c06\u5b58\u653e\u5728 bin \u76ee\u5f55\u3002 #\u7136\u540e\u5efa\u7acb build \u76ee\u5f55\uff0c\u8fdb\u5165 build \u76ee\u5f55\u8fdb\u884c\u5916\u90e8\u7f16\u8bd1\u3002 #cmake .. #make #\u6784\u5efa\u5b8c\u6210\u540e\uff0c\u4f60\u4f1a\u53d1\u73b0\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6 hello \u4f4d\u4e8e build/bin \u76ee\u5f55\u4e2d\u3002 # \u5f53\u7136\uff0c\u5982\u679c\u4e0d\u60f3\u7f16\u8bd1\u8f93\u51fa\u76f4\u63a5\u653e\u5728build/bin\u76ee\u5f55\u4e0b\uff0c\u53ef\u4ee5\u901a\u8fc7set\u6307\u4ee4\u91cd\u65b0\u5b9a\u4e49EXECUTABLE_OUTPUT_PATH \u548c LIBRARY_OUTPUT_PATH \u53d8\u91cf \u6765\u6307\u5b9a\u6700\u7ec8\u7684\u76ee\u6807\u4e8c\u8fdb\u5236\u7684\u4f4d\u7f6e(\u6307\u6700\u7ec8\u751f\u6210\u7684 hello \u6216\u8005\u6700\u7ec8\u7684\u5171\u4eab\u5e93\uff0c\u4e0d\u5305\u542b\u7f16\u8bd1\u751f\u6210 \u7684\u4e2d\u95f4\u6587\u4ef6),\u4f46\u662f\u4e24\u884c\u653e\u5728\u54ea\u5462\uff1f\u628a\u63e1\u4e00\u4e2a\u7b80\u5355\u7684\u539f\u5219\uff0c\u5728\u54ea\u91cc ADD_EXECUTABLE \u6216 ADD_LIBRARY\uff0c \u5982\u679c\u9700\u8981\u6539\u53d8\u76ee\u6807\u5b58\u653e\u8def\u5f84\uff0c\u5c31\u5728\u54ea\u91cc\u52a0\u5165\u4e0a\u8ff0\u7684\u5b9a\u4e49\u3002\u8fd9\u91cc\u653e\u5728src/CMakeLists.txt\u91cc\u9762 SET ( EXECUTABLE_OUTPUT_PATH ${ PROJECT_BINARY_DIR } /bin ) # \u4e8c\u8fdb\u5236\u7684\u8f93\u51fa\u8def\u5f84 SET ( LIBRARY_OUTPUT_PATH ${ PROJECT_BINARY_DIR } /lib ) # \u5e93\u7684\u8f93\u51fa\u8def\u5f84\uff0c\u5e38\u7528\u4e8e\u5171\u4eab\u5e93\u548c\u9759\u6001\u5e93 # \u5b89\u88c5\u9879\u76ee:\u4e00\u4e2a\u9879\u76eeclone\u4e0b\u6765\u540e\u662f\u9700\u8981\u5b89\u88c5\u7684\uff0c\u4f8b\u5982opencv\uff0c\u5b89\u88c5\u5230\u672c\u5730\u540e\u4f7f\u7528\u975e\u5e38\u65b9\u4fbf\uff0c\u4e0b\u9762\u4ecb\u7ecdhello\u9879\u76ee\u7684\u5b89\u88c5 make install # \u76f4\u63a5\u5b89\u88c5\uff0c\u9ed8\u8ba4\u5b89\u88c5\u8def\u5f84:/usr/bin\u76ee\u5f55 make install DESTDIR = /tmp/test # \u6307\u5b9a\u76ee\u5f55\u5b89\u88c5:\u5b89\u88c5\u5230/tmp/test/usr/bin\u76ee\u5f55\uff08\u6253\u5305\u65f6\u5e38\u7528\uff09 # INSTALL\u547d\u4ee4:\u7528\u4e8e\u5b9a\u4e49\u5b89\u88c5\u89c4\u5219\uff0c\u5b89\u88c5\u7684\u5185\u5bb9\u53ef\u4ee5\u5305\u62ec\u76ee\u6807\u4e8c\u8fdb\u5236\u3001\u52a8\u6001\u5e93\u3001\u9759\u6001\u5e93\u4ee5\u53ca \u6587\u4ef6\u3001\u76ee\u5f55\u3001\u811a\u672c\u7b49 # 1.\u76ee\u6807\u6587\u4ef6\u5b89\u88c5 INSTALL ( TARGETS targets...# \u540e\u9762\u8ddf\u7684\u5c31\u662f\u6211\u4eec\u901a\u8fc7 ADD_EXECUTABLE \u6216\u8005 ADD_LIBRARY \u5b9a\u4e49\u7684 \u76ee\u6807\u6587\u4ef6\uff0c\u53ef\u80fd\u662f\u53ef\u6267\u884c\u4e8c\u8fdb\u5236\u3001\u52a8\u6001\u5e93\u3001\u9759\u6001\u5e93 [[ ARCHIVE | LIBRARY | RUNTIME ] # \u76ee\u6807\u7c7b\u578b\u4e5f\u5c31\u76f8\u5bf9\u5e94\u7684\u6709\u4e09\u79cd\uff0cARCHIVE \u7279\u6307\u9759\u6001\u5e93\uff0cLIBRARY \u7279\u6307\u52a8\u6001\u5e93\uff0cRUNTIME \u7279\u6307\u53ef\u6267\u884c\u76ee\u6807\u4e8c\u8fdb\u5236\u3002 [ DESTINATION <dir> ] # \u5b9a\u4e49\u4e86\u5b89\u88c5\u7684\u8def\u5f84\uff0c\u5982\u679c\u8def\u5f84\u4ee5/\u5f00\u5934\uff0c\u90a3\u4e48\u6307\u7684\u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u8fd9\u65f6\u5019 CMAKE_INSTALL_PREFIX \u5176\u5b9e\u5c31\u65e0\u6548\u4e86\u3002\u5982\u679c\u4f60\u5e0c\u671b\u4f7f\u7528 CMAKE_INSTALL_PREFIX \u6765 \u5b9a\u4e49\u5b89\u88c5\u8def\u5f84\uff0c\u5c31\u8981\u5199\u6210\u76f8\u5bf9\u8def\u5f84\uff0c\u5373\u4e0d\u8981\u4ee5/\u5f00\u5934\uff0c\u90a3\u4e48\u5b89\u88c5\u540e\u7684\u8def\u5f84\u5c31\u662f ${CMAKE_INSTALL_PREFIX}/<DESTINATION \u5b9a\u4e49\u7684\u8def\u5f84>,\u6ce8\u610f\u76f8\u5bf9\u8def\u5f84\u8981\u4e0d\u8981\u4ee5/\u7ed3\u5c3e(abc,abc/)\uff0c\u5982\u679c\u76ee\u5f55\u540d\u4e0d\u4ee5/\u7ed3\u5c3e\uff0c\u90a3\u4e48\u8fd9\u4e2a\u76ee\u5f55\u5c06\u88ab\u5b89\u88c5\u4e3a\u76ee\u6807\u8def\u5f84\u4e0b\u7684 abc\uff0c\u5982\u679c\u76ee\u5f55\u540d\u4ee5/\u7ed3\u5c3e\uff0c \u4ee3\u8868\u5c06\u8fd9\u4e2a\u76ee\u5f55\u4e2d\u7684\u5185\u5bb9\u5b89\u88c5\u5230\u76ee\u6807\u8def\u5f84\uff0c\u4f46\u4e0d\u5305\u62ec\u8fd9\u4e2a\u76ee\u5f55\u672c\u8eab\u3002 [ PERMISSIONS permissions... ] [ CONFIGURATIONS [ Debug | Release | ... ]] [ COMPONENT <component> ] [ OPTIONAL ] ] [ ... ]) # \u4e3e\u4f8b\u5b50 INSTALL ( TARGETS myrun mylib mystaticlib # DESTINATION\u63cf\u8ff0\u7684\u662f\u5b89\u88c5\u8def\u5f84 RUNTIME DESTINATION bin # \u53ef\u6267\u884c\u4e8c\u8fdb\u5236myrun\u5b89\u88c5\u5230${CMAKE_INSTALL_PREFIX}/bin\u76ee\u5f55 LIBRARY DESTINATION lib# \u52a8\u6001\u5e93lib mylib \u5b89\u88c5\u5230 ${ CMAKE_INSTALL_PREFIX } /lib \u76ee\u5f55 ARCHIVE DESTINATION libstatic ) # \u9759\u6001\u5e93lib mystaticlib \u5b89\u88c5\u5230${CMAKE_INSTALL_PREFIX}/libstatic \u76ee\u5f55 # 2.\u666e\u901a\u6587\u4ef6\u5b89\u88c5\uff0c\u53ef\u7528\u4e8e\u5b89\u88c5\u4e00\u822c\u6587\u4ef6\uff0c\u5e76\u53ef\u4ee5\u6307\u5b9a\u8bbf\u95ee\u6743\u9650\uff0c\u6587\u4ef6\u540d\u662f\u6b64\u6307\u4ee4\u6240\u5728\u8def\u5f84\u4e0b\u7684\u76f8\u5bf9\u8def\u5f84 INSTALL ( FILES files... DESTINATION <dir> # dir\u5199\u76f8\u5bf9\u8def\u5f84\u4e3a\u597d [ PERMISSIONS permissions... ] # \u540e\u9762\u7684\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u6743\u9650:\u9ed8\u8ba4644\u6743\u9650 [ CONFIGURATIONS [ Debug | Release | ... ]] [ COMPONENT <component> ] [ OPTIONAL ] ] [ ... ]) # 3.\u975e\u76ee\u6807\u6587\u4ef6\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u5b89\u88c5(\u6bd4\u5982\u811a\u672c\u7b49) INSTALL ( PROGRAMS files... DESTINATION <dir> # dir\u5199\u76f8\u5bf9\u8def\u5f84\u4e3a\u597d [ PERMISSIONS permissions... ] # \u540e\u9762\u7684\u53ef\u4ee5\u7528\u4e8e\u6307\u5b9a\u6743\u9650:\u9ed8\u8ba4755\u6743\u9650 [ CONFIGURATIONS [ Debug | Release | ... ]] [ COMPONENT <component> ] [ OPTIONAL ] ] [ ... ]) # \u4ecb\u7ecd\u5b89\u88c5\u6b65\u9aa4 # 1\uff0c\u5b89\u88c5 COPYRIGHT|README\uff0c\u76f4\u63a5\u4fee\u6539\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakelists.txt\uff0c\u52a0\u5165\u4ee5\u4e0b\u6307\u4ee4\uff1a INSTALL ( FILES COPYRIGHT README DESTINATION share/doc/cmake/t2 ) # 2\uff0c\u5b89\u88c5 runhello.sh\uff0c\u76f4\u63a5\u4fee\u6539\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakeLists.txt\uff0c\u52a0\u5165\u5982\u4e0b\u6307\u4ee4\uff1a INSTALL ( PROGRAMS runhello.sh DESTINATION bin ) # 3\uff0c\u5b89\u88c5 doc \u4e2d\u7684 hello.txt\uff0c\u8fd9\u91cc\u6709\u4e24\u79cd\u65b9\u5f0f\uff1a # * \u4e00\u662f\u901a\u8fc7\u5728 doc \u76ee\u5f55\u5efa\u7acb CMakeLists.txt \u5e76\u5c06 doc \u76ee\u5f55\u901a\u8fc7 ADD_SUBDIRECTORY \u52a0\u5165\u5de5\u7a0b\u6765\u5b8c\u6210\u3002 # * \u53e6\u4e00\u79cd\u65b9\u6cd5 \u662f\u76f4\u63a5\u5728\u5de5\u7a0b\u76ee\u5f55\u901a\u8fc7 INSTALL(DIRECTORY \u6765\u5b8c\u6210)\uff0c\u524d\u8005\u6bd4\u8f83\u7b80\u5355\uff0c\u5404\u4f4d\u53ef\u4ee5\u6839\u636e\u5174\u8da3\u81ea\u5df1\u5b8c\u6210\uff0c\u6211\u4eec\u6765\u5c1d\u8bd5 \u540e\u8005\uff0c\u987a\u4fbf\u6f14\u793a\u4ee5\u4e0b DIRECTORY \u7684\u5b89\u88c5\u3002\u56e0\u4e3a hello.txt \u8981\u5b89\u88c5\u5230/<prefix>/share/doc/cmake/t2\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u80fd\u76f4\u63a5\u5b89\u88c5 \u6574\u4e2a doc \u76ee\u5f55\uff0c\u8fd9\u91cc\u91c7\u7528\u7684\u65b9\u5f0f\u662f\u5b89\u88c5 doc \u76ee\u5f55\u4e2d\u7684\u5185\u5bb9\uff0c\u4e5f\u5c31\u662f\u4f7f\u7528\u201ddoc/\u201d\uff0c\u5728\u5de5\u7a0b\u6587\u4ef6\u4e2d\u6dfb\u52a0 INSTALL ( DIRECTORY doc/ DESTINATION share/doc/cmake/t2 ) # \u7f16\u8bd1\u548c\u5b89\u88c5\uff0c\u73b0\u5728\u8fdb\u5165 build \u76ee\u5f55\u8fdb\u884c\u5916\u90e8\u7f16\u8bd1\uff0c\u6ce8\u610f\u4f7f\u7528 CMAKE_INSTALL_PREFIX \u53c2\u6570\uff0c\u8fd9\u91cc\u6211\u4eec \u5c06\u5b83\u5b89\u88c5\u5230\u4e86/tmp/t2 \u76ee\u5f55 cmake -DCMAKE_INSTALL_PREFIX = /tmp/t2/usr .. # \u5982\u679c\u4f60\u60f3\u76f4\u63a5\u5b89\u88c5\u5230\u7cfb\u7edf\uff0c\u53ef\u4ee5\u4f7f\u7528 cmake -DCMAKE_INSTALL_PREFIX=/usr .. # \u5982\u679c\u6ca1\u6709\u5b9a\u4e49 CMAKE_INSTALL_PREFIX\uff0c\u9ed8\u8ba4\u4f1a\u5b89\u88c5\u5230:/usr/local make make install # \u8ba9\u6211\u4eec\u8fdb\u5165/tmp/t2 \u76ee\u5f55\u770b\u4e00\u4e0b\u5b89\u88c5\u7ed3\u679c\uff1a ./usr ./usr/share ./usr/share/doc ./usr/share/doc/cmake ./usr/share/doc/cmake/t2 ./usr/share/doc/cmake/t2/hello.txt ./usr/share/doc/cmake/t2/README ./usr/share/doc/cmake/t2/COPYRIGHT ./usr/bin ./usr/bin/hello ./usr/bin/runhello.sh \u9759\u6001\u5e93\u4e0e\u52a8\u6001\u5e93\u6784\u5efa # \u76ee\u5f55\u7ed3\u6784 -lib | -hello.c | -hello.h | -CMakeLists.txt -CMakeLists.txt # \u5de5\u7a0b\u76ee\u5f55\u4e0b CMakeLists.txt PROJECT ( HELLOLIB ) ADD_SUBDIRECTORY ( lib <\u76ee\u5f55> ) # \u5176\u5b9e\u4e5f\u53ef\u4ee5\u5728\u8fd9\u91cc\u6307\u5b9a.so\u6587\u4ef6\u7684\u8f93\u51fa\u4f4d\u7f6e # lib/CMakeLists.txt SET ( LIBHELLO_SRC hello.cpp ) SET ( LIBRARY_OUTPUT_PATH ${ PROJECT_BINARY_DIR } /aa ) # \u6307\u5b9a.so\u6587\u4ef6\u7684\u8f93\u51fa\u4f4d\u7f6e # \u89e3\u91ca\u9644\u5f551 ADD_LIBRARY ( hello SHARED ${ LIBHELLO_SRC } ) # \u6dfb\u52a0\u52a8\u6001\u5e93 xxx.so # \u6216\u8005,\u5982\u679c\u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u7684libname\u540d\u79f0\u76f8\u540c\uff0c\u90a3\u4e48\u540e\u8005\u6784\u5efa\u6307\u4ee4\u5931\u6548,\u65b9\u6848\u4e00:\u91c7\u7528\u4e0d\u540c\u540d\u65b9\u6848 ADD_LIBRARY ( hello_static STATIC ${ LIBHELLO_SRC } ) # \u6dfb\u52a0\u9759\u6001\u5e93 xxx.a # \u65b9\u6848\u4e8c:\u5982\u679c\u60f3\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93\u540c\u540d\u4e14\u540c\u65f6\u5b58\u5728\uff0c\u9700\u8981\u5728lib/CMakeLists.txt\u4e2d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4\uff0c\u8be6\u89e3\u89c1\u9644\u5f552 SET_TARGET_PROPERTIES ( hello_static PROPERTIES OUTPUT_NAME \"hello\" ) # \u6307\u5b9a\u52a8\u6001\u5e93\u7248\u672c\uff0c\u4e00\u822c\u800c\u8a00\u52a8\u6001\u5e93\u662f\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u7248\u672c\u53f7\u7684\uff0c\u4f8b\u5982:libhello.so.1.2 # VERSION \u6307\u4ee3\u52a8\u6001\u5e93\u7248\u672c\uff0cSOVERSION \u6307\u4ee3 API \u7248\u672c\u3002 SET_TARGET_PROPERTIES ( hello PROPERTIES VERSION 1 .2 SOVERSION 1 ) # \u8fd9\u6837\u6784\u5efa\u540e\u4f1a\u751f\u6210\u4e09\u4e2a\u6587\u4ef6 libhello.so.1.2 libhello.so.1->libhello.so.1.2 libhello.so ->libhello.so.1 # \u9644\u5f551.\u6307\u4ee4 ADD_LIBRARY\u8be6\u89e3 ADD_LIBRARY ( libname # \u4e0d\u9700\u8981\u5b8c\u5168\u586b\u5199libhello.so\uff0c\u53ea\u9700\u8981\u586b\u5199hello\uff0ccmake\u7cfb\u7edf\u4f1a\u81ea\u52a8\u751f\u6210.x\u6587\u4ef6 [ SHARED | STATIC | MODULE ] # \u52a8\u6001\u5e93|\u9759\u6001\u5e93|\u7c7b\u4f3c\u52a8\u6001\u5e93\uff0cdyld \u7684\u7cfb\u7edf\u6709\u6548 [ EXCLUDE_FROM_ALL ] # \u8fd9\u4e2a\u5e93\u4e0d\u4f1a\u88ab\u9ed8\u8ba4\u6784\u5efa source1 source2 ... sourceN ) # \u9644\u5f552:SET_TARGET_PROPERTIES,\u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u8bbe\u7f6e\u8f93\u51fa\u7684\u540d\u79f0\uff0c\u5bf9\u4e8e\u52a8\u6001\u5e93\uff0c\u8fd8\u53ef\u4ee5\u7528\u6765\u6307\u5b9a\u52a8\u6001\u5e93\u7248\u672c\u548c API \u7248\u672c SET_TARGET_PROPERTIES ( target1 target2 ... PROPERTIES prop1 value1 prop2 value2 ... ) #\u7f16\u8bd1 mkdir build && cd build cmake .. make # \u53ef\u4ee5\u5728build/aa\u76ee\u5f55\u4e0b\u5f97\u5230\u4e00\u4e2alibhello.so # \u5b89\u88c5\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5c06 libhello.a, libhello.so.x \u4ee5\u53ca hello.h \u5b89\u88c5\u5230\u7cfb\u7edf\u76ee \u5f55\uff0c\u624d\u80fd\u771f\u6b63\u8ba9\u5176\u4ed6\u4eba\u5f00\u53d1\u4f7f\u7528 # \u9700\u8981\u5728lib/CMakeLists.txt\u4e2d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4 INSTALL ( TARGETS hello hello_static LIBRARY DESTINATION lib ARCHIVE DESTINATION lib ) # \u6ce8\u610f\uff0c\u9759\u6001\u5e93\u8981\u4f7f\u7528 ARCHIVE \u5173\u952e\u5b57 INSTALL ( FILES hello.h DESTINATION include/hello ) # \u901a\u8fc7: cmake -DCMAKE_INSTALL_PREFIX = /usr .. make make install # \u6211\u4eec\u5c31\u53ef\u4ee5\u5c06\u5934\u6587\u4ef6\u548c\u5171\u4eab\u5e93\u5b89\u88c5\u5230\u7cfb\u7edf\u76ee\u5f55/usr/lib \u548c/usr/include/hello \u4e2d\u4e86\u3002 \u4f7f\u7528\u5171\u4eab\u5e93\u548c\u5934\u6587\u4ef6 // 1.\u5efa\u7acb src \u76ee\u5f55\uff0c\u7f16\u5199\u6e90\u6587\u4ef6 main.c #include <hello.h> int main () { HelloFunc (); // \u8fd9\u4e2a\u51fd\u6570\u662f\u5199\u5728\u539f\u6765\u7684hell.cpp\u4e2d\u7684\uff0c\u58f0\u660e\u5728hello.h\u4e2d\u7684 return 0 ; } // \u7f16\u5199\u5de5\u7a0b\u4e3b\u6587\u4ef6 CMakeLists.txt PROJECT ( NEWHELLO ) ADD_SUBDIRECTORY ( src ) // \u7f16\u5199 src/CMakeLists.txt ADD_EXECUTABLE ( main main . c ) // \u5f00\u59cb\u6784\u5efa\uff0cbuild ...,\u51fa\u9519\u4e86\uff0c\u770b\u770b\u4e3a\u5565\u51fa\u9519\uff0c\u7528make VERBOSE=1\u6765\u8be6\u7ec6\u6784\u5efa\u6253\u5370\u6784\u5efa\u8fc7\u7a0b\uff0c\u6ca1\u6709<hello.h>\u6587\u4ef6\uff0chello.h \u4f4d\u4e8e/usr/include/hello \u76ee\u5f55\u4e2d\uff0c\u5e76\u6ca1\u6709\u4f4d\u4e8e\u7cfb\u7edf\u6807\u51c6\u7684\u5934\u6587\u4ef6\u8def\u5f84\uff0c\u5982\u679c\u76f4\u63a5\u4f7f\u7528 #include <hello/hello.h>\uff0c\u90a3\u8fd9\u4e00\u8282\u4e5f\u6ca1\u5565\u53ef\u8bb2\u7684\u5566 // 2.\u5f15\u5165\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u4e3a\u4e86\u8ba9\u6211\u4eec\u7684\u5de5\u7a0b\u80fd\u591f\u627e\u5230 hello.h \u5934\u6587\u4ef6\uff0c\u6211\u4eec\u9700\u8981\u5f15\u5165\u4e00\u4e2a\u65b0\u7684\u6307\u4ee4 //\u5728src/CMakeLists.txt \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84 INCLUDE_DIRECTORIES ( / usr / include / hello ) // \u6307\u4ee4\u8be6\u89e3 INCLUDE_DIRECTORIES ([ AFTER | BEFORE ] [ SYSTEM ] dir1 dir2 ...) // \u8fd9\u6761\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u5411\u5de5\u7a0b\u6dfb\u52a0\u591a\u4e2a\u7279\u5b9a\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\uff0c\u8def\u5f84\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u5272\uff0c\u5982\u679c\u8def\u5f84\u4e2d\u5305\u542b\u4e86\u7a7a\u683c\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cc\u5f15\u53f7\u5c06\u5b83\u62ec\u8d77\u6765\uff0c\u9ed8\u8ba4\u7684\u884c\u4e3a\u662f\u8ffd\u52a0\u5230\u5f53\u524d\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\u7684\u540e\u9762\uff0c\u4f60\u53ef\u4ee5\u901a\u8fc7\u4e24\u79cd\u65b9\u5f0f\u6765\u8fdb\u884c\u63a7\u5236\u641c\u7d22\u8def\u5f84\u6dfb\u52a0\u7684\u65b9\u5f0f\uff1a //\uff11\uff0cCMAKE_INCLUDE_DIRECTORIES_BEFORE\uff0c\u901a\u8fc7 SET \u8fd9\u4e2a cmake \u53d8\u91cf\u4e3a on\uff0c\u53ef\u4ee5 \u5c06\u6dfb\u52a0\u7684\u5934\u6587\u4ef6\u641c\u7d22\u8def\u5f84\u653e\u5728\u5df2\u6709\u8def\u5f84\u7684\u524d\u9762\u3002 //\uff12\uff0c\u901a\u8fc7 AFTER \u6216\u8005 BEFORE \u53c2\u6570\uff0c\u4e5f\u53ef\u4ee5\u63a7\u5236\u662f\u8ffd\u52a0\u8fd8\u662f\u7f6e\u524d\u3002 // \u91cd\u65b0\u6784\u5efa\u4f1a\u51fa\u73b0HelloFunc\u627e\u4e0d\u5230\u7684\u9519\u8bef\uff0c\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5e76\u6ca1\u6709 link \u5230\u5171\u4eab\u5e93 libhello \u4e0a\uff0c\u53ea\u5305\u542b\u5934\u6587\u4ef6\u5f53\u7136\u4e0d\u80fd\u4f7f\u7528\u4e86 // 3.\u4e3atarget\u6dfb\u52a0\u5171\u4eab\u5e93,\u5728src/CMakeLists.txt \u4e2d\u6dfb\u52a0\u5982\u4e0b\u6307\u4ee4 TARGET_LINK_LIBRARIES ( main hello ) // hello\u4e5f\u53ef\u4ee5\u5199\u6210libhello.so,\u6784\u5efa\u6210\u529f\u540e\u6094\u5f97\u5230main\u7684\u53ef\u6267\u884c\u6587\u4ef6 // \u6307\u4ee4\u8be6\u89e3 // \u8fd9\u91cc\u9700\u8981\u5f15\u5165\u4e24\u4e2a\u65b0\u7684\u6307\u4ee4:LINK_DIRECTORIES \u548c TARGET_LINK_LIBRARIES LINK_DIRECTORIES ( directory1 directory2 ...) // \u6dfb\u52a0\u975e\u6807\u51c6\u7684\u5171\u4eab\u5e93\u641c\u7d22\u8def\u5f84,\u6bd4\u5982\uff0c\u5728\u5de5\u7a0b\u5185\u90e8\u540c\u65f6\u5b58\u5728\u5171\u4eab\u5e93\u548c\u53ef \u6267\u884c\u4e8c\u8fdb\u5236\uff0c\u5728\u7f16\u8bd1\u65f6\u5c31\u9700\u8981\u6307\u5b9a\u4e00\u4e0b\u8fd9\u4e9b\u5171\u4eab\u5e93\u7684\u8def\u5f84\u3002\u8fd9\u4e2a\u4f8b\u5b50\u4e2d\u6211\u4eec\u6ca1\u6709\u7528\u5230\u8fd9\u4e2a\u6307\u4ee4\u3002 TARGET_LINK_LIBRARIES ( target library1 // \u8fd9\u4e2a\u6307\u4ee4\u53ef\u4ee5\u7528\u6765\u4e3a target \u6dfb\u52a0\u9700\u8981\u94fe\u63a5\u7684\u5171\u4eab\u5e93 < debug | optimized > library2 ...) // 4.\u5982\u4f55\u94fe\u63a5\u5230\u9759\u6001\u5e93\u5462,\u5f88\u7b80\u5355 TARGET_LINK_LIBRARIES ( main libhello . a ) \u4e24\u4e2a\u7279\u6b8a\u7684\u73af\u5883\u53d8\u91cf(\u4e0d\u662fcmake\u53d8\u91cf) CMAKE_INCLUDE_PATH \u548c CMAKE_LIBRARY_PATH # \u7528\u6cd5:\u5728 bash \u4e2d\u7528 export \u6216\u8005\u5728 csh \u4e2d\u4f7f\u7528 set \u547d\u4ee4\u8bbe\u7f6e # \u6216\u8005: CMAKE_INCLUDE_PATH = /home/include cmake .. # \u7b49\u65b9\u5f0f\u3002 # \u4e3b\u8981\u662f\u89e3\u51b3:\u5934\u6587\u4ef6\u6ca1\u6709\u5b58\u653e\u5728\u5e38\u89c4\u8def\u5f84(/usr/include,/usr/local/include \u7b49),\u5219\u53ef\u4ee5\u901a\u8fc7\u8fd9\u4e9b\u53d8\u91cf\u5c31\u884c\u5f25\u8865\u3002 # \u6211\u4eec\u4ee5\u672c\u4f8b\u4e2d\u7684 hello.h \u4e3a\u4f8b\uff0c\u5b83\u5b58\u653e\u5728/usr/include/hello \u76ee\u5f55\uff0c\u6240\u4ee5\u76f4\u63a5\u67e5\u627e\u80af\u5b9a\u662f\u627e\u4e0d\u5230\u7684\u3002\u524d\u9762\u6211\u4eec\u76f4\u63a5\u4f7f\u7528\u4e86\u7edd\u5bf9\u8def\u5f84 INCLUDE_DIRECTORIES(/usr/include/hello)\u544a\u8bc9\u5de5\u7a0b\u8fd9\u4e2a\u5934\u6587\u4ef6\u76ee\u5f55\u3002\u4e3a\u4e86\u5c06\u7a0b\u5e8f\u66f4\u667a\u80fd\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 CMAKE_INCLUDE_PATH \u6765\u8fdb\u884c\uff0c\u4f7f\u7528 bash \u7684\u65b9\u6cd5 \u5982\u4e0b\uff1a export CMAKE_INCLUDE_PATH = /usr/include/hello # \u7136\u540e\u5728\u5934\u6587\u4ef6\u4e2d\u5c06 INCLUDE_DIRECTORIES(/usr/include/hello)\u66ff\u6362\u4e3a\uff1a FIND_PATH ( myHeader hello.h ) # FIND_PATH \u7528\u6765\u5728\u6307\u5b9a\u8def\u5f84\u4e2d\u641c\u7d22\u6587\u4ef6\u540d,\u8fd9\u91cc\u6211\u4eec\u6ca1\u6709\u6307\u5b9a\u8def\u5f84\uff0c\u4f46\u662f\uff0ccmake \u4ecd\u7136\u53ef\u4ee5\u5e2e\u6211\u4eec\u627e\u5230 hello.h \u5b58\u653e\u7684\u8def\u5f84\uff0c\u5c31\u662f\u56e0 \u4e3a\u6211\u4eec\u8bbe\u7f6e\u4e86\u73af\u5883\u53d8\u91cf CMAKE_INCLUDE_PATH\u3002 IF ( myHeader ) INCLUDE_DIRECTORIES ( ${ myHeader } ) ENDIF ( myHeader ) # \u4ee5\u6b64\u4e3a\u4f8b\uff0cCMAKE_LIBRARY_PATH \u53ef\u4ee5\u7528\u5728 FIND_LIBRARY \u4e2d\u3002 Cmake\u5e38\u7528\u53d8\u91cf\u548c\u5e38\u7528\u73af\u5883\u53d8\u91cf # 1.cmake\u53d8\u91cf${},IF\u8bed\u53e5\u4e2d\u76f4\u63a5\u4f7f\u7528\u53d8\u91cf\u540d # 2.cmake\u53d8\u91cf\u7684\u9690\u5f0f\u5b9a\u4e49(\u4e49<projectname>_BINARY_DIR \u548c<projectname>_SOURCE_DIR)\u548c\u663e\u793a\u5b9a\u4e49(SET(HELLO_SRC main.c)) # 3.cmake\u5e38\u7528\u53d8\u91cf CMAKE_BINARY_DIR == PROJECT_BINARY_DIR == <projectname>_BINARY_DIR # \u6307\u7684\u662f\u5de5\u7a0b\u7f16\u8bd1\u53d1\u751f\u7684\u76ee\u5f55 CMAKE_SOURCE_DIR == PROJECT_SOURCE_DIR == <projectname>_SOURCE_DIR # \u6307\u7684\u662f\u5de5\u7a0b\u9876\u5c42\u76ee\u5f55 CMAKE_CURRRENT_BINARY_DIR # \u6307\u7684\u662f target \u7f16\u8bd1\u76ee\u5f55\uff0c\u4f7f\u7528\u6211\u4eec\u4e0a\u9762\u63d0\u5230\u7684 ADD_SUBDIRECTORY(src bin)\u53ef\u4ee5\u66f4\u6539\u8fd9\u4e2a\u53d8\u91cf\u7684\u503c\u3002\u4f7f\u7528 SET(EXECUTABLE_OUTPUT_PATH <\u65b0\u8def\u5f84>)\u5e76\u4e0d\u4f1a\u5bf9\u8fd9\u4e2a\u53d8\u91cf\u9020\u6210\u5f71\u54cd\uff0c\u5b83\u4ec5\u4ec5 \u4fee\u6539\u4e86\u6700\u7ec8\u76ee\u6807\u6587\u4ef6\u5b58\u653e\u7684\u8def\u5f84\u3002 CMAKE_CURRENT_LIST_FILE # \u8f93\u51fa\u8c03\u7528\u8fd9\u4e2a\u53d8\u91cf\u7684 CMakeLists.txt \u7684\u5b8c\u6574\u8def\u5f84 CMAKE_CURRENT_LIST_LINE # \u8f93\u51fa\u8fd9\u4e2a\u53d8\u91cf\u6240\u5728\u7684\u884c CMAKE_MODULE_PATH # \u8fd9\u4e2a\u53d8\u91cf\u7528\u6765\u5b9a\u4e49\u81ea\u5df1\u7684 cmake \u6a21\u5757\u6240\u5728\u7684\u8def\u5f84\u3002\u5982\u679c\u4f60\u7684\u5de5\u7a0b\u6bd4\u8f83\u590d\u6742\uff0c\u6709\u53ef\u80fd\u4f1a\u81ea\u5df1 \u7f16\u5199\u4e00\u4e9b cmake \u6a21\u5757\uff0c\u8fd9\u4e9b cmake \u6a21\u5757\u662f\u968f\u4f60\u7684\u5de5\u7a0b\u53d1\u5e03\u7684\uff0c\u4e3a\u4e86\u8ba9 cmake \u5728\u5904\u7406 CMakeLists.txt \u65f6\u627e\u5230\u8fd9\u4e9b\u6a21\u5757\uff0c\u4f60\u9700\u8981\u901a\u8fc7 SET \u6307\u4ee4\uff0c\u5c06\u81ea\u5df1\u7684 cmake \u6a21\u5757\u8def\u5f84\u8bbe \u7f6e\u4e00\u4e0b\u3002\u6bd4\u5982 SET(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake) \u8fd9\u65f6\u5019\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7 INCLUDE \u6307\u4ee4\u6765\u8c03\u7528\u81ea\u5df1\u7684\u6a21\u5757\u4e86\u3002 EXECUTABLE_OUTPUT_PATH \u548c LIBRARY_OUTPUT_PATH # \u5206\u522b\u7528\u6765\u91cd\u65b0\u5b9a\u4e49\u6700\u7ec8\u7ed3\u679c\u7684\u5b58\u653e\u76ee\u5f55 PROJECT_NAME # \u8fd4\u56de\u901a\u8fc7 PROJECT \u6307\u4ee4\u5b9a\u4e49\u7684\u9879\u76ee\u540d\u79f0 # 4.cmake \u8c03\u7528\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f MESSAGE ( STATUS \"HOME dir: $ENV {HOME}\" ) # \u4f7f\u7528$ENV{NAME}\u6307\u4ee4\u5c31\u53ef\u4ee5\u8c03\u7528\u7cfb\u7edf\u7684\u73af\u5883\u53d8\u91cf\u4e86\u3002 SET ( ENV { \u53d8\u91cf\u540d } \u503c ) # \u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u7684\u65b9\u5f0f # 1.CMAKE_INCLUDE_CURRENT_DIR:\u81ea\u52a8\u6dfb\u52a0 CMAKE_CURRENT_BINARY_DIR \u548c CMAKE_CURRENT_SOURCE_DIR \u5230\u5f53\u524d\u5904\u7406 \u7684 CMakeLists.txt\u3002\u76f8\u5f53\u4e8e\u5728\u6bcf\u4e2a CMakeLists.txt \u52a0\u5165\uff1a INCLUDE_DIRECTORIES ( ${ CMAKE_CURRENT_BINARY_DIR } ${ CMAKE_CURRENT_SOURCE_DIR } ) # 2.CMAKE_INCLUDE_DIRECTORIES_PROJECT_BEFORE:\u5c06\u5de5\u7a0b\u63d0\u4f9b\u7684\u5934\u6587\u4ef6\u76ee\u5f55\u59cb\u7ec8\u81f3\u4e8e\u7cfb\u7edf\u5934\u6587\u4ef6\u76ee\u5f55\u7684\u524d\u9762\uff0c\u5f53\u4f60\u5b9a\u4e49\u7684\u5934\u6587\u4ef6\u786e\u5b9e\u8ddf\u7cfb\u7edf\u53d1\u751f\u51b2\u7a81\u65f6\u53ef\u4ee5\u63d0\u4f9b\u4e00\u4e9b\u5e2e\u52a9\u3002 # 3.CMAKE_INCLUDE_PATH \u548c CMAKE_LIBRARY_PATH \u6211\u4eec\u5728\u4e0a\u4e00\u8282\u5df2\u7ecf\u63d0\u53ca\u3002 # 5.\u7cfb\u7edf\u4fe1\u606f 1 ,CMAKE_MAJOR_VERSION\uff0cCMAKE \u4e3b\u7248\u672c\u53f7\uff0c\u6bd4\u5982 2 .4.6 \u4e2d\u7684 2 2 ,CMAKE_MINOR_VERSION\uff0cCMAKE \u6b21\u7248\u672c\u53f7\uff0c\u6bd4\u5982 2 .4.6 \u4e2d\u7684 4 3 ,CMAKE_PATCH_VERSION\uff0cCMAKE \u8865\u4e01\u7b49\u7ea7\uff0c\u6bd4\u5982 2 .4.6 \u4e2d\u7684 6 4 ,CMAKE_SYSTEM\uff0c\u7cfb\u7edf\u540d\u79f0\uff0c\u6bd4\u5982 Linux-2.6.22 5 ,CMAKE_SYSTEM_NAME\uff0c\u4e0d\u5305\u542b\u7248\u672c\u7684\u7cfb\u7edf\u540d\uff0c\u6bd4\u5982 Linux 6 ,CMAKE_SYSTEM_VERSION\uff0c\u7cfb\u7edf\u7248\u672c\uff0c\u6bd4\u5982 2 .6.22 7 ,CMAKE_SYSTEM_PROCESSOR\uff0c\u5904\u7406\u5668\u540d\u79f0\uff0c\u6bd4\u5982 i686. 8 ,UNIX\uff0c\u5728\u6240\u6709\u7684\u7c7b UNIX \u5e73\u53f0\u4e3a TRUE\uff0c\u5305\u62ec OS X \u548c cygwin 9 ,WIN32\uff0c\u5728\u6240\u6709\u7684 win32 \u5e73\u53f0\u4e3a TRUE\uff0c\u5305\u62ec cygwin # 6:\u4e3b\u8981\u7684\u5f00\u5173\u9009\u9879 # 1\uff0cCMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS\uff0c\u7528\u6765\u63a7\u5236 IF ELSE \u8bed\u53e5\u7684\u4e66\u5199\u65b9\u5f0f # 2\uff0cBUILD_SHARED_LIBS,\u8fd9\u4e2a\u5f00\u5173\u7528\u6765\u63a7\u5236\u9ed8\u8ba4\u7684\u5e93\u7f16\u8bd1\u65b9\u5f0f\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u8bbe\u7f6e\uff0c\u4f7f\u7528 ADD_LIBRARY \u5e76\u6ca1\u6709\u6307\u5b9a\u5e93 \u7c7b\u578b\u7684\u60c5\u51b5\u4e0b\uff0c\u9ed8\u8ba4\u7f16\u8bd1\u751f\u6210\u7684\u5e93\u90fd\u662f\u9759\u6001\u5e93\u3002 \u5982\u679c SET(BUILD_SHARED_LIBS ON)\u540e\uff0c\u9ed8\u8ba4\u751f\u6210\u7684\u4e3a\u52a8\u6001\u5e93\u3002 # \uff13\uff0cCMAKE_C_FLAGS \u8bbe\u7f6e C \u7f16\u8bd1\u9009\u9879\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4 ADD_DEFINITIONS()\u6dfb\u52a0\u3002 # 4\uff0cCMAKE_CXX_FLAGS \u8bbe\u7f6e C++\u7f16\u8bd1\u9009\u9879\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u6307\u4ee4 ADD_DEFINITIONS()\u6dfb\u52a0\u3002 CMake\u57fa\u672c\u6307\u4ee4 # 1\uff0cADD_DEFINITIONS\uff0c\u5411 C/C++\u7f16\u8bd1\u5668\u6dfb\u52a0-D \u5b9a\u4e49\uff0c\u6bd4\u5982: ADD_DEFINITIONS ( -DENABLE_DEBUG -DABC ) # \u53c2\u6570\u4e4b\u95f4\u7528\u7a7a\u683c\u5206\u5272\u3002 \u5982\u679c\u4f60\u7684\u4ee3\u7801\u4e2d\u5b9a\u4e49\u4e86#ifdef ENABLE_DEBUG #endif\uff0c\u8fd9\u4e2a\u4ee3\u7801\u5757\u5c31\u4f1a\u751f\u6548\u3002\u5982\u679c\u8981\u6dfb\u52a0\u5176\u4ed6\u7684\u7f16\u8bd1\u5668\u5f00\u5173\uff0c\u53ef\u4ee5\u901a\u8fc7 CMAKE_C_FLAGS \u53d8\u91cf\u548c CMAKE_CXX_FLAGS \u53d8 \u91cf\u8bbe\u7f6e\u3002 # \uff12\uff0cADD_DEPENDENCIES\u5b9a\u4e49 target \u4f9d\u8d56\u7684\u5176\u4ed6target\uff0c\u786e\u4fdd\u5728\u7f16\u8bd1\u672ctarget\u4e4b\u524d\uff0c\u5176\u4ed6\u7684target\u5df2\u7ecf\u88ab\u6784\u5efa\u3002 ADD_DEPENDENCIES ( target-name depend-target1 depend-target2 ... ) # \uff13\uff0cADD_EXECUTABLE\u3001ADD_LIBRARY\u3001ADD_SUBDIRECTORY \u524d\u9762\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u4e86\uff0c\u8fd9\u91cc\u4e0d\u518d\u7f57\u5506\u3002 # \uff14\uff0cADD_TEST \u4e0e ENABLE_TESTING \u6307\u4ee4\u3002 ENABLE_TESTING \u6307\u4ee4\u7528\u6765\u63a7\u5236 Makefile \u662f\u5426\u6784\u5efa test \u76ee\u6807\uff0c\u6d89\u53ca\u5de5\u7a0b\u6240\u6709\u76ee\u5f55\u3002\u8bed \u6cd5\u5f88\u7b80\u5355\uff0c\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0cENABLE_TESTING()\uff0c\u4e00\u822c\u60c5\u51b5\u8fd9\u4e2a\u6307\u4ee4\u653e\u5728\u5de5\u7a0b\u7684\u4e3b CMakeLists.txt \u4e2d.ADD_TEST \u6307\u4ee4\u7684\u8bed\u6cd5\u662f: ADD_TEST ( testname # testname \u662f\u81ea\u5b9a\u4e49\u7684 test \u540d\u79f0 Exename arg1 arg2 ... ) # Exename \u53ef\u4ee5\u662f\u6784\u5efa\u7684\u76ee\u6807\u6587\u4ef6\u4e5f\u53ef\u4ee5\u662f\u5916\u90e8\u811a\u672c\u7b49 \u7b49\u3002\u540e\u9762\u8fde\u63a5\u4f20\u9012\u7ed9\u53ef\u6267\u884c\u6587\u4ef6\u7684\u53c2\u6570 # \u5982\u679c\u6ca1\u6709\u5728\u540c\u4e00\u4e2a CMakeLists.txt \u4e2d\u6253\u5f00 ENABLE_TESTING()\u6307\u4ee4\uff0c\u4efb\u4f55 ADD_TEST \u90fd\u662f\u65e0\u6548\u7684\u3002\u6bd4\u5982\u6211\u4eec\u524d\u9762\u7684 Helloworld \u4f8b\u5b50\uff0c\u53ef\u4ee5\u5728\u5de5\u7a0b\u4e3b CMakeLists.txt \u4e2d\u6dfb\u52a0 ADD_TEST ( mytest ${ PROJECT_BINARY_DIR } /bin/main ) ENABLE_TESTING () # \u751f\u6210 Makefile \u540e\uff0c\u5c31\u53ef\u4ee5\u8fd0\u884c make test \u6765\u6267\u884c\u6d4b\u8bd5\u4e86\u3002 # \uff15\uff0cAUX_SOURCE_DIRECTORY \u57fa\u672c\u8bed\u6cd5\u662f\uff1a AUX_SOURCE_DIRECTORY ( dir VARIABLE ) # \u4f5c\u7528\u662f\u53d1\u73b0\u4e00\u4e2a\u76ee\u5f55\u4e0b\u6240\u6709\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\u5e76\u5c06\u5217\u8868\u5b58\u50a8\u5728\u4e00\u4e2a\u53d8\u91cf\u4e2d\uff0c\u8fd9\u4e2a\u6307\u4ee4\u4e34\u65f6\u88ab\u7528\u6765 \u81ea\u52a8\u6784\u5efa\u6e90\u6587\u4ef6\u5217\u8868\u3002\u56e0\u4e3a\u76ee\u524d cmake \u8fd8\u4e0d\u80fd\u81ea\u52a8\u53d1\u73b0\u65b0\u6dfb\u52a0\u7684\u6e90\u6587\u4ef6\u3002 \u6bd4\u5982 AUX_SOURCE_DIRECTORY ( . SRC_LIST ) ADD_EXECUTABLE ( main ${ SRC_LIST } ) # \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7\u540e\u9762\u63d0\u5230\u7684 FOREACH \u6307\u4ee4\u6765\u5904\u7406\u8fd9\u4e2a LIST # 6\uff0cCMAKE_MINIMUM_REQUIRED \u5176\u8bed\u6cd5\u4e3a CMAKE_MINIMUM_REQUIRED ( VERSION versionNumber [ FATAL_ERROR ]) # \u6bd4\u5982 CMAKE_MINIMUM_REQUIRED ( VERSION 2 .5 FATAL_ERROR ) # \u5982\u679c cmake \u7248\u672c\u5c0f\u4e0e 2.5\uff0c\u5219\u51fa\u73b0\u4e25\u91cd\u9519\u8bef\uff0c\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u6b62\u3002 # 7\uff0cEXEC_PROGRAM \u5728 CMakeLists.txt \u5904\u7406\u8fc7\u7a0b\u4e2d\u6267\u884c\u547d\u4ee4\uff0c\u5e76\u4e0d\u4f1a\u5728\u751f\u6210\u7684 Makefile \u4e2d\u6267\u884c\u3002\u5177\u4f53\u8bed\u6cd5 \u4e3a\uff1a EXEC_PROGRAM ( Executable [ directory in which to run ] [ ARGS <arguments to executable> ] [ OUTPUT_VARIABLE <var> ] [ RETURN_VALUE <var> ]) # \u7528\u4e8e\u5728\u6307\u5b9a\u7684\u76ee\u5f55\u8fd0\u884c\u67d0\u4e2a\u7a0b\u5e8f\uff0c\u901a\u8fc7 ARGS \u6dfb\u52a0\u53c2\u6570\uff0c\u5982\u679c\u8981\u83b7\u53d6\u8f93\u51fa\u548c\u8fd4\u56de\u503c\uff0c\u53ef\u901a\u8fc7 OUTPUT_VARIABLE \u548c RETURN_VALUE \u5206\u522b\u5b9a\u4e49\u4e24\u4e2a\u53d8\u91cf.\u8fd9\u4e2a\u6307\u4ee4\u53ef\u4ee5\u5e2e\u52a9\u4f60\u5728 CMakeLists.txt \u5904\u7406\u8fc7\u7a0b\u4e2d\u652f\u6301\u4efb\u4f55\u547d\u4ee4\uff0c\u6bd4\u5982\u6839\u636e\u7cfb\u7edf\u60c5\u51b5\u53bb \u4fee\u6539\u4ee3\u7801\u6587\u4ef6\u7b49\u7b49\u3002 \u4e3e\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u6211\u4eec\u8981\u5728 src \u76ee\u5f55\u6267\u884c ls \u547d\u4ee4\uff0c\u5e76\u628a\u7ed3\u679c\u548c\u8fd4\u56de\u503c\u5b58\u4e0b\u6765\u3002\u53ef\u4ee5\u76f4\u63a5\u5728 src/CMakeLists.txt \u4e2d\u6dfb\u52a0\uff1a EXEC_PROGRAM ( ls ARGS \"*.c\" OUTPUT_VARIABLE LS_OUTPUT RETURN_VALUE LS_RVALUE ) IF ( not LS_RVALUE ) MESSAGE ( STATUS \"ls result: \" ${ LS_OUTPUT } ) ENDIF ( not LS_RVALUE ) # \u5728 cmake \u751f\u6210 Makefile \u7684\u8fc7\u7a0b\u4e2d\uff0c\u5c31\u4f1a\u6267\u884c ls \u547d\u4ee4\uff0c\u5982\u679c\u8fd4\u56de 0\uff0c\u5219\u8bf4\u660e\u6210\u529f\u6267\u884c\uff0c \u90a3\u4e48\u5c31\u8f93\u51fa ls *.c \u7684\u7ed3\u679c\u3002\u5173\u4e8e IF \u8bed\u53e5\uff0c\u540e\u9762\u7684\u63a7\u5236\u6307\u4ee4\u4f1a\u63d0\u5230\u3002 # 8\uff0cFILE \u6307\u4ee4 \u6587\u4ef6\u64cd\u4f5c\u6307\u4ee4\uff0c\u57fa\u672c\u8bed\u6cd5\u4e3a: FILE ( WRITE filename \"message to write\" ... ) FILE ( APPEND filename \"message to write\" ... ) FILE ( READ filename variable ) FILE ( GLOB variable [ RELATIVE path ] [ globbing expressions ] ... ) FILE ( GLOB_RECURSE variable [ RELATIVE path ] [ globbing expressions ] ... ) FILE ( REMOVE [ directory ] ... ) FILE ( REMOVE_RECURSE [ directory ] ... ) FILE ( MAKE_DIRECTORY [ directory ] ... ) FILE ( RELATIVE_PATH variable directory file ) FILE ( TO_CMAKE_PATH path result ) FILE ( TO_NATIVE_PATH path result ) # 9\uff0cINCLUDE \u6307\u4ee4\uff0c\u7528\u6765\u8f7d\u5165 CMakeLists.txt \u6587\u4ef6\uff0c\u4e5f\u7528\u4e8e\u8f7d\u5165\u9884\u5b9a\u4e49\u7684 cmake \u6a21\u5757. INCLUDE ( file1 [ OPTIONAL ]) INCLUDE ( module [ OPTIONAL ]) # OPTIONAL\u53c2\u6570\u7684\u4f5c\u7528\u662f\u6587\u4ef6\u4e0d\u5b58\u5728\u4e5f\u4e0d\u4f1a\u4ea7\u751f\u9519\u8bef\u3002 \u4f60\u53ef\u4ee5\u6307\u5b9a\u8f7d\u5165\u4e00\u4e2a\u6587\u4ef6\uff0c\u5982\u679c\u5b9a\u4e49\u7684\u662f\u4e00\u4e2a\u6a21\u5757\uff0c\u90a3\u4e48\u5c06\u5728 CMAKE_MODULE_PATH \u4e2d\u641c \u7d22\u8fd9\u4e2a\u6a21\u5757\u5e76\u8f7d\u5165\u3002\u8f7d\u5165\u7684\u5185\u5bb9\u5c06\u5728\u5904\u7406\u5230 INCLUDE \u8bed\u53e5\u662f\u76f4\u63a5\u6267\u884c\u3002 FIND_\u6307\u4ee4 FIND_FILE ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u4ee3\u8868\u627e\u5230\u7684\u6587\u4ef6\u5168\u8def\u5f84\uff0c\u5305\u542b\u6587\u4ef6\u540d FIND_LIBRARY ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u8868\u793a\u627e\u5230\u7684\u5e93\u5168\u8def\u5f84\uff0c\u5305\u542b\u5e93\u6587\u4ef6\u540d FIND_PATH ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u4ee3\u8868\u5305\u542b\u8fd9\u4e2a\u6587\u4ef6\u7684\u8def\u5f84\u3002 FIND_PROGRAM ( <VAR> name1 path1 path2 ... ) # VAR \u53d8\u91cf\u4ee3\u8868\u5305\u542b\u8fd9\u4e2a\u7a0b\u5e8f\u7684\u5168\u8def\u5f84\u3002 FIND_PACKAGE ( <name> [ major.minor ] [ QUIET ] [ NO_MODULE ] [[ REQUIRED | COMPONENTS ] [ componets... ]]) # \u7528\u6765\u8c03\u7528\u9884\u5b9a\u4e49\u5728 CMAKE_MODULE_PATH \u4e0b\u7684 Find<name>.cmake \u6a21\u5757\uff0c\u4f60\u4e5f\u53ef\u4ee5\u81ea\u5df1 \u5b9a\u4e49 Find<name>\u6a21\u5757\uff0c\u901a\u8fc7 SET(CMAKE_MODULE_PATH dir)\u5c06\u5176\u653e\u5165\u5de5\u7a0b\u7684\u67d0\u4e2a\u76ee\u5f55 \u4e2d\u4f9b\u5de5\u7a0b\u4f7f\u7528\uff0c\u6211\u4eec\u5728\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u8be6\u7ec6\u4ecb\u7ecd FIND_PACKAGE \u7684\u4f7f\u7528\u65b9\u6cd5\u548c Find \u6a21\u5757\u7684 \u7f16\u5199\u3002 FIND_LIBRARY \u793a\u4f8b\uff1a FIND_LIBRARY ( libX X11 /usr/lib ) IF ( NOT libX ) MESSAGE ( FATAL_ERROR \u201clibX not found\u201d ) ENDIF ( NOT libX ) \u63a7\u5236\u6307\u4ee4 # 1,IF \u6307\u4ee4,\u53e6\u5916\u4e00\u4e2a\u6307\u4ee4\u662f ELSEIF\uff0c\u603b\u4f53\u628a\u63e1\u4e00\u4e2a\u539f\u5219\uff0c\u51e1\u662f\u51fa\u73b0 IF \u7684\u5730\u65b9\u4e00\u5b9a\u8981\u6709\u5bf9\u5e94\u7684 ENDIF.\u51fa\u73b0 ELSEIF \u7684\u5730\u65b9\uff0cENDIF \u662f\u53ef\u9009\u7684\u3002\u57fa\u672c\u8bed\u6cd5\u4e3a\uff1a IF ( expression ) # THEN section. COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ELSE ( expression ) # ELSE section. COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ENDIF ( expression ) # \u8868\u8fbe\u5f0f\u7684\u4f7f\u7528\u65b9\u6cd5 IF ( var ) # \u5982\u679c\u53d8\u91cf\u4e0d\u662f\uff1a\u7a7a\uff0c0\uff0cN, NO, OFF, FALSE, NOTFOUND \u6216 <var>_NOTFOUND \u65f6\uff0c\u8868\u8fbe\u5f0f\u4e3a\u771f\u3002 IF ( NOT var ) # \u4e0e\u4e0a\u8ff0\u6761\u4ef6\u76f8\u53cd\u3002 IF ( var1 AND var2 ) # \u5f53\u4e24\u4e2a\u53d8\u91cf\u90fd\u4e3a\u771f\u662f\u4e3a\u771f\u3002 IF ( var1 OR var2 ) # \u5f53\u4e24\u4e2a\u53d8\u91cf\u5176\u4e2d\u4e00\u4e2a\u4e3a\u771f\u65f6\u4e3a\u771f\u3002 IF ( COMMAND cmd ) # \u5f53\u7ed9\u5b9a\u7684 cmd \u786e\u5b9e\u662f\u547d\u4ee4\u5e76\u53ef\u4ee5\u8c03\u7528\u662f\u4e3a\u771f\u3002 IF ( EXISTS dir ) \u6216\u8005 IF ( EXISTS file ) # \u5f53\u76ee\u5f55\u540d\u6216\u8005\u6587\u4ef6\u540d\u5b58\u5728\u65f6\u4e3a\u771f\u3002 IF ( file1 IS_NEWER_THAN file2 ) # \u5f53 file1 \u6bd4 file2 \u65b0\uff0c\u6216\u8005 file1/file2 \u5176 \u4e2d\u6709\u4e00\u4e2a\u4e0d\u5b58\u5728\u65f6\u4e3a\u771f\uff0c\u6587\u4ef6\u540d\u8bf7\u4f7f\u7528\u5b8c\u6574\u8def\u5f84\u3002 IF ( IS_DIRECTORY dirname ) # \u5f53 dirname \u662f\u76ee\u5f55\u65f6\uff0c\u4e3a\u771f\u3002 IF ( variable MATCHES regex ) IF ( string MATCHES regex ) # \u5f53\u7ed9\u5b9a\u7684\u53d8\u91cf\u6216\u8005\u5b57\u7b26\u4e32\u80fd\u591f\u5339\u914d\u6b63\u5219\u8868\u8fbe\u5f0f regex \u65f6\u4e3a\u771f\u3002\u6bd4\u5982\uff1a IF ( \"hello\" MATCHES \"ell\" ) MESSAGE ( \"true\" ) ENDIF ( \"hello\" MATCHES \"ell\" ) # \u6570\u5b57\u6bd4\u8f83\u8868\u8fbe\u5f0f IF ( variable LESS number ) IF ( string LESS number ) IF ( variable GREATER number ) IF ( string GREATER number ) IF ( variable EQUAL number ) IF ( string EQUAL number ) # \u6309\u7167\u5b57\u6bcd\u5e8f\u7684\u6392\u5217\u8fdb\u884c\u6bd4\u8f83. IF ( variable STRLESS string ) IF ( string STRLESS string ) IF ( variable STRGREATER string ) IF ( string STRGREATER string ) IF ( variable STREQUAL string ) IF ( string STREQUAL string ) IF ( DEFINED variable ) # \u5982\u679c\u53d8\u91cf\u88ab\u5b9a\u4e49\uff0c\u4e3a\u771f\u3002 # \u4e00\u4e2a\u5c0f\u4f8b\u5b50\uff0c\u7528\u6765\u5224\u65ad\u5e73\u53f0\u5dee\u5f02\uff1a I F ( WIN32 ) MESSAGE ( STATUS \u201cThis is windows.\u201d ) #\u4f5c\u4e00\u4e9b Windows \u76f8\u5173\u7684\u64cd\u4f5c ELSE ( WIN32 ) MESSAGE ( STATUS \u201cThis is not windows\u201d ) #\u4f5c\u4e00\u4e9b\u975e Windows \u76f8\u5173\u7684\u64cd\u4f5c ENDIF ( WIN32 ) #\u4e0a\u8ff0\u4ee3\u7801\u7528\u6765\u63a7\u5236\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u8fdb\u884c\u4e0d\u540c\u7684\u63a7\u5236\uff0c\u4f46\u662f\uff0c\u9605\u8bfb\u8d77\u6765\u5374\u5e76\u4e0d\u662f\u90a3\u4e48\u8212\u670d\uff0c ELSE(WIN32)\u4e4b\u7c7b\u7684\u8bed\u53e5\u5f88\u5bb9\u6613\u5f15\u8d77\u6b67\u4e49\u3002 # \u8fd9\u5c31\u7528\u5230\u4e86\u6211\u4eec\u5728\u201c\u5e38\u7528\u53d8\u91cf\u201d\u4e00\u8282\u63d0\u5230\u7684 CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS \u5f00\u5173\u3002 \u53ef\u4ee5 SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS ON) \u8fd9\u65f6\u5019\u5c31\u53ef\u4ee5\u5199\u6210: IF ( WIN32 ) ELSE () ENDIF () # \u5982\u679c\u914d\u5408 ELSEIF \u4f7f\u7528\uff0c\u53ef\u80fd\u7684\u5199\u6cd5\u662f\u8fd9\u6837: IF ( WIN32 ) #do something related to WIN32 ELSEIF ( UNIX ) #do something related to UNIX ELSEIF ( APPLE ) #do something related to APPLE ENDIF(WIN32) # 2.WHELE\u6307\u4ee4\uff0c\u5176\u771f\u5047\u5224\u65ad\u6761\u4ef6\u53ef\u4ee5\u53c2\u8003 IF \u6307\u4ee4\u3002 WHILE ( condition ) COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ENDWHILE ( condition ) # 3.FOREACH\u6307\u4ee4\uff0c\u4e09\u79cd\u5f62\u5f0f # 1.\u5217\u8868 FOREACH ( loop_var arg1 arg2 ... ) COMMAND1 ( ARGS ... ) COMMAND2 ( ARGS ... ) ... ENDFOREACH ( loop_var ) # \u50cf\u6211\u4eec\u524d\u9762\u4f7f\u7528\u7684 AUX_SOURCE_DIRECTORY \u7684\u4f8b\u5b50 AUX_SOURCE_DIRECTORY ( . SRC_LIST ) FOREACH ( F ${ SRC_LIST } ) MESSAGE ( ${ F } ) ENDFOREACH ( F ) # 2.\u8303\u56f4 FOREACH ( loop_var RANGE total ) ENDFOREACH ( loop_var ) # \u4e3e\u4f8b\u5b50:\u4ece 0 \u5230 total \u4ee5\uff11\u4e3a\u6b65\u8fdb FOREACH ( VAR RANGE 10 ) MESSAGE ( ${ VAR } ) ENDFOREACH ( VAR ) # 3.\u8303\u56f4\u548c\u6b65\u8fdb FOREACH ( loop_var RANGE start stop [ step ]) ENDFOREACH ( loop_var ) # \u4ece start \u5f00\u59cb\u5230 stop \u7ed3\u675f\uff0c\u4ee5 step \u4e3a\u6b65\u8fdb\uff0c \u4e3e\u4f8b\u5982\u4e0b FOREACH ( A RANGE 5 15 3 ) MESSAGE ( ${ A } ) ENDFOREACH ( A ) # 5 8 11 14 # \u8fd9\u4e2a\u6307\u4ee4\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u76f4\u5230\u9047\u5230 ENDFOREACH \u6307\u4ee4\uff0c\u6574\u4e2a\u8bed\u53e5\u5757\u624d\u4f1a\u5f97\u5230\u771f\u6b63\u7684\u6267\u884c\u3002 Find_PACKAGE FIND_PACKAGE ( <name> [ major.minor ] [ QUIET ] # QUIET \u53c2\u6570\uff0c\u5bf9\u5e94\u4e0e\u6211\u4eec\u7f16\u5199\u7684 FindHELLO \u4e2d\u7684 HELLO_FIND_QUIETLY\uff0c\u5982\u679c\u4e0d\u6307\u5b9a \u8fd9\u4e2a\u53c2\u6570\uff0c\u5c31\u4f1a\u6267\u884c\uff1a MESSAGE(STATUS \"Found Hello: ${HELLO_LIBRARY}\") [ NO_MODULE ] [[ REQUIRED | COMPONENTS ] [ componets... ]]) # REQUIRED \u53c2\u6570\uff0c\u5176\u542b\u4e49\u662f\u6307\u8fd9\u4e2a\u5171\u4eab\u5e93\u662f\u5426\u662f\u5de5\u7a0b\u5fc5\u987b\u7684\uff0c\u5982\u679c\u4f7f\u7528\u4e86\u8fd9\u4e2a\u53c2\u6570\uff0c\u8bf4\u660e\u8fd9 \u4e2a\u94fe\u63a5\u5e93\u662f\u5fc5\u5907\u5e93\uff0c\u5982\u679c\u627e\u4e0d\u5230\u8fd9\u4e2a\u94fe\u63a5\u5e93\uff0c\u5219\u5de5\u7a0b\u4e0d\u80fd\u7f16\u8bd1\u3002 -src | -main.c # \u91cc\u9762\u5305\u542b\u4e86\u4e00\u4e2ainclude <curl/curl.h> | -CMakeLists.txt -CMakeLists.txt # \u5efa\u7acb\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakeLists.txt PROJECT ( CURLTEST ) ADD_SUBDIRECTORY ( src ) # \u5efa\u7acb src/CMakeLists.txt ADD_EXECUTABLE ( curltest main.c ) # \u73b0\u5728\u81ea\u7136\u662f\u6ca1\u529e\u6cd5\u7f16\u8bd1\u7684\uff0c\u6211\u4eec\u9700\u8981\u6dfb\u52a0 curl \u7684\u5934\u6587\u4ef6\u8def\u5f84\u548c\u5e93\u6587\u4ef6\u3002 # \u65b9\u6cd51\uff1a\u76f4\u63a5\u901a\u8fc7 INCLUDE_DIRECTORIES \u548c TARGET_LINK_LIBRARIES \u6307\u4ee4\u6dfb\u52a0\uff1a \u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 src/CMakeLists.txt \u4e2d\u6dfb\u52a0\uff1a INCLUDE_DIRECTORIES ( /usr/include ) TARGET_LINK_LIBRARIES ( curltest curl ) # \u7136\u540e\u5efa\u7acb build \u76ee\u5f55\u8fdb\u884c\u5916\u90e8\u6784\u5efa\u5373\u53ef\u3002 # \u65b9\u6cd52:\u4f7f\u7528 FindCURL \u6a21\u5757\u3002\u5411 src/CMakeLists.txt \u4e2d\u6dfb\u52a0\uff1a FIND_PACKAGE ( CURL ) IF ( CURL_FOUND ) INCLUDE_DIRECTORIES ( ${ CURL_INCLUDE_DIR } ) TARGET_LINK_LIBRARIES ( curltest ${ CURL_LIBRARY } ) # \u5728\u4f7f\u7528opencv\u65f6\uff0c\u7528${OpenCV_LIBRARIES}\u901a\u8fc7\u4e86 ELSE ( CURL_FOUND ) MESSAGE ( FATAL_ERROR \u201dCURL library not found\u201d ) ENDIF ( CURL_FOUND ) # \u5bf9\u4e8e\u7cfb\u7edf\u9884\u5b9a\u4e49\u7684 Find<name>.cmake \u6a21\u5757\uff0c\u4f7f\u7528\u65b9\u6cd5\u4e00\u822c\u5982\u4e0a\u4f8b\u6240\u793a\uff1a \u6bcf\u4e00\u4e2a\u6a21\u5757\u90fd\u4f1a\u5b9a\u4e49\u4ee5\u4e0b\u51e0\u4e2a\u53d8\u91cf <name>_FOUND # \u5224\u65ad\u6a21\u5757\u662f\u5426\u88ab\u627e\u5230\uff0c\u5982\u679c\u6ca1\u6709\u627e\u5230\uff0c\u6309\u7167\u5de5\u7a0b\u7684\u9700\u8981\u5173\u95ed \u67d0\u4e9b\u7279\u6027\u3001\u7ed9\u51fa\u63d0\u9192\u6216\u8005\u4e2d\u6b62\u7f16\u8bd1\uff0c\u4e0a\u9762\u7684\u4f8b\u5b50\u5c31\u662f\u62a5\u51fa\u81f4\u547d\u9519\u8bef\u5e76\u7ec8\u6b62\u6784\u5efa\u3002 <name>_INCLUDE_DIR or <name>_INCLUDES <name>_LIBRARY or <name>_LIBRARIES # \u5982\u679c<name>_FOUND \u4e3a\u771f\uff0c\u5219\u5c06<name>_INCLUDE_DIR \u52a0\u5165 INCLUDE_DIRECTORIES\uff0c \u5c06<name>_LIBRARY \u52a0\u5165 TARGET_LINK_LIBRARIES \u4e2d\u3002 # \u4e3e\u4f8b\u5b50\uff0c\u901a\u8fc7<name>_FOUND \u6765\u63a7\u5236\u5de5\u7a0b\u7279\u6027\uff1a SET ( mySources viewer.c ) SET ( optionalSources ) SET ( optionalLibs ) FIND_PACKAGE ( JPEG ) IF ( JPEG_FOUND ) SET ( optionalSources ${ optionalSources } jpegview.c ) INCLUDE_DIRECTORIES ( ${ JPEG_INCLUDE_DIR } ) SET ( optionalLibs ${ optionalLibs } ${ JPEG_LIBRARIES } ) ADD_DEFINITIONS ( -DENABLE_JPEG_SUPPORT ) ENDIF ( JPEG_FOUND ) IF ( PNG_FOUND ) SET ( optionalSources ${ optionalSources } pngview.c ) INCLUDE_DIRECTORIES ( ${ PNG_INCLUDE_DIR } ) SET ( optionalLibs ${ optionalLibs } ${ PNG_LIBRARIES } ) ADD_DEFINITIONS ( -DENABLE_PNG_SUPPORT ) ENDIF ( PNG_FOUND ) ADD_EXECUTABLE ( viewer ${ mySources } ${ optionalSources } ) TARGET_LINK_LIBRARIES ( viewer ${ optionalLibs } # \u901a\u8fc7\u5224\u65ad\u7cfb\u7edf\u662f\u5426\u63d0\u4f9b\u4e86 JPEG \u5e93\u6765\u51b3\u5b9a\u7a0b\u5e8f\u662f\u5426\u652f\u6301 JPEG \u529f\u80fd\u3002 \u81ea\u5b9a\u4e49 FindHELLO \u6a21\u5757\u5e76\u4f7f\u7528\u8fd9\u4e2a\u6a21\u5757\u6784\u5efa\u5de5\u7a0b -cmake # \u5efa\u7acb cmake \u76ee\u5f55\u7528\u4e8e\u5b58\u653e\u6211\u4eec\u81ea\u5df1 \u5b9a\u4e49\u7684 FindHELLO.cmake \u6a21\u5757 | -FindHELLO.cmake -src# \u7528\u4e8e\u5efa\u7acbsrc\u76ee\u5f55\uff0c\u7528\u4e8e\u5b58\u653e\u6211\u4eec\u7684\u6e90\u6587\u4ef6 | -main.c | -CMakeLists.txt -CMakeLists.txt # \u5b9a\u4e49 cmake/FindHELLO.cmake \u6a21\u5757 FIND_PATH ( HELLO_INCLUDE_DIR hello.h /usr/include/hello /usr/local/include/hello ) FIND_LIBRARY ( HELLO_LIBRARY NAMES hello PATH /usr/lib /usr/local/lib ) IF ( HELLO_INCLUDE_DIR AND HELLO_LIBRARY ) SET ( HELLO_FOUND TRUE ) ENDIF ( HELLO_INCLUDE_DIR AND HELLO_LIBRARY ) IF ( HELLO_FOUND ) IF ( NOT HELLO_FIND_QUIETLY ) MESSAGE ( STATUS \"Found Hello: ${ HELLO_LIBRARY } \" ) ENDIF ( NOT HELLO_FIND_QUIETLY ) ELSE ( HELLO_FOUND ) IF ( HELLO_FIND_REQUIRED ) # HELLO_FIND_REQUIRED\u5bf9\u5e94\u4e8eFIND_PACKAGE\u7684REQUIRED\u53c2\u6570 MESSAGE ( FATAL_ERROR \"Could not find hello library\" ) ENDIF ( HELLO_FIND_REQUIRED ) ENDIF ( HELLO_FOUND ) # HELLO_FOUND, HELLO_INCLUDE_DIR,HELLO_LIBRARY \u53d8\u91cf\u4f9b\u5f00\u53d1\u8005\u5728 FIND_PACKAGE \u6307\u4ee4\u4e2d\u4f7f\u7528 # src/man.c #include <hello.h> int main () { HelloFunc () ; return 0 ; } # \u5efa\u7acb src/CMakeLists.txt \u6587\u4ef6 FIND_PACKAGE ( HELLO ) IF ( HELLO_FOUND ) ADD_EXECUTABLE ( hello main.c ) INCLUDE_DIRECTORIES ( ${ HELLO_INCLUDE_DIR } ) TARGET_LINK_LIBRARIES ( hello ${ HELLO_LIBRARY } ) ENDIF ( HELLO_FOUND ) # \u4e3a\u4e86\u80fd\u591f\u8ba9\u5de5\u7a0b\u627e\u5230 FindHELLO.cmake \u6a21\u5757(\u5b58\u653e\u5728\u5de5\u7a0b\u4e2d\u7684 cmake \u76ee\u5f55) \u6211\u4eec\u5728\u4e3b\u5de5\u7a0b\u6587\u4ef6 CMakeLists.txt \u4e2d\u52a0\u5165\uff1a SET ( CMAKE_MODULE_PATH ${ PROJECT_SOURCE_DIR } /cmake ) # \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 FindHELLO \u6a21\u5757\u6784\u5efa\u5de5\u7a0b mkdir build && cd build cmake .. # \u8f93\u51fa:Found Hello: /usr/lib/libhello.so # \u5982\u679c\u6211\u4eec\u628a\u4e0a\u9762\u7684 FIND_PACKAGE(HELLO)\u4fee\u6539\u4e3a FIND_PACKAGE(HELLO QUIET),\u5219 \u4e0d\u4f1a\u770b\u5230\u4e0a\u9762\u7684\u8f93\u51fa\u3002 make ./src/hello # \u8f93\u51faHello World # \u5982\u679c\u6ca1\u6709\u627e\u5230 hello library \u5462 # \u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5c06/usr/lib/libhello.x \u79fb\u52a8\u5230/tmp \u76ee\u5f55\uff0c\u8fd9\u6837\uff0c\u6309\u7167 FindHELLO \u6a21\u5757 \u7684\u5b9a\u4e49\uff0c\u5c31\u627e\u4e0d\u5230 hello library \u4e86\uff0c\u6211\u4eec\u518d\u6765\u770b\u4e00\u4e0b\u6784\u5efa\u7ed3\u679c\uff1a cmake ..# \u4ecd\u7136\u53ef\u4ee5\u6210\u529f\u8fdb\u884c\u6784\u5efa\uff0c\u4f46\u662f\u8fd9\u65f6\u5019\u662f\u6ca1\u6709\u529e\u6cd5\u7f16\u8bd1\u7684\u3002 # \u4fee\u6539 FIND_PACKAGE(HELLO)\u4e3a FIND_PACKAGE(HELLO REQUIRED)\uff0c\u5c06 hello library \u5b9a\u4e49\u4e3a\u5de5\u7a0b\u5fc5\u987b\u7684\u5171\u4eab\u5e93\u3002 \u8fd9\u65f6\u5019\u518d\u6b21\u8fd0\u884c cmake .. # \u6211\u4eec\u5f97\u5230\u5982\u4e0b\u8f93\u51fa\uff1a CMake Error: Could not find hello library.\u56e0\u4e3a\u627e\u4e0d\u5230 libhello.x\uff0c\u6240\u4ee5\uff0c\u6574\u4e2a Makefile \u751f\u6210\u8fc7\u7a0b\u88ab\u51fa\u9519\u4e2d\u6b62\u3002 \u52a8\u6001\u5e93\u548c\u9759\u6001\u5e93\u7684\u533a\u522b \u5e93\u662f\u5199\u597d\u7684\u73b0\u6709\u7684\uff0c\u6210\u719f\u7684\uff0c\u53ef\u4ee5\u590d\u7528\u7684\u4ee3\u7801\u3002 \u73b0\u5b9e\u4e2d\u6bcf\u4e2a\u7a0b\u5e8f\u90fd\u8981\u4f9d\u8d56\u5f88\u591a\u57fa\u7840\u7684\u5e95\u5c42\u5e93\uff0c\u4e0d\u53ef\u80fd\u6bcf\u4e2a\u4eba\u7684\u4ee3\u7801\u90fd\u4ece\u96f6\u5f00\u59cb\uff0c\u56e0\u6b64\u5e93\u7684\u5b58\u5728\u610f\u4e49\u975e\u540c\u5bfb\u5e38 \u3002\u672c\u8d28\u4e0a\u6765\u8bf4\u5e93\u662f\u4e00\u79cd\u53ef\u6267\u884c\u4ee3\u7801\u7684\u4e8c\u8fdb\u5236\u5f62\u5f0f\uff0c\u53ef\u4ee5\u88ab\u64cd\u4f5c\u7cfb\u7edf\u8f7d\u5165\u5185\u5b58\u6267\u884c\u3002\u5e93\u6709\u4e24\u79cd\uff1a\u9759\u6001\u5e93\uff08.a\u3001.lib\uff09\u548c\u52a8\u6001\u5e93\uff08.so\u3001.dll\uff09\u3002 \u9759\u6001\u5e93 \uff1a\u5728\u94fe\u63a5\u9636\u6bb5\uff0c\u4f1a\u5c06\u6c47\u7f16\u751f\u6210\u7684\u76ee\u6807\u6587\u4ef6.o\u4e0e\u5f15\u7528\u5230\u7684\u5e93\u4e00\u8d77\u94fe\u63a5\u6253\u5305\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u3002\u56e0\u6b64\u5bf9\u5e94\u7684\u94fe\u63a5\u65b9\u5f0f\u79f0\u4e3a\u9759\u6001\u94fe\u63a5\u3002\u5176\u5b9e\u4e00\u4e2a\u9759\u6001\u5e93\u53ef\u4ee5\u7b80\u5355\u770b\u6210\u662f**\u4e00\u7ec4\u76ee\u6807\u6587\u4ef6\uff08.o/.obj\u6587\u4ef6\uff09\u7684\u96c6\u5408**\uff0c\u5373\u5f88\u591a\u76ee\u6807\u6587\u4ef6\u7ecf\u8fc7\u538b\u7f29\u6253\u5305\u540e\u5f62\u6210\u7684\u4e00\u4e2a\u6587\u4ef6\u3002\u9759\u6001\u5e93\u7279\u70b9\u603b\u7ed3\uff1a \u9759\u6001\u5e93\u5bf9\u51fd\u6570\u5e93\u7684\u94fe\u63a5\u662f\u653e\u5728**\u7f16\u8bd1\u65f6\u671f**\u5b8c\u6210\u7684\u3002 \u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u4e0e\u51fd\u6570\u5e93\u518d\u65e0\u74dc\u845b\uff0c\u79fb\u690d\u65b9\u4fbf\u3002 \u6d6a\u8d39\u7a7a\u95f4\u548c\u8d44\u6e90\uff0c\u56e0\u4e3a\u6240\u6709\u76f8\u5173\u7684\u76ee\u6807\u6587\u4ef6\u4e0e\u7275\u6d89\u5230\u7684\u51fd\u6570\u5e93\u88ab\u94fe\u63a5\u5408\u6210\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6\u3002 \u9759\u6001\u5e93\u7f3a\u70b9\uff1a \u7a7a\u95f4\u6d6a\u8d39\u662f\u9759\u6001\u5e93\u7684\u4e00\u4e2a\u95ee\u9898 \u53e6\u4e00\u4e2a\u95ee\u9898\u662f\u9759\u6001\u5e93\u5bf9\u7a0b\u5e8f\u7684\u66f4\u65b0\u3001\u90e8\u7f72\u548c\u53d1\u5e03\u9875\u4f1a\u5e26\u6765\u9ebb\u70e6\u3002\u5982\u679c\u9759\u6001\u5e93liba.lib\u66f4\u65b0\u4e86\uff0c\u6240\u4ee5\u4f7f\u7528\u5b83\u7684\u5e94\u7528\u7a0b\u5e8f\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\u3001\u53d1\u5e03\u7ed9\u7528\u6237\uff08\u5bf9\u4e8e\u73a9\u5bb6\u6765\u8bf4\uff0c\u53ef\u80fd\u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u6539\u52a8\uff0c\u5374\u5bfc\u81f4\u6574\u4e2a\u7a0b\u5e8f\u91cd\u65b0\u4e0b\u8f7d\uff0c \u5168\u91cf\u66f4\u65b0 \uff09 \u52a8\u6001\u5e93 \uff1a\u52a8\u6001\u5e93\u5728\u7a0b\u5e8f\u7f16\u8bd1\u65f6\u5e76\u4e0d\u4f1a\u88ab\u8fde\u63a5\u5230\u76ee\u6807\u4ee3\u7801\u4e2d\uff0c\u800c\u662f\u5728\u7a0b\u5e8f\u8fd0\u884c\u65f6\u624d\u88ab\u8f7d\u5165\u3002 \u4e0d\u540c\u7684\u5e94\u7528\u7a0b\u5e8f\u5982\u679c\u8c03\u7528\u76f8\u540c\u7684\u5e93\uff0c\u90a3\u4e48\u5728\u5185\u5b58\u91cc\u53ea\u9700\u8981\u6709\u4e00\u4efd\u8be5\u5171\u4eab\u5e93\u7684\u5b9e\u4f8b \uff0c\u89c4\u907f\u4e86\u7a7a\u95f4\u6d6a\u8d39\u95ee\u9898\u3002\u52a8\u6001\u5e93\u5728\u7a0b\u5e8f\u8fd0\u884c\u662f\u624d\u88ab\u8f7d\u5165\uff0c\u4e5f\u89e3\u51b3\u4e86\u9759\u6001\u5e93\u5bf9\u7a0b\u5e8f\u7684\u66f4\u65b0\u3001\u90e8\u7f72\u548c\u53d1\u5e03\u9875\u4f1a\u5e26\u6765\u9ebb\u70e6\u3002\u7528\u6237\u53ea\u9700\u8981\u66f4\u65b0\u52a8\u6001\u5e93\u5373\u53ef\uff0c \u589e\u91cf\u66f4\u65b0 \u3002 \u52a8\u6001\u5e93\u628a\u5bf9\u4e00\u4e9b\u5e93\u51fd\u6570\u7684\u94fe\u63a5\u8f7d\u5165\u63a8\u8fdf\u5230\u7a0b\u5e8f\u8fd0\u884c\u7684\u65f6\u671f\u3002 \u53ef\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u4e4b\u95f4\u7684\u8d44\u6e90\u5171\u4eab\u3002\uff08\u56e0\u6b64\u52a8\u6001\u5e93\u4e5f\u79f0\u4e3a\u5171\u4eab\u5e93\uff09 \u5c06\u4e00\u4e9b\u7a0b\u5e8f\u5347\u7ea7\u53d8\u5f97\u7b80\u5355\u3002\u751a\u81f3\u53ef\u4ee5\u771f\u6b63\u505a\u5230\u94fe\u63a5\u8f7d\u5165\u5b8c\u5168\u7531\u7a0b\u5e8f\u5458\u5728\u7a0b\u5e8f\u4ee3\u7801\u4e2d\u63a7\u5236\uff08 \u663e\u793a\u8c03\u7528 \uff09\u3002 # \u5982\u679c\u60f3\u67e5\u770b\u4e00\u4e2a\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5171\u4eab\u5e93\uff0c\u4f7f\u7528ldd\u547d\u4ee4 ldd libhello.so","title":"CMake"},{"location":"vim_cmake_git/#docker","text":"\u955c\u50cf\uff0c\u5bb9\u5668\uff0c\u4ed3\u5e93 Docker\u955c\u50cf(\u53ea\u8bfb) :\u5bf9\u4e8e Linux \u800c\u8a00\uff0c\u5185\u6838\u542f\u52a8\u540e\uff0c\u4f1a\u6302\u8f7d root \u6587\u4ef6\u7cfb\u7edf\u4e3a\u5176\u63d0\u4f9b\u7528\u6237\u7a7a\u95f4\u652f\u6301\u3002\u800c Docker \u955c\u50cf\uff08Image\uff09\uff0c\u5c31\u76f8\u5f53\u4e8e\u662f\u4e00\u4e2a root \u6587\u4ef6\u7cfb\u7edf\u3002 \u955c\u50cf\u662f\u5206\u5c42\uff08Layer\uff09\u7684\uff1a\u5373\u4e00\u4e2a\u955c\u50cf\u53ef\u4ee5\u591a\u4e2a\u4e2d\u95f4\u5c42\u7ec4\u6210\uff0c\u591a\u4e2a\u955c\u50cf\u53ef\u4ee5\u5171\u4eab\u540c\u4e00\u4e2d\u95f4\u5c42\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u901a\u8fc7\u5728\u955c\u50cf\u6dfb\u52a0\u591a\u4e00\u5c42\u6765\u751f\u6210\u4e00\u4e2a\u65b0\u7684\u955c\u50cf\u3002 \u955c\u50cf\u662f\u53ea\u8bfb\u7684\uff08read-only\uff09\uff1a\u955c\u50cf\u5728\u6784\u5efa\u5b8c\u6210\u4e4b\u540e\uff0c\u4fbf\u4e0d\u53ef\u4ee5\u518d\u4fee\u6539\uff0c\u800c\u4e0a\u9762\u6211\u4eec\u6240\u8bf4\u7684\u6dfb\u52a0\u4e00\u5c42\u6784\u5efa\u65b0\u7684\u955c\u50cf\uff0c\u8fd9\u4e2d\u95f4\u5b9e\u9645\u662f\u901a\u8fc7\u521b\u5efa\u4e00\u4e2a\u4e34\u65f6\u7684\u5bb9\u5668\uff0c\u5728\u5bb9\u5668\u4e0a\u589e\u52a0\u6216\u5220\u9664\u6587\u4ef6\uff0c\u4ece\u800c\u5f62\u6210\u65b0\u7684\u955c\u50cf\uff0c\u56e0\u4e3a\u5bb9\u5668\u662f\u53ef\u4ee5\u52a8\u6001\u6539\u53d8\u7684\u3002 \u5bb9\u5668(\u53ef\u8bfb\u53ef\u5199) :\u5bb9\u5668\u662f\u901a\u8fc7\u955c\u50cf\u6765\u521b\u5efa\u7684\uff0c\u5bb9\u5668\u662f\u5728\u955c\u50cf\u4e0a\u9762\u6dfb\u4e00\u5c42\u8bfb\u5199\u5c42( \u5bb9\u5668\u5b58\u50a8\u5c42 )\uff08writer/read layer\uff09\u6765\u5b9e\u73b0\uff0c\u6240\u4ee5\u5fc5\u987b\u5148\u6709\u955c\u50cf\u624d\u80fd\u521b\u5efa\u5bb9\u5668\uff0c\u800c\u751f\u6210\u7684\u5bb9\u5668\u662f\u4e00\u4e2a\u72ec\u7acb\u4e8e\u5bbf\u4e3b\u673a\u7684\u9694\u79bb**\u8fdb\u7a0b**\uff0c\u5e76\u4e14\u6709\u5c5e\u4e8e\u5bb9\u5668\u81ea\u5df1\u7684\u7f51\u7edc\u548c\u547d\u540d\u7a7a\u95f4\u3002 \u5bb9\u5668\u5b58\u50a8\u5c42\u7684\u751f\u5b58\u5468\u671f\u548c\u5bb9\u5668\u4e00\u6837\uff0c\u5bb9\u5668\u6d88\u4ea1\u65f6\uff0c\u5bb9\u5668\u5b58\u50a8\u5c42\u4e5f\u968f\u4e4b\u6d88\u4ea1\u3002\u56e0\u6b64\uff0c\u4efb\u4f55\u4fdd\u5b58\u4e8e\u5bb9\u5668\u5b58\u50a8\u5c42\u7684\u4fe1\u606f\u90fd\u4f1a\u968f\u5bb9\u5668\u5220\u9664\u800c\u4e22\u5931\u3002 \u6309\u7167 Docker \u6700\u4f73\u5b9e\u8df5\u7684\u8981\u6c42\uff0c\u5bb9\u5668\u4e0d\u5e94\u8be5\u5411\u5176\u5b58\u50a8\u5c42\u5185\u5199\u5165\u4efb\u4f55\u6570\u636e\uff0c\u5bb9\u5668\u5b58\u50a8\u5c42\u8981\u4fdd\u6301\u65e0\u72b6\u6001\u5316\u3002\u6240\u6709\u7684\u6587\u4ef6\u5199\u5165\u64cd\u4f5c\uff0c\u90fd\u5e94\u8be5\u4f7f\u7528**\u6570\u636e\u5377**\u3001\u6216\u8005\u7ed1\u5b9a\u5bbf\u4e3b\u76ee\u5f55\uff0c\u5728\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u8bfb\u5199\u4f1a\u8df3\u8fc7\u5bb9\u5668\u5b58\u50a8\u5c42\uff0c\u76f4\u63a5\u5bf9\u5bbf\u4e3b\uff08\u6216\u7f51\u7edc\u5b58\u50a8\uff09\u53d1\u751f\u8bfb\u5199\uff0c\u5176\u6027\u80fd\u548c\u7a33\u5b9a\u6027\u66f4\u9ad8\u3002 \u6570\u636e\u5377\u7684\u751f\u5b58\u5468\u671f\u72ec\u7acb\u4e8e\u5bb9\u5668\uff0c\u5bb9\u5668\u6d88\u4ea1\uff0c\u6570\u636e\u5377\u4e0d\u4f1a\u6d88\u4ea1 \u3002\u56e0\u6b64\uff0c\u4f7f\u7528\u6570\u636e\u5377\u540e\uff0c\u5bb9\u5668\u5220\u9664\u6216\u8005\u91cd\u65b0\u8fd0\u884c\u4e4b\u540e\uff0c\u6570\u636e\u5374\u4e0d\u4f1a\u4e22\u5931\u3002 \u4ed3\u5e93 :\u6bcf\u4e2a\u4ed3\u5e93\u53ef\u4ee5\u5305\u542b\u591a\u4e2a \u6807\u7b7e \uff08 Tag \uff09\uff1b\u6bcf\u4e2a\u6807\u7b7e\u5bf9\u5e94\u4e00\u4e2a\u955c\u50cf\u3002\u901a\u5e38\uff0c\u4e00\u4e2a\u4ed3\u5e93\u4f1a\u5305\u542b\u540c\u4e00\u4e2a\u8f6f\u4ef6\u4e0d\u540c\u7248\u672c\u7684\u955c\u50cf\uff0c\u800c\u6807\u7b7e\u5c31\u5e38\u7528\u4e8e\u5bf9\u5e94\u8be5\u8f6f\u4ef6\u7684\u5404\u4e2a\u7248\u672c\u3002\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 <\u4ed3\u5e93\u540d>:<\u6807\u7b7e> \u7684\u683c\u5f0f\u6765\u6307\u5b9a\u5177\u4f53\u662f\u8fd9\u4e2a\u8f6f\u4ef6\u54ea\u4e2a\u7248\u672c\u7684\u955c\u50cf\u3002\u5982\u679c\u4e0d\u7ed9\u51fa\u6807\u7b7e\uff0c\u5c06\u4ee5 latest \u4f5c\u4e3a\u9ed8\u8ba4\u6807\u7b7e\u3002","title":"docker"},{"location":"%E4%BA%BA%E8%84%B8%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","text":"\u4eba\u8138\u65b9\u5411---START \u5927\u76d8\u70b9\uff5c\u8f7b\u91cf\u7ea7\u4eba\u8138\u68c0\u6d4b\u7b97\u6cd5\u5b9e\u73b0 MTCNN(16/04) \u00b6 \u8bba\u6587 | TensorFlow code | caffe code P-Net\u4e3b\u8981\u7528\u6765\u751f\u6210\u4e00\u4e9b\u5019\u9009\u6846\uff08bounding box\uff09 \u3002\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u8be5\u7f51\u7edc\u7684\u9876\u90e8\u6709 3\u6761 \u652f\u8def\u7528\u6765\u5206\u522b\u505a\u4eba\u8138\u5206\u7c7b\u3001\u4eba\u8138\u6846\u7684\u56de\u5f52\u548c\u4eba\u8138\u5173\u952e\u70b9\u5b9a\u4f4d\uff1b\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8fd9\u4e00\u6b65\u7684\u8f93\u51fa\u53ea\u6709 N\u4e2abounding box \u7684 4\u4e2a \u5750\u6807\u4fe1\u606f\u548c score \uff0c\u5f53\u7136\u8fd9 4\u4e2a\u5750\u6807\u4fe1\u606f \u5df2\u7ecf\u7528\u56de\u5f52\u652f\u8def\u7684\u8f93\u51fa\u8fdb\u884c\u4fee\u6b63\u4e86\uff0c score \u53ef\u4ee5\u770b\u505a\u662f\u5206\u7c7b\u7684\u8f93\u51fa\uff08\u662f\u4eba\u8138\u7684\u6982\u7387\uff09\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002 **R-Net\u4e3b\u8981\u7528\u6765\u53bb\u9664\u5927\u91cf\u7684\u975e\u4eba\u8138\u6846\u3002**\u8fd9\u4e00\u6b65\u7684\u8f93\u5165\u662f\u524d\u9762 P-Net \u751f\u6210\u7684 bounding box \uff0c\u6bcf\u4e2a bounding box \u7684\u5927\u5c0f\u90fd\u662f 24*24 \uff0c\u53ef\u4ee5\u901a\u8fc7 resize \u64cd\u4f5c\u5f97\u5230\u3002\u540c\u6837\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8fd9\u4e00\u6b65\u7684\u8f93\u51fa\u53ea\u6709 M \u4e2a bounding box \u7684 4\u4e2a\u5750\u6807 \u4fe1\u606f\u548c score \uff0c 4\u4e2a\u5750\u6807\u4fe1\u606f \u4e5f\u7528\u56de\u5f52\u652f\u8def\u7684\u8f93\u51fa\u8fdb\u884c\u4fee\u6b63\u4e86 O-Net\u548cR-Net\u6709\u70b9\u50cf\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e00\u6b65\u8fd8\u589e\u52a0\u4e86landmark\u4f4d\u7f6e\u7684\u56de\u5f52 \u3002\u8f93\u5165\u5927\u5c0f\u8c03\u6574\u4e3a 48*48 \uff0c\u8f93\u51fa\u5305\u542bP\u4e2a bounding box \u7684 4\u4e2a\u5750\u6807\u4fe1\u606f \u3001 score \u548c \u5173\u952e\u70b9\u4fe1\u606f \u3002 Loss \u5206\u7c7b: \u4ea4\u53c9\u71b5\u635f\u5931 bounding box \u56de\u5f52: L2\u635f\u5931 landmark \u56de\u5f52: L2 \u635f\u5931 \u5728 P-Net\u548cR-Net \u4e2d\uff0c\u5173\u952e\u70b9\u7684\u635f\u5931\u6743\u91cd\uff08 \u03b1 \uff09\u8981\u5c0f\u4e8e O-Net \u90e8\u5206\uff0c\u8fd9\u662f\u56e0\u4e3a\u524d\u9762 2\u4e2astage \u91cd\u70b9\u5728\u4e8e\u8fc7\u6ee4\u6389\u975e\u4eba\u8138\u7684 bbox \u3002 \u03b2 \u5b58\u5728\u7684\u610f\u4e49\u662f\u6bd4\u5982\u975e\u4eba\u8138\u8f93\u5165\uff0c\u5c31\u53ea\u9700\u8981\u8ba1\u7b97\u5206\u7c7b\u635f\u5931\uff0c\u800c\u4e0d\u9700\u8981\u8ba1\u7b97\u56de\u5f52\u548c\u5173\u952e\u70b9\u7684\u635f\u5931\u3002 Retinaface(19/05) \u00b6 \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2 :\u53ef\u4ee5\u68c0\u6d4b\u4eba\u8138\u6846\u548c5\u4e2a\u4eba\u8138\u5173\u952e\u70b9(\u8d21\u732e:widerFace\u4e2d5\u4e2a\u5173\u952e\u70b9\u624b\u52a8\u6807\u6ce8)\u3002 \u6ce8\u610f:\u8fd9\u91cc\u6d4b\u8bd5\u662f\u56fa\u5b9a\u5c3a\u5bf8 1600 \u5355\u5c3a\u5ea6val\u6d4b\u8bd5\u96c6\u7ed3\u679c \u7f51\u7edc\u7ed3\u6784 \u4e3b\u5e72\u7f51\u7edc\u548cFPN\u5c42 SSH(Single Stage Headless) SSH(\u7c7b\u4f3cRPN\u64cd\u4f5c) \uff1a \u901a\u8fc7\u7b80\u5355\u7684\u53e0\u5c42\u5377\u79ef\u5408\u5e76\u4e0a\u4e0b\u6587\u4fe1\u606f(\u4e00\u822c\u5728two-stage \u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u5f53\u4e2d\uff0c\u90fd\u662f\u901a\u8fc7\u589e\u5927\u5019\u9009\u6846\u7684\u5c3a\u5bf8\u5927\u5c0f\u4ee5\u5408\u5e76\u5f97\u5230\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f)\uff0c\u901f\u5ea6\u66f4\u5feb\uff0c\u540c\u65f6\u589e\u52a0\u611f\u53d7\u91ce \u3002 SSH \u4f7f\u7528\u5e76\u884c\u7684\u4e09\u4e2a\u5377\u79ef\uff1a \u7b2c\u4e00\u4e2a\u662f 3x3 \u5377\u79ef \u7b2c\u4e8c\u4e2a\u662f\u7528 2 \u4e2a 3x3 \u5377\u79ef\u4ee3\u66ff 5x5 \u5377\u79ef \u7b2c\u4e09\u4e2a\u662f\u7528 3 \u6b21 3x3 \u5377\u79ef\u4ee3\u66ff 7x7 \u5377\u79ef \u5206\u7c7b\u3001\u9884\u6d4b\u6846\u3001\u5173\u952e\u70b9\u63d0\u53d6 ClassHead \u662f\u63d0\u53d6\u5148\u9a8c\u6846\u662f\u5426\u5305\u542b\u4eba\u8138 BoxHead \u662f\u5148\u9a8c\u4f4d\u7f6e\u68c0\u6d4b\uff0c anchor \u6846\u7684\u751f\u6210\u662f\u5728\u8fd9\u4e09\u4e2a\u7279\u5f81\u56fe\u4e0a\u751f\u6210\u7684\uff0c\u5c0f\u7279\u5f81\u56fe( scale=32 )\u4ea7\u751f 2 \u4e2a\u5927 anchor \u6846(\u65b9\u5f62\u6846 1:1 )\uff0c\u4e2d\u7b49\u7279\u5f81\u56fe( scale=16 )\u4ea7\u751f 2 \u4e2a\u4e2d\u7b49 anchor \u6846(\u65b9\u5f62\u6846 1:1 )\uff0c\u5927\u7279\u5f81\u56fe( scale=8 )\u4ea7\u751f 2 \u4e2a\u5c0f anchor \u6846(\u65b9\u5f62\u6846 1:1 )\u3002 \u56f0\u96be\u6837\u4f8b\u6316\u6398(hard negative mining) \uff1a iou_thresh>0.5 \u662f\u6b63\u8d1f\u6837\u672c\u7684\u9608\u503c\uff0c\u4f46\u662f negative >> positive \uff0c\u7ed3\u679c\u4f1a\u5411\u8d1f\u6837\u672c\u9760\u62e2\u3002\u4fdd\u8bc1\u6b63\uff1a\u8d1f\u5927\u7ea6\u4e3a 1:3 \uff0c\u6b63\u6837\u672c\u56fa\u5b9a\uff0c\u9996\u6b21\u8d1f\u6837\u672c\u968f\u673a\u9009\u53d6\u8bad\u7ec3\u7f51\u7edc\uff0c\uff0c\u518d\u7528\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u53bb\u9884\u6d4b\u8d1f\u6837\u672c\u96c6\u4e2d\u5269\u4f59\u7684\u8d1f\u6837\u672c\uff0c\u9009\u62e9\u5176\u4e2d\u5f97\u5206\u6700\u9ad8 topk ( hard negative )\u4f5c\u4e3a\u8d1f\u6837\u672c\u96c6\u4e2d\u91cd\u65b0\u8bad\u7ec3\uff0c\u7ed3\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d. LandmarkHead \u662f\u4eba\u8138\u5173\u952e\u70b9\u4f4d\u7f6e\u68c0\u6d4b\u3002 decode(\u89e3\u7801\u8fdb\u884c\u9884\u6d4b\u7ed3\u679c\u4fee\u6b63) \u4e0a\u4e00\u6b65\u7684\u9884\u6d4b\u6211\u4eec\u83b7\u5f97\u7684\u662f\u4e09\u4e2a\u6709\u6548\u7684\u7279\u5f81\u5c42\uff0c\u6211\u4eec\u9700\u8981\u5bf9**\u9884\u6d4b\u6846\u548c\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b**\u8fdb\u884c\u4f4d\u7f6e\u8c03\u6574\u3002\u6839\u636e encode \u7684\u516c\u5f0f\u53ef\u4ee5\u53cd\u63a8\u51fa decode \u89e3\u7801\u516c\u5f0f\uff0c\u5982\u4e0b\u56fe\u6240\u793a: # \u5bf9\u5148\u9a8c\u6846\u8fdb\u884c\u8c03\u6574\uff0c\u83b7\u5f97\u4e2d\u5fc3\u9884\u6d4b\u6846 def decode ( loc , priors , variances ): # @loc:location predictions for loc layers\uff0c[37840, 4] # @priors\uff1a\u5148\u9a8c\u6846 [37840, 4] # @variances:\u65b9\u5dee[0.1, 0.2] boxes = torch . cat (( priors [:, : 2 ] + loc [:, : 2 ] * variances [ 0 ] * priors [:, 2 :], #\u4e2d\u5fc3\u8c03\u6574\u6309\u516c\u5f0f priors [:, 2 :] * torch . exp ( variances [ 1 ] * loc [:, 2 :])), dim = 1 ) #\u957f\u5bbd\u8c03\u6574\u6309\u516c\u5f0f # \u8f6c\u6362\u5750\u6807\u4e3a\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2 boxes [:, : 2 ] -= boxes [:, 2 :] / 2 boxes [:, 2 :] += boxes [:, : 2 ] return boxes # \u5bf9\u5148\u9a8c\u6846\u8fdb\u884c\u8c03\u6574\uff0c\u83b7\u5f97\u4eba\u8138\u5173\u952e\u70b9 def decode_landm ( pre , priors , variances ): # @pre: [37840, 10] landms = torch . cat (( priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, : 2 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 2 : 4 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 4 : 6 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 6 : 8 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 8 : 10 ], ), dim = 1 ) return landms Multi-task Loss \u7ed3\u679c\u5c55\u793a FaceBoxes(17/08) \u00b6 \u8bba\u6587 | code \u8be5\u6a21\u578b\u7ed3\u6784\u57fa\u4e8e ssd \u8fdb\u884c\u4fee\u6539\u3002\u539f\u59cb ssd \u6709 6 \u4e2a\u5206\u652f\u505a\u9884\u6d4b\uff0c\u8fd9\u91cc\u53ea\u91c7\u7528\u4e86 3 \u4e2a\u5206\u652f\u505a\u9884\u6d4b\u3002\u6240\u6709Anchor\u7684\u957f\u5bbd\u6bd4\u4f8b\u90fd\u662f\u6539\u4e3a 1:1 RDCL(\u5feb\u901f\u6d88\u878d\u5377\u79ef\u5c42) :\u5c06\u56fe\u50cf\u5c3a\u5bf8\u5feb\u901f\u7684\u4e0b\u964d\u4e0b\u53bb\uff0c\u51cf\u5c11\u7f51\u7edc\u7684\u901a\u9053\u6570\uff0c\u51cf\u5c11\u4fe1\u606f\u635f\u5931\uff0c\u4fdd\u8bc1\u5b9e\u65f6 CReLU \u7684\u4e24\u4e2a\u4f5c\u7528: \u4e3a\u4e86\u4f7f\u52a0\u901f\u6a21\u578b\uff0c\u6a21\u578b\u6d45\u5c42\u4f7f\u7528\u5927\u5377\u79ef\u6838\u548c\u5927\u6b65\u957f\u53ef\u4ee5\u8fc5\u901f\u964d\u4f4e\u56fe\u50cf\u5c3a\u5bf8\uff0c\u5982\u679c\u518d\u7528\u5c0f\u7684\u8f93\u51fa\u901a\u9053\u90a3\u4e48\u7279\u5f81\u63d0\u53d6\u5c31\u4e0d\u4e30\u5bcc\uff0c\u4f7f\u7528 CReLU \u53ef\u4ee5\u4f7f\u8f93\u51fa\u901a\u9053\u52a0\u500d\u4e14\u901f\u5ea6\u548c\u7cbe\u5ea6\u51e0\u4e4e\u65e0\u635f\u5931 CReLU \u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u7f51\u7edc\u5728\u6d45\u5c42\u7684\u65f6\u5019\u5377\u79ef\u66f4\u503e\u5411\u4e8e\u540c\u65f6\u6355\u83b7\u6b63\u8d1f\u54cd\u5e94\u7684\u4fe1\u606f\uff0c\u5982\u679c\u6d45\u5c42\u4f7f\u7528 ReLU \u7684\u8bdd\u4f1a\u62b9\u6389\u8d1f\u54cd\u5e94\uff0c\u4f1a\u9020\u6210\u5377\u79ef\u6838\u5b58\u5728\u5197\u4f59\uff0c\u6240\u4ee5\u4f7f\u7528 CReLU \u6548\u679c\u66f4\u597d\uff0c\u4e5f\u53ef\u4ee5\u51cf\u5c11\u5377\u79ef\u548c\u6570\u91cf\u3002 MSCL(\u591a\u5c3a\u5ea6\u5377\u79ef\u5c42) Inception1/2/3 \u7528\u6765\u4e30\u5bcc\u611f\u53d7\u91ce( Receptive Field )\uff0c\u4e3a\u4ec0\u4e48 Inception3 \u67093\u4e2a\u7279\u5f81\u56fe\uff1f\u56e0\u4e3a Inception \u7f51\u7edc\u662f\u5e76\u8054\u7ed3\u6784\uff0c 1x1 \u5377\u79ef\u5206\u652f\u9664\u5916\uff0c\u67093\u4e2a\u7279\u5f81\u56fe\u3002 \u4e00\u4e2a\u7279\u5f81\u56fe\u4e0a\u9884\u6d4b\u7684\u6846\u6620\u5c04\u5230\u539f\u56fe\u4e0a\u7684\u95f4\u9694\u4e0e\u8be5\u5c42\u7684\u611f\u53d7\u91ce\u76f8\u540c \u3002 \u6bd4\u5982 Conv4-2 \u7684\u611f\u53d7\u91ce\u662f 128 ,\u8868\u793a\u8f93\u5165\u56fe\u7247\u4e0a\u6bcf\u9694 128 \u4e2a\u50cf\u7d20\u70b9\u5c31\u4f1a\u6709\u4e00\u4e2a 512x512 \u5c3a\u5bf8\u7684\u6846 Anchor\u7a20\u5bc6\u5316 \u548c ssd \u4e00\u6837\uff0c\u4e0d\u540c\u7279\u5f81\u56fe\u8bbe\u7f6e\u4e0d\u540c\u5c3a\u5bf8 Anchor \uff0c\u4f46\u662f\u5bf9\u4e8e\u76ee\u6807\u62e5\u6324\u7684\u60c5\u51b5(\u4eba\u8138\u7a20\u5bc6\u5f88\u5e38\u89c1)\uff0c\u5728\u5e95\u5c42\u8bbe\u7f6e\u7684\u5c0f Anchor \u663e\u5f97\u975e\u5e38\u7a00\u758f\uff0c\u6240\u4ee5\u9700\u8981\u505a\u4e00\u4e2a\u7a20\u5bc6\u5316\u5de5\u4f5c:\u5177\u4f53\u5c31\u662f\u5728\u6bcf\u4e2a\u611f\u53d7\u91ce\u7684\u4e2d\u5fc3\uff0c\u4e5f\u5c31\u662fSSD\u4e2dAnchor\u7684\u4e2d\u5fc3\u5bf9\u5176\u8fdb\u884c\u504f\u79fb\u3002\u6839\u636eAnchor\u7684\u5bc6\u5ea6\u5927\u5c0f\u8fdb\u884c 2,3,4 \u500d\u7684\u7a20\u5bc6\u5316\u3002 Anchor \u7684\u5bc6\u5ea6\u8ba1\u7b97\u516c\u5f0f: A_scale : anchor \u7684\u5c3a\u5ea6\uff0c\u9ed8\u8ba4\u4e3a: 32\uff0c64\uff0c128\uff0c256\uff0c512 A_interval \uff1a anchor \u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u4e3a 32\u300132\u300132\u300164\u3001128 A_density \uff1a\u8ba1\u7b97\u53ef\u5f97: 1,2,4,4,4 \uff0c\u53ef\u4ee5\u770b\u5230 32 x 32 \u548c 64 x 64 \u7684\u6846\u8fc7\u4e8e\u7a00\u758f\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u884c\u6269\u589e\u5bc6\u5ea6\uff0c 32x32 \u9700\u8981\u6269\u589e 4 \u500d\uff0c 64x64 \u9700\u8981\u6269\u589e 2 \u500d\u3002 \u635f\u5931\u51fd\u6570 \u5206\u7c7b\u635f\u5931:\u4ea4\u53c9\u71b5\u635f\u5931 softmax loss \u505a2 \u6846\u56de\u5f52\u635f\u5931: Smooth L1 Loss Libfacedetection \u00b6 Ultra(\u8d85\u7ea7)-Light-Fast-Generic(\u901a\u7528)-Face-Detector-1MB \u8be5\u6a21\u578b\u7ed3\u6784\u57fa\u4e8essd\u8fdb\u884c\u4fee\u6539\u3002\u539f\u59cbssd\u67096\u4e2a\u5206\u652f\u505a\u9884\u6d4b\uff0c\u8fd9\u91cc\u53ea\u91c7\u7528\u4e86 4\u4e2a \u5206\u652f\u505a\u9884\u6d4b\u3002\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u57fa\u7840 anchor \u5206\u522b\u4e3a 3\u4e2a\uff0c2\u4e2a\uff0c2\u4e2a\uff0c3\u4e2a \u3002 min_boxes = [[10, 16, 24], [32, 48], [64, 96], [128, 192, 256]] code \u8be5\u90e8\u5206\u4e3b\u8981\u662f\u6d4b\u8bd5\u6a21\u578b\u5728\u4e2d\u5c0f\u5206\u8fa8\u7387\u4e0b\u7684\u6d4b\u8bd5\u96c6\u6548\u679c DBFace\u5347\u7ea7(1.3M):\u5bf9\u6234\u53e3\u7f69\u6570\u636e\u4e5f\u53cb\u597d \u00b6 \u7f51\u7edc\u7ed3\u6784 Backbone \u9009\u7528 MobileNetV3 \u589e\u52a0\u4e86 SE \u6a21\u5757\u548c h-swish\u6fc0\u6d3b\u51fd\u6570\u6a21\u5757 \uff0c\u9009\u7528 CenterNet \u7ed3\u6784(\u5bf9\u5c0f\u76ee\u6807\u53cb\u597d\uff0c\u5177\u6709\u540e\u5904\u7406\u7b80\u6d01\u9ad8\u6548\u7b49\u7279\u70b9)\u505a\u68c0\u6d4b\u3002\u76f8\u5bf9\u4e8ev1\u7684 MobileNetV2(7M) \u6548\u679c\u597d\uff0c\u901f\u5ea6\u5feb\u3002 \u4efb\u52a1\u5934\u8bbe\u8ba1:SSH\u7684DetectModule\u548cContextModule \u5bf9\u4e8e\u4e0a\u91c7\u6837\u8bbe\u8ba1\uff0c\u6211\u4eec\u91c7\u7528Upsample+Conv+Act\u7684\u65b9\u5f0f\uff0c\u907f\u514d\u4f7f\u7528\u53cd\u5377\u79ef\u9020\u6210\u53ef\u80fd\u7684\u952f\u9f7f\u95ee\u9898\u3002 Loss\u5b9a\u4e49 \uff1a \u70ed\u529b\u56fe(HeatMap)\u635f\u5931\uff1a Focal loss \u8fd9\u91cc\u03b3\u53d62\uff0cy=1\u65f6\uff0c\u03b1\u4e3a\u6b63\u6837\u672c\u7684\u6743\u91cd\uff0c\u53c2\u7167CenterNet\uff0c\u5b9a\u4e49\u4e3a\u76ee\u6807\u5468\u56f4\u534a\u5f84\u5904 3*3 \u8303\u56f4\u4e3a1\uff0c\u5176\u4ed6\u4e3a0\uff0c\u76ee\u7684\u662f\u52a0\u5f3a\u6b63\u6837\u672c\u7684\u8bad\u7ec3\u6743\u91cd\u3002y=0\u65f6\uff0c\u03b1\u4e3a(1 - gt)4\uff0c\u6b64\u65f6GT\u662f\u4e00\u4e2a\u57fa\u4e8e\u76ee\u6807\u8ba1\u7b97\u7684\u692d\u5706\u9ad8\u65af\u56fe\uff0c\u53c2\u7167TTFNet (Training-Time-Friendly Network for Real-Time Object Detection)\u3002 \u4f4d\u7f6e\u5750\u6807\u504f\u79fb\u91cf\u635f\u5931: GIoU Loss \u4eba\u8138\u5173\u952e\u70b9 Landmark \u56de\u5f52loss: WingLoss \u7531\u4e8e SmoothL1 Loss \u5bf9\u4e8e\u8f83\u5927\u8bef\u5dee\u65f6\u6bd4\u8f83\u654f\u611f\uff0c\u4f46\u662f\u5bf9\u4e2d\u5c0f\u8bef\u5dee\u5219\u6bd4\u8f83\u4e0d\u654f\u611f\uff0c\u800c\u5bfc\u81f4\u5173\u952e\u70b9\u65e0\u6cd5\u5f97\u5230\u7cbe\u7ec6\u7ed3\u679c\uff0c\u56e0\u6b64\u8003\u8651\u52a0\u91cd\u5bf9\u4e2d\u5c0f\u8bef\u5dee\u7684\u5173\u6ce8 \u8fd9\u91cc\u611f\u89c9\u7528\u5f52\u4e00\u5316\u540e\u7684\u65b9\u5f0f\u6548\u679c\u4f1a\u66f4\u597d \u6570\u636e\u589e\u5e7f \u6a21\u578b\u4e3b\u8981\u4f7f\u7528\u4e86 random filp\u3001random scaling\u3001color jittering\u3001randomly crop square patch\u3001image compress \u7b49\u56fe\u50cf\u53d8\u6362\u65b9\u5f0f\u3002","title":"\u4eba\u8138\u65b9\u5411\u8bba\u6587\u89e3\u8bfb"},{"location":"%E4%BA%BA%E8%84%B8%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#mtcnn1604","text":"\u8bba\u6587 | TensorFlow code | caffe code P-Net\u4e3b\u8981\u7528\u6765\u751f\u6210\u4e00\u4e9b\u5019\u9009\u6846\uff08bounding box\uff09 \u3002\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u8be5\u7f51\u7edc\u7684\u9876\u90e8\u6709 3\u6761 \u652f\u8def\u7528\u6765\u5206\u522b\u505a\u4eba\u8138\u5206\u7c7b\u3001\u4eba\u8138\u6846\u7684\u56de\u5f52\u548c\u4eba\u8138\u5173\u952e\u70b9\u5b9a\u4f4d\uff1b\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8fd9\u4e00\u6b65\u7684\u8f93\u51fa\u53ea\u6709 N\u4e2abounding box \u7684 4\u4e2a \u5750\u6807\u4fe1\u606f\u548c score \uff0c\u5f53\u7136\u8fd9 4\u4e2a\u5750\u6807\u4fe1\u606f \u5df2\u7ecf\u7528\u56de\u5f52\u652f\u8def\u7684\u8f93\u51fa\u8fdb\u884c\u4fee\u6b63\u4e86\uff0c score \u53ef\u4ee5\u770b\u505a\u662f\u5206\u7c7b\u7684\u8f93\u51fa\uff08\u662f\u4eba\u8138\u7684\u6982\u7387\uff09\uff0c\u5177\u4f53\u53ef\u4ee5\u770b\u4ee3\u7801\u3002 **R-Net\u4e3b\u8981\u7528\u6765\u53bb\u9664\u5927\u91cf\u7684\u975e\u4eba\u8138\u6846\u3002**\u8fd9\u4e00\u6b65\u7684\u8f93\u5165\u662f\u524d\u9762 P-Net \u751f\u6210\u7684 bounding box \uff0c\u6bcf\u4e2a bounding box \u7684\u5927\u5c0f\u90fd\u662f 24*24 \uff0c\u53ef\u4ee5\u901a\u8fc7 resize \u64cd\u4f5c\u5f97\u5230\u3002\u540c\u6837\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\u8fd9\u4e00\u6b65\u7684\u8f93\u51fa\u53ea\u6709 M \u4e2a bounding box \u7684 4\u4e2a\u5750\u6807 \u4fe1\u606f\u548c score \uff0c 4\u4e2a\u5750\u6807\u4fe1\u606f \u4e5f\u7528\u56de\u5f52\u652f\u8def\u7684\u8f93\u51fa\u8fdb\u884c\u4fee\u6b63\u4e86 O-Net\u548cR-Net\u6709\u70b9\u50cf\uff0c\u53ea\u4e0d\u8fc7\u8fd9\u4e00\u6b65\u8fd8\u589e\u52a0\u4e86landmark\u4f4d\u7f6e\u7684\u56de\u5f52 \u3002\u8f93\u5165\u5927\u5c0f\u8c03\u6574\u4e3a 48*48 \uff0c\u8f93\u51fa\u5305\u542bP\u4e2a bounding box \u7684 4\u4e2a\u5750\u6807\u4fe1\u606f \u3001 score \u548c \u5173\u952e\u70b9\u4fe1\u606f \u3002 Loss \u5206\u7c7b: \u4ea4\u53c9\u71b5\u635f\u5931 bounding box \u56de\u5f52: L2\u635f\u5931 landmark \u56de\u5f52: L2 \u635f\u5931 \u5728 P-Net\u548cR-Net \u4e2d\uff0c\u5173\u952e\u70b9\u7684\u635f\u5931\u6743\u91cd\uff08 \u03b1 \uff09\u8981\u5c0f\u4e8e O-Net \u90e8\u5206\uff0c\u8fd9\u662f\u56e0\u4e3a\u524d\u9762 2\u4e2astage \u91cd\u70b9\u5728\u4e8e\u8fc7\u6ee4\u6389\u975e\u4eba\u8138\u7684 bbox \u3002 \u03b2 \u5b58\u5728\u7684\u610f\u4e49\u662f\u6bd4\u5982\u975e\u4eba\u8138\u8f93\u5165\uff0c\u5c31\u53ea\u9700\u8981\u8ba1\u7b97\u5206\u7c7b\u635f\u5931\uff0c\u800c\u4e0d\u9700\u8981\u8ba1\u7b97\u56de\u5f52\u548c\u5173\u952e\u70b9\u7684\u635f\u5931\u3002","title":"MTCNN(16/04)"},{"location":"%E4%BA%BA%E8%84%B8%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#retinaface1905","text":"\u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2 :\u53ef\u4ee5\u68c0\u6d4b\u4eba\u8138\u6846\u548c5\u4e2a\u4eba\u8138\u5173\u952e\u70b9(\u8d21\u732e:widerFace\u4e2d5\u4e2a\u5173\u952e\u70b9\u624b\u52a8\u6807\u6ce8)\u3002 \u6ce8\u610f:\u8fd9\u91cc\u6d4b\u8bd5\u662f\u56fa\u5b9a\u5c3a\u5bf8 1600 \u5355\u5c3a\u5ea6val\u6d4b\u8bd5\u96c6\u7ed3\u679c \u7f51\u7edc\u7ed3\u6784 \u4e3b\u5e72\u7f51\u7edc\u548cFPN\u5c42 SSH(Single Stage Headless) SSH(\u7c7b\u4f3cRPN\u64cd\u4f5c) \uff1a \u901a\u8fc7\u7b80\u5355\u7684\u53e0\u5c42\u5377\u79ef\u5408\u5e76\u4e0a\u4e0b\u6587\u4fe1\u606f(\u4e00\u822c\u5728two-stage \u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u5f53\u4e2d\uff0c\u90fd\u662f\u901a\u8fc7\u589e\u5927\u5019\u9009\u6846\u7684\u5c3a\u5bf8\u5927\u5c0f\u4ee5\u5408\u5e76\u5f97\u5230\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f)\uff0c\u901f\u5ea6\u66f4\u5feb\uff0c\u540c\u65f6\u589e\u52a0\u611f\u53d7\u91ce \u3002 SSH \u4f7f\u7528\u5e76\u884c\u7684\u4e09\u4e2a\u5377\u79ef\uff1a \u7b2c\u4e00\u4e2a\u662f 3x3 \u5377\u79ef \u7b2c\u4e8c\u4e2a\u662f\u7528 2 \u4e2a 3x3 \u5377\u79ef\u4ee3\u66ff 5x5 \u5377\u79ef \u7b2c\u4e09\u4e2a\u662f\u7528 3 \u6b21 3x3 \u5377\u79ef\u4ee3\u66ff 7x7 \u5377\u79ef \u5206\u7c7b\u3001\u9884\u6d4b\u6846\u3001\u5173\u952e\u70b9\u63d0\u53d6 ClassHead \u662f\u63d0\u53d6\u5148\u9a8c\u6846\u662f\u5426\u5305\u542b\u4eba\u8138 BoxHead \u662f\u5148\u9a8c\u4f4d\u7f6e\u68c0\u6d4b\uff0c anchor \u6846\u7684\u751f\u6210\u662f\u5728\u8fd9\u4e09\u4e2a\u7279\u5f81\u56fe\u4e0a\u751f\u6210\u7684\uff0c\u5c0f\u7279\u5f81\u56fe( scale=32 )\u4ea7\u751f 2 \u4e2a\u5927 anchor \u6846(\u65b9\u5f62\u6846 1:1 )\uff0c\u4e2d\u7b49\u7279\u5f81\u56fe( scale=16 )\u4ea7\u751f 2 \u4e2a\u4e2d\u7b49 anchor \u6846(\u65b9\u5f62\u6846 1:1 )\uff0c\u5927\u7279\u5f81\u56fe( scale=8 )\u4ea7\u751f 2 \u4e2a\u5c0f anchor \u6846(\u65b9\u5f62\u6846 1:1 )\u3002 \u56f0\u96be\u6837\u4f8b\u6316\u6398(hard negative mining) \uff1a iou_thresh>0.5 \u662f\u6b63\u8d1f\u6837\u672c\u7684\u9608\u503c\uff0c\u4f46\u662f negative >> positive \uff0c\u7ed3\u679c\u4f1a\u5411\u8d1f\u6837\u672c\u9760\u62e2\u3002\u4fdd\u8bc1\u6b63\uff1a\u8d1f\u5927\u7ea6\u4e3a 1:3 \uff0c\u6b63\u6837\u672c\u56fa\u5b9a\uff0c\u9996\u6b21\u8d1f\u6837\u672c\u968f\u673a\u9009\u53d6\u8bad\u7ec3\u7f51\u7edc\uff0c\uff0c\u518d\u7528\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u53bb\u9884\u6d4b\u8d1f\u6837\u672c\u96c6\u4e2d\u5269\u4f59\u7684\u8d1f\u6837\u672c\uff0c\u9009\u62e9\u5176\u4e2d\u5f97\u5206\u6700\u9ad8 topk ( hard negative )\u4f5c\u4e3a\u8d1f\u6837\u672c\u96c6\u4e2d\u91cd\u65b0\u8bad\u7ec3\uff0c\u7ed3\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d. LandmarkHead \u662f\u4eba\u8138\u5173\u952e\u70b9\u4f4d\u7f6e\u68c0\u6d4b\u3002 decode(\u89e3\u7801\u8fdb\u884c\u9884\u6d4b\u7ed3\u679c\u4fee\u6b63) \u4e0a\u4e00\u6b65\u7684\u9884\u6d4b\u6211\u4eec\u83b7\u5f97\u7684\u662f\u4e09\u4e2a\u6709\u6548\u7684\u7279\u5f81\u5c42\uff0c\u6211\u4eec\u9700\u8981\u5bf9**\u9884\u6d4b\u6846\u548c\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b**\u8fdb\u884c\u4f4d\u7f6e\u8c03\u6574\u3002\u6839\u636e encode \u7684\u516c\u5f0f\u53ef\u4ee5\u53cd\u63a8\u51fa decode \u89e3\u7801\u516c\u5f0f\uff0c\u5982\u4e0b\u56fe\u6240\u793a: # \u5bf9\u5148\u9a8c\u6846\u8fdb\u884c\u8c03\u6574\uff0c\u83b7\u5f97\u4e2d\u5fc3\u9884\u6d4b\u6846 def decode ( loc , priors , variances ): # @loc:location predictions for loc layers\uff0c[37840, 4] # @priors\uff1a\u5148\u9a8c\u6846 [37840, 4] # @variances:\u65b9\u5dee[0.1, 0.2] boxes = torch . cat (( priors [:, : 2 ] + loc [:, : 2 ] * variances [ 0 ] * priors [:, 2 :], #\u4e2d\u5fc3\u8c03\u6574\u6309\u516c\u5f0f priors [:, 2 :] * torch . exp ( variances [ 1 ] * loc [:, 2 :])), dim = 1 ) #\u957f\u5bbd\u8c03\u6574\u6309\u516c\u5f0f # \u8f6c\u6362\u5750\u6807\u4e3a\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2 boxes [:, : 2 ] -= boxes [:, 2 :] / 2 boxes [:, 2 :] += boxes [:, : 2 ] return boxes # \u5bf9\u5148\u9a8c\u6846\u8fdb\u884c\u8c03\u6574\uff0c\u83b7\u5f97\u4eba\u8138\u5173\u952e\u70b9 def decode_landm ( pre , priors , variances ): # @pre: [37840, 10] landms = torch . cat (( priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, : 2 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 2 : 4 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 4 : 6 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 6 : 8 ], priors [:, : 2 ] + priors [:, 2 :] * variances [ 0 ] * pre [:, 8 : 10 ], ), dim = 1 ) return landms Multi-task Loss \u7ed3\u679c\u5c55\u793a","title":"Retinaface(19/05)"},{"location":"%E4%BA%BA%E8%84%B8%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#faceboxes1708","text":"\u8bba\u6587 | code \u8be5\u6a21\u578b\u7ed3\u6784\u57fa\u4e8e ssd \u8fdb\u884c\u4fee\u6539\u3002\u539f\u59cb ssd \u6709 6 \u4e2a\u5206\u652f\u505a\u9884\u6d4b\uff0c\u8fd9\u91cc\u53ea\u91c7\u7528\u4e86 3 \u4e2a\u5206\u652f\u505a\u9884\u6d4b\u3002\u6240\u6709Anchor\u7684\u957f\u5bbd\u6bd4\u4f8b\u90fd\u662f\u6539\u4e3a 1:1 RDCL(\u5feb\u901f\u6d88\u878d\u5377\u79ef\u5c42) :\u5c06\u56fe\u50cf\u5c3a\u5bf8\u5feb\u901f\u7684\u4e0b\u964d\u4e0b\u53bb\uff0c\u51cf\u5c11\u7f51\u7edc\u7684\u901a\u9053\u6570\uff0c\u51cf\u5c11\u4fe1\u606f\u635f\u5931\uff0c\u4fdd\u8bc1\u5b9e\u65f6 CReLU \u7684\u4e24\u4e2a\u4f5c\u7528: \u4e3a\u4e86\u4f7f\u52a0\u901f\u6a21\u578b\uff0c\u6a21\u578b\u6d45\u5c42\u4f7f\u7528\u5927\u5377\u79ef\u6838\u548c\u5927\u6b65\u957f\u53ef\u4ee5\u8fc5\u901f\u964d\u4f4e\u56fe\u50cf\u5c3a\u5bf8\uff0c\u5982\u679c\u518d\u7528\u5c0f\u7684\u8f93\u51fa\u901a\u9053\u90a3\u4e48\u7279\u5f81\u63d0\u53d6\u5c31\u4e0d\u4e30\u5bcc\uff0c\u4f7f\u7528 CReLU \u53ef\u4ee5\u4f7f\u8f93\u51fa\u901a\u9053\u52a0\u500d\u4e14\u901f\u5ea6\u548c\u7cbe\u5ea6\u51e0\u4e4e\u65e0\u635f\u5931 CReLU \u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u7f51\u7edc\u5728\u6d45\u5c42\u7684\u65f6\u5019\u5377\u79ef\u66f4\u503e\u5411\u4e8e\u540c\u65f6\u6355\u83b7\u6b63\u8d1f\u54cd\u5e94\u7684\u4fe1\u606f\uff0c\u5982\u679c\u6d45\u5c42\u4f7f\u7528 ReLU \u7684\u8bdd\u4f1a\u62b9\u6389\u8d1f\u54cd\u5e94\uff0c\u4f1a\u9020\u6210\u5377\u79ef\u6838\u5b58\u5728\u5197\u4f59\uff0c\u6240\u4ee5\u4f7f\u7528 CReLU \u6548\u679c\u66f4\u597d\uff0c\u4e5f\u53ef\u4ee5\u51cf\u5c11\u5377\u79ef\u548c\u6570\u91cf\u3002 MSCL(\u591a\u5c3a\u5ea6\u5377\u79ef\u5c42) Inception1/2/3 \u7528\u6765\u4e30\u5bcc\u611f\u53d7\u91ce( Receptive Field )\uff0c\u4e3a\u4ec0\u4e48 Inception3 \u67093\u4e2a\u7279\u5f81\u56fe\uff1f\u56e0\u4e3a Inception \u7f51\u7edc\u662f\u5e76\u8054\u7ed3\u6784\uff0c 1x1 \u5377\u79ef\u5206\u652f\u9664\u5916\uff0c\u67093\u4e2a\u7279\u5f81\u56fe\u3002 \u4e00\u4e2a\u7279\u5f81\u56fe\u4e0a\u9884\u6d4b\u7684\u6846\u6620\u5c04\u5230\u539f\u56fe\u4e0a\u7684\u95f4\u9694\u4e0e\u8be5\u5c42\u7684\u611f\u53d7\u91ce\u76f8\u540c \u3002 \u6bd4\u5982 Conv4-2 \u7684\u611f\u53d7\u91ce\u662f 128 ,\u8868\u793a\u8f93\u5165\u56fe\u7247\u4e0a\u6bcf\u9694 128 \u4e2a\u50cf\u7d20\u70b9\u5c31\u4f1a\u6709\u4e00\u4e2a 512x512 \u5c3a\u5bf8\u7684\u6846 Anchor\u7a20\u5bc6\u5316 \u548c ssd \u4e00\u6837\uff0c\u4e0d\u540c\u7279\u5f81\u56fe\u8bbe\u7f6e\u4e0d\u540c\u5c3a\u5bf8 Anchor \uff0c\u4f46\u662f\u5bf9\u4e8e\u76ee\u6807\u62e5\u6324\u7684\u60c5\u51b5(\u4eba\u8138\u7a20\u5bc6\u5f88\u5e38\u89c1)\uff0c\u5728\u5e95\u5c42\u8bbe\u7f6e\u7684\u5c0f Anchor \u663e\u5f97\u975e\u5e38\u7a00\u758f\uff0c\u6240\u4ee5\u9700\u8981\u505a\u4e00\u4e2a\u7a20\u5bc6\u5316\u5de5\u4f5c:\u5177\u4f53\u5c31\u662f\u5728\u6bcf\u4e2a\u611f\u53d7\u91ce\u7684\u4e2d\u5fc3\uff0c\u4e5f\u5c31\u662fSSD\u4e2dAnchor\u7684\u4e2d\u5fc3\u5bf9\u5176\u8fdb\u884c\u504f\u79fb\u3002\u6839\u636eAnchor\u7684\u5bc6\u5ea6\u5927\u5c0f\u8fdb\u884c 2,3,4 \u500d\u7684\u7a20\u5bc6\u5316\u3002 Anchor \u7684\u5bc6\u5ea6\u8ba1\u7b97\u516c\u5f0f: A_scale : anchor \u7684\u5c3a\u5ea6\uff0c\u9ed8\u8ba4\u4e3a: 32\uff0c64\uff0c128\uff0c256\uff0c512 A_interval \uff1a anchor \u7684\u95f4\u9694\uff0c\u9ed8\u8ba4\u4e3a 32\u300132\u300132\u300164\u3001128 A_density \uff1a\u8ba1\u7b97\u53ef\u5f97: 1,2,4,4,4 \uff0c\u53ef\u4ee5\u770b\u5230 32 x 32 \u548c 64 x 64 \u7684\u6846\u8fc7\u4e8e\u7a00\u758f\uff0c\u6240\u4ee5\u6211\u4eec\u8fdb\u884c\u6269\u589e\u5bc6\u5ea6\uff0c 32x32 \u9700\u8981\u6269\u589e 4 \u500d\uff0c 64x64 \u9700\u8981\u6269\u589e 2 \u500d\u3002 \u635f\u5931\u51fd\u6570 \u5206\u7c7b\u635f\u5931:\u4ea4\u53c9\u71b5\u635f\u5931 softmax loss \u505a2 \u6846\u56de\u5f52\u635f\u5931: Smooth L1 Loss","title":"FaceBoxes(17/08)"},{"location":"%E4%BA%BA%E8%84%B8%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#libfacedetection","text":"Ultra(\u8d85\u7ea7)-Light-Fast-Generic(\u901a\u7528)-Face-Detector-1MB \u8be5\u6a21\u578b\u7ed3\u6784\u57fa\u4e8essd\u8fdb\u884c\u4fee\u6539\u3002\u539f\u59cbssd\u67096\u4e2a\u5206\u652f\u505a\u9884\u6d4b\uff0c\u8fd9\u91cc\u53ea\u91c7\u7528\u4e86 4\u4e2a \u5206\u652f\u505a\u9884\u6d4b\u3002\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u57fa\u7840 anchor \u5206\u522b\u4e3a 3\u4e2a\uff0c2\u4e2a\uff0c2\u4e2a\uff0c3\u4e2a \u3002 min_boxes = [[10, 16, 24], [32, 48], [64, 96], [128, 192, 256]] code \u8be5\u90e8\u5206\u4e3b\u8981\u662f\u6d4b\u8bd5\u6a21\u578b\u5728\u4e2d\u5c0f\u5206\u8fa8\u7387\u4e0b\u7684\u6d4b\u8bd5\u96c6\u6548\u679c","title":"Libfacedetection"},{"location":"%E4%BA%BA%E8%84%B8%E6%96%B9%E5%90%91%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#dbface13m","text":"\u7f51\u7edc\u7ed3\u6784 Backbone \u9009\u7528 MobileNetV3 \u589e\u52a0\u4e86 SE \u6a21\u5757\u548c h-swish\u6fc0\u6d3b\u51fd\u6570\u6a21\u5757 \uff0c\u9009\u7528 CenterNet \u7ed3\u6784(\u5bf9\u5c0f\u76ee\u6807\u53cb\u597d\uff0c\u5177\u6709\u540e\u5904\u7406\u7b80\u6d01\u9ad8\u6548\u7b49\u7279\u70b9)\u505a\u68c0\u6d4b\u3002\u76f8\u5bf9\u4e8ev1\u7684 MobileNetV2(7M) \u6548\u679c\u597d\uff0c\u901f\u5ea6\u5feb\u3002 \u4efb\u52a1\u5934\u8bbe\u8ba1:SSH\u7684DetectModule\u548cContextModule \u5bf9\u4e8e\u4e0a\u91c7\u6837\u8bbe\u8ba1\uff0c\u6211\u4eec\u91c7\u7528Upsample+Conv+Act\u7684\u65b9\u5f0f\uff0c\u907f\u514d\u4f7f\u7528\u53cd\u5377\u79ef\u9020\u6210\u53ef\u80fd\u7684\u952f\u9f7f\u95ee\u9898\u3002 Loss\u5b9a\u4e49 \uff1a \u70ed\u529b\u56fe(HeatMap)\u635f\u5931\uff1a Focal loss \u8fd9\u91cc\u03b3\u53d62\uff0cy=1\u65f6\uff0c\u03b1\u4e3a\u6b63\u6837\u672c\u7684\u6743\u91cd\uff0c\u53c2\u7167CenterNet\uff0c\u5b9a\u4e49\u4e3a\u76ee\u6807\u5468\u56f4\u534a\u5f84\u5904 3*3 \u8303\u56f4\u4e3a1\uff0c\u5176\u4ed6\u4e3a0\uff0c\u76ee\u7684\u662f\u52a0\u5f3a\u6b63\u6837\u672c\u7684\u8bad\u7ec3\u6743\u91cd\u3002y=0\u65f6\uff0c\u03b1\u4e3a(1 - gt)4\uff0c\u6b64\u65f6GT\u662f\u4e00\u4e2a\u57fa\u4e8e\u76ee\u6807\u8ba1\u7b97\u7684\u692d\u5706\u9ad8\u65af\u56fe\uff0c\u53c2\u7167TTFNet (Training-Time-Friendly Network for Real-Time Object Detection)\u3002 \u4f4d\u7f6e\u5750\u6807\u504f\u79fb\u91cf\u635f\u5931: GIoU Loss \u4eba\u8138\u5173\u952e\u70b9 Landmark \u56de\u5f52loss: WingLoss \u7531\u4e8e SmoothL1 Loss \u5bf9\u4e8e\u8f83\u5927\u8bef\u5dee\u65f6\u6bd4\u8f83\u654f\u611f\uff0c\u4f46\u662f\u5bf9\u4e2d\u5c0f\u8bef\u5dee\u5219\u6bd4\u8f83\u4e0d\u654f\u611f\uff0c\u800c\u5bfc\u81f4\u5173\u952e\u70b9\u65e0\u6cd5\u5f97\u5230\u7cbe\u7ec6\u7ed3\u679c\uff0c\u56e0\u6b64\u8003\u8651\u52a0\u91cd\u5bf9\u4e2d\u5c0f\u8bef\u5dee\u7684\u5173\u6ce8 \u8fd9\u91cc\u611f\u89c9\u7528\u5f52\u4e00\u5316\u540e\u7684\u65b9\u5f0f\u6548\u679c\u4f1a\u66f4\u597d \u6570\u636e\u589e\u5e7f \u6a21\u578b\u4e3b\u8981\u4f7f\u7528\u4e86 random filp\u3001random scaling\u3001color jittering\u3001randomly crop square patch\u3001image compress \u7b49\u56fe\u50cf\u53d8\u6362\u65b9\u5f0f\u3002","title":"DBFace\u5347\u7ea7(1.3M):\u5bf9\u6234\u53e3\u7f69\u6570\u636e\u4e5f\u53cb\u597d"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","text":"VGG \u00b6 VGGNet\u6709\u4e00\u4e2a\u663e\u8457\u7684\u7279\u70b9\uff1a\u6bcf\u6b21\u7ecf\u8fc7\u6c60\u5316\u5c42\uff08maxpool\uff09\u540e\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u51cf\u5c0f\u4e00\u500d\uff0c\u800c\u901a\u9053\u6570\u5219\u589e\u52a0\u4e00\u500d\uff08\u6700\u540e\u4e00\u4e2a\u6c60\u5316\u5c42\u9664\u5916\uff09 VGGNet\u4e2d\uff0c\u4f7f\u7528\u7684\u5377\u79ef\u6838\u57fa\u672c\u90fd\u662f 3\u00d73 \uff0c\u800c\u4e14\u5f88\u591a\u5730\u65b9\u51fa\u73b0\u4e86\u591a\u4e2a 3\u00d73 \u5806\u53e0\u7684\u73b0\u8c61\uff0c\u8fd9\u79cd\u7ed3\u6784\u7684\u4f18\u70b9\u5728\u4e8e\uff0c\u9996\u5148\u4ece\u611f\u53d7\u91ce\u6765\u770b\uff0c\u4e24\u4e2a 3\u00d73 \u7684\u5377\u79ef\u6838\u4e0e\u4e00\u4e2a 5\u00d75 \u7684\u5377\u79ef\u6838\u662f\u4e00\u6837\u7684\uff1b\u5176\u6b21\uff0c\u540c\u7b49\u611f\u53d7\u91ce\u65f6\uff0c 3\u00d73 \u5377\u79ef\u6838\u7684\u53c2\u6570\u91cf\u66f4\u5c11\u3002\u66f4\u4e3a\u91cd\u8981\u7684\u662f\uff0c\u4e24\u4e2a 3\u00d73 \u5377\u79ef\u6838\u7684\u975e\u7ebf\u6027\u80fd\u529b\u8981\u6bd4 5\u00d75 \u5377\u79ef\u6838\u5f3a\uff0c\u56e0\u4e3a\u5176\u62e5\u6709\u4e24\u4e2a\u6fc0\u6d3b\u51fd\u6570\uff0c\u53ef\u5927\u5927\u63d0\u9ad8\u5377\u79ef\u7f51\u7edc\u7684\u5b66\u4e60\u80fd\u529b\u3002 Inception \u00b6 \u4e3a\u8fdb\u4e00\u6b65\u964d\u4f4e\u7f51\u7edc\u53c2\u6570\u91cf\uff0cInception\u53c8\u589e\u52a0\u4e86\u591a\u4e2a 1\u00d71 \u7684\u5377\u79ef\u6a21\u5757,\u8fd9\u79cd 1\u00d71 \u7684\u6a21\u5757\u53ef\u4ee5\u5148\u5c06\u7279\u5f81\u56fe\u964d\u7ef4\uff0c\u518d\u9001\u7ed9 3\u00d73 \u548c 5\u00d75 \u5927\u5c0f\u7684\u5377\u79ef\u6838\uff0c\u7531\u4e8e\u901a\u9053\u6570\u7684\u964d\u4f4e\uff0c\u53c2\u6570\u91cf\u4e5f\u6709\u4e86\u8f83\u5927\u7684\u51cf\u5c11\u3002 \u6700\u540e\u7684Inception\u6a21\u5757\u5904\u4f7f\u7528\u4e86\u5168\u5c40\u5e73\u5747\u6c60\u5316\u3002\u4e3a\u4e86\u907f\u514d\u6df1\u5c42\u7f51\u7edc\u8bad\u7ec3\u65f6\u5e26\u6765\u7684\u68af\u5ea6\u6d88\u5931\u95ee\u9898. Inception v2\u8fdb\u4e00\u6b65\u901a\u8fc7\u5377\u79ef\u5206\u89e3\u4e0e\u6b63\u5219\u5316\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u8ba1\u7b97\uff0c\u589e\u52a0\u4e86BN\u5c42\uff0c\u540c\u65f6\u5229\u7528\u4e24\u4e2a\u7ea7\u8054\u76843\u00d73\u5377\u79ef\u53d6\u4ee3\u4e86Inception v1\u7248\u672c\u4e2d\u76845\u00d75\u5377\u79ef\u3002 \u66f4\u8fdb\u4e00\u6b65\uff0cInception v2\u5c06 n\u00d7n \u7684\u5377\u79ef\u8fd0\u7b97\u5206\u89e3\u4e3a 1\u00d7n \u4e0e n\u00d71 \u4e24\u4e2a\u5377\u79ef ResNet \u00b6 \u80cc\u666f:\u5f53\u65f6\u7684\u5df2\u7ecf\u8bc1\u660e\u7f51\u7edc\u6df1\u5ea6\u8d8a\u6df1\u6548\u679c\u8d8a\u597d\uff0c\u4f46\u5b9e\u9a8c\u53d1\u73b0\u7f51\u7edc\u8d8a\u6df1\u8d8a\u96be\u6536\u655b\uff0c\u51fa\u73b0\u7f51\u7edc\u9000\u5316\u73b0\u8c61(56\u5c42\u7684\u7f51\u7edc\u6bd420\u5c42\u7f51\u7edc\u6548\u679c\u8fd8\u8981\u5dee)\uff0c\u4f55\u51ef\u660e\u63d0\u51fa\u4e86\u6b8b\u5dee\u7f51\u7edc\u3002 \u666e\u901a\u795e\u7ecf\u7f51\u7edc\u53ea\u9700\u8981\u5173\u6ce8\u8f93\u51faF(x)\uff0c\u6b8b\u5dee\u7f51\u7edc\u9700\u8981\u5173\u6ce8H(x)=F(x)+x -> F(x)=H(x) - x\uff0c\u800c\u4e14\u6b8b\u5dee\u66f4\u5c0f\u5b66\u4e60\u96be\u5ea6\u5c0f\u70b9\u3002 resnet\u7684\u6539\u8fdb ResNet\u53ca\u5176\u53d8\u79cd\u7684\u7ed3\u6784\u68b3\u7406\u3001\u6709\u6548\u6027\u5206\u6790\u4e0e\u4ee3\u7801\u89e3\u8bfb \u6539\u8fdb\u4e00\uff1a\u6539\u8fdbdownsample\u90e8\u5206\uff0c\u51cf\u5c11\u4fe1\u606f\u6d41\u5931\u3002\u524d\u9762\u8bf4\u8fc7\u4e86\uff0c\u6bcf\u4e2astage\u7684\u7b2c\u4e00\u4e2aconv\u90fd\u6709\u4e0b\u91c7\u6837\u7684\u6b65\u9aa4\uff0c\u6211\u4eec\u770b\u5de6\u8fb9\u7b2c\u4e00\u5f20\u56fe\u5de6\u4fa7\u7684\u901a\u8def\uff0cinput\u6570\u636e\u8fdb\u5165\u540e\u5728\u4f1a\u7ecf\u5386\u4e00\u4e2astride=2\u76841*1\u5377\u79ef\uff0c\u5c06\u7279\u5f81\u56fe\u5c3a\u5bf8\u51cf\u5c0f\u4e3a\u539f\u5148\u7684\u4e00\u534a\uff0c\u8bf7\u6ce8\u610f1x1\u5377\u79ef\u548cstride=2\u4f1a\u5bfc\u81f4\u8f93\u5165\u7279\u5f81\u56fe\u00be\u7684\u4fe1\u606f\u4e0d\u88ab\u5229\u7528\uff0c\u56e0\u6b64ResNet-B\u7684\u6539\u8fdb\u5c31\u662f\u5c31\u662f\u5c06\u4e0b\u91c7\u6837\u79fb\u5230\u540e\u9762\u76843x3\u5377\u79ef\u91cc\u9762\u53bb\u505a\uff0c\u907f\u514d\u4e86\u4fe1\u606f\u7684\u5927\u91cf\u6d41\u5931\u3002ResNet-D\u5219\u662f\u5728ResNet-B\u7684\u57fa\u7840\u4e0a\u5c06identity\u90e8\u5206\u7684\u4e0b\u91c7\u6837\u4ea4\u7ed9avgpool\u53bb\u505a\uff0c\u907f\u514d\u51fa\u73b01x1\u5377\u79ef\u548cstride\u540c\u65f6\u51fa\u73b0\u9020\u6210\u4fe1\u606f\u6d41\u5931\u3002ResNet-C\u5219\u662f\u53e6\u4e00\u79cd\u601d\u8def\uff0c\u5c06ResNet\u8f93\u5165\u90e8\u5206\u76847x7\u5927\u5377\u79ef\u6838\u6362\u62103\u4e2a3x3\u5377\u79ef\u6838\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c0f\u8ba1\u7b97\u91cf\uff0c\u8fd9\u79cd\u505a\u6cd5\u6700\u65e9\u51fa\u73b0\u5728Inception-v2\u4e2d\u3002\u5176\u5b9e\u8fd9\u4e2aResNet-C \u6211\u6bd4\u8f83\u7591\u60d1\uff0cResNet\u8bba\u6587\u91cc\u8bf4\u5b83\u501f\u9274\u4e86VGG\u7684\u601d\u60f3\uff0c\u4f7f\u7528\u5927\u91cf\u7684\u5c0f\u5377\u79ef\u6838\uff0c\u65e2\u7136\u8fd9\u6837\u90a3\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u90e8\u5206\u4f9d\u65e7\u8981\u653e\u4e00\u4e2a7x7\u7684\u5927\u5377\u79ef\u6838\u5462\uff0c\u4e0d\u77e5\u9053\u662f\u51fa\u4e8e\u600e\u6837\u7684\u8003\u8651\uff0c\u4f46\u662f\u73b0\u5728\u7684\u591a\u6570\u7f51\u7edc\u90fd\u628a\u8fd9\u90e8\u5206\u6539\u62103\u4e2a3x3\u5377\u79ef\u6838\u7ea7\u8054\u3002 \u6539\u8fdb\u4e8c\uff1aResNet V2\u3002\u8fd9\u662f\u7531ResNet\u539f\u73ed\u4eba\u9a6c\u6253\u9020\u7684\uff0c\u4e3b\u8981\u662f\u5bf9ResNet\u90e8\u5206\u7ec4\u4ef6\u7684\u987a\u5e8f\u8fdb\u884c\u4e86\u8c03\u6574\u3002\u5404\u79cd\u9b54\u6539\u4e2d\u5e38\u89c1\u7684\u9884\u6fc0\u6d3bResNet\u5c31\u662f\u51fa\u81ea\u8fd9\u91cc\u3002 \u6a21\u578b\u8f7b\u91cf\u5316\u8bbe\u8ba1 \u4ece\u6a21\u578b\u8bbe\u8ba1\u65f6\u5c31\u91c7\u7528\u4e00\u4e9b\u8f7b\u91cf\u5316\u7684\u601d\u60f3\uff0c\u4f8b\u5982\u91c7\u7528\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u3001\u5206\u7ec4\u5377\u79ef\u7b49\u8f7b\u91cf\u5377\u79ef\u65b9\u5f0f\uff0c\u51cf\u5c11\u5377\u79ef\u8fc7\u7a0b\u7684\u8ba1\u7b97\u91cf\u3002\u6b64\u5916\uff0c\u5229\u7528\u5168\u5c40\u6c60\u5316\u6765\u53d6\u4ee3\u5168\u8fde\u63a5\u5c42\uff0c\u5229\u75281\u00d71\u5377\u79ef\u5b9e\u73b0\u7279\u5f81\u7684\u901a\u9053\u964d\u7ef4\uff0c\u4e5f\u53ef\u4ee5\u964d\u4f4e\u6a21\u578b\u7684\u8ba1\u7b97\u91cf\uff0c\u8fd9\u4e24\u70b9\u5728\u4f17\u591a\u7f51\u7edc\u4e2d\u5df2\u7ecf\u5f97\u5230\u4e86\u5e94\u7528\u3002 SqueezeNet \u00b6 SqueezeNet\u5c42\uff1a\u9996\u5148\u4f7f\u7528 1\u00d71 \u5377\u79ef\u8fdb\u884c\u964d\u7ef4\uff0c\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e0d\u53d8\uff0c\u8fd9\u91cc\u7684S1\u5c0f\u4e8eM\uff0c\u8fbe\u5230\u4e86\u538b\u7f29\u7684\u76ee\u7684\u3002 Expand\u5c42\uff1a\u5e76\u884c\u5730\u4f7f\u7528 1\u00d71 \u5377\u79ef\u4e0e 3\u00d73 \u5377\u79ef\u83b7\u5f97\u4e0d\u540c\u611f\u53d7\u91ce\u7684\u7279\u5f81\u56fe\uff0c\u6709\u70b9\u7c7b\u4f3cInception\u6a21\u5757\uff0c\u8fbe\u5230\u6269\u5c55\u7684\u76ee\u7684\u3002 Concat\uff1a\u5bf9\u5f97\u5230\u7684\u4e24\u4e2a\u7279\u5f81\u56fe\u8fdb\u884c**\u901a\u9053\u62fc\u63a5**\uff0c\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa\u3002 \u6a21\u5757\u4e2d\u7684S1\u3001e1\u4e0ee2\u90fd\u662f\u53ef\u8c03\u7684\u8d85\u53c2\uff0cFire Module\u9ed8\u8ba4e1=e2=4\u00d7S1\u3002\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528\u4e86ReLU\u51fd\u6570\u3002 SqueezeNet\u4e00\u5171\u4f7f\u7528\u4e863\u4e2aPool\u5c42\uff0c\u524d\u4e24\u4e2a\u662fMax Pooling\u5c42\uff0c\u6b65\u957f\u4e3a2\uff0c\u6700\u540e\u4e00\u4e2a\u4e3a**\u5168\u5c40\u5e73\u5747\u6c60\u5316**\uff0c\u5229\u7528\u8be5\u5c42\u53ef\u4ee5\u53d6\u4ee3\u5168\u8fde\u63a5\u5c42\uff0c\u51cf\u5c11\u4e86\u8ba1\u7b97\u91cf\u3002 \u5168\u5c40\u5e73\u5747\u6c60\u5316 :\u6211\u4eec\u5bf9\u6bcf\u4e2a\u7279\u5f81\u56fe\u4e00\u6574\u5f20\u56fe\u7247\u8fdb\u884c\u5168\u5c40\u5747\u503c\u6c60\u5316\uff0c\u8fd9\u6837\u6bcf\u5f20\u7279\u5f81\u56fe\u90fd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f93\u51fa\u3002\u8fd9\u6837\u91c7\u7528\u5747\u503c\u6c60\u5316\uff0c\u8fde\u53c2\u6570\u90fd\u7701\u4e86\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u7f51\u7edc\u53c2\u6570\uff0c\u907f\u514d\u8fc7\u62df\u5408. SqueezeNet\u867d\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86\u5377\u79ef\u8ba1\u7b97\u91cf\uff0c\u4f46\u4ecd\u7136\u4f7f\u7528\u4f20\u7edf\u7684\u5377\u79ef\u8ba1\u7b97\u65b9\u5f0f MobileNet \u00b6 MobileNet\u5229\u7528\u4e86\u66f4\u4e3a\u9ad8\u6548\u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7684\u65b9\u5f0f\uff0c\u8fdb\u4e00\u6b65\u52a0\u901f\u4e86\u5377\u79ef\u7f51\u7edc\u5728\u79fb\u52a8\u7aef\u7684\u5e94\u7528 \u666e\u901a\u5377\u79ef \u5047\u8bbe\u6709\u4e00\u4e2a 3\u00d73 \u5927\u5c0f\u7684\u5377\u79ef\u5c42\uff0c\u5176\u8f93\u5165\u901a\u9053\u4e3a 16 \u3001\u8f93\u51fa\u901a\u9053\u4e3a 32 \uff0c\u4e00\u5171\u9700\u8981 (3\u00d73\u00d716)\u00d732 =4068 \u4e2a\u53c2\u6570\u3002 \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef=\u6df1\u5ea6\u5377\u79ef+\u9010\u70b9\u5377\u79ef( 1x1 ) \u752816\u4e2a 3\u00d73 \u5927\u5c0f\u7684\u5377\u79ef\u6838\uff081\u901a\u9053\uff09\u5206\u522b\u4e0e\u8f93\u5165\u768416\u901a\u9053\u7684\u6570\u636e\u505a\u5377\u79ef\uff08\u8fd9\u91cc\u4f7f\u7528\u4e8616\u4e2a1\u901a\u9053\u7684\u5377\u79ef\u6838\uff0c\u8f93\u5165\u6570\u636e\u7684\u6bcf\u4e2a\u901a\u9053\u75281\u4e2a3\u00d73\u7684\u5377\u79ef\u6838\u5377\u79ef\uff09\uff0c\u5f97\u5230\u4e8616\u4e2a\u901a\u9053\u7684\u7279\u5f81\u56fe\uff0c\u6211\u4eec\u8bf4\u8be5\u6b65\u64cd\u4f5c\u662fdepthwise\uff08\u9010\u5c42\uff09\u7684\uff0c\u5728\u53e0\u52a016\u4e2a\u7279\u5f81\u56fe\u4e4b\u524d\u63a5\u7740\u752832\u4e2a 1\u00d71 \u5927\u5c0f\u7684\u5377\u79ef\u6838\uff0816\u901a\u9053\uff09\u5728\u8fd916\u4e2a\u7279\u5f81\u56fe\u8fdb\u884c\u5377\u79ef\u8fd0\u7b97\uff0c\u5c0616\u4e2a\u901a\u9053\u7684\u4fe1\u606f\u8fdb\u884c\u878d\u5408\uff08\u75281\u00d71\u7684\u5377\u79ef\u8fdb\u884c\u4e0d\u540c\u901a\u9053\u95f4\u7684\u4fe1\u606f\u878d\u5408\uff09\uff0c\u6211\u4eec\u8bf4\u8be5\u6b65\u64cd\u4f5c\u662fpointwise\uff08\u9010\u50cf\u7d20\uff09\u7684\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u6574\u4e2a\u8fc7\u7a0b\u4f7f\u7528\u4e86 3\u00d73\u00d716+\uff081\u00d71\u00d716\uff09\u00d732 =656 \u4e2a\u53c2\u6570\u3002 \u603b\u4f53\u8ba1\u7b97\u91cf\u7ea6\u7b49\u4e8e\u6807\u51c6\u5377\u79ef\u76841/9\uff0c\u6781\u5927\u5730\u51cf\u5c11\u4e86\u5377\u79ef\u8fc7\u7a0b\u7684\u8ba1\u7b97\u91cf\u3002 \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u6a21\u5757\u7ed3\u6784\u56fe \u5728\u6b64\u4f7f\u7528\u4e86ReLU6\u6765\u66ff\u4ee3\u539f\u59cb\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u5c06ReLU\u7684\u6700\u5927\u8f93\u51fa\u9650\u5236\u57286\u4ee5\u4e0b \u4f7f\u7528ReLU6\u7684\u539f\u56e0\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3\u79fb\u52a8\u7aef\u90e8\u7f72\u7684\u9700\u6c42\u3002\u79fb\u52a8\u7aef\u901a\u5e38\u4f7f\u7528Float16\u6216\u8005Int8\u7b49\u8f83\u4f4e\u7cbe\u5ea6\u7684\u6a21\u578b\uff0c\u5982\u679c\u4e0d\u5bf9\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u51fa\u8fdb\u884c\u9650\u5236\u7684\u8bdd\uff0c\u6fc0\u6d3b\u503c\u7684\u5206\u5e03\u8303\u56f4\u4f1a\u5f88\u5927\uff0c\u800c\u4f4e\u7cbe\u5ea6\u7684\u6a21\u578b\u5f88\u96be\u7cbe\u786e\u5730\u8986\u76d6\u5982\u6b64\u5927\u8303\u56f4\u7684\u8f93\u51fa\uff0c\u8fd9\u6837\u4f1a\u5e26\u6765\u7cbe\u5ea6\u7684\u635f\u5931\u3002 MobileNetv1\u7ed3\u6784 \u4e0eVGGNet\u7c7b\u4f3c\uff0c\u4e5f\u662f\u4e00\u4e2a\u9010\u5c42\u5806\u53e0\u5f0f\u7f51\u7edc Dw\u4ee3\u8868\u4e00\u4e2a\u6df1\u5ea6\u5206\u89e3\u5377\u79ef\uff0c\u5176\u540e\u9700\u8981\u8ddf\u4e00\u4e2a 1\u00d71 \u5377\u79ef\uff0cs2\u4ee3\u8868\u6b65\u957f\u4e3a2\u7684\u5377\u79ef\uff0c\u53ef\u4ee5\u7f29\u5c0f\u7279\u5f81\u56fe\u5c3a\u5bf8\uff0c\u8d77\u5230\u4e0ePooling\u5c42\u4e00\u6837\u7684\u4f5c\u7528\u3002\u7f51\u7edc\u6700\u540e\u5229\u7528\u4e00\u4e2a\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff0c\u9001\u5165\u5230\u5168\u8fde\u63a5\u4e0eSoftmax\u8fdb\u884c\u5206\u7c7b\u9884\u6d4b\u3002 MobileNet v1\u8fd8\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u8d85\u53c2\u6570\uff0c\u7528\u6765\u63a7\u5236\u6a21\u578b\u7684\u5927\u5c0f\u4e0e\u8ba1\u7b97\u91cf \u5bbd\u5ea6\u4e58\u5b50\uff1a\u7528\u4e8e\u63a7\u5236\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\uff0c\u8bb0\u505a\u03b1\uff0c\u5f53\u03b1\uff1c1\u65f6\uff0c\u6a21\u578b\u4f1a\u53d8\u5f97\u66f4\u8584\uff0c\u53ef\u4ee5\u5c06\u8ba1\u7b97\u91cf\u51cf\u5c11\u4e3a\u539f\u6765\u7684\u03b12\u3002 \u5206\u8fa8\u7387\u4e58\u5b50\uff1a\u7528\u4e8e\u63a7\u5236\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u8bb0\u505a\u03c1\uff0c\u5728\u76f8\u5e94\u7684\u7279\u5f81\u56fe\u4e0a\u5e94\u7528\u8be5\u4e58\u5b50\uff0c\u4e5f\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u6bcf\u4e00\u5c42\u7684\u8ba1\u7b97\u91cf\u3002 \u7f3a\u70b9 \u6a21\u578b\u7ed3\u6784\u8f83\u4e3a\u590d\u53e4\uff0c\u91c7\u7528\u4e86\u4e0eVGGNet\u7c7b\u4f3c\u7684\u5377\u79ef\u7b80\u5355\u5806\u53e0\uff0c\u6ca1\u6709\u91c7\u7528\u6b8b\u5dee\u3001\u7279\u5f81\u878d\u5408\u7b49\u5148\u8fdb\u7684\u7ed3\u6784\u3002 \u6df1\u5ea6\u5206\u89e3\u5377\u79ef\u4e2d\u5404\u901a\u9053\u76f8\u4e92\u72ec\u7acb\uff0c\u5377\u79ef\u6838\u7ef4\u5ea6\u8f83\u5c0f\uff0c\u8f93\u51fa\u7279\u5f81\u4e2d\u53ea\u6709\u8f83\u5c11\u7684\u8f93\u5165\u7279\u5f81\uff0c\u518d\u52a0\u4e0aReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u4f7f\u5f97\u8f93\u51fa\u5f88\u5bb9\u6613\u53d8\u4e3a0\uff0c\u96be\u4ee5\u6062\u590d\u6b63\u5e38\u8bad\u7ec3\uff0c\u56e0\u6b64\u5728\u8bad\u7ec3\u65f6\u90e8\u5206\u5377\u79ef\u6838\u5bb9\u6613\u88ab\u8bad\u7ec3\u5e9f\u6389\u3002 MobileNetv2 \u5229\u7528\u6b8b\u5dee\u7ed3\u6784\u53d6\u4ee3\u4e86\u539f\u59cb\u7684\u5377\u79ef\u5806\u53e0\u65b9\u5f0f\uff0c\u63d0\u51fa\u4e86\u4e00\u4e2aInverted Residual Block\u7ed3\u6784 \u4f20\u7edf\u7684\u6b8b\u5dee\u7f51\u7edc\u901a\u5e38\u5148\u4f7f\u75281\u00d71\u5377\u79ef\u8fdb\u884c\u7279\u5f81\u964d\u7ef4\uff0c\u51cf\u5c11\u901a\u9053\u6570\uff0c\u518d\u9001\u5165 3\u00d73 \u5377\u79ef\uff0c\u6700\u540e\u518d\u5229\u75281\u00d71\u5377\u79ef\u5347\u7ef4\uff0c\u7c7b\u4f3c\u6c99\u6f0f\u3002 MobileNet v2\u4e2d\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u6765\u9010\u901a\u9053\u8ba1\u7b97\uff0c\u672c\u8eab\u8ba1\u7b97\u91cf\u5c31\u6bd4\u8f83\u5c11\uff0c\u56e0\u6b64\u5728\u6b64\u53ef\u4ee5\u4f7f\u75281\u00d71\u5377\u79ef\u6765\u5347\u7ef4\uff0c\u5728\u8ba1\u7b97\u91cf\u589e\u52a0\u4e0d\u5927\u7684\u57fa\u7840\u4e0a\u83b7\u53d6\u66f4\u597d\u7684\u6548\u679c\uff0c\u6700\u540e\u518d\u75281\u00d71\u5377\u79ef\u964d\u7ef4\uff0c\u7c7b\u4f3c\u67f3\u53f6\u3002 \u53bb\u6389Block\u7684ReLu6\u5c42 \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u5f97\u5230\u7684\u7279\u5f81\u5bf9\u5e94\u4e8e\u4f4e\u7ef4\u7a7a\u95f4\uff0c\u7279\u5f81\u8f83\u5c11\uff0c\u5982\u679c\u540e\u7eed\u63a5\u7ebf\u6027\u6620\u5c04\u5219\u80fd\u591f\u4fdd\u7559\u5927\u90e8\u5206\u7279\u5f81\uff0c\u800c\u5982\u679c\u63a5\u975e\u7ebf\u6027\u6620\u5c04\u5982ReLU\uff0c\u5219\u4f1a\u7834\u574f\u7279\u5f81\uff0c\u9020\u6210\u7279\u5f81\u7684\u635f\u8017\uff0c\u4ece\u800c\u4f7f\u5f97\u6a21\u578b\u6548\u679c\u53d8\u5dee\uff0c\u9488\u5bf9\u6b64\u95ee\u9898\uff0cMobileNet v2\u76f4\u63a5\u53bb\u6389\u4e86\u6bcf\u4e00\u4e2aBlock\u4e2d\u6700\u540e\u7684ReLU6\u5c42(\u4e0d\u662f\u6240\u6709)\uff0c\u51cf\u5c11\u4e86\u7279\u5f81\u7684\u635f\u8017\uff0c\u83b7\u5f97\u4e86\u66f4\u597d\u7684\u68c0\u6d4b\u6548\u679c\u3002 MobileNetv3 MobileNetv3\u6709\u4e24\u4e2alarge\u548csmall\uff0csmall\u7684\u7cbe\u5ea6\u548cMobileNetv2\u76f8\u4f3c \u6574\u4f53\u6765\u8bf4MobileNetV3\u6709\u4e24\u5927\u521b\u65b0\u70b9 \u4e92\u8865\u641c\u7d22\u6280\u672f\u7ec4\u5408\uff1a\u7531\u8d44\u6e90\u53d7\u9650\u7684NAS\u6267\u884c\u6a21\u5757\u7ea7\u641c\u7d22(\u4f7f\u7528\u4e86\u795e\u7ecf\u7f51\u7edc\u641c\u7d22\u529f\u80fd\u6765**\u6784\u5efa\u5168\u5c40\u7684\u7f51\u7edc\u7ed3\u6784**)\uff0cNetAdapt\u6267\u884c\u5c40\u90e8\u641c\u7d22( \u5bf9\u6bcf\u5c42\u7684\u6838\u6570\u91cf\u8fdb\u884c\u4f18\u5316 )\u3002 \u7f51\u7edc\u7ed3\u6784\u6539\u8fdb\uff1a\u5c06\u6700\u540e\u4e00\u6b65\u7684**\u5e73\u5747\u6c60\u5316\u5c42**\u524d\u79fb\u5e76\u79fb\u9664\u6700\u540e\u4e00\u4e2a\u5377\u79ef\u5c42\uff0c\u5f15\u5165 h-swish \u6fc0\u6d3b\u51fd\u6570\u3002 \u5728mobilenetv2\u4e2d\uff0c\u5728avg pooling\u4e4b\u524d\uff0c\u5b58\u5728\u4e00\u4e2a1x1\u7684\u5377\u79ef\u5c42\uff0c\u76ee\u7684\u662f\u63d0\u9ad8\u7279\u5f81\u56fe\u7684\u7ef4\u5ea6\uff0c\u66f4\u6709\u5229\u4e8e\u7ed3\u6784\u7684\u9884\u6d4b\uff0c\u4f46\u662f\u8fd9\u5176\u5b9e\u5e26\u6765\u4e86\u4e00\u5b9a\u7684\u8ba1\u7b97\u91cf\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f5c\u8005\u4fee\u6539\u4e86\uff0c\u5c06\u5176\u653e\u5728avg pooling\u7684\u540e\u9762\uff0c\u9996\u5148\u5229\u7528avg pooling\u5c06\u7279\u5f81\u56fe\u5927\u5c0f\u75317x7\u964d\u5230\u4e861x1\uff0c\u964d\u52301x1\u540e\uff0c\u7136\u540e\u518d\u5229\u75281x1\u63d0\u9ad8\u7ef4\u5ea6\uff0c\u8fd9\u6837\u5c31\u51cf\u5c11\u4e867x7=49\u500d\u7684\u8ba1\u7b97\u91cf\u3002\u5e76\u4e14\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7684\u964d\u4f4e\u8ba1\u7b97\u91cf\uff0c\u4f5c\u8005\u76f4\u63a5\u53bb\u6389\u4e86\u524d\u9762\u7eba\u9524\u578b\u5377\u79ef\u76843x3\u4ee5\u53ca1x1\u5377\u79ef\uff0c\u8fdb\u4e00\u6b65\u51cf\u5c11\u4e86\u8ba1\u7b97\u91cf\uff0c\u5c31\u53d8\u6210\u4e86\u5982\u4e0b\u56fe\u7b2c\u4e8c\u884c\u6240\u793a\u7684\u7ed3\u6784\uff0c\u4f5c\u8005\u5c06\u5176\u4e2d\u76843x3\u4ee5\u53ca1x1\u53bb\u6389\u540e\uff0c\u7cbe\u5ea6\u5e76\u6ca1\u6709\u5f97\u5230\u635f\u5931\u3002\u8fd9\u91cc\u964d\u4f4e\u4e86\u5927\u7ea615ms\u7684\u901f\u5ea6\u3002 MobileNetV3\u662f\u7efc\u5408\u4e86\u4ee5\u4e0b\u4e09\u79cd\u6a21\u578b\u7684\u601d\u60f3 \uff1a MobileNetV1 \u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef MobileNetV2 \u7684\u5177\u6709\u7ebf\u6027\u74f6\u9888\u7684\u9006\u6b8b\u5dee\u7ed3\u6784 MnasNet \u7684\u57fa\u4e8esqueeze and excitation\u7ed3\u6784\u7684\u8f7b\u91cf\u7ea7\u6ce8\u610f\u529b\u6a21\u578b\u3002 ShuffleNet \u00b6 \u5f53\u524d\u5148\u8fdb\u7684\u5377\u79ef\u7f51\u7edc\u901a\u5e38\u57283\u00d73\u5377\u79ef\u4e4b\u524d\u589e\u52a0\u4e00\u4e2a1\u00d71\u5377\u79ef\uff0c\u7528\u4e8e\u901a\u9053\u95f4\u7684\u4fe1\u606f\u6d41\u901a\u4e0e\u964d\u7ef4\u3002\u7136\u800c\u5728ResNeXt\u3001MobileNet\u7b49\u9ad8\u6027\u80fd\u7684\u7f51\u7edc\u4e2d\uff0c1\u00d71\u5377\u79ef\u5374\u5360\u7528\u4e86\u5927\u91cf\u7684\u8ba1\u7b97\u8d44\u6e90\uff0cShuffleNet v1\u4ece\u4f18\u5316\u7f51\u7edc\u7ed3\u6784\u7684\u89d2\u5ea6\u51fa\u53d1\uff0c\u5229\u7528**\u7ec4\u5377\u79ef**\u4e0e**\u901a\u9053\u6df7\u6d17**\uff08Channel Shuffle\uff09\u7684\u64cd\u4f5c\u6709\u6548\u964d\u4f4e\u4e86 1\u00d71 \u9010\u70b9\u5377\u79ef\u7684\u8ba1\u7b97\u91cf\uff0c\u662f\u4e00\u4e2a\u6781\u4e3a\u9ad8\u6548\u7684\u8f7b\u91cf\u5316\u7f51\u7edc\u3002 \u5206\u7ec4\u5377\u79ef \u901a\u9053\u6df7\u6d17 a\u56fe\u4ee3\u8868\u4e86\u5e38\u89c4\u7684\u4e24\u4e2a\u7ec4\u5377\u79ef\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6ca1\u6709\u9010\u70b9\u76841\u00d71\u5377\u79ef\u6216\u8005\u901a\u9053\u6df7\u6d17\uff0c\u6700\u7ec8\u8f93\u51fa\u7684\u7279\u5f81\u4ec5\u7531\u4e00\u90e8\u5206\u8f93\u5165\u901a\u9053\u7684\u7279\u5f81\u8ba1\u7b97\u5f97\u51fa\uff0c\u8fd9\u79cd\u64cd\u4f5c\u963b\u788d\u4e86\u4fe1\u606f\u7684\u6d41\u901a\uff0c\u8fdb\u800c\u964d\u4f4e\u4e86\u7279\u5f81\u7684\u8868\u8fbe\u80fd\u529b\u3002 b\u56fe\u6211\u4eec\u5e0c\u671b\u5728\u4e00\u4e2a\u7ec4\u5377\u79ef\u4e4b\u540e\uff0c\u80fd\u591f\u5c06\u7279\u5f81\u56fe\u4e4b\u95f4\u7684\u901a\u9053\u4fe1\u606f\u8fdb\u884c\u878d\u5408\uff0c\u5c06\u6bcf\u4e00\u4e2a\u7ec4\u7684\u7279\u5f81\u5206\u6563\u5230\u4e0d\u540c\u7684\u7ec4\u4e4b\u540e\uff0c\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a\u7ec4\u5377\u79ef\uff0c\u8fd9\u6837\u8f93\u51fa\u7684\u7279\u5f81\u5c31\u80fd\u591f\u5305\u542b\u6bcf\u4e00\u4e2a\u7ec4\u7684\u7279\u5f81\uff0c\u800c\u901a\u9053\u6df7\u6d17\u6070\u597d\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5982\u56fec\u6240\u793a\u3002 ShuffleNetv1 a\u56fe\u662f\u4e00\u4e2a\u5e26\u6709\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7684\u666e\u901a\u6b8b\u5dee\u6a21\u5757\uff0c\u8fd9\u91cc\u7684 1\u00d71 \u662f\u9010\u70b9\u7684\u5377\u79ef\u3002\u76f8\u6bd4\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\uff0c1\u00d71\u8ba1\u7b97\u91cf\u8f83\u5927\u3002 b\u56fe\u5219\u662f\u57fa\u672c\u7684ShuffleNet\u57fa\u672c\u5355\u5143\uff0c\u53ef\u4ee5\u770b\u5230 1\u00d71 \u5377\u79ef\u91c7\u7528\u7684\u662f**\u7ec4\u5377\u79ef**\uff0c\u7136\u540e\u8fdb\u884c\u901a\u9053\u7684\u6df7\u6d17\uff0c\u8fd9\u4e24\u6b65\u53ef\u4ee5\u53d6\u4ee31\u00d71\u7684\u9010\u70b9\u5377\u79ef\uff0c\u5e76\u4e14\u5927\u5927\u964d\u4f4e\u4e86\u8ba1\u7b97\u91cf\u30023\u00d73\u5377\u79ef\u4ecd\u7136\u91c7\u7528\u6df1\u5ea6\u53ef\u5206\u79bb\u7684\u65b9\u5f0f\u3002 c\u56fe\u662f\u5e26\u6709\u964d\u91c7\u6837\u7684ShuffleNet\u5355\u5143\uff0c\u5728\u65c1\u8def\u4e2d\u4f7f\u7528\u4e86\u6b65\u957f\u4e3a2\u76843\u00d73\u5e73\u5747\u6c60\u5316\u8fdb\u884c\u964d\u91c7\u6837\uff0c\u5728\u4e3b\u8def\u4e2d3\u00d73\u5377\u79ef\u6b65\u957f\u4e3a2\u5b9e\u73b0\u964d\u91c7\u6837\u3002\u53e6\u5916\uff0c\u7531\u4e8e\u964d\u91c7\u6837\u65f6\u901a\u5e38\u8981\u4f34\u6709\u901a\u9053\u6570\u7684\u589e\u52a0\uff0cShuffleNet\u76f4\u63a5\u5c06\u4e24\u5206\u652f\u62fc\u63a5\u5728\u4e00\u8d77\u6765\u5b9e\u73b0\u4e86\u901a\u9053\u6570\u7684\u589e\u52a0\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u7684\u9010\u70b9\u76f8\u52a0\u3002 g\u4ee3\u8868\u7ec4\u5377\u79ef\u7684\u7ec4\u6570\uff0c\u4ee5\u63a7\u5236\u5377\u79ef\u8fde\u63a5\u7684\u7a00\u758f\u6027\u3002\u7ec4\u6570\u8d8a\u591a\uff0c\u8ba1\u7b97\u91cf\u8d8a\u5c11\uff0c\u56e0\u6b64\u5728\u76f8\u540c\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7684\u5377\u79ef\u6838\u4ee5\u83b7\u53d6\u66f4\u591a\u7684\u901a\u9053\u6570\u3002 \u53ef\u4ee5\u770b\u5230\u5f00\u59cb\u4f7f\u7528\u7684\u666e\u901a\u76843x3\u7684\u5377\u79ef\u548cmax pool\u5c42\uff08\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u867d\u7136\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u8ba1\u7b97\u91cf\uff0c\u4f46\u5176\u5b58\u50a8\u8bbf\u95ee\u6548\u7387\u8f83\u5dee\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u5377\u79ef\u5e76\u6ca1\u6709\u4f7f\u7528ShuffleNet\u57fa\u672c\u5355\u5143\uff09\u3002 \u7136\u540e\u662f\u4e09\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e2a\u9636\u6bb5\u90fd\u662f\u91cd\u590d\u5806\u79ef\u4e86\u51e0\u4e2aShuffleNet\u7684\u57fa\u672c\u5355\u5143\u3002\u8fd93\u4e2a\u9636\u6bb5\u7684\u7b2c\u4e00\u4e2aBlock\u7684\u6b65\u957f\u4e3a2\u4ee5\u5b8c\u6210\u964d\u91c7\u6837\uff0c\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u901a\u9053\u6570\u662f\u4e0a\u4e00\u4e2a\u7684\u4e24\u500d\u3002 ShuffleNet_v2 \u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684Channel Split\u64cd\u4f5c\uff0c\u5982\u56fe7.13c\u6240\u793a\uff0c\u5c06\u8f93\u5165\u7279\u5f81\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u8fdb\u884c\u771f\u6b63\u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u8ba1\u7b97\uff0c\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e0e\u53e6\u4e00\u90e8\u5206\u8fdb\u884c\u901a\u9053Concat\uff0c\u6700\u540e\u8fdb\u884c\u901a\u9053\u7684\u6df7\u6d17\u64cd\u4f5c\uff0c\u5b8c\u6210\u4fe1\u606f\u7684\u4e92\u901a\u3002 \u6574\u4e2a\u8fc7\u7a0b\u6ca1\u6709\u4f7f\u7528\u5230 1\u00d71 \u7ec4\u5377\u79ef\uff0c\u4e5f\u907f\u514d\u4e86\u9010\u70b9\u76f8\u52a0\u7684\u64cd\u4f5c\u3002 \u5728\u9700\u8981\u964d\u91c7\u6837\u4e0e\u901a\u9053\u7ffb\u500d\u65f6\uff0cShuffleNet v2\u53bb\u6389\u4e86Channel Split\u64cd\u4f5c\uff0c\u8fd9\u6837\u6700\u540eConcat\u65f6\u901a\u9053\u6570\u4f1a\u7ffb\u500d GhostNet:[\u0261o\u028ast] \u00b6 \u8bba\u6587 | Code \u4f18\u70b9 Ghost Module\u662f\u4e00\u4e2a\u5373\u63d2\u5373\u7528\u6a21\u5757\uff0c\u53ef\u4ee5\u65e0\u7f1d\u8854\u63a5\u73b0\u6709\u7684CNN\u4e2d \u91c7\u7528Ghost Module\u8bbe\u8ba1\u7684Ghost Net \uff0c\u5728ILSVRC-2012\u4e0atop1\u8d85\u8fc7Mobilenet-V3\uff0c\u5e76\u4e14\u53c2\u6570\u66f4\u5c11 \u8bba\u6587\u63d0\u51fa\u89c2\u70b9 \u7279\u5f81\u56fe\u5197\u4f59 Ghost\u5377\u79ef \u03a6\u7ebf\u6027\u53d8\u6362\u662f\u4ec0\u4e48\uff1f \u03a6\u7ebf\u6027\u53d8\u6362\u5176\u5b9e\u4e5f\u5c31\u662f 3x3 \u5377\u79ef\uff0c\u5377\u79ef\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u7ebf\u6027\u7ec4\u5408\u7684\u8fd0\u7b97\uff0c\u53ea\u4e0d\u8fc7\u5728\u6211\u4eec\u589e\u52a0\u4e86\u6fc0\u6d3b\u51fd\u6570\u4e4b\u540e\u8d4b\u4e88\u4e86\u5176\u975e\u7ebf\u6027 class GhostModule ( nn . Module ): def __init__ ( self , inp , oup , kernel_size = 1 , ratio = 2 , dw_size = 3 , stride = 1 , relu = True ): super ( GhostModule , self ) . __init__ () self . oup = oup init_channels = math . ceil ( oup / ratio ) new_channels = init_channels * ( ratio - 1 ) # \u8fd9\u4e2a\u662f\u2461\u8fc7\u7a0b\uff0c\u5c31\u662f\u666e\u901a\u7684\u5377\u79ef\uff0c\u8f93\u51fa\u901a\u9053\u4e3aN/2 self . primary_conv = nn . Sequential ( nn . Conv2d ( inp , init_channels , kernel_size , stride , kernel_size // 2 , bias = False ), nn . BatchNorm2d ( init_channels ), nn . ReLU ( inplace = True ) if relu else nn . Sequential (), ) # \u7ebf\u6027\u53d8\u6362 self . cheap_operation = nn . Sequential ( # 3x3\u5377\u79ef\u53ef\u4ee5\u7406\u89e3 nn . Conv2d ( init_channels , new_channels , dw_size , 1 , dw_size // 2 , groups = init_channels , bias = False ), nn . BatchNorm2d ( new_channels ), # \u7528relu\u53c2\u6570\u6765\u63a7\u5236\u662f\u5426\u8fdb\u884c\u7ebf\u6027\u53d8\u6362 nn . ReLU ( inplace = True ) if relu else nn . Sequential (), ) def forward ( self , x ): x1 = self . primary_conv ( x ) x2 = self . cheap_operation ( x1 ) out = torch . cat ([ x1 , x2 ], dim = 1 ) # \u6839\u636e\u901a\u9053\u8fdb\u884c\u62fc\u63a5 return out [:,: self . oup ,:,:] Ghost\u6a21\u5757 Ghost Bottlenecks \uff0c\u7ed3\u6784\u4e0eResNet\u7684\u662f\u7c7b\u4f3c\u7684\uff0c\u5e76\u4e14\u4e0emobilenet-v2\u4e00\u6837\u5728\u7b2c\u4e8c\u4e2amodule\u4e4b\u540e\u4e0d\u91c7\u7528ReLU\u6fc0\u6d3b\u51fd\u6570\u3002 \u5de6\u8fb9\u662fstride=1\u7684Ghost Bottlenecks\uff0c\u53f3\u8fb9\u662fstride=2\u7684Ghost Bottlenecks\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u7f29\u51cf\u7279\u5f81\u56fe\u5927\u5c0f\u3002 VoVNet \u00b6 \u8bba\u6587 | Code1 | Code2 DenseNet\u7684\u53c2\u6570\u91cf\u548c\u8ba1\u7b97\u91cf\u76f8\u5bf9\u4e8eResNet\u5c11\uff0c\u4f46\u662f\u901f\u5ea6\u5374\u6162\uff0c\u4e3b\u8981\u662f: DenseNet\u4e2d\u5bc6\u96c6\u8fde\u63a5\u6240\u5bfc\u81f4\u7684**\u9ad8\u5185\u5b58\u8bbf\u95ee\u6210\u672c**(\u7531\u4e8e\u9700\u8981\u8fdb\u884c\u591a\u6b21Concatnate\u64cd\u4f5c\uff0c \u6570\u636e\u9700\u8981\u88ab\u590d\u5236\u591a\u6b21\uff0c\u663e\u5b58\u5bb9\u6613\u589e\u52a0\u5f97\u5f88\u5feb )\uff0c\u9644:\u6839\u636eshuffleNet V2\u8bba\u6587\u4e2d\u5185\u5b58\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u8f93\u5165\u901a\u9053\u548c\u8f93\u51fa\u901a\u9053\u76f8\u540c\u65f6MAC\u624d\u6700\u4f18\u3002 \u7531\u4e8e\u8f93\u5165channel\u6570\u8f83\u5927\uff0cDenseNet\u91c7\u7528\u4e861x1\u5377\u79ef\u5c42\u5148\u538b\u7f29\u7279\u5f81\uff0c\u8fd9\u4e2a\u989d\u5916\u5c42\u7684\u5f15\u5165\u5bf9GPU\u9ad8\u6548\u8ba1\u7b97\u4e0d\u5229\u3002 VoVNet\u4ece\u5185\u5b58\u8bbf\u95ee\u6210\u672c\uff08Memory Access Cost\uff0cMAC\uff09\u548cGPU\u8ba1\u7b97\u6548\u7387\u4e0a\u6765\u8003\u8651\uff0c\u53ef\u4ee5\u770b\u6210DenseNet\u7684\u53d8\u4f53\uff0c\u5728\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u4e0a\u6027\u80fd\u4f18\u4e8eDensNet\u3002 DenseNet\u7684\u4e00\u5927\u95ee\u9898\u5c31\u662f\u5bc6\u96c6\u8fde\u63a5\u592a\u91cd\u4e86\uff0c\u800c\u4e14\u6bcf\u4e2alayer\u90fd\u4f1a\u805a\u5408\u524d\u9762\u5c42\u7684\u7279\u5f81\uff0c\u5176\u5b9e\u9020\u6210\u7684\u662f\u7279\u5f81\u5197\u4f59\uff0cVoVNet\u8bba\u6587\u4e2d\u901a\u8fc7\u7814\u7a76DensNet\u6a21\u578bweights\u7684**L1\u8303\u6570**\u53d1\u73b0\u4e2d\u95f4\u5c42\u5bf9\u6700\u540e\u7684\u5206\u7c7b\u5c42\u8d21\u732e\u8f83\u5c11(\u6211\u7684\u7406\u89e3:\u540e\u9762\u7684\u5c42\u5df2\u7ecf\u5b66\u4e60\u5230\u4e86\u4e2d\u95f4\u5c42\u7684\u6838\u5fc3\u4fe1\u606f)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5197\u4f59\u5c31\u53ef\u4ee5\u88ab\u4f18\u5316\u3002\u6240\u4ee5VoVNet\u63d0\u51fa OSA \u6a21\u5757 OSA\u6a21\u5757:\u5c31\u662f\u53ea\u5728\u6700\u540e\u4e00\u6b21\u6027\u805a\u5408\u524d\u9762\u6240\u6709\u7684layer\uff0c\u6539\u52a8\u8f83\u5c0f\u89e3\u51b3\u95ee\u9898\u8f83\u5927\u3002 \u6bcf\u4e2alayer\u7684\u8f93\u5165channel\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u8ba9\u8f93\u51fachannel\u6570\u548c\u8f93\u5165\u4e00\u81f4\u800c\u53d6\u5f97\u6700\u5c0f\u7684MAC \u800c\u4e14\u4e5f\u4e0d\u518d\u9700\u89811x1\u5377\u79ef\u5c42\u6765\u538b\u7f29\u7279\u5f81\uff0c\u6240\u4ee5OSA\u6a21\u5757\u662fGPU\u8ba1\u7b97\u9ad8\u6548\u7684\u3002 VoVNet\u7531OSA\u6a21\u5757\u6784\u6210\uff0c\u4e3b\u8981\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u8be6\u60c5\u89c1\u8bba\u6587\u3002 VoVNetV2 \u00b6 \u8bba\u6587 | Code |\u5206\u5272\u7f51\u7edc: Real-Time Anchor-Free Instance Segmentation VoVNetV2\u5728VoVNet\u7684\u57fa\u7840\u4e0a\uff0c\u5f15\u5165\u4e86ResNet\u7684\u6b8b\u5dee\u8fde\u63a5\u548cSENet\u7684SE\u6a21\u5757 b:\u76f4\u63a5\u5c06\u8f93\u5165\u52a0\u5230\u8f93\u51fa\u4e0a\uff0c\u589e\u52a0\u77ed\u8def\u8fde\u63a5\uff0c\u4f7f\u5f97VoVNet\u53ef\u4ee5\u8bad\u7ec3\u66f4\u6df1\u7684\u7f51\u7edc\uff0c\u8bba\u6587\u4e2d\u662fVoVNet-99\u3002 c:\u5728\u6700\u540e\u7684\u7279\u5f81\u5c42\u4e0a\u52a0\u4e0a\u4e86sSE\u6a21\u5757\u6765\u8fdb\u4e00\u6b65\u589e\u5f3a\u7279\u5f81\uff0c\u539f\u59cb\u7684SE\u6a21\u5757\u5305\u542b\u4e24\u4e2aFC\u5c42\uff0c\u5176\u4e2d\u4e2d\u95f4\u7684FC\u5c42\u4e3b\u8981\u662f\u4e3a\u964d\u7ef4\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4f1a\u9020\u6210\u4fe1\u606f\u4e22\u5931\u3002\u800csSE\u6a21\u5757\u662f\u53bb\u6389\u4e86\u8fd9\u4e2a\u4e2d\u95f4FC\u5c42\u3002 VoVNetV2\u76f8\u6bd4VoVNet\u589e\u52a0\u4e86\u5c11\u8bb8\u7684\u8ba1\u7b97\u91cf\uff0c\u4f46\u662f\u6a21\u578b\u6027\u80fd\u6709\u63d0\u5347 PeleeNet \u00b6 \u8bba\u6587 | \u5206\u7c7bCode | \u68c0\u6d4bCode DenseNet\u53d8\u4f53\uff0c\u88ab\u7528\u4e8e**\u89e3\u51b3\u5b58\u50a8\u548c\u8ba1\u7b97\u80fd\u529b\u53d7\u9650\u7684\u60c5\u51b5\u3002**PeleeNet\u53ea\u6709MobileNet\u6a21\u578b\u7684 66% ,\u5e76\u4e14\u6bd4MobileNet\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u5e38\u88ab\u7528\u4e8e SSD \u7684 backbone \u7f51\u7edc\u7ed3\u6784 \uff1a\u6838\u5fc3\u8bbe\u8ba1\u539f\u5219\u4e5f\u548cDenseNet\u76f8\u4eff Two-Way Dense Layer\uff1a Stem Block : ResNet\u548cDenseNet \u5728\u7b2c\u4e00\u5c42\u90fd\u662f\u7528\u7684\u662f\u4e00\u4e2a 7x7 \u3001 stride\u4e3a2 \u7684\u5377\u79ef\u5c42\uff0c\u6d45\u5c42\u7f51\u7edc\u7684\u4f5c\u7528\u662f\u63d0\u53d6\u56fe\u50cf\u7684\u8fb9\u7f18\u3001\u7eb9\u7406\u7b49\u4fe1\u606f\u3002Stem Block\u7684\u8bbe\u8ba1\u5c31\u662f**\u6253\u7b97\u4ee5\u6bd4\u8f83\u5c0f\u7684\u4ee3\u4ef7\u53d6\u4ee3 7x7 \u7684\u5377\u79ef**\u3002\u8be5\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u7684\u63d0\u5347\u7279\u5f81\u8868\u8fbe\u80fd\u529b\u4e14\u4e0d\u4f1a\u589e\u52a0\u989d\u5916\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u6bd4\u5176\u4ed6\u7684\u65b9\u6cd5\uff08\u589e\u52a0\u901a\u9053\u6216\u589e\u52a0\u589e\u957f\u7387\uff09\u90fd\u8981\u597d\u3002 \u6574\u4e2a\u7f51\u7edc\u7531\u4e00\u4e2a Stem Block \u548c\u56db\u9636\u7279\u5f81\u63d0\u53d6\u5668\u7ec4\u6210( Dense Layer+1x1 conv+avgpol ) \u4e3a\u4ec0\u4e48\u662f4\u9636\uff1f \u56db\u9636\u6bb5\u4e00\u822c\u4e3a\u5927\u6a21\u578b\u7684\u901a\u7528\u8bbe\u8ba1\u7ed3\u6784\uff0cShuffleNet\u4f7f\u7528\u4e86\u4e09\u9636\u6bb5\uff0c\u5e76\u5728\u6bcf\u4e2a\u9636\u6bb5\u7684\u5f00\u59cb\u90fd\u538b\u7f29\u4e86\u7279\u5f81\u56fe\u5927\u5c0f\uff0c\u5c3d\u7ba1\u8fd9\u6837\u53ef\u4ee5\u63d0\u5347\u8ba1\u7b97\u901f\u5ea6\uff0c\u4f46\u662f\u672c\u6587\u8ba4\u4e3a**\u524d\u9762\u7684\u9636\u6bb5\u5bf9\u89c6\u89c9\u4efb\u52a1\u5c24\u4e3a\u91cd\u8981\uff0c\u4e14\u8fc7\u65e9\u7684\u51cf\u5c0f\u7279\u5f81\u56fe\u5927\u5c0f\u4f1a\u635f\u574f\u7279\u5f81\u8868\u8fbe\u80fd\u529b**\uff0c\u56e0\u6b64**\u4ecd\u7136\u4f7f\u7528\u56db\u9636\u6bb5\u7ed3\u6784**\uff0c\u524d\u4e24\u9636\u6bb5\u7684\u5c42\u6570\u662f\u4e13\u95e8\u63a7\u5236\u5728\u4e00\u4e2a\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u7684\u3002 BBN(\u89e3\u51b3\u957f\u5c3e\u6570\u636e) \u00b6 \u8bba\u6587 | \u4ee3\u7801 | ACCV\u6bd4\u8d5b \u4e3a\u4ec0\u4e48\u5bf9\u4e8e\u6837\u672c\u4e0d\u5747\u8861\u6570\u636e\u6a21\u578b\u7ed3\u679c\u66f4\u503e\u5411\u4e8e\u6570\u91cf\u591a\u7684\u7c7b\uff1f SGD \u4f18\u5316\u5668\u7684\u539f\u56e0:\u5747\u8861\u6570\u636e\uff0c\u5b66\u5230\u7684\u662f\u5168\u5c40\u6700\u4f18\u6216\u8fd1\u4f3c\uff0c\u4f46\u957f\u5c3e\u6570\u636eSGD\u4f7f\u5f97\u6a21\u578b\u4f18\u5316\u7684\u662f\u503e\u5411\u4e8e\u6570\u91cf\u591a\u7684\u7c7b\u7684\u5c40\u90e8\u6700\u4f18\u7684(\u56e0\u4e3a\u5e26\u52a8\u91cf\u7684 SGD \u7684 momentum \u4f1a\u6839\u636e\u8bad\u7ec3\u7d2f\u52a0\u5386\u53f2\u68af\u5ea6) baseline\u8bad\u7ec3\u957f\u5c3e\u6570\u636e\u6d4b\u8bd5\u65f6\u7cbe\u5ea6\u957f\u5f88\u5dee\uff1a\u957f\u5c3e\u6570\u636e\u5206\u5e03\u4e0d\u5747\u5300\uff0c\u6d4b\u8bd5\u6570\u636e\u5e38\u5e38\u5747\u5300\u5206\u5e03\u7684\uff0c\u4e5f\u5c31\u662f\u8bad\u7ec3\u6570\u636e\u5206\u5e03\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u5e03\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u7ed3\u679c\u5c31\u8f83\u5dee\u4e86\u3002 \u5e38\u7528\u89e3\u51b3\u957f\u5c3e\u6548\u5e94\u7684\u65b9\u6cd5\uff1a \u7c7b\u522b\u91cd\u5e73\u8861\u7b56\u7565 (\u5982\u6743\u91cd\u91cd\u8d4b\u503c\uff0c\u91cd\u91c7\u6837\u7b49)\uff0c\u867d\u7136\u53ef\u4ee5\u8fbe\u5230\u4ee4\u4eba\u6ee1\u610f\u7684\u6548\u679c\uff0c\u4f46\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7834\u574f\u7f51\u7edc\u5b66\u4e60\u67d0\u4e9b\u7279\u5f81\u8868\u793a\u7684\u80fd\u529b\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u5728\u4e00\u4e2abatch\u4e2d\u8fdb\u884c\u6837\u672c\u91cd\u91c7\u6837\uff1b\u6743\u91cd\u91cd\u8d4b\u503c\u3002 \u8fc7\u91c7\u6837:\u91cd\u590d\u6837\u672c\u91cf\u5c11\u7684\u6570\u636e\u7c7b\u522b\u3002\u6b20\u91c7\u6837\uff1a\u51cf\u5c11\u6837\u672c\u91cf\u591a\u7684\u7c7b\u522b\u6570\u636e\u3002\u526f\u4f5c\u7528\uff1a\u589e\u52a0\u5c3e\u90e8\u6570\u636e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5bf9\u5c3e\u90e8\u7c7b\u522b\u7684\u8fc7\u62df\u5408\uff0c\u800c\u4e22\u5f03\u5b9d\u8d35\u7684\u6570\u636e\u5fc5\u7136\u4f1a\u524a\u5f31\u6df1\u5ea6\u7f51\u7edc\u7684\u6cdb\u5316\u80fd\u529b\u3002 \u6743\u91cd\u91cd\u8d4b\u503c:\u5728\u635f\u5931\u51fd\u6570\u4e2d\u4e3a\u5c3e\u90e8\u7c7b\u7684\u8bad\u7ec3\u6837\u672c\u5206\u914d\u8f83\u5927\u7684\u6743\u91cd\uff0c\u4f46\u4e0d\u9002\u5408\u5904\u7406\u5927\u89c4\u6a21\u7684\u771f\u5b9e\u4e16\u754c\u7684\u957f\u5c3e\u6570\u636e\uff0c\u5e76\u4e14\u5bb9\u6613\u9020\u6210\u4f18\u5316\u56f0\u96be\u3002 BBN\u7b56\u7565 \uff1a\u63d0\u51fa\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684**\u53cc\u8fb9\u5206\u652f\u7f51\u7edc**\uff0c\u4e00\u8fb9\u4fdd\u8bc1\u7279\u5f81\u8868\u793a\u80fd\u529b\uff0c\u53e6\u4e00\u8fb9\u4fdd\u8bc1\u5206\u7c7b\u80fd\u529b\u3002\u540c\u65f6\u5f15\u5165**\u7d2f\u8ba1\u5b66\u4e60\u7b56\u7565**:\u9996\u5148\u5b66\u4e60\u901a\u7528\u7684\u7279\u5f81\u8868\u793a\uff0c\u7136\u540e\u9010\u6e10\u5c06\u6ce8\u610f\u529b\u653e\u5728\u5c3e\u90e8\u6570\u636e\uff08\u6837\u672c\u91cf\u8f83\u5c11\u7684\u6570\u636e\uff09\u4e0a\u3002 \u7f51\u7edc\u6a21\u578b \u5047\u8bbe X \u4e3a\u8bad\u7ec3\u6837\u672c\uff0c y \u4e3a\u5bf9\u5e94\u7684\u6807\u7b7e\u3002\u5bf9\u4e8e\u53cc\u8fb9\u5206\u652f\uff0c\u5206\u522b\u5e94\u7528\u5747\u5300\u91c7\u6837\u548c\u53cd\u5411\u91c7\u6837\u5f97\u5230\u4e24\u7ec4\u6837\u672c (X_c,y_c)\u548c(X_r,y_r) \uff0c\u7136\u540e\u7ecf\u8fc7\u5404\u81ea\u5206\u652f\u7684\u7279\u5f81\u63d0\u53d6\u548c\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5f97\u5230\u76f8\u5e94\u7684\u7279\u5f81\u5411\u91cf f_c,f_r \u3002\u7136\u540e\u901a\u8fc7**\u7279\u5b9a\u7684\u7d2f\u79ef\u5b66\u4e60\u7b56\u7565**\uff0c\u53ef\u4ee5\u5728\u8bad\u7ec3\u9636\u6bb5\u5c06\u7f51\u7edc\u5b66\u4e60\u7684\u201c\u6ce8\u610f\u529b\u201d\u8f6c\u79fb\u5230\u4e24\u4e2a\u5206\u652f\u4e4b\u95f4\uff1a\u901a\u8fc7\u81ea\u9002\u5e94\u5e73\u8861\u53c2\u6570\u03b1\u63a7\u5236\u5206\u652f\u7684\u7279\u5f81\u5411\u91cf \u03b1f_c,(1-\u03b1)f_r \u88ab\u9001\u5230\u5bf9\u5e94\u5206\u652f\u7684\u5206\u7c7b\u5668 W_c\u3001W_r \u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u5143\u7d20\u76f8\u52a0\u8fdb\u884c\u878d\u5408\uff0c\u9001\u5230 softmax \u540e\u8fdb\u884c\u9884\u6d4b\u3002 \u635f\u5931\u51fd\u6570\uff0c\u5bf9\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570( E )\u8fdb\u884c\u4f7f\u7528\u03b1\u63a7\u5236\u52a0\u6743 \u5747\u5300\u91c7\u6837 \uff1a\u662f\u6307\u5728\u4e00\u4e2aepoch\u4e2d\uff0c\u8bad\u7ec3\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6837\u672c\u90fd\u53ea\u4f1a\u4ee5\u76f8\u540c\u7684\u6982\u7387\u88ab\u91c7\u6837\u4e00\u6b21\uff0c\u6982\u7387 1/N \u3002 \u53cd\u5411\u91c7\u6837 \uff1a\u6bcf\u4e2a\u7c7b\u522b\u7684\u91c7\u6837\u6982\u7387\u4e0e\u6837\u672c\u5bb9\u91cf\u7684\u5012\u6570\u6210\u6b63\u6bd4\uff0c\u4e5f\u5c31\u662f\u8bf4\u67d0\u4e2a\u7c7b\u522b\u7684\u6837\u672c\u5bb9\u91cf\u8d8a\u5927\uff0c\u88ab\u91c7\u6837\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5c0f\u3002 \u7d2f\u8ba1\u5b66\u4e60\u7b56\u7565 \u03b1\u901a\u8fc7\u9002\u914d\u5668\u6839\u636e\u8bad\u7ec3\u7684\u8fed\u4ee3\u6b21\u6570\u81ea\u52a8\u751f\u6210\uff0c\u4fc3\u4f7f\u6574\u4e2aBBN\u7ed3\u6784**\u9996\u5148\u4ece\u539f\u59cb\u7684\u5206\u5e03\u4e2d\u5b66\u4e60\u901a\u7528\u7279\u5f81\uff0c\u7136\u540e\u9010\u6e10\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5230\u5c3e\u90e8\u6570\u636e\u53ca\u6837\u672c\u91cf\u8f83\u5c11\u7684\u6570\u636e\u7c7b\u522b\u4e2d\u53bb\u3002** \u66f4\u91cd\u8981\u7684\u662f\uff0c\u03b1\u53ef\u4ee5\u63a7\u5236\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u53c2\u6570\u66f4\u65b0\uff0c\u53ef\u4ee5\u907f\u514d\u5728\u8bad\u7ec3\u672b\u671f\uff0c\u8fc7\u5ea6\u5f3a\u8c03\u5c3e\u90e8\u6570\u636e\u800c\u635f\u5bb3\u4e86\u901a\u7528\u7684\u7279\u5f81\u8868\u793a\u3002 \u63a8\u7406\u9636\u6bb5\u4e24\u4e2a\u5206\u652f\u540c\u6837\u91cd\u8981\uff0c\u8bbe\u7f6e\u81ea\u9002\u5e94\u53c2\u6570 \u03b1 \u7684\u503c\u4e3a 0.5 \u3002","title":"\u56fe\u50cf\u8bc6\u522b\u8bba\u6587\u89e3\u8bfb"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#vgg","text":"VGGNet\u6709\u4e00\u4e2a\u663e\u8457\u7684\u7279\u70b9\uff1a\u6bcf\u6b21\u7ecf\u8fc7\u6c60\u5316\u5c42\uff08maxpool\uff09\u540e\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u51cf\u5c0f\u4e00\u500d\uff0c\u800c\u901a\u9053\u6570\u5219\u589e\u52a0\u4e00\u500d\uff08\u6700\u540e\u4e00\u4e2a\u6c60\u5316\u5c42\u9664\u5916\uff09 VGGNet\u4e2d\uff0c\u4f7f\u7528\u7684\u5377\u79ef\u6838\u57fa\u672c\u90fd\u662f 3\u00d73 \uff0c\u800c\u4e14\u5f88\u591a\u5730\u65b9\u51fa\u73b0\u4e86\u591a\u4e2a 3\u00d73 \u5806\u53e0\u7684\u73b0\u8c61\uff0c\u8fd9\u79cd\u7ed3\u6784\u7684\u4f18\u70b9\u5728\u4e8e\uff0c\u9996\u5148\u4ece\u611f\u53d7\u91ce\u6765\u770b\uff0c\u4e24\u4e2a 3\u00d73 \u7684\u5377\u79ef\u6838\u4e0e\u4e00\u4e2a 5\u00d75 \u7684\u5377\u79ef\u6838\u662f\u4e00\u6837\u7684\uff1b\u5176\u6b21\uff0c\u540c\u7b49\u611f\u53d7\u91ce\u65f6\uff0c 3\u00d73 \u5377\u79ef\u6838\u7684\u53c2\u6570\u91cf\u66f4\u5c11\u3002\u66f4\u4e3a\u91cd\u8981\u7684\u662f\uff0c\u4e24\u4e2a 3\u00d73 \u5377\u79ef\u6838\u7684\u975e\u7ebf\u6027\u80fd\u529b\u8981\u6bd4 5\u00d75 \u5377\u79ef\u6838\u5f3a\uff0c\u56e0\u4e3a\u5176\u62e5\u6709\u4e24\u4e2a\u6fc0\u6d3b\u51fd\u6570\uff0c\u53ef\u5927\u5927\u63d0\u9ad8\u5377\u79ef\u7f51\u7edc\u7684\u5b66\u4e60\u80fd\u529b\u3002","title":"VGG"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#inception","text":"\u4e3a\u8fdb\u4e00\u6b65\u964d\u4f4e\u7f51\u7edc\u53c2\u6570\u91cf\uff0cInception\u53c8\u589e\u52a0\u4e86\u591a\u4e2a 1\u00d71 \u7684\u5377\u79ef\u6a21\u5757,\u8fd9\u79cd 1\u00d71 \u7684\u6a21\u5757\u53ef\u4ee5\u5148\u5c06\u7279\u5f81\u56fe\u964d\u7ef4\uff0c\u518d\u9001\u7ed9 3\u00d73 \u548c 5\u00d75 \u5927\u5c0f\u7684\u5377\u79ef\u6838\uff0c\u7531\u4e8e\u901a\u9053\u6570\u7684\u964d\u4f4e\uff0c\u53c2\u6570\u91cf\u4e5f\u6709\u4e86\u8f83\u5927\u7684\u51cf\u5c11\u3002 \u6700\u540e\u7684Inception\u6a21\u5757\u5904\u4f7f\u7528\u4e86\u5168\u5c40\u5e73\u5747\u6c60\u5316\u3002\u4e3a\u4e86\u907f\u514d\u6df1\u5c42\u7f51\u7edc\u8bad\u7ec3\u65f6\u5e26\u6765\u7684\u68af\u5ea6\u6d88\u5931\u95ee\u9898. Inception v2\u8fdb\u4e00\u6b65\u901a\u8fc7\u5377\u79ef\u5206\u89e3\u4e0e\u6b63\u5219\u5316\u5b9e\u73b0\u66f4\u9ad8\u6548\u7684\u8ba1\u7b97\uff0c\u589e\u52a0\u4e86BN\u5c42\uff0c\u540c\u65f6\u5229\u7528\u4e24\u4e2a\u7ea7\u8054\u76843\u00d73\u5377\u79ef\u53d6\u4ee3\u4e86Inception v1\u7248\u672c\u4e2d\u76845\u00d75\u5377\u79ef\u3002 \u66f4\u8fdb\u4e00\u6b65\uff0cInception v2\u5c06 n\u00d7n \u7684\u5377\u79ef\u8fd0\u7b97\u5206\u89e3\u4e3a 1\u00d7n \u4e0e n\u00d71 \u4e24\u4e2a\u5377\u79ef","title":"Inception"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#resnet","text":"\u80cc\u666f:\u5f53\u65f6\u7684\u5df2\u7ecf\u8bc1\u660e\u7f51\u7edc\u6df1\u5ea6\u8d8a\u6df1\u6548\u679c\u8d8a\u597d\uff0c\u4f46\u5b9e\u9a8c\u53d1\u73b0\u7f51\u7edc\u8d8a\u6df1\u8d8a\u96be\u6536\u655b\uff0c\u51fa\u73b0\u7f51\u7edc\u9000\u5316\u73b0\u8c61(56\u5c42\u7684\u7f51\u7edc\u6bd420\u5c42\u7f51\u7edc\u6548\u679c\u8fd8\u8981\u5dee)\uff0c\u4f55\u51ef\u660e\u63d0\u51fa\u4e86\u6b8b\u5dee\u7f51\u7edc\u3002 \u666e\u901a\u795e\u7ecf\u7f51\u7edc\u53ea\u9700\u8981\u5173\u6ce8\u8f93\u51faF(x)\uff0c\u6b8b\u5dee\u7f51\u7edc\u9700\u8981\u5173\u6ce8H(x)=F(x)+x -> F(x)=H(x) - x\uff0c\u800c\u4e14\u6b8b\u5dee\u66f4\u5c0f\u5b66\u4e60\u96be\u5ea6\u5c0f\u70b9\u3002 resnet\u7684\u6539\u8fdb ResNet\u53ca\u5176\u53d8\u79cd\u7684\u7ed3\u6784\u68b3\u7406\u3001\u6709\u6548\u6027\u5206\u6790\u4e0e\u4ee3\u7801\u89e3\u8bfb \u6539\u8fdb\u4e00\uff1a\u6539\u8fdbdownsample\u90e8\u5206\uff0c\u51cf\u5c11\u4fe1\u606f\u6d41\u5931\u3002\u524d\u9762\u8bf4\u8fc7\u4e86\uff0c\u6bcf\u4e2astage\u7684\u7b2c\u4e00\u4e2aconv\u90fd\u6709\u4e0b\u91c7\u6837\u7684\u6b65\u9aa4\uff0c\u6211\u4eec\u770b\u5de6\u8fb9\u7b2c\u4e00\u5f20\u56fe\u5de6\u4fa7\u7684\u901a\u8def\uff0cinput\u6570\u636e\u8fdb\u5165\u540e\u5728\u4f1a\u7ecf\u5386\u4e00\u4e2astride=2\u76841*1\u5377\u79ef\uff0c\u5c06\u7279\u5f81\u56fe\u5c3a\u5bf8\u51cf\u5c0f\u4e3a\u539f\u5148\u7684\u4e00\u534a\uff0c\u8bf7\u6ce8\u610f1x1\u5377\u79ef\u548cstride=2\u4f1a\u5bfc\u81f4\u8f93\u5165\u7279\u5f81\u56fe\u00be\u7684\u4fe1\u606f\u4e0d\u88ab\u5229\u7528\uff0c\u56e0\u6b64ResNet-B\u7684\u6539\u8fdb\u5c31\u662f\u5c31\u662f\u5c06\u4e0b\u91c7\u6837\u79fb\u5230\u540e\u9762\u76843x3\u5377\u79ef\u91cc\u9762\u53bb\u505a\uff0c\u907f\u514d\u4e86\u4fe1\u606f\u7684\u5927\u91cf\u6d41\u5931\u3002ResNet-D\u5219\u662f\u5728ResNet-B\u7684\u57fa\u7840\u4e0a\u5c06identity\u90e8\u5206\u7684\u4e0b\u91c7\u6837\u4ea4\u7ed9avgpool\u53bb\u505a\uff0c\u907f\u514d\u51fa\u73b01x1\u5377\u79ef\u548cstride\u540c\u65f6\u51fa\u73b0\u9020\u6210\u4fe1\u606f\u6d41\u5931\u3002ResNet-C\u5219\u662f\u53e6\u4e00\u79cd\u601d\u8def\uff0c\u5c06ResNet\u8f93\u5165\u90e8\u5206\u76847x7\u5927\u5377\u79ef\u6838\u6362\u62103\u4e2a3x3\u5377\u79ef\u6838\uff0c\u53ef\u4ee5\u6709\u6548\u51cf\u5c0f\u8ba1\u7b97\u91cf\uff0c\u8fd9\u79cd\u505a\u6cd5\u6700\u65e9\u51fa\u73b0\u5728Inception-v2\u4e2d\u3002\u5176\u5b9e\u8fd9\u4e2aResNet-C \u6211\u6bd4\u8f83\u7591\u60d1\uff0cResNet\u8bba\u6587\u91cc\u8bf4\u5b83\u501f\u9274\u4e86VGG\u7684\u601d\u60f3\uff0c\u4f7f\u7528\u5927\u91cf\u7684\u5c0f\u5377\u79ef\u6838\uff0c\u65e2\u7136\u8fd9\u6837\u90a3\u4e3a\u4ec0\u4e48\u7b2c\u4e00\u90e8\u5206\u4f9d\u65e7\u8981\u653e\u4e00\u4e2a7x7\u7684\u5927\u5377\u79ef\u6838\u5462\uff0c\u4e0d\u77e5\u9053\u662f\u51fa\u4e8e\u600e\u6837\u7684\u8003\u8651\uff0c\u4f46\u662f\u73b0\u5728\u7684\u591a\u6570\u7f51\u7edc\u90fd\u628a\u8fd9\u90e8\u5206\u6539\u62103\u4e2a3x3\u5377\u79ef\u6838\u7ea7\u8054\u3002 \u6539\u8fdb\u4e8c\uff1aResNet V2\u3002\u8fd9\u662f\u7531ResNet\u539f\u73ed\u4eba\u9a6c\u6253\u9020\u7684\uff0c\u4e3b\u8981\u662f\u5bf9ResNet\u90e8\u5206\u7ec4\u4ef6\u7684\u987a\u5e8f\u8fdb\u884c\u4e86\u8c03\u6574\u3002\u5404\u79cd\u9b54\u6539\u4e2d\u5e38\u89c1\u7684\u9884\u6fc0\u6d3bResNet\u5c31\u662f\u51fa\u81ea\u8fd9\u91cc\u3002 \u6a21\u578b\u8f7b\u91cf\u5316\u8bbe\u8ba1 \u4ece\u6a21\u578b\u8bbe\u8ba1\u65f6\u5c31\u91c7\u7528\u4e00\u4e9b\u8f7b\u91cf\u5316\u7684\u601d\u60f3\uff0c\u4f8b\u5982\u91c7\u7528\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u3001\u5206\u7ec4\u5377\u79ef\u7b49\u8f7b\u91cf\u5377\u79ef\u65b9\u5f0f\uff0c\u51cf\u5c11\u5377\u79ef\u8fc7\u7a0b\u7684\u8ba1\u7b97\u91cf\u3002\u6b64\u5916\uff0c\u5229\u7528\u5168\u5c40\u6c60\u5316\u6765\u53d6\u4ee3\u5168\u8fde\u63a5\u5c42\uff0c\u5229\u75281\u00d71\u5377\u79ef\u5b9e\u73b0\u7279\u5f81\u7684\u901a\u9053\u964d\u7ef4\uff0c\u4e5f\u53ef\u4ee5\u964d\u4f4e\u6a21\u578b\u7684\u8ba1\u7b97\u91cf\uff0c\u8fd9\u4e24\u70b9\u5728\u4f17\u591a\u7f51\u7edc\u4e2d\u5df2\u7ecf\u5f97\u5230\u4e86\u5e94\u7528\u3002","title":"ResNet"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#squeezenet","text":"SqueezeNet\u5c42\uff1a\u9996\u5148\u4f7f\u7528 1\u00d71 \u5377\u79ef\u8fdb\u884c\u964d\u7ef4\uff0c\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e0d\u53d8\uff0c\u8fd9\u91cc\u7684S1\u5c0f\u4e8eM\uff0c\u8fbe\u5230\u4e86\u538b\u7f29\u7684\u76ee\u7684\u3002 Expand\u5c42\uff1a\u5e76\u884c\u5730\u4f7f\u7528 1\u00d71 \u5377\u79ef\u4e0e 3\u00d73 \u5377\u79ef\u83b7\u5f97\u4e0d\u540c\u611f\u53d7\u91ce\u7684\u7279\u5f81\u56fe\uff0c\u6709\u70b9\u7c7b\u4f3cInception\u6a21\u5757\uff0c\u8fbe\u5230\u6269\u5c55\u7684\u76ee\u7684\u3002 Concat\uff1a\u5bf9\u5f97\u5230\u7684\u4e24\u4e2a\u7279\u5f81\u56fe\u8fdb\u884c**\u901a\u9053\u62fc\u63a5**\uff0c\u4f5c\u4e3a\u6700\u7ec8\u8f93\u51fa\u3002 \u6a21\u5757\u4e2d\u7684S1\u3001e1\u4e0ee2\u90fd\u662f\u53ef\u8c03\u7684\u8d85\u53c2\uff0cFire Module\u9ed8\u8ba4e1=e2=4\u00d7S1\u3002\u6fc0\u6d3b\u51fd\u6570\u4f7f\u7528\u4e86ReLU\u51fd\u6570\u3002 SqueezeNet\u4e00\u5171\u4f7f\u7528\u4e863\u4e2aPool\u5c42\uff0c\u524d\u4e24\u4e2a\u662fMax Pooling\u5c42\uff0c\u6b65\u957f\u4e3a2\uff0c\u6700\u540e\u4e00\u4e2a\u4e3a**\u5168\u5c40\u5e73\u5747\u6c60\u5316**\uff0c\u5229\u7528\u8be5\u5c42\u53ef\u4ee5\u53d6\u4ee3\u5168\u8fde\u63a5\u5c42\uff0c\u51cf\u5c11\u4e86\u8ba1\u7b97\u91cf\u3002 \u5168\u5c40\u5e73\u5747\u6c60\u5316 :\u6211\u4eec\u5bf9\u6bcf\u4e2a\u7279\u5f81\u56fe\u4e00\u6574\u5f20\u56fe\u7247\u8fdb\u884c\u5168\u5c40\u5747\u503c\u6c60\u5316\uff0c\u8fd9\u6837\u6bcf\u5f20\u7279\u5f81\u56fe\u90fd\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u8f93\u51fa\u3002\u8fd9\u6837\u91c7\u7528\u5747\u503c\u6c60\u5316\uff0c\u8fde\u53c2\u6570\u90fd\u7701\u4e86\uff0c\u53ef\u4ee5\u5927\u5927\u51cf\u5c0f\u7f51\u7edc\u53c2\u6570\uff0c\u907f\u514d\u8fc7\u62df\u5408. SqueezeNet\u867d\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u51cf\u5c11\u4e86\u5377\u79ef\u8ba1\u7b97\u91cf\uff0c\u4f46\u4ecd\u7136\u4f7f\u7528\u4f20\u7edf\u7684\u5377\u79ef\u8ba1\u7b97\u65b9\u5f0f","title":"SqueezeNet"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#mobilenet","text":"MobileNet\u5229\u7528\u4e86\u66f4\u4e3a\u9ad8\u6548\u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7684\u65b9\u5f0f\uff0c\u8fdb\u4e00\u6b65\u52a0\u901f\u4e86\u5377\u79ef\u7f51\u7edc\u5728\u79fb\u52a8\u7aef\u7684\u5e94\u7528 \u666e\u901a\u5377\u79ef \u5047\u8bbe\u6709\u4e00\u4e2a 3\u00d73 \u5927\u5c0f\u7684\u5377\u79ef\u5c42\uff0c\u5176\u8f93\u5165\u901a\u9053\u4e3a 16 \u3001\u8f93\u51fa\u901a\u9053\u4e3a 32 \uff0c\u4e00\u5171\u9700\u8981 (3\u00d73\u00d716)\u00d732 =4068 \u4e2a\u53c2\u6570\u3002 \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef=\u6df1\u5ea6\u5377\u79ef+\u9010\u70b9\u5377\u79ef( 1x1 ) \u752816\u4e2a 3\u00d73 \u5927\u5c0f\u7684\u5377\u79ef\u6838\uff081\u901a\u9053\uff09\u5206\u522b\u4e0e\u8f93\u5165\u768416\u901a\u9053\u7684\u6570\u636e\u505a\u5377\u79ef\uff08\u8fd9\u91cc\u4f7f\u7528\u4e8616\u4e2a1\u901a\u9053\u7684\u5377\u79ef\u6838\uff0c\u8f93\u5165\u6570\u636e\u7684\u6bcf\u4e2a\u901a\u9053\u75281\u4e2a3\u00d73\u7684\u5377\u79ef\u6838\u5377\u79ef\uff09\uff0c\u5f97\u5230\u4e8616\u4e2a\u901a\u9053\u7684\u7279\u5f81\u56fe\uff0c\u6211\u4eec\u8bf4\u8be5\u6b65\u64cd\u4f5c\u662fdepthwise\uff08\u9010\u5c42\uff09\u7684\uff0c\u5728\u53e0\u52a016\u4e2a\u7279\u5f81\u56fe\u4e4b\u524d\u63a5\u7740\u752832\u4e2a 1\u00d71 \u5927\u5c0f\u7684\u5377\u79ef\u6838\uff0816\u901a\u9053\uff09\u5728\u8fd916\u4e2a\u7279\u5f81\u56fe\u8fdb\u884c\u5377\u79ef\u8fd0\u7b97\uff0c\u5c0616\u4e2a\u901a\u9053\u7684\u4fe1\u606f\u8fdb\u884c\u878d\u5408\uff08\u75281\u00d71\u7684\u5377\u79ef\u8fdb\u884c\u4e0d\u540c\u901a\u9053\u95f4\u7684\u4fe1\u606f\u878d\u5408\uff09\uff0c\u6211\u4eec\u8bf4\u8be5\u6b65\u64cd\u4f5c\u662fpointwise\uff08\u9010\u50cf\u7d20\uff09\u7684\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\u6574\u4e2a\u8fc7\u7a0b\u4f7f\u7528\u4e86 3\u00d73\u00d716+\uff081\u00d71\u00d716\uff09\u00d732 =656 \u4e2a\u53c2\u6570\u3002 \u603b\u4f53\u8ba1\u7b97\u91cf\u7ea6\u7b49\u4e8e\u6807\u51c6\u5377\u79ef\u76841/9\uff0c\u6781\u5927\u5730\u51cf\u5c11\u4e86\u5377\u79ef\u8fc7\u7a0b\u7684\u8ba1\u7b97\u91cf\u3002 \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u6a21\u5757\u7ed3\u6784\u56fe \u5728\u6b64\u4f7f\u7528\u4e86ReLU6\u6765\u66ff\u4ee3\u539f\u59cb\u7684ReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u5c06ReLU\u7684\u6700\u5927\u8f93\u51fa\u9650\u5236\u57286\u4ee5\u4e0b \u4f7f\u7528ReLU6\u7684\u539f\u56e0\u4e3b\u8981\u662f\u4e3a\u4e86\u6ee1\u8db3\u79fb\u52a8\u7aef\u90e8\u7f72\u7684\u9700\u6c42\u3002\u79fb\u52a8\u7aef\u901a\u5e38\u4f7f\u7528Float16\u6216\u8005Int8\u7b49\u8f83\u4f4e\u7cbe\u5ea6\u7684\u6a21\u578b\uff0c\u5982\u679c\u4e0d\u5bf9\u6fc0\u6d3b\u51fd\u6570\u7684\u8f93\u51fa\u8fdb\u884c\u9650\u5236\u7684\u8bdd\uff0c\u6fc0\u6d3b\u503c\u7684\u5206\u5e03\u8303\u56f4\u4f1a\u5f88\u5927\uff0c\u800c\u4f4e\u7cbe\u5ea6\u7684\u6a21\u578b\u5f88\u96be\u7cbe\u786e\u5730\u8986\u76d6\u5982\u6b64\u5927\u8303\u56f4\u7684\u8f93\u51fa\uff0c\u8fd9\u6837\u4f1a\u5e26\u6765\u7cbe\u5ea6\u7684\u635f\u5931\u3002 MobileNetv1\u7ed3\u6784 \u4e0eVGGNet\u7c7b\u4f3c\uff0c\u4e5f\u662f\u4e00\u4e2a\u9010\u5c42\u5806\u53e0\u5f0f\u7f51\u7edc Dw\u4ee3\u8868\u4e00\u4e2a\u6df1\u5ea6\u5206\u89e3\u5377\u79ef\uff0c\u5176\u540e\u9700\u8981\u8ddf\u4e00\u4e2a 1\u00d71 \u5377\u79ef\uff0cs2\u4ee3\u8868\u6b65\u957f\u4e3a2\u7684\u5377\u79ef\uff0c\u53ef\u4ee5\u7f29\u5c0f\u7279\u5f81\u56fe\u5c3a\u5bf8\uff0c\u8d77\u5230\u4e0ePooling\u5c42\u4e00\u6837\u7684\u4f5c\u7528\u3002\u7f51\u7edc\u6700\u540e\u5229\u7528\u4e00\u4e2a\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff0c\u9001\u5165\u5230\u5168\u8fde\u63a5\u4e0eSoftmax\u8fdb\u884c\u5206\u7c7b\u9884\u6d4b\u3002 MobileNet v1\u8fd8\u8bbe\u7f6e\u4e86\u4e24\u4e2a\u8d85\u53c2\u6570\uff0c\u7528\u6765\u63a7\u5236\u6a21\u578b\u7684\u5927\u5c0f\u4e0e\u8ba1\u7b97\u91cf \u5bbd\u5ea6\u4e58\u5b50\uff1a\u7528\u4e8e\u63a7\u5236\u7279\u5f81\u56fe\u7684\u901a\u9053\u6570\uff0c\u8bb0\u505a\u03b1\uff0c\u5f53\u03b1\uff1c1\u65f6\uff0c\u6a21\u578b\u4f1a\u53d8\u5f97\u66f4\u8584\uff0c\u53ef\u4ee5\u5c06\u8ba1\u7b97\u91cf\u51cf\u5c11\u4e3a\u539f\u6765\u7684\u03b12\u3002 \u5206\u8fa8\u7387\u4e58\u5b50\uff1a\u7528\u4e8e\u63a7\u5236\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u8bb0\u505a\u03c1\uff0c\u5728\u76f8\u5e94\u7684\u7279\u5f81\u56fe\u4e0a\u5e94\u7528\u8be5\u4e58\u5b50\uff0c\u4e5f\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u6bcf\u4e00\u5c42\u7684\u8ba1\u7b97\u91cf\u3002 \u7f3a\u70b9 \u6a21\u578b\u7ed3\u6784\u8f83\u4e3a\u590d\u53e4\uff0c\u91c7\u7528\u4e86\u4e0eVGGNet\u7c7b\u4f3c\u7684\u5377\u79ef\u7b80\u5355\u5806\u53e0\uff0c\u6ca1\u6709\u91c7\u7528\u6b8b\u5dee\u3001\u7279\u5f81\u878d\u5408\u7b49\u5148\u8fdb\u7684\u7ed3\u6784\u3002 \u6df1\u5ea6\u5206\u89e3\u5377\u79ef\u4e2d\u5404\u901a\u9053\u76f8\u4e92\u72ec\u7acb\uff0c\u5377\u79ef\u6838\u7ef4\u5ea6\u8f83\u5c0f\uff0c\u8f93\u51fa\u7279\u5f81\u4e2d\u53ea\u6709\u8f83\u5c11\u7684\u8f93\u5165\u7279\u5f81\uff0c\u518d\u52a0\u4e0aReLU\u6fc0\u6d3b\u51fd\u6570\uff0c\u4f7f\u5f97\u8f93\u51fa\u5f88\u5bb9\u6613\u53d8\u4e3a0\uff0c\u96be\u4ee5\u6062\u590d\u6b63\u5e38\u8bad\u7ec3\uff0c\u56e0\u6b64\u5728\u8bad\u7ec3\u65f6\u90e8\u5206\u5377\u79ef\u6838\u5bb9\u6613\u88ab\u8bad\u7ec3\u5e9f\u6389\u3002 MobileNetv2 \u5229\u7528\u6b8b\u5dee\u7ed3\u6784\u53d6\u4ee3\u4e86\u539f\u59cb\u7684\u5377\u79ef\u5806\u53e0\u65b9\u5f0f\uff0c\u63d0\u51fa\u4e86\u4e00\u4e2aInverted Residual Block\u7ed3\u6784 \u4f20\u7edf\u7684\u6b8b\u5dee\u7f51\u7edc\u901a\u5e38\u5148\u4f7f\u75281\u00d71\u5377\u79ef\u8fdb\u884c\u7279\u5f81\u964d\u7ef4\uff0c\u51cf\u5c11\u901a\u9053\u6570\uff0c\u518d\u9001\u5165 3\u00d73 \u5377\u79ef\uff0c\u6700\u540e\u518d\u5229\u75281\u00d71\u5377\u79ef\u5347\u7ef4\uff0c\u7c7b\u4f3c\u6c99\u6f0f\u3002 MobileNet v2\u4e2d\uff0c\u7531\u4e8e\u4f7f\u7528\u4e86\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u6765\u9010\u901a\u9053\u8ba1\u7b97\uff0c\u672c\u8eab\u8ba1\u7b97\u91cf\u5c31\u6bd4\u8f83\u5c11\uff0c\u56e0\u6b64\u5728\u6b64\u53ef\u4ee5\u4f7f\u75281\u00d71\u5377\u79ef\u6765\u5347\u7ef4\uff0c\u5728\u8ba1\u7b97\u91cf\u589e\u52a0\u4e0d\u5927\u7684\u57fa\u7840\u4e0a\u83b7\u53d6\u66f4\u597d\u7684\u6548\u679c\uff0c\u6700\u540e\u518d\u75281\u00d71\u5377\u79ef\u964d\u7ef4\uff0c\u7c7b\u4f3c\u67f3\u53f6\u3002 \u53bb\u6389Block\u7684ReLu6\u5c42 \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u5f97\u5230\u7684\u7279\u5f81\u5bf9\u5e94\u4e8e\u4f4e\u7ef4\u7a7a\u95f4\uff0c\u7279\u5f81\u8f83\u5c11\uff0c\u5982\u679c\u540e\u7eed\u63a5\u7ebf\u6027\u6620\u5c04\u5219\u80fd\u591f\u4fdd\u7559\u5927\u90e8\u5206\u7279\u5f81\uff0c\u800c\u5982\u679c\u63a5\u975e\u7ebf\u6027\u6620\u5c04\u5982ReLU\uff0c\u5219\u4f1a\u7834\u574f\u7279\u5f81\uff0c\u9020\u6210\u7279\u5f81\u7684\u635f\u8017\uff0c\u4ece\u800c\u4f7f\u5f97\u6a21\u578b\u6548\u679c\u53d8\u5dee\uff0c\u9488\u5bf9\u6b64\u95ee\u9898\uff0cMobileNet v2\u76f4\u63a5\u53bb\u6389\u4e86\u6bcf\u4e00\u4e2aBlock\u4e2d\u6700\u540e\u7684ReLU6\u5c42(\u4e0d\u662f\u6240\u6709)\uff0c\u51cf\u5c11\u4e86\u7279\u5f81\u7684\u635f\u8017\uff0c\u83b7\u5f97\u4e86\u66f4\u597d\u7684\u68c0\u6d4b\u6548\u679c\u3002 MobileNetv3 MobileNetv3\u6709\u4e24\u4e2alarge\u548csmall\uff0csmall\u7684\u7cbe\u5ea6\u548cMobileNetv2\u76f8\u4f3c \u6574\u4f53\u6765\u8bf4MobileNetV3\u6709\u4e24\u5927\u521b\u65b0\u70b9 \u4e92\u8865\u641c\u7d22\u6280\u672f\u7ec4\u5408\uff1a\u7531\u8d44\u6e90\u53d7\u9650\u7684NAS\u6267\u884c\u6a21\u5757\u7ea7\u641c\u7d22(\u4f7f\u7528\u4e86\u795e\u7ecf\u7f51\u7edc\u641c\u7d22\u529f\u80fd\u6765**\u6784\u5efa\u5168\u5c40\u7684\u7f51\u7edc\u7ed3\u6784**)\uff0cNetAdapt\u6267\u884c\u5c40\u90e8\u641c\u7d22( \u5bf9\u6bcf\u5c42\u7684\u6838\u6570\u91cf\u8fdb\u884c\u4f18\u5316 )\u3002 \u7f51\u7edc\u7ed3\u6784\u6539\u8fdb\uff1a\u5c06\u6700\u540e\u4e00\u6b65\u7684**\u5e73\u5747\u6c60\u5316\u5c42**\u524d\u79fb\u5e76\u79fb\u9664\u6700\u540e\u4e00\u4e2a\u5377\u79ef\u5c42\uff0c\u5f15\u5165 h-swish \u6fc0\u6d3b\u51fd\u6570\u3002 \u5728mobilenetv2\u4e2d\uff0c\u5728avg pooling\u4e4b\u524d\uff0c\u5b58\u5728\u4e00\u4e2a1x1\u7684\u5377\u79ef\u5c42\uff0c\u76ee\u7684\u662f\u63d0\u9ad8\u7279\u5f81\u56fe\u7684\u7ef4\u5ea6\uff0c\u66f4\u6709\u5229\u4e8e\u7ed3\u6784\u7684\u9884\u6d4b\uff0c\u4f46\u662f\u8fd9\u5176\u5b9e\u5e26\u6765\u4e86\u4e00\u5b9a\u7684\u8ba1\u7b97\u91cf\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u4f5c\u8005\u4fee\u6539\u4e86\uff0c\u5c06\u5176\u653e\u5728avg pooling\u7684\u540e\u9762\uff0c\u9996\u5148\u5229\u7528avg pooling\u5c06\u7279\u5f81\u56fe\u5927\u5c0f\u75317x7\u964d\u5230\u4e861x1\uff0c\u964d\u52301x1\u540e\uff0c\u7136\u540e\u518d\u5229\u75281x1\u63d0\u9ad8\u7ef4\u5ea6\uff0c\u8fd9\u6837\u5c31\u51cf\u5c11\u4e867x7=49\u500d\u7684\u8ba1\u7b97\u91cf\u3002\u5e76\u4e14\u4e3a\u4e86\u8fdb\u4e00\u6b65\u7684\u964d\u4f4e\u8ba1\u7b97\u91cf\uff0c\u4f5c\u8005\u76f4\u63a5\u53bb\u6389\u4e86\u524d\u9762\u7eba\u9524\u578b\u5377\u79ef\u76843x3\u4ee5\u53ca1x1\u5377\u79ef\uff0c\u8fdb\u4e00\u6b65\u51cf\u5c11\u4e86\u8ba1\u7b97\u91cf\uff0c\u5c31\u53d8\u6210\u4e86\u5982\u4e0b\u56fe\u7b2c\u4e8c\u884c\u6240\u793a\u7684\u7ed3\u6784\uff0c\u4f5c\u8005\u5c06\u5176\u4e2d\u76843x3\u4ee5\u53ca1x1\u53bb\u6389\u540e\uff0c\u7cbe\u5ea6\u5e76\u6ca1\u6709\u5f97\u5230\u635f\u5931\u3002\u8fd9\u91cc\u964d\u4f4e\u4e86\u5927\u7ea615ms\u7684\u901f\u5ea6\u3002 MobileNetV3\u662f\u7efc\u5408\u4e86\u4ee5\u4e0b\u4e09\u79cd\u6a21\u578b\u7684\u601d\u60f3 \uff1a MobileNetV1 \u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef MobileNetV2 \u7684\u5177\u6709\u7ebf\u6027\u74f6\u9888\u7684\u9006\u6b8b\u5dee\u7ed3\u6784 MnasNet \u7684\u57fa\u4e8esqueeze and excitation\u7ed3\u6784\u7684\u8f7b\u91cf\u7ea7\u6ce8\u610f\u529b\u6a21\u578b\u3002","title":"MobileNet"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#shufflenet","text":"\u5f53\u524d\u5148\u8fdb\u7684\u5377\u79ef\u7f51\u7edc\u901a\u5e38\u57283\u00d73\u5377\u79ef\u4e4b\u524d\u589e\u52a0\u4e00\u4e2a1\u00d71\u5377\u79ef\uff0c\u7528\u4e8e\u901a\u9053\u95f4\u7684\u4fe1\u606f\u6d41\u901a\u4e0e\u964d\u7ef4\u3002\u7136\u800c\u5728ResNeXt\u3001MobileNet\u7b49\u9ad8\u6027\u80fd\u7684\u7f51\u7edc\u4e2d\uff0c1\u00d71\u5377\u79ef\u5374\u5360\u7528\u4e86\u5927\u91cf\u7684\u8ba1\u7b97\u8d44\u6e90\uff0cShuffleNet v1\u4ece\u4f18\u5316\u7f51\u7edc\u7ed3\u6784\u7684\u89d2\u5ea6\u51fa\u53d1\uff0c\u5229\u7528**\u7ec4\u5377\u79ef**\u4e0e**\u901a\u9053\u6df7\u6d17**\uff08Channel Shuffle\uff09\u7684\u64cd\u4f5c\u6709\u6548\u964d\u4f4e\u4e86 1\u00d71 \u9010\u70b9\u5377\u79ef\u7684\u8ba1\u7b97\u91cf\uff0c\u662f\u4e00\u4e2a\u6781\u4e3a\u9ad8\u6548\u7684\u8f7b\u91cf\u5316\u7f51\u7edc\u3002 \u5206\u7ec4\u5377\u79ef \u901a\u9053\u6df7\u6d17 a\u56fe\u4ee3\u8868\u4e86\u5e38\u89c4\u7684\u4e24\u4e2a\u7ec4\u5377\u79ef\u64cd\u4f5c\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5982\u679c\u6ca1\u6709\u9010\u70b9\u76841\u00d71\u5377\u79ef\u6216\u8005\u901a\u9053\u6df7\u6d17\uff0c\u6700\u7ec8\u8f93\u51fa\u7684\u7279\u5f81\u4ec5\u7531\u4e00\u90e8\u5206\u8f93\u5165\u901a\u9053\u7684\u7279\u5f81\u8ba1\u7b97\u5f97\u51fa\uff0c\u8fd9\u79cd\u64cd\u4f5c\u963b\u788d\u4e86\u4fe1\u606f\u7684\u6d41\u901a\uff0c\u8fdb\u800c\u964d\u4f4e\u4e86\u7279\u5f81\u7684\u8868\u8fbe\u80fd\u529b\u3002 b\u56fe\u6211\u4eec\u5e0c\u671b\u5728\u4e00\u4e2a\u7ec4\u5377\u79ef\u4e4b\u540e\uff0c\u80fd\u591f\u5c06\u7279\u5f81\u56fe\u4e4b\u95f4\u7684\u901a\u9053\u4fe1\u606f\u8fdb\u884c\u878d\u5408\uff0c\u5c06\u6bcf\u4e00\u4e2a\u7ec4\u7684\u7279\u5f81\u5206\u6563\u5230\u4e0d\u540c\u7684\u7ec4\u4e4b\u540e\uff0c\u518d\u8fdb\u884c\u4e0b\u4e00\u4e2a\u7ec4\u5377\u79ef\uff0c\u8fd9\u6837\u8f93\u51fa\u7684\u7279\u5f81\u5c31\u80fd\u591f\u5305\u542b\u6bcf\u4e00\u4e2a\u7ec4\u7684\u7279\u5f81\uff0c\u800c\u901a\u9053\u6df7\u6d17\u6070\u597d\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u5982\u56fec\u6240\u793a\u3002 ShuffleNetv1 a\u56fe\u662f\u4e00\u4e2a\u5e26\u6709\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7684\u666e\u901a\u6b8b\u5dee\u6a21\u5757\uff0c\u8fd9\u91cc\u7684 1\u00d71 \u662f\u9010\u70b9\u7684\u5377\u79ef\u3002\u76f8\u6bd4\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\uff0c1\u00d71\u8ba1\u7b97\u91cf\u8f83\u5927\u3002 b\u56fe\u5219\u662f\u57fa\u672c\u7684ShuffleNet\u57fa\u672c\u5355\u5143\uff0c\u53ef\u4ee5\u770b\u5230 1\u00d71 \u5377\u79ef\u91c7\u7528\u7684\u662f**\u7ec4\u5377\u79ef**\uff0c\u7136\u540e\u8fdb\u884c\u901a\u9053\u7684\u6df7\u6d17\uff0c\u8fd9\u4e24\u6b65\u53ef\u4ee5\u53d6\u4ee31\u00d71\u7684\u9010\u70b9\u5377\u79ef\uff0c\u5e76\u4e14\u5927\u5927\u964d\u4f4e\u4e86\u8ba1\u7b97\u91cf\u30023\u00d73\u5377\u79ef\u4ecd\u7136\u91c7\u7528\u6df1\u5ea6\u53ef\u5206\u79bb\u7684\u65b9\u5f0f\u3002 c\u56fe\u662f\u5e26\u6709\u964d\u91c7\u6837\u7684ShuffleNet\u5355\u5143\uff0c\u5728\u65c1\u8def\u4e2d\u4f7f\u7528\u4e86\u6b65\u957f\u4e3a2\u76843\u00d73\u5e73\u5747\u6c60\u5316\u8fdb\u884c\u964d\u91c7\u6837\uff0c\u5728\u4e3b\u8def\u4e2d3\u00d73\u5377\u79ef\u6b65\u957f\u4e3a2\u5b9e\u73b0\u964d\u91c7\u6837\u3002\u53e6\u5916\uff0c\u7531\u4e8e\u964d\u91c7\u6837\u65f6\u901a\u5e38\u8981\u4f34\u6709\u901a\u9053\u6570\u7684\u589e\u52a0\uff0cShuffleNet\u76f4\u63a5\u5c06\u4e24\u5206\u652f\u62fc\u63a5\u5728\u4e00\u8d77\u6765\u5b9e\u73b0\u4e86\u901a\u9053\u6570\u7684\u589e\u52a0\uff0c\u800c\u4e0d\u662f\u5e38\u89c4\u7684\u9010\u70b9\u76f8\u52a0\u3002 g\u4ee3\u8868\u7ec4\u5377\u79ef\u7684\u7ec4\u6570\uff0c\u4ee5\u63a7\u5236\u5377\u79ef\u8fde\u63a5\u7684\u7a00\u758f\u6027\u3002\u7ec4\u6570\u8d8a\u591a\uff0c\u8ba1\u7b97\u91cf\u8d8a\u5c11\uff0c\u56e0\u6b64\u5728\u76f8\u540c\u7684\u8ba1\u7b97\u8d44\u6e90\uff0c\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u7684\u5377\u79ef\u6838\u4ee5\u83b7\u53d6\u66f4\u591a\u7684\u901a\u9053\u6570\u3002 \u53ef\u4ee5\u770b\u5230\u5f00\u59cb\u4f7f\u7528\u7684\u666e\u901a\u76843x3\u7684\u5377\u79ef\u548cmax pool\u5c42\uff08\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u867d\u7136\u53ef\u4ee5\u6709\u6548\u964d\u4f4e\u8ba1\u7b97\u91cf\uff0c\u4f46\u5176\u5b58\u50a8\u8bbf\u95ee\u6548\u7387\u8f83\u5dee\uff0c\u56e0\u6b64\u7b2c\u4e00\u4e2a\u5377\u79ef\u5e76\u6ca1\u6709\u4f7f\u7528ShuffleNet\u57fa\u672c\u5355\u5143\uff09\u3002 \u7136\u540e\u662f\u4e09\u4e2a\u9636\u6bb5\uff0c\u6bcf\u4e2a\u9636\u6bb5\u90fd\u662f\u91cd\u590d\u5806\u79ef\u4e86\u51e0\u4e2aShuffleNet\u7684\u57fa\u672c\u5355\u5143\u3002\u8fd93\u4e2a\u9636\u6bb5\u7684\u7b2c\u4e00\u4e2aBlock\u7684\u6b65\u957f\u4e3a2\u4ee5\u5b8c\u6210\u964d\u91c7\u6837\uff0c\u4e0b\u4e00\u4e2a\u9636\u6bb5\u7684\u901a\u9053\u6570\u662f\u4e0a\u4e00\u4e2a\u7684\u4e24\u500d\u3002 ShuffleNet_v2 \u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684Channel Split\u64cd\u4f5c\uff0c\u5982\u56fe7.13c\u6240\u793a\uff0c\u5c06\u8f93\u5165\u7279\u5f81\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u8fdb\u884c\u771f\u6b63\u7684\u6df1\u5ea6\u53ef\u5206\u79bb\u8ba1\u7b97\uff0c\u5c06\u8ba1\u7b97\u7ed3\u679c\u4e0e\u53e6\u4e00\u90e8\u5206\u8fdb\u884c\u901a\u9053Concat\uff0c\u6700\u540e\u8fdb\u884c\u901a\u9053\u7684\u6df7\u6d17\u64cd\u4f5c\uff0c\u5b8c\u6210\u4fe1\u606f\u7684\u4e92\u901a\u3002 \u6574\u4e2a\u8fc7\u7a0b\u6ca1\u6709\u4f7f\u7528\u5230 1\u00d71 \u7ec4\u5377\u79ef\uff0c\u4e5f\u907f\u514d\u4e86\u9010\u70b9\u76f8\u52a0\u7684\u64cd\u4f5c\u3002 \u5728\u9700\u8981\u964d\u91c7\u6837\u4e0e\u901a\u9053\u7ffb\u500d\u65f6\uff0cShuffleNet v2\u53bb\u6389\u4e86Channel Split\u64cd\u4f5c\uff0c\u8fd9\u6837\u6700\u540eConcat\u65f6\u901a\u9053\u6570\u4f1a\u7ffb\u500d","title":"ShuffleNet"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ghostnetost","text":"\u8bba\u6587 | Code \u4f18\u70b9 Ghost Module\u662f\u4e00\u4e2a\u5373\u63d2\u5373\u7528\u6a21\u5757\uff0c\u53ef\u4ee5\u65e0\u7f1d\u8854\u63a5\u73b0\u6709\u7684CNN\u4e2d \u91c7\u7528Ghost Module\u8bbe\u8ba1\u7684Ghost Net \uff0c\u5728ILSVRC-2012\u4e0atop1\u8d85\u8fc7Mobilenet-V3\uff0c\u5e76\u4e14\u53c2\u6570\u66f4\u5c11 \u8bba\u6587\u63d0\u51fa\u89c2\u70b9 \u7279\u5f81\u56fe\u5197\u4f59 Ghost\u5377\u79ef \u03a6\u7ebf\u6027\u53d8\u6362\u662f\u4ec0\u4e48\uff1f \u03a6\u7ebf\u6027\u53d8\u6362\u5176\u5b9e\u4e5f\u5c31\u662f 3x3 \u5377\u79ef\uff0c\u5377\u79ef\u672c\u8eab\u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u7ebf\u6027\u7ec4\u5408\u7684\u8fd0\u7b97\uff0c\u53ea\u4e0d\u8fc7\u5728\u6211\u4eec\u589e\u52a0\u4e86\u6fc0\u6d3b\u51fd\u6570\u4e4b\u540e\u8d4b\u4e88\u4e86\u5176\u975e\u7ebf\u6027 class GhostModule ( nn . Module ): def __init__ ( self , inp , oup , kernel_size = 1 , ratio = 2 , dw_size = 3 , stride = 1 , relu = True ): super ( GhostModule , self ) . __init__ () self . oup = oup init_channels = math . ceil ( oup / ratio ) new_channels = init_channels * ( ratio - 1 ) # \u8fd9\u4e2a\u662f\u2461\u8fc7\u7a0b\uff0c\u5c31\u662f\u666e\u901a\u7684\u5377\u79ef\uff0c\u8f93\u51fa\u901a\u9053\u4e3aN/2 self . primary_conv = nn . Sequential ( nn . Conv2d ( inp , init_channels , kernel_size , stride , kernel_size // 2 , bias = False ), nn . BatchNorm2d ( init_channels ), nn . ReLU ( inplace = True ) if relu else nn . Sequential (), ) # \u7ebf\u6027\u53d8\u6362 self . cheap_operation = nn . Sequential ( # 3x3\u5377\u79ef\u53ef\u4ee5\u7406\u89e3 nn . Conv2d ( init_channels , new_channels , dw_size , 1 , dw_size // 2 , groups = init_channels , bias = False ), nn . BatchNorm2d ( new_channels ), # \u7528relu\u53c2\u6570\u6765\u63a7\u5236\u662f\u5426\u8fdb\u884c\u7ebf\u6027\u53d8\u6362 nn . ReLU ( inplace = True ) if relu else nn . Sequential (), ) def forward ( self , x ): x1 = self . primary_conv ( x ) x2 = self . cheap_operation ( x1 ) out = torch . cat ([ x1 , x2 ], dim = 1 ) # \u6839\u636e\u901a\u9053\u8fdb\u884c\u62fc\u63a5 return out [:,: self . oup ,:,:] Ghost\u6a21\u5757 Ghost Bottlenecks \uff0c\u7ed3\u6784\u4e0eResNet\u7684\u662f\u7c7b\u4f3c\u7684\uff0c\u5e76\u4e14\u4e0emobilenet-v2\u4e00\u6837\u5728\u7b2c\u4e8c\u4e2amodule\u4e4b\u540e\u4e0d\u91c7\u7528ReLU\u6fc0\u6d3b\u51fd\u6570\u3002 \u5de6\u8fb9\u662fstride=1\u7684Ghost Bottlenecks\uff0c\u53f3\u8fb9\u662fstride=2\u7684Ghost Bottlenecks\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u7f29\u51cf\u7279\u5f81\u56fe\u5927\u5c0f\u3002","title":"GhostNet:[\u0261o\u028ast]"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#vovnet","text":"\u8bba\u6587 | Code1 | Code2 DenseNet\u7684\u53c2\u6570\u91cf\u548c\u8ba1\u7b97\u91cf\u76f8\u5bf9\u4e8eResNet\u5c11\uff0c\u4f46\u662f\u901f\u5ea6\u5374\u6162\uff0c\u4e3b\u8981\u662f: DenseNet\u4e2d\u5bc6\u96c6\u8fde\u63a5\u6240\u5bfc\u81f4\u7684**\u9ad8\u5185\u5b58\u8bbf\u95ee\u6210\u672c**(\u7531\u4e8e\u9700\u8981\u8fdb\u884c\u591a\u6b21Concatnate\u64cd\u4f5c\uff0c \u6570\u636e\u9700\u8981\u88ab\u590d\u5236\u591a\u6b21\uff0c\u663e\u5b58\u5bb9\u6613\u589e\u52a0\u5f97\u5f88\u5feb )\uff0c\u9644:\u6839\u636eshuffleNet V2\u8bba\u6587\u4e2d\u5185\u5b58\u7684\u8ba1\u7b97\u65b9\u5f0f\uff0c\u8f93\u5165\u901a\u9053\u548c\u8f93\u51fa\u901a\u9053\u76f8\u540c\u65f6MAC\u624d\u6700\u4f18\u3002 \u7531\u4e8e\u8f93\u5165channel\u6570\u8f83\u5927\uff0cDenseNet\u91c7\u7528\u4e861x1\u5377\u79ef\u5c42\u5148\u538b\u7f29\u7279\u5f81\uff0c\u8fd9\u4e2a\u989d\u5916\u5c42\u7684\u5f15\u5165\u5bf9GPU\u9ad8\u6548\u8ba1\u7b97\u4e0d\u5229\u3002 VoVNet\u4ece\u5185\u5b58\u8bbf\u95ee\u6210\u672c\uff08Memory Access Cost\uff0cMAC\uff09\u548cGPU\u8ba1\u7b97\u6548\u7387\u4e0a\u6765\u8003\u8651\uff0c\u53ef\u4ee5\u770b\u6210DenseNet\u7684\u53d8\u4f53\uff0c\u5728\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u4e0a\u6027\u80fd\u4f18\u4e8eDensNet\u3002 DenseNet\u7684\u4e00\u5927\u95ee\u9898\u5c31\u662f\u5bc6\u96c6\u8fde\u63a5\u592a\u91cd\u4e86\uff0c\u800c\u4e14\u6bcf\u4e2alayer\u90fd\u4f1a\u805a\u5408\u524d\u9762\u5c42\u7684\u7279\u5f81\uff0c\u5176\u5b9e\u9020\u6210\u7684\u662f\u7279\u5f81\u5197\u4f59\uff0cVoVNet\u8bba\u6587\u4e2d\u901a\u8fc7\u7814\u7a76DensNet\u6a21\u578bweights\u7684**L1\u8303\u6570**\u53d1\u73b0\u4e2d\u95f4\u5c42\u5bf9\u6700\u540e\u7684\u5206\u7c7b\u5c42\u8d21\u732e\u8f83\u5c11(\u6211\u7684\u7406\u89e3:\u540e\u9762\u7684\u5c42\u5df2\u7ecf\u5b66\u4e60\u5230\u4e86\u4e2d\u95f4\u5c42\u7684\u6838\u5fc3\u4fe1\u606f)\uff0c\u8fd9\u4e9b\u4fe1\u606f\u5197\u4f59\u5c31\u53ef\u4ee5\u88ab\u4f18\u5316\u3002\u6240\u4ee5VoVNet\u63d0\u51fa OSA \u6a21\u5757 OSA\u6a21\u5757:\u5c31\u662f\u53ea\u5728\u6700\u540e\u4e00\u6b21\u6027\u805a\u5408\u524d\u9762\u6240\u6709\u7684layer\uff0c\u6539\u52a8\u8f83\u5c0f\u89e3\u51b3\u95ee\u9898\u8f83\u5927\u3002 \u6bcf\u4e2alayer\u7684\u8f93\u5165channel\u6570\u662f\u56fa\u5b9a\u7684\uff0c\u8fd9\u91cc\u53ef\u4ee5\u8ba9\u8f93\u51fachannel\u6570\u548c\u8f93\u5165\u4e00\u81f4\u800c\u53d6\u5f97\u6700\u5c0f\u7684MAC \u800c\u4e14\u4e5f\u4e0d\u518d\u9700\u89811x1\u5377\u79ef\u5c42\u6765\u538b\u7f29\u7279\u5f81\uff0c\u6240\u4ee5OSA\u6a21\u5757\u662fGPU\u8ba1\u7b97\u9ad8\u6548\u7684\u3002 VoVNet\u7531OSA\u6a21\u5757\u6784\u6210\uff0c\u4e3b\u8981\u6709\u4e09\u79cd\u4e0d\u540c\u7684\u914d\u7f6e\uff0c\u8be6\u60c5\u89c1\u8bba\u6587\u3002","title":"VoVNet"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#vovnetv2","text":"\u8bba\u6587 | Code |\u5206\u5272\u7f51\u7edc: Real-Time Anchor-Free Instance Segmentation VoVNetV2\u5728VoVNet\u7684\u57fa\u7840\u4e0a\uff0c\u5f15\u5165\u4e86ResNet\u7684\u6b8b\u5dee\u8fde\u63a5\u548cSENet\u7684SE\u6a21\u5757 b:\u76f4\u63a5\u5c06\u8f93\u5165\u52a0\u5230\u8f93\u51fa\u4e0a\uff0c\u589e\u52a0\u77ed\u8def\u8fde\u63a5\uff0c\u4f7f\u5f97VoVNet\u53ef\u4ee5\u8bad\u7ec3\u66f4\u6df1\u7684\u7f51\u7edc\uff0c\u8bba\u6587\u4e2d\u662fVoVNet-99\u3002 c:\u5728\u6700\u540e\u7684\u7279\u5f81\u5c42\u4e0a\u52a0\u4e0a\u4e86sSE\u6a21\u5757\u6765\u8fdb\u4e00\u6b65\u589e\u5f3a\u7279\u5f81\uff0c\u539f\u59cb\u7684SE\u6a21\u5757\u5305\u542b\u4e24\u4e2aFC\u5c42\uff0c\u5176\u4e2d\u4e2d\u95f4\u7684FC\u5c42\u4e3b\u8981\u662f\u4e3a\u964d\u7ef4\uff0c\u8fd9\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u4f1a\u9020\u6210\u4fe1\u606f\u4e22\u5931\u3002\u800csSE\u6a21\u5757\u662f\u53bb\u6389\u4e86\u8fd9\u4e2a\u4e2d\u95f4FC\u5c42\u3002 VoVNetV2\u76f8\u6bd4VoVNet\u589e\u52a0\u4e86\u5c11\u8bb8\u7684\u8ba1\u7b97\u91cf\uff0c\u4f46\u662f\u6a21\u578b\u6027\u80fd\u6709\u63d0\u5347","title":"VoVNetV2"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#peleenet","text":"\u8bba\u6587 | \u5206\u7c7bCode | \u68c0\u6d4bCode DenseNet\u53d8\u4f53\uff0c\u88ab\u7528\u4e8e**\u89e3\u51b3\u5b58\u50a8\u548c\u8ba1\u7b97\u80fd\u529b\u53d7\u9650\u7684\u60c5\u51b5\u3002**PeleeNet\u53ea\u6709MobileNet\u6a21\u578b\u7684 66% ,\u5e76\u4e14\u6bd4MobileNet\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u5e38\u88ab\u7528\u4e8e SSD \u7684 backbone \u7f51\u7edc\u7ed3\u6784 \uff1a\u6838\u5fc3\u8bbe\u8ba1\u539f\u5219\u4e5f\u548cDenseNet\u76f8\u4eff Two-Way Dense Layer\uff1a Stem Block : ResNet\u548cDenseNet \u5728\u7b2c\u4e00\u5c42\u90fd\u662f\u7528\u7684\u662f\u4e00\u4e2a 7x7 \u3001 stride\u4e3a2 \u7684\u5377\u79ef\u5c42\uff0c\u6d45\u5c42\u7f51\u7edc\u7684\u4f5c\u7528\u662f\u63d0\u53d6\u56fe\u50cf\u7684\u8fb9\u7f18\u3001\u7eb9\u7406\u7b49\u4fe1\u606f\u3002Stem Block\u7684\u8bbe\u8ba1\u5c31\u662f**\u6253\u7b97\u4ee5\u6bd4\u8f83\u5c0f\u7684\u4ee3\u4ef7\u53d6\u4ee3 7x7 \u7684\u5377\u79ef**\u3002\u8be5\u7ed3\u6784\u53ef\u4ee5\u6709\u6548\u7684\u63d0\u5347\u7279\u5f81\u8868\u8fbe\u80fd\u529b\u4e14\u4e0d\u4f1a\u589e\u52a0\u989d\u5916\u7684\u8ba1\u7b97\u5f00\u9500\uff0c\u6bd4\u5176\u4ed6\u7684\u65b9\u6cd5\uff08\u589e\u52a0\u901a\u9053\u6216\u589e\u52a0\u589e\u957f\u7387\uff09\u90fd\u8981\u597d\u3002 \u6574\u4e2a\u7f51\u7edc\u7531\u4e00\u4e2a Stem Block \u548c\u56db\u9636\u7279\u5f81\u63d0\u53d6\u5668\u7ec4\u6210( Dense Layer+1x1 conv+avgpol ) \u4e3a\u4ec0\u4e48\u662f4\u9636\uff1f \u56db\u9636\u6bb5\u4e00\u822c\u4e3a\u5927\u6a21\u578b\u7684\u901a\u7528\u8bbe\u8ba1\u7ed3\u6784\uff0cShuffleNet\u4f7f\u7528\u4e86\u4e09\u9636\u6bb5\uff0c\u5e76\u5728\u6bcf\u4e2a\u9636\u6bb5\u7684\u5f00\u59cb\u90fd\u538b\u7f29\u4e86\u7279\u5f81\u56fe\u5927\u5c0f\uff0c\u5c3d\u7ba1\u8fd9\u6837\u53ef\u4ee5\u63d0\u5347\u8ba1\u7b97\u901f\u5ea6\uff0c\u4f46\u662f\u672c\u6587\u8ba4\u4e3a**\u524d\u9762\u7684\u9636\u6bb5\u5bf9\u89c6\u89c9\u4efb\u52a1\u5c24\u4e3a\u91cd\u8981\uff0c\u4e14\u8fc7\u65e9\u7684\u51cf\u5c0f\u7279\u5f81\u56fe\u5927\u5c0f\u4f1a\u635f\u574f\u7279\u5f81\u8868\u8fbe\u80fd\u529b**\uff0c\u56e0\u6b64**\u4ecd\u7136\u4f7f\u7528\u56db\u9636\u6bb5\u7ed3\u6784**\uff0c\u524d\u4e24\u9636\u6bb5\u7684\u5c42\u6570\u662f\u4e13\u95e8\u63a7\u5236\u5728\u4e00\u4e2a\u53ef\u63a5\u53d7\u7684\u8303\u56f4\u5185\u7684\u3002","title":"PeleeNet"},{"location":"%E5%9B%BE%E5%83%8F%E8%AF%86%E5%88%AB%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#bbn","text":"\u8bba\u6587 | \u4ee3\u7801 | ACCV\u6bd4\u8d5b \u4e3a\u4ec0\u4e48\u5bf9\u4e8e\u6837\u672c\u4e0d\u5747\u8861\u6570\u636e\u6a21\u578b\u7ed3\u679c\u66f4\u503e\u5411\u4e8e\u6570\u91cf\u591a\u7684\u7c7b\uff1f SGD \u4f18\u5316\u5668\u7684\u539f\u56e0:\u5747\u8861\u6570\u636e\uff0c\u5b66\u5230\u7684\u662f\u5168\u5c40\u6700\u4f18\u6216\u8fd1\u4f3c\uff0c\u4f46\u957f\u5c3e\u6570\u636eSGD\u4f7f\u5f97\u6a21\u578b\u4f18\u5316\u7684\u662f\u503e\u5411\u4e8e\u6570\u91cf\u591a\u7684\u7c7b\u7684\u5c40\u90e8\u6700\u4f18\u7684(\u56e0\u4e3a\u5e26\u52a8\u91cf\u7684 SGD \u7684 momentum \u4f1a\u6839\u636e\u8bad\u7ec3\u7d2f\u52a0\u5386\u53f2\u68af\u5ea6) baseline\u8bad\u7ec3\u957f\u5c3e\u6570\u636e\u6d4b\u8bd5\u65f6\u7cbe\u5ea6\u957f\u5f88\u5dee\uff1a\u957f\u5c3e\u6570\u636e\u5206\u5e03\u4e0d\u5747\u5300\uff0c\u6d4b\u8bd5\u6570\u636e\u5e38\u5e38\u5747\u5300\u5206\u5e03\u7684\uff0c\u4e5f\u5c31\u662f\u8bad\u7ec3\u6570\u636e\u5206\u5e03\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u5e03\u4e0d\u4e00\u6837\uff0c\u6240\u4ee5\u7ed3\u679c\u5c31\u8f83\u5dee\u4e86\u3002 \u5e38\u7528\u89e3\u51b3\u957f\u5c3e\u6548\u5e94\u7684\u65b9\u6cd5\uff1a \u7c7b\u522b\u91cd\u5e73\u8861\u7b56\u7565 (\u5982\u6743\u91cd\u91cd\u8d4b\u503c\uff0c\u91cd\u91c7\u6837\u7b49)\uff0c\u867d\u7136\u53ef\u4ee5\u8fbe\u5230\u4ee4\u4eba\u6ee1\u610f\u7684\u6548\u679c\uff0c\u4f46\u4f1a\u5728\u4e00\u5b9a\u7a0b\u5ea6\u4e0a\u7834\u574f\u7f51\u7edc\u5b66\u4e60\u67d0\u4e9b\u7279\u5f81\u8868\u793a\u7684\u80fd\u529b\u3002 \u8fd9\u4e9b\u65b9\u6cd5\u901a\u8fc7\u5728\u4e00\u4e2abatch\u4e2d\u8fdb\u884c\u6837\u672c\u91cd\u91c7\u6837\uff1b\u6743\u91cd\u91cd\u8d4b\u503c\u3002 \u8fc7\u91c7\u6837:\u91cd\u590d\u6837\u672c\u91cf\u5c11\u7684\u6570\u636e\u7c7b\u522b\u3002\u6b20\u91c7\u6837\uff1a\u51cf\u5c11\u6837\u672c\u91cf\u591a\u7684\u7c7b\u522b\u6570\u636e\u3002\u526f\u4f5c\u7528\uff1a\u589e\u52a0\u5c3e\u90e8\u6570\u636e\u53ef\u80fd\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5bf9\u5c3e\u90e8\u7c7b\u522b\u7684\u8fc7\u62df\u5408\uff0c\u800c\u4e22\u5f03\u5b9d\u8d35\u7684\u6570\u636e\u5fc5\u7136\u4f1a\u524a\u5f31\u6df1\u5ea6\u7f51\u7edc\u7684\u6cdb\u5316\u80fd\u529b\u3002 \u6743\u91cd\u91cd\u8d4b\u503c:\u5728\u635f\u5931\u51fd\u6570\u4e2d\u4e3a\u5c3e\u90e8\u7c7b\u7684\u8bad\u7ec3\u6837\u672c\u5206\u914d\u8f83\u5927\u7684\u6743\u91cd\uff0c\u4f46\u4e0d\u9002\u5408\u5904\u7406\u5927\u89c4\u6a21\u7684\u771f\u5b9e\u4e16\u754c\u7684\u957f\u5c3e\u6570\u636e\uff0c\u5e76\u4e14\u5bb9\u6613\u9020\u6210\u4f18\u5316\u56f0\u96be\u3002 BBN\u7b56\u7565 \uff1a\u63d0\u51fa\u4e86\u4e00\u4e2a\u7edf\u4e00\u7684**\u53cc\u8fb9\u5206\u652f\u7f51\u7edc**\uff0c\u4e00\u8fb9\u4fdd\u8bc1\u7279\u5f81\u8868\u793a\u80fd\u529b\uff0c\u53e6\u4e00\u8fb9\u4fdd\u8bc1\u5206\u7c7b\u80fd\u529b\u3002\u540c\u65f6\u5f15\u5165**\u7d2f\u8ba1\u5b66\u4e60\u7b56\u7565**:\u9996\u5148\u5b66\u4e60\u901a\u7528\u7684\u7279\u5f81\u8868\u793a\uff0c\u7136\u540e\u9010\u6e10\u5c06\u6ce8\u610f\u529b\u653e\u5728\u5c3e\u90e8\u6570\u636e\uff08\u6837\u672c\u91cf\u8f83\u5c11\u7684\u6570\u636e\uff09\u4e0a\u3002 \u7f51\u7edc\u6a21\u578b \u5047\u8bbe X \u4e3a\u8bad\u7ec3\u6837\u672c\uff0c y \u4e3a\u5bf9\u5e94\u7684\u6807\u7b7e\u3002\u5bf9\u4e8e\u53cc\u8fb9\u5206\u652f\uff0c\u5206\u522b\u5e94\u7528\u5747\u5300\u91c7\u6837\u548c\u53cd\u5411\u91c7\u6837\u5f97\u5230\u4e24\u7ec4\u6837\u672c (X_c,y_c)\u548c(X_r,y_r) \uff0c\u7136\u540e\u7ecf\u8fc7\u5404\u81ea\u5206\u652f\u7684\u7279\u5f81\u63d0\u53d6\u548c\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5f97\u5230\u76f8\u5e94\u7684\u7279\u5f81\u5411\u91cf f_c,f_r \u3002\u7136\u540e\u901a\u8fc7**\u7279\u5b9a\u7684\u7d2f\u79ef\u5b66\u4e60\u7b56\u7565**\uff0c\u53ef\u4ee5\u5728\u8bad\u7ec3\u9636\u6bb5\u5c06\u7f51\u7edc\u5b66\u4e60\u7684\u201c\u6ce8\u610f\u529b\u201d\u8f6c\u79fb\u5230\u4e24\u4e2a\u5206\u652f\u4e4b\u95f4\uff1a\u901a\u8fc7\u81ea\u9002\u5e94\u5e73\u8861\u53c2\u6570\u03b1\u63a7\u5236\u5206\u652f\u7684\u7279\u5f81\u5411\u91cf \u03b1f_c,(1-\u03b1)f_r \u88ab\u9001\u5230\u5bf9\u5e94\u5206\u652f\u7684\u5206\u7c7b\u5668 W_c\u3001W_r \u4e2d\uff0c\u7136\u540e\u901a\u8fc7\u5143\u7d20\u76f8\u52a0\u8fdb\u884c\u878d\u5408\uff0c\u9001\u5230 softmax \u540e\u8fdb\u884c\u9884\u6d4b\u3002 \u635f\u5931\u51fd\u6570\uff0c\u5bf9\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570( E )\u8fdb\u884c\u4f7f\u7528\u03b1\u63a7\u5236\u52a0\u6743 \u5747\u5300\u91c7\u6837 \uff1a\u662f\u6307\u5728\u4e00\u4e2aepoch\u4e2d\uff0c\u8bad\u7ec3\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u6837\u672c\u90fd\u53ea\u4f1a\u4ee5\u76f8\u540c\u7684\u6982\u7387\u88ab\u91c7\u6837\u4e00\u6b21\uff0c\u6982\u7387 1/N \u3002 \u53cd\u5411\u91c7\u6837 \uff1a\u6bcf\u4e2a\u7c7b\u522b\u7684\u91c7\u6837\u6982\u7387\u4e0e\u6837\u672c\u5bb9\u91cf\u7684\u5012\u6570\u6210\u6b63\u6bd4\uff0c\u4e5f\u5c31\u662f\u8bf4\u67d0\u4e2a\u7c7b\u522b\u7684\u6837\u672c\u5bb9\u91cf\u8d8a\u5927\uff0c\u88ab\u91c7\u6837\u7684\u53ef\u80fd\u6027\u5c31\u8d8a\u5c0f\u3002 \u7d2f\u8ba1\u5b66\u4e60\u7b56\u7565 \u03b1\u901a\u8fc7\u9002\u914d\u5668\u6839\u636e\u8bad\u7ec3\u7684\u8fed\u4ee3\u6b21\u6570\u81ea\u52a8\u751f\u6210\uff0c\u4fc3\u4f7f\u6574\u4e2aBBN\u7ed3\u6784**\u9996\u5148\u4ece\u539f\u59cb\u7684\u5206\u5e03\u4e2d\u5b66\u4e60\u901a\u7528\u7279\u5f81\uff0c\u7136\u540e\u9010\u6e10\u5c06\u6ce8\u610f\u529b\u96c6\u4e2d\u5230\u5c3e\u90e8\u6570\u636e\u53ca\u6837\u672c\u91cf\u8f83\u5c11\u7684\u6570\u636e\u7c7b\u522b\u4e2d\u53bb\u3002** \u66f4\u91cd\u8981\u7684\u662f\uff0c\u03b1\u53ef\u4ee5\u63a7\u5236\u6bcf\u4e00\u4e2a\u5206\u652f\u7684\u53c2\u6570\u66f4\u65b0\uff0c\u53ef\u4ee5\u907f\u514d\u5728\u8bad\u7ec3\u672b\u671f\uff0c\u8fc7\u5ea6\u5f3a\u8c03\u5c3e\u90e8\u6570\u636e\u800c\u635f\u5bb3\u4e86\u901a\u7528\u7684\u7279\u5f81\u8868\u793a\u3002 \u63a8\u7406\u9636\u6bb5\u4e24\u4e2a\u5206\u652f\u540c\u6837\u91cd\u8981\uff0c\u8bbe\u7f6e\u81ea\u9002\u5e94\u53c2\u6570 \u03b1 \u7684\u503c\u4e3a 0.5 \u3002","title":"BBN(\u89e3\u51b3\u957f\u5c3e\u6570\u636e)"},{"location":"%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/","text":"\u56fd\u5185\u5982\u4f55\u4e0b\u8f7d\u8c37\u6b4c\u7f51\u76d8 link \u00b6 https : // api . moeclub . org / GoogleDrive / { FileID } # \u586b\u5199fileId\u540e\u8bbf\u95ee\u5373\u53ef\u4e0b\u8f7d\u3002 Ubuntu\u4e0bGPU\u73af\u5883\u642d\u5efa \u00b6 \u7cfb\u7edf\uff1a Ubuntu-16.04 / Ubuntu-18.04 \u663e\u5361\uff1a GeForce GTX 1080Ti \u9a71\u52a8\uff1a Driver Version\uff1a410.93 / \u5176\u4ed6 \u5b89\u88c5\u9a71\u52a8(\u8f6f\u4ef6\u5b89\u88c5) \u6253\u5f00 ubuntu16/18 \u7684 software & updates \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u91cd\u542f\u7535\u8111\uff0c\u8f93\u5165\u547d\u4ee4: nvidia-smi ,\u8f93\u51fa\u5982\u4e0b,\u5219\u8868\u660e\u5b89\u88c5\u6210\u529f \u5b89\u88c5\u9a71\u52a8(\u547d\u4ee4\u884c\u5b89\u88c5) \u7981\u7528\u81ea\u5e26\u9a71\u52a8 # 1. \u5378\u8f7d\u4e4b\u524d\u9a71\u52a8\uff0c\u82e5\u65e0\u9a71\u52a8\u53ef\u4ee5\u7701\u7565 sudo apt-get purge nvidia* # 2. \u7981\u7528\u81ea\u5e26\u7684nouveau\u9a71\u52a8 sudo gedit /etc/modprobe.d/blacklist.conf # \u6253\u5f00\u914d\u7f6e\u6587\u4ef6 blacklist nouveau # \u6587\u672b\u6dfb\u52a0\uff0c\u4fdd\u5b58\u5373\u53ef sudo update-initramfs -u # \u66f4\u65b0\u6587\u4ef6\u4f7f\u5176\u751f\u6548 # 3. \u91cd\u542f(\u53ef\u7701\u7565) sudo reboot # 4. \u67e5\u770b\u81ea\u5e26\u9a71\u52a8\u662f\u5426\u88ab\u7981\u7528 lsmod | grep nouveau # \u65e0\u8f93\u51fa\u5219\u8868\u660e\u5df2\u88ab\u7981\u7528 \u4e0b\u8f7d\u5b89\u88c5NVIDIA\u9a71\u52a8: \u5b98\u7f51\u94fe\u63a5 # 1. \u7ed9\u4e0b\u8f7d\u597d\u7684\u9a71\u52a8\u8d4b\u4e88\u53ef\u6267\u884c\u6743\u9650 sudo chmod a+x NVIDIA-Linux-x86_64-390.48.run # 2. \u5173\u95edX\u670d\u52a1 sudo service lightdm stop # 3. \u8fd0\u884c\u9a71\u52a8\u53ef\u6267\u884c\u6587\u4ef6 sudo ./NVIDIA-Linux-x86_64-390.48.run \u2013no-opengl-files # 4. \u5b89\u88c5\u5b8c\u540e\u91cd\u542f\uff0c\u8f93\u5165\u547d\u4ee4:nvidia-smi\uff0c\u5982\u4e0b\u56fe\u663e\u793a\u5219\u5b89\u88c5\u6210\u529f \u5b89\u88c5 CUDA \u5b98\u7f51\u4e0b\u8f7d cuda \u5b98\u7f51\u94fe\u63a5 \uff0c\u5efa\u8bae\u9009\u62e9 cuda9.0/cuda10.0/cuda10.1 \uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u90fd\u4e0b\u8f7d\u5b89\u88c5\uff0c\u8fd9\u6837\u53ef\u4ee5\u8bbe\u7f6e\u591a\u7248\u672c\u5171\u5b58\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u4e5f\u65b9\u4fbf\u3002 \u5f00\u59cb\u5b89\u88c5: root \u6743\u9650 # 1. \u542f\u52a8\u5b89\u88c5 sudo sh cuda_9.0.176_384.81_linux.run# \u6ce8\u610f:\u5728\u63d0\u793a\u662f\u5426\u5b89\u88c5\u663e\u5361\u9a71\u52a8\u65f6\uff0c\u4e00\u5b9a\u9009\u62e9no\uff0c\u5176\u4ed6\u5404\u9879\u63d0\u793a\u9009\u62e9\u662f\uff0c\u5e76\u9ed8\u8ba4\u5b89\u88c5\u8def\u5f84\u5373\u53ef\u3002 # \u4e0b\u9762\u662f\u591a\u7248\u672ccuda\u7684\u4ecb\u7ecd(\u53ef\u9009) # 2. \u5b89\u88c5\u591a\u4e2a\u7248\u672ccuda sudo sh cuda_10.0***.run # cuda\u5b98\u7f51\u4e0b\u8f7d sudo sh cuda_10.1***.run # cuda\u5b98\u7f51\u4e0b\u8f7d # 3. \u9ed8\u8ba4\u8def\u5f84:/usr/local/cuda\uff0c\u6b64\u65f6\u2019/usr/local/\u2018\u76ee\u5f55\u4e0b\u4f1a\u6709\u2018cuda\u2019\u548c'cuda-9.0'\u4e24\u4e2a\u76ee\u5f55\uff0c\u5b9e\u9645\u4e0a'cuda'\u76ee\u5f55\u662f\u2018cuda-9.0\u2019\u76ee\u5f55\u7684link:\u5982\u679c\u4e0d\u6e05\u695a`ln`\u547d\u4ee4\u7528\u6cd5,\u81ea\u884c\u767e\u5ea6\u3002 # 4. \u5982\u679c\u4f60\u60f3\u5b89\u88c5\u591a\u4e2acuda\u7248\u672c\uff0c\u4f60\u53ea\u9700\u8981\u5220\u9664'cuda'\u76ee\u5f55\uff0c\u5e76\u628a\u5bf9\u5e94\u7684'cuda-xx'\u76ee\u5f55\u94fe\u63a5\u5230\u8be5\u76ee\u5f55\u4e0b\u5373\u53ef\uff0c\u4f8b\u5982\u9009\u62e9\u4f7f\u7528cuda-10.0\u7248\u672c(\u524d\u63d0\u662f\u4f60\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86): sudo ln -s /usr/local/cuda-10.0 /usr/local/cuda # \u8fd9\u6837\u5c31\u53ef\u4ee5\u5207\u6362cuda\u7248\u672c\u4e86 \u5f00\u59cb\u5b89\u88c5:\u975e root \u6743\u9650\uff0c\u666e\u901a\u7528\u6237 # 1.\u4e0b\u8f7dcuda:https://developer.nvidia.com/cuda-toolkit-archive \u683c\u5f0f\u9009runfile(local) # 2.\u4e0b\u8f7d\u5bf9\u5e94\u7684cudnn:https://developer.nvidia.com/rdp/cudnn-download,\u5907\u7528 # 3.\u9009\u62e9\u5408\u9002\u7684\u5b89\u88c5\u8def\u5f84\u548clib\u4f4d\u7f6e\uff0c\u540e\u9762\u8981\u7528\u5230 cd path mkdir cuda-10.1 mkdir cuda-10.1/mylib # 4.\u5b89\u88c5CUDA sh cuda_10.1.243_418.87.00_linux.run # 5.\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u7684\u9009\u62e9 # 5.1 \u9009\u62e9accept \u540e\uff0c\u66f4\u6539\u5b89\u88c5\u9009\u9879\uff08'X' \u4ee3\u8868\u9009\u4e2d\uff0c\u8fd9\u91cc\u6211\u53ea\u5b89\u88c5CUDA Toolkit\uff0c\u4e00\u822c\u4e0d\u641eCUDA\u7f16\u7a0b\u5355\u8dd1\u6df1\u5ea6\u5b66\u4e60\u5c31\u591f\u4e86\uff09\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u591a\u70b9 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 | CUDA Installer \u2502 - [ ] Driver \u2502 [ ] 418 .87.00 \u2502 + [ X ] CUDA Toolkit 10 .1 \u2502 [ ] CUDA Samples 10 .1 \u2502 [ ] CUDA Demo Suite 10 .1 \u2502 [ ] CUDA Documentation 10 .1 \u2502 Options \u2502 Install # 5.2 \u8fdb\u5165options\u9009\u9879\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684cuda\u5b89\u88c5\u8def\u5f84\u548clib\u8def\u5f84 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 Options \u2502 Driver Options \u2502 Toolkit Options # \u8fd9\u91cc\u66f4\u6539\u81ea\u5b9a\u4e49\u5b89\u88c5\u8def\u5f84 \u2502 Samples Options \u2502 Library install path ( Blank for system default ) # \u8fd9\u91cc\u66f4\u6539lib\u5b89\u88c5\u8def\u5f84 \u2502 Done # 5.3 CUDA Toolkit \u53bb\u6389\u5168\u90e8\u542b\u6709/usr\u7684\u76ee\u5f55\uff0c\u8fdb\u5165 Change Toolkit Install Path\u8bbe\u7f6ecuda\u5b89\u88c5\u5230\u81ea\u5df1\u5177\u6709\u5199\u5165\u6743\u9650\u7684\uff0c\u5c31\u662f\u521a\u624d\u5efa\u597d\u7684cuda-10.1 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 CUDA Toolkit \u2502 Change Toolkit Install Path # \u5728\u8fd9\u91cc\u6309Enter\u952e\u6765\u66f4\u6539\u5b89\u88c5\u8def\u5f84\u5373\u53ef\uff0c\u7edd\u5bf9\u8def\u5f84 \u2502 [ ] Create symbolic link from /usr/local/cuda \u2502 - [ ] Create desktop menu shortcuts \u2502 [ ] Yes \u2502 [ ] No \u2502 [ ] Install manpage documents to /usr/share/man \u2502 Done # 5.4 \u56de\u5230options\u83dc\u5355\uff0c\u66f4\u6539Library install path (\u4e0d\u6539\u4e0d\u884c\uff0c\u5b83\u4f1a\u5077\u5077\u5199\u5165/var/lib) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 Library install path ( Blank for system default ) \u2502 /home/chenyuyang/cuda-10.1/mylib/ # 6.\u7136\u540e\u5728.bashrc\u4e2d\u5199\u5165\u5b89\u88c5\u8def\u5f84\u5373\u53ef \u628a\u5b89\u88c5\u8def\u5f84\u5199\u5165\u5230\u914d\u7f6e\u73af\u5883\u4e2d # 1. \u6253\u5f00\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u7684\u914d\u7f6e\u6587\u4ef6 sudo vim ~/.bashrc # 2. \u5bfc\u5165\u5b89\u88c5\u8def\u5f84 export LD_LIBRARY_PATH = $LD_LIBRARY_PATH :/usr/local/cuda/lib64 # \u975eroot\u7528\u6237\u6709\u70b9\u4e0d\u540c export LD_LIBRARY_PATH = $LD_LIBRARY_PATH :/home/chenyuyang/cuda/lib64:/home/chenyuyang/cuda-10.1/mylib/lib64 export PATH = $PATH :/usr/local/cuda/bin export CUDA_HOME = $CUDA_HOME :/usr/local/cuda # \u2019$CUDA_HOME:\u2018\u53ef\u4ee5\u53bb\u6389\uff0c\u56e0\u4e3a\u6709\u4e9b\u9879\u76ee\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4f1a\u62a5\u9519\uff0c\u4f8b\u5982:maskrcnn_benchmark\u9879\u76ee\u4e2d\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c31\u4f1a\u62a5\u9519 # 3. \u4f7f\u5f97\u8def\u5f84\u751f\u6548 source ~/.bashrc \u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f,\u8f93\u5165\u547d\u4ee4: nvcc --version cudnn\u5b89\u88c5 \u5b98\u7f51\u4e0b\u8f7d cudnn \u5b98\u7f51\u94fe\u63a5 \uff0c\u6ce8\u610f:\u8fd9\u91cc\u8981\u9009\u62e9\u5339\u914d\u4f60 Cuda \u7248\u672c\u7684 cudnn \u7248\u672c\uff0c\u5982\u679c\u4f60\u5b89\u88c5\u591a\u4e2a\u7248\u672c Cuda \uff0c\u9700\u8981\u628a\u5404\u81ea\u5bf9\u5e94\u7684 cudnn \u7248\u672c\u4e5f\u4e0b\u8f7d\u4e0b\u6765 \u628a\u5bf9\u5e94\u7248\u672c cudnn \u590d\u5236\u5230 Cuda \u4e2d(\u53ef\u4ee5\u628a cudnn \u7406\u89e3\u4e3a Cuda \u7684\u63d2\u4ef6)\uff0c\u5982\u679c\u4f60\u662f\u591a\u7248\u672c\uff0c\u4f60\u53ea\u9700\u8981\u5b89\u88c5\u5bf9\u5e94\u7248\u672c\u4e00\u4e00\u590d\u5236\u5373\u53ef\uff0c\u6ce8\u610f: Cuda \u9ed8\u8ba4\u5b89\u88c5\u8def\u5f84 /usr/local/cuda # \u5b89\u88c5cudnn \u975eroot\u7528\u6237\u5c31\u4e0d\u8981\u52a0sudo\u4e86 sudo cp cuda/include/cudnn.h /usr/local/cuda/include/ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ sudo chmod a+r /usr/local/cuda/include/cudnn.h sudo chmod a+r /usr/local/cuda/lib64/libcudnn* # 8.0\u4ee5\u540e\u7684\u7248\u672c $ sudo cp cuda/include/cudnn*.h /usr/local/cuda/include $ sudo cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64 $ sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn* \u67e5\u770b\u662f cudnn \u662f\u5426\u5b89\u88c5\u6210\u529f,\u6210\u529f\u540e\u4f1a\u8f93\u51fa cudnn \u7248\u672c # \u67e5\u770bcudnn\u7248\u672c\u547d\u4ee4 cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 \u73af\u5883\u642d\u5efa\u6210\u529f vim/linux\u7684\u57fa\u672c\u4f7f\u7528 \u00b6 vim\u535a\u5ba2 | linux\u535a\u5ba2 git\u7684\u57fa\u672c\u4f7f\u7528 \u00b6 git\u535a\u5ba2-easy | git\u535a\u5ba2-hard | git\u535a\u5ba2-thrid # 1.\u521d\u59cb\u5316 git init # \u521d\u59cb\u5316\u4ed3\u5e93 git clone xxx.git renameProject # \u514b\u9686\u4ed3\u5e93 # 2.\u8ddf\u8e2a\u72b6\u6001\u7b49 # \u6240\u6709\u6587\u4ef6\u65e0\u5916\u4e4e\u4e24\u79cd\u72b6\u6001\uff1a\u8ddf\u8e2a\u6216\u672a\u8ddf\u8e2a git status # \u68c0\u67e5\u5f53\u524d\u6587\u4ef6\u72b6\u6001\uff0c\u4f1a\u663e\u793a\u6587\u4ef6\u662f\u5426\u88ab\u8ddf\u8e2a,\u9664\u4e86\u65b0\u5efa\u6587\u4ef6\u4e14\u6ca1\u6709add\u662f\u65e0\u8ddf\u8e2a\u72b6\u6001\uff0c\u5176\u4ed6\u5c5e\u4e8e\u8ddf\u8e2a\u72b6\u6001\uff0c\u5305\u542b\u4fee\u6539\uff0c\u6682\u5b58\uff0c\u672a\u66f4\u65b0\u7b49 git add xxx # \u8ddf\u8e2a\u65b0\u6587\u4ef6,\u5b58\u5165\u7f13\u5b58\u533a git rm --cached xxx # \u4ece\u7f13\u5b58\u533a\u79fb\u9664 git rm --cached log/ \\* .log # \u4ece\u7f13\u5b58\u533a\u6279\u91cf\u5220\u9664log\u65e5\u5fd7 git diff # \u6bd4git status\u66f4\u8be6\u7ec6\uff0c\u6bd4\u8f83\u7684\u662f\u5de5\u4f5c\u76ee\u5f55\u4e2d\u8fd8\u6ca1\u6682\u5b58\u7684\u6539\u52a8\u548c\u6682\u5b58\u533a\u57df\u5feb\u7167\u4e4b\u95f4\u7684\u5dee\u5f02 git diff \u2013cached # \u6bd4\u8f83\u5df2\u7ecf\u6682\u5b58\u8d77\u6765\u7684\u6587\u4ef6\u548c\u4e0a\u6b21\u63d0\u4ea4\u65f6\u7684\u5feb\u7167\u4e4b\u95f4\u7684\u5dee\u5f02 git commit -m \"\u63d0\u4ea4\u8bf4\u660e\" # \u6bcf\u4e00\u6b21\u8fd0\u884c\u63d0\u4ea4\u64cd\u4f5c\uff0c\u90fd\u662f\u5bf9\u4f60\u9879\u76ee\u4f5c\u4e00\u6b21\u5feb\u7167\uff0c\u4ee5\u540e\u53ef\u4ee5\u56de\u5230\u8fd9\u4e2a\u72b6\u6001\uff0c\u6216\u8005\u8fdb\u884c\u6bd4\u8f83 # 3.\u5ffd\u7565\u67d0\u4e9b\u6587\u4ef6 vi .gitignore $ cat.gitignore *. [ o,a ] # \u5ffd\u7565\u6240\u6709\u4ee5 .o \u6216 .a \u7ed3\u5c3e\u7684\u6587\u4ef6,\u5e38\u662f\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u51fa\u73b0\uff0c\u4e0d\u9700\u8981\u8ddf\u8e2a\u4ed6\u4eec\u7684\u7248\u672c *~ # \u5ffd\u7565\u6240\u6709\u4ee5\u6ce2\u6d6a\u7b26\uff08~\uff09\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5e38\u662f\u6587\u672c\u7f16\u8f91\u8f6f\u4ef6\u4fdd\u5b58\u7684\u526f\u672c\u3002 # 3.1 \u661f\u53f7\uff08*\uff09\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u5b57\u7b26\uff1b # 3.2 [abc] \u5339\u914d\u4efb\u4f55\u4e00\u4e2a\u5217\u5728\u65b9\u62ec\u53f7\u4e2d\u7684\u5b57\u7b26\uff08\u8fd9\u4e2a\u4f8b\u5b50\u8981\u4e48\u5339\u914d\u4e00\u4e2a a\uff0c\u8981\u4e48\u5339\u914d\u4e00\u4e2a b\uff0c\u8981\u4e48\u5339\u914d\u4e00\u4e2a c\uff09\uff1b # 3.3 \u95ee\u53f7\uff08?\uff09\u53ea\u5339\u914d\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\uff1b # 3.4 \u5982\u679c\u5728\u65b9\u62ec\u53f7\u4e2d\u4f7f\u7528\u77ed\u5212\u7ebf\u5206\u9694\u4e24\u4e2a\u5b57\u7b26\uff0c\u8868\u793a\u6240\u6709\u5728\u8fd9\u4e24\u4e2a\u5b57\u7b26\u8303\u56f4\u5185\u7684\u90fd\u53ef\u4ee5\u5339\u914d\uff08\u6bd4\u5982 [0-9] \u8868\u793a\u5339\u914d\u6240\u6709 0 \u5230 9 \u7684\u6570\u5b57\uff09\u3002 # \u4e3e\u4e2a\u5c0f\u4f8b\u5b50 *.a # \u5ffd\u7565\u6240\u6709 .a \u7ed3\u5c3e\u7684\u6587\u4ef6 !lib.a # \u4f46 lib.a \u9664\u5916 # \uff01\u53d6\u53cd /TODO # \u4ec5\u4ec5\u5ffd\u7565\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 TODO \u6587\u4ef6\uff0c\u4e0d\u5305\u62ec subdir/TODO build/ # \u5ffd\u7565 build/ \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u76ee\u5f55\u5fc5\u987b\u5e26\u53cd\u659c\u6760(/)\u8bc1\u660e\u5ffd\u7565\u7684\u662f\u76ee\u5f55 doc/*.txt # \u4f1a\u5ffd\u7565 doc/notes.txt \u4f46\u4e0d\u5305\u62ec doc/server/arch.txt","title":"\u5b9e\u7528\u5de5\u5177\u6559\u7a0b"},{"location":"%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/#link","text":"https : // api . moeclub . org / GoogleDrive / { FileID } # \u586b\u5199fileId\u540e\u8bbf\u95ee\u5373\u53ef\u4e0b\u8f7d\u3002","title":"\u56fd\u5185\u5982\u4f55\u4e0b\u8f7d\u8c37\u6b4c\u7f51\u76d8link"},{"location":"%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/#ubuntugpu","text":"\u7cfb\u7edf\uff1a Ubuntu-16.04 / Ubuntu-18.04 \u663e\u5361\uff1a GeForce GTX 1080Ti \u9a71\u52a8\uff1a Driver Version\uff1a410.93 / \u5176\u4ed6 \u5b89\u88c5\u9a71\u52a8(\u8f6f\u4ef6\u5b89\u88c5) \u6253\u5f00 ubuntu16/18 \u7684 software & updates \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u91cd\u542f\u7535\u8111\uff0c\u8f93\u5165\u547d\u4ee4: nvidia-smi ,\u8f93\u51fa\u5982\u4e0b,\u5219\u8868\u660e\u5b89\u88c5\u6210\u529f \u5b89\u88c5\u9a71\u52a8(\u547d\u4ee4\u884c\u5b89\u88c5) \u7981\u7528\u81ea\u5e26\u9a71\u52a8 # 1. \u5378\u8f7d\u4e4b\u524d\u9a71\u52a8\uff0c\u82e5\u65e0\u9a71\u52a8\u53ef\u4ee5\u7701\u7565 sudo apt-get purge nvidia* # 2. \u7981\u7528\u81ea\u5e26\u7684nouveau\u9a71\u52a8 sudo gedit /etc/modprobe.d/blacklist.conf # \u6253\u5f00\u914d\u7f6e\u6587\u4ef6 blacklist nouveau # \u6587\u672b\u6dfb\u52a0\uff0c\u4fdd\u5b58\u5373\u53ef sudo update-initramfs -u # \u66f4\u65b0\u6587\u4ef6\u4f7f\u5176\u751f\u6548 # 3. \u91cd\u542f(\u53ef\u7701\u7565) sudo reboot # 4. \u67e5\u770b\u81ea\u5e26\u9a71\u52a8\u662f\u5426\u88ab\u7981\u7528 lsmod | grep nouveau # \u65e0\u8f93\u51fa\u5219\u8868\u660e\u5df2\u88ab\u7981\u7528 \u4e0b\u8f7d\u5b89\u88c5NVIDIA\u9a71\u52a8: \u5b98\u7f51\u94fe\u63a5 # 1. \u7ed9\u4e0b\u8f7d\u597d\u7684\u9a71\u52a8\u8d4b\u4e88\u53ef\u6267\u884c\u6743\u9650 sudo chmod a+x NVIDIA-Linux-x86_64-390.48.run # 2. \u5173\u95edX\u670d\u52a1 sudo service lightdm stop # 3. \u8fd0\u884c\u9a71\u52a8\u53ef\u6267\u884c\u6587\u4ef6 sudo ./NVIDIA-Linux-x86_64-390.48.run \u2013no-opengl-files # 4. \u5b89\u88c5\u5b8c\u540e\u91cd\u542f\uff0c\u8f93\u5165\u547d\u4ee4:nvidia-smi\uff0c\u5982\u4e0b\u56fe\u663e\u793a\u5219\u5b89\u88c5\u6210\u529f \u5b89\u88c5 CUDA \u5b98\u7f51\u4e0b\u8f7d cuda \u5b98\u7f51\u94fe\u63a5 \uff0c\u5efa\u8bae\u9009\u62e9 cuda9.0/cuda10.0/cuda10.1 \uff0c\u5f53\u7136\uff0c\u4f60\u4e5f\u53ef\u4ee5\u90fd\u4e0b\u8f7d\u5b89\u88c5\uff0c\u8fd9\u6837\u53ef\u4ee5\u8bbe\u7f6e\u591a\u7248\u672c\u5171\u5b58\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u4e5f\u65b9\u4fbf\u3002 \u5f00\u59cb\u5b89\u88c5: root \u6743\u9650 # 1. \u542f\u52a8\u5b89\u88c5 sudo sh cuda_9.0.176_384.81_linux.run# \u6ce8\u610f:\u5728\u63d0\u793a\u662f\u5426\u5b89\u88c5\u663e\u5361\u9a71\u52a8\u65f6\uff0c\u4e00\u5b9a\u9009\u62e9no\uff0c\u5176\u4ed6\u5404\u9879\u63d0\u793a\u9009\u62e9\u662f\uff0c\u5e76\u9ed8\u8ba4\u5b89\u88c5\u8def\u5f84\u5373\u53ef\u3002 # \u4e0b\u9762\u662f\u591a\u7248\u672ccuda\u7684\u4ecb\u7ecd(\u53ef\u9009) # 2. \u5b89\u88c5\u591a\u4e2a\u7248\u672ccuda sudo sh cuda_10.0***.run # cuda\u5b98\u7f51\u4e0b\u8f7d sudo sh cuda_10.1***.run # cuda\u5b98\u7f51\u4e0b\u8f7d # 3. \u9ed8\u8ba4\u8def\u5f84:/usr/local/cuda\uff0c\u6b64\u65f6\u2019/usr/local/\u2018\u76ee\u5f55\u4e0b\u4f1a\u6709\u2018cuda\u2019\u548c'cuda-9.0'\u4e24\u4e2a\u76ee\u5f55\uff0c\u5b9e\u9645\u4e0a'cuda'\u76ee\u5f55\u662f\u2018cuda-9.0\u2019\u76ee\u5f55\u7684link:\u5982\u679c\u4e0d\u6e05\u695a`ln`\u547d\u4ee4\u7528\u6cd5,\u81ea\u884c\u767e\u5ea6\u3002 # 4. \u5982\u679c\u4f60\u60f3\u5b89\u88c5\u591a\u4e2acuda\u7248\u672c\uff0c\u4f60\u53ea\u9700\u8981\u5220\u9664'cuda'\u76ee\u5f55\uff0c\u5e76\u628a\u5bf9\u5e94\u7684'cuda-xx'\u76ee\u5f55\u94fe\u63a5\u5230\u8be5\u76ee\u5f55\u4e0b\u5373\u53ef\uff0c\u4f8b\u5982\u9009\u62e9\u4f7f\u7528cuda-10.0\u7248\u672c(\u524d\u63d0\u662f\u4f60\u5df2\u7ecf\u5b89\u88c5\u597d\u4e86): sudo ln -s /usr/local/cuda-10.0 /usr/local/cuda # \u8fd9\u6837\u5c31\u53ef\u4ee5\u5207\u6362cuda\u7248\u672c\u4e86 \u5f00\u59cb\u5b89\u88c5:\u975e root \u6743\u9650\uff0c\u666e\u901a\u7528\u6237 # 1.\u4e0b\u8f7dcuda:https://developer.nvidia.com/cuda-toolkit-archive \u683c\u5f0f\u9009runfile(local) # 2.\u4e0b\u8f7d\u5bf9\u5e94\u7684cudnn:https://developer.nvidia.com/rdp/cudnn-download,\u5907\u7528 # 3.\u9009\u62e9\u5408\u9002\u7684\u5b89\u88c5\u8def\u5f84\u548clib\u4f4d\u7f6e\uff0c\u540e\u9762\u8981\u7528\u5230 cd path mkdir cuda-10.1 mkdir cuda-10.1/mylib # 4.\u5b89\u88c5CUDA sh cuda_10.1.243_418.87.00_linux.run # 5.\u5b89\u88c5\u8fc7\u7a0b\u4e2d\u7684\u9009\u62e9 # 5.1 \u9009\u62e9accept \u540e\uff0c\u66f4\u6539\u5b89\u88c5\u9009\u9879\uff08'X' \u4ee3\u8868\u9009\u4e2d\uff0c\u8fd9\u91cc\u6211\u53ea\u5b89\u88c5CUDA Toolkit\uff0c\u4e00\u822c\u4e0d\u641eCUDA\u7f16\u7a0b\u5355\u8dd1\u6df1\u5ea6\u5b66\u4e60\u5c31\u591f\u4e86\uff09\uff0c\u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u9009\u62e9\u591a\u70b9 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 | CUDA Installer \u2502 - [ ] Driver \u2502 [ ] 418 .87.00 \u2502 + [ X ] CUDA Toolkit 10 .1 \u2502 [ ] CUDA Samples 10 .1 \u2502 [ ] CUDA Demo Suite 10 .1 \u2502 [ ] CUDA Documentation 10 .1 \u2502 Options \u2502 Install # 5.2 \u8fdb\u5165options\u9009\u9879\uff0c\u8fd9\u91cc\u8bbe\u7f6e\u81ea\u5b9a\u4e49\u7684cuda\u5b89\u88c5\u8def\u5f84\u548clib\u8def\u5f84 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 Options \u2502 Driver Options \u2502 Toolkit Options # \u8fd9\u91cc\u66f4\u6539\u81ea\u5b9a\u4e49\u5b89\u88c5\u8def\u5f84 \u2502 Samples Options \u2502 Library install path ( Blank for system default ) # \u8fd9\u91cc\u66f4\u6539lib\u5b89\u88c5\u8def\u5f84 \u2502 Done # 5.3 CUDA Toolkit \u53bb\u6389\u5168\u90e8\u542b\u6709/usr\u7684\u76ee\u5f55\uff0c\u8fdb\u5165 Change Toolkit Install Path\u8bbe\u7f6ecuda\u5b89\u88c5\u5230\u81ea\u5df1\u5177\u6709\u5199\u5165\u6743\u9650\u7684\uff0c\u5c31\u662f\u521a\u624d\u5efa\u597d\u7684cuda-10.1 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 CUDA Toolkit \u2502 Change Toolkit Install Path # \u5728\u8fd9\u91cc\u6309Enter\u952e\u6765\u66f4\u6539\u5b89\u88c5\u8def\u5f84\u5373\u53ef\uff0c\u7edd\u5bf9\u8def\u5f84 \u2502 [ ] Create symbolic link from /usr/local/cuda \u2502 - [ ] Create desktop menu shortcuts \u2502 [ ] Yes \u2502 [ ] No \u2502 [ ] Install manpage documents to /usr/share/man \u2502 Done # 5.4 \u56de\u5230options\u83dc\u5355\uff0c\u66f4\u6539Library install path (\u4e0d\u6539\u4e0d\u884c\uff0c\u5b83\u4f1a\u5077\u5077\u5199\u5165/var/lib) \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502 Library install path ( Blank for system default ) \u2502 /home/chenyuyang/cuda-10.1/mylib/ # 6.\u7136\u540e\u5728.bashrc\u4e2d\u5199\u5165\u5b89\u88c5\u8def\u5f84\u5373\u53ef \u628a\u5b89\u88c5\u8def\u5f84\u5199\u5165\u5230\u914d\u7f6e\u73af\u5883\u4e2d # 1. \u6253\u5f00\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u7684\u914d\u7f6e\u6587\u4ef6 sudo vim ~/.bashrc # 2. \u5bfc\u5165\u5b89\u88c5\u8def\u5f84 export LD_LIBRARY_PATH = $LD_LIBRARY_PATH :/usr/local/cuda/lib64 # \u975eroot\u7528\u6237\u6709\u70b9\u4e0d\u540c export LD_LIBRARY_PATH = $LD_LIBRARY_PATH :/home/chenyuyang/cuda/lib64:/home/chenyuyang/cuda-10.1/mylib/lib64 export PATH = $PATH :/usr/local/cuda/bin export CUDA_HOME = $CUDA_HOME :/usr/local/cuda # \u2019$CUDA_HOME:\u2018\u53ef\u4ee5\u53bb\u6389\uff0c\u56e0\u4e3a\u6709\u4e9b\u9879\u76ee\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u4f1a\u62a5\u9519\uff0c\u4f8b\u5982:maskrcnn_benchmark\u9879\u76ee\u4e2d\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u5c31\u4f1a\u62a5\u9519 # 3. \u4f7f\u5f97\u8def\u5f84\u751f\u6548 source ~/.bashrc \u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f,\u8f93\u5165\u547d\u4ee4: nvcc --version cudnn\u5b89\u88c5 \u5b98\u7f51\u4e0b\u8f7d cudnn \u5b98\u7f51\u94fe\u63a5 \uff0c\u6ce8\u610f:\u8fd9\u91cc\u8981\u9009\u62e9\u5339\u914d\u4f60 Cuda \u7248\u672c\u7684 cudnn \u7248\u672c\uff0c\u5982\u679c\u4f60\u5b89\u88c5\u591a\u4e2a\u7248\u672c Cuda \uff0c\u9700\u8981\u628a\u5404\u81ea\u5bf9\u5e94\u7684 cudnn \u7248\u672c\u4e5f\u4e0b\u8f7d\u4e0b\u6765 \u628a\u5bf9\u5e94\u7248\u672c cudnn \u590d\u5236\u5230 Cuda \u4e2d(\u53ef\u4ee5\u628a cudnn \u7406\u89e3\u4e3a Cuda \u7684\u63d2\u4ef6)\uff0c\u5982\u679c\u4f60\u662f\u591a\u7248\u672c\uff0c\u4f60\u53ea\u9700\u8981\u5b89\u88c5\u5bf9\u5e94\u7248\u672c\u4e00\u4e00\u590d\u5236\u5373\u53ef\uff0c\u6ce8\u610f: Cuda \u9ed8\u8ba4\u5b89\u88c5\u8def\u5f84 /usr/local/cuda # \u5b89\u88c5cudnn \u975eroot\u7528\u6237\u5c31\u4e0d\u8981\u52a0sudo\u4e86 sudo cp cuda/include/cudnn.h /usr/local/cuda/include/ sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64/ sudo chmod a+r /usr/local/cuda/include/cudnn.h sudo chmod a+r /usr/local/cuda/lib64/libcudnn* # 8.0\u4ee5\u540e\u7684\u7248\u672c $ sudo cp cuda/include/cudnn*.h /usr/local/cuda/include $ sudo cp -P cuda/lib64/libcudnn* /usr/local/cuda/lib64 $ sudo chmod a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn* \u67e5\u770b\u662f cudnn \u662f\u5426\u5b89\u88c5\u6210\u529f,\u6210\u529f\u540e\u4f1a\u8f93\u51fa cudnn \u7248\u672c # \u67e5\u770bcudnn\u7248\u672c\u547d\u4ee4 cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 \u73af\u5883\u642d\u5efa\u6210\u529f","title":"Ubuntu\u4e0bGPU\u73af\u5883\u642d\u5efa"},{"location":"%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/#vimlinux","text":"vim\u535a\u5ba2 | linux\u535a\u5ba2","title":"vim/linux\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/#git","text":"git\u535a\u5ba2-easy | git\u535a\u5ba2-hard | git\u535a\u5ba2-thrid # 1.\u521d\u59cb\u5316 git init # \u521d\u59cb\u5316\u4ed3\u5e93 git clone xxx.git renameProject # \u514b\u9686\u4ed3\u5e93 # 2.\u8ddf\u8e2a\u72b6\u6001\u7b49 # \u6240\u6709\u6587\u4ef6\u65e0\u5916\u4e4e\u4e24\u79cd\u72b6\u6001\uff1a\u8ddf\u8e2a\u6216\u672a\u8ddf\u8e2a git status # \u68c0\u67e5\u5f53\u524d\u6587\u4ef6\u72b6\u6001\uff0c\u4f1a\u663e\u793a\u6587\u4ef6\u662f\u5426\u88ab\u8ddf\u8e2a,\u9664\u4e86\u65b0\u5efa\u6587\u4ef6\u4e14\u6ca1\u6709add\u662f\u65e0\u8ddf\u8e2a\u72b6\u6001\uff0c\u5176\u4ed6\u5c5e\u4e8e\u8ddf\u8e2a\u72b6\u6001\uff0c\u5305\u542b\u4fee\u6539\uff0c\u6682\u5b58\uff0c\u672a\u66f4\u65b0\u7b49 git add xxx # \u8ddf\u8e2a\u65b0\u6587\u4ef6,\u5b58\u5165\u7f13\u5b58\u533a git rm --cached xxx # \u4ece\u7f13\u5b58\u533a\u79fb\u9664 git rm --cached log/ \\* .log # \u4ece\u7f13\u5b58\u533a\u6279\u91cf\u5220\u9664log\u65e5\u5fd7 git diff # \u6bd4git status\u66f4\u8be6\u7ec6\uff0c\u6bd4\u8f83\u7684\u662f\u5de5\u4f5c\u76ee\u5f55\u4e2d\u8fd8\u6ca1\u6682\u5b58\u7684\u6539\u52a8\u548c\u6682\u5b58\u533a\u57df\u5feb\u7167\u4e4b\u95f4\u7684\u5dee\u5f02 git diff \u2013cached # \u6bd4\u8f83\u5df2\u7ecf\u6682\u5b58\u8d77\u6765\u7684\u6587\u4ef6\u548c\u4e0a\u6b21\u63d0\u4ea4\u65f6\u7684\u5feb\u7167\u4e4b\u95f4\u7684\u5dee\u5f02 git commit -m \"\u63d0\u4ea4\u8bf4\u660e\" # \u6bcf\u4e00\u6b21\u8fd0\u884c\u63d0\u4ea4\u64cd\u4f5c\uff0c\u90fd\u662f\u5bf9\u4f60\u9879\u76ee\u4f5c\u4e00\u6b21\u5feb\u7167\uff0c\u4ee5\u540e\u53ef\u4ee5\u56de\u5230\u8fd9\u4e2a\u72b6\u6001\uff0c\u6216\u8005\u8fdb\u884c\u6bd4\u8f83 # 3.\u5ffd\u7565\u67d0\u4e9b\u6587\u4ef6 vi .gitignore $ cat.gitignore *. [ o,a ] # \u5ffd\u7565\u6240\u6709\u4ee5 .o \u6216 .a \u7ed3\u5c3e\u7684\u6587\u4ef6,\u5e38\u662f\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u51fa\u73b0\uff0c\u4e0d\u9700\u8981\u8ddf\u8e2a\u4ed6\u4eec\u7684\u7248\u672c *~ # \u5ffd\u7565\u6240\u6709\u4ee5\u6ce2\u6d6a\u7b26\uff08~\uff09\u7ed3\u5c3e\u7684\u6587\u4ef6\uff0c\u5e38\u662f\u6587\u672c\u7f16\u8f91\u8f6f\u4ef6\u4fdd\u5b58\u7684\u526f\u672c\u3002 # 3.1 \u661f\u53f7\uff08*\uff09\u5339\u914d\u96f6\u4e2a\u6216\u591a\u4e2a\u4efb\u610f\u5b57\u7b26\uff1b # 3.2 [abc] \u5339\u914d\u4efb\u4f55\u4e00\u4e2a\u5217\u5728\u65b9\u62ec\u53f7\u4e2d\u7684\u5b57\u7b26\uff08\u8fd9\u4e2a\u4f8b\u5b50\u8981\u4e48\u5339\u914d\u4e00\u4e2a a\uff0c\u8981\u4e48\u5339\u914d\u4e00\u4e2a b\uff0c\u8981\u4e48\u5339\u914d\u4e00\u4e2a c\uff09\uff1b # 3.3 \u95ee\u53f7\uff08?\uff09\u53ea\u5339\u914d\u4e00\u4e2a\u4efb\u610f\u5b57\u7b26\uff1b # 3.4 \u5982\u679c\u5728\u65b9\u62ec\u53f7\u4e2d\u4f7f\u7528\u77ed\u5212\u7ebf\u5206\u9694\u4e24\u4e2a\u5b57\u7b26\uff0c\u8868\u793a\u6240\u6709\u5728\u8fd9\u4e24\u4e2a\u5b57\u7b26\u8303\u56f4\u5185\u7684\u90fd\u53ef\u4ee5\u5339\u914d\uff08\u6bd4\u5982 [0-9] \u8868\u793a\u5339\u914d\u6240\u6709 0 \u5230 9 \u7684\u6570\u5b57\uff09\u3002 # \u4e3e\u4e2a\u5c0f\u4f8b\u5b50 *.a # \u5ffd\u7565\u6240\u6709 .a \u7ed3\u5c3e\u7684\u6587\u4ef6 !lib.a # \u4f46 lib.a \u9664\u5916 # \uff01\u53d6\u53cd /TODO # \u4ec5\u4ec5\u5ffd\u7565\u9879\u76ee\u6839\u76ee\u5f55\u4e0b\u7684 TODO \u6587\u4ef6\uff0c\u4e0d\u5305\u62ec subdir/TODO build/ # \u5ffd\u7565 build/ \u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\uff0c\u76ee\u5f55\u5fc5\u987b\u5e26\u53cd\u659c\u6760(/)\u8bc1\u660e\u5ffd\u7565\u7684\u662f\u76ee\u5f55 doc/*.txt # \u4f1a\u5ffd\u7565 doc/notes.txt \u4f46\u4e0d\u5305\u62ec doc/server/arch.txt","title":"git\u7684\u57fa\u672c\u4f7f\u7528"},{"location":"%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/","text":"\u76f8\u673a\u6807\u5b9a \u00b6 \u535a\u5ba2\u8be6\u89e3\u94fe\u63a5:\u5f20\u6b63\u53cb\u68cb\u76d8\u6807\u5b9a \u4ee3\u7801\u6807\u5b9a\u94fe\u63a5 \u4e3a\u4ec0\u4e48\u6807\u5b9a \u76f8\u673a\u62cd\u6444\u662f**\u4e09\u7ef4\u7a7a\u95f4(\u771f\u5b9e\u4e16\u754c)\u5230\u4e8c\u7ef4\u7a7a\u95f4(RGB\u56fe\u7247)**\uff0c\u672c\u6765\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u53ef\u9006\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7**\u6807\u5b9a**\u627e\u5230\u8fd9\u4e2a\u6444\u50cf\u673a\u7684\u6570\u5b66\u6a21\u578b: \u4e8c\u7ef4\u56fe\u50cf+\u6a21\u578b=\u9006\u63a8\u5230\u4e09\u7ef4\u56fe\u50cf \u6bcf\u4e2a\u76f8\u673a\u5728\u7ec4\u88c5\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b**\u7578\u53d8**\uff0c\u53ef\u4ee5\u901a\u8fc7\u76f8\u673a\u6807\u5b9a\u6821\u6b63\u8fd9\u79cd\u7578\u53d8\u3002 \u76f8\u673a\u6807\u5b9a\u540e\u53ef\u4ee5\u5f97\u5230\u4ec0\u4e48 \u76f8\u673a\u7684**\u5185\u53c2\u77e9\u9635A(dx,dy,r,u,v,f),\u5916\u53c2\u77e9\u9635[R] [T],\u7578\u53d8\u7cfb\u6570[k1,k2,k3, ~ ,p1,p2, ~ ]** \u5185\u53c2\u77e9\u9635\u53c2\u6570\u4ecb\u7ecd \u4e00\u4e2a\u50cf\u7d20\u7684\u7269\u7406\u5c3a\u5bf8 (dx,dy) \u7126\u8ddd f \u56fe\u50cf\u7269\u7406\u5750\u6807\u7684\u626d\u66f2\u56e0\u5b50 r \u56fe\u50cf\u539f\u70b9\u76f8\u5bf9\u4e8e\u5149\u5fc3\u6210\u50cf\u70b9\u7684\u7684\u7eb5\u6a2a\u504f\u79fb\u91cf u \u548c v \uff08\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09 \u5916\u53c2\u77e9\u9635\u53c2\u6570\u4ecb\u7ecd \u4e16\u754c\u5750\u6807\u7cfb\u8f6c\u6362\u5230\u76f8\u673a\u5750\u6807\u7cfb\u7684 \u65cb\u8f6cR\u77e9\u9635 \u4e16\u754c\u5750\u6807\u7cfb\u8f6c\u6362\u5230\u76f8\u673a\u5750\u6807\u7cfb\u7684 \u5e73\u79fbT\u77e9\u9635 \u7578\u53d8\u7cfb\u6570\u53c2\u6570\u4ecb\u7ecd \u76f8\u673a\u7684\u5f84\u5411\u7578\u53d8\u7cfb\u6570 k1,k2,k3,~ \u76f8\u673a\u7684\u5207\u5411\u7578\u53d8\u7cfb\u6570 p1,p2,~ \u5982\u4f55\u5f97\u5230\uff1f \u4f7f\u7528\u68cb\u76d8(\u9ed1\u767d\u65b9\u5757\u95f4\u9694\u7ec4\u6210)\u6807\u5b9a\u677f\u6765\u91c7\u96c6\u6837\u672c\uff0c\u662f\u771f\u5b9e\u4e16\u754c\u6620\u5c04\u5230\u6570\u7ec4\u56fe\u50cf\u7684\u5bf9\u8c61\uff0c \u4e8c\u7ef4\u7269\u4f53\u76f8\u5bf9\u4e8e\u4e09\u7ef4\u7269\u4f53\u4f1a\u7f3a\u5c11\u4e00\u90e8\u5206\u4fe1\u606f\uff0c\u4e8e\u662f\u6211\u4eec\u4f1a\u591a\u6b21\u6539\u53d8\u68cb\u76d8\u7684\u65b9\u4f4d\u6765\u6355\u6349\u56fe\u50cf(\u4e0d\u540c\u4f4d\u7f6e/\u89d2\u5ea6/\u59ff\u6001)\uff0c\u4ee5\u6c42\u83b7\u5f97\u66f4\u4e30\u5bcc\u7684\u5750\u6807\u4fe1\u606f\uff0c\u6700\u5c113\u5f20\uff0c10~20\u5f20\u4e3a\u5b9c\u3002 \u4f7f\u7528 MatLab \u7684 Camera Calibrator \u5de5\u5177\u6807\u5b9a\u5373\u53ef\u3002 \u6296\u97f3\u54c8\u54c8\u955c \u00b6 \u54c8\u54c8\u955c\u6548\u679c\u662f\u901a\u8fc7\u56fe\u50cf\u5750\u6807\u53d8\u6362\u6765\u6a21\u62df\u771f\u5b9e\u7684\u54c8\u54c8\u955c\u6548\u679c\u3002\u5177\u4f53\u7b97\u6cd5\u8fc7\u7a0b\u5982\u4e0b\uff1a \u8f93\u5165\u56fe\u50cf f(x,y) \uff0c\u5bbd\u9ad8\u5206\u522b\u4e3a Width\u548cHeight \uff0c\u8bbe\u7f6e\u56fe\u50cf\u4e2d\u5fc3\u5750\u6807 Center\uff08cx,xy \uff09\u4e3a\u7f29\u653e\u4e2d\u5fc3\u70b9\uff0c\u56fe\u50cf\u4e0a\u4efb\u610f\u4e00\u70b9\u5230\u4e2d\u5fc3\u70b9\u7684\u76f8\u5bf9\u5750\u6807 tx=x-cx,ty=y-cy \u3002 \u54c8\u54c8\u955c\u6548\u679c\u5206\u4e3a**\u56fe\u50cf\u62c9\u4f38\u653e\u5927\u548c\u56fe\u50cf\u7f29\u5c0f**\u3002 \u5bf9\u4e8e\u56fe\u50cf\u62c9\u4f38\u653e\u5927\uff0c\u8bbe\u7f6e\u56fe\u50cf\u53d8\u6362\u7684\u534a\u5f84\u4e3a radius \uff0c\u54c8\u54c8\u955c\u53d8\u6362\u540e\u7684\u56fe\u50cf\u4e3a p(x,y) \u3002 x=(tx/2)\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)/radius)+cx y=(ty/2)\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)/radius)+cy \u5bf9\u4e8e\u56fe\u50cf\u7f29\u5c0f\uff0c\u8bbe\u7f6e\u56fe\u50cf\u53d8\u6362\u7684\u534a\u5f84\u4e3a radius \uff0c\u54c8\u54c8\u955c\u53d8\u6362\u540e\u7684\u56fe\u50cf\u4e3a p(x,y) \u3002 x=cos(atan2(ty,tx))\u00d712\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)+cx y=sin(atan2(ty,tx))\u00d712\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)+cy import numpy as np import cv2 import math # \u6296\u97f3\u54c8\u54c8\u955c\uff0c\u62c9\u4f38\u653e\u5927 def MaxFrame ( frame , radius = 400 ): height , width = frame . shape [: 2 ] center_X , center_Y = width / 2 , height / 2 newX , newY = 0 , 0 real_radius = int ( radius / 2.0 ) new_data = frame . copy () for i in range ( width ): for j in range ( height ): tX = i - center_X tY = j - center_Y distance = tX * tX + tY * tY if distance < radius * radius : newX = int ( tX / 2.0 ) newY = int ( tY / 2.0 ) newX = int ( newX * ( math . sqrt ( distance ) / real_radius )) newX = int ( newX * ( math . sqrt ( distance ) / real_radius )) newX = int ( newX + center_X ) newY = int ( newY + center_Y ) if newX < width and newY < height : new_data [ j , i ,:] = frame [ newY , newX ,:] return new_data # \u6296\u97f3\u54c8\u54c8\u955c\uff0c\u6324\u538b\u7f29\u5c0f def MinFrame ( frame ): height , width = frame . shape [: 2 ] center_X , center_Y = width / 2 , height / 2 newX , newY = 0 , 0 new_data = frame . copy () for i in range ( width ): for j in range ( height ): tX = i - center_X tY = j - center_Y theta = math . atan2 ( tY , tX ) radius = math . sqrt (( tX * tX ) + ( tY * tY )) newR = math . sqrt ( radius ) * 12 newX = int ( center_X + ( newR * math . cos ( theta ))) newY = int ( center_Y + ( newR * math . sin ( theta ))) if newX < 0 or newX > width : newX = 0 if newY < 0 or newY > height : newY = 0 if newX <= width and newY <= height : new_data [ j , i ,:] = frame [ newY , newX ,:] return new_data if __name__ == '__main__' : cap = cv2 . VideoCapture ( 0 ) fourcc = cv2 . VideoWriter_fourcc ( * 'XVID' ) out = cv2 . VideoWriter ( 'output.avi' , fourcc , 20.0 , ( 640 , 480 )) while cap . isOpened (): ret , frame = cap . read () if not ret : print ( \"Can't receive frame (stream end?). Exiting ...\" ) break # \u8981\u52a0\u8f7d\u7684\u51fd\u6570 result = MinFrame ( frame ) result = cv2 . flip ( result , 1 ) out . write ( result ) cv2 . imshow ( 'result' , result ) if cv2 . waitKey ( 1 ) == ord ( 'q' ): break # \u5b8c\u6210\u5de5\u4f5c\u540e\u91ca\u653e\u6240\u6709\u5185\u5bb9 cap . release () out . release () cv2 . destroyAllWindows () \u7167\u7247\u98ce\u683c \u00b6 \u7167\u7247\u53d8\u8001 # RGB\u4e09\u901a\u9053\u516c\u5f0f\u53d8\u6362\uff0c\u6ce8\u610f\uff0c\u53d8\u6362\u540e\u8981\u7ea6\u675f\u57280~255\u4e4b\u95f4,np.clip(result,0,255) R = 0.393 \u00d7 r + 0.769 \u00d7 g + 0.189 \u00d7 b G = 0.349 \u00d7 r + 0.686 \u00d7 g + 0.168 \u00d7 b B = 0.272 \u00d7 r + 0.534 \u00d7 g + 0.131 \u00d7 b \u56fe\u7247\u8f6c\u7d20\u63cf (PS\u5b9e\u73b0) \u7070\u5ea6\u5316\uff0c\u5c06\u5f69\u8272\u56fe\u7247\u8f6c\u6362\u6210\u7070\u5ea6\u56fe\u50cf\u3002 \u590d\u5236\u7070\u5ea6\u56fe\u5c42\uff0c\u5e76\u4e14\u53cd\u8272\uff0c\u53cd\u8272\u4e3aY(i,j)=255-X(i,j)\u3002 \u5bf9\u7070\u5ea6\u56fe\u50cf\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca\u3002 \u6a21\u7cca\u540e\u7684\u56fe\u50cf\u53e0\u52a0\u6a21\u5f0f\u9009\u62e9\u989c\u8272\u51cf\u6de1\u6548\u679c\u516c\u5f0f: C=MIN(A+\uff08A\u00d7B\uff09/\uff08255-B\uff09,255) C\u4e3a\u6df7\u5408\u7ed3\u679c A\u4e3a\u53bb\u7070\u5ea6\u56fe B\u4e3a\u9ad8\u65af\u6a21\u7cca\u540e\u7684\u50cf\u7d20\u70b9 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u53e0\u52a0\u4e24\u5f20\u56fe\u7247(cv2.addWeighted)\u3002 \u56fe\u7247\u8f6c\u6cb9\u753b \u76f8\u90bb\u4e09\u884c\u7684\u56fe\u50cf\u5bf9\u5176\u50cf\u7d20\u8fdb\u884c\u6253\u4e71 \u589e\u5f3a\u56fe\u50cf\u7684\u8272\u5f69\u7a7a\u95f4( PIL\u91cc\u9762\u6709\u4e2aImageEnhance \u6a21\u5757\uff0c\u4e13\u95e8\u7528\u4f5c\u56fe\u50cf\u589e\u5f3a\u5904\u7406)\uff0c\u4f8b\u5982\u8c03\u8282\u8272\u5ea6\u3002 # 1.\u50cf\u7d20\u968f\u673a\u6253\u4e71\uff0c\u8fd9\u91cc\u4f7f\u75283\u884c\uff0c\u5982\u679c\u66f4\u7c97\u7cd9\u5c31\u7528\u66f4\u591a\u884c def oil_style ( img ): height , width = img . shape [: 2 ] output = np . zeros (( height - 2 , width , n ), dtype = 'uint8' ) for i in range ( 1 , height - 2 ): for j in range ( width - 2 ): if random . randint ( 1 , 10 ) % 3 == 0 : output [ i , j ] = img [ i + 1 , j ] elif random . randint ( 1 , 10 ) % 2 == 0 : output [ i , j ] = img [ i + 2 , j ] else : output [ i , j ] = img [ i - 1 , j ] return output # 2.\u56fe\u50cf\u589e\u5f3a def color_add (): image = Image . open ( 'oil_img.jpg' ) enh_col = ImageEnhance . Color ( image ) color = 2.0 image_colored = enh_col . enhance ( color ) image_colored . show () \u9a6c\u8d5b\u514b \u8bb2\u56fe\u50cf\u5206\u6210\u5927\u5c0f\u4e00\u81f4\u7684\u56fe\u50cf\u5757\uff0c\u6bcf\u4e2a\u56fe\u50cf\u5757\u90fd\u662f\u6b63\u65b9\u5f62(\u8be5\u5c3a\u5bf8\u51b3\u5b9a\u4e86\u9a6c\u8d5b\u514b\u5757\u7684\u5927\u5c0f)\uff0c\u6240\u4ee5\u9a6c\u8d5b\u514b\u5bf9\u6bcf\u4e2a\u6b63\u65b9\u5f62\u7684\u5904\u7406\u6709\u4e0b\u9762\u51e0\u79cd\u65b9\u5f0f: \u6a21\u677f\u4e2d\u5bf9\u5e94\u7684\u6240\u6709\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u90fd\u7b49\u4e8e\u8be5\u6a21\u677f\u7684\u5de6\u4e0a\u89d2\u7b2c\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u3002 \u5bf9\u4e8e\u65b9\u5757\u91cc\u7684\u50cf\u7d20\u8fdb\u884c\u968f\u673a\u6253\u4e71\u3002 \u968f\u673a\u7528\u67d0\u4e00\u70b9\u4ee3\u66ff\u9886\u57df\u7c7b\u7684\u6240\u6709\u50cf\u7d20 row , col , channel = img . shape half_patch = 10 # \u9a6c\u8d5b\u514b\u5927\u5c0f # \u7c7b\u4f3c\u6ed1\u7a97\u4e00\u6837\uff0c\u904d\u5386\u6574\u5f20\u56fe\u7247\uff0c\u968f\u673a\u5728\u56fe\u50cf\u7684Patch\u9886\u57df\u91cc\u53d6\u4e00\u4e2a\u50cf\u7d20\u6765\u66ff\u6362Patch\u91cc\u9762\u7684\u6240\u6709\u50cf\u7d20\u503c for i in range ( half_patch , row - 1 - half_patch , half_patch ): for j in range ( half_patch , col - 1 - half_patch , half_patch ): k1 = random . random () - 0.5 k2 = random . random () - 0.5 m = np . floor ( k1 * ( half_patch * 2 + 1 )) n = np . floor ( k2 * ( half_patch * 2 + 1 )) h = int (( i + m ) % row ) w = int (( j + n ) % col ) img_out [ i - half_patch : i + half_patch , j - half_patch : j + half_patch , :] = \\ img [ h , w , :] \u6f2b\u753b\u98ce\u683c \u7070\u5ea6\u5316+\u4e2d\u503c\u6ee4\u6ce2(\u964d\u4f4e\u56fe\u7247\u7684\u51c6\u786e\u5ea6,\u589e\u52a0\u7ed8\u753b\u4e2d\u7684\u8bef\u5dee) \u56fe\u50cf\u9608\u503c\u5316(\u5206\u79bb\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u533a\u57df\u548c\u80cc\u666f\u533a\u57df) dst = cv2.adaptiveThreshold(src, maxval, thresh_type, type, Block Size,C) src\uff1a\u8f93\u5165\u56fe\uff0c\u53ea\u80fd\u8f93\u5165\u5355\u901a\u9053\u56fe\u50cf\uff0c\u901a\u5e38\u6765\u8bf4\u4e3a\u7070\u5ea6\u56fe\u3002 maxval\uff1a\u5f53\u50cf\u7d20\u503c\u8d85\u8fc7\u4e86\u9608\u503c\uff08\u6216\u8005\u5c0f\u4e8e\u9608\u503c\uff0c\u6839\u636etype\u6765\u51b3\u5b9a\u6240\u8d4b\u4e88\u7684\u503c\u3002\uff09 thresh_type\uff1a\u9608\u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\u5305\u542b\u4e24\u79cd\u7c7b\u578b\uff0c\u5373cv2.ADAPTIVE_THRESH_MEAN_C\u548ccv2.ADAPTIVE_THRESH_GAUSSIAN_C\u3002 type\uff1a\u4e8c\u503c\u5316\u64cd\u4f5c\u7684\u7c7b\u578b\u4e0e\u56fa\u5b9a\u9608\u503c\u51fd\u6570\u76f8\u540c\uff0c\u5305\u542b5\u79cd\u7c7b\u578b\uff0c\u5373cv2.THRESH_BINARY\u3001cv2.THRESH_BINARY_INV\u3001cv2.THRESH_TRUNC\u3001cv2.THRESH_TOZERO\u548ccv2.THRESH_TOZERO_INV\u3002 Block Size\uff1a\u56fe\u7247\u4e2d\u5206\u5757\u7684\u5927\u5c0f\u3002 C\uff1a\u9608\u503c\u8ba1\u7b97\u65b9\u6cd5\u4e2d\u7684\u5e38\u6570\u9879 img_gray = cv2 . cvtColor ( img_rgb , cv2 . COLOR_RGB2GRAY ) img_blur = cv2 . medianBlur ( img_gray , 7 ) #\u68c0\u6d4b\u5230\u8fb9\u7f18\u5e76\u4e14\u589e\u5f3a\u5176\u6548\u679c img_edge = cv2 . adaptiveThreshold ( img_blur , 255 , cv2 . ADAPTIVE_THRESH_MEAN_C , cv2 . THRESH_BINARY , blockSize = 9 , C = 2 ) #\u8f6c\u6362\u56de\u5f69\u8272\u56fe\u50cf img_edge = cv2 . cvtColor ( img_edge , cv2 . COLOR_GRAY2RGB ) img_cartoon = cv2 . bitwise_and ( img_color , img_edge ) \u6296\u97f3\u7279\u6548 \u00b6 \u6296\u97f3\u6296\u52a8\u7279\u6548 \u6296\u52a8\u6548\u679c\u7684\u539f\u7406\u5c31\u662f**\u5bf9\u89c6\u9891\u4e2d\u7684\u4e00\u4e9b\u5e27\u8fdb\u884c\u526a\u5207\u548c\u653e\u5927\u5230\u539f\u56fe**\uff0c\u51fa\u73b0\u89c6\u9891\u4e2d\u7684\u4eba\u50cf\u653e\u5927\u98a4\u52a8\u7684\u6548\u679c\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\u8bfb\u53d6\u5f85\u5904\u7406\u7684\u89c6\u9891\uff0c\u8bbe\u7f6e\u51fa\u73b0\u6296\u52a8\u6548\u679c\u7684\u5e27\u6570\uff0c\u6bd4\u5982\u76f8\u90bb5\u5e27\u7684\u56fe\u50cf\u6309\u7167\u56fe\u50cf\u4e2d\u5fc3\u8fdb\u884c\u88c1\u526a\uff0c\u7136\u540e\u7f29\u653e\u5230\u539f\u6765\u7684\u5c3a\u5bf8\u3002\u8bbe\u7f6e\u6296\u52a8\u4e2d\u4e0d\u53d8\u7684\u5e27\u6570\uff0c\u6bd4\u5982\u4ee55\u5e27\u4e3a\u95f4\u9694\u6765\u5904\u7406\u56fe\u50cf\u3002 def img_shake ( img ): height , width , n = img . shape h1 = int ( height * 0.1 ) h2 = int ( height * 0.9 ) w1 = int ( width * 0.1 ) w2 = int ( width * 0.9 ) img2 = img [ h1 : h2 , w1 : w2 ] dst = cv2 . resize ( img2 , ( width , height )) return dst # main \u6bcf\u96945\u5e27\u5904\u7406\u4e00\u4e0b\u5373\u53ef \u6296\u97f3\u95ea\u767d\u6548\u679c \u7c7b\u4f3c\u6296\u52a8\uff0c\u6bcf\u96945\u5e27\u8fdb\u884c Gamma\u53d8\u6362 (\u5bf9\u56fe\u50cf\u7070\u5ea6\u503c\u8fdb\u884c\u975e\u7ebf\u6027\u64cd\u4f5c,\u516c\u5f0f\u4e0b)\uff0c\u4e3b\u8981\u662f\u8c03\u8282\u56fe\u50cf\u7684\u66dd\u5149\u7a0b\u5ea6\u3002 Gamma\u53d8\u6362 :\u8ba9\u56fe\u50cf\u4ece\u66dd\u5149\u5f3a\u5ea6\u7684\u7ebf\u6027\u54cd\u5e94\u53d8\u5f97\u66f4\u63a5\u8fd1\u4eba\u773c\u611f\u53d7\u7684\u54cd\u5e94\uff0c\u5373\u5c06\u76f8\u673a\u66dd\u5149\u6216\u66dd\u5149\u4e0d\u8db3\u7684\u56fe\u7247\u8fdb\u884c\u77eb\u6b63 Gamma \u503c\u5927\u4e8e1\u65f6\uff0c\u5bf9\u56fe\u50cf\u7684\u7070\u5ea6\u5206\u5e03\u76f4\u65b9\u56fe\u5177\u6709\u62c9\u4f38\u4f5c\u7528\uff0c\u4f7f\u7070\u5ea6\u5411\u9ad8\u7070\u5ea6\u503c\u5ef6\u5c55 \u800c\u5f53 Gamma \u5c0f\u4e8e1\u65f6\uff0c\u5bf9\u56fe\u50cf\u7684\u7070\u5ea6\u5206\u5e03\u76f4\u65b9\u56fe\u5177\u6709\u6536\u7f29\u4f5c\u7528\uff0c\u4f7f\u7070\u5ea6\u5411\u4f4e\u7070\u5ea6\u503c\u65b9\u5411\u9760\u62e2\u3002 \u56e0\u6b64\u8bbe\u7f6eGamma\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\u56fe\u50cf\u7684\u66dd\u5149\u5ea6\uff0c\u57280\uff5e1\u65f6\u4f1a\u9020\u6210\u56fe\u50cf\u8fc7\u5ea6\u66dd\u5149 def gamma_trans ( img , gamma ): #gamma\u51fd\u6570\u5904\u7406 gamma_table = [ np . power ( x / 255.0 , gamma ) * 255.0 for x in range ( 256 )] #\u5efa\u7acb\u6620\u5c04\u8868 gamma_table = np . round ( np . array ( gamma_table )) . astype ( np . uint8 ) #\u989c\u8272\u503c\u4e3a\u6574\u6570 return cv2 . LUT ( img , gamma_table ) #\u56fe\u7247\u989c\u8272\u67e5\u8868\u3002\u53e6\u5916\u53ef\u4ee5\u6839\u636e\u5149\u5f3a\uff08\u989c\u8272\uff09\u5747\u5300\u5316\u539f\u5219\u8bbe\u8ba1\u81ea\u9002\u5e94\u7b97\u6cd5\u3002 \u6296\u97f3\u89c6\u9891\u9713\u8679\u6548\u679c \u65b9\u6cd5\u4e00\uff1a\u5b9e\u65f6\u7684\u5149\u6591\u7ed8\u5236(opencv\u4e0a\u663e\u5f97\u7a81\u5140\uff0copenGL\u4e0a\u53ef\u4ee5)\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f03\u7528\u3002 \u65b9\u6cd5\u4e8c\uff1a\u8bbe\u8ba1\u591a\u5e45\u7d20\u6750\u56fe\u7247\uff0c\u9ed1\u5e95\u4e0a\u9762\u6709\u4eae\u8272\u7684\u5149\u6591\uff0c\u4e0d\u540c\u7684\u56fe\u7247\u4e2d\u5149\u6591\u7684\u4f4d\u7f6e\u4e0d\u540c\u3002 \u52a0\u8f7d\u89c6\u9891\uff0c\u6309\u71671\u5e27\u4e3a\u4e00\u4e2a\u95f4\u9694\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u7684\u56fe\u7247\u5728\u76f8\u540c\u4f4d\u7f6e\u7ed8\u5236\u5f69\u8272\u5149\u6591\uff0c\u4e00\u5171\u5b9a\u4e494\u79cd\u5149\u6591\u4f4d\u7f6e\uff0c\u5faa\u73af\u5728\u89c6\u9891\u4e2d\u8fdb\u884c\u6e32\u67d3\uff0c\u6700\u540e\u5c06\u5904\u7406\u5b8c\u7684\u89c6\u9891\u4fdd\u5b58\u5e76\u8f93\u51fa\u3002 def neon ( img , cnt ): h , w = img . shape [: 2 ] if cnt == 1 : mask = cv2 . imread ( \"mask1.jpg\" ) # \u53ef\u4ee5\u8bbe\u8ba1\u56db\u5f20\u56fe\u7247\uff0ccnt\u4e0d\u540c\uff0c\u52a0\u8f7d\u4e0d\u540c ...... mask = cv2 . resize ( mask ,( w , h ), interpolation = cv2 . INTER_CUBIC ) dst = cv2 . addWeighted ( img , 0.7 , mask , 0.3 , 0 ) return dst \u6296\u97f3\u65f6\u5149\u5012\u6d41 \u5e27\u56fe\u7247\u5012\u53d9\u5b58\u50a8\u5373\u53ef \u6296\u97f3\u89c6\u9891\u6162\u52a8\u4f5c \u8bfb\u53d6\u89c6\u9891\uff0c\u5bf9\u89c6\u9891\u8ba1\u6570\uff0c\u5f53\u8ba1\u6570\u5230\u7b2c20\uff5e40\u5e27\u7684\u65f6\u5019\uff0c\u8bbe\u7f6e\u964d\u4f4e\u7684fps_slow=10\uff0c\u4e5f\u5c31\u662f\u6bcf\u79d210\u5e27\u89c6\u9891\u56fe\u50cf\uff0c\u5e76\u4fdd\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u89c6\u9891\u4e2d\uff0c\u56e0\u6b64\u539f\u89c6\u9891\u88ab\u5206\u6210\u4e863\u4e2a\u89c6\u9891\uff0c\u5373\u7b2c0\uff5e20\u5e27\u3001\u7b2c20\uff5e40\u5e27\u3001\u7b2c40\u4e4b\u540e\uff0c\u5c063\u4e2a\u89c6\u9891\u7ec4\u5408\u8d77\u6765 \u7f8e\u989c\u6548\u679c \u00b6 \u4eba\u8138\u78e8\u76ae \u56fe\u50cf\u6ee4\u6ce2 \u6ee4\u6ce2\u662f\u6d88\u9664\u8138\u90e8\u7684\u4e00\u4e9b\u7ec6\u7eb9\u548c\u6591\u70b9\uff0c\u4f46\u662f\u4f1a\u53d8\u6a21\u7cca\uff0c\u4e3a\u4e86\u4fdd\u7559\u66f4\u591a\u7684\u8fb9\u7f18\u4fe1\u606f\uff0c\u4f7f\u7528\u53cc\u8fb9\u6ee4\u6ce2 \u56fe\u50cf\u878d\u5408 \u6539\u5584\u6a21\u7cca\u73b0\u8c61\uff0c 0.3*src+0.7*blur \uff0c\u5373\u4f7f\u7528 cv2.addWeighted\u51fd\u6570 \u56fe\u50cf\u9510\u5316 \u589e\u5f3a\u7ec6\u8282\u611f\uff0c\u4f7f\u7528 USM\u9510\u5316 \u6216 \u90bb\u57df\u9510\u5316 \u548c Laplace\u9510\u5316 \uff0c\u672c\u8282\u91c7\u7528Python\u4e2dPIL\u6a21\u5757\u7684ImageEnhance\u7c7b\u4e2d\u7684ImageEnhance.Sharpness()\u7b49\u51fd\u6570\uff0c\u901a\u8fc7\u8f93\u5165\u7684\u53c2\u6570\u81ea\u52a8\u8c03\u8282\u56fe\u50cf\u7684\u9510\u5ea6\u548c\u5bf9\u6bd4\u5ea6\u3002 import cv2 from PIL import Image from PIL import ImageEnhance img = cv2 . imread ( '3.jpg' ) blur = cv2 . bilateralFilter ( img , 9 , 75 , 75 ) alpha = 0.3 beta = 1 - alpha gamma = 0 img_add = cv2 . addWeighted ( img , alpha , blur , beta , gamma ) cv2 . imwirte ( 'img_add.jpg' , img_add ) # # \u9510\u5ea6\u589e\u5f3a img_add = Image . open ( 'img_add.jpg' ) img_add . show () enh_sha = ImageEnhance . Sharpness ( img_add ) sharpness = 1.5 image_sharped = enh_sha . enhance ( sharpness ) image_sharped . show () # # \u5bf9\u6bd4\u5ea6\u589e\u5f3a enh_con = ImageEnhance . Contrast ( image_sharped ) contrast = 1.15 image_contrasted = enh_con . enhance ( contrast ) image_contrasted . show () cv2 . waitKey ( 0 ) \u4eba\u8138\u7f8e\u767d \u6700\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u7b80\u5386\u4e00\u4e2a\u989c\u8272\u67e5\u627e\u8868\uff0c\u6bd4\u5982\u4ece245\u5f00\u59cb\uff0c\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u4e3a255\uff0c\u56e0\u6b64\u5efa\u7acb\u4e00\u4e2a\u67e5\u627e\u8868\uff0c\u5171\u5305\u542b256\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a0\uff5e255\u50cf\u7d20\u503c\u8c03\u6574\u540e\u7684\u50cf\u7d20\uff0c\u4e00\u822c\u662f\u5bf9\u539f\u672c\u7684\u50cf\u7d20\u503c\u589e\u52a0\uff0c\u901a\u8fc7\u67e5\u627e\u8868\u6765\u6539\u53d8\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u5373\u53ef\u3002\u5f53\u7136\uff0c\u5177\u4f53\u7684\u6548\u679c\u9700\u8981\u4e0d\u65ad\u7684\u6d4b\u8bd5\uff0c\u6539\u53d8\u989c\u8272\u67e5\u627e\u8868\u3002 import cv2 import math from PIL import Image from PIL import ImageEnhance Color_list = [ 1 , 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 31 , 33 , 35 , 37 , 39 , 41 , 43 , 44 , 46 , 48 , 50 , 52 , 53 , 55 , 57 , 59 , 60 , 62 , 64 , 66 , 67 , 69 , 71 , 73 , 74 , 76 , 78 , 79 , 81 , 83 , 84 , 86 , 87 , 89 , 91 , 92 , 94 , 95 , 97 , 99 , 100 , 102 , 103 , 105 , 106 , 108 , 109 , 111 , 112 , 114 , 115 , 117 , 118 , 120 , 121 , 123 , 124 , 126 , 127 , 128 , 130 , 131 , 133 , 134 , 135 , 137 , 138 , 139 , 141 , 142 , 143 , 145 , 146 , 147 , 149 , 150 , 151 , 153 , 154 , 155 , 156 , 158 , 159 , 160 , 161 , 162 , 164 , 165 , 166 , 167 , 168 , 170 , 171 , 172 , 173 , 174 , 175 , 176 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 189 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 201 , 202 , 203 , 204 , 205 , 205 , 206 , 207 , 208 , 209 , 210 , 211 , 211 , 212 , 213 , 214 , 215 , 215 , 216 , 217 , 218 , 219 , 219 , 220 , 221 , 222 , 222 , 223 , 224 , 224 , 225 , 226 , 226 , 227 , 228 , 228 , 229 , 230 , 230 , 231 , 232 , 232 , 233 , 233 , 234 , 235 , 235 , 236 , 236 , 237 , 237 , 238 , 238 , 239 , 239 , 240 , 240 , 241 , 241 , 242 , 242 , 243 , 243 , 244 , 244 , 244 , 245 , 245 , 246 , 246 , 246 , 247 , 247 , 248 , 248 , 248 , 249 , 249 , 249 , 250 , 250 , 250 , 250 , 251 , 251 , 251 , 251 , 252 , 252 , 252 , 252 , 253 , 253 , 253 , 253 , 253 , 254 , 254 , 254 , 254 , 254 , 254 , 254 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 256 ] def main (): img = cv2 . imread ( \"3.jpg\" ) img = cv2 . bilateralFilter ( img , 9 , 75 , 75 ) height , width , n = img . shape img2 = img . copy () # img2 = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) for i in range ( height ): for j in range ( width ): B = img2 [ i , j ][ 0 ] G = img2 [ i , j ][ 1 ] R = img2 [ i , j ][ 2 ] img2 [ i , j ][ 0 ] = Color_list [ B ] img2 [ i , j ][ 1 ] = Color_list [ G ] img2 [ i , j ][ 2 ] = Color_list [ R ] # img2[i, j][1] += 2 # img2 = cv2.cvtColor(img2, cv2.COLOR_HSV2BGR) cv2 . imwrite ( 'res.jpg' , img2 ) # \u9510\u5316\uff0c\u8ba9\u7ed3\u679c\u66f4\u771f\u5b9e image = Image . open ( 'res.jpg' ) enh_con = ImageEnhance . Color ( image ) contrast = 1.2 image_contrasted = enh_con . enhance ( contrast ) enh_con = ImageEnhance . Contrast ( image ) sharpness = 1.2 image_contrasted = enh_con . enhance ( sharpness ) image_contrasted . show () if __name__ == '__main__' : main ()","title":"\u5c0f\u9879\u76ee\u603b\u7ed3"},{"location":"%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/#_1","text":"\u535a\u5ba2\u8be6\u89e3\u94fe\u63a5:\u5f20\u6b63\u53cb\u68cb\u76d8\u6807\u5b9a \u4ee3\u7801\u6807\u5b9a\u94fe\u63a5 \u4e3a\u4ec0\u4e48\u6807\u5b9a \u76f8\u673a\u62cd\u6444\u662f**\u4e09\u7ef4\u7a7a\u95f4(\u771f\u5b9e\u4e16\u754c)\u5230\u4e8c\u7ef4\u7a7a\u95f4(RGB\u56fe\u7247)**\uff0c\u672c\u6765\u8fd9\u4e2a\u8fc7\u7a0b\u4e0d\u53ef\u9006\uff0c\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7**\u6807\u5b9a**\u627e\u5230\u8fd9\u4e2a\u6444\u50cf\u673a\u7684\u6570\u5b66\u6a21\u578b: \u4e8c\u7ef4\u56fe\u50cf+\u6a21\u578b=\u9006\u63a8\u5230\u4e09\u7ef4\u56fe\u50cf \u6bcf\u4e2a\u76f8\u673a\u5728\u7ec4\u88c5\u4e2d\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e9b**\u7578\u53d8**\uff0c\u53ef\u4ee5\u901a\u8fc7\u76f8\u673a\u6807\u5b9a\u6821\u6b63\u8fd9\u79cd\u7578\u53d8\u3002 \u76f8\u673a\u6807\u5b9a\u540e\u53ef\u4ee5\u5f97\u5230\u4ec0\u4e48 \u76f8\u673a\u7684**\u5185\u53c2\u77e9\u9635A(dx,dy,r,u,v,f),\u5916\u53c2\u77e9\u9635[R] [T],\u7578\u53d8\u7cfb\u6570[k1,k2,k3, ~ ,p1,p2, ~ ]** \u5185\u53c2\u77e9\u9635\u53c2\u6570\u4ecb\u7ecd \u4e00\u4e2a\u50cf\u7d20\u7684\u7269\u7406\u5c3a\u5bf8 (dx,dy) \u7126\u8ddd f \u56fe\u50cf\u7269\u7406\u5750\u6807\u7684\u626d\u66f2\u56e0\u5b50 r \u56fe\u50cf\u539f\u70b9\u76f8\u5bf9\u4e8e\u5149\u5fc3\u6210\u50cf\u70b9\u7684\u7684\u7eb5\u6a2a\u504f\u79fb\u91cf u \u548c v \uff08\u50cf\u7d20\u4e3a\u5355\u4f4d\uff09 \u5916\u53c2\u77e9\u9635\u53c2\u6570\u4ecb\u7ecd \u4e16\u754c\u5750\u6807\u7cfb\u8f6c\u6362\u5230\u76f8\u673a\u5750\u6807\u7cfb\u7684 \u65cb\u8f6cR\u77e9\u9635 \u4e16\u754c\u5750\u6807\u7cfb\u8f6c\u6362\u5230\u76f8\u673a\u5750\u6807\u7cfb\u7684 \u5e73\u79fbT\u77e9\u9635 \u7578\u53d8\u7cfb\u6570\u53c2\u6570\u4ecb\u7ecd \u76f8\u673a\u7684\u5f84\u5411\u7578\u53d8\u7cfb\u6570 k1,k2,k3,~ \u76f8\u673a\u7684\u5207\u5411\u7578\u53d8\u7cfb\u6570 p1,p2,~ \u5982\u4f55\u5f97\u5230\uff1f \u4f7f\u7528\u68cb\u76d8(\u9ed1\u767d\u65b9\u5757\u95f4\u9694\u7ec4\u6210)\u6807\u5b9a\u677f\u6765\u91c7\u96c6\u6837\u672c\uff0c\u662f\u771f\u5b9e\u4e16\u754c\u6620\u5c04\u5230\u6570\u7ec4\u56fe\u50cf\u7684\u5bf9\u8c61\uff0c \u4e8c\u7ef4\u7269\u4f53\u76f8\u5bf9\u4e8e\u4e09\u7ef4\u7269\u4f53\u4f1a\u7f3a\u5c11\u4e00\u90e8\u5206\u4fe1\u606f\uff0c\u4e8e\u662f\u6211\u4eec\u4f1a\u591a\u6b21\u6539\u53d8\u68cb\u76d8\u7684\u65b9\u4f4d\u6765\u6355\u6349\u56fe\u50cf(\u4e0d\u540c\u4f4d\u7f6e/\u89d2\u5ea6/\u59ff\u6001)\uff0c\u4ee5\u6c42\u83b7\u5f97\u66f4\u4e30\u5bcc\u7684\u5750\u6807\u4fe1\u606f\uff0c\u6700\u5c113\u5f20\uff0c10~20\u5f20\u4e3a\u5b9c\u3002 \u4f7f\u7528 MatLab \u7684 Camera Calibrator \u5de5\u5177\u6807\u5b9a\u5373\u53ef\u3002","title":"\u76f8\u673a\u6807\u5b9a"},{"location":"%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/#_2","text":"\u54c8\u54c8\u955c\u6548\u679c\u662f\u901a\u8fc7\u56fe\u50cf\u5750\u6807\u53d8\u6362\u6765\u6a21\u62df\u771f\u5b9e\u7684\u54c8\u54c8\u955c\u6548\u679c\u3002\u5177\u4f53\u7b97\u6cd5\u8fc7\u7a0b\u5982\u4e0b\uff1a \u8f93\u5165\u56fe\u50cf f(x,y) \uff0c\u5bbd\u9ad8\u5206\u522b\u4e3a Width\u548cHeight \uff0c\u8bbe\u7f6e\u56fe\u50cf\u4e2d\u5fc3\u5750\u6807 Center\uff08cx,xy \uff09\u4e3a\u7f29\u653e\u4e2d\u5fc3\u70b9\uff0c\u56fe\u50cf\u4e0a\u4efb\u610f\u4e00\u70b9\u5230\u4e2d\u5fc3\u70b9\u7684\u76f8\u5bf9\u5750\u6807 tx=x-cx,ty=y-cy \u3002 \u54c8\u54c8\u955c\u6548\u679c\u5206\u4e3a**\u56fe\u50cf\u62c9\u4f38\u653e\u5927\u548c\u56fe\u50cf\u7f29\u5c0f**\u3002 \u5bf9\u4e8e\u56fe\u50cf\u62c9\u4f38\u653e\u5927\uff0c\u8bbe\u7f6e\u56fe\u50cf\u53d8\u6362\u7684\u534a\u5f84\u4e3a radius \uff0c\u54c8\u54c8\u955c\u53d8\u6362\u540e\u7684\u56fe\u50cf\u4e3a p(x,y) \u3002 x=(tx/2)\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)/radius)+cx y=(ty/2)\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)/radius)+cy \u5bf9\u4e8e\u56fe\u50cf\u7f29\u5c0f\uff0c\u8bbe\u7f6e\u56fe\u50cf\u53d8\u6362\u7684\u534a\u5f84\u4e3a radius \uff0c\u54c8\u54c8\u955c\u53d8\u6362\u540e\u7684\u56fe\u50cf\u4e3a p(x,y) \u3002 x=cos(atan2(ty,tx))\u00d712\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)+cx y=sin(atan2(ty,tx))\u00d712\u00d7(sqrt(tx\u00d7tx+ty\u00d7ty)+cy import numpy as np import cv2 import math # \u6296\u97f3\u54c8\u54c8\u955c\uff0c\u62c9\u4f38\u653e\u5927 def MaxFrame ( frame , radius = 400 ): height , width = frame . shape [: 2 ] center_X , center_Y = width / 2 , height / 2 newX , newY = 0 , 0 real_radius = int ( radius / 2.0 ) new_data = frame . copy () for i in range ( width ): for j in range ( height ): tX = i - center_X tY = j - center_Y distance = tX * tX + tY * tY if distance < radius * radius : newX = int ( tX / 2.0 ) newY = int ( tY / 2.0 ) newX = int ( newX * ( math . sqrt ( distance ) / real_radius )) newX = int ( newX * ( math . sqrt ( distance ) / real_radius )) newX = int ( newX + center_X ) newY = int ( newY + center_Y ) if newX < width and newY < height : new_data [ j , i ,:] = frame [ newY , newX ,:] return new_data # \u6296\u97f3\u54c8\u54c8\u955c\uff0c\u6324\u538b\u7f29\u5c0f def MinFrame ( frame ): height , width = frame . shape [: 2 ] center_X , center_Y = width / 2 , height / 2 newX , newY = 0 , 0 new_data = frame . copy () for i in range ( width ): for j in range ( height ): tX = i - center_X tY = j - center_Y theta = math . atan2 ( tY , tX ) radius = math . sqrt (( tX * tX ) + ( tY * tY )) newR = math . sqrt ( radius ) * 12 newX = int ( center_X + ( newR * math . cos ( theta ))) newY = int ( center_Y + ( newR * math . sin ( theta ))) if newX < 0 or newX > width : newX = 0 if newY < 0 or newY > height : newY = 0 if newX <= width and newY <= height : new_data [ j , i ,:] = frame [ newY , newX ,:] return new_data if __name__ == '__main__' : cap = cv2 . VideoCapture ( 0 ) fourcc = cv2 . VideoWriter_fourcc ( * 'XVID' ) out = cv2 . VideoWriter ( 'output.avi' , fourcc , 20.0 , ( 640 , 480 )) while cap . isOpened (): ret , frame = cap . read () if not ret : print ( \"Can't receive frame (stream end?). Exiting ...\" ) break # \u8981\u52a0\u8f7d\u7684\u51fd\u6570 result = MinFrame ( frame ) result = cv2 . flip ( result , 1 ) out . write ( result ) cv2 . imshow ( 'result' , result ) if cv2 . waitKey ( 1 ) == ord ( 'q' ): break # \u5b8c\u6210\u5de5\u4f5c\u540e\u91ca\u653e\u6240\u6709\u5185\u5bb9 cap . release () out . release () cv2 . destroyAllWindows ()","title":"\u6296\u97f3\u54c8\u54c8\u955c"},{"location":"%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/#_3","text":"\u7167\u7247\u53d8\u8001 # RGB\u4e09\u901a\u9053\u516c\u5f0f\u53d8\u6362\uff0c\u6ce8\u610f\uff0c\u53d8\u6362\u540e\u8981\u7ea6\u675f\u57280~255\u4e4b\u95f4,np.clip(result,0,255) R = 0.393 \u00d7 r + 0.769 \u00d7 g + 0.189 \u00d7 b G = 0.349 \u00d7 r + 0.686 \u00d7 g + 0.168 \u00d7 b B = 0.272 \u00d7 r + 0.534 \u00d7 g + 0.131 \u00d7 b \u56fe\u7247\u8f6c\u7d20\u63cf (PS\u5b9e\u73b0) \u7070\u5ea6\u5316\uff0c\u5c06\u5f69\u8272\u56fe\u7247\u8f6c\u6362\u6210\u7070\u5ea6\u56fe\u50cf\u3002 \u590d\u5236\u7070\u5ea6\u56fe\u5c42\uff0c\u5e76\u4e14\u53cd\u8272\uff0c\u53cd\u8272\u4e3aY(i,j)=255-X(i,j)\u3002 \u5bf9\u7070\u5ea6\u56fe\u50cf\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca\u3002 \u6a21\u7cca\u540e\u7684\u56fe\u50cf\u53e0\u52a0\u6a21\u5f0f\u9009\u62e9\u989c\u8272\u51cf\u6de1\u6548\u679c\u516c\u5f0f: C=MIN(A+\uff08A\u00d7B\uff09/\uff08255-B\uff09,255) C\u4e3a\u6df7\u5408\u7ed3\u679c A\u4e3a\u53bb\u7070\u5ea6\u56fe B\u4e3a\u9ad8\u65af\u6a21\u7cca\u540e\u7684\u50cf\u7d20\u70b9 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u53e0\u52a0\u4e24\u5f20\u56fe\u7247(cv2.addWeighted)\u3002 \u56fe\u7247\u8f6c\u6cb9\u753b \u76f8\u90bb\u4e09\u884c\u7684\u56fe\u50cf\u5bf9\u5176\u50cf\u7d20\u8fdb\u884c\u6253\u4e71 \u589e\u5f3a\u56fe\u50cf\u7684\u8272\u5f69\u7a7a\u95f4( PIL\u91cc\u9762\u6709\u4e2aImageEnhance \u6a21\u5757\uff0c\u4e13\u95e8\u7528\u4f5c\u56fe\u50cf\u589e\u5f3a\u5904\u7406)\uff0c\u4f8b\u5982\u8c03\u8282\u8272\u5ea6\u3002 # 1.\u50cf\u7d20\u968f\u673a\u6253\u4e71\uff0c\u8fd9\u91cc\u4f7f\u75283\u884c\uff0c\u5982\u679c\u66f4\u7c97\u7cd9\u5c31\u7528\u66f4\u591a\u884c def oil_style ( img ): height , width = img . shape [: 2 ] output = np . zeros (( height - 2 , width , n ), dtype = 'uint8' ) for i in range ( 1 , height - 2 ): for j in range ( width - 2 ): if random . randint ( 1 , 10 ) % 3 == 0 : output [ i , j ] = img [ i + 1 , j ] elif random . randint ( 1 , 10 ) % 2 == 0 : output [ i , j ] = img [ i + 2 , j ] else : output [ i , j ] = img [ i - 1 , j ] return output # 2.\u56fe\u50cf\u589e\u5f3a def color_add (): image = Image . open ( 'oil_img.jpg' ) enh_col = ImageEnhance . Color ( image ) color = 2.0 image_colored = enh_col . enhance ( color ) image_colored . show () \u9a6c\u8d5b\u514b \u8bb2\u56fe\u50cf\u5206\u6210\u5927\u5c0f\u4e00\u81f4\u7684\u56fe\u50cf\u5757\uff0c\u6bcf\u4e2a\u56fe\u50cf\u5757\u90fd\u662f\u6b63\u65b9\u5f62(\u8be5\u5c3a\u5bf8\u51b3\u5b9a\u4e86\u9a6c\u8d5b\u514b\u5757\u7684\u5927\u5c0f)\uff0c\u6240\u4ee5\u9a6c\u8d5b\u514b\u5bf9\u6bcf\u4e2a\u6b63\u65b9\u5f62\u7684\u5904\u7406\u6709\u4e0b\u9762\u51e0\u79cd\u65b9\u5f0f: \u6a21\u677f\u4e2d\u5bf9\u5e94\u7684\u6240\u6709\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u90fd\u7b49\u4e8e\u8be5\u6a21\u677f\u7684\u5de6\u4e0a\u89d2\u7b2c\u4e00\u4e2a\u50cf\u7d20\u7684\u50cf\u7d20\u503c\u3002 \u5bf9\u4e8e\u65b9\u5757\u91cc\u7684\u50cf\u7d20\u8fdb\u884c\u968f\u673a\u6253\u4e71\u3002 \u968f\u673a\u7528\u67d0\u4e00\u70b9\u4ee3\u66ff\u9886\u57df\u7c7b\u7684\u6240\u6709\u50cf\u7d20 row , col , channel = img . shape half_patch = 10 # \u9a6c\u8d5b\u514b\u5927\u5c0f # \u7c7b\u4f3c\u6ed1\u7a97\u4e00\u6837\uff0c\u904d\u5386\u6574\u5f20\u56fe\u7247\uff0c\u968f\u673a\u5728\u56fe\u50cf\u7684Patch\u9886\u57df\u91cc\u53d6\u4e00\u4e2a\u50cf\u7d20\u6765\u66ff\u6362Patch\u91cc\u9762\u7684\u6240\u6709\u50cf\u7d20\u503c for i in range ( half_patch , row - 1 - half_patch , half_patch ): for j in range ( half_patch , col - 1 - half_patch , half_patch ): k1 = random . random () - 0.5 k2 = random . random () - 0.5 m = np . floor ( k1 * ( half_patch * 2 + 1 )) n = np . floor ( k2 * ( half_patch * 2 + 1 )) h = int (( i + m ) % row ) w = int (( j + n ) % col ) img_out [ i - half_patch : i + half_patch , j - half_patch : j + half_patch , :] = \\ img [ h , w , :] \u6f2b\u753b\u98ce\u683c \u7070\u5ea6\u5316+\u4e2d\u503c\u6ee4\u6ce2(\u964d\u4f4e\u56fe\u7247\u7684\u51c6\u786e\u5ea6,\u589e\u52a0\u7ed8\u753b\u4e2d\u7684\u8bef\u5dee) \u56fe\u50cf\u9608\u503c\u5316(\u5206\u79bb\u7070\u5ea6\u56fe\u50cf\u4e2d\u7684\u76ee\u6807\u533a\u57df\u548c\u80cc\u666f\u533a\u57df) dst = cv2.adaptiveThreshold(src, maxval, thresh_type, type, Block Size,C) src\uff1a\u8f93\u5165\u56fe\uff0c\u53ea\u80fd\u8f93\u5165\u5355\u901a\u9053\u56fe\u50cf\uff0c\u901a\u5e38\u6765\u8bf4\u4e3a\u7070\u5ea6\u56fe\u3002 maxval\uff1a\u5f53\u50cf\u7d20\u503c\u8d85\u8fc7\u4e86\u9608\u503c\uff08\u6216\u8005\u5c0f\u4e8e\u9608\u503c\uff0c\u6839\u636etype\u6765\u51b3\u5b9a\u6240\u8d4b\u4e88\u7684\u503c\u3002\uff09 thresh_type\uff1a\u9608\u503c\u7684\u8ba1\u7b97\u65b9\u6cd5\u5305\u542b\u4e24\u79cd\u7c7b\u578b\uff0c\u5373cv2.ADAPTIVE_THRESH_MEAN_C\u548ccv2.ADAPTIVE_THRESH_GAUSSIAN_C\u3002 type\uff1a\u4e8c\u503c\u5316\u64cd\u4f5c\u7684\u7c7b\u578b\u4e0e\u56fa\u5b9a\u9608\u503c\u51fd\u6570\u76f8\u540c\uff0c\u5305\u542b5\u79cd\u7c7b\u578b\uff0c\u5373cv2.THRESH_BINARY\u3001cv2.THRESH_BINARY_INV\u3001cv2.THRESH_TRUNC\u3001cv2.THRESH_TOZERO\u548ccv2.THRESH_TOZERO_INV\u3002 Block Size\uff1a\u56fe\u7247\u4e2d\u5206\u5757\u7684\u5927\u5c0f\u3002 C\uff1a\u9608\u503c\u8ba1\u7b97\u65b9\u6cd5\u4e2d\u7684\u5e38\u6570\u9879 img_gray = cv2 . cvtColor ( img_rgb , cv2 . COLOR_RGB2GRAY ) img_blur = cv2 . medianBlur ( img_gray , 7 ) #\u68c0\u6d4b\u5230\u8fb9\u7f18\u5e76\u4e14\u589e\u5f3a\u5176\u6548\u679c img_edge = cv2 . adaptiveThreshold ( img_blur , 255 , cv2 . ADAPTIVE_THRESH_MEAN_C , cv2 . THRESH_BINARY , blockSize = 9 , C = 2 ) #\u8f6c\u6362\u56de\u5f69\u8272\u56fe\u50cf img_edge = cv2 . cvtColor ( img_edge , cv2 . COLOR_GRAY2RGB ) img_cartoon = cv2 . bitwise_and ( img_color , img_edge )","title":"\u7167\u7247\u98ce\u683c"},{"location":"%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/#_4","text":"\u6296\u97f3\u6296\u52a8\u7279\u6548 \u6296\u52a8\u6548\u679c\u7684\u539f\u7406\u5c31\u662f**\u5bf9\u89c6\u9891\u4e2d\u7684\u4e00\u4e9b\u5e27\u8fdb\u884c\u526a\u5207\u548c\u653e\u5927\u5230\u539f\u56fe**\uff0c\u51fa\u73b0\u89c6\u9891\u4e2d\u7684\u4eba\u50cf\u653e\u5927\u98a4\u52a8\u7684\u6548\u679c\u3002\u5177\u4f53\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a\u8bfb\u53d6\u5f85\u5904\u7406\u7684\u89c6\u9891\uff0c\u8bbe\u7f6e\u51fa\u73b0\u6296\u52a8\u6548\u679c\u7684\u5e27\u6570\uff0c\u6bd4\u5982\u76f8\u90bb5\u5e27\u7684\u56fe\u50cf\u6309\u7167\u56fe\u50cf\u4e2d\u5fc3\u8fdb\u884c\u88c1\u526a\uff0c\u7136\u540e\u7f29\u653e\u5230\u539f\u6765\u7684\u5c3a\u5bf8\u3002\u8bbe\u7f6e\u6296\u52a8\u4e2d\u4e0d\u53d8\u7684\u5e27\u6570\uff0c\u6bd4\u5982\u4ee55\u5e27\u4e3a\u95f4\u9694\u6765\u5904\u7406\u56fe\u50cf\u3002 def img_shake ( img ): height , width , n = img . shape h1 = int ( height * 0.1 ) h2 = int ( height * 0.9 ) w1 = int ( width * 0.1 ) w2 = int ( width * 0.9 ) img2 = img [ h1 : h2 , w1 : w2 ] dst = cv2 . resize ( img2 , ( width , height )) return dst # main \u6bcf\u96945\u5e27\u5904\u7406\u4e00\u4e0b\u5373\u53ef \u6296\u97f3\u95ea\u767d\u6548\u679c \u7c7b\u4f3c\u6296\u52a8\uff0c\u6bcf\u96945\u5e27\u8fdb\u884c Gamma\u53d8\u6362 (\u5bf9\u56fe\u50cf\u7070\u5ea6\u503c\u8fdb\u884c\u975e\u7ebf\u6027\u64cd\u4f5c,\u516c\u5f0f\u4e0b)\uff0c\u4e3b\u8981\u662f\u8c03\u8282\u56fe\u50cf\u7684\u66dd\u5149\u7a0b\u5ea6\u3002 Gamma\u53d8\u6362 :\u8ba9\u56fe\u50cf\u4ece\u66dd\u5149\u5f3a\u5ea6\u7684\u7ebf\u6027\u54cd\u5e94\u53d8\u5f97\u66f4\u63a5\u8fd1\u4eba\u773c\u611f\u53d7\u7684\u54cd\u5e94\uff0c\u5373\u5c06\u76f8\u673a\u66dd\u5149\u6216\u66dd\u5149\u4e0d\u8db3\u7684\u56fe\u7247\u8fdb\u884c\u77eb\u6b63 Gamma \u503c\u5927\u4e8e1\u65f6\uff0c\u5bf9\u56fe\u50cf\u7684\u7070\u5ea6\u5206\u5e03\u76f4\u65b9\u56fe\u5177\u6709\u62c9\u4f38\u4f5c\u7528\uff0c\u4f7f\u7070\u5ea6\u5411\u9ad8\u7070\u5ea6\u503c\u5ef6\u5c55 \u800c\u5f53 Gamma \u5c0f\u4e8e1\u65f6\uff0c\u5bf9\u56fe\u50cf\u7684\u7070\u5ea6\u5206\u5e03\u76f4\u65b9\u56fe\u5177\u6709\u6536\u7f29\u4f5c\u7528\uff0c\u4f7f\u7070\u5ea6\u5411\u4f4e\u7070\u5ea6\u503c\u65b9\u5411\u9760\u62e2\u3002 \u56e0\u6b64\u8bbe\u7f6eGamma\u53c2\u6570\u53ef\u4ee5\u63a7\u5236\u56fe\u50cf\u7684\u66dd\u5149\u5ea6\uff0c\u57280\uff5e1\u65f6\u4f1a\u9020\u6210\u56fe\u50cf\u8fc7\u5ea6\u66dd\u5149 def gamma_trans ( img , gamma ): #gamma\u51fd\u6570\u5904\u7406 gamma_table = [ np . power ( x / 255.0 , gamma ) * 255.0 for x in range ( 256 )] #\u5efa\u7acb\u6620\u5c04\u8868 gamma_table = np . round ( np . array ( gamma_table )) . astype ( np . uint8 ) #\u989c\u8272\u503c\u4e3a\u6574\u6570 return cv2 . LUT ( img , gamma_table ) #\u56fe\u7247\u989c\u8272\u67e5\u8868\u3002\u53e6\u5916\u53ef\u4ee5\u6839\u636e\u5149\u5f3a\uff08\u989c\u8272\uff09\u5747\u5300\u5316\u539f\u5219\u8bbe\u8ba1\u81ea\u9002\u5e94\u7b97\u6cd5\u3002 \u6296\u97f3\u89c6\u9891\u9713\u8679\u6548\u679c \u65b9\u6cd5\u4e00\uff1a\u5b9e\u65f6\u7684\u5149\u6591\u7ed8\u5236(opencv\u4e0a\u663e\u5f97\u7a81\u5140\uff0copenGL\u4e0a\u53ef\u4ee5)\uff0c\u8fd9\u79cd\u65b9\u6cd5\u5f03\u7528\u3002 \u65b9\u6cd5\u4e8c\uff1a\u8bbe\u8ba1\u591a\u5e45\u7d20\u6750\u56fe\u7247\uff0c\u9ed1\u5e95\u4e0a\u9762\u6709\u4eae\u8272\u7684\u5149\u6591\uff0c\u4e0d\u540c\u7684\u56fe\u7247\u4e2d\u5149\u6591\u7684\u4f4d\u7f6e\u4e0d\u540c\u3002 \u52a0\u8f7d\u89c6\u9891\uff0c\u6309\u71671\u5e27\u4e3a\u4e00\u4e2a\u95f4\u9694\uff0c\u6bcf\u4e2a\u95f4\u9694\u4e2d\u7684\u56fe\u7247\u5728\u76f8\u540c\u4f4d\u7f6e\u7ed8\u5236\u5f69\u8272\u5149\u6591\uff0c\u4e00\u5171\u5b9a\u4e494\u79cd\u5149\u6591\u4f4d\u7f6e\uff0c\u5faa\u73af\u5728\u89c6\u9891\u4e2d\u8fdb\u884c\u6e32\u67d3\uff0c\u6700\u540e\u5c06\u5904\u7406\u5b8c\u7684\u89c6\u9891\u4fdd\u5b58\u5e76\u8f93\u51fa\u3002 def neon ( img , cnt ): h , w = img . shape [: 2 ] if cnt == 1 : mask = cv2 . imread ( \"mask1.jpg\" ) # \u53ef\u4ee5\u8bbe\u8ba1\u56db\u5f20\u56fe\u7247\uff0ccnt\u4e0d\u540c\uff0c\u52a0\u8f7d\u4e0d\u540c ...... mask = cv2 . resize ( mask ,( w , h ), interpolation = cv2 . INTER_CUBIC ) dst = cv2 . addWeighted ( img , 0.7 , mask , 0.3 , 0 ) return dst \u6296\u97f3\u65f6\u5149\u5012\u6d41 \u5e27\u56fe\u7247\u5012\u53d9\u5b58\u50a8\u5373\u53ef \u6296\u97f3\u89c6\u9891\u6162\u52a8\u4f5c \u8bfb\u53d6\u89c6\u9891\uff0c\u5bf9\u89c6\u9891\u8ba1\u6570\uff0c\u5f53\u8ba1\u6570\u5230\u7b2c20\uff5e40\u5e27\u7684\u65f6\u5019\uff0c\u8bbe\u7f6e\u964d\u4f4e\u7684fps_slow=10\uff0c\u4e5f\u5c31\u662f\u6bcf\u79d210\u5e27\u89c6\u9891\u56fe\u50cf\uff0c\u5e76\u4fdd\u5b58\u5230\u53e6\u5916\u4e00\u4e2a\u89c6\u9891\u4e2d\uff0c\u56e0\u6b64\u539f\u89c6\u9891\u88ab\u5206\u6210\u4e863\u4e2a\u89c6\u9891\uff0c\u5373\u7b2c0\uff5e20\u5e27\u3001\u7b2c20\uff5e40\u5e27\u3001\u7b2c40\u4e4b\u540e\uff0c\u5c063\u4e2a\u89c6\u9891\u7ec4\u5408\u8d77\u6765","title":"\u6296\u97f3\u7279\u6548"},{"location":"%E5%B0%8F%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/#_5","text":"\u4eba\u8138\u78e8\u76ae \u56fe\u50cf\u6ee4\u6ce2 \u6ee4\u6ce2\u662f\u6d88\u9664\u8138\u90e8\u7684\u4e00\u4e9b\u7ec6\u7eb9\u548c\u6591\u70b9\uff0c\u4f46\u662f\u4f1a\u53d8\u6a21\u7cca\uff0c\u4e3a\u4e86\u4fdd\u7559\u66f4\u591a\u7684\u8fb9\u7f18\u4fe1\u606f\uff0c\u4f7f\u7528\u53cc\u8fb9\u6ee4\u6ce2 \u56fe\u50cf\u878d\u5408 \u6539\u5584\u6a21\u7cca\u73b0\u8c61\uff0c 0.3*src+0.7*blur \uff0c\u5373\u4f7f\u7528 cv2.addWeighted\u51fd\u6570 \u56fe\u50cf\u9510\u5316 \u589e\u5f3a\u7ec6\u8282\u611f\uff0c\u4f7f\u7528 USM\u9510\u5316 \u6216 \u90bb\u57df\u9510\u5316 \u548c Laplace\u9510\u5316 \uff0c\u672c\u8282\u91c7\u7528Python\u4e2dPIL\u6a21\u5757\u7684ImageEnhance\u7c7b\u4e2d\u7684ImageEnhance.Sharpness()\u7b49\u51fd\u6570\uff0c\u901a\u8fc7\u8f93\u5165\u7684\u53c2\u6570\u81ea\u52a8\u8c03\u8282\u56fe\u50cf\u7684\u9510\u5ea6\u548c\u5bf9\u6bd4\u5ea6\u3002 import cv2 from PIL import Image from PIL import ImageEnhance img = cv2 . imread ( '3.jpg' ) blur = cv2 . bilateralFilter ( img , 9 , 75 , 75 ) alpha = 0.3 beta = 1 - alpha gamma = 0 img_add = cv2 . addWeighted ( img , alpha , blur , beta , gamma ) cv2 . imwirte ( 'img_add.jpg' , img_add ) # # \u9510\u5ea6\u589e\u5f3a img_add = Image . open ( 'img_add.jpg' ) img_add . show () enh_sha = ImageEnhance . Sharpness ( img_add ) sharpness = 1.5 image_sharped = enh_sha . enhance ( sharpness ) image_sharped . show () # # \u5bf9\u6bd4\u5ea6\u589e\u5f3a enh_con = ImageEnhance . Contrast ( image_sharped ) contrast = 1.15 image_contrasted = enh_con . enhance ( contrast ) image_contrasted . show () cv2 . waitKey ( 0 ) \u4eba\u8138\u7f8e\u767d \u6700\u597d\u7684\u5b9e\u73b0\u65b9\u5f0f\u662f\u7b80\u5386\u4e00\u4e2a\u989c\u8272\u67e5\u627e\u8868\uff0c\u6bd4\u5982\u4ece245\u5f00\u59cb\uff0c\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u4e3a255\uff0c\u56e0\u6b64\u5efa\u7acb\u4e00\u4e2a\u67e5\u627e\u8868\uff0c\u5171\u5305\u542b256\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e00\u4e2a\u5143\u7d20\u5bf9\u5e94\u4e00\u4e2a0\uff5e255\u50cf\u7d20\u503c\u8c03\u6574\u540e\u7684\u50cf\u7d20\uff0c\u4e00\u822c\u662f\u5bf9\u539f\u672c\u7684\u50cf\u7d20\u503c\u589e\u52a0\uff0c\u901a\u8fc7\u67e5\u627e\u8868\u6765\u6539\u53d8\u56fe\u50cf\u7684\u50cf\u7d20\u503c\u5373\u53ef\u3002\u5f53\u7136\uff0c\u5177\u4f53\u7684\u6548\u679c\u9700\u8981\u4e0d\u65ad\u7684\u6d4b\u8bd5\uff0c\u6539\u53d8\u989c\u8272\u67e5\u627e\u8868\u3002 import cv2 import math from PIL import Image from PIL import ImageEnhance Color_list = [ 1 , 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 31 , 33 , 35 , 37 , 39 , 41 , 43 , 44 , 46 , 48 , 50 , 52 , 53 , 55 , 57 , 59 , 60 , 62 , 64 , 66 , 67 , 69 , 71 , 73 , 74 , 76 , 78 , 79 , 81 , 83 , 84 , 86 , 87 , 89 , 91 , 92 , 94 , 95 , 97 , 99 , 100 , 102 , 103 , 105 , 106 , 108 , 109 , 111 , 112 , 114 , 115 , 117 , 118 , 120 , 121 , 123 , 124 , 126 , 127 , 128 , 130 , 131 , 133 , 134 , 135 , 137 , 138 , 139 , 141 , 142 , 143 , 145 , 146 , 147 , 149 , 150 , 151 , 153 , 154 , 155 , 156 , 158 , 159 , 160 , 161 , 162 , 164 , 165 , 166 , 167 , 168 , 170 , 171 , 172 , 173 , 174 , 175 , 176 , 178 , 179 , 180 , 181 , 182 , 183 , 184 , 185 , 186 , 187 , 188 , 189 , 190 , 191 , 192 , 193 , 194 , 195 , 196 , 197 , 198 , 199 , 200 , 201 , 202 , 203 , 204 , 205 , 205 , 206 , 207 , 208 , 209 , 210 , 211 , 211 , 212 , 213 , 214 , 215 , 215 , 216 , 217 , 218 , 219 , 219 , 220 , 221 , 222 , 222 , 223 , 224 , 224 , 225 , 226 , 226 , 227 , 228 , 228 , 229 , 230 , 230 , 231 , 232 , 232 , 233 , 233 , 234 , 235 , 235 , 236 , 236 , 237 , 237 , 238 , 238 , 239 , 239 , 240 , 240 , 241 , 241 , 242 , 242 , 243 , 243 , 244 , 244 , 244 , 245 , 245 , 246 , 246 , 246 , 247 , 247 , 248 , 248 , 248 , 249 , 249 , 249 , 250 , 250 , 250 , 250 , 251 , 251 , 251 , 251 , 252 , 252 , 252 , 252 , 253 , 253 , 253 , 253 , 253 , 254 , 254 , 254 , 254 , 254 , 254 , 254 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 255 , 256 ] def main (): img = cv2 . imread ( \"3.jpg\" ) img = cv2 . bilateralFilter ( img , 9 , 75 , 75 ) height , width , n = img . shape img2 = img . copy () # img2 = cv2.cvtColor(img, cv2.COLOR_BGR2HSV) for i in range ( height ): for j in range ( width ): B = img2 [ i , j ][ 0 ] G = img2 [ i , j ][ 1 ] R = img2 [ i , j ][ 2 ] img2 [ i , j ][ 0 ] = Color_list [ B ] img2 [ i , j ][ 1 ] = Color_list [ G ] img2 [ i , j ][ 2 ] = Color_list [ R ] # img2[i, j][1] += 2 # img2 = cv2.cvtColor(img2, cv2.COLOR_HSV2BGR) cv2 . imwrite ( 'res.jpg' , img2 ) # \u9510\u5316\uff0c\u8ba9\u7ed3\u679c\u66f4\u771f\u5b9e image = Image . open ( 'res.jpg' ) enh_con = ImageEnhance . Color ( image ) contrast = 1.2 image_contrasted = enh_con . enhance ( contrast ) enh_con = ImageEnhance . Contrast ( image ) sharpness = 1.2 image_contrasted = enh_con . enhance ( sharpness ) image_contrasted . show () if __name__ == '__main__' : main ()","title":"\u7f8e\u989c\u6548\u679c"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/","text":"0.\u5e8f\u8a00 \u00b6 \u6b22\u8fce\u6765\u5230\u300a\u5de5\u5177\u4f7f\u7528\u7bc7\u300b\u3002\u5728\u8fd9\u4e2a\u4e13\u680f\u91cc\uff0c\u8fd8\u662f\u672c\u7740\u5c0f\u9a6c\u7684\u4e00\u8d2f\u7684\u539f\u5219\uff0c\u4e13\u6ce8\u4e8e\u8ba9\u5927\u5bb6\u80fd\u591f\u771f\u6b63\u7684\u7528\u8d77\u6765\u7684\u5de5\u5177\uff0c\u6240\u4ee5\u6211\u603b\u7ed3\u4e66\u5199\u7684\u6587\u7ae0\u4e5f\u662f\u6bd4\u8f83\u8be6\u5c3d\u7684\u3002\u535a\u4e3b\u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u662f\u300c \u5c0f\u9a6cCV \u300d\uff0c\u6b22\u8fce\u5927\u5bb6\u591a\u591a\u5173\u6ce8\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u5341\u5206\u611f\u8c22\uff01 1.\u7b80\u4ecb \u00b6 1.1 \u6559\u7a0b\u94fe\u63a5\u7b80\u4ecb \u00b6 albumentations\u82f1\u6587\u7248\u5b98\u65b9\u6559\u7a0b albumentations\u7684github\u4f7f\u7528\u6559\u7a0b Augmentor\u7684github\u4f7f\u7528\u6559\u7a0b 1.2 \u5b89\u88c5\u7b80\u4ecb \u00b6 pip install albumentations pip install Augmentor 1.3 \u5bfc\u5165\u7b80\u4ecb \u00b6 import ambumentations import Augmentor 2. \u6570\u636e\u589e\u5f3a\u5e93albumentations`\u4ecb\u7ecd \u00b6 2.1 \u5e38\u89c1API\u4e2d\u6587\u4ecb\u7ecd \u00b6 Blur(blur_limit = 7,p = 0.5) \uff1a\u56fe\u50cf\u5747\u503c\u5e73\u6ed1\u6ee4\u6ce2\uff0c\u4f7f\u56fe\u50cf\u53d8\u6a21\u7cca p \u4ee3\u8868\u6982\u7387 blur_limit \u4ee3\u8868\u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u5185\u6838\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c [3 \uff0c 7] MotionBlur(blur_limit=7, p=0.5) : \u8fd0\u52a8\u6a21\u7cca blur_limit \u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u5185\u6838\u5927\u5c0f\u3002\u5e94\u8be5\u5728 [3 \uff0c inf] \u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 3 \uff0c 7 \uff09 p \u4ee3\u8868\u6982\u7387 MedianBlur(blur_limit=7, p=0.5) : \u4e2d\u5fc3\u6a21\u7cca blur_limit \u7528\u4e8e\u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u5b54\u5f84\u7ebf\u6027\u5927\u5c0f\u3002\u5fc5\u987b\u662f\u5947\u6570\u5e76\u4e14\u5728 [3 \uff0c inf] \u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 3 \uff0c 7 \uff09 p \u4ee3\u8868\u6982\u7387 GlassBlur(sigma=0.7,max_delta=4,iterations=2,mode='fast',p=0.5) :\u73bb\u7483\u6a21\u7cca\uff0c\u6bdb\u8fb9\u6548\u679c sigma \u9ad8\u65af\u6838\u7684\u6807\u51c6\u5dee max_delta \u4ea4\u6362\u50cf\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb iterations \u91cd\u590d\u6b21\u6570\uff0c\u9ed8\u8ba4\u503c\uff1a 2 mode - \u8ba1\u7b97\u6a21\u5f0f\uff1a\u5feb\u901f\u6216\u7cbe\u786e\u3002\u9ed8\u8ba4\u503c\uff1a \u201c \u5feb\u901f \u201d \u3002 p \u4ee3\u8868\u6982\u7387 GaussianBlur(blur_limit=7, p=0.5) :\u9ad8\u65af\u6a21\u7cca blur_limit \u7528\u4e8e\u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u9ad8\u65af\u6838\u5927\u5c0f\u3002\u5fc5\u987b\u4e3a\u96f6\u6216\u5947\u6570\u4e14\u5728 [3 \uff0c inf] \u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 3 \uff0c 7 \uff09 p \u4ee3\u8868\u6982\u7387 VerticalFlip(p=0.5) \uff1a\u6c34\u5e73\u7ffb\u8f6c p \u4ee3\u8868\u6982\u7387 HorizontalFlip(p = 0.5) : \u5782\u76f4\u7ffb\u8f6c p \u4ee3\u8868\u6982\u7387 Flip(p = 0.5 ) :\u540c\u65f6\u8fdb\u884c\u6c34\u5e73\u548c\u5782\u76f4\u64cd\u4f5c\uff0c\u7c7b\u4f3c\u6e56\u4e2d\u770b\u5df1\u3002 p \u4ee3\u8868\u6982\u7387 Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225),max_pixel_value=255.0, always_apply=False, p=1.0) : \u5f52\u4e00\u5316 mean \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5747\u503c std \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6807\u51c6\u5dee p \u4ee3\u8868\u6982\u7387 Transpose(p=0.5) : \u8f6c\u7f6e\uff0c\u5c06\u56fe\u50cf\u7684\u884c\u548c\u5217\u8fdb\u884c\u4e92\u6362,\u56fe\u7247\u4e2d\u663e\u793a\u5c31\u662f\u9006\u65f6\u9488\u65cb\u8f6c90\u5ea6\uff0c\u4e0d\u5e38\u7528\u3002 p \u4ee3\u8868\u6982\u7387 CenterCrop(height, width, p=1.0) : \u968f\u673a\u4e2d\u5fc3\u88c1\u526a height \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 width \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 p \u4ee3\u8868\u6982\u7387 RandomCrop(height, width, p=1.0) :\u968f\u673a\u88c1\u526a height \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 width \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 p \u4ee3\u8868\u6982\u7387 Crop(x_min=0, y_min=0, x_max=1024, y_max=1024, p=1.0) \u88c1\u526a\u56fe\u50cf\uff0c\u5176\u4e0eRandomCrop \u7684\u533a\u522b\u662f\u53ef\u4ee5\u6307\u5b9a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u800c RandomCrop \u53ea\u80fd\u6307\u5b9a\u5bbd\u9ad8 x_min \u5de6\u4e0a\u89d2\u7684\u6700\u5c0f x \u5750\u6807 y_min \u5de6\u4e0a\u89d2\u7684\u6700\u5c0f y \u5750\u6807 x_max \u53f3\u4e0b\u89d2\u7684\u6700\u5927 x \u5750\u6807 y_max \u53f3\u4e0b\u89d2\u7684\u6700\u5927 y \u5750\u6807 p \u4ee3\u8868\u6982\u7387 CropNonEmptyMaskIfExists(height, width, ignore_values=None, ignore_channels=None, p=1.0) \u5e26\u6709\u906e\u7f69\u7684\u88c1\u526a\u533a\u57df\u5982\u679c\u906e\u7f69\u4e3a\u975e\u7a7a\uff0c\u5219\u8fdb\u884c\u968f\u673a\u88c1\u526a height \u88c1\u526a\u7684\u5782\u76f4\u5927\u5c0f width \u88c1\u526a\u7684\u6c34\u5e73\u5927\u5c0f ignore_values \u63a9\u7801\u4e2d\u8981\u5ffd\u7565\u7684\u503c\uff0c\u603b\u662f\u5ffd\u7565 0 \u4e2a\u503c ignore_channels \u8981\u5728\u63a9\u7801\u4e2d\u5ffd\u7565\u7684\u901a\u9053 p \u4ee3\u8868\u6982\u7387 RandomScale(scale_limit = 0.1,interpolation = 1,p = 0.5 ) \u968f\u673a\u7f29\u653e\u56fe\u50cf\u5927\u5c0f\u3002 scale_limit \u6bd4\u4f8b\u9650\u5236 , \u6bd4\u4f8b\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c scale_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4\u4e3a \uff08 1-scale_limit \uff0c 1+scale_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 0.9 \uff0c 1.1 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 LongestMaxSize(max_size = 1024,interpolation = 1,p = 1 ) :\u7f29\u653e\u56fe\u50cf\uff0c\u4f7f\u6700\u5927\u8fb9\u7b49\u4e8e max_size \uff0c\u4fdd\u6301\u521d\u59cb\u56fe\u50cf\u7684\u7eb5\u6a2a\u6bd4 max_size \u8f6c\u6362\u540e\u56fe\u50cf\u7684\u6700\u5927\u5927\u5c0f interpolation \u63d2\u503c\u65b9\u6cd5\u3002\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 SmallestMaxSize(max_size = 1024,interpolation = 1,p = 1) : \u7f29\u653e\u56fe\u50cf\uff0c\u4f7f\u6700\u5c0f\u8fb9\u7b49\u4e8e max_size \uff0c\u4fdd\u6301\u521d\u59cb\u56fe\u50cf\u7684\u7eb5\u6a2a\u6bd4 max_size \u8f6c\u6362\u540e\u56fe\u50cf\u7684\u6700\u5927\u5927\u5c0f interpolation \u63d2\u503c\u65b9\u6cd5\u3002\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 Resize(height,width,interpolation = 1,p = 1 ) :\u5c06\u8f93\u5165\u56fe\u50cf\u8c03\u6574\u4e3a\u7ed9\u5b9a\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6 height \u8f93\u51fa\u6240\u9700\u7684\u9ad8\u5ea6 width \u8f93\u51fa\u6240\u9700\u7684\u5bbd\u5ea6 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 RandomSizedCrop(min_max_height=(int,int),height,width,w2h_ratio =1.0,interpolation = 1,p = 1.0 ) \u968f\u673a\u88c1\u526a\u56fe\u50cf\u5e76\u7f29\u653e\u5230\u56fa\u5b9a\u5927\u5c0f\u3002 min_max_height \u88c1\u526a\u5927\u5c0f\u9650\u5236 height \u8f93\u51fa\u88c1\u526a\u548c\u8c03\u6574\u5927\u5c0f\u540e\u7684\u9ad8\u5ea6 width \u8f93\u51fa\u88c1\u526a\u548c\u8c03\u6574\u5927\u5c0f\u540e\u7684\u5bbd\u5ea6 w2h_ratio \u88c1\u526a\u7684\u957f\u5bbd\u6bd4 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 RandomCropNearBBox(max_part_shift = 0.3,p = 1.0 ) :\u968f\u673a\u5e73\u79fb bbox \u7684 x \uff0c y\u5750\u6807\u5e76\u4ece\u56fe\u50cf\u4e2d\u88c1\u526a max_part_shift \u6700\u5927\u504f\u79fb\u90e8\u5206\uff0c\u6d6e\u70b9\u503c\u5728\uff08 0.0 \uff0c 1.0 \uff09\u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c 0.3 p \u4ee3\u8868\u6982\u7387 GaussNoise(var_limit=(10.0, 50.0), mean=None, p=0.5) : \u9ad8\u65af\u566a\u58f0\uff0c\u5176\u5b9e\u8fd9\u4e2a\u771f\u7684\u597d\u5417\uff1f\u4e00\u822c\u800c\u8a00\u5b66\u7684\u7279\u5f81\u5206\u5e03\u5c31\u63a5\u8fd1\u4e8e\u9ad8\u65af\uff0c\u5982\u679c\u52a0\u5165\u8fd9\u4e2a\u566a\u58f0\uff0c\u662f\u4e0d\u662f\u4f1a\u6709\u5f71\u54cd\uff1f var_limit \u566a\u58f0\u7684\u65b9\u5dee\u8303\u56f4\u3002\u5982\u679c var_limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 0 \uff0c var_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 10.0 \uff0c 50.0 \uff09 mean \u566a\u58f0\u7684\u5e73\u5747\u503c\u3002\u9ed8\u8ba4\u503c\uff1a 0 p \u4ee3\u8868\u6982\u7387 ISONoise(color_shift=(0.01, 0.05), intensity=(0.1, 0.5), p=0.5) :\u65bd\u52a0\u6444\u50cf\u5934\u4f20\u611f\u5668\u566a\u97f3 color_shift \u989c\u8272\u504f\u79fb\uff08\u6d6e\u52a8\uff0c\u6d6e\u52a8\uff09 \u2013 \u8272\u76f8\u53d8\u5316\u7684\u53d8\u5316\u8303\u56f4\u3002\u5728 HLS \u989c\u8272\u7a7a\u95f4\u4e2d\u6d4b\u91cf\u4e3a 360 \u5ea6\u8272\u8c03\u89d2\u5ea6\u7684\u5206\u6570\u3002 intensity \u5f3a\u5ea6\uff08\uff08 float \uff0c float \uff09 \u2013 \u63a7\u5236\u989c\u8272\u548c\u4eae\u5ea6\u566a\u58f0\u5f3a\u5ea6\u7684\u4e58\u6cd5\u56e0\u5b50\u3002 p \u4ee3\u8868\u6982\u7387 RandomRotate90(p=0.5) : \u968f\u673a\u65cb\u8f6c 90 \u5ea6\u96f6\u6b21\u6216\u591a\u6b21\u3002 p \u4ee3\u8868\u6982\u7387 Rotate(limit=90, interpolation=1, border_mode=4, value=None,mask_value=None,p=0.5) : \u65cb\u8f6c,\u8fd9\u4e2a\u65cb\u8f6c\u5f88\u5389\u5bb3\uff0c\u7a7a\u767d\u90e8\u5206\u4f1a\u63d2\u503c\u8865\u5145\u3002 limit \u5982\u679c limit \u662f\uff08 int,int \uff09\u4ece\u4e2d\u968f\u673a\u9009\u62e9\uff0c\u5982\u679c\u662f int \uff0c\u5219\u4ece\uff08 -int \uff0c int \uff09\u968f\u673a\u9009\u62e9\uff0c \u9ed8\u8ba4\u503c\uff08 -90 \uff0c 90 \uff09 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.1, rotate_limit=45,interpolation=1, border_mode=4, value=None, mask_value=None,p=0.5) :\u968f\u673a\u5e73\u79fb\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u56fe\u7247\u3002 shift_limit \u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7684\u79fb\u4f4d\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c shift_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4 \u4e3a\uff08 -shift_limit \uff0c shift_limit \uff09\u3002\u4e0a\u4e0b\u9650\u7684\u7edd\u5bf9\u503c\u5e94\u5728\u8303\u56f4 [0 \uff0c 1] \u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.0625 \uff0c 0.0625 \uff09\u3002 scale_limit \u6bd4\u4f8b\u9650\u5236\u3002\u5982\u679c scale_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -scale_limit \uff0c scale_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.1 \uff0c 0.1 \uff09\u3002 rotate_limitint \u503c\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -rotate_limit \uff0c rotate_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -45 \uff0c 45 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valuein t \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 OpticalDistortion(distort_limit=0.05, shift_limit=0.05, interpolation=1, border_mode=4, value=None, mask_value=None, p=0.5) :\u5149\u5b66\u7578\u53d8\uff0c\u5f88\u6709\u7528\u7684\u4e00\u4e2a\uff0c\u7528\u4e8e\u6587\u5b57\u8bc6\u522b\u6548\u679c\u66f4\u4f73 distort_limit \u626d\u66f2\u6781\u9650 , \u5982\u679c\u626d\u66f2\u6781\u9650\u662f\u4e00\u4e2a\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u5c06\u662f\uff08 -warte \u6781 \u9650\uff0c warte \u6781\u9650\uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.05 \uff0c 0.05 \uff09\u3002 shift_limit \u5982\u679c shift_limit \u662f\u5355\u4e2a float \uff0c\u5219\u8303\u56f4\u4e3a\uff08 -shift_limit \uff0c shift_limit \uff09\u3002\u9ed8 \u8ba4\u503c\uff1a\uff08 -0.05 \uff0c 0.05 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 GridDistortion(num_steps=5, distort_limit=0.3, interpolation=1,border_mode=4, value=None, mask_value=None, p=0.5) :\u7f51\u683c\u5931\u771f num_steps \u6bcf\u4fa7\u7f51\u683c\u5355\u5143\u7684\u8ba1\u6570 distort_limit \u626d\u66f2\u6781\u9650 , \u5982\u679c\u626d\u66f2\u6781\u9650\u662f\u4e00\u4e2a\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u5c06\u662f\uff08 -warte \u6781\u9650\uff0c warte \u6781\u9650\uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.03 \uff0c 0.03 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 ElasticTransform \uff08 alpha = 1 \uff0c sigma = 50 \uff0c alpha_affine = 50 \uff0c interpola-tion = 1 \uff0c border_mode = 4 \uff0c value = None \uff0c mask_value = None \uff0c approximate= False \uff0c p = 0.5 \uff09 :\u5f39\u6027\u53d8\u6362\uff0c\u4f7f\u5f97\u56fe\u50cf\u6709\u70b9Q\u5f39 alpha \u6d6e\u70b9\u6570 sigma \u9ad8\u65af\u6ee4\u6ce2\u5668\u53c2\u6570 alpha_affine \u963f\u5c14\u6cd5\u4eff\u5c04\uff08\u6d6e\u70b9\uff09 \u2013 \u8303\u56f4\u4e3a\uff08 - \u963f\u5c14\u6cd5\u4eff\u5c04\uff0c\u963f\u5c14\u6cd5\u4eff\u5c04\uff09 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 approximate \u8fd1\u4f3c\uff08\u5e03\u5c14\uff09 \u2013 \u662f\u5426\u5e73\u6ed1\u5177\u6709\u56fa\u5b9a\u6838\u5927\u5c0f\u7684\u7f6e\u6362\u8d34\u56fe\u3002\u542f\u7528\u6b64\u9009\u9879\u53ef\u4f7f \u5927\u56fe\u50cf\u7684\u901f\u5ea6\u63d0\u9ad8\u7ea6 2 \u500d\u3002 p \u4ee3\u8868\u6982\u7387 RandomGridShuffle(grid=(3, 3) \uff0c p=1.0) : \u968f\u673a\u7f51\u683c\u6d17\u724c,\u7c7b\u4f3c\u64ce\u5929\u67f1\u53d8\u8eab\u91cd\u7ec4 grid \u56fe\u50cf\u88ab\u5212\u5206\u4e3a\u591a\u5c11\u7f51\u683c\u3002 p \u4ee3\u8868\u6982\u7387 , RandomBrightness(limit=0.2, p=0.5) :\u968f\u673a\u4eae\u5ea6 limi t \u7528\u4e8e\u66f4\u6539\u4eae\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -limit \uff0c limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.2 \uff0c 0.2 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 RandomContrast(limit=0.2, p=0.5) : \u968f\u673a\u5bf9\u6bd4\u5ea6 limit \u7528\u4e8e\u66f4\u6539\u5bf9\u6bd4\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -limit \uff0c limit \uff09\u3002 \u9ed8\u8ba4\u503c\uff1a\uff08 -0.2 \uff0c 0.2 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 RandomBrightnessContrast \uff08 brightness_limit = 0.2 \uff0c contrast_limit =0.2 \uff0c brightness_by_max = None \uff0c p = 0.5 ) : \u968f\u673a\u66f4\u6539\u8f93\u5165\u56fe\u50cf\u7684\u4eae\u5ea6\u548c\u5bf9\u6bd4\u5ea6\u3002 brightness_limit \u7528\u4e8e\u66f4\u6539\u4eae\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -limit \uff0c limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.2,0.2) contrast_limit \u7528\u4e8e\u66f4\u6539\u5bf9\u6bd4\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -limit \uff0c limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.2 \uff0c 0.2 \uff09\u3002 brightness_by_max \u5982\u679c\u4e3a\u771f\uff0c\u5219\u6309\u56fe\u50cf\u6570\u636e\u7c7b\u578b\u6700\u5927\u503c\u8c03\u6574\u5bf9\u6bd4\u5ea6\uff0c\u5426\u5219\u6309\u56fe \u50cf\u5e73\u5747\u503c\u8c03\u6574\u5bf9\u6bd4\u5ea6\u3002 p \u4ee3\u8868\u6982\u7387 , RandomGamma(gamma_limit=(80, 120) \uff0c p=0.5) : \u968f\u673a Gamma \u53d8\u6362,\u5c06\u6f02\u767d(\u76f8\u673a\u8fc7\u66dd)\u7684\u56fe\u7247\u6216\u8005\u8fc7\u6697(\u66dd\u5149\u4e0d\u8db3)\u7684\u56fe\u7247\uff0c\u8fdb\u884c\u4fee\u6b63 gamma_limit \u4ee3\u8868\u4f3d\u9a6c\u6781\u9650\uff0c\u9ed8\u8ba4\u503c\uff08 80 \uff0c 120 \uff09 p \u4ee3\u8868\u6982\u7387 HueSaturationValue(hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=20,p=0.5) : \u8272\u8c03\u9971\u548c\u5ea6\u503c\uff0c\u8fd9\u4e2a\u633a\u5e38\u7528\u7684 hue_shift_limit=20 \u8272\u8c03\u504f\u79fb\u9650\u5236 , \u66f4\u6539\u8272\u8c03\u7684\u8303\u56f4\u3002\u5982\u679c hue_shift_limit \u662f\u5355 \u4e2a int \uff0c\u5219\u8303\u56f4\u4e3a\uff08 -hue_shift_limit \uff0c hue_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 sat_shift_limit=30 \u9971\u548c\u5ea6\uff0c\u6539\u53d8\u9971\u548c\u5ea6\u7684\u8303\u56f4\u3002\u5982\u679c sat_shift_limit \u662f\u4e00\u4e2a\u6574 \u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -sat_shift_limit \uff0c sat_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -30 \uff0c 30 \uff09\u3002 val_shift_limit \u503c\u53d8\u5316\uff0c\u66f4\u6539\u503c\u7684\u8303\u56f4\u3002\u5982\u679c val_shift_limit \u662f\u5355\u4e2a int \uff0c\u5219\u8303\u56f4 \u5c06\u662f\uff08 -val_shift_limit \uff0c val_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 CLAHE(clip_limit=4.0, tile_grid_size=(8, 8), p=0.5) \u5bf9\u6bd4\u5ea6\u53d7\u9650\u81ea\u9002\u5e94\u76f4\u65b9\u56fe\u5747\u8861 clip_limit \u5bf9\u6bd4\u5ea6\u9650\u5236\u7684\u9608\u503c\u4e0a\u9650\u3002\u5982\u679c clip_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4\u4e3a\uff08 1 \uff0cclip_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 1 \uff0c 4 \uff09 tile_grid_size \u5e73\u94fa\u7f51\u683c\u5927\u5c0f((int,int))-- \u7528\u4e8e\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u7f51\u683c\u5927\u5c0f\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 8 \uff0c 8 \uff09 p \u4ee3\u8868\u6982\u7387 PadIfNeeded(min_height=1024, min_width=1024, border_mode=4,value=None, mask_value=None, p=1.0) :\u586b\u5145\u56fe\u50cf\uff0c\u5176\u5b9e\u5c31\u662f\u5f71\u5206\u8eab\uff0c\u7136\u540e\uff0c\u5404\u79cd\u89d2\u5ea6 min_height \u6700\u5c0f\u9ad8\u5ea6\uff08 int \uff09 \u2013 \u6700\u5c0f\u7ed3\u679c\u56fe\u50cf\u9ad8\u5ea6 min_width \u6700\u5c0f\u5bbd\u5ea6\uff08 int \uff09 \u2013 \u6700\u5c0f\u7ed3\u679c\u56fe\u50cf\u5bbd\u5ea6 border_mode OpenCV \u8fb9\u6846\u6a21\u5f0f value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_ \u5e38\u91cf\uff0c\u5219\u586b\u5145\u503c\u3002 mask_value \uff08 int \uff0c float \uff0c\uff08 mask_value \uff09 \u2013int \u5217\u8868\uff0c lisftoffloat \uff09\uff1a\u5982\u679c border_mode \u4e3a cv2.border_ \u5e38\u91cf\uff0c\u5219\u4e3a mask \u586b\u5145\u503c\u3002 p \u4ee3\u8868\u6982\u7387 RGBShift(r_shift_limit=20, g_shift_limit=20, b_shift_limit=20,p=0.5) : \u968f\u673a\u5e73\u79fb R \u3001 G \u3001 B \u901a\u9053\u503c\u3002 r_shift_limit \u66f4\u6539\u7ea2\u8272\u901a\u9053\u503c\u7684\u8303\u56f4\u3002\u5982\u679c r_shift_limit \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -r_shift_limit \uff0c r_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 g_shift_limit \u66f4\u6539\u7eff\u8272\u901a\u9053\u503c\u7684\u8303\u56f4\u3002\u5982\u679c r_shift_limit \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -r_shift_limit \uff0c r_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 b_shift_limit \u66f4\u6539\u84dd\u8272\u901a\u9053\u503c\u7684\u8303\u56f4\u3002\u5982\u679c r_shift_limit \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -r_shift_limit \uff0c r_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 InvertImg( p=0.5) : \u53cd\u8f6c\u56fe\u50cf\uff08\u901a\u8fc7\u7528 255 \u51cf\u53bb\u50cf\u7d20\u503c\u6765\u53cd\u8f6c\u8f93\u5165\u56fe\u50cf\uff09 p \u4ee3\u8868\u6982\u7387 ChannelShuffle(p=0.5) :\u901a\u9053\u6d17\u724c\uff08\u968f\u673a\u6539\u53d8 RGB \u4e09\u901a\u9053\u7684\u987a\u5e8f\uff09 p \u4ee3\u8868\u6982\u7387 ToGray(p=0.5) : \u53d8\u7070 p \u4ee3\u8868\u6982\u7387 ToSepia(p=0.5) : \u81f3\u6df1\u8910\u8272 p \u4ee3\u8868\u6982\u7387 JpegCompression(quality_lower=99,quality_upper=100,p=0.5) \u538b\u7f29 ( \u51cf\u5c11\u56fe\u50cf\u7684 Jpeg \u538b\u7f29 ) quality_lower \u8d28\u91cf\u7684\u4e0b\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 quality_upper \u8d28\u91cf\u7684\u4e0a\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 p \u4ee3\u8868\u6982\u7387 ImageCompression(quality_lower=99,quality_upper=100,compression_type=<ImageCompressionType.JPEG:0>, p=0.5) :\u6210\u50cf\u538b\u7f29 quality_lower \u8d28\u91cf\u7684\u4e0b\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 quality_upper \u8d28\u91cf\u7684\u4e0a\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 compression_type \u538b\u7f29\u7c7b\u578b\uff08\u6210\u50cf\u538b\u7f29\u7c7b\u578b\uff09 - \u5e94\u4e3a\u6210\u50cf\u538b\u7f29\u7c7b\u578b .jpeg \u6216\u6210\u50cf\u538b \u7f29\u7c7b\u578b .webp \u3002 Default \uff1a imagepressiontype.jpeg( \u53ef\u4ee5\u4e0d\u9700\u8981\u8be5\u53c2\u6570 ) p \u4ee3\u8868\u6982\u7387 Cutout(num_holes=8, max_h_size=8, max_w_size=8, fill_value=0,p=0.5) : \u5728\u56fe\u50cf\u4e2d\u751f\u6210\u6b63\u65b9\u5f62\u533a\u57df num_holes \u8981\u5f52\u96f6\u7684\u533a\u57df\u6570 max_h_size \u5b54\u7684\u6700\u5927\u9ad8\u5ea6 max_w_size \u5b54\u7684\u6700\u5927\u5bbd\u5ea6 fill_value \u5220\u9664\u50cf\u7d20\u7684\u503c p \u4ee3\u8868\u6982\u7387 CoarseDropout(max_holes=8, max_height=8, max_width=8, min_holes=None,min_height=None, min_width=None, fill_value=0, p=0.5) : \u5728\u56fe\u50cf\u4e0a\u751f\u6210\u77e9\u5f62\u533a\u57df max_holes \u8981\u5f52\u96f6\u7684\u6700\u5927\u533a\u57df\u6570 max_height \u5b54\u7684\u6700\u5927\u9ad8\u5ea6 max_width \u5b54\u7684\u6700\u5927\u5bbd\u5ea6 min_holes \u8981\u5f52\u96f6\u7684\u6700\u5c0f\u533a\u57df\u6570\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219 \u201c \u6700\u5c0f\u5b54 \u201d \u8bbe\u7f6e\u4e3a \u201c \u6700\u5927\u5b54 \u201d \u3002\u9ed8\u8ba4\u503c\uff1a \u65e0\u3002 min_height \u5b54\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219 \u201c \u6700\u5c0f\u9ad8\u5ea6 \u201d \u8bbe\u7f6e\u4e3a \u201c \u6700\u5927\u9ad8 \u5ea6 \u201d \u3002\u9ed8\u8ba4\u503c\uff1a\u65e0\u3002 min_width \u5b54\u7684\u6700\u5c0f\u5bbd\u5ea6\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219 \u201c \u6700\u5c0f\u9ad8\u5ea6 \u201d \u8bbe\u7f6e\u4e3a \u201c \u6700\u5927\u5bbd\u5ea6 \u201d \u3002 \u9ed8\u8ba4\u503c\uff1a\u65e0\u3002 fill_value \u5220\u9664\u50cf\u7d20\u7684\u503c p \u4ee3\u8868\u6982\u7387 ToFloat(max_value=None, p=1.0) : \u56fe\u50cf\u9664\u4e00\u4e2a\u503c\uff0c\u9ed8\u8ba4\u503c\u4e3a\u56fe\u50cf\u6570\u636e\u7c7b\u578b\u7684\u6700\u5927\u503c\u3002\u5c06\u50cf\u7d20\u503c\u9664\u4ee5 max_value \u5f97\u5230\u4e00\u4e2a float32 \u8f93\u51fa\u6570\u7ec4\uff0c\u5176\u4e2d\u6240\u6709\u503c\u90fd\u5728 [0 \uff0c 1.0] \u8303\u56f4\u5185\u3002\u5982\u679cmax_value \u4e3a None \uff0c\u5219\u53d8\u6362\u5c06\u5c1d\u8bd5\u901a\u8fc7\u68c0\u67e5\u8f93\u5165\u56fe\u50cf\u7684\u6570\u636e\u7c7b\u578b\u6765\u63a8\u65ad\u6700\u5927\u503c\u3002 max_value \u53ef\u80fd\u7684\u6700\u5927\u8f93\u5165\u503c\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0 p \u4ee3\u8868\u6982\u7387 FromFloat(dtype='uint16', max_value=None, p=1.0) : \u5c06\u50cf\u7d20\u503c\u9664\u4ee5 max_value\u5f97\u5230\u4e00\u4e2a float32 \u8f93\u51fa\u6570\u7ec4\uff0c\u5176\u4e2d\u6240\u6709\u503c\u90fd\u5728 [0 \uff0c 1.0] \u8303\u56f4\u5185\u3002 max_value \u6700\u5927\u8f93\u5165\u503c\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0 p \u4ee3\u8868\u6982\u7387 Solarize(threshold=128, p=0.5) \u53cd\u8f6c\u9ad8\u4e8e\u9608\u503c\u7684\u6240\u6709\u50cf\u7d20\u503c threshold \u9608\u503c\uff0c\u9608\u503c\u662f\u5355\u4e2a\u503c\uff0c\u8303\u56f4\u5c06\u662f [ \u9608\u503c\uff0c\u9608\u503c ] \u9ed8\u8ba4\u503c\uff08\u5982\u679c\uff09 \u2013128 p \u4ee3\u8868\u6982\u7387 2.2 \u7b80\u5355\u7528\u6cd5 \u00b6 \u4e0b\u9762\u662f\u4f8b\u5b50:\u56fe\u50cf\u5206\u7c7b/\u76ee\u6807\u68c0\u6d4b/\u56fe\u50cf\u5206\u5272\u7b49\uff0c\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u76f8\u5173\u7528\u6cd5 All in one showcase notebook - showcase.ipynb Classification - example.ipynb Object detection - example_bboxes.ipynb Non-8-bit images - example_16_bit_tiff.ipynb Image segmentation example_kaggle_salt.ipynb Keypoints example_keypoints.ipynb Custom targets example_multi_target.ipynb Weather transforms example_weather_transforms.ipynb Serialization serialization.ipynb Replay/Deterministic mode replay.ipynb \u7ec4\u5408\u7c7b Compose \u4ecb\u7ecd transforms \uff1a\u8f6c\u6362\u7c7b\u7684\u6570\u7ec4\uff0clist\u7c7b\u578b\uff0c\u8fd9\u4e2a\u662f\u6700\u4e3b\u8981\u7684\uff0c\u6ce8\u610f\u662f\u4ee5list\u4f20\u5165\u7684 bbox_params \uff1a\u7528\u4e8e bounding boxes \u8f6c\u6362\u7684\u53c2\u6570\uff0cBboxPoarams \u7c7b\u578b keypoint_params \uff1a\u7528\u4e8e keypoints \u8f6c\u6362\u7684\u53c2\u6570\uff0c KeypointParams \u7c7b\u578b additional_targets \uff1akey\u65b0target \u540d\u5b57\uff0cvalue \u4e3a\u65e7 target \u540d\u5b57\u7684 dict\uff0c\u5982 {'image2': 'image'}\uff0cdict \u7c7b\u578b p \uff1a\u4f7f\u7528\u8fd9\u4e9b\u53d8\u6362\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a 1.0 \u968f\u673a\u9009\u62e9\u7c7b OneOf \u4ecb\u7ecd transforms \uff1a\u8f6c\u6362\u7c7b\u7684\u5217\u8868\uff0c\u6ce8\u610f\uff0c\u662flist p \uff1a\u4f7f\u8f6c\u6362\u65b9\u6cd5\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a 0.5 # API\u7684\u5e38\u89c1\u7528\u6cd5 # 1. \u5355\u72ec\u4f7f\u7528 image = cv2 . imread ( './imgs/robot-running-super-tease.jpg' ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image1 = HorizontalFlip ( p = 1 )( image = image )[ 'image' ] # \u5982\u679c\u4f60\u60f3\u770b\u5355\u4e2aapi\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u67e5\u770b # 2. \u7ec4\u5408\u4f7f\u7528\uff0cCompose\u7c7b image3 = Compose ([ CLAHE (), # \u5bf9\u6bd4\u5ea6\u53d7\u9650\u76f4\u65b9\u56fe\u5747\u8861 RandomRotate90 (), # \u968f\u673a\u65cb\u8f6c 90\u00b0 Transpose (), # \u8f6c\u7f6e # \u968f\u673a\u4eff\u5c04\u53d8\u6362 ShiftScaleRotate ( shift_limit = 0.0625 , scale_limit = 0.50 , rotate_limit = 45 , p =. 75 ), Blur ( blur_limit = 3 ), # \u6a21\u7cca OpticalDistortion (), # \u5149\u5b66\u7578\u53d8 GridDistortion (), # \u7f51\u683c\u7578\u53d8 HueSaturationValue () # \u968f\u673a\u6539\u53d8\u56fe\u7247\u7684 HUE\u3001\u9971\u548c\u5ea6\u548c\u503c ], p = 1.0 )( image = image )[ 'image' ] # 3. \u7ec4\u5408\u548c\u968f\u673a\u9009\u62e9\uff0cCompose+OneOf\u7c7b\u522b image4 = Compose ([ RandomRotate90 (), Flip (), Transpose (), OneOf ([ # \u9ad8\u65af\u566a\u70b9 IAAAdditiveGaussianNoise (), GaussNoise (), ], p = 0.2 ), OneOf ([ # \u6a21\u7cca\u76f8\u5173\u64cd\u4f5c MotionBlur ( p =. 2 ), MedianBlur ( blur_limit = 3 , p = 0.1 ), Blur ( blur_limit = 3 , p = 0.1 ), ], p = 0.2 ), ShiftScaleRotate ( shift_limit = 0.0625 , scale_limit = 0.2 , rotate_limit = 45 , p = 0.2 ), OneOf ([ # \u7578\u53d8\u76f8\u5173\u64cd\u4f5c OpticalDistortion ( p = 0.3 ), GridDistortion ( p =. 1 ), IAAPiecewiseAffine ( p = 0.3 ), ], p = 0.2 ), OneOf ([ # \u9510\u5316\u3001\u6d6e\u96d5\u7b49\u64cd\u4f5c CLAHE ( clip_limit = 2 ), IAASharpen (), IAAEmboss (), RandomBrightnessContrast (), ], p = 0.3 ), HueSaturationValue ( p = 0.3 ), ], p = 1.0 )( image = image )[ 'image' ] plt . figure ( figsize = ( 10 , 10 )) plt . imshow ( image4 ) 3.\u6570\u636e\u589e\u5f3a\u5e93Augmentor\u4ecb\u7ecd \u00b6 3.1 \u5e38\u89c1API\u4e2d\u6587\u4ecb\u7ecd \u00b6 p = Augmentor.Pipeline(path) # path \u4ee3\u8868\u56fe\u50cf\u6587\u4ef6\u5939\u5730\u5740 3.1.1 \u65cb\u8f6c p.rotate90(probabilty=1) \u5b9e\u73b0\u56fe\u50cf\u65cb\u8f6c 90 \u5ea6\u3002 p.rotate180(probability=1) \u5b9e\u73b0\u56fe\u50cf\u65cb\u8f6c 180 \u5ea6\u3002 p.rotate270(probability=1) \u5b9e\u73b0\u56fe\u50cf\u65cb\u8f6c 270 \u5ea6\u3002 p.rotate_random_90(probability=1) \u5b9e\u73b0\u56fe\u50cf\u968f\u673a\u65cb\u8f6c 90 \u5ea6 p.rotate_random_180(probability=1) \u5b9e\u73b0\u56fe\u50cf\u968f\u673a\u65cb\u8f6c 180 \u5ea6 p.rotate_random_270(probability=1) \u5b9e\u73b0\u56fe\u50cf\u968f\u673a\u65cb\u8f6c 270 \u5ea6 probabilty \u4ee3\u8868\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.rotate(probability=1,max_left_rotation=20, max_right_rotation=20) :\u968f\u673a\u5de6\u53f3\u65cb\u8f6c\u5e76\u526a\u5207 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 max_lift_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u5de6\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 max_right_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u53f3\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 p.rotate_without_crop(probability=1,max_left_rotation=20,max_right_rotation=20,expand=False) :\u65cb\u8f6c\u56fe\u50cf\u800c\u4e0d\u81ea\u52a8\u526a\u5207\uff0c\u8fd9\u5176\u5b9e\u6ca1\u6709\u4e0a\u4e2a\u5e93\u597d\uff0c\u56e0\u4e3a\u6ca1\u6709\u63d2\u503c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 max_lift_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u5de6\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 max_right_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u53f3\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 expand \u4ee3\u8868\u63a7\u5236\u662f\u5426\u653e\u5927\u56fe\u50cf\u4ee5\u5305\u542b\u65b0\u7684\u65cb\u8f6c\u56fe\u50cf\uff0c\u6216\u8005\u662f\u5426\u4fdd\u5b58\u56fe\u50cf\u5927\u5c0f\u9ed8\u8ba4\u4e3afalse 3.1.2 \u955c\u50cf p.flip_top_bottom(probability=1) \u4e0a\u4e0b\u7ffb\u8f6c p.flip_left_right(probability=1) \u5de6\u53f3\u7ffb\u8f6c p.flip_random(probability=1) \u968f\u673a\u7ffb\u8f6c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 3.1.3 \u5f39\u6027\u626d\u66f2 p.random_distortion(probability=1, grid_width=10, grid_height=10, magnitude=10) \u968f\u673a\u5931\u771f\uff0c\u5176\u5b9e\u5c31\u662f\u7578\u53d8\uff0c\u7c7b\u4f3c\u590f\u5b63\u7684\u70ed\u6d6a\u6ce2\u4e00\u6837 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 grid_width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u5bbd\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 grid_height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u9ad8\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u632f\u5e45\uff0c\u8303\u56f4\uff08 1 \uff0c 10 \uff09 p.gaussian_distortion(probability=1, grid_width=10, grid_height=10, magnitude=10, corner=\u201cbell\u201d,method=\u201cin\u201d,mex=0.5,mey=0.5, sdx=0.05, sdy=0.05) :\u968f\u673a\u5931\u771f probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 grid_width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u5bbd\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 grid_height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u9ad8\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u632f\u5e45\uff0c\u8303\u56f4\uff08 1 \uff0c 10 \uff09 corner \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u9700\u8981\u626d\u66f2\u56fe\u7247\u7684\u54ea\u4e2a\u89d2\uff0c\u53d6\u503c \u201cbel \uff08\u5e94\u7528\u7684\u5706\u5f62\u66f2\u9762\uff09 \u201d \u3001 \u201cul \uff08\u5750\u4e0a\uff09 \u201d \u3001 \u201cur \uff08\u53f3\u4e0a\uff09 \u201d \u3001 \u201cdl \uff08\u5de6\u4e0b\uff09 \u201d \u3001 \u201cdr \uff08\u53f3\u4e0b\uff09 \u201d method \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u53ef\u80fd\u53d1\u751f\u7684\u503c\uff0c\u53d6\u503c in \uff08\u6240\u9009\u89d2\u5e94\u7528\u6700\u5927\u5e45\u5ea6\uff09\u3001 out \u4e0e in \u76f8 \u53cd mex \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 mey \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 sdx \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 sdy \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 3.1.4 \u653e\u5927\u7f29\u5c0f p.zoom(probability=1, min_factor=1.1, max_factor=1.5) \u4fdd\u6301\u5176\u5927\u5c0f\u653e\u5927\u56fe\u50cf\u3002 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5c0f\u503c\u3002 max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u503c\u3002 p.zoom_random(probability=1, percentage_area=0.7, randomise_percentage_area=True) \u968f\u673a\u7f29\u653e probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u9700\u8981\u7f29\u653e\u7684\u6bd4\u4f8b\u3002 randomise_precentage \u8bbe\u7f6e\u4e3a True \uff0c\u53ef\u4ee5\u968f\u673a\u7f29\u653e p.scale(probability=1, scale_factor=1.4) \u7f29\u5c0f\u6216\u653e\u5927\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 scale_factor \u4ee3\u8868\u6bd4\u4f8b\u7f29\u653e\u7684\u56e0\u5b50 \u6548\u679c\uff1a\u539f\u56fe\u5c3a\u5ea6\uff1a 400 X 300 \u64cd\u4f5c\u540e\u56fe\u50cf\u5c3a\u5ea6\uff1a 560 X 420 \u3002 p.resize(probability=1, width=200, height=150, resample_filter=\"BICUBIC\") \u8c03\u6574\u5927\u5c0f probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u5bbd\u5ea6\u3002 height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u9ad8\u5ea6\u3002 resample_filter \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u91cd\u91c7\u6837\u8fc7\u6ee4\u5668\u3002\uff08\u6ce8\uff1a\u4f7f\u7528\u7684\u91cd\u91c7\u6837\u8fc7\u6ee4\u5668\u3002\u5fc5\u987b\u662f\u53cc\u4e09\u6b21\u3001\u53cc\u7ebf\u6027\u3001\u53cd\u522b\u540d\u6216\u6700\u8fd1\u503c\u4e4b\u4e00\uff09 \u6548\u679c\uff1a\u539f\u56fe\u50cf\uff1a 400X 300 \u64cd\u4f5c\u540e\u56fe\u50cf\u50cf\u7d20\uff1a 200X 150 \u3002 3.1.5 \u88c1\u526a\u64cd\u4f5c p.crop_by_size(probability=1, width=260, height=160, center=True) \u6309\u5927\u5c0f\u5b9a\u4e49\u88c1\u526a probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u5bbd\u5ea6\u3002 height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u9ad8\u5ea6\u3002 center \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u5982\u679c\u4e3a\u771f\uff0c\u5219\u4ece\u56fe\u50cf\u4e2d\u5fc3\u88c1\u526a\uff0c\u5426\u5219\u5728\u56fe\u50cf\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u88c1\u526a\uff0c\u4fdd\u6301\u6307\u5b9a\u7684\u5c3a\u5bf8 p.crop_centre(probability=1, percentage_area=0.5, randomise_percentage_area=False) \u56fe\u50cf\u7684\u4e2d\u5fc3\u88c1\u526a\u4e3a\u56fe\u50cf\u9762\u79ef\u7684\u767e\u5206\u6bd4 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u56fe\u50cf\u9762\u79ef\u767e\u5206\u6bd4\u3002 randomise_percentage_area=False \u4ee3\u8868\u5982\u679c\u4e3a\u771f\uff0c\u5c06\u4f7f\u7528\u9762\u79ef\u767e\u5206\u6bd4\u4f5c\u4e3a\u4e0a\u9650\uff0c\u5e76\u4ece 0 \u5230\u9762\u79ef\u767e\u5206\u6bd4\u4e4b\u95f4\u968f\u673a\u5316\u4f5c\u7269\u3002\u5982\u679c\u4e3a\u5047\uff0c\u5c06\u56fe\u50cf\u7684\u4e2d\u5fc3\u88c1\u526a\u4e3a\u56fe\u50cf\u9762\u79ef\u7684\u767e\u5206\u6bd4\u3002 p.crop_random(probability=1, percentage_area=0.5, randomise_percentage_area=False) \u6839\u636e\u8981\u8fd4\u56de\u7684\u767e\u5206\u6bd4\u533a\u57df\u88c1\u526a\u56fe\u50cf\u7684\u968f\u673a\u533a\u57df probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u56fe\u50cf\u9762\u79ef\u767e\u5206\u6bd4\u3002 randomise_percentage_area=False \u4ee3\u8868\u5982\u679c\u4e3a\u771f\uff0c\u5c06\u4f7f\u7528\u9762\u79ef\u767e\u5206\u6bd4\u4f5c\u4e3a\u4e0a\u9650\uff0c\u5e76\u4ece 0 \u5230\u9762\u79ef\u767e\u5206\u6bd4\u4e4b\u95f4\u968f\u673a\u5316\u4f5c\u7269\u3002\u5982\u679c\u4e3a\u5047\uff0c\u6839\u636e\u8981\u8fd4\u56de\u7684\u767e\u5206\u6bd4\u533a\u57df\u88c1\u526a\u56fe\u50cf\u7684\u968f\u673a\u533a\u57df\u3002 p.shear(probability=1, max_shear_left=20, max_shear_right=25) \u6307\u5b9a\u7684\u5ea6\u6570\u526a\u5207\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 max_shear_left \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u5de6\u526a\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 max_shear_right \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u53f3\u526a\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 3.1.6 \u503e\u659c\u626d\u66f2 p.skew_left_right(probability=1, magnitude=1) \u5de6\u53f3\u503e\u659c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6 p.skew_top_bottom(probability=1, magnitude=1) \u4e0a\u4e0b\u503e\u659c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6 p.skew_tilt(probability=1, magnitude=1) \u968f\u673a\u6570\u91cf\u5411\u524d\u3001\u5411\u540e\u3001\u5411\u5de6\u6216\u5411\u53f3\u503e\u659c\u968f\u673a\u65b9\u5411\u6765\u626d\u66f2\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6\u3002 p.skew_corner(probability=1, magnitude=1) \u968f\u673a\u5411\u4e00\u4e2a\u89d2\u503e\u659c\u4e00\u4e2a\u968f\u673a\u5927\u5c0f probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6\u3002 p.skew(probability=1, magnitude=1) \u968f\u673a\u65b9\u5411\uff08\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u6216 8 \u4e2a\u89d2\u65b9\u5411\u4e4b\u4e00\uff09\u626d\u66f2\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6\u3002 p.histogram_equalisation(probability=1.0) \u76f4\u65b9\u56fe\u5747\u8861 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.greyscale(probability=1) \u56fe\u50cf\u8f6c\u6362\u4e3a\u7070\u5ea6\u3002 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.black_anp.d_white(probability=1, threshold=128) \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u9ed1\u767d probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 threshold \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u9608\u503c\uff0c\u8303\u56f4\uff08 0 \uff0c 255 \uff09 p.invert(probability=1) \u53cd\u8f6c\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.random_brightness(probability=1,min_factor=1,max_factor=2) \u968f\u673a\u4eae\u5ea6 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u4eae\u5ea6\u6700\u5c0f\u503c\u3002 max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u4eae\u5ea6\u6700\u5927\u503c p.random_color(probability=1,min_factor=20,max_factor=25) \u968f\u673a\u989c\u8272 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u989c\u8272\u6700\u5c0f\u503c max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u989c\u8272\u6700\u5927\u503c p.random_contrast(probability=1,min_factor=20,max_factor=25) \u968f\u673a\u6539\u53d8\u56fe\u50cf\u5bf9\u6bd4\u5ea6 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u6700\u5c0f\u503c\u3002 max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u6700\u5927\u503c\u3002 p.random_erasing(probability=1, rectangle_area=0.2) \u968f\u673a\u64e6\u9664 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u56fe\u50cf\u9762\u79ef\u767e\u5206\u6bd4\uff0c\u8303\u56f4\uff08 0.1,1 \uff09","title":"\u56fe\u50cf\u589e\u5f3a\u5e93"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#0","text":"\u6b22\u8fce\u6765\u5230\u300a\u5de5\u5177\u4f7f\u7528\u7bc7\u300b\u3002\u5728\u8fd9\u4e2a\u4e13\u680f\u91cc\uff0c\u8fd8\u662f\u672c\u7740\u5c0f\u9a6c\u7684\u4e00\u8d2f\u7684\u539f\u5219\uff0c\u4e13\u6ce8\u4e8e\u8ba9\u5927\u5bb6\u80fd\u591f\u771f\u6b63\u7684\u7528\u8d77\u6765\u7684\u5de5\u5177\uff0c\u6240\u4ee5\u6211\u603b\u7ed3\u4e66\u5199\u7684\u6587\u7ae0\u4e5f\u662f\u6bd4\u8f83\u8be6\u5c3d\u7684\u3002\u535a\u4e3b\u7684\u5fae\u4fe1\u516c\u4f17\u53f7\u662f\u300c \u5c0f\u9a6cCV \u300d\uff0c\u6b22\u8fce\u5927\u5bb6\u591a\u591a\u5173\u6ce8\uff0c\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u5fae\u4fe1\u516c\u4f17\u53f7\uff0c\u5341\u5206\u611f\u8c22\uff01","title":"0.\u5e8f\u8a00"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#1","text":"","title":"1.\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#11","text":"albumentations\u82f1\u6587\u7248\u5b98\u65b9\u6559\u7a0b albumentations\u7684github\u4f7f\u7528\u6559\u7a0b Augmentor\u7684github\u4f7f\u7528\u6559\u7a0b","title":"1.1 \u6559\u7a0b\u94fe\u63a5\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#12","text":"pip install albumentations pip install Augmentor","title":"1.2 \u5b89\u88c5\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#13","text":"import ambumentations import Augmentor","title":"1.3 \u5bfc\u5165\u7b80\u4ecb"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#2-albumentations","text":"","title":"2. \u6570\u636e\u589e\u5f3a\u5e93albumentations`\u4ecb\u7ecd"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#21-api","text":"Blur(blur_limit = 7,p = 0.5) \uff1a\u56fe\u50cf\u5747\u503c\u5e73\u6ed1\u6ee4\u6ce2\uff0c\u4f7f\u56fe\u50cf\u53d8\u6a21\u7cca p \u4ee3\u8868\u6982\u7387 blur_limit \u4ee3\u8868\u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u5185\u6838\u5927\u5c0f\uff0c\u9ed8\u8ba4\u503c [3 \uff0c 7] MotionBlur(blur_limit=7, p=0.5) : \u8fd0\u52a8\u6a21\u7cca blur_limit \u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u5185\u6838\u5927\u5c0f\u3002\u5e94\u8be5\u5728 [3 \uff0c inf] \u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 3 \uff0c 7 \uff09 p \u4ee3\u8868\u6982\u7387 MedianBlur(blur_limit=7, p=0.5) : \u4e2d\u5fc3\u6a21\u7cca blur_limit \u7528\u4e8e\u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u5b54\u5f84\u7ebf\u6027\u5927\u5c0f\u3002\u5fc5\u987b\u662f\u5947\u6570\u5e76\u4e14\u5728 [3 \uff0c inf] \u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 3 \uff0c 7 \uff09 p \u4ee3\u8868\u6982\u7387 GlassBlur(sigma=0.7,max_delta=4,iterations=2,mode='fast',p=0.5) :\u73bb\u7483\u6a21\u7cca\uff0c\u6bdb\u8fb9\u6548\u679c sigma \u9ad8\u65af\u6838\u7684\u6807\u51c6\u5dee max_delta \u4ea4\u6362\u50cf\u7d20\u4e4b\u95f4\u7684\u8ddd\u79bb iterations \u91cd\u590d\u6b21\u6570\uff0c\u9ed8\u8ba4\u503c\uff1a 2 mode - \u8ba1\u7b97\u6a21\u5f0f\uff1a\u5feb\u901f\u6216\u7cbe\u786e\u3002\u9ed8\u8ba4\u503c\uff1a \u201c \u5feb\u901f \u201d \u3002 p \u4ee3\u8868\u6982\u7387 GaussianBlur(blur_limit=7, p=0.5) :\u9ad8\u65af\u6a21\u7cca blur_limit \u7528\u4e8e\u6a21\u7cca\u8f93\u5165\u56fe\u50cf\u7684\u6700\u5927\u9ad8\u65af\u6838\u5927\u5c0f\u3002\u5fc5\u987b\u4e3a\u96f6\u6216\u5947\u6570\u4e14\u5728 [3 \uff0c inf] \u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 3 \uff0c 7 \uff09 p \u4ee3\u8868\u6982\u7387 VerticalFlip(p=0.5) \uff1a\u6c34\u5e73\u7ffb\u8f6c p \u4ee3\u8868\u6982\u7387 HorizontalFlip(p = 0.5) : \u5782\u76f4\u7ffb\u8f6c p \u4ee3\u8868\u6982\u7387 Flip(p = 0.5 ) :\u540c\u65f6\u8fdb\u884c\u6c34\u5e73\u548c\u5782\u76f4\u64cd\u4f5c\uff0c\u7c7b\u4f3c\u6e56\u4e2d\u770b\u5df1\u3002 p \u4ee3\u8868\u6982\u7387 Normalize(mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225),max_pixel_value=255.0, always_apply=False, p=1.0) : \u5f52\u4e00\u5316 mean \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5747\u503c std \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6807\u51c6\u5dee p \u4ee3\u8868\u6982\u7387 Transpose(p=0.5) : \u8f6c\u7f6e\uff0c\u5c06\u56fe\u50cf\u7684\u884c\u548c\u5217\u8fdb\u884c\u4e92\u6362,\u56fe\u7247\u4e2d\u663e\u793a\u5c31\u662f\u9006\u65f6\u9488\u65cb\u8f6c90\u5ea6\uff0c\u4e0d\u5e38\u7528\u3002 p \u4ee3\u8868\u6982\u7387 CenterCrop(height, width, p=1.0) : \u968f\u673a\u4e2d\u5fc3\u88c1\u526a height \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 width \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 p \u4ee3\u8868\u6982\u7387 RandomCrop(height, width, p=1.0) :\u968f\u673a\u88c1\u526a height \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 width \u4ee3\u8868\u968f\u673a\u88c1\u526a\u9ad8\u5ea6\uff0c\u5fc5\u987b\u662f\u6574\u6570 p \u4ee3\u8868\u6982\u7387 Crop(x_min=0, y_min=0, x_max=1024, y_max=1024, p=1.0) \u88c1\u526a\u56fe\u50cf\uff0c\u5176\u4e0eRandomCrop \u7684\u533a\u522b\u662f\u53ef\u4ee5\u6307\u5b9a\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\uff0c\u800c RandomCrop \u53ea\u80fd\u6307\u5b9a\u5bbd\u9ad8 x_min \u5de6\u4e0a\u89d2\u7684\u6700\u5c0f x \u5750\u6807 y_min \u5de6\u4e0a\u89d2\u7684\u6700\u5c0f y \u5750\u6807 x_max \u53f3\u4e0b\u89d2\u7684\u6700\u5927 x \u5750\u6807 y_max \u53f3\u4e0b\u89d2\u7684\u6700\u5927 y \u5750\u6807 p \u4ee3\u8868\u6982\u7387 CropNonEmptyMaskIfExists(height, width, ignore_values=None, ignore_channels=None, p=1.0) \u5e26\u6709\u906e\u7f69\u7684\u88c1\u526a\u533a\u57df\u5982\u679c\u906e\u7f69\u4e3a\u975e\u7a7a\uff0c\u5219\u8fdb\u884c\u968f\u673a\u88c1\u526a height \u88c1\u526a\u7684\u5782\u76f4\u5927\u5c0f width \u88c1\u526a\u7684\u6c34\u5e73\u5927\u5c0f ignore_values \u63a9\u7801\u4e2d\u8981\u5ffd\u7565\u7684\u503c\uff0c\u603b\u662f\u5ffd\u7565 0 \u4e2a\u503c ignore_channels \u8981\u5728\u63a9\u7801\u4e2d\u5ffd\u7565\u7684\u901a\u9053 p \u4ee3\u8868\u6982\u7387 RandomScale(scale_limit = 0.1,interpolation = 1,p = 0.5 ) \u968f\u673a\u7f29\u653e\u56fe\u50cf\u5927\u5c0f\u3002 scale_limit \u6bd4\u4f8b\u9650\u5236 , \u6bd4\u4f8b\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c scale_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4\u4e3a \uff08 1-scale_limit \uff0c 1+scale_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 0.9 \uff0c 1.1 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 LongestMaxSize(max_size = 1024,interpolation = 1,p = 1 ) :\u7f29\u653e\u56fe\u50cf\uff0c\u4f7f\u6700\u5927\u8fb9\u7b49\u4e8e max_size \uff0c\u4fdd\u6301\u521d\u59cb\u56fe\u50cf\u7684\u7eb5\u6a2a\u6bd4 max_size \u8f6c\u6362\u540e\u56fe\u50cf\u7684\u6700\u5927\u5927\u5c0f interpolation \u63d2\u503c\u65b9\u6cd5\u3002\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 SmallestMaxSize(max_size = 1024,interpolation = 1,p = 1) : \u7f29\u653e\u56fe\u50cf\uff0c\u4f7f\u6700\u5c0f\u8fb9\u7b49\u4e8e max_size \uff0c\u4fdd\u6301\u521d\u59cb\u56fe\u50cf\u7684\u7eb5\u6a2a\u6bd4 max_size \u8f6c\u6362\u540e\u56fe\u50cf\u7684\u6700\u5927\u5927\u5c0f interpolation \u63d2\u503c\u65b9\u6cd5\u3002\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 Resize(height,width,interpolation = 1,p = 1 ) :\u5c06\u8f93\u5165\u56fe\u50cf\u8c03\u6574\u4e3a\u7ed9\u5b9a\u7684\u9ad8\u5ea6\u548c\u5bbd\u5ea6 height \u8f93\u51fa\u6240\u9700\u7684\u9ad8\u5ea6 width \u8f93\u51fa\u6240\u9700\u7684\u5bbd\u5ea6 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 RandomSizedCrop(min_max_height=(int,int),height,width,w2h_ratio =1.0,interpolation = 1,p = 1.0 ) \u968f\u673a\u88c1\u526a\u56fe\u50cf\u5e76\u7f29\u653e\u5230\u56fa\u5b9a\u5927\u5c0f\u3002 min_max_height \u88c1\u526a\u5927\u5c0f\u9650\u5236 height \u8f93\u51fa\u88c1\u526a\u548c\u8c03\u6574\u5927\u5c0f\u540e\u7684\u9ad8\u5ea6 width \u8f93\u51fa\u88c1\u526a\u548c\u8c03\u6574\u5927\u5c0f\u540e\u7684\u5bbd\u5ea6 w2h_ratio \u88c1\u526a\u7684\u957f\u5bbd\u6bd4 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR p \u4ee3\u8868\u6982\u7387 RandomCropNearBBox(max_part_shift = 0.3,p = 1.0 ) :\u968f\u673a\u5e73\u79fb bbox \u7684 x \uff0c y\u5750\u6807\u5e76\u4ece\u56fe\u50cf\u4e2d\u88c1\u526a max_part_shift \u6700\u5927\u504f\u79fb\u90e8\u5206\uff0c\u6d6e\u70b9\u503c\u5728\uff08 0.0 \uff0c 1.0 \uff09\u8303\u56f4\u5185\u3002\u9ed8\u8ba4\u503c 0.3 p \u4ee3\u8868\u6982\u7387 GaussNoise(var_limit=(10.0, 50.0), mean=None, p=0.5) : \u9ad8\u65af\u566a\u58f0\uff0c\u5176\u5b9e\u8fd9\u4e2a\u771f\u7684\u597d\u5417\uff1f\u4e00\u822c\u800c\u8a00\u5b66\u7684\u7279\u5f81\u5206\u5e03\u5c31\u63a5\u8fd1\u4e8e\u9ad8\u65af\uff0c\u5982\u679c\u52a0\u5165\u8fd9\u4e2a\u566a\u58f0\uff0c\u662f\u4e0d\u662f\u4f1a\u6709\u5f71\u54cd\uff1f var_limit \u566a\u58f0\u7684\u65b9\u5dee\u8303\u56f4\u3002\u5982\u679c var_limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 0 \uff0c var_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 10.0 \uff0c 50.0 \uff09 mean \u566a\u58f0\u7684\u5e73\u5747\u503c\u3002\u9ed8\u8ba4\u503c\uff1a 0 p \u4ee3\u8868\u6982\u7387 ISONoise(color_shift=(0.01, 0.05), intensity=(0.1, 0.5), p=0.5) :\u65bd\u52a0\u6444\u50cf\u5934\u4f20\u611f\u5668\u566a\u97f3 color_shift \u989c\u8272\u504f\u79fb\uff08\u6d6e\u52a8\uff0c\u6d6e\u52a8\uff09 \u2013 \u8272\u76f8\u53d8\u5316\u7684\u53d8\u5316\u8303\u56f4\u3002\u5728 HLS \u989c\u8272\u7a7a\u95f4\u4e2d\u6d4b\u91cf\u4e3a 360 \u5ea6\u8272\u8c03\u89d2\u5ea6\u7684\u5206\u6570\u3002 intensity \u5f3a\u5ea6\uff08\uff08 float \uff0c float \uff09 \u2013 \u63a7\u5236\u989c\u8272\u548c\u4eae\u5ea6\u566a\u58f0\u5f3a\u5ea6\u7684\u4e58\u6cd5\u56e0\u5b50\u3002 p \u4ee3\u8868\u6982\u7387 RandomRotate90(p=0.5) : \u968f\u673a\u65cb\u8f6c 90 \u5ea6\u96f6\u6b21\u6216\u591a\u6b21\u3002 p \u4ee3\u8868\u6982\u7387 Rotate(limit=90, interpolation=1, border_mode=4, value=None,mask_value=None,p=0.5) : \u65cb\u8f6c,\u8fd9\u4e2a\u65cb\u8f6c\u5f88\u5389\u5bb3\uff0c\u7a7a\u767d\u90e8\u5206\u4f1a\u63d2\u503c\u8865\u5145\u3002 limit \u5982\u679c limit \u662f\uff08 int,int \uff09\u4ece\u4e2d\u968f\u673a\u9009\u62e9\uff0c\u5982\u679c\u662f int \uff0c\u5219\u4ece\uff08 -int \uff0c int \uff09\u968f\u673a\u9009\u62e9\uff0c \u9ed8\u8ba4\u503c\uff08 -90 \uff0c 90 \uff09 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 ShiftScaleRotate(shift_limit=0.0625, scale_limit=0.1, rotate_limit=45,interpolation=1, border_mode=4, value=None, mask_value=None,p=0.5) :\u968f\u673a\u5e73\u79fb\u3001\u7f29\u653e\u3001\u65cb\u8f6c\u56fe\u7247\u3002 shift_limit \u9ad8\u5ea6\u548c\u5bbd\u5ea6\u7684\u79fb\u4f4d\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c shift_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4 \u4e3a\uff08 -shift_limit \uff0c shift_limit \uff09\u3002\u4e0a\u4e0b\u9650\u7684\u7edd\u5bf9\u503c\u5e94\u5728\u8303\u56f4 [0 \uff0c 1] \u5185\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.0625 \uff0c 0.0625 \uff09\u3002 scale_limit \u6bd4\u4f8b\u9650\u5236\u3002\u5982\u679c scale_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -scale_limit \uff0c scale_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.1 \uff0c 0.1 \uff09\u3002 rotate_limitint \u503c\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -rotate_limit \uff0c rotate_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -45 \uff0c 45 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valuein t \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 OpticalDistortion(distort_limit=0.05, shift_limit=0.05, interpolation=1, border_mode=4, value=None, mask_value=None, p=0.5) :\u5149\u5b66\u7578\u53d8\uff0c\u5f88\u6709\u7528\u7684\u4e00\u4e2a\uff0c\u7528\u4e8e\u6587\u5b57\u8bc6\u522b\u6548\u679c\u66f4\u4f73 distort_limit \u626d\u66f2\u6781\u9650 , \u5982\u679c\u626d\u66f2\u6781\u9650\u662f\u4e00\u4e2a\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u5c06\u662f\uff08 -warte \u6781 \u9650\uff0c warte \u6781\u9650\uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.05 \uff0c 0.05 \uff09\u3002 shift_limit \u5982\u679c shift_limit \u662f\u5355\u4e2a float \uff0c\u5219\u8303\u56f4\u4e3a\uff08 -shift_limit \uff0c shift_limit \uff09\u3002\u9ed8 \u8ba4\u503c\uff1a\uff08 -0.05 \uff0c 0.05 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 GridDistortion(num_steps=5, distort_limit=0.3, interpolation=1,border_mode=4, value=None, mask_value=None, p=0.5) :\u7f51\u683c\u5931\u771f num_steps \u6bcf\u4fa7\u7f51\u683c\u5355\u5143\u7684\u8ba1\u6570 distort_limit \u626d\u66f2\u6781\u9650 , \u5982\u679c\u626d\u66f2\u6781\u9650\u662f\u4e00\u4e2a\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u5c06\u662f\uff08 -warte \u6781\u9650\uff0c warte \u6781\u9650\uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.03 \uff0c 0.03 \uff09\u3002 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 p \u4ee3\u8868\u6982\u7387 ElasticTransform \uff08 alpha = 1 \uff0c sigma = 50 \uff0c alpha_affine = 50 \uff0c interpola-tion = 1 \uff0c border_mode = 4 \uff0c value = None \uff0c mask_value = None \uff0c approximate= False \uff0c p = 0.5 \uff09 :\u5f39\u6027\u53d8\u6362\uff0c\u4f7f\u5f97\u56fe\u50cf\u6709\u70b9Q\u5f39 alpha \u6d6e\u70b9\u6570 sigma \u9ad8\u65af\u6ee4\u6ce2\u5668\u53c2\u6570 alpha_affine \u963f\u5c14\u6cd5\u4eff\u5c04\uff08\u6d6e\u70b9\uff09 \u2013 \u8303\u56f4\u4e3a\uff08 - \u963f\u5c14\u6cd5\u4eff\u5c04\uff0c\u963f\u5c14\u6cd5\u4eff\u5c04\uff09 interpolation \u6307\u5b9a\u63d2\u503c\u7b97\u6cd5\u7684\u6807\u5fd7\uff08 cv2.INTER_NEAREST \u3001 cv2.INTER_LINEAR \u3001 cv2.INTER_CUBIC \u3001 cv2.INTER_AREA \u3001 cv2.INTER_LANCZOS4 \uff09\uff0c\u9ed8\u8ba4\u503c\uff1a cv2.INTER_LINEAR border_mode \u7528\u4e8e\u6307\u5b9a\u50cf\u7d20\u5916\u63a8\u65b9\u6cd5\u7684\u6807\u5fd7 (cv2.BORDER_ \u5e38\u91cf\u3001 cv2.BORDER_REPLICATE \u3001 cv2.BORDER_REFLECT \u3001 cv2.BORDER_WRAP \u3001 cv2.BORDER_REFLECT_101 \u4e4b\u4e00 ) \u3002\u9ed8\u8ba4\u503c\uff1a cv2.BORDER_REFLECT_101 value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_CONSTANT \uff0c\u5219\u586b\u5145\u503c\u3002 mask_valueint \u5217\u8868\uff0c float \u5217\u8868\uff1a\u5982\u679c border_mode \u4e3a cv2 \uff0c\u5219\u586b\u5145\u503c\u3002 border_ \u5e38 \u91cf\u5e94\u7528\u4e8e\u63a9\u7801\u3002 approximate \u8fd1\u4f3c\uff08\u5e03\u5c14\uff09 \u2013 \u662f\u5426\u5e73\u6ed1\u5177\u6709\u56fa\u5b9a\u6838\u5927\u5c0f\u7684\u7f6e\u6362\u8d34\u56fe\u3002\u542f\u7528\u6b64\u9009\u9879\u53ef\u4f7f \u5927\u56fe\u50cf\u7684\u901f\u5ea6\u63d0\u9ad8\u7ea6 2 \u500d\u3002 p \u4ee3\u8868\u6982\u7387 RandomGridShuffle(grid=(3, 3) \uff0c p=1.0) : \u968f\u673a\u7f51\u683c\u6d17\u724c,\u7c7b\u4f3c\u64ce\u5929\u67f1\u53d8\u8eab\u91cd\u7ec4 grid \u56fe\u50cf\u88ab\u5212\u5206\u4e3a\u591a\u5c11\u7f51\u683c\u3002 p \u4ee3\u8868\u6982\u7387 , RandomBrightness(limit=0.2, p=0.5) :\u968f\u673a\u4eae\u5ea6 limi t \u7528\u4e8e\u66f4\u6539\u4eae\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -limit \uff0c limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.2 \uff0c 0.2 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 RandomContrast(limit=0.2, p=0.5) : \u968f\u673a\u5bf9\u6bd4\u5ea6 limit \u7528\u4e8e\u66f4\u6539\u5bf9\u6bd4\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -limit \uff0c limit \uff09\u3002 \u9ed8\u8ba4\u503c\uff1a\uff08 -0.2 \uff0c 0.2 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 RandomBrightnessContrast \uff08 brightness_limit = 0.2 \uff0c contrast_limit =0.2 \uff0c brightness_by_max = None \uff0c p = 0.5 ) : \u968f\u673a\u66f4\u6539\u8f93\u5165\u56fe\u50cf\u7684\u4eae\u5ea6\u548c\u5bf9\u6bd4\u5ea6\u3002 brightness_limit \u7528\u4e8e\u66f4\u6539\u4eae\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -limit \uff0c limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.2,0.2) contrast_limit \u7528\u4e8e\u66f4\u6539\u5bf9\u6bd4\u5ea6\u7684\u56e0\u5b50\u8303\u56f4\u3002\u5982\u679c limit \u662f\u5355\u6d6e\u70b9\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -limit \uff0c limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -0.2 \uff0c 0.2 \uff09\u3002 brightness_by_max \u5982\u679c\u4e3a\u771f\uff0c\u5219\u6309\u56fe\u50cf\u6570\u636e\u7c7b\u578b\u6700\u5927\u503c\u8c03\u6574\u5bf9\u6bd4\u5ea6\uff0c\u5426\u5219\u6309\u56fe \u50cf\u5e73\u5747\u503c\u8c03\u6574\u5bf9\u6bd4\u5ea6\u3002 p \u4ee3\u8868\u6982\u7387 , RandomGamma(gamma_limit=(80, 120) \uff0c p=0.5) : \u968f\u673a Gamma \u53d8\u6362,\u5c06\u6f02\u767d(\u76f8\u673a\u8fc7\u66dd)\u7684\u56fe\u7247\u6216\u8005\u8fc7\u6697(\u66dd\u5149\u4e0d\u8db3)\u7684\u56fe\u7247\uff0c\u8fdb\u884c\u4fee\u6b63 gamma_limit \u4ee3\u8868\u4f3d\u9a6c\u6781\u9650\uff0c\u9ed8\u8ba4\u503c\uff08 80 \uff0c 120 \uff09 p \u4ee3\u8868\u6982\u7387 HueSaturationValue(hue_shift_limit=20, sat_shift_limit=30, val_shift_limit=20,p=0.5) : \u8272\u8c03\u9971\u548c\u5ea6\u503c\uff0c\u8fd9\u4e2a\u633a\u5e38\u7528\u7684 hue_shift_limit=20 \u8272\u8c03\u504f\u79fb\u9650\u5236 , \u66f4\u6539\u8272\u8c03\u7684\u8303\u56f4\u3002\u5982\u679c hue_shift_limit \u662f\u5355 \u4e2a int \uff0c\u5219\u8303\u56f4\u4e3a\uff08 -hue_shift_limit \uff0c hue_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 sat_shift_limit=30 \u9971\u548c\u5ea6\uff0c\u6539\u53d8\u9971\u548c\u5ea6\u7684\u8303\u56f4\u3002\u5982\u679c sat_shift_limit \u662f\u4e00\u4e2a\u6574 \u6570\uff0c\u5219\u8303\u56f4\u4e3a\uff08 -sat_shift_limit \uff0c sat_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -30 \uff0c 30 \uff09\u3002 val_shift_limit \u503c\u53d8\u5316\uff0c\u66f4\u6539\u503c\u7684\u8303\u56f4\u3002\u5982\u679c val_shift_limit \u662f\u5355\u4e2a int \uff0c\u5219\u8303\u56f4 \u5c06\u662f\uff08 -val_shift_limit \uff0c val_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 CLAHE(clip_limit=4.0, tile_grid_size=(8, 8), p=0.5) \u5bf9\u6bd4\u5ea6\u53d7\u9650\u81ea\u9002\u5e94\u76f4\u65b9\u56fe\u5747\u8861 clip_limit \u5bf9\u6bd4\u5ea6\u9650\u5236\u7684\u9608\u503c\u4e0a\u9650\u3002\u5982\u679c clip_limit \u662f\u5355\u4e2a\u6d6e\u70b9\u503c\uff0c\u5219\u8303\u56f4\u4e3a\uff08 1 \uff0cclip_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 1 \uff0c 4 \uff09 tile_grid_size \u5e73\u94fa\u7f51\u683c\u5927\u5c0f((int,int))-- \u7528\u4e8e\u76f4\u65b9\u56fe\u5747\u8861\u5316\u7684\u7f51\u683c\u5927\u5c0f\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 8 \uff0c 8 \uff09 p \u4ee3\u8868\u6982\u7387 PadIfNeeded(min_height=1024, min_width=1024, border_mode=4,value=None, mask_value=None, p=1.0) :\u586b\u5145\u56fe\u50cf\uff0c\u5176\u5b9e\u5c31\u662f\u5f71\u5206\u8eab\uff0c\u7136\u540e\uff0c\u5404\u79cd\u89d2\u5ea6 min_height \u6700\u5c0f\u9ad8\u5ea6\uff08 int \uff09 \u2013 \u6700\u5c0f\u7ed3\u679c\u56fe\u50cf\u9ad8\u5ea6 min_width \u6700\u5c0f\u5bbd\u5ea6\uff08 int \uff09 \u2013 \u6700\u5c0f\u7ed3\u679c\u56fe\u50cf\u5bbd\u5ea6 border_mode OpenCV \u8fb9\u6846\u6a21\u5f0f value \u503c\uff0c\u5982\u679c border_mode \u4e3a cv2.border_ \u5e38\u91cf\uff0c\u5219\u586b\u5145\u503c\u3002 mask_value \uff08 int \uff0c float \uff0c\uff08 mask_value \uff09 \u2013int \u5217\u8868\uff0c lisftoffloat \uff09\uff1a\u5982\u679c border_mode \u4e3a cv2.border_ \u5e38\u91cf\uff0c\u5219\u4e3a mask \u586b\u5145\u503c\u3002 p \u4ee3\u8868\u6982\u7387 RGBShift(r_shift_limit=20, g_shift_limit=20, b_shift_limit=20,p=0.5) : \u968f\u673a\u5e73\u79fb R \u3001 G \u3001 B \u901a\u9053\u503c\u3002 r_shift_limit \u66f4\u6539\u7ea2\u8272\u901a\u9053\u503c\u7684\u8303\u56f4\u3002\u5982\u679c r_shift_limit \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -r_shift_limit \uff0c r_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 g_shift_limit \u66f4\u6539\u7eff\u8272\u901a\u9053\u503c\u7684\u8303\u56f4\u3002\u5982\u679c r_shift_limit \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -r_shift_limit \uff0c r_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 b_shift_limit \u66f4\u6539\u84dd\u8272\u901a\u9053\u503c\u7684\u8303\u56f4\u3002\u5982\u679c r_shift_limit \u662f\u4e00\u4e2a\u6574\u6570\uff0c\u5219\u8303\u56f4\u4e3a \uff08 -r_shift_limit \uff0c r_shift_limit \uff09\u3002\u9ed8\u8ba4\u503c\uff1a\uff08 -20 \uff0c 20 \uff09\u3002 p \u4ee3\u8868\u6982\u7387 InvertImg( p=0.5) : \u53cd\u8f6c\u56fe\u50cf\uff08\u901a\u8fc7\u7528 255 \u51cf\u53bb\u50cf\u7d20\u503c\u6765\u53cd\u8f6c\u8f93\u5165\u56fe\u50cf\uff09 p \u4ee3\u8868\u6982\u7387 ChannelShuffle(p=0.5) :\u901a\u9053\u6d17\u724c\uff08\u968f\u673a\u6539\u53d8 RGB \u4e09\u901a\u9053\u7684\u987a\u5e8f\uff09 p \u4ee3\u8868\u6982\u7387 ToGray(p=0.5) : \u53d8\u7070 p \u4ee3\u8868\u6982\u7387 ToSepia(p=0.5) : \u81f3\u6df1\u8910\u8272 p \u4ee3\u8868\u6982\u7387 JpegCompression(quality_lower=99,quality_upper=100,p=0.5) \u538b\u7f29 ( \u51cf\u5c11\u56fe\u50cf\u7684 Jpeg \u538b\u7f29 ) quality_lower \u8d28\u91cf\u7684\u4e0b\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 quality_upper \u8d28\u91cf\u7684\u4e0a\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 p \u4ee3\u8868\u6982\u7387 ImageCompression(quality_lower=99,quality_upper=100,compression_type=<ImageCompressionType.JPEG:0>, p=0.5) :\u6210\u50cf\u538b\u7f29 quality_lower \u8d28\u91cf\u7684\u4e0b\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 quality_upper \u8d28\u91cf\u7684\u4e0a\u9650\u3002\u5e94\u8be5\u5728 [0 \uff0c 100] \u8303\u56f4 compression_type \u538b\u7f29\u7c7b\u578b\uff08\u6210\u50cf\u538b\u7f29\u7c7b\u578b\uff09 - \u5e94\u4e3a\u6210\u50cf\u538b\u7f29\u7c7b\u578b .jpeg \u6216\u6210\u50cf\u538b \u7f29\u7c7b\u578b .webp \u3002 Default \uff1a imagepressiontype.jpeg( \u53ef\u4ee5\u4e0d\u9700\u8981\u8be5\u53c2\u6570 ) p \u4ee3\u8868\u6982\u7387 Cutout(num_holes=8, max_h_size=8, max_w_size=8, fill_value=0,p=0.5) : \u5728\u56fe\u50cf\u4e2d\u751f\u6210\u6b63\u65b9\u5f62\u533a\u57df num_holes \u8981\u5f52\u96f6\u7684\u533a\u57df\u6570 max_h_size \u5b54\u7684\u6700\u5927\u9ad8\u5ea6 max_w_size \u5b54\u7684\u6700\u5927\u5bbd\u5ea6 fill_value \u5220\u9664\u50cf\u7d20\u7684\u503c p \u4ee3\u8868\u6982\u7387 CoarseDropout(max_holes=8, max_height=8, max_width=8, min_holes=None,min_height=None, min_width=None, fill_value=0, p=0.5) : \u5728\u56fe\u50cf\u4e0a\u751f\u6210\u77e9\u5f62\u533a\u57df max_holes \u8981\u5f52\u96f6\u7684\u6700\u5927\u533a\u57df\u6570 max_height \u5b54\u7684\u6700\u5927\u9ad8\u5ea6 max_width \u5b54\u7684\u6700\u5927\u5bbd\u5ea6 min_holes \u8981\u5f52\u96f6\u7684\u6700\u5c0f\u533a\u57df\u6570\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219 \u201c \u6700\u5c0f\u5b54 \u201d \u8bbe\u7f6e\u4e3a \u201c \u6700\u5927\u5b54 \u201d \u3002\u9ed8\u8ba4\u503c\uff1a \u65e0\u3002 min_height \u5b54\u7684\u6700\u5c0f\u9ad8\u5ea6\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219 \u201c \u6700\u5c0f\u9ad8\u5ea6 \u201d \u8bbe\u7f6e\u4e3a \u201c \u6700\u5927\u9ad8 \u5ea6 \u201d \u3002\u9ed8\u8ba4\u503c\uff1a\u65e0\u3002 min_width \u5b54\u7684\u6700\u5c0f\u5bbd\u5ea6\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0\u3002\u5982\u679c\u6ca1\u6709\uff0c\u5219 \u201c \u6700\u5c0f\u9ad8\u5ea6 \u201d \u8bbe\u7f6e\u4e3a \u201c \u6700\u5927\u5bbd\u5ea6 \u201d \u3002 \u9ed8\u8ba4\u503c\uff1a\u65e0\u3002 fill_value \u5220\u9664\u50cf\u7d20\u7684\u503c p \u4ee3\u8868\u6982\u7387 ToFloat(max_value=None, p=1.0) : \u56fe\u50cf\u9664\u4e00\u4e2a\u503c\uff0c\u9ed8\u8ba4\u503c\u4e3a\u56fe\u50cf\u6570\u636e\u7c7b\u578b\u7684\u6700\u5927\u503c\u3002\u5c06\u50cf\u7d20\u503c\u9664\u4ee5 max_value \u5f97\u5230\u4e00\u4e2a float32 \u8f93\u51fa\u6570\u7ec4\uff0c\u5176\u4e2d\u6240\u6709\u503c\u90fd\u5728 [0 \uff0c 1.0] \u8303\u56f4\u5185\u3002\u5982\u679cmax_value \u4e3a None \uff0c\u5219\u53d8\u6362\u5c06\u5c1d\u8bd5\u901a\u8fc7\u68c0\u67e5\u8f93\u5165\u56fe\u50cf\u7684\u6570\u636e\u7c7b\u578b\u6765\u63a8\u65ad\u6700\u5927\u503c\u3002 max_value \u53ef\u80fd\u7684\u6700\u5927\u8f93\u5165\u503c\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0 p \u4ee3\u8868\u6982\u7387 FromFloat(dtype='uint16', max_value=None, p=1.0) : \u5c06\u50cf\u7d20\u503c\u9664\u4ee5 max_value\u5f97\u5230\u4e00\u4e2a float32 \u8f93\u51fa\u6570\u7ec4\uff0c\u5176\u4e2d\u6240\u6709\u503c\u90fd\u5728 [0 \uff0c 1.0] \u8303\u56f4\u5185\u3002 max_value \u6700\u5927\u8f93\u5165\u503c\u3002\u9ed8\u8ba4\u503c\uff1a\u65e0 p \u4ee3\u8868\u6982\u7387 Solarize(threshold=128, p=0.5) \u53cd\u8f6c\u9ad8\u4e8e\u9608\u503c\u7684\u6240\u6709\u50cf\u7d20\u503c threshold \u9608\u503c\uff0c\u9608\u503c\u662f\u5355\u4e2a\u503c\uff0c\u8303\u56f4\u5c06\u662f [ \u9608\u503c\uff0c\u9608\u503c ] \u9ed8\u8ba4\u503c\uff08\u5982\u679c\uff09 \u2013128 p \u4ee3\u8868\u6982\u7387","title":"2.1 \u5e38\u89c1API\u4e2d\u6587\u4ecb\u7ecd"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#22","text":"\u4e0b\u9762\u662f\u4f8b\u5b50:\u56fe\u50cf\u5206\u7c7b/\u76ee\u6807\u68c0\u6d4b/\u56fe\u50cf\u5206\u5272\u7b49\uff0c\u53ef\u4ee5\u81ea\u884c\u67e5\u770b\u76f8\u5173\u7528\u6cd5 All in one showcase notebook - showcase.ipynb Classification - example.ipynb Object detection - example_bboxes.ipynb Non-8-bit images - example_16_bit_tiff.ipynb Image segmentation example_kaggle_salt.ipynb Keypoints example_keypoints.ipynb Custom targets example_multi_target.ipynb Weather transforms example_weather_transforms.ipynb Serialization serialization.ipynb Replay/Deterministic mode replay.ipynb \u7ec4\u5408\u7c7b Compose \u4ecb\u7ecd transforms \uff1a\u8f6c\u6362\u7c7b\u7684\u6570\u7ec4\uff0clist\u7c7b\u578b\uff0c\u8fd9\u4e2a\u662f\u6700\u4e3b\u8981\u7684\uff0c\u6ce8\u610f\u662f\u4ee5list\u4f20\u5165\u7684 bbox_params \uff1a\u7528\u4e8e bounding boxes \u8f6c\u6362\u7684\u53c2\u6570\uff0cBboxPoarams \u7c7b\u578b keypoint_params \uff1a\u7528\u4e8e keypoints \u8f6c\u6362\u7684\u53c2\u6570\uff0c KeypointParams \u7c7b\u578b additional_targets \uff1akey\u65b0target \u540d\u5b57\uff0cvalue \u4e3a\u65e7 target \u540d\u5b57\u7684 dict\uff0c\u5982 {'image2': 'image'}\uff0cdict \u7c7b\u578b p \uff1a\u4f7f\u7528\u8fd9\u4e9b\u53d8\u6362\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a 1.0 \u968f\u673a\u9009\u62e9\u7c7b OneOf \u4ecb\u7ecd transforms \uff1a\u8f6c\u6362\u7c7b\u7684\u5217\u8868\uff0c\u6ce8\u610f\uff0c\u662flist p \uff1a\u4f7f\u8f6c\u6362\u65b9\u6cd5\u7684\u6982\u7387\uff0c\u9ed8\u8ba4\u503c\u4e3a 0.5 # API\u7684\u5e38\u89c1\u7528\u6cd5 # 1. \u5355\u72ec\u4f7f\u7528 image = cv2 . imread ( './imgs/robot-running-super-tease.jpg' ) image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2RGB ) image1 = HorizontalFlip ( p = 1 )( image = image )[ 'image' ] # \u5982\u679c\u4f60\u60f3\u770b\u5355\u4e2aapi\u7ed3\u679c\uff0c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u67e5\u770b # 2. \u7ec4\u5408\u4f7f\u7528\uff0cCompose\u7c7b image3 = Compose ([ CLAHE (), # \u5bf9\u6bd4\u5ea6\u53d7\u9650\u76f4\u65b9\u56fe\u5747\u8861 RandomRotate90 (), # \u968f\u673a\u65cb\u8f6c 90\u00b0 Transpose (), # \u8f6c\u7f6e # \u968f\u673a\u4eff\u5c04\u53d8\u6362 ShiftScaleRotate ( shift_limit = 0.0625 , scale_limit = 0.50 , rotate_limit = 45 , p =. 75 ), Blur ( blur_limit = 3 ), # \u6a21\u7cca OpticalDistortion (), # \u5149\u5b66\u7578\u53d8 GridDistortion (), # \u7f51\u683c\u7578\u53d8 HueSaturationValue () # \u968f\u673a\u6539\u53d8\u56fe\u7247\u7684 HUE\u3001\u9971\u548c\u5ea6\u548c\u503c ], p = 1.0 )( image = image )[ 'image' ] # 3. \u7ec4\u5408\u548c\u968f\u673a\u9009\u62e9\uff0cCompose+OneOf\u7c7b\u522b image4 = Compose ([ RandomRotate90 (), Flip (), Transpose (), OneOf ([ # \u9ad8\u65af\u566a\u70b9 IAAAdditiveGaussianNoise (), GaussNoise (), ], p = 0.2 ), OneOf ([ # \u6a21\u7cca\u76f8\u5173\u64cd\u4f5c MotionBlur ( p =. 2 ), MedianBlur ( blur_limit = 3 , p = 0.1 ), Blur ( blur_limit = 3 , p = 0.1 ), ], p = 0.2 ), ShiftScaleRotate ( shift_limit = 0.0625 , scale_limit = 0.2 , rotate_limit = 45 , p = 0.2 ), OneOf ([ # \u7578\u53d8\u76f8\u5173\u64cd\u4f5c OpticalDistortion ( p = 0.3 ), GridDistortion ( p =. 1 ), IAAPiecewiseAffine ( p = 0.3 ), ], p = 0.2 ), OneOf ([ # \u9510\u5316\u3001\u6d6e\u96d5\u7b49\u64cd\u4f5c CLAHE ( clip_limit = 2 ), IAASharpen (), IAAEmboss (), RandomBrightnessContrast (), ], p = 0.3 ), HueSaturationValue ( p = 0.3 ), ], p = 1.0 )( image = image )[ 'image' ] plt . figure ( figsize = ( 10 , 10 )) plt . imshow ( image4 )","title":"2.2 \u7b80\u5355\u7528\u6cd5"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#3augmentor","text":"","title":"3.\u6570\u636e\u589e\u5f3a\u5e93Augmentor\u4ecb\u7ecd"},{"location":"%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%BC%BA%E5%BA%93%28albumentations%2BAugmentor%29/#31-api","text":"p = Augmentor.Pipeline(path) # path \u4ee3\u8868\u56fe\u50cf\u6587\u4ef6\u5939\u5730\u5740 3.1.1 \u65cb\u8f6c p.rotate90(probabilty=1) \u5b9e\u73b0\u56fe\u50cf\u65cb\u8f6c 90 \u5ea6\u3002 p.rotate180(probability=1) \u5b9e\u73b0\u56fe\u50cf\u65cb\u8f6c 180 \u5ea6\u3002 p.rotate270(probability=1) \u5b9e\u73b0\u56fe\u50cf\u65cb\u8f6c 270 \u5ea6\u3002 p.rotate_random_90(probability=1) \u5b9e\u73b0\u56fe\u50cf\u968f\u673a\u65cb\u8f6c 90 \u5ea6 p.rotate_random_180(probability=1) \u5b9e\u73b0\u56fe\u50cf\u968f\u673a\u65cb\u8f6c 180 \u5ea6 p.rotate_random_270(probability=1) \u5b9e\u73b0\u56fe\u50cf\u968f\u673a\u65cb\u8f6c 270 \u5ea6 probabilty \u4ee3\u8868\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.rotate(probability=1,max_left_rotation=20, max_right_rotation=20) :\u968f\u673a\u5de6\u53f3\u65cb\u8f6c\u5e76\u526a\u5207 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 max_lift_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u5de6\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 max_right_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u53f3\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 p.rotate_without_crop(probability=1,max_left_rotation=20,max_right_rotation=20,expand=False) :\u65cb\u8f6c\u56fe\u50cf\u800c\u4e0d\u81ea\u52a8\u526a\u5207\uff0c\u8fd9\u5176\u5b9e\u6ca1\u6709\u4e0a\u4e2a\u5e93\u597d\uff0c\u56e0\u4e3a\u6ca1\u6709\u63d2\u503c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 max_lift_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u5de6\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 max_right_rotation \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u53f3\u65cb\u8f6c\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 expand \u4ee3\u8868\u63a7\u5236\u662f\u5426\u653e\u5927\u56fe\u50cf\u4ee5\u5305\u542b\u65b0\u7684\u65cb\u8f6c\u56fe\u50cf\uff0c\u6216\u8005\u662f\u5426\u4fdd\u5b58\u56fe\u50cf\u5927\u5c0f\u9ed8\u8ba4\u4e3afalse 3.1.2 \u955c\u50cf p.flip_top_bottom(probability=1) \u4e0a\u4e0b\u7ffb\u8f6c p.flip_left_right(probability=1) \u5de6\u53f3\u7ffb\u8f6c p.flip_random(probability=1) \u968f\u673a\u7ffb\u8f6c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 3.1.3 \u5f39\u6027\u626d\u66f2 p.random_distortion(probability=1, grid_width=10, grid_height=10, magnitude=10) \u968f\u673a\u5931\u771f\uff0c\u5176\u5b9e\u5c31\u662f\u7578\u53d8\uff0c\u7c7b\u4f3c\u590f\u5b63\u7684\u70ed\u6d6a\u6ce2\u4e00\u6837 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 grid_width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u5bbd\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 grid_height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u9ad8\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u632f\u5e45\uff0c\u8303\u56f4\uff08 1 \uff0c 10 \uff09 p.gaussian_distortion(probability=1, grid_width=10, grid_height=10, magnitude=10, corner=\u201cbell\u201d,method=\u201cin\u201d,mex=0.5,mey=0.5, sdx=0.05, sdy=0.05) :\u968f\u673a\u5931\u771f probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 grid_width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u5bbd\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 grid_height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7f51\u683c\u9ad8\u5ea6\uff0c\u8303\u56f4\uff08 2 \uff0c 10 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u632f\u5e45\uff0c\u8303\u56f4\uff08 1 \uff0c 10 \uff09 corner \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u9700\u8981\u626d\u66f2\u56fe\u7247\u7684\u54ea\u4e2a\u89d2\uff0c\u53d6\u503c \u201cbel \uff08\u5e94\u7528\u7684\u5706\u5f62\u66f2\u9762\uff09 \u201d \u3001 \u201cul \uff08\u5750\u4e0a\uff09 \u201d \u3001 \u201cur \uff08\u53f3\u4e0a\uff09 \u201d \u3001 \u201cdl \uff08\u5de6\u4e0b\uff09 \u201d \u3001 \u201cdr \uff08\u53f3\u4e0b\uff09 \u201d method \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u53ef\u80fd\u53d1\u751f\u7684\u503c\uff0c\u53d6\u503c in \uff08\u6240\u9009\u89d2\u5e94\u7528\u6700\u5927\u5e45\u5ea6\uff09\u3001 out \u4e0e in \u76f8 \u53cd mex \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 mey \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 sdx \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 sdy \u7528\u4e8e\u751f\u6210\u7c7b\u4f3c\u626d\u66f2\u7684\u4e09\u7ef4\u66f2\u9762\u3002\u66f2\u9762\u662f\u57fa\u4e8e\u6b63\u6001\u5206\u5e03\u7684\u3002 3.1.4 \u653e\u5927\u7f29\u5c0f p.zoom(probability=1, min_factor=1.1, max_factor=1.5) \u4fdd\u6301\u5176\u5927\u5c0f\u653e\u5927\u56fe\u50cf\u3002 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5c0f\u503c\u3002 max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u503c\u3002 p.zoom_random(probability=1, percentage_area=0.7, randomise_percentage_area=True) \u968f\u673a\u7f29\u653e probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u9700\u8981\u7f29\u653e\u7684\u6bd4\u4f8b\u3002 randomise_precentage \u8bbe\u7f6e\u4e3a True \uff0c\u53ef\u4ee5\u968f\u673a\u7f29\u653e p.scale(probability=1, scale_factor=1.4) \u7f29\u5c0f\u6216\u653e\u5927\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 scale_factor \u4ee3\u8868\u6bd4\u4f8b\u7f29\u653e\u7684\u56e0\u5b50 \u6548\u679c\uff1a\u539f\u56fe\u5c3a\u5ea6\uff1a 400 X 300 \u64cd\u4f5c\u540e\u56fe\u50cf\u5c3a\u5ea6\uff1a 560 X 420 \u3002 p.resize(probability=1, width=200, height=150, resample_filter=\"BICUBIC\") \u8c03\u6574\u5927\u5c0f probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u5bbd\u5ea6\u3002 height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u9ad8\u5ea6\u3002 resample_filter \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u91cd\u91c7\u6837\u8fc7\u6ee4\u5668\u3002\uff08\u6ce8\uff1a\u4f7f\u7528\u7684\u91cd\u91c7\u6837\u8fc7\u6ee4\u5668\u3002\u5fc5\u987b\u662f\u53cc\u4e09\u6b21\u3001\u53cc\u7ebf\u6027\u3001\u53cd\u522b\u540d\u6216\u6700\u8fd1\u503c\u4e4b\u4e00\uff09 \u6548\u679c\uff1a\u539f\u56fe\u50cf\uff1a 400X 300 \u64cd\u4f5c\u540e\u56fe\u50cf\u50cf\u7d20\uff1a 200X 150 \u3002 3.1.5 \u88c1\u526a\u64cd\u4f5c p.crop_by_size(probability=1, width=260, height=160, center=True) \u6309\u5927\u5c0f\u5b9a\u4e49\u88c1\u526a probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 width \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u5bbd\u5ea6\u3002 height \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u540e\u56fe\u50cf\u7684\u9ad8\u5ea6\u3002 center \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u5982\u679c\u4e3a\u771f\uff0c\u5219\u4ece\u56fe\u50cf\u4e2d\u5fc3\u88c1\u526a\uff0c\u5426\u5219\u5728\u56fe\u50cf\u5185\u7684\u4efb\u610f\u4f4d\u7f6e\u88c1\u526a\uff0c\u4fdd\u6301\u6307\u5b9a\u7684\u5c3a\u5bf8 p.crop_centre(probability=1, percentage_area=0.5, randomise_percentage_area=False) \u56fe\u50cf\u7684\u4e2d\u5fc3\u88c1\u526a\u4e3a\u56fe\u50cf\u9762\u79ef\u7684\u767e\u5206\u6bd4 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u56fe\u50cf\u9762\u79ef\u767e\u5206\u6bd4\u3002 randomise_percentage_area=False \u4ee3\u8868\u5982\u679c\u4e3a\u771f\uff0c\u5c06\u4f7f\u7528\u9762\u79ef\u767e\u5206\u6bd4\u4f5c\u4e3a\u4e0a\u9650\uff0c\u5e76\u4ece 0 \u5230\u9762\u79ef\u767e\u5206\u6bd4\u4e4b\u95f4\u968f\u673a\u5316\u4f5c\u7269\u3002\u5982\u679c\u4e3a\u5047\uff0c\u5c06\u56fe\u50cf\u7684\u4e2d\u5fc3\u88c1\u526a\u4e3a\u56fe\u50cf\u9762\u79ef\u7684\u767e\u5206\u6bd4\u3002 p.crop_random(probability=1, percentage_area=0.5, randomise_percentage_area=False) \u6839\u636e\u8981\u8fd4\u56de\u7684\u767e\u5206\u6bd4\u533a\u57df\u88c1\u526a\u56fe\u50cf\u7684\u968f\u673a\u533a\u57df probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u56fe\u50cf\u9762\u79ef\u767e\u5206\u6bd4\u3002 randomise_percentage_area=False \u4ee3\u8868\u5982\u679c\u4e3a\u771f\uff0c\u5c06\u4f7f\u7528\u9762\u79ef\u767e\u5206\u6bd4\u4f5c\u4e3a\u4e0a\u9650\uff0c\u5e76\u4ece 0 \u5230\u9762\u79ef\u767e\u5206\u6bd4\u4e4b\u95f4\u968f\u673a\u5316\u4f5c\u7269\u3002\u5982\u679c\u4e3a\u5047\uff0c\u6839\u636e\u8981\u8fd4\u56de\u7684\u767e\u5206\u6bd4\u533a\u57df\u88c1\u526a\u56fe\u50cf\u7684\u968f\u673a\u533a\u57df\u3002 p.shear(probability=1, max_shear_left=20, max_shear_right=25) \u6307\u5b9a\u7684\u5ea6\u6570\u526a\u5207\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 max_shear_left \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u5de6\u526a\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 max_shear_right \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6700\u5927\u53f3\u526a\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 25 \uff09 3.1.6 \u503e\u659c\u626d\u66f2 p.skew_left_right(probability=1, magnitude=1) \u5de6\u53f3\u503e\u659c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6 p.skew_top_bottom(probability=1, magnitude=1) \u4e0a\u4e0b\u503e\u659c probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6 p.skew_tilt(probability=1, magnitude=1) \u968f\u673a\u6570\u91cf\u5411\u524d\u3001\u5411\u540e\u3001\u5411\u5de6\u6216\u5411\u53f3\u503e\u659c\u968f\u673a\u65b9\u5411\u6765\u626d\u66f2\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6\u3002 p.skew_corner(probability=1, magnitude=1) \u968f\u673a\u5411\u4e00\u4e2a\u89d2\u503e\u659c\u4e00\u4e2a\u968f\u673a\u5927\u5c0f probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6\u3002 p.skew(probability=1, magnitude=1) \u968f\u673a\u65b9\u5411\uff08\u4ece\u5de6\u5230\u53f3\u3001\u4ece\u4e0a\u5230\u4e0b\u6216 8 \u4e2a\u89d2\u65b9\u5411\u4e4b\u4e00\uff09\u626d\u66f2\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 magnitude \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u5e45\u5ea6\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09\uff0c\u5176\u4e2d 1 \u4ee3\u8868 45 \u5ea6\u7684\u503e\u659c\u5ea6\u3002 p.histogram_equalisation(probability=1.0) \u76f4\u65b9\u56fe\u5747\u8861 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.greyscale(probability=1) \u56fe\u50cf\u8f6c\u6362\u4e3a\u7070\u5ea6\u3002 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.black_anp.d_white(probability=1, threshold=128) \u5c06\u56fe\u50cf\u8f6c\u6362\u4e3a\u9ed1\u767d probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 threshold \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u9608\u503c\uff0c\u8303\u56f4\uff08 0 \uff0c 255 \uff09 p.invert(probability=1) \u53cd\u8f6c\u56fe\u50cf probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 p.random_brightness(probability=1,min_factor=1,max_factor=2) \u968f\u673a\u4eae\u5ea6 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u4eae\u5ea6\u6700\u5c0f\u503c\u3002 max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u4eae\u5ea6\u6700\u5927\u503c p.random_color(probability=1,min_factor=20,max_factor=25) \u968f\u673a\u989c\u8272 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u989c\u8272\u6700\u5c0f\u503c max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u989c\u8272\u6700\u5927\u503c p.random_contrast(probability=1,min_factor=20,max_factor=25) \u968f\u673a\u6539\u53d8\u56fe\u50cf\u5bf9\u6bd4\u5ea6 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 min_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u6700\u5c0f\u503c\u3002 max_factor \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u56fe\u50cf\u5bf9\u6bd4\u5ea6\u6700\u5927\u503c\u3002 p.random_erasing(probability=1, rectangle_area=0.2) \u968f\u673a\u64e6\u9664 probability \u4ee3\u8868\u6267\u884c\u64cd\u4f5c\u7684\u6982\u7387\uff0c\u8303\u56f4\uff08 0 \uff0c 1 \uff09 percentage_area \u4ee3\u8868\u56fe\u50cf\u9762\u79ef\u767e\u5206\u6bd4\uff0c\u8303\u56f4\uff08 0.1,1 \uff09","title":"3.1 \u5e38\u89c1API\u4e2d\u6587\u4ecb\u7ecd"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/","text":"\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272 \u00b6 \u8bed\u4e49\u5206\u5272:\u628a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8d4b\u4e88 \u4e00\u4e2a \u7c7b\u522b\u6807\u7b7e \uff0c\u53ea\u80fd\u5224\u65ad\u7c7b\u522b\uff0c\u65e0\u6cd5\u533a\u5206\u4e2a\u4f53 \u5b9e\u4f8b\u5206\u5272\uff1a\u7c7b\u4f3c\u7269\u4f53\u68c0\u6d4b\uff0c\u4e0d\u9700\u8981\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u6807\u8bb0\uff0c\u5b83\u53ea\u9700\u8981\u627e\u5230\u611f\u5174\u8da3\u7269\u4f53\u7684\u8fb9\u7f18\u8f6e\u5ed3\u5c31\u884c \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u533a\u5206\u51fa\u5355\u4e2a\u4e2a\u4f53\u3002 \u5168\u666f\u5206\u5272:\u8bed\u4e49\u5206\u5272+\u5b9e\u4f8b\u5206\u5272 \uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u54ea\u4e2a\u50cf\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u4e2d\u7684\u54ea\u4e2a\u5b9e\u4f8b\u3002 \u611f\u53d7\u91ce \u00b6 \u6982\u62ec\u6765\u8bf4\u5c31\u662f\u7279\u5f81\u56fe\u4e0a\u7684\u70b9\u80fd\u770b\u5230\u539f\u59cb\u56fe\u50cf\u7684\u591a\u5927\u533a\u57df\u3002 3 \u4e2a 3x3 \u5377\u79ef\uff0c\u4fdd\u6301\u6ed1\u52a8\u7a97\u53e3\u6b65\u957f\u4e3a 1 ,\u5176\u611f\u53d7\u91ce\u548c 7x7 \u5377\u79ef\u4e00\u6837 **TridentNet**\u4e2d\u8bc1\u660e\u4e86\uff1a\u4e0d\u540c\u5c3a\u5ea6\u7269\u4f53\u7684\u68c0\u6d4b\u6027\u80fd\u548c dilation rate \u6b63\u76f8\u5173\uff01\u4e5f\u5c31\u662f\u8bf4\uff0c\u66f4\u5927\u7684 receptive field (\u611f\u53d7\u91ce)\u5bf9\u4e8e\u5927\u7269\u4f53\u6027\u80fd\u4f1a\u66f4\u597d\uff0c\u66f4\u5c0f\u7684 receptive field (\u611f\u53d7\u91ce)\u5bf9\u4e8e\u5c0f\u7269\u4f53\u66f4\u52a0\u53cb\u597d\u3002 \u5377\u79ef\u5c42 \u00b6 N = (W \u2212 F + 2P )/S+1 \u6c60\u5316\u5c42\u7684\u53cd\u5411\u4f20\u64ad\uff1a https://blog.csdn.net/Jason_yyz/article/details/80003271 \u7a7a\u6d1e\u5377\u79ef \u00b6 \u7a7a\u6d1e\u5377\u79ef:\u5728\u589e\u52a0\u611f\u53d7\u91ce\u7684\u540c\u65f6\u4fdd\u6301\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e0d\u53d8\uff0c\u4ece\u800c\u66ff\u4ee3\u6c60\u5316\u4e0e\u4e0a\u91c7\u6837\u64cd\u4f5c\u3002 \u4e00\u4e2a3\u00d73\u5377\u79ef\uff0c\u5374\u53ef\u4ee5\u8d77\u52305\u00d75\u30017\u00d77\u7b49\u5377\u79ef\u7684\u6548\u679c\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u7a7a\u6d1e\u5377\u79ef\u5728\u4e0d\u589e\u52a0\u53c2\u6570\u91cf\u7684\u524d\u63d0\u4e0b\uff0c\u589e\u5927\u4e86\u611f\u53d7\u91ce\u3002\u5047\u8bbe\u7a7a\u6d1e\u5377\u79ef\u7684\u5377\u79ef\u6838\u5927\u5c0f\u4e3ak\uff0c\u7a7a\u6d1e\u6570\u4e3ad\uff0c\u5219\u5176\u7b49\u6548\u5377\u79ef\u6838\u5927\u5c0fk\u2019\u8ba1\u7b97\u5982\u5f0f: \u7a7a\u6d1e\u5377\u79ef\u7684\u7f3a\u70b9 \u7f51\u683c\u6548\u5e94\uff08Gridding Effect\uff09\uff1a\u7531\u4e8e\u7a7a\u6d1e\u5377\u79ef\u662f\u4e00\u79cd\u7a00\u758f\u7684\u91c7\u6837\u65b9\u5f0f\uff0c\u5f53\u591a\u4e2a\u7a7a\u6d1e\u5377\u79ef\u53e0\u52a0\u65f6\uff0c\u6709\u4e9b\u50cf\u7d20\u6839\u672c\u6ca1\u6709\u88ab\u5229\u7528\u5230\uff0c\u4f1a\u635f\u5931\u4fe1\u606f\u7684\u8fde\u7eed\u6027\u4e0e\u76f8\u5173\u6027\uff0c\u8fdb\u800c\u5f71\u54cd\u5206\u5272\u3001\u68c0\u6d4b\u7b49\u8981\u6c42\u8f83\u9ad8\u7684\u4efb\u52a1\u3002 \u8fdc\u8ddd\u79bb\u7684\u4fe1\u606f\u6ca1\u6709\u76f8\u5173\u6027\uff1a\u7a7a\u6d1e\u5377\u79ef\u91c7\u53d6\u4e86\u7a00\u758f\u7684\u91c7\u6837\u65b9\u5f0f\uff0c\u5bfc\u81f4\u8fdc\u8ddd\u79bb\u5377\u79ef\u5f97\u5230\u7684\u7ed3\u679c\u4e4b\u95f4\u7f3a\u4e4f\u76f8\u5173\u6027\uff0c\u8fdb\u800c\u5f71\u54cd\u5206\u7c7b\u7684\u7ed3\u679c\u3002 \u4e0d\u540c\u5c3a\u5ea6\u7269\u4f53\u7684\u5173\u7cfb\uff1a\u5927\u7684dilation rate\u5bf9\u4e8e\u5927\u7269\u4f53\u5206\u5272\u4e0e\u68c0\u6d4b\u6709\u5229\uff0c\u4f46\u662f\u5bf9\u4e8e\u5c0f\u7269\u4f53\u5219\u6709\u5f0a\u65e0\u5229\uff0c\u5982\u4f55\u5904\u7406\u597d\u591a\u5c3a\u5ea6\u95ee\u9898\u7684\u68c0\u6d4b\uff0c\u662f\u7a7a\u6d1e\u5377\u79ef\u8bbe\u8ba1\u7684\u91cd\u70b9 \u89e3\u51b3\u65b9\u6848 :\u5178\u578b\u7684\u6709\u56fe\u68ee\u672a\u6765\u63d0\u51fa\u7684HDC\uff08Hybrid Dilated Convolution\uff09\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u7684\u8bbe\u8ba1\u51c6\u5219\u662f\u5806\u53e0\u5377\u79ef\u7684dilation rate\u4e0d\u80fd\u6709\u5927\u4e8e1\u7684\u516c\u7ea6\u6570\uff0c\u540c\u65f6\u5c06dilation rate\u8bbe\u7f6e\u4e3a\u7c7b\u4f3c\u4e8e[1,2,5,1,2,5]\u8fd9\u6837\u7684\u952f\u9f7f\u7c7b\u7ed3\u6784\u3002\u6b64\u5916\u5404dilation rate\u4e4b\u95f4\u8fd8\u9700\u8981\u6ee1\u8db3\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u8986\u76d6\u6240\u6709\u7a7a\u6d1e\uff0c\u4ee5\u89e3\u51b3\u7f51\u683c\u6548\u5e94\u4e0e\u8fdc\u8ddd\u79bb\u4fe1\u606f\u7684\u76f8\u5173\u6027\u95ee\u9898\uff0c\u5177\u4f53\u7ec6\u8282\u53ef\u53c2\u8003\u76f8\u5173\u8d44\u6599. \u8f6c\u7f6e\u5377\u79ef \u00b6 \u5c3d\u91cf\u6a21\u578b\u4e2d\u4e0d\u8981\u6709**\u53cd\u5377\u79ef(\u8f6c\u7f6e\u5377\u79ef)**(\u4f1a\u6709\u952f\u9f7f\u95ee\u9898\u51fa\u73b0)\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u91c7\u6837+\u5377\u79ef\u7684\u65b9\u5f0f\u4ee3\u66ff\uff0c DBFaceV2 \u4e2d\u5c31\u4f7f\u7528\u4e86\u8fd9\u79cd\u65b9\u5f0f\u3002\u8f6c\u7f6e\u5377\u79ef\u662f\u666e\u901a\u5377\u79ef\u7684\u53cd\u5411\u64cd\u4f5c\uff1a \u8fb9\u6846\u56de\u5f52 \u00b6 \u6211\u4eec\u7684\u76ee\u7684\u662fP\u6846\u56de\u5f52\u5230G\u6846\uff0c\u5982\u4f55\u505a\u5462\uff1f \u6211\u4eec\u9700\u8981\u5bfb\u627e\u4e00\u79cd\u53d8\u6362 G^ ,\u4f7f\u5f97 P==G^,G^\u7ea6\u7b49\u4e8eG \uff0c\u8fd9\u4e2a G^ \u5c31\u662f\u6211\u4eec\u7684\u6240\u8981\u6c42\u7684\u9884\u6d4b\u6846\u3002\u5982\u4f55\u505a\u5462\uff1f \u5e73\u79fb(dx,dy)+\u5c3a\u5ea6\u7f29\u653e(dw,dh)\uff0c\u5c31\u662f\u6211\u4eec\u8981\u5b66\u4e60\u7684\u56db\u4e2a\u53c2\u6570 \u6211\u4eec\u5df2\u77e5\u7684 P->G \u7684\u5e73\u79fb\u91cf\u548c\u5c3a\u5ea6\u7f29\u653e\u91cf\u5982\u4e0b\uff1a \u4e3a\u4ec0\u4e48\u53eb\u505a\u7ebf\u6027\u56de\u5f52\u5462\uff1f \u8fb9\u6846\u56de\u5f52\u8f93\u5165\u7684\u4ec0\u4e48\uff1f \u6ce8\u610f\u8f93\u5165\u7684\u662f\u5148\u9a8c\u6846\u5bf9\u5e94\u7684\u7279\u5f81\u56fe\u5411\u91cf(\u03a6)\uff0c\u800c\u4e0d\u662f Px,Py,Pw,Ph \u5750\u6807\u3002 Loss\u51fd\u6570 dx,dy,dw,dh \u5982\u4f55\u83b7\u5f97\uff1f W* \u8868\u793a\u8981\u5b66\u4e60\u7684\u53c2\u6570 \u03a65(P) \u8868\u793a\u8f93\u5165\u7684\u7279\u5f81\u56fe \u6240\u4ee5\uff0c\u51fd\u6570\u6700\u7ec8\u7684\u4f18\u5316\u76ee\u6807\u4e3a\uff1a FLOPs(\u8ba1\u7b97\u91cf)\u548c\u6a21\u578b\u53c2\u6570\u8ba1\u7b97 \u00b6 FLOPS \uff1a\u6ce8\u610f\u5168\u5927\u5199\uff0c\u662f floating point operations per second \u7684\u7f29\u5199\uff0c\u610f\u6307\u6bcf\u79d2\u6d6e\u70b9\u8fd0\u7b97\u6b21\u6570\uff0c\u7406\u89e3\u4e3a\u8ba1\u7b97\u901f\u5ea6\u3002\u662f\u4e00\u4e2a\u8861\u91cf\u786c\u4ef6\u6027\u80fd\u7684\u6307\u6807\u3002 FLOPs \uff1a\u6ce8\u610fs\u5c0f\u5199\uff0c\u662f floating point operations \u7684\u7f29\u5199\uff08s\u8868\u590d\u6570\uff09\uff0c\u610f\u6307\u6d6e\u70b9\u8fd0\u7b97\u6570\uff0c\u7406\u89e3\u4e3a\u8ba1\u7b97\u91cf\u3002 \u53ef\u4ee5\u7528\u6765\u8861\u91cf\u7b97\u6cd5/\u6a21\u578b\u7684\u590d\u6742\u5ea6 \u3002\u7531\u4e8e\u76ee\u524d\u6a21\u578b\u8ba1\u7b97\u80fd\u529b\u5de8\u5927\uff0c\u6240\u4ee5\u901a\u5e38\u4f7f\u7528 GFlops \u6765\u8861\u91cf\u7b97\u6cd5\u6027\u80fd\uff0c\u5176\u8868\u793a**\u5341\u4ebf**\uff08 =10^9 \uff09\u6b21\u7684\u6d6e\u70b9\u8fd0\u7b97 GMACs = 0.5 * GFLOPs FLOPs\u8ba1\u7b97(\u4e00\u822c\u8d8a\u5c0f\u8d8a\u597d) \u5377\u79ef\u5c42: C_i:input_channel,K:kernel_size,H*W:feature_map,C_o:output_channel \u62ec\u53f7\u91cc\u662f\u8ba1\u7b97 output_feature \u7684\u4e00\u4e2a pixel \u7684\u6d6e\u70b9\u8fd0\u7b97\u6570:\u5377\u79ef\u4e00\u6b21\u4f1a\u6709 C_i*K^2 \u6b21\u4e58\u6cd5\u548c C_i*K^2 - 1 \u6b21\u52a0\u6cd5(n\u4e2a\u6570\u76f8\u52a0\uff0c\u8981\u52a0n-1\u6b21)\uff0c\u5982\u679c\u4e0d\u8003\u8651bias\uff0c\u4f1a\u6709\u4e00\u4e2a -1 \uff0c\u5982\u679c\u8003\u8651bias\uff0c\u8fd9\u4e2a\u4e00\u4f1a\u88ab\u4e2d\u548c\u6389\uff0c\u6700\u540e\u62ec\u53f7\u5185\u4f1a\u53d8\u4e3a( 2*C_i*K^2 ) \u5168\u8fde\u63a5\u5c42\uff1a I:input neuron numbers, O:output neuron numbers \u6a21\u578b\u53c2\u6570\u8ba1\u7b97(\u4e00\u822c\u8d8a\u5c0f\u8d8a\u597d) \u57fa\u672c\u5377\u79ef: k*k\uff08\u5377\u79ef\u6838\u53c2\u6570\uff09*C_in(\u5377\u79ef\u6838\u7ef4\u5ea6)*C_out(\u5377\u79ef\u6838\u8f93\u51fa\u7ef4\u5ea6)[+c_out(bias\u4e2a\u6570)] FLOPs\u5c0f\u5e76\u4e14\u53c2\u6570\u91cf\u5c11\u7684\u7f51\u7edc\u4e00\u5b9a\u901f\u5ea6\u5feb\u5417\uff1f \u5728\u8bbe\u8ba1\u8f7b\u91cf\u7ea7\u7f51\u7edc\u65f6\uff0cFLOPs\u548c\u6a21\u578b\u53c2\u6570\u662f\u4e3b\u8981\u8003\u8651\u56e0\u7d20\uff0c\u4f46\u662f\u51cf\u5c11\u6a21\u578b\u5927\u5c0f\u548cFLOPs\u4e0d\u7b49\u540c\u4e8e\u51cf\u5c11\u63a8\u7406\u65f6\u95f4\u548c\u964d\u4f4e\u80fd\u8017\u3002\u6bd4\u5982ShuffleNetv2\u4e0eMobileNetv2\u5728\u76f8\u540c\u7684FLOPs\u4e0b\uff0c\u524d\u8005\u5728GPU\u4e0a\u901f\u5ea6\u66f4\u5feb\u3002\u6240\u4ee5\u9664\u4e86FLOPs\u548c\u6a21\u578b\u5927\u5c0f\u5916\uff0c\u8fd8\u9700\u8981\u8003\u8651\u5176\u4ed6\u56e0\u7d20\u5bf9\u80fd\u8017\u548c\u6a21\u578b\u63a8\u7406\u901f\u5ea6\u7684\u5f71\u54cd\uff0c\u4f8b\u5982:\u5185\u5b58\u8bbf\u95ee\u6210\u672c\uff08Memory Access Cost\uff0cMAC\uff09\u548cGPU\u8ba1\u7b97\u6548\u7387:DensNet\u7684\u53d8\u4f53: VoVNet/Pelee MAC\u8ba1\u7b97:shuffleNet V2\u8bba\u6587\u4e2d\u7ed9\u51fa\u4e86\u8ba1\u7b97\u65b9\u5f0f: DenseNet \u56e0\u4e3a\u5bc6\u96c6\u94fe\u63a5\u4f1a\u805a\u5408\u524d\u9762\u6240\u6709\u7684layer\uff0c\u8fd9\u5bfc\u81f4\u6bcf\u4e2alayer\u7684\u8f93\u5165channel\u6570\u7ebf\u6027\u589e\u957f\u3002concat\u64cd\u4f5cB\u5c3a\u5bf8\u5fc5\u987b\u662f\u56fa\u5b9a\u7684\uff0c\u624d\u80fd\u8fdb\u884c\u901a\u9053\u8fde\u63a5\u3002 Densnet\u6162\u4e5f\u597d\u7406\u89e3:\u9700\u8981\u8fdb\u884c\u591a\u6b21Concatnate\u64cd\u4f5c,\u6570\u636e\u9700\u8981\u88ab\u590d\u5236\u591a\u6b21\uff0c\u663e\u5b58\u5bb9\u6613\u589e\u52a0\u5f97\u5f88\u5feb GPU\u8ba1\u7b97\u6548\u7387 GPU\u8ba1\u7b97\u7684\u4f18\u52bf\u5728\u4e8e**\u5e76\u884c\u8ba1\u7b97\u673a\u5236**\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u8981\u8ba1\u7b97\u7684tensor\u8f83\u5927\u65f6\u4f1a\u5145\u5206\u53d1\u6325GPU\u7684\u8ba1\u7b97\u80fd\u529b\u3002\u5982\u679c\u5c06\u4e00\u4e2a\u8f83\u5927\u7684\u5377\u79ef\u5c42\u62c6\u5206\u6210\u51e0\u4e2a\u5c0f\u7684\u5377\u79ef\u5c42\uff0c\u5c3d\u7ba1\u6548\u679c\u662f\u76f8\u540c\u7684\uff0c\u4f46\u662f\u5374\u662fGPU\u8ba1\u7b97\u4f4e\u6548\u7684\u3002\u6240\u4ee5\u5982\u679c\u529f\u6548\u4e00\u6837\uff0c\u5c3d\u91cf\u91c7\u7528\u8f83\u5c11\u7684\u5c42\u3002\u6bd4\u5982MobileNet\u4e2d\u91c7\u7528\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\uff08depthwise conv+1x1 conv\uff09\u867d\u7136\u964d\u4f4e\u4e86FLOPs\uff0c\u4f46\u662f\u56e0\u4e3a\u989d\u5916\u76841x1\u5377\u79ef\u800c\u4e0d\u5229\u4e8eGPU\u8fd0\u7b97\u6548\u7387\u3002\u76f8\u6bd4FLOPs\uff0c\u6211\u4eec\u66f4\u5e94\u8be5\u5173\u6ce8\u7684\u6307\u6807\u662fFlOPs per Second\uff0c\u5373\u7528\u603b\u7684FLOPs\u9664\u4ee5\u603b\u7684GPU\u63a8\u7406\u65f6\u95f4\uff0c\u8fd9\u4e2a\u6307\u6807\u8d8a\u9ad8\u8bf4\u660eGPU\u5229\u7528\u8d8a\u9ad8\u6548\u3002 \u4ea4\u53c9\u71b5=\u71b5+KL\u6563\u5ea6 \u8be6\u89e3 \u00b6 \u71b5 :\u5c31\u662f\u4e00\u4e2a\u4e8b\u4ef6\u6240\u5305\u542b\u7684**\u4fe1\u606f\u91cf**\u3002\u4f8b\u5982:\u201c\u6211\u4e0d\u4f1a\u6b7b\u4ea1\u201d\uff0c\u4fe1\u606f\u91cf\u5f88\u5927\uff1b\u201c\u6211\u662f\u6211\u5988\u751f\u7684\u201d\uff0c\u4fe1\u606f\u91cf\u4e3a0\uff1b\u72ec\u7acb\u4e8b\u4ef6\u7684\u4fe1\u606f\u91cf\u53ef\u4ee5\u53e0\u52a0(\u4e00\u53e5\u8bdd:a->\u5f20\u4e09\u559d\u4e86\u9152\uff0cb->\u674e\u56db\u5403\u4e86\u9992\u5934)\uff0ca,b\u662f\u72ec\u7acb\u4e8b\u4ef6\uff0c\u8fd9\u53e5\u8bdd\u7684\u4fe1\u606f\u91cf\u5c31\u662fa\u7684\u4fe1\u606f\u91cf+b\u7684\u4fe1\u606f\u91cf\uff0c\u56e0\u6b64\u71b5\u7684\u5b9a\u4e49\u4e3a: KL\u6563\u5ea6 \uff1a\u8861\u91cf\u4e24\u4e2a\u4e8b\u4ef6/**\u5206\u5e03**\u4e4b\u95f4\u7684\u4e0d\u540c\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3aKL\u8ddd\u79bb(\u4e8b\u4ef6a\u548c\u4e8b\u4ef6b\u7684\u4e0d\u540c\u7a0b\u5ea6)\uff0c\u4f46\u4e0d\u5177\u5907\u5bf9\u79f0\u6027\uff1b\u8ddd\u79bb\u7684\u5bf9\u79f0\u6027:A\u5230B\u7684\u8ddd\u79bb\u7b49\u4e8eB\u5230A\u7684\u8ddd\u79bb \u4ea4\u53c9\u71b5 \u4e3a\u4ec0\u4e48\u7528\u4ea4\u53c9\u71b5\u505a\u635f\u5931\u51fd\u6570\u800c\u4e0d\u7528KL\u6563\u5ea6\uff1f A\u662f\u771f\u5b9e\u7684\u6570\u636e\u5206\u5e03\uff0cB\u662f\u6a21\u578b\u9884\u6d4b\u6d4b\u6570\u636e\u5206\u5e03 \u8bad\u7ec3\u6570\u636eA\u7684\u5206\u5e03\u5f0f\u7ed9\u5b9a\u7684\uff0c\u4e5f\u5c31\u662fA\u7684\u71b5S(A)\u662f\u5e38\u91cf\uff0c\u6b64\u65f6KL\u6563\u5ea6\u548c\u4ea4\u53c9\u71b5\u7b49\u4ef7(\u56e0\u4e3a\u6b64\u65f6\u71b5\u5bf9\u4e8e\u6a21\u578b\u6765\u8bf4\u662f\u4e00\u4e2a\u4e0d\u53ef\u4f18\u5316\u7684\u5e38\u6570\u9879)\u3002 Focal Loss \u00b6 Focal Loss \u4e3b\u8981\u662f\u5728\u539f\u6709\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86 gamma \u56e0\u5b50\u548c alpha \u56e0\u5b50\uff0c\u5176\u4e2d gamma \u56e0\u5b50\u4e3b\u8981\u662f\u63a7\u5236\u56f0\u96be\u6837\u672c\u6316\u6398\u7684\uff0c alpha \u56e0\u5b50\u4e3b\u8981\u662f\u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\u7684\u3002 \u56f0\u96be\u6837\u4f8b\u6316\u6398\uff0c\u52a0\u5165 gamma \u56e0\u5b50 \u5bf9\u4e8e\u6b63\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.95 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 1-0.95 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.35 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 1-0.35 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5bf9\u4e8e\u8d1f\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.05 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 0.05 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.75 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 0.75 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\uff0c\u52a0\u5165\u5e73\u8861\u56e0\u5b50 alpha alpha=0.25 \uff0c\u901a\u8fc7\u63a7\u5236\u5e73\u8861\u56e0\u5b50\u5927\u5c0f\u6765\u5e73\u8861 loss Label Smoothing \u00b6 Label Smoothing\u5728\u4eba\u8138\u635f\u5931\u4e0a\u4e0d\u8d77\u4f5c\u7528\u7684\u539f\u56e0 \u5bf9\u4e8e\u591a\u5206\u7c7b\u800c\u8a00\uff0c\u6211\u4eec\u5e38\u7528\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff0clabel\u6807\u7b7e\u5e38\u5e38\u5236\u4f5c\u4e3a one-hot \u7f16\u7801\uff0c\u4f46\u8fd9\u6837\u505a\u7f51\u7edc\u4f1a\u9a71\u4f7f\u81ea\u8eab\u5f80\u6b63\u786e\u6807\u7b7e\u548c\u9519\u8bef\u6807\u7b7e\u5dee\u503c\u5927\u7684\u65b9\u5411\u5b66\u4e60\uff0c\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5728\u8bad\u7ec3\u6570\u636e\u4e0d\u8db3\u4ee5\u8868\u5f81\u6240\u4ee5\u7684\u6837\u672c\u7279\u5f81\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u7f51\u7edc\u8fc7\u62df\u5408\u3002\u6240\u4ee5\u505a\u4e86\u8f6f\u5316\u63aa\u65bd: label smooth\u7684\u601d\u8def\u201c\u505a\u8f6f\u5316\u3001\u9632\u6b62\u8fc7\u62df\u5408\u3001\u589e\u52a0\u6270\u52a8\u201d \uff0c\u6700\u7ec8\u901a\u8fc7**\u6291\u5236\u6b63\u8d1f\u6837\u672c\u8f93\u51fa\u5dee\u503c**\uff0c\u4f7f\u5f97\u7f51\u7edc\u80fd\u6709\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b\u3002 Wing loss \u00b6 \u4e00\u822c\u800c\u8a00\u4eba\u8138\u5173\u952e\u70b9 loss \u5c1d\u5c1d\u662f l2 loss \u6216\u8005 smooth l2 loss ,\u4f46\u662f\u5c1d\u5c1d\u56e0\u4e3a**\u4eba\u8138\u59ff\u6001\u89d2\u5ea6\u591a\u6837**\u800c\u5bfc\u81f4\u7684\u68c0\u6d4b\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u4f7f\u7528 wing loss \u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u79bb\u7fa4\u70b9( large error )\u95ee\u9898\u548c small error \u95ee\u9898\u3002 L2 loss \u6216\u8005 smooth l2 loss \u5728 0 \u9644\u8fd1( small error )\u7684 gradient \u53d8\u5316\u8d8b\u4e8e\u5e73\u7f13\u7684\uff0c\u66f4\u4e0d\u5bb9\u6613\u4f18\u5316\uff1b\u800c\u4e14 L2 loss \u5f88\u5bb9\u6613\u53d7\u79bb\u7fa4\u70b9( large error )\u5f71\u54cd wing loss \u5206\u6bb5\u51fd\u6570\uff0c\u5f53\u4e24\u70b9\u8ddd\u79bb\u8fc7\u8fdc\u65f6\uff0c\u4e3a\u4e86\u907f\u514d loss \u8fc7\u5927( large loss )\u4f7f\u7528 |x| - C \u6765\u9650\u5b9a loss \u4e0d\u8981\u8fc7\u5927\uff1b\u5f53 |x|<w \u65f6\uff0c small error \u65f6\u4f7f gradient \u53d8\u5316\u9661\u5ced\uff0c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u3002 \u5c0f\u76ee\u6807\u96be\u68c0\u6d4b\u7684\u539f\u56e0 \u00b6 \u4f20\u7edf\u7684\u5206\u7c7b\u7f51\u7edc\u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u91cf\uff0c\u90fd\u4f7f\u7528\u5230\u4e86\u4e0b\u91c7\u6837\uff0c\u800c\u4e0b\u91c7\u6837\u8fc7\u591a\uff0c\u4f1a\u5bfc\u81f4**\u5c0f\u76ee\u6807\u7684\u4fe1\u606f\u5728\u6700\u540e\u7684\u7279\u5f81\u56fe\u4e0a\u53ea\u6709\u51e0\u4e2a\u50cf\u7d20\uff08\u751a\u81f3\u66f4\u5c11\uff09**\uff0c\u4fe1\u606f\u635f\u5931\u8f83\u591a Prior box\u6982\u5ff5 \u00b6 \u5148\u9a8c\u6846\uff0c\u5c31\u662fanchor box\u7684\u6982\u5ff5:\u9488\u5bf9feature map\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u4e00\u4e2acell\uff0c\u901a\u8fc7\u7b49\u6bd4\u653e\u7f29\u7684\u65b9\u6cd5\u6765\u627e\u5230\u539f\u56fe\u50cf\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06cell\u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u63d0\u53d6\u51fa\u4e0d\u540c\u5c3a\u5ea6\u7684bounding box\u5019\u9009\u533a\u57df\uff0c\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u53eb\u505aPrior box\u3002\u9488\u5bf9\u6bcf\u4e00\u4e2aPrior Box\u548c\u771f\u503cGT\u6bd4\u8f83\u4f1a\u5f97\u5230label\u3002\u5bf9\u4e8ecell\u4f1a\u5bf9\u5e94\u5230\u4e0d\u540c\u7684Prior Box\uff0c\u5206\u522b\u5f53\u524dPrior Box\u9884\u6d4b\u7c7b\u522b\u6982\u7387\u548c\u5750\u6807(x,y,w,h). Kmeans\u805a\u7c7b \u00b6 kmeans\u4e0ekmeans++\u805a\u7c7b: \u535a\u5ba2 kemeans\u805a\u7c7b\u51fak\u7c7b\u957f\u5bbd(\u4e0d\u662f\u957f\u5bbd\u6bd4)\u5373\u53ef,\u7531\u4e8e\u6570\u636e\u96c6\u4e2d\u56fe\u7247\u5927\u5c0f\u53ef\u80fd\u4e0d\u540c\uff0c\u9700\u8981\u5148\u5f52\u4e00\u5316box\u7684\u5bbd\u9ad8:\u00b7= w=w_box/w_img,h=h_box/h_img \uff0ckmeans\u805a\u7c7b\u7684\u8861\u91cf\u6307\u6807\u662f d = 1 - IOU (\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3pre_box\u4e0egt_box\u7684iou\uff0c\u4e14iou\u8d8a\u5927\u8868\u793a\u8ddd\u79bb\u8d8a\u8fd1)\uff0c\u8ba1\u7b97IOU\u65f6\uff0c\u4e0d\u7528\u7ba1box\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5047\u8bbe\u6240\u6709box\u7684\u5de6\u4e0a\u9876\u70b9\u90fd\u5728\u539f\u70b9 Kmeans (\u7f3a\u70b9:\u5bf9\u79cd\u5b50\u70b9\u7684\u521d\u59cb\u5316\u975e\u5e38\u654f\u611f) \u968f\u673a\u9009\u53d6 K \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u5c06\u6bcf\u4e2a box \u5206\u914d\u7ed9\u4e0e\u5176\u8ddd\u79bb\u6700\u8fd1\u7684 anchor \uff1b \u8ba1\u7b97\u6bcf\u4e2a\u7c07\u4e2d\u6240\u6709 box \u5bbd\u548c\u9ad8\u7684\u5747\u503c\uff0c\u66f4\u65b0 anchor \uff1b \u91cd\u590d2\u30013\u6b65\uff0c\u76f4\u5230anchor\u4e0d\u518d\u53d8\u5316\uff0c\u6216\u8005\u8fbe\u5230\u4e86\u6700\u5927\u8fed\u4ee3\u6b21\u6570 kmeans++ \u968f\u673a\u9009\u53d6 1 \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u8ba1\u7b97 box \u4e0e\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3\u7684\u8ddd\u79bbD(x)\uff1b \u9009\u62e9D(x) \u8f83\u5927\u7684\u70b9\u4f5c\u4e3a\u65b0\u589e\u7684\u805a\u7c7b\u4e2d\u5fc3\uff0c\u6ce8\u610f\u4e0d\u8981\u9009\u62e9\u6700\u5927\u503c(\u6392\u5e8f\u6309\u7167\u6982\u7387\u503c\u9009\u62e9)\uff0c\u53ef\u80fd\u662f\u5f02\u5e38\u70b9 \u91cd\u590d2~3\uff0c\u76f4\u5230k\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u88ab\u9009\u51fa\u6765 \u5229\u7528\u8fd9 k \u4e2a\u521d\u59cb\u7684\u805a\u7c7b\u4e2d\u5fc3\u6765\u8fd0\u884c\u6807\u51c6\u7684 k-means \u7b97\u6cd5 \u5e38\u7528\u6fc0\u6d3b\u51fd\u6570 \u00b6 ReLU/LeakyReLU/PReLU a_i=0:ReLU ; a_i=0.01:LeakyReLU ; a_i=\u8d85\u53c2\u6570\u53ef\u8bad\u7ec3\u66f4\u65b0:PReLU BP \u66f4\u65b0 ai \u65f6\uff0c\u91c7\u7528\u7684\u662f\u5e26**\u52a8\u91cf**\u7684\u66f4\u65b0\u65b9\u5f0f CReLU \u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u7f51\u7edc\u5728\u6d45\u5c42\u7684\u65f6\u5019\u53c2\u6570\u5206\u5e03\u5448\u73b0\u8f83\u5f3a\u7684\u8d1f\u76f8\u5173\u6027(\u66f4\u503e\u5411\u4e8e\u540c\u65f6\u6355\u83b7\u6b63\u8d1f\u54cd\u5e94\u7684\u4fe1\u606f)\uff0c\u5982\u679c\u6d45\u5c42\u4f7f\u7528 ReLU \u7684\u8bdd\u4f1a\u62b9\u6389\u8d1f\u54cd\u5e94\uff0c\u4f1a\u9020\u6210\u5377\u79ef\u6838\u5b58\u5728\u5197\u4f59\uff0c\u89e3\u51b3: CReLU \uff1b\u968f\u7740\u7f51\u7edc\u53d8\u6df1\uff0c\u8fd9\u79cd\u8d1f\u76f8\u5173\u6027\u9010\u6b65\u51cf\u5f31\u3002 Swish\u6fc0\u6d3b\u51fd\u6570 Swish \u5728\u6df1\u5c42\u6a21\u578b\u4e0a\u7684\u6548\u679c\u4f18\u4e8e ReLU\u3002\u53ef\u4ee5\u770b\u505a\u662f**\u4ecb\u4e8e\u7ebf\u6027\u51fd\u6570\u4e0eReLU\u51fd\u6570\u4e4b\u95f4\u7684\u5e73\u6ed1\u51fd\u6570**\uff0c\u4f8b\u5982\uff0c\u4ec5\u4ec5\u4f7f\u7528 Swish \u5355\u5143\u66ff\u6362 ReLU \u5c31\u80fd\u628a Mobile NASNetA \u5728 ImageNet \u4e0a\u7684 top-1 \u5206\u7c7b\u51c6\u786e\u7387\u63d0\u9ad8 0.9%\uff0cInception-ResNet-v \u7684\u5206\u7c7b\u51c6\u786e\u7387\u63d0\u9ad8 0.6%\u3002 Mish\u6fc0\u6d3b\u51fd\u6570 \u4e00\u79cd\u81ea\u6b63\u5219\u7684\u975e\u5355\u8c03\u795e\u7ecf\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e73\u6ed1\u7684\u6fc0\u6d3b\u51fd\u6570\u5141\u8bb8\u66f4\u597d\u7684\u4fe1\u606f\u6df1\u5165\u795e\u7ecf\u7f51\u7edc\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u51c6\u786e\u6027\u548c\u6cdb\u5316\u3002\u6839\u636e\u8bba\u6587\u5b9e\u9a8c\uff0c\u8be5\u51fd\u6570\u5728\u6700\u7ec8\u51c6\u786e\u5ea6\u4e0a\u6bd4 Swish(+0.494%) \u548c ReLU(+ 1.671%) \u90fd\u6709\u63d0\u9ad8\u3002 \u76ee\u6807\u68c0\u6d4bMAP\u8ba1\u7b97 \u00b6 \u4e3b\u8981\u662f TP+FP \u6709\u7528 AP\u503c\u8ba1\u7b97 \u9884\u6d4b\u503c\uff08Dets:\u6240\u6709\u9884\u6d4b\u6846\uff09\uff1a\u7269\u4f53\u7c7b\u522b\u3001\u8fb9\u6846\u4f4d\u7f6e\u76844\u4e2a\u9884\u6d4b\u503c\u3001\u8be5\u7269\u4f53\u7684\u5f97\u5206\u3002 \u6807\u7b7e\u503c\uff08GTs\uff09\uff1a\u7269\u4f53\u7c7b\u522b\u3001\u8fb9\u6846\u4f4d\u7f6e\u76844\u4e2a\u771f\u503c\u3002 \u5728\u904d\u5386\u5b8c\u6240\u6709\u7684\u9884\u6d4b\u6846\u540e\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u6bcf\u4e00\u4e2a\u9884\u6d4b\u6846\u7684\u5c5e\u6027\uff0c\u5373**TP\u6216FP** \u4e00\u4e2a\u4f8b\u5b50\u4e3a\uff1aR=\u201c\u6240\u6709\u597d\u74dc\u4e2d\u6709\u591a\u5c11\u6bd4\u4f8b\u88ab\u6311\u51fa\u6765\u201d\uff0cP=\u201c\u6311\u51fa\u6765\u7684\u897f\u74dc\u4e2d\u6709\u591a\u5c11\u6bd4\u4f8b\u662f\u597d\u74dc\u201d \u53ec\u56de\u7387(Recall,R) \u51c6\u786e\u7387(Precisioin,P) P-R\u66f2\u7ebf AP\u8ba1\u7b97:\u53ec\u56de\u7387\u9ad8\u7684\u65f6\u5019\u51c6\u786e\u7387\u4f1a\u5f88\u4f4e\uff0c\u51c6\u786e\u7387\u9ad8\u7684\u65f6\u5019\u5f80\u5f80\u53ec\u56de\u7387\u5f88\u4f4e(\u628a\u67d0\u7c7b\u7684\u6240\u6709\u9884\u6d4b\u6846(\u6570\u636e\u5e93\u7684\u6240\u6709\u56fe\u7247,\u4e0d\u662f\u6bcf\u5f20\u56fe\u7247\u5355\u72ec\u8ba1\u7b97\u51faAP\u518d\u5e73\u5747)\u6309\u7167score\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7d22\u5f15\u4ece0\u5f00\u59cb\uff0c\u53ec\u56de\u7387\u9010\u6e10\u589e\u5927:\u68c0\u6d4b\u5bf9\u7684\u6846\u8d8a\u6765\u8d8a\u591a\uff0c\u7cbe\u51c6\u7387\u9010\u6e10\u4e0b\u964d:\u8bef\u68c0\u6846\u8d8a\u6765\u8d8a\u591a\uff09 07\u7684\u662f11points method : \u4f7f\u752811\u4e2a\u4e0d\u540c\u53ec\u56de\u7387\u5bf9\u5e94\u7684\u51c6\u786e\u7387\u6c42\u5e73\u5747\u7684\u65b9\u5f0f\u6c42AP 2010\u7684area\u65b9\u5f0f : \u6c42\u9762\u79ef\u7684\u65b9\u5f0f \uff0c\u6c42\u79ef\u5206\u5f88\u9ebb\u70e6\uff0c\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u5bb9\u6613\u3002 MAP\u8ba1\u7b97:\u6bcf\u4e2a\u7c7b\u522b\u7684AP\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u5c06\u6bcf\u4e2a\u7c7b\u522b\u7684AP\u8fdb\u884c\u5e73\u5747\uff0c\u5373\u53ef\u5f97\u5230mAP ROC\u66f2\u7ebf \u00b6 \u6b63\u7c7b\u548c\u8d1f\u7c7b:\u5047\u8bbe\u9608\u503c\u4e3a 0.6 ,\u5f97\u5206\u5927\u4e8e\u7b49\u4e8e 0.6 \u7684\u4e3a\u6b63\u7c7b\uff0c\u5c0f\u4e8e 0.6 \u7684\u4e3a\u8d1f\u7c7b ROC \u66f2\u7ebf\u7684\u6a2a\u7eb5\u5750\u6807 \u7eb5\u5750\u6807 \u771f\u6b63\u7387-TPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u6b63\u5360\u6240\u6709\u6b63\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=1/all(gt=1) \u6a2a\u5750\u6807 \u5047\u6b63\u7387-FPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u8d1f\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=0/all(gt=0) \u6bcf\u4e2a\u9608\u503c\u4ee3\u8868\u4e00\u5bf9 (FPR,TPR) ,\u9608\u503c\u65e0\u7a77\u5927\u65f6\u9884\u6d4b\u65e0\u6b63\u4f8b FPR=TPR=0 \uff0c\u9608\u503c\u4e3a 0 \u65f6\u9884\u6d4b\u65e0\u8d1f\u4f8b FPR=TPR=1 ,\u4e00\u822c\u968f\u7740\u9608\u503c\u9010\u6e10\u589e\u5927\uff0c\u6b63\u4f8b\u8d8a\u6765\u8d8a\u5c11\uff0c\u6a2a\u5750\u6807\u51cf\u5c11\u7684\u66f4\u5feb \u5982\u4f55\u753b roc \u66f2\u7ebf\uff0c\u4e00\u822c\u9009\u53d6 range(0.1,1,0.001) \u5171\u8ba1 90 \u7ec4\u9608\u503c\uff0c\u8ba1\u7b97 AUC:(Area under Curve) \uff0c\u662f\u4e2a\u6982\u7387\u503c [0,1] ,\u8d8a\u5927\u5206\u7c7b\u6548\u679c\u8d8a\u597d\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528 ROC\u66f2\u7ebf \u800c\u4e0d\u4f7f\u7528 PR \u66f2\u7ebf\uff1f\u539f\u56e0: \u5f53\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6b63\u8d1f\u6837\u672c\u7684\u5206\u5e03\u53d8\u6362\u7684\u65f6\u5019(\u4f8b\u5982\u8d1f\u6837\u672c\u6570\u91cf\u589e\u592710\u500d)\uff0cROC\u66f2\u7ebf\u80fd\u591f\u4fdd\u6301\u4e0d\u53d8,\u4f46\u662fPR\u66f2\u7ebf\u5de8\u53d8 NMS\u53ca\u5176\u53d8\u4f53 link \u00b6 NMS \uff1a\u76f4\u63a5\u628aiou\u5927\u4e8e\u9608\u503c(\u5e38 0.5 )\u7684\u6846\u8e22\u6389(\u5f97\u5206\u7f6e\u4e3a0) \u6839\u636e\u7f6e\u4fe1\u5ea6\u964d\u5e8f\u6392\u5217\u5019\u9009\u6846\u5217\u8868 \u9009\u53d6\u7f6e\u4fe1\u5ea6\u6700\u9ad8\u7684\u6846A\u6dfb\u52a0\u5230\u8f93\u51fa\u5217\u8868\uff0c\u5e76\u5c06\u5176\u4ece\u5019\u9009\u6846\u5217\u8868\u4e2d\u5220\u9664 \u8ba1\u7b97A\u4e0e\u5019\u9009\u6846\u5217\u8868\u4e2d\u7684\u6240\u6709\u6846\u7684IoU\u503c\uff0c\u5220\u9664\u5927\u4e8e\u9608\u503c\u7684\u5019\u9009\u6846(\u76f8\u5f53\u4e8e\u5f97\u5206\u76f4\u63a5\u7f6e\u4e3a0) \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u5019\u9009\u6846\u5217\u8868\u4e3a\u7a7a\uff0c\u8fd4\u56de\u8f93\u51fa\u5217\u8868 \u5bf9\u91cd\u53e0\u7269\u4f53\u6548\u679c\u4e0d\u597d(\u884c\u4eba/\u732a\u53ea\u7b49)\uff0c\u4f1a\u5bfc\u81f4\u6f0f\u68c0\u589e\u591a soft-nms \uff1aiou\u5927\u4e8e\u9608\u503c\u7684\u6846\u5f97\u5206\u4e0d\u7f6e\u4e3a0(\u5bf9\u4e8e\u91cd\u53e0\u76ee\u6807\u8fd9\u4e2a\u6846\u53ef\u80fd\u6709\u7528)\uff0c\u800c\u662f\u66f4\u5177 IOU\u5927\u5c0f \u4ee5\u67d0\u79cd\u51fd\u6570\u8870\u51cf\uff0c IOU \u8d8a\u5927\u5f97\u5206\u8d8a\u4f4e\uff0c\u8870\u51cf\u8d8a\u4e25\u91cd\u3002 \u5047\u8bbe\u4e00\u4e2a\u56fe\u4e2d\u6709\u4e09\u4e2a\u6846\uff0c\u5f97\u5206\u4e3a 0.9,0.7,0.85 \uff0c\u7ecf\u8fc7 soft-nms \u7b2c\u4e00\u6b21\u5904\u7406\u53d8\u4e3a 0.9,0.65,0.55 (\u5982\u679c\u662f nms:0.9,0,0 )\uff0c\u7136\u540e\u518d\u5faa\u73af\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5220\u9664\u6846\uff0c\u6700\u540e\u901a\u8fc7\u9608\u503c\u5220\u9664\u5f97\u5206\u4f4e\u7684\u6846\u5373\u53ef\u3002 \u8870\u51cf\u51fd\u6570\u5e38\u7528\u7684\u4e24\u79cd\u65b9\u5f0f: linear: result_score = base_score - base_score*iou gausian:result_score = base_score * np.exp(-iou**2 / sigma:0.5) \u6548\u679c\u5c55\u793a: \u95ee\u9898\u5c31\u662f\u7f6e\u4fe1\u5ea6\u7684\u9608\u503c\u5982\u4f55\u9009\u62e9 \uff0c\u4f5c\u8005\u5728\u8fd9\u91cc\u4f9d\u7136\u4f7f\u7528\u624b\u5de5\u8bbe\u7f6e\u7684\u503c\uff0c\u4f9d\u7136\u5b58\u5728\u5f88\u5927\u7684\u5c40\u9650\u6027 WBF(\u6bd4\u8d5b\u4e13\u7528:Weighted Boxes Fusion) code \u52a0\u6743\u8fb9\u6846\u878d\u5408 \uff0c\u5e38\u7528\u4e8e\u878d\u5408\u591a\u4e2a\u6a21\u578b\u5bf9\u540c\u4e00\u5f20\u56fe\u7247\u7684\u6846\u9884\u6d4b\uff0c\u6216\u8005\u5355\u4e2a\u6a21\u578b\u4e0d\u540c\u5c3a\u5ea6\u7684\u7ed3\u679c\u878d\u5408\uff0c\u6bd4 NMS \u6162 3 \u500d\u3002 \u6bcf\u4e2a\u6a21\u578b\u7684\u6bcf\u4e2a\u9884\u6d4b\u6846\u90fd\u6dfb\u52a0\u5230 List B \uff0c\u5e76\u5c06\u6b64\u5217\u8868\u6309\u7f6e\u4fe1\u5ea6\u5f97\u5206 C **\u964d\u5e8f**\u6392\u5217 \u5efa\u7acb\u7a7a List L \u548c list F \uff08\u7528\u4e8e\u878d\u5408\u7684\uff09 \u5faa\u73af\u904d\u5386 B \uff0c\u5e76\u5728 F \u4e2d\u627e\u5230\u4e0e\u4e4b\u5339\u914d\u7684 box \uff08\u540c\u4e00\u7c7b\u522b MIOU > 0.55:\u6700\u4f73\u9608\u503c \uff09 \u5982\u679c step3 \u4e2d\u6ca1\u6709\u627e\u5230\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \u548c F \u7684\u5c3e\u90e8\uff0c\u5982\u679c step3 \u4e2d\u627e\u5230\u4e86\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \uff0c\u52a0\u5165\u7684\u4f4d\u7f6e\u662f box \u5728 F \u4e2d\u5339\u914d\u6846\u7684 Index \uff1b L \u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u4e2a\u6846\uff0c\u9700\u8981\u6839\u636e\u8fd9\u591a\u4e2a\u6846\u66f4\u65b0\u5bf9\u5e94 F[index] \u7684\u503c\uff0c\u5176\u5b9e list L \u79f0\u4e3a dict L \u66f4\u597d\u3002\u66f4\u65b0\u65b9\u5f0f\u5982\u4e0b(\u5bf9\u5750\u6807\u503c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6c42\u548c): \u904d\u5386\u5b8c\u6210\u540e\u5bf9 F \u4e2d\u7684\u5143\u7d20\u518d\u8fdb\u884c\u7f6e\u4fe1\u5ea6\u5f97\u5206\u7684\u7f29\u653e\uff0c\u51cf\u5c11\u67d0\u4e9b box \u53ea\u88ab\u5c11\u6570\u6a21\u578b\u9884\u6d4b\u5230\u7684\u7f6e\u4fe1\u503c(\u5982\u679c\u7fa4\u96c6\u4e2d\u7684\u591a\u4e2a\u6846\u5f97\u5206\u8f83\u4f4e\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740 \u53ea\u6709\u5c11\u6570\u6a21\u578b\u53ef\u4ee5\u9884\u6d4b\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u964d\u4f4e\u6b64\u7c7b\u60c5\u51b5\u7684\u7f6e\u4fe1\u5ea6\u5f97\u5206)\u3002 Bn and GN \u00b6 BN \u7814\u7a76\u8005\u53d1\u73b0\uff0c\u7f51\u7edc\u8d8a\u6df1\u8d8a\u96be\u6536\u655b\uff0c\u53ea\u6709\u901a\u8fc7\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\u548c\u521d\u59cb\u5316\u53c2\u6570\u624d\u80fd\u5f97\u5230\u76f8\u5bf9\u8f83\u597d\u7684\u7ed3\u679c\uff0c\u7ecf\u7814\u7a76\u6bcf\u6b21\u53cd\u5411\u4f20\u64ad\u53c2\u6570\u8fed\u4ee3\u66f4\u65b0\u540e\uff0c\u524d\u4e00\u5c42\u7f51\u7edc\u8f93\u51fa\u6570\u636e\u7ecf\u8fc7\u8be5\u5c42\u7f51\u7edc\u540e\u6570\u636e\u5206\u5e03\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e3a\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u5b66\u4e60\u5e26\u6765\u56f0\u96be(\u7f51\u7edc\u5c42\u672c\u8d28\u5c31\u662f\u5b66\u4e60\u6570\u636e\u5206\u5e03\uff0c\u5206\u5e03\u4e00\u76f4\u53d8\u5c31\u96be\u6536\u655b)\u3002 Batchnorm \u4ee5\u52a0\u901f\u6536\u655b\u901f\u5ea6\u548c\u6a21\u578b\u7a33\u5b9a\u6027\u800c\u51fa\u540d\uff0c\u5b83\u80fd\u7a81\u51fa\u6570\u636e\u5206\u5e03\u4e4b\u95f4\u7684\u76f8\u5bf9\u5dee\u5f02\uff1b \u5982\u679c\u5355\u72ec\u7684\u5bf9\u6bcf\u5c42\u8fdb\u884c\u5f52\u4e00\u5316\u5c31\u4f1a\u7834\u574f\u6a21\u578b\u672c\u8eab\u6240\u5b66\u5f97\u7684\u7279\u5f81\uff0c\u5bfc\u81f4\u5b66\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\uff0cBN\u7684\u6210\u529f\u5728\u4e8e\u5f15\u5165\u4e86\u7f29\u653e\u91cf\u03b3 \u548c\u5e73\u79fb\u91cf\u03b2\u6765\u6062\u590d\u539f\u59cb\u7279\u5f81 \u3002 bn\u5728\u8bad\u7ec3\u8fc7\u7a0b\u548c\u63a8\u7406\u8fc7\u7a0b\u662f\u5982\u4f55\u8bbe\u7f6e\u65b9\u5dee\u548c\u671f\u671b\u7684\uff1f \u8bad\u7ec3\u8fc7\u7a0b : [batch,N,H,W] \uff0c batchnorm \u5c42\u662f\u5728 batch \u7ef4\u5ea6\u4e0a\u8fdb\u884c norm \u7684\uff0c\u6240\u4ee5\u5f52\u4e00\u5316\u7684\u662f[N,H,W]\uff0c\u5373\u5bf9batch\u4e2d\u7684channel\u505a\u5f52\u4e00\u5316\u3002 \u7b2c\u4e00\u4e2a\u6837\u672c\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\uff0c\u52a0\u4e0a\u7b2c\u4e8c\u4e2a\u6837\u672c\u7684\u7b2c\u4e00\u4e2a\u901a\u9053.....,\u7b2cN\u4e2a\u6837\u672c\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\uff0c\u5f97\u5230\u7b2c\u4e00\u4e2a\u901a\u9053\u7684\u5747\u503c\uff08\u9664\u4ee5NxHxW\u800c\u4e0d\u662f\u5355\u7eaf\u9664\u4ee5N\uff0c\u6700\u540e\u5f97\u5230\u7684\u662f\u4ee3\u8868\u8fd9\u4e2abatch\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\u7684\u5e73\u5747\u503c\u7684\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u4e00\u4e2aHxW\u7684\u77e9\u9635\uff09\u3002\u540c\u6837\u7684\u65b9\u6cd5\u6c42\u51fa\u65b9\u5dee\u3002\u6ce8\u610f\u6c42\u5f97\u7684\u5747\u503c\u65b9\u5dee\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u901a\u9053\u4e2a\u6570\u4e2a\u503c \u63a8\u7406\u8fc7\u7a0b :\u7528\u7684\u662f\u6240\u6709mini-batches**\u8bad\u7ec3\u6837\u672c**\u5747\u503c\u548c\u65b9\u5dee\u7684**\u7d2f\u8ba1\u6ed1\u52a8\u5e73\u5747\u7ed3\u679c**\uff0c\u8fd9\u6837\u7684\u8bdd\u5355\u6837\u672c\u4e5f\u80fd\u9884\u6d4b\u3002 # momentum : \u52a8\u91cf\u53c2\u6570\uff0c\u4e00\u822c\u4e3a0.9\uff0c 0.99\uff0c 0.999 # pytorch\u7684BN\u4e2d\u5e38\u6709\u4ee5\u4e0b\u53d8\u91cf\u3002 # running_mean \uff1a\u6ed1\u52a8\u5e73\u5747\u7684\u65b9\u5f0f\u8ba1\u7b97\u65b0\u7684\u5747\u503c\uff0c\u8bad\u7ec3\u65f6\u8ba1\u7b97\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u505a\u51c6\u5907 # running_var : \u6ed1\u52a8\u5e73\u5747\u7684\u65b9\u5f0f\u8ba1\u7b97\u65b0\u7684\u65b9\u5dee\uff0c\u8bad\u7ec3\u65f6\u8ba1\u7b97\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u505a\u51c6\u5907 running_mean = momentum * running_mean + ( 1 - momentum ) * x_mean running_var = momentum * running_var + ( 1 - momentum ) * x_var GN:Group Normbalization BN \u7684\u7f3a\u70b9 BN \u662f\u4ee5 batch \u4e3a\u4e3b\u7684\uff0c \u8fc7\u5c0f\u7684 batch size \u4f1a\u5bfc\u81f4\u5176\u6027\u80fd\u4e0b\u964d (\u4e00\u822c\u6765\u8bf4\u6bcf\u4e2a gpu \u4e0a batch_size=32 \u6700\u5408\u9002)\uff0c\u4f46\u5bf9\u4e8e\u5927\u578b\u7684\u7f51\u7edc\uff0c\u5c24\u5176\u662f\u68c0\u6d4b\u7f51\u7edc\uff0c batch_size \u6709\u7684\u8bbe\u7f6e\u6210 2,4 \u5c31\u5360\u6ee1\u663e\u5b58 \u9884\u6d4b\u65f6\uff0c\u5747\u503c\u65b9\u5dee\u662f\u7528**\u8bad\u7ec3\u96c6\u7684\u6ed1\u52a8\u5e73\u5747**\u6c42\u5f97\u7684\uff0c\u5982\u679c\u5f53\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u5e03\u6709\u5dee\u522b\u65f6\uff0c\u7ed3\u679c\u5c31\u4f1a\u4e0d\u597d GN \u7684\u5f52\u4e00\u5316\u65b9\u5f0f\u907f\u5f00\u4e86 batch size \u5bf9\u6a21\u578b\u7684\u5f71\u54cd\uff0c\u7279\u5f81\u7684 group \u5f52\u4e00\u5316\u540c\u6837\u53ef\u4ee5\u89e3\u51b3\u6570\u636e\u5206\u5e03\u5dee\u5f02\u7684\u95ee\u9898\uff0c\u5e76\u53d6\u5f97\u8f83\u597d\u7684\u6548\u679c\u3002 \u5c0f\u7684batch size\u53ef\u4ee5\u8003\u8651\u4f7f\u7528GN \u901a\u9053\u526a\u679d \u00b6 \u601d\u60f3 :\u6bcf\u4e2a\u5377\u79ef\u5c42\u6709\u5f88\u591a\u901a\u9053\uff0c\u8fd9\u4e9b\u901a\u9053\u6709\u53ef\u80fd\u662f\u5197\u4f59\u7684\uff0c\u60f3\u6cd5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u901a\u9053\u5f15\u5165\u4e00\u4e2a\u7f29\u653e\u56e0\u5b50 gamma ,\u7136\u540e\u548c\u901a\u9053\u7684\u8f93\u51fa\u76f8\u4e58\uff0c\u63a5\u7740\u8054\u5408\u8bad\u7ec3\u7f51\u7edc\u6743\u91cd\u548c\u8fd9\u4e9b\u7f29\u653e\u56e0\u5b50\uff0c\u6700\u540e\u5c06\u5c0f\u7f29\u653e\u56e0\u5b50\u7684\u901a\u9053\u76f4\u63a5\u79fb\u9664\uff0c\u5fae\u8c03\u526a\u679d\u540e\u7684\u7f51\u7edc\u5373\u53ef\uff0c\u56e0\u4e3aconv+bn\u662f\u4e00\u822c\u7f51\u7edc\u7684\u6807\u914d\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a BN \u5c42\u7684 gamma \u7cfb\u6570\u4f5c\u4e3a\u7f29\u653e\u56e0\u5b50\u6765\u8fdb\u884c L1 \u6b63\u5219\u3002 # pytorch\u5bf9BN\u5c42\u8fdb\u884cL1\u6b63\u5219\u5316 def updateBN ( model ): for n , m in model . named_modules (): if isinstance ( m , nn . BatchNorm2d ): # torch.sign\u662f\u5224\u65ad\u6b63\u8d1f\u7684\uff0c\u5927\u4e8e0\u7684\u8fd4\u56de1\uff0c\u5c0f\u4e8e0\u7684\u8fd4\u56de-1 m . weight . grad . data . add_ ( args . s * torch . sign ( m . weight . data )) # L1 \u6211\u4eec\u5148\u5bf9\u6240\u6709 bn \u5c42\u7f29\u653e\u56e0\u5b50 gamma \u7684\u7edd\u5bf9\u503c\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u7f29\u653e\u56e0\u5b50\u4e2d70%\uff08\u526a\u679d\u6bd4\uff09\u7684\u4f4d\u7f6e\u7684\u7f29\u653e\u56e0\u5b50\u4e3a\u9608\u503c\u3002 \u526a\u679d\u65b9\u5f0f \u526a\u679d\u540e\u6bcf\u5c42\u901a\u9053\u5269\u4f59\uff0c\u81f3\u5c11\u4e3a 1 \uff0c\u6216\u8005\u53ef\u4ee5\u8bbe\u7f6e\u4e3a 2^x \u6570\u76ee\uff0c\u8fd9\u6837\u8f83\u7a33\u5b9a\u4f46\u727a\u7272\u4e86\u90e8\u5206\u538b\u7f29\u7387 \u6052\u5b9a s \u526a\u679d:\u4e00\u76f4\u4ee5\u56fa\u5b9a\u7684 L1 \u60e9\u7f5a\u7cfb\u6570 s=0.01 \u5168\u5c40 s \u8870\u51cf\u526a\u679d: s = s if epoch <= opt.epochs * 0.5 else s * 0.01 \uff0c\u8d85\u8fc7 epochs/2 \u540e\u60e9\u7f5a\u7cfb\u6570\u8870\u51cf 100 \u500d\uff0c\u4f7f\u5f97\u7cbe\u5ea6\u7a0d\u5fae\u6062\u590d\u3002 \u5c40\u90e8 s \u8870\u51cf\u526a\u679d:\u8d85\u8fc7 epochs/2 \u540e\u5bf9 85 %\u7684\u901a\u9053(\u6240\u6709 bn \u901a\u9053 s \u6392\u5e8f)\u4fdd\u6301\u539f\u59cb\u6052\u5b9a\u60e9\u7f5a\u7cfb\u6570 s \u538b\u7f29\uff0c 15% \u7684\u901a\u9053\u8fdb\u884c s \u8870\u51cf 100 \u500d\u7684\u538b\u7f29( 85% \u662f\u4e2a\u5148\u9a8c\u77e5\u8bc6\uff0c\u4e00\u822c\u8fd9\u4e2a\u538b\u7f29\u7387\u662f\u6700\u4f73\u7684)\u3002 \u77e5\u8bc6\u84b8\u998f(\u5206\u7c7b/\u56de\u5f52\u7528) \u00b6 \u53ea\u84b8\u998f\u4e00\u4e2a\u8f93\u51fa\u5c42 \u8981\u84b8\u998f\u7684\u5c0f\u6a21\u578b\uff0c\u4ee5\u5927\u6a21\u578b\u7684\u8f93\u51fa\u7684\u6982\u7387\u5411\u91cf( soft target : \u8f6f\u6807\u7b7e ->\u62e5\u6709\u4e0d\u540c\u7c7b\u4e4b\u95f4\u5173\u7cfb\u7684\u4fe1\u606f)\u4e3a\u5b66\u4e60\u76ee\u6807\uff0c\u56e0\u4e3a one-hot \u5305\u542b\u7684\u4fe1\u606f\u91cf\u5f88\u4f4e [0,1] \uff08\u7c7b\u4f3c label smooth \uff09\uff0c\u56e0\u4e3a\u8d1f\u6807\u7b7e\u4e5f\u5e26\u6709\u5927\u91cf\u4fe1\u606f\u3002 \u5982\u4f55\u505a\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u5728 softmax \u4e2d\u589e\u52a0\u6e29\u5ea6\u53c2\u6570 T \uff0c\u63a8\u7406\u7684\u65f6\u5019 T=1 \uff0c\u4f18\u5316 L_soft \u7684\u65f6\u5019\u5e38\u7528 KL\u6563\u5ea6 \u8ba1\u7b97 Loss : \u4ea4\u53c9\u71b5= KL \u6563\u5ea6+\u71b5 \uff0c one-hot \u6807\u7b7e\u7684\u771f\u5b9e\u4fe1\u606f\u71b5\u662f\u56fa\u5b9a\u7684\u6240\u4ee5\u7528\u4ea4\u53c9\u71b5\u4ee3\u66ff KL \u6563\u5ea6\uff0c\u4f46\u662f soft label \u7684\u4fe1\u606f\u71b5\u662f teacher \u7f51\u7edc\u751f\u6210\u7684\uff0c\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u7528 KL \u6563\u5ea6\u3002 \u6e29\u5ea6 T :\u8d8a\u5c0f\u8d8a\u653e\u5927\u6b63\u6837\u672c\uff0c\u8d8a\u5927\u8d8a\u653e\u5927\u8d1f\u6837\u672c(\u5373\u653e\u5927\u5c0f\u6982\u7387\u503c\u5206\u91cf\u6240\u643a\u5e26\u7684\u4fe1\u606f)\u3002 \u7cbe\u5ea6\u66f4\u9ad8\u7684\u6a21\u578b\u84b8\u998f\u5c0f\u6a21\u578b\u63d0\u5347\u70b9\u66f4\u5c11\uff0c\u539f\u56e0\u5206\u6790 \uff1a Teacher \u66f4\u590d\u6742\uff0c Student \u6ca1\u6709\u8db3\u591f\u7684\u80fd\u529b\u6765\u6a21\u4eff Teacher Teacher \u7684\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u6a21\u578b\u786e\u5b9a\u6027\u66f4\u5f3a\uff0c\u8f93\u51fa logits \uff08 soft label \uff09\u53d8\u5f97 less soft \uff0c\u8d8b\u8fd1\u4e8e one-hot \u89e3\u51b3\u65b9\u6848:\u53ef\u4ee5\u5229\u7528\u8d85\u5927\u6a21\u578b\u4f5c\u4e3a**\u52a9\u6559\u7f51\u7edc**\u8f85\u52a9\u84b8\u998f(\u8d85\u5927\u7f51\u7edc\u4f5c\u4e3a Teacher ,\u5927\u7f51\u7edc\u4f5c\u4e3a Teach-Assistant \uff0c\u5c0f\u7f51\u7edc\u4f5c\u4e3a Student ) \u9996\u5148\u5bf9\u8d85\u5927\u7f51\u7edc\u5bf9\u5927\u7f51\u7edc\u8fdb\u884c\u84b8\u998f(\u5927\u7f51\u7edc\u7684\u9009\u53d6\u548c\u8d85\u5927\u7f51\u7edc\u76f8\u5dee\u4e0d\u8981\u592a\u5927( 7\u500d \u4ee5\u4e0a)\uff0c\u4e0d\u7136\u4e5f\u84b8\u4e0d\u51fa\u6765) \u518d\u7528\u6574\u7406\u597d\u7684\u5927\u7f51\u7edc\u5bf9\u6700\u7ec8\u7684\u5c0f\u7f51\u7edc\u8fdb\u884c\u84b8\u998f \u591a\u4e2aTeacher\u6a21\u578b\u5982\u4f55\u84b8\u998f link \u5c06\u591a\u4e2ateacher\u6a21\u578b\u7684\u9884\u6d4b\u6982\u7387\uff08softmax\u540e\u8f93\u51fa\uff09\u6c42\u5e73\u5747\u503c\u6765\u8fdb\u884c\u84b8\u998f\uff0c\u6548\u679c\u597d\u4e8e\u968f\u673a\u9009\u4e00\u4e2ateacher\u6a21\u578b\u8fdb\u884c\u84b8\u998f\u3002 \u8f93\u51fa\u5c42\u548c\u7279\u5f81\u5c42\u4e00\u8d77\u84b8\u998f \u5bf9\u4e8eT\u548cS\u4e2d\u95f4\u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff0c\u91c7\u7528\u5728 S \u7f51\u7edc\u8f93\u51fa\u63a5\u4e00\u4e2a\u8f6c\u6362\u5668( conv+bn+mish )\uff0c\u5c06\u5176\u5347\u7ef4\u5230 T \u7f51\u7edc\u5339\u914d\uff0cT\u7684\u8bdd\u76f4\u63a5\u63a5\u4e00\u4e2a mish \u4fdd\u8bc1\u6fc0\u6d3b\u51fd\u6570\u76f8\u540c( mish=x*tanh(ln(1+e^x)) )\u3002 loss:nn.MSE-->\u9884\u6d4b\u6570\u636e\u548c\u539f\u59cb\u6570\u636e\u5bf9\u5e94\u70b9\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u7684\u5747\u503c FP32\u626b\u76f2 \u00b6 \u4f4d\uff0c\u5b57\u8282\u89e3\u91ca :1\u4f4d=1bit=0/1(\u4e00\u4e2a0\u62161\u5c31\u4ee3\u8868\u4e00\u4f4d)\uff0c1Byte(\u5b57\u8282)=8\u4f4d=8bit \u6d6e\u70b9\u6570\u8be6\u89e31 | \u6d6e\u70b9\u6570\u8be6\u89e32 fp32\u7ec4\u6210=1\u7b26\u53f7\u4f4dS[ ] + 8\u6307\u6570\u4f4de[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] + \u5c3e\u6570f[ ]*23 1 \u7b26\u53f7\u4f4d\uff0c\u53ea\u6709 0/1 \uff0c float \u548c double \u7b26\u53f7\u4f4d\u5747\u4e3a 1 \u4f4d\uff0c 0 \u4ee3\u8868\u6b63\u6570\uff0c 1 \u4ee3\u8868\u8d1f\u6570 8 \u6307\u6570\u4f4d\u8868\u793a\u6307\u6570\u90e8\u5206\uff0c\u5b58\u50a8\u79d1\u5b66\u8ba1\u6570\u6cd5\u4e2d\u7684\u6307\u6570\u90e8\u5206\uff0c\u91c7\u7528\u79fb\u4f4d\u5b58\u50a8\uff0c\u6307\u6570\u8303\u56f4: [-127,128] 23 \u5c3e\u6570\u8868\u793a\u5c0f\u6570\u90e8\u5206\uff0c\u5b58\u50a8\u79d1\u5b66\u8ba1\u6570\u6cd5\u4e2d\u7684\u5c3e\u6570\u90e8\u5206: int8\u91cf\u5316 \u00b6 \u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u662f\u6743\u91cd\u548c\u6fc0\u6d3b\u503c\u7684\u5377\u79ef\u4e58\u52a0\u64cd\u4f5c \u6a21\u578b\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u9488\u5bf9\u6743\u91cd Weight \u91cf\u5316\uff0c\u4e00\u662f\u9488\u5bf9\u6fc0\u6d3b\u503c Activation \u91cf\u5316\uff0c\u5728\u4e00\u4e9b\u6587\u7ae0\u4e2d\u5df2\u7ecf\u8868\u660e\u4e86\u5c06\u6743\u91cd\u548c\u6fc0\u6d3b\u503c\u91cf\u5316\u5230 8bit \u65f6\u5c31\u53ef\u4ee5\u7b49\u4ef7 32bit \u7684\u6027\u80fd\u3002 \u672c\u6b21\u4ecb\u7ecd\u7684\u662f\u9759\u6001\u79bb\u7ebf\u8bad\u7ec3\u5728\u9884\u6d4b\u524d**\u4f7f\u7528\u91cf\u5316\u6821\u51c6\u96c6\u8fdb\u884c\u6a21\u578b\u6fc0\u6d3b\u503c\u5206\u5e03\u7684\u7edf\u8ba1**\uff0c\u786e\u5b9a\u6fc0\u6d3b\u5c42\u7684\u91cf\u5316\u53c2\u6570\u7684\u65b9\u5f0f\u3002 FP32\u5360\u75284\u4e2a\u5b57\u8282\u517132\u4f4d;FP16\u5360\u75282\u4e2a\u5b57\u8282\u517116\u4f4d;int8\u5360\u75281\u4e2a\u5b57\u8282\u51718\u4f4d; | \u91cf\u5316\u65b9\u6cd5\u6c47\u603b | TensorRt\u91cf\u5316\u8be6\u89e3 \u7b80\u4ecb \u91cf\u5316\u4e0d\u662f\u65b0\u4e1c\u897f\uff0c\u6211\u4eec\u505a\u56fe\u50cf\u9884\u5904\u7406\u5c31\u7528\u5230\u4e86\u91cf\u5316\uff1b**\u53cd\u91cf\u5316:**\u4e00\u5f20\u56fe\u7247(0-255)\u2192\u5f52\u4e00\u5316(0~1)\uff1b**\u91cf\u5316:**\u53cd\u8fc7\u6765\uff0c\u91cf\u5316\u672c\u8d28\u4e0a\u53ea\u662f\u5bf9\u6570\u503c\u8303\u56f4\u7684\u91cd\u65b0\u8c03\u6574\uff0c\u662f\u4e00\u79cd\u6620\u5c04\u5173\u7cfb\u3002 \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u91cf\u5316\u5230\u5e95\u5728\u91cf\u5316\u4ec0\u4e48\uff1f \u4e00\u56fe\u80dc\u5343\u8a00\uff0c\u5377\u79ef\u91cf\u5316\u662f\u5bf9\u8f93\u5165\u7684 tensor \u548c weight \u53c2\u6570\u90fd\u9700\u8981\u8fdb\u884c\u91cf\u5316\uff0c\u5c06\u8ba1\u7b97\u5c42\u7684\u8f93\u5165\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u539f\u672c32bit\u6d6e\u70b9\u6570\u7684\u4e58\u52a0\u64cd\u4f5c\u53d8\u4e3a8bit\u7684\u6574\u6570\u4e58\u52a0\u64cd\u4f5c\uff0c\u51cf\u5c11\u4e86\u6a21\u578b\u63a8\u7406\u7684\u8ba1\u7b97\u91cf \u516c\u5f0f\u89e3\u6790 # 1. \u7ebf\u6027\u91cf\u5316\u516c\u5f0f\uff1aFP32 \u6570\u503c\uff08Tensor Values\uff09\u88ab\u8868\u793a\u6210 INT8 \u6570\u503c\uff08INT8 array\uff09\u4e58\u4ee5\u91cf\u5316\u56e0\u5b50\u52a0\u4e0a\u4e00\u4e2a\u91cf\u5316\u504f\uff0c\u4e24\u4e2a\u53c2\u6570\u5747\u4e3a FP32 \u7c7b\u578b\u3002 Tensor Values = FP32 scale factor * INT8 array + FP32 bias # 2.\u5229\u7528\u4e0a\u8ff0\u7684\u516c\u5f0f\u53ef\u4ee5\u8868\u793a\u795e\u7ecf\u7f51\u7edc\u4e2d\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58 A = scale_A * QA + bias_A B = scale_B * QB + bias_B A * B = scale_A * scale_B * QA * QB + scale_A * QA * bias_B + scale_B * QB * bias_A + bias_A * bias_B # 2.1 NVIDIA\u7814\u7a76\u5458\u5b9e\u9a8c\u8868\u660e:\u5e76\u4e0d\u9700\u8981\u5728\u91cf\u5316\u7684\u65f6\u5019\u52a0\u4e0a\u504f\u7f6e(\u6211\u7406\u89e3:\u504f\u7f6e\u53ea\u662f\u6539\u53d8\u6570\u503c\u7684\u5206\u5e03\u4f4d\u7f6e),\u516c\u5f0f\u7b80\u5316 A * B = scale_A * scale_B * QA * QB # QA\u3001QB=F32A/scale_A\u3001F32B/scale_B # \u6240\u4ee5\u6700\u7ec8\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u5f97\u5230\u91cf\u5316\u53c2\u6570scale factor\u7684\u95ee\u9898 \u5982\u4f55\u9009\u53d6\u5408\u9002\u7684scale? \u4e0a\u9762\u662f\u6309\u7167\u7edd\u5bf9\u503c\u6700\u5927\u503c\u4f5c\u4e3a\u9600\u503c\uff0c\u4f46\u662f\u5f53\u6b63\u8d1f\u5206\u5e03\u4e0d\u5747\u5300\u7684\u65f6\u5019\uff0c\u662f\u6709\u4e00\u90e8\u5206\u662f\u7a7a\u7f3a\u7684\uff0c\u4e5f\u5c31\u662f\u4e00\u90e8\u5206\u503c\u57df\u88ab\u6d6a\u8d39\u4e86(\u8003\u8651\u6781\u7aef:\u6fc0\u6d3b\u503c\u5168\u4e3a\u6b63)\uff0c\u4e8e\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u8fd9\u4e48\u5e72\u7684: \u9009\u62e9\u5408\u9002\u7684\u9608\u503cT\u540e, \u5c06 \u00b1|T| \u6620\u5c04\u4e3a\u00b1127 ,\u8d85\u51fa \u9608\u503c \u00b1|T| \u5916\u7684\u76f4\u63a5\u6620\u5c04\u4e3a\u9608\u503c \u00b1127 \uff0c**\u5982\u4f55\u5bfb\u627e\u6700\u4f18\u7684\u9600\u503cT\u4f7f\u5f97\u7cbe\u5ea6\u7684\u635f\u5931\u6700\u5c0f\u5462\uff1f\u8fd9\u5c31\u53d8\u6210\u4e86\u6700\u4f18\u5316\u95ee\u9898\uff0c\u6211\u9996\u5148\u60f3\u5230\u7684\u662f\u635f\u5931\u51fd\u6570\uff0c\u800c\u4e14\u662f\u524d\u540e\u4e24\u8005\u7684\u5206\u5e03\u5dee\u5f02\u6700\u5c0f\uff0c\u90a3\u4e48\u7528 \u76f8\u5bf9\u71b5(KL\u6563\u5ea6) | \u535a\u5ba21 | \u535a\u5ba22 :\u7528\u4e8e**\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02 \uff0c\u5373\u7528\u76f8\u5bf9\u71b5\u6765\u63cf\u8ff0int8\u91cf\u5316\u540e\u7684\u503c\u5206\u5e03\u8ddff32\u7684\u503c\u5206\u5e03\u4e4b\u95f4\u7684\u4fe1\u606f\u91cf\u4e22\u5931\u7a0b\u5ea6, KL\u6563\u5ea6\u8d8a\u5c0f\u4ee3\u8868 INT8\u7f16\u7801\u540e\u7684\u4fe1\u606f\u635f\u5931\u8d8a\u5c11\u3002 \u622a\u65ad\u533a( -T~T )\u4e4b\u5916\u7684\u503c\u4e3a\u4ec0\u4e48\u8981\u52a0\u5230\u622a\u65ad\u533a\u5185\u6700\u540e\u4e00\u4e2a\u503c\u5462\uff1f \u4e00\u662f\u6c42P\u7684\u6982\u7387\u5206\u5e03\u65f6\uff0c\u9700\u8981\u603b\u7684P\u603b\u503c. \u4e8c\u5c06\u622a\u65ad\u533a\u4e4b\u5916\u7684\u52a0\u5230\u622a\u65adP\u7684\u6700\u540e\uff0c\u8fd9\u6837\u662f\u5c3d\u53ef\u80fd\u5730\u5c06\u622a\u65ad\u540e\u7684\u4fe1\u606f\u7ed9\u52a0\u8fdb\u6765\u3002 def get_KL (): # \u968f\u673a\u751f\u6210\u4e24\u4e2a\u79bb\u6563\u578b\u5206\u5e03 x = [ np . random . uniform ( 1 , 11 ) for i in range ( 10 )] px = x / np . sum ( x ) y = [ np . random . uniform ( 1 , 11 ) for i in range ( 10 )] py = y / np . sum ( y ) KL = 0.0 for i in range ( 10 ): KL += px [ i ] * np . log ( px [ i ] / py [ i ]) if KL < 0.1 : print ( x ) return KL \u8fd9\u6837\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u4e86\u6c42\u6982\u7387\u4e86\uff0c\u5373\u4e8b\u4ef6q\uff08int8\uff09\u5206\u5e03\u7684\u6982\u7387\u4ee5\u53ca\u4e8b\u4ef6p\uff08f32\uff09\u5206\u5e03\u7684\u6982\u7387\u3002 \u76f4\u65b9\u56fe( hist,bin_edges=np.histogram(arr,bins=xx,range=(min,max)) )\uff0c(\u9891\u6570,\u5206\u754c\u7bb1\u8fb9\u754c)\uff0c\u5373\u843d\u5230\u67d0\u4e2a\u6570\u503c\u8303\u56f4\u7684\u6570\u503c\u6709\u591a\u5c11\u4e2a\uff0c\u8fd9\u6837\u6570\u636e\u7684\u6982\u7387\u5206\u5e03\u5c31\u51fa\u6765\u4e86\u3002 int\u7c7b\u7684\u79bb\u6563\u70b9\u5404\u4e2a\u6982\u7387\u8fd8\u597d\u6c42\u4e00\u4e9b\uff0c\u76f4\u63a5\u7edf\u8ba1\u8fd9\u4e9b\u6574\u578b\u6570\u636e\u96c6\u5408hist\u5373\u53ef float\u5462\uff1f\u7cbe\u5ea6\u7406\u8bba\u4e0a\u662f\u5f88\u5c0f\u7684\u5440\uff0c\u5982\u4f55\u5b9a\u8fb9\u754c\u624d\u80fd\u628a\u6570\u636e\u5f52\u7c7b\u597d\uff1f\u56e0\u6b64\u5c31\u7c7b\u4f3c\u4e8e\u6574\u578b\u7684\u6211\u4eec\u5206bin\uff0c\u90a3\u4e48\u5206\u591a\u5c11\u4e2abin\u624d\u80fd\u6c42bin\u7684\u6982\u7387\uff1f\u770b\u4e0b\u56fe\uff0cbins\u8d8a\u591a\u5f53\u7136\u4f60\u548c\u7684\u8d8a\u597d\uff0c\u4f46\u7b97\u529b\u6709\u9650\u554a\uff0cNVIDAIA\u7ed9\u7684\u662f**2048**\u4e2abin\uff08maxnet\u4ee3\u7801\u91cc\u9762\u7ed9\u7684\u662f**8000**bins\uff09\uff0c\u6bd4128bin\u8981\u591a\uff0c\u4f46\u662f\u53c8\u4e0d\u4f1a\u591a\u5904\u592a\u591a\u4ece\u800c\u8fed\u4ee3\u592a\u591a\u5f71\u54cd\u8ba1\u7b97\u901f\u5ea6\uff01 NvidiA\u5904\u7406\u6d41\u7a0b \u63d0\u4f9b\u4e00\u4e2a\u6837\u672c\u6570\u636e\u96c6\uff08\u6700\u597d\u662f\u9a8c\u8bc1\u96c6\u7684\u5b50\u96c6:500/1000\u5f20\u5c31\u5dee\u4e0d\u591a\u4e86\uff0c\u4f46\u8981\u4fdd\u8bc1\u591a\u6837\u6027\uff09\uff0c\u79f0\u4e3a\u201c\u6821\u51c6\u6570\u636e\u96c6\u201d\uff0c\u5b83\u7528\u6765\u505a\u6240\u8c13\u7684\u6821\u51c6\u3002\u9996\u5148\u5728 \u6821\u51c6\u96c6\u4e0a \u8fdb\u884c FP32 inference \u63a8\u7406\uff0c\u7136\u540e\u5bf9\u7f51\u7edc\u6bcf\u5c42\u904d\u5386 \u6536\u96c6\u8fd9\u4e00\u5c42\u7684\u6fc0\u6d3b\u503c(\u7ecf\u8fc7\u6fc0\u6d3b\u51fd\u6570\u4e4b\u540e\u7684\u503c)\uff0c\u5e76\u505a \u76f4\u65b9\u56fe\uff08histograms \uff09\uff0c\u5206\u6210\u51e0\u4e2a\u7ec4\u522b\uff08bins\uff09\uff08\u5b98\u65b9\u7ed9\u7684\u4e00\u4e2a\u8bf4\u660e\u4f7f\u7528\u7684\u662f2048\u7ec4/maxnet\u662f8000\uff09\uff0c\u5206\u7ec4\u662f\u4e3a\u4e86\u4e0b\u9762\u904d\u5386 |T| \u65f6\uff0c\u51cf\u5c11\u904d\u5386\u6b21\u6570(\u8981\u4e0d\u7136\u4f60\u6bcf\u4e00\u4e2a\u503c\u90fd\u6d4b\u8bd5\u4e00\u6b21\uff0c\u90a3\u4e48\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u6d6e\u70b9\u503c\u6709\u65e0\u7a77\u4e2a\u4f60\u600e\u4e48\u6d4b\uff1f)\uff1b \u5bf9\u4e8e\u4e0d\u540c\u7684 \u9608\u503c |T| \u8fdb\u884c\u904d\u5386\uff0c\u56e0\u4e3a\u8fd9\u91cc |T|\u7684\u53d6\u503c\u80af\u5b9a\u5728 \u7b2c 128-2047 \u7ec4\u4e4b\u95f4(\u5982\u679c\u5c0f\u4e8e128\uff0c\u90a3\u76f4\u63a5\u4e00\u4e00\u5bf9\u5e94\u5c31\u884c\u4e86\uff0c\u7136\u540e\u8d85\u51fa \u9608\u503c \u00b1|T| \u5916\u7684\u76f4\u63a5\u6620\u5c04\u4e3a\u9608\u503c \u00b1127 \uff0c\u60f3\u5565\u597d\u4e8b\u5462)\uff0c\u6240\u4ee5\u5c31\u9009\u53d6\u6bcf\u7ec4\u7684\u4e2d\u95f4\u503c(\u7528\u8be5bin\u7684\u4e2d\u95f4\u503c\u4f5c\u4e3a\u8be5bin\u7684\u9608\u503c)\u8fdb\u884c\u904d\u5386\uff1b \u9009\u53d6\u4f7f\u5f97 KL_divergence(ref_distr, quant_distr) \u53d6\u5f97\u6700\u5c0f\u503c\u7684 |T|\u3002 \u8fd4\u56de\u4e00\u7cfb\u5217 |T|\u503c\uff0c\u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a |T|\u3002\u521b\u5efa CalibrationTable \uff0c\u9009\u53d6\u6700\u5c0f\u7684\u90a3\u4e2a\u5373\u53ef\uff1b\u5047\u8bbe \u6700\u540e \u4f7f\u5f97 KL\u6563\u5ea6\u6700\u5c0f\u7684|T|\u503c\u662f\u7b2c200\u7ec4\u7684\u4e2d\u95f4\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u539f\u6765 \u7b2c 0-200\u7ec4\u7684 \u6570\u503c\u7ebf\u6027\u6620\u5c04\u5230 0-128\u4e4b\u95f4\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u76f4\u63a5\u6620\u5c04\u5230128\u3002 \u6709\u4e2a\u5c0f\u95ee\u9898\uff0cReLU\u7684\u6fc0\u6d3b\u503c\u5168\u662f\u6b63\u503c\u554a\uff0c\u5982\u679c\u6309\u7167\u82f1\u4f1f\u8fbe\u7684PPT\u91cc\u8d70\uff0c\u90a3\u4e48\u91cf\u5316\u53ea\u91cf\u5316\u4e86\u6b63\u534a\u8f74\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u7684\u6fc0\u6d3b\u503c\u662f sigmoid/tanh/ELU \uff0c\u6709\u6b63\u6709\u8d1f\u554a\uff0c\u8d1f\u8f74\u4e0d\u8003\u8651\u90a3\u6570\u636e\u5206\u5e03\u7edd\u5bf9\u5dee\u5f02\u5f88\u5927\u3002\u56e0\u6b64\u5f97\u628a\u8d1f\u8f74\u8003\u8651\u8fdb\u53bb\u3002\u4f8b\u5982: \u4ecebin0\u4f4d\u7f6e\u5f00\u59cb\u5bf9\u79f0\u5411\u6b63\u8d1f\u65b9\u5411\u79fb\u52a8\u5bfb\u627e\u9971\u548c\u9600\u503c INT8\u91cf\u5316\u5b9e\u73b0-\u6821\u51c6\u7b97\u6cd5 #\u9996\u5148\u5206\u6210 2048\u4e2a\u7ec4\uff0c\u6bcf\u7ec4\u5305\u542b\u591a\u4e2a\u6570\u503c\uff08\u57fa\u672c\u90fd\u662f\u5c0f\u6570\uff09 Input : FP32 histogram H with 2048 bins : bin [ 0 ], \u2026 , bin [ 2047 ] # |T|\u7684\u53d6\u503c\u80af\u5b9a\u5728 \u7b2c128-2047 \u7ec4\u4e4b\u95f4,\u53d6\u6bcf\u7ec4\u7684\u4e2d\u70b9,\u4e3a\u4ec0\u4e48\u4ece128\u5f00\u59cb\u5462\uff1f\u56e0\u4e3a|T|\u6240\u5728\u7ec4i<=128\u7ec4\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u4e00\u4e00\u5bf9\u5e94\u5c31\u597d\u4e86 For i in range ( 128 , 2048 ): # \u9009\u53d6\u524d i \u7ec4\u6784\u6210P\uff0ci>=128 reference_distribution_P = [ bin [ 0 ] , ... , bin [ i - 1 ] ] outliers_count = sum ( bin [ i ] , bin [ i + 1 ] , \u2026 , bin [ 2047 ] ) #\u8fb9\u754c\u5916\u7684\u7ec4 #\u8fb9\u754c\u5916\u7684\u7ec4\u52a0\u5230\u8fb9\u754cP[i-1]\u4e0a\uff0c\u6ca1\u6709\u76f4\u63a5\u4e22\u6389 reference_distribution_P [ i - 1 ] += outliers_count P /= sum ( P ) # \u5f52\u4e00\u5316 # \u5c06\u524d\u9762\u7684P\uff08\u5305\u542bi\u4e2a\u7ec4\uff0ci>=128\uff09\uff0c\u6620\u5c04\u5230 0-128 \u4e0a\uff0c\u6620\u5c04\u540e\u7684\u79f0\u4e3aQ\uff0cQ\u5305\u542b128\u4e2a\u7ec4\uff0c\u4e00\u4e2a\u6574\u6570\u662f\u4e00\u7ec4 candidate_distribution_Q = quantize [ bin [ 0 ], \u2026 , bin [ i - 1 ] ] into 128 levels #\u8fd9\u65f6\u7684P\uff08\u5305\u542bi\u4e2a\u7ec4\uff0ci>=128\uff09\u548cQ\u5411\u91cf\uff08\u5305\u542b128\u4e2a\u7ec4\uff09\u7684\u5927\u5c0f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97\u4e8c\u8005\u7684KL\u6563\u5ea6 #\u56e0\u6b64\u9700\u8981\u5c06Q\u6269\u5c55\u4e3a i \u4e2a\u7ec4\uff0c\u4ee5\u4fdd\u8bc1\u8ddfP\u5927\u5c0f\u4e00\u6837 expand candidate_distribution_Q to \u2018 i \u2019 bins Q /= sum ( Q ) # \u5f52\u4e00\u5316 #\u8ba1\u7b97P\u548cQ\u7684KL\u6563\u5ea6\uff0c\u8fd9\u4e2a\u8981\u6c42len(P)==len(Q)\uff0c\u8fd9\u662f\u4e2a\u786c\u6027\u8981\u6c42 divergence [ i ] = KL_divergence ( reference_distribution_P , candidate_distribution_Q ) End For #\u627e\u51fa divergence[ i ] \u6700\u5c0f\u7684\u6570\u503c\uff0c\u5047\u8bbe divergence[m] \u6700\u5c0f\uff0c #\u90a3\u4e48|T|=( m + 0.5 ) * ( width of a bin ) Find index \u2018 m \u2019 for which divergence [ m ] is minimal threshold = ( m + 0.5 ) * ( width of a bin ) # \u5982\u4f55\u5c06Q\u6269\u5145\u5230\u548cP\u4e2a\u6570\u76f8\u7b49\uff1f\u4e3e\u4e2a\u5c0f\u4f8b\u5b50 P = [ 1 , 0 , 2 , 3 , 5 , 3 , 1 , 7 ] # \u8fd9\u91cc\u5047\u8bbe\u4e00\u4e2abin\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff0c\u6545\u67098\u4e2abin # \u6211\u4eec\u60f3\u628a\u5b83\u6620\u5c04\u4e3a 2 \u4e2abins\uff0c\u4e8e\u662f 4\u4e2a\u4e00\u7ec4\u5408\u5e76 [ 1 + 0 + 2 + 3 , 5 + 3 + 1 + 7 ] = [ 6 , 16 ] # \u7136\u540e\u8981\u6210\u6bd4\u4f8b\u7684 \u6269\u5c55\u56de\u5230 8\u4e2a\u7ec4\uff0c\u4fdd\u7559\u539f\u6765\u662f0\u7684\u7ec4 Q = [ 6 / 3 , 0 , 6 / 3 , 6 / 3 , 16 / 4 , 16 / 4 , 16 / 4 , 16 / 4 ] = [ 2 , 0 , 2 , 2 , 4 , 4 , 4 , 4 ] # \u5bf9P\u548cQ\u8fdb\u884c\u6807\u51c6\u5316 P /= sum ( P ) \u3001 Q /= sum ( Q ) # \u8ba1\u7b97\u6563\u5ea6 result = KL_divergence ( P , Q ) python\u5b9e\u73b0 # \u5b9e\u73b0\u4ee3\u7801 def threshold_distribution ( distribution , target_bin = 128 ): \"\"\" Return the best threshold value. Ref: https://github.com//apache/incubator-mxnet/blob/master/ python/mxnet/contrib/quantization.py Args: distribution: list, activations has been processed by histogram and normalize,size is 2048 target_bin: int, the num of bin that is used by quantize, Int8 default value is 128 Returns: target_threshold: int, num of bin with the minimum KL \"\"\" distribution = distribution [ 1 :] length = distribution . size threshold_sum = sum ( distribution [ target_bin :]) kl_divergence = np . zeros ( length - target_bin ) for threshold in range ( target_bin , length ): sliced_nd_hist = copy . deepcopy ( distribution [: threshold ]) # generate reference distribution p p = sliced_nd_hist . copy () p [ threshold - 1 ] += threshold_sum threshold_sum = threshold_sum - distribution [ threshold ] # is_nonzeros[k] indicates whether hist[k] is nonzero is_nonzeros = ( p != 0 ) . astype ( np . int64 ) # quantized_bins = np . zeros ( target_bin , dtype = np . int64 ) # calculate how many bins should be merged to generate # quantized distribution q num_merged_bins = sliced_nd_hist . size // target_bin # merge hist into num_quantized_bins bins for j in range ( target_bin ): start = j * num_merged_bins stop = start + num_merged_bins quantized_bins [ j ] = sliced_nd_hist [ start : stop ] . sum () quantized_bins [ - 1 ] += sliced_nd_hist [ target_bin * num_merged_bins :] . sum () # expand quantized_bins into p.size bins q = np . zeros ( sliced_nd_hist . size , dtype = np . float64 ) for j in range ( target_bin ): start = j * num_merged_bins if j == target_bin - 1 : stop = - 1 else : stop = start + num_merged_bins norm = is_nonzeros [ start : stop ] . sum () if norm != 0 : q [ start : stop ] = float ( quantized_bins [ j ]) / float ( norm ) # q[p == 0] = 0 p = _smooth_distribution ( p ) q = _smooth_distribution ( q ) # p[p == 0] = 0.0001 # q[q == 0] = 0.0001 # calculate kl_divergence between q and p kl_divergence [ threshold - target_bin ] = stats . entropy ( p , q ) min_kl_divergence = np . argmin ( kl_divergence ) threshold_value = min_kl_divergence + target_bin return threshold_value def _smooth_distribution ( p , eps = 0.0001 ): \"\"\"Given a discrete distribution (may have not been normalized to 1), smooth it by replacing zeros with eps multiplied by a scaling factor and taking the corresponding amount off the non-zero values. Ref: http://web.engr.illinois.edu/~hanj/cs412/bk3/KL-divergence.pdf \"\"\" is_zeros = ( p == 0 ) . astype ( np . float32 ) is_nonzeros = ( p != 0 ) . astype ( np . float32 ) n_zeros = is_zeros . sum () n_nonzeros = p . size - n_zeros if not n_nonzeros : raise ValueError ( 'The discrete probability distribution is malformed. All entries are 0.' ) eps1 = eps * float ( n_zeros ) / float ( n_nonzeros ) assert eps1 < 1.0 , 'n_zeros= %d , n_nonzeros= %d , eps1= %f ' % ( n_zeros , n_nonzeros , eps1 ) hist = p . astype ( np . float32 ) hist += eps * is_zeros + ( - eps1 ) * is_nonzeros assert ( hist <= 0 ) . sum () == 0 return hist smooth\u5904\u7406 # smooth\u5904\u7406\u7684\u539f\u56e0:\u8bc4\u4f30\u4fe1\u606f\u4e22\u5931\u60c5\u51b5\u7684, KL ( P,Q ) = sum ( i = 1 ..n ) [ p_i * log ( p_i / q_i ) ] # 1. \u5f53\u67d0\u4e9bqi=0\u6216\u8005pi=0\u65f6\u6211\u4eec\u600e\u4e48\u5904\u7406\uff1f\u4f8b\u5982 pi!=0 \u540c\u65f6 qi=0,\u7ed3\u679c\u65e0\u7a77\u5927......(\u8fd9\u5c31\u597d\u6bd4\u4e00\u4e2a\u5206\u5e03(P)\u8ba4\u4e3a\u67d0\u4e2a\u4e8b\u4ef6e\u662f\u53ef\u80fd\u5b58 \u5728\u7684\uff0c\u4f46\u662f\u53e6\u5916\u4e00\u4e2a\u5206\u5e03(Q)\u5374\u8ba4\u4e3a\u8be5\u4e8b\u4ef6\u5b8c\u5168\u4e0d\u53ef\u80fd\u5b58\u5728\uff0c\u56e0\u6b64\u8fd9\u4e24 \u4e2a\u5206\u5e03\u662f\u7edd\u5bf9\u7edd\u5bf9\u4e0d\u53ef\u80fd\u76f8\u540c\u7684\u3002),\u4f7f\u7528\u7edd\u5bf9\u51cf\u503c\u6cd5 # 2.\u7b97\u6cd5\u6d41\u7a0b P: a:1/2, b:1/4, c:1/4 Q: a:7/12, b:2/12, d:3/12 # \u7edd\u5bf9\u51cf\u503c\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a 1 . \u8bbe\u7f6e\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u91cfeps ( \u6bd4\u5982 eps = 0 .0001 ) \uff1b 2 . SP = { a, b, c } \u4eceP\u4e2d\u89c2\u5bdf\u5230\u7684\u6837\u672c\uff1b 3 . CP = | SP | = 3 , P\u5206\u5e03\u4e2d\u89c2\u5bdf\u5230\u7684\u6837\u672c\u7684\u6570\u91cf\uff1b 4 . SQ = { a, b, d } \uff1b 5 . CQ = 3 \uff1b 6 . SU = SP U SQ = { a, b, c, d } \u6240\u6709\u89c2\u5bdf\u5230\u7684\u6837\u672c\uff0c\u5373\u9650\u5b9a\u4e00\u4e2a\u5168\u96c6\uff1b 7 . CU = | SU | = 4 \u3002# \u6700\u7ec8\u7684\u6837\u672c\u957f\u5ea6 # \u6211\u4eec\u91cd\u65b0\u53ef\u4ee5\u5b9a\u4e49P\u548cQ\u7684\u5e73\u6ed1\u7248\u672c P\u2019\u5e73\u6ed1\u7248\u672c: 1 . P '(i) = P(i) - pc; if i in SP 2. P' ( i ) = eps ; otherwise for i in SU - SP Q\u2019\u5e73\u6ed1\u7248\u672c: 3 . Q '(i) = Q(i) - qc; if i in SP 4. Q' ( i ) = eps ; otherwise for i in SU - SP # \u6700\u7ec8\u7ed3\u679c\uff0c\u6839\u636e sum(P'(i)) = 1.0; sum(Q'(j)) = 1.0;\u7684\u7ea6\u675f\u6761\u4ef6\u53ef\u8ba1\u7b97\u51fapc\u548cqc P ': a:1/2-pc, b:1/4-pc, c:1/4-pc, d: eps pc = eps/3 Q' : a:7/12-qc, b:2/12-qc, c: eps, d:3/12-qc qc = eps/3 # \u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u516c\u5f0f pc = eps* (|| SU-SP || / || SP ||) qc = eps* (|| SU-SQ || / || SQ ||) Winograd\u5feb\u901f\u5377\u79ef \u00b6 \u6309\u7406\u8bf4int8\u91cf\u5316\u540e\u76f8\u6bd4\u4e8efp32\u7406\u8bba\u4e0a\u52a0\u901f4x\uff0c\u4f46\u662f\u4e5f\u8981\u7ecf\u8fc7fp32-to-int8-IO\u7684\u8f6c\u6362\u7b49\u989d\u5916\u64cd\u4f5c\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f9d\u7136\u4ec5\u4ec5\u80fd\u8fbe\u5230\u7ea61.2~1.5\u7684\u52a0\u901f\u6bd4\u3002 \u5982 NCNN \u3001 NNPACK \u7b49\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u5377\u79ef\u5c42\uff0c\u5927\u5bb6\u4e0d\u7ea6\u800c\u540c\u5730\u91c7\u7528\u4e86Winograd\u5feb\u901f\u5377\u79ef\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u51fa\u81ea Fast Algorithms for Convolutional Neural Networks \uff0c\u535a\u5ba2\u8be6\u89e3 link \uff0c\u4e3b\u8981\u601d\u60f3\u662f\u8ba9\u5377\u79ef\u7684\u4e58\u6cd5\u6570\u91cf\u66f4\u5c11\u3002 \u4e3e\u4f8b\u8bf4\u660eWinograd F(2x2,3x3)\u7684\u5b9e\u73b0\u7ec6\u8282 \u90a3\u4e48\u5269\u4e0b\u7684 g\u548cd \u8868\u793a\u4ec0\u4e48\uff1f Winograd F(2x2,3x3)\uff0c\u5230\u5e95\u5728\u8ba1\u7b97\u795e\u9a6c\uff1f \u201c2x2\u201d: **\u8f93\u51fa**4\u4e2a\u7ed3\u679c\uff08\u56e0\u4e3a2x2 = 4\uff09 \u201c3x3\u201d: \u5377\u79ef\u6838\u662f3x3\uff08conv3x3s1\u7684\u5377\u79ef\u6838\u5f53\u7136\u662f3x3\uff09 \u56e0\u6b64\uff0c\u9700\u8981\u8f93\u5165\u7684Feature Map\u5c31\u662f4x4\u7684matrix(\u8f93\u5165\u6570\u636e)\u3002 Y \u8f93\u51fa\u7684matrix[2,2]\uff0c4\u4e2a\u7ed3\u679c g \u5377\u79ef\u6838matrix[3,3]\uff0c9\u4e2a\u6570\u636e d \u8f93\u5165\u7684matrix[4,4]\uff0c16\u4e2a\u8f93\u5165 \u5982\u4f55\u5bf9\u5feb\u901f\u5377\u79ef\u8fdb\u884cint8\u5b9a\u70b9\u91cf\u5316\uff1f \u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5bf9Winograd\u7684\u8ba1\u7b97\u8fc7\u7a0b\u8fdb\u884c\u91cf\u5316\uff0c\u800c\u662f\u5c06\u91cf\u5316\u540e\u7684\u6570\u636e\u8fdb\u884cWinograd\u8ba1\u7b97\u3002\u9664\u4e86Matrix G\u4e2d\u67090.5\uff0c\u5176\u4ed6\u7684Matrix\u90fd\u662fInt8\u7684\u6574\u5f62\u6570\u636e\u4e86\u3002\u90a3\u4e48\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u5c06Matrix G\u53d8\u6210Int8\u6574\u5f62\u5c31\u884c\u4e86\uff1a G\u2019 = G x 2 \u6700\u540e\u6211\u4eec\u5f97\u5230\u7684Y\u2019\u518d\u9664\u4ee54\uff08\u4e3a\u4ec0\u4e48\u662f4\u4e0d\u662f2\u5462\uff1f\u56e0\u4e3a\u4e58\u4ee5\u4e86\u4e24\u6b21\u7684\uff0cG\u4e0eG^T\uff09\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684Y\u4e86\u3002\u6211\u4eec\u7684Int8 Convolution \u8ba1\u7b97\u6d41\u7a0b\u53d8\u5316\u5982\u4e0b\uff1a Int8 Convolution \u6d41\u7a0b\uff1a input_fp32 -> quantize -> int8-conv -> Int32 -> dequantize -> output_fp32 Int8 Winograd\u6d41\u7a0b\uff1a input_fp32 -> quantize -> int8-winograd -> Int32 -> dequantize -> output_fp32 \u4e8c\u503c\u6a21\u578b(BNN) \u00b6 \u535a\u5ba2\u603b\u7ed31 | \u535a\u5ba2\u603b\u7ed32 \u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u662f\u6743\u91cd(W)\u548c\u6fc0\u6d3b\u503c(X)\u7684\u5377\u79ef\u4e58\u52a0\u64cd\u4f5c(W*X) L1\u8303\u6570\u662f\u6307\u5411\u91cf\u4e2d\u5404\u4e2a\u5143\u7d20\u7edd\u5bf9\u503c\u4e4b\u548c\uff1bL2\u8303\u6570\u662f\u6307\u5411\u91cf\u5404\u5143\u7d20\u7684\u5e73\u65b9\u548c\u7136\u540e\u6c42\u5e73\u65b9\u6839 \u5b9e\u9645\u9879\u76ee\u4e2d\u4e00\u76f4\u5728\u7528\u7684 binary_conv \u56fe\u793a\u7ed3\u679c\u5982\u4e0b\uff0c\u5176\u5b9e\u5c31\u662f BWN (\u4e0d\u540c\u5377\u79ef\u6838\u7684\u7edd\u5bf9\u503c**\u76f8\u540c**)\u6539\u7248\uff0c\u6bcf\u4e2a\u5377\u79ef\u6838\u81ea\u8eab\u7684\u7edd\u5bf9\u503c\u90fd\u76f8\u540c( c_in,k_h,k_w )\u3010caffe/pytorch\u7684\u5377\u79ef\u6838\u7ef4\u5ea6\u4e00\u6837\u3011\uff0c\u4f46\u4e0d\u540c\u5377\u79ef\u6838\u7684\u7edd\u5bf9\u503c**\u4e0d\u76f8\u540c**\uff1a \u5f00\u5c71\u4e4b\u4f5c:\u300aBinaryNet: Training Deep Neural Networks with Weights and Activations Constrained to +1 or -1.\u300b \u5b83\u9996\u6b21\u63d0\u51fa\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u5f0f\u8bad\u7ec3\u540c\u65f6\u4f7f\u7528\u4e8c\u503c\u5316\u7684 weights \u548c activations \u7684\u795e\u7ecf\u7f51\u7edc\u3002\u4e8c\u503c\u6743\u91cd {-1,1} \u66ff\u4ee3\u6d6e\u70b9\u6743\u91cd\uff0c\u4f5c\u8005\u901a\u8fc7 sign \u51fd\u6570\u83b7\u53d6: W_binary = sign(W_float32) \u5bf9\u4e8e sign \u51fd\u6570\u5728 0 \u5904\u4e0d\u53ef\u5bfc\uff0c\u5176\u4ed6\u5012\u6570\u4e3a 0 \u65e0\u6cd5\u8fdb\u884c\u68af\u5ea6\u4f20\u9012\uff0c\u6240\u4ee5\u4f5c\u8005\u8bbe\u8ba1\u4e86**\u76f4\u901a\u4f30\u8ba1\u5668\uff1a STE **\uff0c\u5373\u4f7f\u7528 clip(-1,x,1) \u7684\u5bfc\u6570\u6765\u62df\u5408 sign \u7684\u5bfc\u6570\u3002 \u5176\u5b9e\u8bba\u6587\u4e2d\u6743\u91cd\u4e8c\u503c\u5316\u53cd\u5411\u4f20\u64ad\u65f6\u9047\u5230 sign \u51fd\u6570\u76f4\u63a5\u4e3a\u8f93\u5165\u7684\u68af\u5ea6(\u76f8\u5f53\u4e8e src_grad*1 )\uff0c\u6fc0\u6d3b\u4e8c\u503c\u5316\u662f clip(-1,x,1) \u51fd\u6570\u7684\u68af\u5ea6\u62df\u5408 sign \uff0c\u4e5f\u5c31\u662f\u8bf4 output_grad = abs(input)>1--->grad==0*src_grad \uff0c\u5f53 output_grad = abs(input)<=1--->1*src_grad # \u5982\u679c\u8981\u8fdb\u884c\u6fc0\u6d3b\u4e8c\u503c\u5316\uff0c\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u53c2\u6570\u4e0d\u80fd\u662f\u4e8c\u503c\uff0c\u56e0\u4e3a\u56fe\u7247\u662f8bit\uff0c\u5982\u679c\u76f4\u63a5\u4e8c\u503c\u5316\uff0c\u4e22\u5931\u4fe1\u606f\u8fc7\u591a # 1. \u5bf9\u6fc0\u6d3b\u503c\u8fdb\u884c\u4e8c\u503c\u5316\u7684\u5177\u4f53\u5b9e\u73b0 class BinActive ( torch . autograd . Function ): ''' Binarize the input activations for ***** BNN and XNOR *****. ''' @staticmethod def forward ( ctx , input ): ctx . save_for_backward ( input ) input = input . sign () # \u4f7f\u7528y=x\u51fd\u6570\u62df\u5408\u68af\u5ea6 return input @staticmethod def backward ( ctx , grad_output , ): input , = ctx . saved_tensors grad_input = grad_output . clone () # \u5f00\u5c71\u4e4b\u4f5cBNN\u4e2d\u6fc0\u6d3b\u503c:\u5f53sign\u51fd\u6570\u7684\u8f93\u5165\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u5c06\u68af\u5ea6\u7f6e0\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002 grad_input [ input . ge ( 1 )] = 0 grad_input [ input . le ( - 1 )] = 0 # \u6700\u7ec8\u7684\u68af\u5ea6\u7ed3\u679c\u5c31\u662fsign\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u4f7f\u7528clip(-1,x,1)\u51fd\u6570\u6765\u62df\u5408 return grad_input # \u5f53\u5728[-1,1]\u8303\u56f4\u5185\uff0c\u8f93\u5165\u68af\u5ea6\u662f\u5565\u76f4\u63a5\u8fd4\u56de\u5565\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u8be5\u9608\u503c\u51fd\u6570\u7684\u5b9e\u9645\u5bfc\u6570 # 2.\u5bf9\u6743\u91cd\u8fdb\u884c\u4e8c\u503c\u5316 class Binary_w ( torch . autograd . Function ): @staticmethod def forward ( self , input ): output = torch . sign ( input ) return output @staticmethod def backward ( self , grad_output ): #*******************ste********************* grad_input = grad_output . clone () return grad_input \u8fd9\u6837 weights \u4e8c\u503c\u5316{-1,+1},\u6fc0\u6d3b\u503c activation \u4e8c\u503c\u5316{-1,+1},\u5377\u79ef\u8fc7\u7a0b\u4e24\u8005\u53ea\u8981\u8fdb\u884c XNOR+bitcout \u8ba1\u7b97\u4ee3\u66ff float32 \u7684\u7d2f\u4e58\u64cd\u4f5c\uff0c\u901f\u5ea6\u63d0\u5347\u5f88\u5927\u3002 XNOR-Net \u8bba\u6587 | \u4ee3\u7801 \u8be5\u7bc7\u8bba\u6587\u63d0\u51fa BWN+XNOR-Net \u4e24\u79cd\u4e8c\u503c\u5316\u7f51\u7edc\u3002 BWN(Binary Weight Networks) :\u53ea\u5bf9 weights \u4e8c\u503c\u5316{-1,+1}\uff0c\u5bf9\u4e8e activation \u4ecd\u7136\u91c7\u7528 float32 \u5168\u7cbe\u5ea6\uff0c\u7cbe\u5ea6\u5f71\u54cd\u4e0d\u5927( resnet18 \u9664\u5916)\u3002 W_float= a*B , a :\u662f\u5c3a\u5ea6\u53c2\u6570, B \u662f\u4e8c\u503c\u77e9\u9635{-1,1}\uff0c a \u7684\u6700\u4f18\u503c= np.sum(abs(w)) / n \uff08\u6743\u91cd\u7684L1\u8303\u6570\u7684\u5747\u503c\uff09 \u63a8\u7406\u6b65\u9aa4: XNOR-Net \u662f weights \u548c activation \u90fd\u8fdb\u884c\u4e8c\u503c\u5316 \u6743\u91cd(W)\u4e8c\u503c\u5316\uff1a W_float= a*B \uff0c\u540c\u4e0a \u6fc0\u6d3b\u503c(X)\u4e8c\u503c\u5316\uff1a X_float = \u03b2*H , H \u662f\u4e8c\u503c\u77e9\u9635{-1,1}, \u03b2 \u7684\u6700\u4f18\u503c\u662f np.sum(abs(X)) / n \uff08\u8f93\u5165X\u7684L1\u8303\u6570\u7684\u5747\u503c\uff09 XNOR-Net \u7684\u4e8c\u503c\u64cd\u4f5c\u8fc7\u7a0b\uff1a Bi-Real Net \u8bba\u6587 | \u535a\u5ba2 | code | \u7efc\u5408\u4ee3\u7801 \u4f5c\u8005\u53d1\u73b0\u5e38\u7528\u7684\u4e8c\u503c\u5316\u7f51\u7edc\u6709\u4e24\u4e2a\u7f3a\u9677 1-bit CNN \u7684\u8868\u8fbe\u80fd\u529b\u672c\u8eab\u5f88\u6709\u9650\uff0c\u4e0d\u5982\u5b9e\u6570\u503c\u7684\u7f51\u7edc\u3002 Bi-Real-Net \u501f\u7528 \u6b8b\u5dee\u7684\u601d\u60f3\uff0c\u7528shortcut \u4f20\u9012\u7f51\u7edc\u4e2d\u5df2\u6709\u7684\u5b9e\u6570\u503c \uff0c\u4ece\u800c\u63d0\u9ad8\u4e8c\u503c\u5316\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b\u3002 \u5377\u79ef\u53c2\u6570 {-1,1} \uff0c\u6fc0\u6d3b\u503c {-1,1} \uff0c\u8fdb\u884c xnor+bitcout \u64cd\u4f5c\uff0c\u7ed3\u679c\u51fa\u73b0\u975e{-1,1}\u7684**\u5b9e\u6570\u503c**\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b9e\u6570\u503c\u7684\u8f93\u51fa\u5982\u679c\u7ecf\u8fc7\u4e0b\u4e00\u5c42\u4e8c\u503c\u5377\u79ef\u5c31\u53c8\u4f1a\u88ab\u4e8c\u503c\u5316\uff0c\u9020\u6210\u6781\u5927\u7684\u4fe1\u606f\u4e22\u5931\u3002 1-bit CNN \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6709\u5bfc\u6570\u4e0d\u5339\u914d\u7684\u95ee\u9898\u5bfc\u81f4\u96be\u4ee5\u6536\u655b\u5230\u5f88\u597d\u7684\u7cbe\u5ea6 \u6fc0\u6d3b\u503c\u6c42\u5bfc\u65f6\uff0c\u5e38\u7528 clip(-1,x,1) \u6765\u62df\u5408 sign \u51fd\u6570\u7684\u5bfc\u6570\uff1b\u4f46\u662f clip \u51fd\u6570\u4e0e sign \u51fd\u6570\u6709\u5dee\u8ddd\uff08\u7070\u8272\u659c\u7ebf\uff09\uff0c\u8fd9\u79cd\u8ba1\u7b97\u65b9\u5f0f\u4f1a\u5e26\u6765\u6240\u8c13\u7684**\u5bfc\u6570\u503c\u4e0d\u5339\u914d\u7684\u95ee\u9898**\u3002\u63d0\u51fa**\u7528\u4e8c\u9636\u62df\u5408 sign \u7684 ApproxSign \u7684\u5bfc\u6570\u6765\u4f5c\u4e3a sign \u7684\u5bfc\u6570\uff0c\u4ece\u800c\u7f29\u5c0f\u5bfc\u6570\u503c\u7684\u4e0d\u5339\u914d\u95ee\u9898**\u3002\u8fd9\u4e2a\u5e26\u6765\u4e86**\u7ea6 12% \u7684\u6027\u80fd\u63d0\u5347**\u3002 \u4f7f\u7528 Clip \u51fd\u6570\u4ee3\u66ff ReLU \u51fd\u6570\u6548\u679c\u66f4\u597d\uff0c\u56e0\u4e3a x->{-1,1} \uff0c\u4f7f\u7528\u622a\u65ad\u51fd\u6570\u4f1a\u66f4\u5feb\u6536\u655b\u3002 \u8c03\u53c2\u5c0f\u6280\u5de7 \u00b6 ACCV\u7ec6\u7c92\u5ea6\u8bc6\u522b\u6bd4\u8d5b\u67d0\u5206\u4eab\u4ee3\u7801 | \u535a\u5ba2 Warm up :\u5982\u679c\u6a21\u578b\u662f\u4ece\u5934\u8bad\u7ec3(\u6a21\u578b\u6743\u91cd\u968f\u673a\u521d\u59cb\u5316)\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5c0f\u7684\u5b66\u4e60\u7387\u5148\u8bad\u7ec3\u51e0\u4e2a epoch \uff0c\u5047\u5982\u4e00\u5f00\u59cb\u5c31\u91c7\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\u5bb9\u6613\u51fa\u73b0\u6570\u503c\u4e0d\u7a33\u5b9a\uff1b\u5982\u679c\u6a21\u578b\u6bd4\u8f83\u96be\u8bad\u7ec3\u53ef\u4ee5\u8003\u8651\u5982\u4e0b\u7b56\u7565:\u5982\u679c\u662f\u666e\u901a\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u4f7f\u7528 ImageNet \u7684\u9884\u8bad\u7ec3\u6a21\u578b\u521d\u59cb\u5316\u6743\u91cd\uff0c\u5982\u679c\u662f\u7ec6\u7c92\u5ea6\u5206\u7c7b\u53ef\u4ee5\u4f7f\u7528 CUB-200-2011 (Caltech-UCSD Birds-200-2011:\u7ec6\u7c92\u5ea6\u8bc6\u522b\u6570\u636e\u96c6,\u6ce8\u610f\u6d4b\u8bd5\u96c6\u4e0eImageNet\u8bad\u7ec3\u96c6\u6709\u91cd\u53e0)\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u521d\u59cb\u5316\u6743\u91cd\u3002\u603b\u7ed3:\u65e0\u8bba\u662f\u6bd4\u8d5b\u8fd8\u662f\u5176\u4ed6\uff0c\u6700\u597d\u5148\u627e\u516c\u5f00\u6570\u636e\u96c6\u8bad\u7ec3\u4e2abaseline\u518d\u505a\u6a21\u578b\u8fc1\u79fb\u5373\u53ef\u3002 \u591a\u8bad\u7ec3\u51e0\u4e2aepochs\uff0c\u5e73\u5747\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u66f4\u597d\u7684\u6a21\u578b\u3002\u4e00\u822c\u8bad\u7ec3\u540e\uff0c\u9009\u53d6\u6700\u4f18\u6a21\u578b\uff0c\u4f7f\u7528\u8be5\u6a21\u578b\u8fdb\u884c\u56fa\u5b9a\u5b66\u4e60\u7387( 2e-4 \u6216\u8005\u4f59\u5f26\u9000\u706b\u5b66\u4e60\u7387:\u6548\u679c\u66f4\u597d\uff0c pytorch \u4e2d\u6709\u5b9e\u73b0: CosineAnnealingLR )\u6765\u591a\u8bad\u7ec3\u7ed3\u679cepoch\uff0c\u5e73\u5747\u5176\u6743\u91cd\u5373\u53ef\u3002 \u4f59\u5f26\u9000\u706b\u5b66\u4e60\u7387:\u8bbe\u7f6e\u4e00\u4e2a\u57fa\u7840\u5b66\u4e60\u7387(0.02),\u7136\u540e\u8bbe\u7f6e T_0=5,T_mult=x(x>=1) ,\u90a3\u4e48\u6bcf\u5230 epoch=5,(1+T_mult)*T_0,(1+T_mult+T_mult**2)*T_0,... \u5904\u56de\u5230\u6700\u5927\u7684\u5b66\u4e60\u7387(0.02)\uff0c\u5176\u4ed6epoch\u4f1a\u81ea\u52a8\u6309\u7167cosin\u4e0b\u964d\u5b66\u4e60\u7387 \u4f7f\u7528 fp16 \u548c fp32 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff0c\u53ef\u4ee5\u5feb\u901f\u6536\u655b\uff0c\u5c24\u5176\u662f\u5bf9\u4eba\u8138\u8bc6\u522b\u8bad\u7ec3\u6765\u8bf4\u3002 \u6570\u636e\u5904\u7406\uff0c\u5982\u679c\u6570\u636e\u91cc\u9762\u6709\u810f\u6570\u636e\uff0c\u53ef\u4ee5\u5148\u8bad\u7ec3\u4e00\u4e2a baseline \uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7c7b\u522b\u7684 feature \u8fdb\u884c\u805a\u7c7b\uff0c\u805a 2 \u4e2a\u7c7b\uff0c\u54ea\u4e2a\u7c7b\u522b\u7684\u6570\u636e\u91cf\u591a\u5c31\u9009\u54ea\u4e2a\u505a\u4e3a\u6b63\u4f8b\uff0c\u540c\u65f6\u6309\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u8fdb\u884c\u5c11\u91cf\u8d1f\u4f8b\u91c7\u6837(\u5927\u6982\u662f 10% \u3002 \u5e38\u89c4\u7684\u6570\u636e\u589e\u5f3a\uff1a\u968f\u673a\u88c1\u526a\uff0c\u89d2\u5ea6\u65cb\u8f6c\uff0c\u4eae\u5ea6/\u5bf9\u6bd4\u5ea6\u8c03\u8282\u7b49 \u4f7f\u7528 Mixup \u3001 Cutout \u3001 Cutmix(\u4e00\u822c\u66f4\u4f18) \u5bf9\u6bd4\u9009\u62e9\u6548\u679c\u597d\u7684\u518d\u914d\u5408 labelsmooth \u4e00\u8d77\u3002 Mixup :\u5c06\u968f\u673a\u7684\u4e24\u5f20\u6837\u672c\u6309\u6bd4\u4f8b\u6df7\u5408\uff0c\u5206\u7c7b\u7684\u7ed3\u679c\u6309\u6bd4\u4f8b\u5206\u914d\uff1b Cutout :\u968f\u673a\u7684\u5c06\u6837\u672c\u4e2d\u7684\u90e8\u5206\u533a\u57dfcut\u6389\uff0c\u5e76\u4e14\u586b\u51450\u50cf\u7d20\u503c\uff0c\u5206\u7c7b\u7684\u7ed3\u679c\u4e0d\u53d8\uff1b CutMix :\u5c31\u662f\u5c06\u4e00\u90e8\u5206\u533a\u57dfcut\u6389\u4f46\u4e0d\u586b\u51450\u50cf\u7d20\u800c\u662f\u968f\u673a\u586b\u5145\u8bad\u7ec3\u96c6\u4e2d\u7684\u5176\u4ed6\u6570\u636e\u7684\u533a\u57df\u50cf\u7d20\u503c\uff0c\u5206\u7c7b\u7ed3\u679c\u6309\u4e00\u5b9a\u7684\u6bd4\u4f8b\u5206\u914d \u4f7f\u7528**cosinelr**\u6765\u8870\u51cf\u5b66\u4e60\u7387(\u4f59\u5f26\u51fd\u6570\u8870\u51cf)\uff0c\u5e26\u6709\u52a8\u91cf\u7684 SGD \u5982\u679c\u4f60\u7684**\u5206\u7c7b\u7cbe\u5ea6\u4e0d\u591f\u662f\u56e0\u4e3a\u6709\u4e24\u7c7b\u6216\u8005\u591a\u7c7b\u592a\u76f8\u8fd1\u9020\u6210\u7684**\uff0c\u8003\u8651\u4f7f\u7528\u5176\u4ed6 softmax \uff0c\u6bd4\u5982**amsoftmax**\u3002 \u5982\u679c\u4f60\u7684\u5206\u7c7b\u7cbe\u5ea6\u4e0d\u591f\u662f**\u6837\u672c\u4e0d\u5747\u8861**\u9020\u6210\u7684\uff0c\u8003\u8651\u4f7f\u7528 focal loss \u5c3d\u53ef\u80fd\u4f7f\u7528\u5168\u5377\u79ef\u7f51\u7edc\u6765\u505alandmark\uff0c\u4e0d\u8981\u76f4\u63a5\u7528fc\u56de\u5f52\uff0c\u56de\u5f52\u771f\u7684\u4e0d\u592a\u7a33\u5b9a \u76ee\u6807\u8ffd\u8e2a \u00b6 Sort(\u591a\u76ee\u6807\u8ddf\u8e2a) \u4ee5 IOU \u4f5c\u4e3a\u524d\u540e\u4e24\u5e27\u95f4\u76ee\u6807\u5173\u7cfb\u5ea6\u91cf\u6307\u6807 \u5229\u7528**\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668**\u9884\u6d4b\u4fee\u6b63\u5f97\u5230\u4e0b\u4e00\u5e27\u76ee\u6807\u7684\u7cbe\u51c6\u6846(OpenCV\u4e2d\u5df2\u5b9e\u73b0)\u3002 \u601d\u60f3:\u4e0b\u4e00\u5e27\u6a21\u578b\u5bf9A\u7684\u9884\u6d4b\u6846+\u5bf9A\u76ee\u6807\u7684\u8f68\u8ff9\u7684\u9884\u6d4b\u6846+\u4e24\u6846\u7684\u8bef\u5dee\uff0c\u5229\u7528\u5361\u5c14\u66fc\u6ee4\u6ce2\u65b9\u7a0b\u8ba1\u7b97\u51fa\u6700\u4f18\u6846 \u901a\u8fc7**\u5308\u7259\u5229\u7b97\u6cd5(\u5339\u914d\u7ebf\u5730\u4f4d\u76f8\u540c) \u5bf9\u524d\u540e\u4e24\u5e27\u4e2d\u7684\u6846\u8fdb\u884c\u5339\u914d(\u5bfb\u627e\u6700\u4f18\u89e3)\uff0c\u8fdb\u5316\u7248\u662f:**KM\u7b97\u6cd5(\u5339\u914d\u7ebf\u5e26\u6743\u91cd) \u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4f46\u662f\u5b9e\u9645\u4ee3\u7801\u662fKM\u7b97\u6cd5\u3002 DeepSort(\u540c\u4e00\u56e2\u961f) \u6574\u4f53\u6ca1\u5565\u6539\u53d8\uff0c\u4e3b\u8981\u6539\u53d8\u6709\u4e24\u70b9: \u52a0\u5165\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\uff0c\u8f93\u5165\u4e00\u5f20\u56fe\u7247\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5411\u91cf\uff0c\u901a\u8fc7\u6bd4\u5bf9\u4e24\u4e2a\u5411\u91cf(128\u7ef4\u5ea6)\u4e4b\u95f4\u7684\u4f59\u5f26\u8ddd\u79bb\uff0c\u6765\u5224\u65ad\u4e24\u526f\u8f93\u5165\u56fe\u7247\u662f\u5426\u662f\u540c\u4e00\u4e2a\u76ee\u6807(\u5728\u884c\u4eba\u91cd\u8bc6\u522b\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u7684)\u3002 TensorRT \u00b6 TensorRT\u4e3a\u4ec0\u4e48\u80fd\u52a0\u901f?(\u5355\u7cbe\u5ea6 FP32 \u534a\u7cbe\u5ea6 FP16 ) TensorRT\u652f\u6301 FP16 \u6216\u8005 INT8 \u7684\u8ba1\u7b97\uff0c\u800c\u63a8\u7406\u7cbe\u5ea6\u4e0d\u53d1\u751f\u660e\u663e\u7684\u964d\u4f4e\u3002\u53ea\u652f\u6301\u63a8\u7406\uff0c\u4e0d\u652f\u6301\u8bad\u7ec3\uff0c\u8bad\u7ec3\u9636\u6bb5\u56e0\u4e3a\u8981\u8fdb\u884c\u68af\u5ea6\u66f4\u65b0\uff0c\u8bad\u7ec3\u540e\u671f\u6bcf\u6b21\u68af\u5ea6\u66f4\u65b0\u662f\u5fae\u5c0f\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u9ad8\u53c2\u6570\u9700\u8981\u9ad8\u7cbe\u5ea6\uff0c\u4f8b\u5982float32\uff0c\u4f46\u662f\u53ea\u662f\u63a8\u7406\u7684\u8bdd\u5bf9\u7cbe\u5ea6\u8981\u6c42\u5e76\u4e0d\u9ad8\uff0c\u6240\u4ee5\u53ef\u4ee5\u964d\u4f4e\u7cbe\u5ea6\u3002 TensorRT\u5bf9\u4e8e\u7f51\u7edc\u7ed3\u6784\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u628a\u4e00\u4e9b\u80fd\u591f\u5408\u5e76\u7684\u8fd0\u7b97\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u800c\u4e14\u9488\u5bf9NVIDIA\u663e\u5361\u505a\u4e86\u591a\u65b9\u9762\u4f18\u5316\u3002 \u5b83\u628a\u4e00\u4e9b\u7f51\u7edc\u5c42\u8fdb\u884c\u4e86\u5408\u5e76 \uff1a\u6bd4\u5982 \u4e00\u4e2a\u5377\u79ef\u5c42\u3001\u4e00\u4e2a\u504f\u7f6e\u5c42\u548c\u4e00\u4e2arelu\u5c42 \uff0c\u8fd9\u4e09\u5c42\u662f\u9700\u8981\u8c03\u7528\u4e09\u6b21cuDNN\u5bf9\u5e94\u7684API\uff0cTensorRT\u5bf9\u6b64\u8fdb\u884c\u4e86\u5408\u5e76\u3002 \u53d6\u6d88 concat \u5c42 \uff1a\u5728concat\u8fd9\u4e00\u5c42\uff0c\u6bd4\u5982\u8bf4\u8fd9\u8fb9\u8ba1\u7b97\u51fa\u6765\u4e00\u4e2a 1\u00d73\u00d724\u00d724 \uff0c\u53e6\u4e00\u8fb9\u8ba1\u7b97\u51fa\u6765 1\u00d75\u00d724\u00d724 \uff0cconcat\u5230\u4e00\u8d77\uff0c\u53d8\u6210\u4e00\u4e2a1\u00d78\u00d724\u00d724\u7684\u77e9\u9635\uff0c\u8fd9\u4e2a\u53ebconcat\u8fd9\u5c42\u8fd9\u5176\u5b9e\u662f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3aTensorRT\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u76f4\u63a5\u63a5\u5230\u9700\u8981\u7684\u5730\u65b9\uff0c\u4e0d\u7528\u4e13\u95e8\u505aconcat\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u4e00\u5c42\u4e5f\u53ef\u4ee5\u53d6\u6d88\u6389\u3002 TensorRT\u7684\u6d41\u7a0b \u89e3\u6790\u5668\u89e3\u6790\u6a21\u578b \uff1a\u9996\u5148\u8f93\u5165\u4e00\u4e2a\u9884\u5148\u8bad\u7ec3\u597d\u7684 FP32 \u7684\u6a21\u578b\u548c\u7f51\u7edc\uff0c\u5c06\u6a21\u578b\u901a\u8fc7 parser\uff08\u89e3\u6790\u5668\uff09 \u7b49\u65b9\u5f0f\u8f93\u5165\u5230 TensorRT \u4e2d \u5728\u8fd9\u4e2a\u89e3\u6790\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u6a21\u578b\u7684 DataType \u662f\u7528 FP16 \u8fd8\u662f\u4f7f\u7528 INT8 \uff0c FP32->FP16 \uff0c\u4ec5\u4ec5 Tesla P100/V100 \u652f\u6301 FP16 ?\u5982\u679c\u53ea\u662f\u4f7f\u7528 float 16 \u7684\u6570\u636e\u7cbe\u5ea6\u4ee3\u66ff float-32 \uff0c \u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u6709\u591a\u5927\u7684\u6027\u80fd\u63d0\u5347\u3002\u771f\u6b63\u63d0\u5347\u6027\u80fd\u7684\u662f half2mode \uff0c\u5373\u4f7f\u7528\u4e86\u4ea4\u53c9\u5b58\u5b58\u50a8\u65b9\u5f0f\u7684\u6a21\u5f0f(\u56fe\u7247\u4e0a\u76f8\u90bb\u533a\u57df\u7684 tensor \u662f \u4ee516\u4f4d \u4ea4\u53c9\u5b58\u50a8\u7684\u65b9\u5f0f\u5b58\u5728\u7684 \u94fe\u63a5 ) FP32->INT8 ,\u6ce8\u610f\uff0c\u8fd9\u91cc\u4f20\u5165\u7684 DataType::KFLOAT \uff0c\u662fFP32\uff0c\u56e0\u4e3aINT8 \u9700\u8981\u5148\u7528FP32\u7684\u7cbe\u5ea6\u6765\u786e\u5b9a\u8f6c\u6362\u7cfb\u6570\uff0cTensorRT\u81ea\u5df1\u4f1a\u5728\u5185\u90e8\u8f6c\u6362\u6210INT8\u3002 TensorRT\u5f15\u64ce \uff1a\u6a21\u578b\u89e3\u6790\u540e\uff0cengine\u4f1a\u8fdb\u884c\u6a21\u578b\u4f18\u5316\uff0c\u5f97\u5230\u4f18\u5316\u597d\u7684engine\u53ef\u4ee5**\u5e8f\u5217\u5316\u5230\u5185\u5b58\uff08buffer\uff09\u6216\u6587\u4ef6\uff08file\uff09 \uff0c\u8bfb\u7684\u65f6\u5019\u9700\u8981**\u53cd\u5e8f\u5217\u5316 \uff0c\u5c06\u5176\u53d8\u6210engine\u4ee5\u4f9b\u4f7f\u7528\u3002\u7136\u540e\u5728\u6267\u884c\u7684\u65f6\u5019\u521b\u5efacontext(\u4e0a\u4e0b\u6587)\uff0c\u4e3b\u8981\u662f\u5206\u914d\u9884\u5148\u7684\u8d44\u6e90\uff0cengine\u52a0context\u5c31\u53ef\u4ee5\u505a\u63a8\u65ad\uff08Inference\uff09\u3002 \u6269\u5c55 TensorRT5\u52a0\u901fyolov3 caffe\u7248\u672c\u7684yolov3\u52a0\u901f\uff0c\u7136\u540e\u5b9e\u9645\u8fd0\u7528\u5230\u9879\u76ee\u4e0a\u540e\uff0c\u53d1\u73b0\u539f\u59cb\u6a21\u578b\u5728TX2\uff08\u4f7f\u7528TensorRT\u52a0\u901f\u540e\uff0cFP16\uff09\u4e0a\u8fd0\u884c260ms\uff0c\u8fdb\u884cL1 \u6392\u5e8f\u526a\u679d\u540e\u539f\u59cb\u6a21\u578b\u7531246.3M\u538b\u7f29\u523064.8M\uff0c\u4f46\u662f\u65f6\u95f4\u8fd0\u884c\u53ea\u63d0\u901f\u5230\u4e86142ms \u5e38\u7528\u76ee\u6807\u68c0\u6d4b\u635f\u5931\u51fd\u6570 \u00b6 L1\u6216L2\u4e00\u822c\u4e0d\u7528\u4f5c\u6846\u56de\u5f52\u635f\u5931\u7684\u539f\u56e0 L1 loss \u7684\u5bfc\u6570\u4e3a\u5e38\u6570\uff0c\u5728\u8bad\u7ec3\u540e\u671f\uff0c x \u5f88\u5c0f\u65f6\uff0c\u5982\u679c lr \u4e0d\u53d8\uff0c\u635f\u5931\u51fd\u6570\u4f1a\u5728\u7a33\u5b9a\u503c\u9644\u8fd1\u6ce2\u52a8\uff0c\u5f88\u96be\u6536\u655b\u5230\u66f4\u9ad8\u7cbe\u5ea6\u3002 L2 loss \u8bad\u7ec3\u521d\u671f\uff0c x \u503c\u5f88\u5927\u65f6\uff0c\u5176\u5bfc\u6570\u4e5f\u5f88\u5927\uff0c\u8bad\u7ec3\u521d\u671f\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002 Smooth L1 Loss \u5b9a\u4e49 \u5b9e\u9645\u76ee\u6807\u68c0\u6d4b\u6846\u56de\u5f52loss \u9884\u6d4b\u7684\u6846\u5750\u6807\uff1a GT \u7684\u6846\u5750\u6807\uff1a \u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u6c42\u548c sum \uff0c\u4e5f\u6709\u7684\u4f1a\u6c42\u5747\u503c mean \u7f3a\u70b9 \u8fd9\u91cc\u5148\u6c42\u51fa\u56db\u4e2a\u70b9\u7684loss\uff0c\u518d\u76f8\u52a0\uff0c\u4f46\u5b9e\u9645\u56db\u4e2a\u70b9\u662f\u76f8\u5173\u8054\u7684\uff0c\u5b9e\u9645\u8bc4\u4ef7\u6846\u68c0\u6d4b\u7684\u6307\u6807\u662f\u4f7f\u7528 IOU \uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u5f88\u53ef\u80fd\u591a\u4e2a\u68c0\u6d4b\u6846IOU\u5dee\u5f02\u5f88\u5927\uff0c\u4f46 smooth l1 loss \u76f8\u540c\u3002 IOU Loss \u5b9a\u4e492\uff1a IOU Loss = -ln(IOU) | L_iou = 1 - iou \u7f3a\u70b9\uff1a\u65e0\u6cd5\u4f18\u5316\u65e0\u4ea4\u96c6\u7684\u8fb9\u754c\u6846( loss \u6052\u5b9a\u4e3a 1 )\uff0c\u4e0d\u80fd\u53cd\u6620\u4e24\u6846\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fdc\u8fd1\uff0c\u4e14\u53ea\u8981 iou \u76f8\u540c\uff0c\u4e24\u6846\u7684\u4f4d\u7f6e\u5173\u7cfb\u65e0\u6cd5\u533a\u5206\u3002 GIou Loss C\u4e3aB\u4e0eB^gt\u6700\u5c0f\u5916\u63a5\u77e9\u5f62 ,\u76f8\u5f53\u4e8e\u5728 IoU loss \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e2a\u60e9\u7f5a\u9879\uff0c\u5f53 bbox \u7684\u8ddd\u79bb\u8d8a\u5927\u65f6\uff0c\u60e9\u7f5a\u9879\u5c06\u8d8a\u5927\uff0c\u4f46\u662f IoU \u548c GIoU \u7684\u503c\u90fd\u4e00\u6837\uff0c\u6b64\u65f6 GIoU \u9000\u5316\u4e3a IoU , \u65e0\u6cd5\u533a\u5206\u5176\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb DIou Loss :\u4e0d\u91cd\u53e0\u4ecd\u7136\u53ef\u4ee5\u4e3a\u8fb9\u754c\u6846\u63d0\u4f9b\u68af\u5ea6\uff0c\u76f4\u63a5\u4f18\u5316\u4e24\u6846\u8ddd\u79bb\u6536\u655b\u66f4\u5feb\uff0c\u4f46\u662f\u6ca1\u6709\u8003\u8651\u957f\u5bbd\u6bd4\u3002 \u7f3a\u70b9\uff0c\u6ca1\u6709\u8003\u8651\u957f\u5bbd\u6bd4 DIoU-NMS \u80fd\u591f\u66f4\u597d\u7684\u5f15\u5bfcbbox\u7684\u6d88\u9664\uff0c\u4ee5\u540e\u8003\u8651\u4f7f\u7528 CIoU Loss + DIoU-NMS \uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 CIOU_nms ciou \u662f\u5728 Diou \u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u5f71\u54cd\u56e0\u5b50\uff0c\u5305\u542b GT \uff0c\u9884\u6d4b\u7684\u65f6\u5019\u6ca1\u6709 GT \u4fe1\u606f\uff0c\u4e0d\u7528\u8003\u8651\u5f71\u54cd\u56e0\u5b50\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 DIOU_nms \u5373\u53ef CIou Loss : Lciou = Ldiou + \u957f\u5bbd\u6bd4 \u5728 DIOU \u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u4e2a\u5f71\u54cd\u56e0\u5b50 av \uff1a \u52a0\u5165\u4e86\u957f\u5bbd\u6bd4\u7684\u8003\u91cf (\u8003\u8651\u4e86\u9884\u6d4b\u6846\u957f\u5bbd\u6bd4\u62df\u5408\u76ee\u6807\u6846\u7684\u957f\u5bbd\u6bd4) v \uff1a\u7528\u6765\u8861\u91cf\u957f\u5bbd\u6bd4\u4e00\u81f4\u6027\u7684\u53c2\u6570 a \uff1a\u6743\u8861\u56e0\u5b50 \u8fd9\u6837 CIOU Loss \u8003\u8651\u4e86:\u91cd\u53e0\u9762\u79ef\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb\uff0c\u957f\u5bbd\u6bd4\uff0c\u6548\u679c\u4f1a\u66f4\u597d\u3002 \u7f3a\u70b9\uff1a v \u8fc7\u4e8e\u590d\u6742\uff0c\u51cf\u6162\u6536\u655b\u901f\u5ea6\uff1bv\u7684\u5bfc\u6570\u4e2d\u542b\u6709 1/(w^2+h^2) \u8fd9\u4e2a\u503c\u5f80\u5f80\u5f88\u5927\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u68af\u5ea6\u7206\u70b8\u3002 Focal-EIoU Loss EIOU Loss Focal-EIoU Loss **IOU_Loss\uff1a**\u4e3b\u8981\u8003\u8651\u68c0\u6d4b\u6846\u548c\u76ee\u6807\u6846\u91cd\u53e0\u9762\u79ef\u3002 **GIOU_Loss\uff1a**\u5728IOU\u7684\u57fa\u7840\u4e0a\uff0c\u89e3\u51b3\u8fb9\u754c\u6846\u4e0d\u91cd\u5408\u65f6\u7684\u95ee\u9898\u3002 **DIOU_Loss\uff1a**\u5728IOU\u548cGIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u4fe1\u606f\u3002 **CIOU_Loss\uff1a**\u5728DIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u5bbd\u9ad8\u6bd4\u7684\u5c3a\u5ea6\u4fe1\u606f\u3002 \u5e38\u7528\u4eba\u8138\u8bc6\u522b\u635f\u5931\u51fd\u6570 link \u00b6 \u4eba\u8138\u8bc6\u522b\uff1a\u672c\u8d28\u4e0a\u662f\u5206\u7c7b\u95ee\u9898(\u76ee\u7684\u5c31\u662f\u4e0d\u540c\u7c7b\u7684**\u7c7b\u95f4\u95f4\u8ddd\u591f\u5927\uff0c\u540c\u4e00\u7c7b\u7684\u7c7b\u5185\u8ddd\u79bb\u8db3\u591f\u5c0f**)\u3002\u4e00\u822c\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5c31\u662f softmax loss (\u4ea4\u53c9\u71b5\u635f\u5931)\uff0c\u4f46\u5bf9\u4e8e\u4eba\u8138\u5c31\u4e0d\u591f\u7528\u4e86\uff0c\u56e0\u4e3a**\u4eba\u8138\u7279\u5f81\u5dee\u5f02\u4e0d\u660e\u663e**\uff0c softmax loss \u5bf9\u7c7b\u95f4\u8ddd\u79bb\u548c\u7c7b\u5185\u8ddd\u79bb\u63a7\u5236\u7684\u90fd\u4e0d\u597d\uff0c\u6240\u4ee5\u6700\u540e\u8bc6\u522b\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u6cdb\u5316\u80fd\u529b\u8f83\u5dee\uff0c\u5e38\u7528 Center-Loss\u3001L-Softmax\u3001A-Softmax\u3001ArcFace\u3001AM-softmax \u7b49 softmax Loss:\u7c7b\u95f4\u8ddd\u79bb\u548c\u7c7b\u5185\u8ddd\u79bb\u63a7\u5236\u7684\u90fd\u4e0d\u597d \uff0c\u5404\u7c7b\u635f\u5931\u6743\u91cd\u76f8\u540c\uff0c\u7c7b\u95f4\u7c7b\u5185\u90fd\u6ca1\u505a\u4f18\u5316\u3002 Center Loss:\u4e3b\u8981\u4f18\u5316\u4e86\u7c7b\u5185\u8ddd\u79bb\uff0c\u4f46\u5bf9\u7c7b\u95f4\u8ddd\u79bb\u63a7\u5236\u4e0d\u8db3(\u4eba\u8138\u65b9\u5411\u8fd8\u884c(\u5355\u7c7b)\uff0c\u7528\u4e8e\u5176\u4ed6\u65b9\u5411\u6548\u679c\u5dee\u4e8esoftmax) \uff0c\u5f15\u5165\u771f\u5b9e\u7c7b\u522b\u7684\u4e2d\u5fc3\u8ddd\u79bb\u5411\u91cf C_yi \uff0c\u7c7b\u5185\u635f\u5931\u589e\u5927\uff0c\u4f18\u5316\u540e\u4f7f\u7c7b\u5185\u8ddd\u79bb\u66f4\u7d27\u51d1\u3002\u03bb \u662f\u8d85\u53c2\uff0c\u63a7\u5236\u7c7b\u5185\u8ddd\u79bb\u635f\u5931\u5728\u5f53\u524d\u6837\u672c\u635f\u5931\u4e2d\u7684\u6bd4\u91cd\u3002 L-softmax Loss(Large-Margin Softmax Loss):\u7c7b\u5185\u8ddd\u79bb\u548c\u7c7b\u95f4\u8ddd\u79bb\u90fd\u80fd\u4f18\u5316 :\u501f\u7528 SVM \u601d\u60f3\uff0c\u5982\u679c\u539f\u6765\u7684softmax loss\u662f\u53ea\u8981\u652f\u6301\u5411\u91cf\u548c\u5206\u7c7b\u9762\u7684\u8ddd\u79bb\u5927\u4e8eh\u5c31\u7b97\u5206\u7c7b\u6548\u679c\u6bd4\u8f83\u597d\u4e86\uff0c\u90a3\u4e48 L-softmax loss \u5c31\u662f\u9700\u8981\u8ddd\u79bb\u8fbe\u5230 mh \uff08 m\u662f>=2 \u6b63\u6574\u6570\uff09\u624d\u7b97\u5206\u7c7b\u6548\u679c\u6bd4\u8f83\u597d\u4e86\u3002 \u4e58\u6cd5\u89d2\u5ea6\u95f4\u9694 \u3002 \u89e3\u91ca:\u5f88\u597d\u7406\u89e3\uff0c\u539f\u5148\u53ea\u9700\u8981 \u03b81>\u03b82 \u5c31\u80fd\u5206\u7c7b\uff0c\u73b0\u5728\u81f3\u5c11 \u03b81>m*\u03b82 \uff0c\u8fb9\u754c\u8ddd\u79bb\u589e\u52a0\u4e86 m \u500d\uff0c\u66f4\u96be\u8bad\u7ec3\u4e86\uff0c\u4f46\u5982\u679c\u6536\u655b\u597d\u540e\u7c7b\u5185\u8ddd\u79bb\u4f1a\u66f4\u5927\uff0c\u7c7b\u95f4\u8ddd\u79bb\u4f1a\u66f4\u597d\uff0c\u56e0\u4e3a\u8fd9\u4e2a m \u5f3a\u8feb\u4f60\u5f80\u8fd9\u4e2a\u65b9\u5411\u6536\u655b\u3002\u901a\u5e38\u7528 m \u8c03\u8282\u8bad\u7ec3\u96be\u5ea6\uff0c m \u8d8a\u5927\u6548\u679c\u8d8a\u597d\uff0c\u5f53\u7136\u6a21\u578b\u8d8a\u4e0d\u6613\u6536\u655b\uff0c\u5e38 m=2,3,4 A-softmax loss ( SphereFace ):\u7c7b\u4f3c L-softmax \uff0c\u9650\u5236\u6761\u4ef6(\u5f52\u4e00\u5316\u6743\u91cd,bias\u7f6e0): w=1,bias=0,\u4ee3\u7801\u4e2d\u5b9e\u73b0:\u5f52\u4e00\u5316\u6743\u91cd(w/w_2\u8303\u6570) \uff0c\u7528\u89d2\u5ea6\u589e\u5927\u95f4\u9694\u3002 AM-Softmax(\u4f59\u5f26\u8ddd\u79bb:\u540cCosFace) \uff1a A-softmax(\u89d2\u5ea6\u8ddd\u79bb) \u7684\u6539\u8fdb\u3002\u9650\u5236\u6761\u4ef6(\u5f52\u4e00\u5316\u6743\u91cd\u548c\u7279\u5f81\u5411\u91cf,bias\u7f6e0): w=1,x=1,bias=0,\u4ee3\u7801\u4e2d\u5b9e\u73b0:\u5f52\u4e00\u5316\u6743\u91cd(w/w_2\u8303\u6570)\uff0c\u5f52\u4e00\u5316\u7279\u5f81\u5411\u91cf(x/x_2\u8303\u6570) \uff0c \u51cf\u6cd5\u4f59\u5f26\u95f4\u9694 ArcFace loss(\u89d2\u5ea6\u95f4\u9694) **: A-softmax(\u89d2\u5ea6\u8ddd\u79bb) \u7684\u6539\u8fdb\uff0c\u89d2\u5ea6 \u03b8 \u52a0\u4e0a\u95f4\u9694 m \u3002\u9650\u5236\u6761\u4ef6(\u5f52\u4e00\u5316\u6743\u91cd\u548c\u7279\u5f81\u5411\u91cf,bias\u7f6e0): w=1,x=1,bias=0,\u4ee3\u7801\u4e2d\u5b9e\u73b0:\u5f52\u4e00\u5316\u6743\u91cd(w/w_2\u8303\u6570)\uff0c\u5f52\u4e00\u5316\u7279\u5f81\u5411\u91cf(x/x_2\u8303\u6570) \uff0c\u7528\u89d2\u5ea6\u6765\u589e\u5927\u95f4\u9694\u3002**\u52a0\u6cd5\u89d2\u5ea6\u95f4\u9694 \u5148\u5c06\u7279\u5f81\u5411\u91cfL2\u5f52\u4e00\u5316\uff0c\u6743\u91cdL2\u5f52\u4e00\u5316\uff0c\u8ba1\u7b97\u4e24\u8005\u7684cos(\u03b8)\uff0c\u6c42\u53cd\u4f59\u5f26arccos(\u03b8)\u5f97\u5230\u7279\u5f81 x \u4e0e\u771f\u5b9e\u6743\u503c W \u4e4b\u95f4\u7684\u5939\u89d2\u03b8\uff0c\u6dfb\u52a0\u89d2\u5ea6\u95f4\u9694 m \uff0c\u518d\u6c42\u4f59\u5f26 cos(\u03b8+m) \uff0c\u5c06\u6240\u6709\u7684 log \u4e58\u4ee5\u7279\u5f81\u5c3a\u5ea6 s \uff0c\u7136\u540e\u5c06 log \u9001\u5230 softmax \u51fd\u6570\u5f97\u5230\u5404\u7c7b\u522b\u6982\u7387\u3002\u518d\u7528 Ground Truth \u548c One Hot Vector \u4e00\u8d77\u7b97\u51fa\u4ea4\u53c9\u71b5\u635f\u5931 ArcFace loss \u7ec8\u6781\u5927\u6cd5: \u8054\u5408 margin : \u7ed3\u5408\u6240\u6709\u7684margin\u60e9\u7f5a(cos(m1*\u03b8+m2)\u2212m3) \u4eba\u8138\u8bc6\u522b\u8bc4\u4f30\u6307\u6807 \u00b6 FAR(\u8bef\u8bc6\u522b\u7387: False Accept Rate ):\u4e0d\u540c\u4eba\u5224\u5b9a\u4e3a\u540c\u4e00\u4eba\u7684\u6bd4\u4f8b\uff1aright/\u7c7b\u95f4\u5339\u914d\u603b\u6b21\u6570 FRR(\u62d2\u8bc6\u522b\u7387: False Reject Rate ):\u540c\u4e00\u4eba\u5224\u5b9a\u4e3a\u4e0d\u540c\u4eba\u7684\u6bd4\u4f8b\uff1aright/\u7c7b\u5185\u5339\u914d\u603b\u6b21\u6570 EER(\u7b49\u9519\u8bef\u7387: Equal Error Rate ):FAR\u662f\u968f\u9608\u503c\u589e\u5927\u800c\u51cf\u5c0f\u7684\uff0cFRR\u662f\u968f\u9608\u503c\u589e\u5927\u800c\u589e\u5927\u7684\u3002\u56e0\u6b64\u5b83\u4eec\u4e00\u5b9a\u6709\u4ea4\u70b9\u4e3aEER\uff0c\u4ece\u800c\u9009\u53d6\u6700\u4f73\u9608\u503c\u3002\u5e38\u53d6 FAR=1e-3 \u65f6\uff0cFRR\u7684\u503c\u4f5c\u4e3a\u53c2\u8003\uff0c\u503c\u8d8a\u5c0f\uff0c\u6027\u80fd\u8d8a\u597d(\u8bba\u6587\u4e2d\u5e38\u5e38 TAR =xx @ FAR=0.00100 )\u6765\u8bc4\u6d4b \u5e38\u89c1\u8fb9\u7f18\u5904\u7406\u7b97\u5b50 \u00b6 Sobel\u7b97\u5b50 \u200b Sx= Sy= 3*3 Sobel\u4e24\u4e2a\u65b9\u5411\u7684\u7b97\u5b50\u5728\u56fe\u50cf\u4e0a\u6ed1\u52a8\uff0c\u6a21\u677f\u4e0e\u5176\u8986\u76d6\u7684\u56fe\u50cf 3*3 \u533a\u57df9\u4e2a\u50cf\u7d20\u8fdb\u884c\u5377\u79ef\uff0c\u6c42\u548c\u540e\u5f97\u5230\u6b64\u65b9\u5411\u7684**\u8fb9\u7f18\u68c0\u6d4b\u5e45\u503c**\u3002 A\u4e3a\u56fe\u50cf Gx\u548cGy\u5206\u522b\u662f\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u7b97\u5b50\u7684\u5377\u79ef\u7ed3\u679c G\u5219\u662f\u6700\u7ec8\u5f97\u5230\u7684\u8fb9\u7f18\u68c0\u6d4b\u5e45\u503c \u03b8\u503c\u5219\u662f\u8fb9\u7f18\u65b9\u5411 Sobel\u7b97\u5b50\u8fd8\u6709\u4e00\u79cd\u53d8\u79cd\uff0c\u662f\u5404\u5411\u540c\u6027Sobel\u7b97\u5b50(\u66f4\u51c6\u786e)\uff0c\u5176\u6a21\u677f\u4e3a \u6a21\u677f\u7684\u6743\u503c\u662f\u79bb\u4e2d\u5fc3\u4f4d\u7f6e\u8d8a\u8fdc\u5219\u6743\u503c\u5f71\u54cd\u8d8a\u5c0f\uff0c\u4f46\u662f\u4e0a\u9762\u7684\u6a21\u677f\u4f7f\u5176\u8ddd\u79bb\u4e00\u6837\u957f\uff0c\u4f8b\u5982:\u4e2d\u5fc3\u70b9\u5230(0,0)\u70b9\u8ddd\u79bb\u662f\u6839\u53f72\uff0c\u5230(1,0)\u70b9\u8ddd\u79bb\u4e5f\u662f\u6839\u53f72\uff0c\u8fd9\u6837\u5c31\u6d88\u9664\u4e86\u6743\u91cd\u7684\u5f71\u54cd\u3002 Canny\u7b97\u5b50(6\u6b65) \u5f69\u8272\u56fe\u7247\u7070\u5ea6\u5316\u3002 \u4f7f\u7528\u9ad8\u65af\u6ee4\u6ce2\u5668\uff0c\u4ee5\u5e73\u6ed1\u56fe\u50cf\uff0c\u6ee4\u9664\u566a\u58f0\u3002 \u9ad8\u65af\u5377\u79ef\u6838\u5c3a\u5bf8\u8d8a\u5927\uff0c\u68c0\u6d4b\u5668\u5bf9\u566a\u58f0\u7684\u654f\u611f\u5ea6\u8d8a\u4f4e\uff0c\u4f46\u662f\u8fb9\u7f18\u68c0\u6d4b\u7684\u5b9a\u4f4d\u8bef\u5dee\u4e5f\u5c06\u7565\u6709\u589e\u52a0\uff0c\u4e00\u822c\u800c\u8a00 5x5 \u662f\u6700\u5408\u9002\u7684\u3002 \u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u68af\u5ea6\u5f3a\u5ea6\u548c\u65b9\u5411\u3002 \u56fe\u50cf\u4e2d\u7684\u8fb9\u7f18\u53ef\u4ee5\u6307\u5411\u5404\u4e2a\u65b9\u5411\uff0c\u6240\u4ee5\u8fd9\u6b65\u5e38\u7528\u4e00\u9636\u5fae\u5206\u7b97\u5b50(\u5982:Sobel\u7b97\u5b50)\uff0c\u5f97\u5230\u50cf\u7d20\u70b9\u7684\u68af\u5ea6G\u548c\u65b9\u5411theta\u3002 \u5e94\u7528\u975e\u6781\u5927\u503c\u6291\u5236 \uff0c\u4f7f\u5f97\u8fb9\u7f18\u7ec6\u5316\u3002 \u4e3b\u8981\u4f5c\u7528\u662f\"\u7626\u8fb9\"\uff0c\u4ec5\u4ec5\u57fa\u4e8e\u68af\u5ea6\u503c\u63d0\u53d6\u7684\u8fb9\u7f18\u4ecd\u7136\u5f88\u6a21\u7cca\uff0c\u5c06\u5c40\u90e8\u6700\u5927\u503c\u4e4b\u5916\u7684\u6240\u6709\u68af\u5ea6\u503c\u6291\u5236\u4e3a0(\u5c06\u5f53\u524d\u50cf\u7d20\u7684\u68af\u5ea6\u5f3a\u5ea6\u4e0e\u6cbf\u6b63\u8d1f\u68af\u5ea6\u65b9\u5411\u4e0a\u7684\u4e24\u4e2a\u50cf\u7d20\u7684\u68af\u5ea6\u5f3a\u5ea6\u8fdb\u884c\u6bd4\u8f83\uff0c\u6700\u5927\u5219\u4fdd\u7559\uff0c\u5426\u5219\u88ab\u6291\u5236) \u5e94\u7528**\u53cc\u9608\u503c\u68c0\u6d4b**\u6765\u4f18\u5316\u8fb9\u7f18\u8fde\u63a5\u5904\u7406\u3002 \u975e\u6781\u5927\u503c\u6291\u5236\u540e\uff0c\u8fb9\u7f18\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c\u4f46\u8fd8\u662f\u5b58\u5728\u566a\u58f0\u548c\u989c\u8272\u53d8\u5316\u5f15\u8d77\u7684\u4e00\u4e9b\u8fb9\u7f18\u50cf\u7d20(\u566a\u70b9)\uff0c\u53ef\u4ee5\u901a\u8fc7\u9ad8\u4f4e\u9608\u503c\u6765\u89e3\u51b3(\u7528\u5f31\u68af\u5ea6\u503c\u8fc7\u6ee4\u8fb9\u7f18\u50cf\u7d20\uff0c\u5e76\u4fdd\u7559\u5177\u6709\u9ad8\u68af\u5ea6\u503c\u7684\u8fb9\u7f18\u50cf\u7d20)\u3002 \u5982\u679c\u8fb9\u7f18\u50cf\u7d20\u7684\u68af\u5ea6\u503c\u5c0f\u4e8e\u4f4e\u9608\u503c\uff0c\u5219\u4f1a\u88ab\u6291\u5236\uff1b \u5982\u679c\u8fb9\u7f18\u50cf\u7d20\u7684\u68af\u5ea6\u503c\u5c0f\u4e8e\u9ad8\u9608\u503c\u5e76\u4e14\u5927\u4e8e\u4f4e\u9608\u503c\uff0c\u5219\u5c06\u5176\u6807\u8bb0\u4e3a**\u5f31\u8fb9\u7f18\u50cf\u7d20(\u4fdd\u7559\uff1f)**\uff1b \u5982\u679c\u8fb9\u7f18\u50cf\u7d20\u7684\u68af\u5ea6\u503c\u9ad8\u4e8e\u9ad8\u9608\u503c\uff0c\u5219\u5c06\u5176\u6807\u8bb0\u4e3a**\u5f3a\u8fb9\u7f18\u50cf\u7d20(\u4fdd\u7559)**\uff1b \u9608\u503c\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u7ed9\u5b9a\u8f93\u5165\u56fe\u50cf\u7684\u5185\u5bb9\u3002 \u901a\u8fc7\u6291\u5236\u5b64\u7acb\u7684\u5f31\u8fb9\u7f18\u6700\u7ec8\u5b8c\u6210\u8fb9\u7f18\u68c0\u6d4b(\u4e8c\u503c\u5316\u56fe\u50cf\u8f93\u51fa\u7ed3\u679c)\u3002 \u5f3a\u8fb9\u7f18\u50cf\u7d20\u4fdd\u7559\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4ece\u56fe\u50cf\u4e2d\u7684\u771f\u5b9e\u8fb9\u7f18\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\uff0c\u7136\u800c\uff0c\u5f31\u8fb9\u7f18\u533a\u57df\u662f\u5426\u4fdd\u7559\uff1f(\u56e0\u4e3a\u8fd9\u4e9b\u50cf\u7d20\u53ef\u4ee5\u4ece\u771f\u5b9e\u8fb9\u7f18\u63d0\u53d6\u4e5f\u53ef\u4ee5\u662f\u56e0\u566a\u58f0\u6216\u989c\u8272\u53d8\u5316\u5f15\u8d77\u7684)\uff0c\u4fdd\u7559\u771f\u5b9e\u7684\uff0c\u53bb\u9664\u566a\u58f0\u5f15\u8d77\u7684\u3002 \u901a\u5e38\uff0c\u7531\u771f\u5b9e\u8fb9\u7f18\u5f15\u8d77\u7684\u5f31\u8fb9\u7f18\u50cf\u7d20\u5c06\u8fde\u63a5\u5230\u5f3a\u8fb9\u7f18\u50cf\u7d20\uff0c\u800c\u566a\u58f0\u54cd\u5e94\u672a\u8fde\u63a5\u3002\u4e3a\u4e86\u8ddf\u8e2a\u8fb9\u7f18\u8fde\u63a5\uff0c\u901a\u8fc7\u67e5\u770b\u5f31\u8fb9\u7f18\u50cf\u7d20\u53ca\u51768\u4e2a\u90bb\u57df\u50cf\u7d20\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u4e3a\u5f3a\u8fb9\u7f18\u50cf\u7d20\uff0c\u5219\u8be5\u5f31\u8fb9\u7f18\u70b9\u5c31\u53ef\u4ee5\u4fdd\u7559\u4e3a\u771f\u5b9e\u7684\u8fb9\u7f18\u3002 \u56fe\u50cf\u6ee4\u6ce2 \u00b6 \u56fe\u50cf\u6ee4\u6ce2\u7684\u76ee\u7684 \u6d88\u9664\u56fe\u50cf\u4e2d\u6df7\u5165\u7684\u566a\u58f0 \u4e3a\u56fe\u50cf\u8bc6\u522b\u62bd\u53d6\u51fa\u56fe\u50cf\u7279\u5f81 \u6ee4\u6ce2\u79cd\u7c7b \u7ebf\u6027\u6ee4\u6ce2\uff1a\u5747\u503c\u6ee4\u6ce2\u3001\u9ad8\u65af\u6ee4\u6ce2 \u975e\u7ebf\u6027\u6ee4\u6ce2\uff1a\u4e2d\u503c\u6ee4\u6ce2\u3001\u53cc\u8fb9\u6ee4\u6ce2 \u5747\u503c\u6ee4\u6ce2 \u5747\u503c\u6ee4\u6ce2\uff0c\u5bf9**\u9ad8\u65af\u566a\u58f0**\u8868\u73b0\u8f83\u597d\uff0c\u5bf9\u6912\u76d0\u566a\u58f0\u8868\u73b0\u8f83\u5dee\u3002 blur = cv2 . blur ( src_img ,( 7 , 7 )) # \u6838\u5c3a\u5bf8\u4e00\u822c\u6709 3x5,5x5,7x7,\u4e00\u822c\u6838\u8d8a\u5927\uff0c\u56fe\u7247\u5904\u7406\u5b8c\u7684\u6548\u679c\u8d8a\u6a21\u7cca \u4e2d\u503c\u6ee4\u6ce2(\u975e\u7ebf\u6027) \u4e2d\u503c\u6ee4\u6ce2\u4e3b\u9898\u601d\u60f3\u662f\u53d6\u76f8\u90bb\u50cf\u7d20\u7684\u70b9\uff0c\u7136\u540e\u5bf9\u76f8\u90bb\u50cf\u7d20\u7684\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u53d6\u4e2d\u70b9\u7684\u7070\u5ea6\u503c\u4f5c\u4e3a\u8be5\u50cf\u7d20\u70b9\u7684\u7070\u5ea6\u503c \u8be5\u65b9\u6cd5\u5728\u53bb\u9664**\u8109\u51b2\u566a\u58f0\u3001\u6912\u76d0\u566a\u58f0**\u7684\u540c\u65f6\u8fd8\u80fd\u4fdd\u7559\u56fe\u50cf\u7684\u7ec6\u8282\u90e8\u5206 \u4e2d\u503c\u6ee4\u6ce2\u82b1\u8d39\u7684\u65f6\u95f4\u6bd4\u5747\u503c\u6ee4\u6ce2\u66f4\u4e45\uff0c\u4f46\u5176\u5728\u566a\u58f0\u7684\u6d88\u9664\u80fd\u529b\u4e0a\u66f4\u5f3a\u3002 \u9ad8\u65af\u6ee4\u6ce2(\u9ad8\u65af\u6a21\u7cca) \u9ad8\u65af\u6ee4\u6ce2\u4e00\u822c\u9488\u5bf9\u7684\u662f**\u9ad8\u65af\u566a\u58f0**\uff0c\u80fd\u591f\u5f88\u597d\u7684\u6291\u5236\u56fe\u50cf\u8f93\u5165\u65f6**\u968f\u673a\u5f15\u5165\u7684\u566a\u58f0**\uff0c\u5c06\u50cf\u7d20\u70b9\u8ddf\u90bb\u57df\u50cf\u7d20\u770b\u4f5c\u662f\u4e00\u79cd\u9ad8\u65af\u5206\u5e03\u7684\u5173\u7cfb\uff0c \u5b83\u7684\u64cd\u4f5c\u662f\u5c06\u56fe\u50cf\u548c\u4e00\u4e2a\u9ad8\u65af\u6838\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c \uff1a \u53cc\u8fb9\u6ee4\u6ce2 \u76ee\u7684\u662f**\u4fdd\u8fb9\u53bb\u566a**\uff0c\u539f\u7406:\u4e8c\u7ef4\u9ad8\u65af\u51fd\u6570\u751f\u6210\u8ddd\u79bb\u6a21\u677f\uff0c\u4f7f\u7528\u4e00\u7ef4\u9ad8\u65af\u51fd\u6570\u751f\u6210\u503c\u57df\u6a21\u677f\uff0c\u4e24\u8005\u76f8\u4e58\u5373\u53ef\u3002 \u8ddd\u79bb\u6a21\u677f :\u5176\u4e2d\uff0c(k,l)\u4e3a\u6a21\u677f\u7a97\u53e3\u7684\u4e2d\u5fc3\u5750\u6807\uff1b(i,j)\u4e3a\u6a21\u677f\u7a97\u53e3\u5176\u4ed6\u7cfb\u6570\u7684\u5750\u6807\uff1b\u03c3\u4e3a\u9ad8\u65af\u51fd\u6570\u7684\u6807\u51c6\u5dee\u3002 \u503c\u57df\u6a21\u677f \u4e24\u8005\u76f8\u4e58\u5f97\u5230\u53cc\u8fb9\u8fc7\u6ee4\u5668\u6a21\u677f: \u5c0f\u603b\u7ed3 \u5747\u503c\u6a21\u7cca\u65e0\u6cd5\u514b\u670d\u8fb9\u7f18\u50cf\u7d20\u4fe1\u606f\u4e22\u5931\u7684\u7f3a\u9677\uff0c\u539f\u56e0\u662f\u5747\u503c\u6ee4\u6ce2\u662f\u57fa\u4e8e\u5e73\u5747\u6743\u91cd\u7684\u3002 \u9ad8\u65af\u6a21\u7cca\u90e8\u5206\u514b\u670d\u4e86\u8be5\u7f3a\u9677\uff0c\u4f46\u65e0\u6cd5\u5b8c\u5168\u907f\u514d\uff0c\u56e0\u4e3a\u6ca1\u6709\u8003\u8651\u50cf\u7d20\u503c\u7684\u4e0d\u540c\u3002 \u9ad8\u65af\u53cc\u8fb9\u6a21\u7cca-\u662f\u8fb9\u7f18\u4fdd\u7559\u7684\u6ee4\u6ce2\u65b9\u6cd5\uff0c\u907f\u514d\u4e86\u8fb9\u7f18\u4fe1\u606f\u4e22\u5931\uff0c\u4fdd\u7559\u4e86\u56fe\u50cf\u8f6e\u5ed3\u4e0d\u53d8\u3002 c++\u9762\u8bd5\u5e38\u95ee\u9898\u76ee \u00b6 \u535a\u5ba2\u94fe\u63a5 \u6808\u5185\u5b58\u548c\u5806\u5185\u5b58 \u6808\u5185\u5b58:\u5e38\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf\u3001\u4e34\u65f6\u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570\u7b49\uff0c\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u5206\u914d\u548c\u91ca\u653e \u5f53\u5728\u6808\u4e0a\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\u65f6(\u6216\u8fdb\u5165\u4e00\u4e2a\u51fd\u6570\u65f6)\uff0c\u6808\u7684\u6307\u9488\u4f1a\u4e0b\u79fb\uff0c\u76f8\u5f53\u4e8e\u5728\u6808\u4e0a\u5206\u914d\u4e86\u4e00\u5757\u5185\u5b58\u3002\u3002\u5f53\u8fd9\u4e2a\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u6808\u7684\u6307\u9488\u4f1a\u4e0a\u79fb\uff0c\u76f8\u540c\u4e8e\u56de\u6536\u4e86\u5185\u5b58\u3002\u7531\u4e8e\u6808\u4e0a\u7684\u5185\u5b58\u7684\u5206\u914d\u548c\u56de\u6536\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u63a7\u5236\u7684\uff0c\u6240\u4ee5\u5728\u6808\u4e0a\u662f\u4e0d\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u7684\uff0c\u53ea\u4f1a\u53d1\u751f**\u6808\u6ea2\u51fa**\uff0c\u4e5f\u5c31\u662f\u5206\u914d\u7684\u7a7a\u95f4\u8d85\u8fc7\u4e86\u89c4\u5b9a\u7684\u6808\u5927\u5c0f(\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u901a\u5e38\u6765\u8bf4\u662f 8M \u5de6\u53f3\uff08\u53d6\u51b3\u4e8e\u8fd0\u884c\u7684\u73af\u5883\uff09)\u3002 \u5806\u5185\u5b58:\u4e3a\u6210\u5458\u5206\u914d\u548c\u91ca\u653e\uff0c\u4e00\u822c\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u7533\u8bf7\u3001\u81ea\u5df1\u91ca\u653e\u3002\u5426\u5219\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u3002\u5178\u578b\u4e3a\u4f7f\u7528new\u7533\u8bf7\u7684\u5806\u5185\u5bb9\u3002 \u5185\u5b58\u6cc4\u9732:\u5806\u4e0a\u7684\u5185\u5b58\u662f\u7531\u7a0b\u5e8f\u76f4\u63a5\u63a7\u5236\u7684\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 malloc/free \u6216 new/delete \u6765\u5206\u914d\u548c\u56de\u6536\u5185\u5b58\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u901a\u8fc7 malloc/new \u5206\u914d\u4e86\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u5fd8\u8bb0\u4f7f\u7528 free/delete \u6765\u56de\u6536\u5185\u5b58\uff0c\u5c31\u53d1\u751f\u4e86\u5185\u5b58\u6cc4\u9732\u3002 \u9759\u6001\u5b58\u50a8\u533a:\u4e3b\u8981\u5b58\u653e\u9759\u6001\u6570\u636e\u3001\u5168\u5c40\u6570\u636e\u548c\u5e38\u91cf\u3002\u5185\u5b58\u5728\u7a0b\u5e8f\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u5206\u914d\u597d\uff0c\u800c\u4e14\u8fd9\u5757\u5185\u5b58\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u8fd0\u884c\u671f\u95f4\u90fd\u5b58\u5728\u3002 c++\u4e2d\u5185\u5b58\u6cc4\u9732\u548c\u91ce\u6307\u9488 \u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u8c03\u7528new\u548cdelete\u51fd\u6570 \u4e00\u662f\u5728\u5806\u91cc\u521b\u5efa\u4e86\u5bf9\u8c61\u5360\u7528\u4e86\u5185\u5b58\uff0c\u4f46\u662f\u6ca1\u6709\u663e\u793a\u5730\u91ca\u653e\u5bf9\u8c61\u5360\u7528\u7684\u5185\u5b58\uff1b \u4e8c\u662f\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u52a8\u6001\u7684\u5206\u914d\u4e86\u5185\u5b58\uff0c\u4f46\u662f\u5728\u6790\u6784\u51fd\u6570\u4e2d\u6ca1\u6709\u91ca\u653e\u5185\u5b58\u6216\u8005\u6ca1\u6709\u6b63\u786e\u7684\u91ca\u653e\u5185\u5b58 \u5728\u91ca\u653e\u5bf9\u8c61\u6570\u7ec4\u65f6\u5728delete\u4e2d\u6ca1\u6709\u4f7f\u7528\u65b9\u62ec\u53f7 int *p = new int[10] \u65b9\u62ec\u53f7\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u662f\u4e00\u4e2a**\u5bf9\u8c61\u6570\u7ec4**\uff0c delete p \u5982\u679c\u6ca1\u6709\u65b9\u62ec\u53f7\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6307\u9488\u5c31\u88ab\u9ed8\u8ba4\u4e3a\u53ea\u6307\u5411\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u8c61\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u7ed3\u679c\u9020\u6210\u4e86\u5185\u5b58\u6cc4\u9732\uff0c\u6b63\u786e\u505a\u6cd5 delete [] p; \u4e00\u4e2a\u7c7b\u91cc\u6709\u6307\u9488\u6210\u5458\u53d8\u91cf\uff0c\u5fc5\u987b\u663e\u793a\u7684\u5199\u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u8c03\u7528\u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5982\u679c\u7c7b\u91cc\u6709\u6307\u9488\u6210\u5458\u53d8\u91cf\u4f1a\u88ab\u5b9a\u4e49\u4e3a\u5c06\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u79cd\u9690\u5f0f\u7684\u6307\u9488\u590d\u5236\u7ed3\u679c\u5c31\u662f**\u4e24\u4e2a\u5bf9\u8c61\u62e5\u6709\u6307\u5411\u540c\u4e00\u4e2a\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u6307\u9488**\u3002\u5f53\u91ca\u653e\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u5c31\u4f1a\u91ca\u653e\u4e0e\u8be5\u5bf9\u8c61\u6709\u5173\u7684\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u800c\u91ca\u653e\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u4f1a\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\uff0c\u8fd9\u662f\u9519\u8bef\u7684\u540c\u65f6\u6709\u53ef\u80fd\u9020\u6210\u5806\u5d29\u6e83\u3002 \u6ca1\u6709\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570 \u5f53\u57fa\u7c7b\u6307\u9488\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4e0d\u662fvirtual\uff0c\u91ca\u653e\u7531\u4e00\u4e2a\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7684\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u53ea\u4f1a\u8c03\u7528\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u4e0d\u4f1a\u89e6\u53d1\u52a8\u6001\u7ed1\u5b9a\uff0c\u90a3\u4e48\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5c06\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u5b50\u7c7b\u7684\u8d44\u6e90\u6ca1\u6709\u6b63\u786e\u662f\u91ca\u653e\uff0c\u56e0\u6b64\u9020\u6210\u5185\u5b58\u6cc4\u9732\u3002 \u91ce\u6307\u9488 \uff1a\u6307\u5411\u88ab\u91ca\u653e\u7684\u6216\u8005\u8bbf\u95ee\u53d7\u9650\u5185\u5b58\u7684\u6307\u9488 \u6307\u9488\u53d8\u91cf\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff08\u5982\u679c\u503c\u4e0d\u5b9a\uff0c\u53ef\u4ee5\u521d\u59cb\u5316\u4e3aNULL\uff09 \u6307\u9488\u88abfree\u6216\u8005delete\u540e\uff0c\u6ca1\u6709\u7f6e\u4e3aNULL, free\u548cdelete\u53ea\u662f\u628a\u6307\u9488\u6240\u6307\u5411\u7684\u5185\u5b58\u7ed9\u91ca\u653e\u6389\uff0c\u5e76\u6ca1\u6709\u628a\u6307\u9488\u672c\u8eab\u5e72\u6389\uff0c\u6b64\u65f6\u6307\u9488\u6307\u5411\u7684\u662f\u201c\u5783\u573e\u201d\u5185\u5b58\u3002\u91ca\u653e\u540e\u7684\u6307\u9488\u5e94\u8be5\u88ab\u7f6e\u4e3aNULL. \u6307\u9488\u64cd\u4f5c\u8d85\u8d8a\u4e86\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u6bd4\u5982\u8fd4\u56de\u6307\u5411\u6808\u5185\u5b58\u7684\u6307\u9488\u5c31\u662f\u91ce\u6307\u9488\u3002 \u6307\u9488\u548c\u5f15\u7528 \u6307\u9488\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ed6\u7684\u5185\u5bb9\u662f\u6240\u6307\u5411\u5185\u5b58\u7684\u5730\u5740\uff1b\u5f15\u7528\u662f\u67d0\u5757\u5185\u5b58\u7684\u522b\u540d\u3002 Sizeof \u6307\u9488 :\u5f97\u5230\u7684\u662f\u6307\u9488\u672c\u8eab\u7684\u5927\u5c0f\uff1b Sizeof \u5f15\u7528 \uff1a\u6240\u6307\u5411\u7684\u53d8\u91cf(\u5bf9\u8c61)\u7684\u5927\u5c0f\u3002 \u6307\u9488\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u5f15\u7528\u4e0d\u53ef\u4e3a\u7a7a\uff1b\u6307\u9488\u89c1\u5f02\u601d\u8fc1\uff0c\u5f15\u7528\u4ece\u4e00\u800c\u7ec8(\u53ea\u5728\u5b9a\u4e49\u65f6\u88ab\u521d\u59cb\u5316\u4e00\u6b21,\u4e4b\u540e\u4e0d\u53ef\u53d8)\uff1b","title":"\u6df1\u5ea6\u5b66\u4e60\u57fa\u7840"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_1","text":"\u8bed\u4e49\u5206\u5272:\u628a\u56fe\u50cf\u4e2d\u7684\u6bcf\u4e2a\u50cf\u7d20\u8d4b\u4e88 \u4e00\u4e2a \u7c7b\u522b\u6807\u7b7e \uff0c\u53ea\u80fd\u5224\u65ad\u7c7b\u522b\uff0c\u65e0\u6cd5\u533a\u5206\u4e2a\u4f53 \u5b9e\u4f8b\u5206\u5272\uff1a\u7c7b\u4f3c\u7269\u4f53\u68c0\u6d4b\uff0c\u4e0d\u9700\u8981\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u6807\u8bb0\uff0c\u5b83\u53ea\u9700\u8981\u627e\u5230\u611f\u5174\u8da3\u7269\u4f53\u7684\u8fb9\u7f18\u8f6e\u5ed3\u5c31\u884c \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u533a\u5206\u51fa\u5355\u4e2a\u4e2a\u4f53\u3002 \u5168\u666f\u5206\u5272:\u8bed\u4e49\u5206\u5272+\u5b9e\u4f8b\u5206\u5272 \uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u54ea\u4e2a\u50cf\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\u4e2d\u7684\u54ea\u4e2a\u5b9e\u4f8b\u3002","title":"\u8bed\u4e49\u5206\u5272\u548c\u5b9e\u4f8b\u5206\u5272"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_2","text":"\u6982\u62ec\u6765\u8bf4\u5c31\u662f\u7279\u5f81\u56fe\u4e0a\u7684\u70b9\u80fd\u770b\u5230\u539f\u59cb\u56fe\u50cf\u7684\u591a\u5927\u533a\u57df\u3002 3 \u4e2a 3x3 \u5377\u79ef\uff0c\u4fdd\u6301\u6ed1\u52a8\u7a97\u53e3\u6b65\u957f\u4e3a 1 ,\u5176\u611f\u53d7\u91ce\u548c 7x7 \u5377\u79ef\u4e00\u6837 **TridentNet**\u4e2d\u8bc1\u660e\u4e86\uff1a\u4e0d\u540c\u5c3a\u5ea6\u7269\u4f53\u7684\u68c0\u6d4b\u6027\u80fd\u548c dilation rate \u6b63\u76f8\u5173\uff01\u4e5f\u5c31\u662f\u8bf4\uff0c\u66f4\u5927\u7684 receptive field (\u611f\u53d7\u91ce)\u5bf9\u4e8e\u5927\u7269\u4f53\u6027\u80fd\u4f1a\u66f4\u597d\uff0c\u66f4\u5c0f\u7684 receptive field (\u611f\u53d7\u91ce)\u5bf9\u4e8e\u5c0f\u7269\u4f53\u66f4\u52a0\u53cb\u597d\u3002","title":"\u611f\u53d7\u91ce"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_3","text":"N = (W \u2212 F + 2P )/S+1 \u6c60\u5316\u5c42\u7684\u53cd\u5411\u4f20\u64ad\uff1a https://blog.csdn.net/Jason_yyz/article/details/80003271","title":"\u5377\u79ef\u5c42"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_4","text":"\u7a7a\u6d1e\u5377\u79ef:\u5728\u589e\u52a0\u611f\u53d7\u91ce\u7684\u540c\u65f6\u4fdd\u6301\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\u4e0d\u53d8\uff0c\u4ece\u800c\u66ff\u4ee3\u6c60\u5316\u4e0e\u4e0a\u91c7\u6837\u64cd\u4f5c\u3002 \u4e00\u4e2a3\u00d73\u5377\u79ef\uff0c\u5374\u53ef\u4ee5\u8d77\u52305\u00d75\u30017\u00d77\u7b49\u5377\u79ef\u7684\u6548\u679c\u3002\u53ef\u4ee5\u770b\u51fa\uff0c\u7a7a\u6d1e\u5377\u79ef\u5728\u4e0d\u589e\u52a0\u53c2\u6570\u91cf\u7684\u524d\u63d0\u4e0b\uff0c\u589e\u5927\u4e86\u611f\u53d7\u91ce\u3002\u5047\u8bbe\u7a7a\u6d1e\u5377\u79ef\u7684\u5377\u79ef\u6838\u5927\u5c0f\u4e3ak\uff0c\u7a7a\u6d1e\u6570\u4e3ad\uff0c\u5219\u5176\u7b49\u6548\u5377\u79ef\u6838\u5927\u5c0fk\u2019\u8ba1\u7b97\u5982\u5f0f: \u7a7a\u6d1e\u5377\u79ef\u7684\u7f3a\u70b9 \u7f51\u683c\u6548\u5e94\uff08Gridding Effect\uff09\uff1a\u7531\u4e8e\u7a7a\u6d1e\u5377\u79ef\u662f\u4e00\u79cd\u7a00\u758f\u7684\u91c7\u6837\u65b9\u5f0f\uff0c\u5f53\u591a\u4e2a\u7a7a\u6d1e\u5377\u79ef\u53e0\u52a0\u65f6\uff0c\u6709\u4e9b\u50cf\u7d20\u6839\u672c\u6ca1\u6709\u88ab\u5229\u7528\u5230\uff0c\u4f1a\u635f\u5931\u4fe1\u606f\u7684\u8fde\u7eed\u6027\u4e0e\u76f8\u5173\u6027\uff0c\u8fdb\u800c\u5f71\u54cd\u5206\u5272\u3001\u68c0\u6d4b\u7b49\u8981\u6c42\u8f83\u9ad8\u7684\u4efb\u52a1\u3002 \u8fdc\u8ddd\u79bb\u7684\u4fe1\u606f\u6ca1\u6709\u76f8\u5173\u6027\uff1a\u7a7a\u6d1e\u5377\u79ef\u91c7\u53d6\u4e86\u7a00\u758f\u7684\u91c7\u6837\u65b9\u5f0f\uff0c\u5bfc\u81f4\u8fdc\u8ddd\u79bb\u5377\u79ef\u5f97\u5230\u7684\u7ed3\u679c\u4e4b\u95f4\u7f3a\u4e4f\u76f8\u5173\u6027\uff0c\u8fdb\u800c\u5f71\u54cd\u5206\u7c7b\u7684\u7ed3\u679c\u3002 \u4e0d\u540c\u5c3a\u5ea6\u7269\u4f53\u7684\u5173\u7cfb\uff1a\u5927\u7684dilation rate\u5bf9\u4e8e\u5927\u7269\u4f53\u5206\u5272\u4e0e\u68c0\u6d4b\u6709\u5229\uff0c\u4f46\u662f\u5bf9\u4e8e\u5c0f\u7269\u4f53\u5219\u6709\u5f0a\u65e0\u5229\uff0c\u5982\u4f55\u5904\u7406\u597d\u591a\u5c3a\u5ea6\u95ee\u9898\u7684\u68c0\u6d4b\uff0c\u662f\u7a7a\u6d1e\u5377\u79ef\u8bbe\u8ba1\u7684\u91cd\u70b9 \u89e3\u51b3\u65b9\u6848 :\u5178\u578b\u7684\u6709\u56fe\u68ee\u672a\u6765\u63d0\u51fa\u7684HDC\uff08Hybrid Dilated Convolution\uff09\u7ed3\u6784\u3002\u8be5\u7ed3\u6784\u7684\u8bbe\u8ba1\u51c6\u5219\u662f\u5806\u53e0\u5377\u79ef\u7684dilation rate\u4e0d\u80fd\u6709\u5927\u4e8e1\u7684\u516c\u7ea6\u6570\uff0c\u540c\u65f6\u5c06dilation rate\u8bbe\u7f6e\u4e3a\u7c7b\u4f3c\u4e8e[1,2,5,1,2,5]\u8fd9\u6837\u7684\u952f\u9f7f\u7c7b\u7ed3\u6784\u3002\u6b64\u5916\u5404dilation rate\u4e4b\u95f4\u8fd8\u9700\u8981\u6ee1\u8db3\u4e00\u4e2a\u6570\u5b66\u516c\u5f0f\uff0c\u8fd9\u6837\u53ef\u4ee5\u5c3d\u53ef\u80fd\u5730\u8986\u76d6\u6240\u6709\u7a7a\u6d1e\uff0c\u4ee5\u89e3\u51b3\u7f51\u683c\u6548\u5e94\u4e0e\u8fdc\u8ddd\u79bb\u4fe1\u606f\u7684\u76f8\u5173\u6027\u95ee\u9898\uff0c\u5177\u4f53\u7ec6\u8282\u53ef\u53c2\u8003\u76f8\u5173\u8d44\u6599.","title":"\u7a7a\u6d1e\u5377\u79ef"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_5","text":"\u5c3d\u91cf\u6a21\u578b\u4e2d\u4e0d\u8981\u6709**\u53cd\u5377\u79ef(\u8f6c\u7f6e\u5377\u79ef)**(\u4f1a\u6709\u952f\u9f7f\u95ee\u9898\u51fa\u73b0)\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0a\u91c7\u6837+\u5377\u79ef\u7684\u65b9\u5f0f\u4ee3\u66ff\uff0c DBFaceV2 \u4e2d\u5c31\u4f7f\u7528\u4e86\u8fd9\u79cd\u65b9\u5f0f\u3002\u8f6c\u7f6e\u5377\u79ef\u662f\u666e\u901a\u5377\u79ef\u7684\u53cd\u5411\u64cd\u4f5c\uff1a","title":"\u8f6c\u7f6e\u5377\u79ef"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_6","text":"\u6211\u4eec\u7684\u76ee\u7684\u662fP\u6846\u56de\u5f52\u5230G\u6846\uff0c\u5982\u4f55\u505a\u5462\uff1f \u6211\u4eec\u9700\u8981\u5bfb\u627e\u4e00\u79cd\u53d8\u6362 G^ ,\u4f7f\u5f97 P==G^,G^\u7ea6\u7b49\u4e8eG \uff0c\u8fd9\u4e2a G^ \u5c31\u662f\u6211\u4eec\u7684\u6240\u8981\u6c42\u7684\u9884\u6d4b\u6846\u3002\u5982\u4f55\u505a\u5462\uff1f \u5e73\u79fb(dx,dy)+\u5c3a\u5ea6\u7f29\u653e(dw,dh)\uff0c\u5c31\u662f\u6211\u4eec\u8981\u5b66\u4e60\u7684\u56db\u4e2a\u53c2\u6570 \u6211\u4eec\u5df2\u77e5\u7684 P->G \u7684\u5e73\u79fb\u91cf\u548c\u5c3a\u5ea6\u7f29\u653e\u91cf\u5982\u4e0b\uff1a \u4e3a\u4ec0\u4e48\u53eb\u505a\u7ebf\u6027\u56de\u5f52\u5462\uff1f \u8fb9\u6846\u56de\u5f52\u8f93\u5165\u7684\u4ec0\u4e48\uff1f \u6ce8\u610f\u8f93\u5165\u7684\u662f\u5148\u9a8c\u6846\u5bf9\u5e94\u7684\u7279\u5f81\u56fe\u5411\u91cf(\u03a6)\uff0c\u800c\u4e0d\u662f Px,Py,Pw,Ph \u5750\u6807\u3002 Loss\u51fd\u6570 dx,dy,dw,dh \u5982\u4f55\u83b7\u5f97\uff1f W* \u8868\u793a\u8981\u5b66\u4e60\u7684\u53c2\u6570 \u03a65(P) \u8868\u793a\u8f93\u5165\u7684\u7279\u5f81\u56fe \u6240\u4ee5\uff0c\u51fd\u6570\u6700\u7ec8\u7684\u4f18\u5316\u76ee\u6807\u4e3a\uff1a","title":"\u8fb9\u6846\u56de\u5f52"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#flops","text":"FLOPS \uff1a\u6ce8\u610f\u5168\u5927\u5199\uff0c\u662f floating point operations per second \u7684\u7f29\u5199\uff0c\u610f\u6307\u6bcf\u79d2\u6d6e\u70b9\u8fd0\u7b97\u6b21\u6570\uff0c\u7406\u89e3\u4e3a\u8ba1\u7b97\u901f\u5ea6\u3002\u662f\u4e00\u4e2a\u8861\u91cf\u786c\u4ef6\u6027\u80fd\u7684\u6307\u6807\u3002 FLOPs \uff1a\u6ce8\u610fs\u5c0f\u5199\uff0c\u662f floating point operations \u7684\u7f29\u5199\uff08s\u8868\u590d\u6570\uff09\uff0c\u610f\u6307\u6d6e\u70b9\u8fd0\u7b97\u6570\uff0c\u7406\u89e3\u4e3a\u8ba1\u7b97\u91cf\u3002 \u53ef\u4ee5\u7528\u6765\u8861\u91cf\u7b97\u6cd5/\u6a21\u578b\u7684\u590d\u6742\u5ea6 \u3002\u7531\u4e8e\u76ee\u524d\u6a21\u578b\u8ba1\u7b97\u80fd\u529b\u5de8\u5927\uff0c\u6240\u4ee5\u901a\u5e38\u4f7f\u7528 GFlops \u6765\u8861\u91cf\u7b97\u6cd5\u6027\u80fd\uff0c\u5176\u8868\u793a**\u5341\u4ebf**\uff08 =10^9 \uff09\u6b21\u7684\u6d6e\u70b9\u8fd0\u7b97 GMACs = 0.5 * GFLOPs FLOPs\u8ba1\u7b97(\u4e00\u822c\u8d8a\u5c0f\u8d8a\u597d) \u5377\u79ef\u5c42: C_i:input_channel,K:kernel_size,H*W:feature_map,C_o:output_channel \u62ec\u53f7\u91cc\u662f\u8ba1\u7b97 output_feature \u7684\u4e00\u4e2a pixel \u7684\u6d6e\u70b9\u8fd0\u7b97\u6570:\u5377\u79ef\u4e00\u6b21\u4f1a\u6709 C_i*K^2 \u6b21\u4e58\u6cd5\u548c C_i*K^2 - 1 \u6b21\u52a0\u6cd5(n\u4e2a\u6570\u76f8\u52a0\uff0c\u8981\u52a0n-1\u6b21)\uff0c\u5982\u679c\u4e0d\u8003\u8651bias\uff0c\u4f1a\u6709\u4e00\u4e2a -1 \uff0c\u5982\u679c\u8003\u8651bias\uff0c\u8fd9\u4e2a\u4e00\u4f1a\u88ab\u4e2d\u548c\u6389\uff0c\u6700\u540e\u62ec\u53f7\u5185\u4f1a\u53d8\u4e3a( 2*C_i*K^2 ) \u5168\u8fde\u63a5\u5c42\uff1a I:input neuron numbers, O:output neuron numbers \u6a21\u578b\u53c2\u6570\u8ba1\u7b97(\u4e00\u822c\u8d8a\u5c0f\u8d8a\u597d) \u57fa\u672c\u5377\u79ef: k*k\uff08\u5377\u79ef\u6838\u53c2\u6570\uff09*C_in(\u5377\u79ef\u6838\u7ef4\u5ea6)*C_out(\u5377\u79ef\u6838\u8f93\u51fa\u7ef4\u5ea6)[+c_out(bias\u4e2a\u6570)] FLOPs\u5c0f\u5e76\u4e14\u53c2\u6570\u91cf\u5c11\u7684\u7f51\u7edc\u4e00\u5b9a\u901f\u5ea6\u5feb\u5417\uff1f \u5728\u8bbe\u8ba1\u8f7b\u91cf\u7ea7\u7f51\u7edc\u65f6\uff0cFLOPs\u548c\u6a21\u578b\u53c2\u6570\u662f\u4e3b\u8981\u8003\u8651\u56e0\u7d20\uff0c\u4f46\u662f\u51cf\u5c11\u6a21\u578b\u5927\u5c0f\u548cFLOPs\u4e0d\u7b49\u540c\u4e8e\u51cf\u5c11\u63a8\u7406\u65f6\u95f4\u548c\u964d\u4f4e\u80fd\u8017\u3002\u6bd4\u5982ShuffleNetv2\u4e0eMobileNetv2\u5728\u76f8\u540c\u7684FLOPs\u4e0b\uff0c\u524d\u8005\u5728GPU\u4e0a\u901f\u5ea6\u66f4\u5feb\u3002\u6240\u4ee5\u9664\u4e86FLOPs\u548c\u6a21\u578b\u5927\u5c0f\u5916\uff0c\u8fd8\u9700\u8981\u8003\u8651\u5176\u4ed6\u56e0\u7d20\u5bf9\u80fd\u8017\u548c\u6a21\u578b\u63a8\u7406\u901f\u5ea6\u7684\u5f71\u54cd\uff0c\u4f8b\u5982:\u5185\u5b58\u8bbf\u95ee\u6210\u672c\uff08Memory Access Cost\uff0cMAC\uff09\u548cGPU\u8ba1\u7b97\u6548\u7387:DensNet\u7684\u53d8\u4f53: VoVNet/Pelee MAC\u8ba1\u7b97:shuffleNet V2\u8bba\u6587\u4e2d\u7ed9\u51fa\u4e86\u8ba1\u7b97\u65b9\u5f0f: DenseNet \u56e0\u4e3a\u5bc6\u96c6\u94fe\u63a5\u4f1a\u805a\u5408\u524d\u9762\u6240\u6709\u7684layer\uff0c\u8fd9\u5bfc\u81f4\u6bcf\u4e2alayer\u7684\u8f93\u5165channel\u6570\u7ebf\u6027\u589e\u957f\u3002concat\u64cd\u4f5cB\u5c3a\u5bf8\u5fc5\u987b\u662f\u56fa\u5b9a\u7684\uff0c\u624d\u80fd\u8fdb\u884c\u901a\u9053\u8fde\u63a5\u3002 Densnet\u6162\u4e5f\u597d\u7406\u89e3:\u9700\u8981\u8fdb\u884c\u591a\u6b21Concatnate\u64cd\u4f5c,\u6570\u636e\u9700\u8981\u88ab\u590d\u5236\u591a\u6b21\uff0c\u663e\u5b58\u5bb9\u6613\u589e\u52a0\u5f97\u5f88\u5feb GPU\u8ba1\u7b97\u6548\u7387 GPU\u8ba1\u7b97\u7684\u4f18\u52bf\u5728\u4e8e**\u5e76\u884c\u8ba1\u7b97\u673a\u5236**\uff0c\u8fd9\u610f\u5473\u7740\u5f53\u8981\u8ba1\u7b97\u7684tensor\u8f83\u5927\u65f6\u4f1a\u5145\u5206\u53d1\u6325GPU\u7684\u8ba1\u7b97\u80fd\u529b\u3002\u5982\u679c\u5c06\u4e00\u4e2a\u8f83\u5927\u7684\u5377\u79ef\u5c42\u62c6\u5206\u6210\u51e0\u4e2a\u5c0f\u7684\u5377\u79ef\u5c42\uff0c\u5c3d\u7ba1\u6548\u679c\u662f\u76f8\u540c\u7684\uff0c\u4f46\u662f\u5374\u662fGPU\u8ba1\u7b97\u4f4e\u6548\u7684\u3002\u6240\u4ee5\u5982\u679c\u529f\u6548\u4e00\u6837\uff0c\u5c3d\u91cf\u91c7\u7528\u8f83\u5c11\u7684\u5c42\u3002\u6bd4\u5982MobileNet\u4e2d\u91c7\u7528\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\uff08depthwise conv+1x1 conv\uff09\u867d\u7136\u964d\u4f4e\u4e86FLOPs\uff0c\u4f46\u662f\u56e0\u4e3a\u989d\u5916\u76841x1\u5377\u79ef\u800c\u4e0d\u5229\u4e8eGPU\u8fd0\u7b97\u6548\u7387\u3002\u76f8\u6bd4FLOPs\uff0c\u6211\u4eec\u66f4\u5e94\u8be5\u5173\u6ce8\u7684\u6307\u6807\u662fFlOPs per Second\uff0c\u5373\u7528\u603b\u7684FLOPs\u9664\u4ee5\u603b\u7684GPU\u63a8\u7406\u65f6\u95f4\uff0c\u8fd9\u4e2a\u6307\u6807\u8d8a\u9ad8\u8bf4\u660eGPU\u5229\u7528\u8d8a\u9ad8\u6548\u3002","title":"FLOPs(\u8ba1\u7b97\u91cf)\u548c\u6a21\u578b\u53c2\u6570\u8ba1\u7b97"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#kl","text":"\u71b5 :\u5c31\u662f\u4e00\u4e2a\u4e8b\u4ef6\u6240\u5305\u542b\u7684**\u4fe1\u606f\u91cf**\u3002\u4f8b\u5982:\u201c\u6211\u4e0d\u4f1a\u6b7b\u4ea1\u201d\uff0c\u4fe1\u606f\u91cf\u5f88\u5927\uff1b\u201c\u6211\u662f\u6211\u5988\u751f\u7684\u201d\uff0c\u4fe1\u606f\u91cf\u4e3a0\uff1b\u72ec\u7acb\u4e8b\u4ef6\u7684\u4fe1\u606f\u91cf\u53ef\u4ee5\u53e0\u52a0(\u4e00\u53e5\u8bdd:a->\u5f20\u4e09\u559d\u4e86\u9152\uff0cb->\u674e\u56db\u5403\u4e86\u9992\u5934)\uff0ca,b\u662f\u72ec\u7acb\u4e8b\u4ef6\uff0c\u8fd9\u53e5\u8bdd\u7684\u4fe1\u606f\u91cf\u5c31\u662fa\u7684\u4fe1\u606f\u91cf+b\u7684\u4fe1\u606f\u91cf\uff0c\u56e0\u6b64\u71b5\u7684\u5b9a\u4e49\u4e3a: KL\u6563\u5ea6 \uff1a\u8861\u91cf\u4e24\u4e2a\u4e8b\u4ef6/**\u5206\u5e03**\u4e4b\u95f4\u7684\u4e0d\u540c\uff0c\u6709\u65f6\u4e5f\u79f0\u4e3aKL\u8ddd\u79bb(\u4e8b\u4ef6a\u548c\u4e8b\u4ef6b\u7684\u4e0d\u540c\u7a0b\u5ea6)\uff0c\u4f46\u4e0d\u5177\u5907\u5bf9\u79f0\u6027\uff1b\u8ddd\u79bb\u7684\u5bf9\u79f0\u6027:A\u5230B\u7684\u8ddd\u79bb\u7b49\u4e8eB\u5230A\u7684\u8ddd\u79bb \u4ea4\u53c9\u71b5 \u4e3a\u4ec0\u4e48\u7528\u4ea4\u53c9\u71b5\u505a\u635f\u5931\u51fd\u6570\u800c\u4e0d\u7528KL\u6563\u5ea6\uff1f A\u662f\u771f\u5b9e\u7684\u6570\u636e\u5206\u5e03\uff0cB\u662f\u6a21\u578b\u9884\u6d4b\u6d4b\u6570\u636e\u5206\u5e03 \u8bad\u7ec3\u6570\u636eA\u7684\u5206\u5e03\u5f0f\u7ed9\u5b9a\u7684\uff0c\u4e5f\u5c31\u662fA\u7684\u71b5S(A)\u662f\u5e38\u91cf\uff0c\u6b64\u65f6KL\u6563\u5ea6\u548c\u4ea4\u53c9\u71b5\u7b49\u4ef7(\u56e0\u4e3a\u6b64\u65f6\u71b5\u5bf9\u4e8e\u6a21\u578b\u6765\u8bf4\u662f\u4e00\u4e2a\u4e0d\u53ef\u4f18\u5316\u7684\u5e38\u6570\u9879)\u3002","title":"\u4ea4\u53c9\u71b5=\u71b5+KL\u6563\u5ea6\u8be6\u89e3"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#focal-loss","text":"Focal Loss \u4e3b\u8981\u662f\u5728\u539f\u6709\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86 gamma \u56e0\u5b50\u548c alpha \u56e0\u5b50\uff0c\u5176\u4e2d gamma \u56e0\u5b50\u4e3b\u8981\u662f\u63a7\u5236\u56f0\u96be\u6837\u672c\u6316\u6398\u7684\uff0c alpha \u56e0\u5b50\u4e3b\u8981\u662f\u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\u7684\u3002 \u56f0\u96be\u6837\u4f8b\u6316\u6398\uff0c\u52a0\u5165 gamma \u56e0\u5b50 \u5bf9\u4e8e\u6b63\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.95 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 1-0.95 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.35 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 1-0.35 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5bf9\u4e8e\u8d1f\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.05 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 0.05 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.75 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 0.75 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\uff0c\u52a0\u5165\u5e73\u8861\u56e0\u5b50 alpha alpha=0.25 \uff0c\u901a\u8fc7\u63a7\u5236\u5e73\u8861\u56e0\u5b50\u5927\u5c0f\u6765\u5e73\u8861 loss","title":"Focal Loss"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#label-smoothing","text":"Label Smoothing\u5728\u4eba\u8138\u635f\u5931\u4e0a\u4e0d\u8d77\u4f5c\u7528\u7684\u539f\u56e0 \u5bf9\u4e8e\u591a\u5206\u7c7b\u800c\u8a00\uff0c\u6211\u4eec\u5e38\u7528\u4ea4\u53c9\u71b5\u635f\u5931\u51fd\u6570\uff0clabel\u6807\u7b7e\u5e38\u5e38\u5236\u4f5c\u4e3a one-hot \u7f16\u7801\uff0c\u4f46\u8fd9\u6837\u505a\u7f51\u7edc\u4f1a\u9a71\u4f7f\u81ea\u8eab\u5f80\u6b63\u786e\u6807\u7b7e\u548c\u9519\u8bef\u6807\u7b7e\u5dee\u503c\u5927\u7684\u65b9\u5411\u5b66\u4e60\uff0c\u5b58\u5728\u4e00\u4e2a\u95ee\u9898\uff0c\u5c31\u662f\u5728\u8bad\u7ec3\u6570\u636e\u4e0d\u8db3\u4ee5\u8868\u5f81\u6240\u4ee5\u7684\u6837\u672c\u7279\u5f81\u7684\u60c5\u51b5\u4e0b\uff0c\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u7f51\u7edc\u8fc7\u62df\u5408\u3002\u6240\u4ee5\u505a\u4e86\u8f6f\u5316\u63aa\u65bd: label smooth\u7684\u601d\u8def\u201c\u505a\u8f6f\u5316\u3001\u9632\u6b62\u8fc7\u62df\u5408\u3001\u589e\u52a0\u6270\u52a8\u201d \uff0c\u6700\u7ec8\u901a\u8fc7**\u6291\u5236\u6b63\u8d1f\u6837\u672c\u8f93\u51fa\u5dee\u503c**\uff0c\u4f7f\u5f97\u7f51\u7edc\u80fd\u6709\u66f4\u597d\u7684\u6cdb\u5316\u80fd\u529b\u3002","title":"Label Smoothing"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#wing-loss","text":"\u4e00\u822c\u800c\u8a00\u4eba\u8138\u5173\u952e\u70b9 loss \u5c1d\u5c1d\u662f l2 loss \u6216\u8005 smooth l2 loss ,\u4f46\u662f\u5c1d\u5c1d\u56e0\u4e3a**\u4eba\u8138\u59ff\u6001\u89d2\u5ea6\u591a\u6837**\u800c\u5bfc\u81f4\u7684\u68c0\u6d4b\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u4f7f\u7528 wing loss \u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u79bb\u7fa4\u70b9( large error )\u95ee\u9898\u548c small error \u95ee\u9898\u3002 L2 loss \u6216\u8005 smooth l2 loss \u5728 0 \u9644\u8fd1( small error )\u7684 gradient \u53d8\u5316\u8d8b\u4e8e\u5e73\u7f13\u7684\uff0c\u66f4\u4e0d\u5bb9\u6613\u4f18\u5316\uff1b\u800c\u4e14 L2 loss \u5f88\u5bb9\u6613\u53d7\u79bb\u7fa4\u70b9( large error )\u5f71\u54cd wing loss \u5206\u6bb5\u51fd\u6570\uff0c\u5f53\u4e24\u70b9\u8ddd\u79bb\u8fc7\u8fdc\u65f6\uff0c\u4e3a\u4e86\u907f\u514d loss \u8fc7\u5927( large loss )\u4f7f\u7528 |x| - C \u6765\u9650\u5b9a loss \u4e0d\u8981\u8fc7\u5927\uff1b\u5f53 |x|<w \u65f6\uff0c small error \u65f6\u4f7f gradient \u53d8\u5316\u9661\u5ced\uff0c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u3002","title":"Wing loss"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_7","text":"\u4f20\u7edf\u7684\u5206\u7c7b\u7f51\u7edc\u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u91cf\uff0c\u90fd\u4f7f\u7528\u5230\u4e86\u4e0b\u91c7\u6837\uff0c\u800c\u4e0b\u91c7\u6837\u8fc7\u591a\uff0c\u4f1a\u5bfc\u81f4**\u5c0f\u76ee\u6807\u7684\u4fe1\u606f\u5728\u6700\u540e\u7684\u7279\u5f81\u56fe\u4e0a\u53ea\u6709\u51e0\u4e2a\u50cf\u7d20\uff08\u751a\u81f3\u66f4\u5c11\uff09**\uff0c\u4fe1\u606f\u635f\u5931\u8f83\u591a","title":"\u5c0f\u76ee\u6807\u96be\u68c0\u6d4b\u7684\u539f\u56e0"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#prior-box","text":"\u5148\u9a8c\u6846\uff0c\u5c31\u662fanchor box\u7684\u6982\u5ff5:\u9488\u5bf9feature map\u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u4e00\u4e2acell\uff0c\u901a\u8fc7\u7b49\u6bd4\u653e\u7f29\u7684\u65b9\u6cd5\u6765\u627e\u5230\u539f\u56fe\u50cf\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06cell\u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u63d0\u53d6\u51fa\u4e0d\u540c\u5c3a\u5ea6\u7684bounding box\u5019\u9009\u533a\u57df\uff0c\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u53eb\u505aPrior box\u3002\u9488\u5bf9\u6bcf\u4e00\u4e2aPrior Box\u548c\u771f\u503cGT\u6bd4\u8f83\u4f1a\u5f97\u5230label\u3002\u5bf9\u4e8ecell\u4f1a\u5bf9\u5e94\u5230\u4e0d\u540c\u7684Prior Box\uff0c\u5206\u522b\u5f53\u524dPrior Box\u9884\u6d4b\u7c7b\u522b\u6982\u7387\u548c\u5750\u6807(x,y,w,h).","title":"Prior box\u6982\u5ff5"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#kmeans","text":"kmeans\u4e0ekmeans++\u805a\u7c7b: \u535a\u5ba2 kemeans\u805a\u7c7b\u51fak\u7c7b\u957f\u5bbd(\u4e0d\u662f\u957f\u5bbd\u6bd4)\u5373\u53ef,\u7531\u4e8e\u6570\u636e\u96c6\u4e2d\u56fe\u7247\u5927\u5c0f\u53ef\u80fd\u4e0d\u540c\uff0c\u9700\u8981\u5148\u5f52\u4e00\u5316box\u7684\u5bbd\u9ad8:\u00b7= w=w_box/w_img,h=h_box/h_img \uff0ckmeans\u805a\u7c7b\u7684\u8861\u91cf\u6307\u6807\u662f d = 1 - IOU (\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3pre_box\u4e0egt_box\u7684iou\uff0c\u4e14iou\u8d8a\u5927\u8868\u793a\u8ddd\u79bb\u8d8a\u8fd1)\uff0c\u8ba1\u7b97IOU\u65f6\uff0c\u4e0d\u7528\u7ba1box\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5047\u8bbe\u6240\u6709box\u7684\u5de6\u4e0a\u9876\u70b9\u90fd\u5728\u539f\u70b9 Kmeans (\u7f3a\u70b9:\u5bf9\u79cd\u5b50\u70b9\u7684\u521d\u59cb\u5316\u975e\u5e38\u654f\u611f) \u968f\u673a\u9009\u53d6 K \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u5c06\u6bcf\u4e2a box \u5206\u914d\u7ed9\u4e0e\u5176\u8ddd\u79bb\u6700\u8fd1\u7684 anchor \uff1b \u8ba1\u7b97\u6bcf\u4e2a\u7c07\u4e2d\u6240\u6709 box \u5bbd\u548c\u9ad8\u7684\u5747\u503c\uff0c\u66f4\u65b0 anchor \uff1b \u91cd\u590d2\u30013\u6b65\uff0c\u76f4\u5230anchor\u4e0d\u518d\u53d8\u5316\uff0c\u6216\u8005\u8fbe\u5230\u4e86\u6700\u5927\u8fed\u4ee3\u6b21\u6570 kmeans++ \u968f\u673a\u9009\u53d6 1 \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u8ba1\u7b97 box \u4e0e\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3\u7684\u8ddd\u79bbD(x)\uff1b \u9009\u62e9D(x) \u8f83\u5927\u7684\u70b9\u4f5c\u4e3a\u65b0\u589e\u7684\u805a\u7c7b\u4e2d\u5fc3\uff0c\u6ce8\u610f\u4e0d\u8981\u9009\u62e9\u6700\u5927\u503c(\u6392\u5e8f\u6309\u7167\u6982\u7387\u503c\u9009\u62e9)\uff0c\u53ef\u80fd\u662f\u5f02\u5e38\u70b9 \u91cd\u590d2~3\uff0c\u76f4\u5230k\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u88ab\u9009\u51fa\u6765 \u5229\u7528\u8fd9 k \u4e2a\u521d\u59cb\u7684\u805a\u7c7b\u4e2d\u5fc3\u6765\u8fd0\u884c\u6807\u51c6\u7684 k-means \u7b97\u6cd5","title":"Kmeans\u805a\u7c7b"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_8","text":"ReLU/LeakyReLU/PReLU a_i=0:ReLU ; a_i=0.01:LeakyReLU ; a_i=\u8d85\u53c2\u6570\u53ef\u8bad\u7ec3\u66f4\u65b0:PReLU BP \u66f4\u65b0 ai \u65f6\uff0c\u91c7\u7528\u7684\u662f\u5e26**\u52a8\u91cf**\u7684\u66f4\u65b0\u65b9\u5f0f CReLU \u8bba\u6587\u4e2d\u63d0\u51fa\uff0c\u7f51\u7edc\u5728\u6d45\u5c42\u7684\u65f6\u5019\u53c2\u6570\u5206\u5e03\u5448\u73b0\u8f83\u5f3a\u7684\u8d1f\u76f8\u5173\u6027(\u66f4\u503e\u5411\u4e8e\u540c\u65f6\u6355\u83b7\u6b63\u8d1f\u54cd\u5e94\u7684\u4fe1\u606f)\uff0c\u5982\u679c\u6d45\u5c42\u4f7f\u7528 ReLU \u7684\u8bdd\u4f1a\u62b9\u6389\u8d1f\u54cd\u5e94\uff0c\u4f1a\u9020\u6210\u5377\u79ef\u6838\u5b58\u5728\u5197\u4f59\uff0c\u89e3\u51b3: CReLU \uff1b\u968f\u7740\u7f51\u7edc\u53d8\u6df1\uff0c\u8fd9\u79cd\u8d1f\u76f8\u5173\u6027\u9010\u6b65\u51cf\u5f31\u3002 Swish\u6fc0\u6d3b\u51fd\u6570 Swish \u5728\u6df1\u5c42\u6a21\u578b\u4e0a\u7684\u6548\u679c\u4f18\u4e8e ReLU\u3002\u53ef\u4ee5\u770b\u505a\u662f**\u4ecb\u4e8e\u7ebf\u6027\u51fd\u6570\u4e0eReLU\u51fd\u6570\u4e4b\u95f4\u7684\u5e73\u6ed1\u51fd\u6570**\uff0c\u4f8b\u5982\uff0c\u4ec5\u4ec5\u4f7f\u7528 Swish \u5355\u5143\u66ff\u6362 ReLU \u5c31\u80fd\u628a Mobile NASNetA \u5728 ImageNet \u4e0a\u7684 top-1 \u5206\u7c7b\u51c6\u786e\u7387\u63d0\u9ad8 0.9%\uff0cInception-ResNet-v \u7684\u5206\u7c7b\u51c6\u786e\u7387\u63d0\u9ad8 0.6%\u3002 Mish\u6fc0\u6d3b\u51fd\u6570 \u4e00\u79cd\u81ea\u6b63\u5219\u7684\u975e\u5355\u8c03\u795e\u7ecf\u6fc0\u6d3b\u51fd\u6570\uff0c\u5e73\u6ed1\u7684\u6fc0\u6d3b\u51fd\u6570\u5141\u8bb8\u66f4\u597d\u7684\u4fe1\u606f\u6df1\u5165\u795e\u7ecf\u7f51\u7edc\uff0c\u4ece\u800c\u5f97\u5230\u66f4\u597d\u7684\u51c6\u786e\u6027\u548c\u6cdb\u5316\u3002\u6839\u636e\u8bba\u6587\u5b9e\u9a8c\uff0c\u8be5\u51fd\u6570\u5728\u6700\u7ec8\u51c6\u786e\u5ea6\u4e0a\u6bd4 Swish(+0.494%) \u548c ReLU(+ 1.671%) \u90fd\u6709\u63d0\u9ad8\u3002","title":"\u5e38\u7528\u6fc0\u6d3b\u51fd\u6570"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#map","text":"\u4e3b\u8981\u662f TP+FP \u6709\u7528 AP\u503c\u8ba1\u7b97 \u9884\u6d4b\u503c\uff08Dets:\u6240\u6709\u9884\u6d4b\u6846\uff09\uff1a\u7269\u4f53\u7c7b\u522b\u3001\u8fb9\u6846\u4f4d\u7f6e\u76844\u4e2a\u9884\u6d4b\u503c\u3001\u8be5\u7269\u4f53\u7684\u5f97\u5206\u3002 \u6807\u7b7e\u503c\uff08GTs\uff09\uff1a\u7269\u4f53\u7c7b\u522b\u3001\u8fb9\u6846\u4f4d\u7f6e\u76844\u4e2a\u771f\u503c\u3002 \u5728\u904d\u5386\u5b8c\u6240\u6709\u7684\u9884\u6d4b\u6846\u540e\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u6bcf\u4e00\u4e2a\u9884\u6d4b\u6846\u7684\u5c5e\u6027\uff0c\u5373**TP\u6216FP** \u4e00\u4e2a\u4f8b\u5b50\u4e3a\uff1aR=\u201c\u6240\u6709\u597d\u74dc\u4e2d\u6709\u591a\u5c11\u6bd4\u4f8b\u88ab\u6311\u51fa\u6765\u201d\uff0cP=\u201c\u6311\u51fa\u6765\u7684\u897f\u74dc\u4e2d\u6709\u591a\u5c11\u6bd4\u4f8b\u662f\u597d\u74dc\u201d \u53ec\u56de\u7387(Recall,R) \u51c6\u786e\u7387(Precisioin,P) P-R\u66f2\u7ebf AP\u8ba1\u7b97:\u53ec\u56de\u7387\u9ad8\u7684\u65f6\u5019\u51c6\u786e\u7387\u4f1a\u5f88\u4f4e\uff0c\u51c6\u786e\u7387\u9ad8\u7684\u65f6\u5019\u5f80\u5f80\u53ec\u56de\u7387\u5f88\u4f4e(\u628a\u67d0\u7c7b\u7684\u6240\u6709\u9884\u6d4b\u6846(\u6570\u636e\u5e93\u7684\u6240\u6709\u56fe\u7247,\u4e0d\u662f\u6bcf\u5f20\u56fe\u7247\u5355\u72ec\u8ba1\u7b97\u51faAP\u518d\u5e73\u5747)\u6309\u7167score\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\uff0c\u7d22\u5f15\u4ece0\u5f00\u59cb\uff0c\u53ec\u56de\u7387\u9010\u6e10\u589e\u5927:\u68c0\u6d4b\u5bf9\u7684\u6846\u8d8a\u6765\u8d8a\u591a\uff0c\u7cbe\u51c6\u7387\u9010\u6e10\u4e0b\u964d:\u8bef\u68c0\u6846\u8d8a\u6765\u8d8a\u591a\uff09 07\u7684\u662f11points method : \u4f7f\u752811\u4e2a\u4e0d\u540c\u53ec\u56de\u7387\u5bf9\u5e94\u7684\u51c6\u786e\u7387\u6c42\u5e73\u5747\u7684\u65b9\u5f0f\u6c42AP 2010\u7684area\u65b9\u5f0f : \u6c42\u9762\u79ef\u7684\u65b9\u5f0f \uff0c\u6c42\u79ef\u5206\u5f88\u9ebb\u70e6\uff0c\u7528\u4e0b\u9762\u7684\u65b9\u5f0f\u5bb9\u6613\u3002 MAP\u8ba1\u7b97:\u6bcf\u4e2a\u7c7b\u522b\u7684AP\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u5c06\u6bcf\u4e2a\u7c7b\u522b\u7684AP\u8fdb\u884c\u5e73\u5747\uff0c\u5373\u53ef\u5f97\u5230mAP","title":"\u76ee\u6807\u68c0\u6d4bMAP\u8ba1\u7b97"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#roc","text":"\u6b63\u7c7b\u548c\u8d1f\u7c7b:\u5047\u8bbe\u9608\u503c\u4e3a 0.6 ,\u5f97\u5206\u5927\u4e8e\u7b49\u4e8e 0.6 \u7684\u4e3a\u6b63\u7c7b\uff0c\u5c0f\u4e8e 0.6 \u7684\u4e3a\u8d1f\u7c7b ROC \u66f2\u7ebf\u7684\u6a2a\u7eb5\u5750\u6807 \u7eb5\u5750\u6807 \u771f\u6b63\u7387-TPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u6b63\u5360\u6240\u6709\u6b63\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=1/all(gt=1) \u6a2a\u5750\u6807 \u5047\u6b63\u7387-FPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u8d1f\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=0/all(gt=0) \u6bcf\u4e2a\u9608\u503c\u4ee3\u8868\u4e00\u5bf9 (FPR,TPR) ,\u9608\u503c\u65e0\u7a77\u5927\u65f6\u9884\u6d4b\u65e0\u6b63\u4f8b FPR=TPR=0 \uff0c\u9608\u503c\u4e3a 0 \u65f6\u9884\u6d4b\u65e0\u8d1f\u4f8b FPR=TPR=1 ,\u4e00\u822c\u968f\u7740\u9608\u503c\u9010\u6e10\u589e\u5927\uff0c\u6b63\u4f8b\u8d8a\u6765\u8d8a\u5c11\uff0c\u6a2a\u5750\u6807\u51cf\u5c11\u7684\u66f4\u5feb \u5982\u4f55\u753b roc \u66f2\u7ebf\uff0c\u4e00\u822c\u9009\u53d6 range(0.1,1,0.001) \u5171\u8ba1 90 \u7ec4\u9608\u503c\uff0c\u8ba1\u7b97 AUC:(Area under Curve) \uff0c\u662f\u4e2a\u6982\u7387\u503c [0,1] ,\u8d8a\u5927\u5206\u7c7b\u6548\u679c\u8d8a\u597d\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528 ROC\u66f2\u7ebf \u800c\u4e0d\u4f7f\u7528 PR \u66f2\u7ebf\uff1f\u539f\u56e0: \u5f53\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6b63\u8d1f\u6837\u672c\u7684\u5206\u5e03\u53d8\u6362\u7684\u65f6\u5019(\u4f8b\u5982\u8d1f\u6837\u672c\u6570\u91cf\u589e\u592710\u500d)\uff0cROC\u66f2\u7ebf\u80fd\u591f\u4fdd\u6301\u4e0d\u53d8,\u4f46\u662fPR\u66f2\u7ebf\u5de8\u53d8","title":"ROC\u66f2\u7ebf"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#nmslink","text":"NMS \uff1a\u76f4\u63a5\u628aiou\u5927\u4e8e\u9608\u503c(\u5e38 0.5 )\u7684\u6846\u8e22\u6389(\u5f97\u5206\u7f6e\u4e3a0) \u6839\u636e\u7f6e\u4fe1\u5ea6\u964d\u5e8f\u6392\u5217\u5019\u9009\u6846\u5217\u8868 \u9009\u53d6\u7f6e\u4fe1\u5ea6\u6700\u9ad8\u7684\u6846A\u6dfb\u52a0\u5230\u8f93\u51fa\u5217\u8868\uff0c\u5e76\u5c06\u5176\u4ece\u5019\u9009\u6846\u5217\u8868\u4e2d\u5220\u9664 \u8ba1\u7b97A\u4e0e\u5019\u9009\u6846\u5217\u8868\u4e2d\u7684\u6240\u6709\u6846\u7684IoU\u503c\uff0c\u5220\u9664\u5927\u4e8e\u9608\u503c\u7684\u5019\u9009\u6846(\u76f8\u5f53\u4e8e\u5f97\u5206\u76f4\u63a5\u7f6e\u4e3a0) \u91cd\u590d\u4e0a\u8ff0\u8fc7\u7a0b\uff0c\u76f4\u5230\u5019\u9009\u6846\u5217\u8868\u4e3a\u7a7a\uff0c\u8fd4\u56de\u8f93\u51fa\u5217\u8868 \u5bf9\u91cd\u53e0\u7269\u4f53\u6548\u679c\u4e0d\u597d(\u884c\u4eba/\u732a\u53ea\u7b49)\uff0c\u4f1a\u5bfc\u81f4\u6f0f\u68c0\u589e\u591a soft-nms \uff1aiou\u5927\u4e8e\u9608\u503c\u7684\u6846\u5f97\u5206\u4e0d\u7f6e\u4e3a0(\u5bf9\u4e8e\u91cd\u53e0\u76ee\u6807\u8fd9\u4e2a\u6846\u53ef\u80fd\u6709\u7528)\uff0c\u800c\u662f\u66f4\u5177 IOU\u5927\u5c0f \u4ee5\u67d0\u79cd\u51fd\u6570\u8870\u51cf\uff0c IOU \u8d8a\u5927\u5f97\u5206\u8d8a\u4f4e\uff0c\u8870\u51cf\u8d8a\u4e25\u91cd\u3002 \u5047\u8bbe\u4e00\u4e2a\u56fe\u4e2d\u6709\u4e09\u4e2a\u6846\uff0c\u5f97\u5206\u4e3a 0.9,0.7,0.85 \uff0c\u7ecf\u8fc7 soft-nms \u7b2c\u4e00\u6b21\u5904\u7406\u53d8\u4e3a 0.9,0.65,0.55 (\u5982\u679c\u662f nms:0.9,0,0 )\uff0c\u7136\u540e\u518d\u5faa\u73af\u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u4e0d\u4f1a\u5220\u9664\u6846\uff0c\u6700\u540e\u901a\u8fc7\u9608\u503c\u5220\u9664\u5f97\u5206\u4f4e\u7684\u6846\u5373\u53ef\u3002 \u8870\u51cf\u51fd\u6570\u5e38\u7528\u7684\u4e24\u79cd\u65b9\u5f0f: linear: result_score = base_score - base_score*iou gausian:result_score = base_score * np.exp(-iou**2 / sigma:0.5) \u6548\u679c\u5c55\u793a: \u95ee\u9898\u5c31\u662f\u7f6e\u4fe1\u5ea6\u7684\u9608\u503c\u5982\u4f55\u9009\u62e9 \uff0c\u4f5c\u8005\u5728\u8fd9\u91cc\u4f9d\u7136\u4f7f\u7528\u624b\u5de5\u8bbe\u7f6e\u7684\u503c\uff0c\u4f9d\u7136\u5b58\u5728\u5f88\u5927\u7684\u5c40\u9650\u6027 WBF(\u6bd4\u8d5b\u4e13\u7528:Weighted Boxes Fusion) code \u52a0\u6743\u8fb9\u6846\u878d\u5408 \uff0c\u5e38\u7528\u4e8e\u878d\u5408\u591a\u4e2a\u6a21\u578b\u5bf9\u540c\u4e00\u5f20\u56fe\u7247\u7684\u6846\u9884\u6d4b\uff0c\u6216\u8005\u5355\u4e2a\u6a21\u578b\u4e0d\u540c\u5c3a\u5ea6\u7684\u7ed3\u679c\u878d\u5408\uff0c\u6bd4 NMS \u6162 3 \u500d\u3002 \u6bcf\u4e2a\u6a21\u578b\u7684\u6bcf\u4e2a\u9884\u6d4b\u6846\u90fd\u6dfb\u52a0\u5230 List B \uff0c\u5e76\u5c06\u6b64\u5217\u8868\u6309\u7f6e\u4fe1\u5ea6\u5f97\u5206 C **\u964d\u5e8f**\u6392\u5217 \u5efa\u7acb\u7a7a List L \u548c list F \uff08\u7528\u4e8e\u878d\u5408\u7684\uff09 \u5faa\u73af\u904d\u5386 B \uff0c\u5e76\u5728 F \u4e2d\u627e\u5230\u4e0e\u4e4b\u5339\u914d\u7684 box \uff08\u540c\u4e00\u7c7b\u522b MIOU > 0.55:\u6700\u4f73\u9608\u503c \uff09 \u5982\u679c step3 \u4e2d\u6ca1\u6709\u627e\u5230\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \u548c F \u7684\u5c3e\u90e8\uff0c\u5982\u679c step3 \u4e2d\u627e\u5230\u4e86\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \uff0c\u52a0\u5165\u7684\u4f4d\u7f6e\u662f box \u5728 F \u4e2d\u5339\u914d\u6846\u7684 Index \uff1b L \u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u4e2a\u6846\uff0c\u9700\u8981\u6839\u636e\u8fd9\u591a\u4e2a\u6846\u66f4\u65b0\u5bf9\u5e94 F[index] \u7684\u503c\uff0c\u5176\u5b9e list L \u79f0\u4e3a dict L \u66f4\u597d\u3002\u66f4\u65b0\u65b9\u5f0f\u5982\u4e0b(\u5bf9\u5750\u6807\u503c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6c42\u548c): \u904d\u5386\u5b8c\u6210\u540e\u5bf9 F \u4e2d\u7684\u5143\u7d20\u518d\u8fdb\u884c\u7f6e\u4fe1\u5ea6\u5f97\u5206\u7684\u7f29\u653e\uff0c\u51cf\u5c11\u67d0\u4e9b box \u53ea\u88ab\u5c11\u6570\u6a21\u578b\u9884\u6d4b\u5230\u7684\u7f6e\u4fe1\u503c(\u5982\u679c\u7fa4\u96c6\u4e2d\u7684\u591a\u4e2a\u6846\u5f97\u5206\u8f83\u4f4e\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740 \u53ea\u6709\u5c11\u6570\u6a21\u578b\u53ef\u4ee5\u9884\u6d4b\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u964d\u4f4e\u6b64\u7c7b\u60c5\u51b5\u7684\u7f6e\u4fe1\u5ea6\u5f97\u5206)\u3002","title":"NMS\u53ca\u5176\u53d8\u4f53link"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#bn-and-gn","text":"BN \u7814\u7a76\u8005\u53d1\u73b0\uff0c\u7f51\u7edc\u8d8a\u6df1\u8d8a\u96be\u6536\u655b\uff0c\u53ea\u6709\u901a\u8fc7\u8f83\u5c0f\u7684\u5b66\u4e60\u7387\u548c\u521d\u59cb\u5316\u53c2\u6570\u624d\u80fd\u5f97\u5230\u76f8\u5bf9\u8f83\u597d\u7684\u7ed3\u679c\uff0c\u7ecf\u7814\u7a76\u6bcf\u6b21\u53cd\u5411\u4f20\u64ad\u53c2\u6570\u8fed\u4ee3\u66f4\u65b0\u540e\uff0c\u524d\u4e00\u5c42\u7f51\u7edc\u8f93\u51fa\u6570\u636e\u7ecf\u8fc7\u8be5\u5c42\u7f51\u7edc\u540e\u6570\u636e\u5206\u5e03\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u4e3a\u4e0b\u4e00\u5c42\u7f51\u7edc\u7684\u5b66\u4e60\u5e26\u6765\u56f0\u96be(\u7f51\u7edc\u5c42\u672c\u8d28\u5c31\u662f\u5b66\u4e60\u6570\u636e\u5206\u5e03\uff0c\u5206\u5e03\u4e00\u76f4\u53d8\u5c31\u96be\u6536\u655b)\u3002 Batchnorm \u4ee5\u52a0\u901f\u6536\u655b\u901f\u5ea6\u548c\u6a21\u578b\u7a33\u5b9a\u6027\u800c\u51fa\u540d\uff0c\u5b83\u80fd\u7a81\u51fa\u6570\u636e\u5206\u5e03\u4e4b\u95f4\u7684\u76f8\u5bf9\u5dee\u5f02\uff1b \u5982\u679c\u5355\u72ec\u7684\u5bf9\u6bcf\u5c42\u8fdb\u884c\u5f52\u4e00\u5316\u5c31\u4f1a\u7834\u574f\u6a21\u578b\u672c\u8eab\u6240\u5b66\u5f97\u7684\u7279\u5f81\uff0c\u5bfc\u81f4\u5b66\u4e0d\u5230\u4efb\u4f55\u4e1c\u897f\uff0cBN\u7684\u6210\u529f\u5728\u4e8e\u5f15\u5165\u4e86\u7f29\u653e\u91cf\u03b3 \u548c\u5e73\u79fb\u91cf\u03b2\u6765\u6062\u590d\u539f\u59cb\u7279\u5f81 \u3002 bn\u5728\u8bad\u7ec3\u8fc7\u7a0b\u548c\u63a8\u7406\u8fc7\u7a0b\u662f\u5982\u4f55\u8bbe\u7f6e\u65b9\u5dee\u548c\u671f\u671b\u7684\uff1f \u8bad\u7ec3\u8fc7\u7a0b : [batch,N,H,W] \uff0c batchnorm \u5c42\u662f\u5728 batch \u7ef4\u5ea6\u4e0a\u8fdb\u884c norm \u7684\uff0c\u6240\u4ee5\u5f52\u4e00\u5316\u7684\u662f[N,H,W]\uff0c\u5373\u5bf9batch\u4e2d\u7684channel\u505a\u5f52\u4e00\u5316\u3002 \u7b2c\u4e00\u4e2a\u6837\u672c\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\uff0c\u52a0\u4e0a\u7b2c\u4e8c\u4e2a\u6837\u672c\u7684\u7b2c\u4e00\u4e2a\u901a\u9053.....,\u7b2cN\u4e2a\u6837\u672c\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\uff0c\u5f97\u5230\u7b2c\u4e00\u4e2a\u901a\u9053\u7684\u5747\u503c\uff08\u9664\u4ee5NxHxW\u800c\u4e0d\u662f\u5355\u7eaf\u9664\u4ee5N\uff0c\u6700\u540e\u5f97\u5230\u7684\u662f\u4ee3\u8868\u8fd9\u4e2abatch\u7684\u7b2c\u4e00\u4e2a\u901a\u9053\u7684\u5e73\u5747\u503c\u7684\u6570\u5b57\uff0c\u800c\u4e0d\u662f\u4e00\u4e2aHxW\u7684\u77e9\u9635\uff09\u3002\u540c\u6837\u7684\u65b9\u6cd5\u6c42\u51fa\u65b9\u5dee\u3002\u6ce8\u610f\u6c42\u5f97\u7684\u5747\u503c\u65b9\u5dee\u4e0d\u662f\u4e00\u4e2a\u503c\uff0c\u800c\u662f\u901a\u9053\u4e2a\u6570\u4e2a\u503c \u63a8\u7406\u8fc7\u7a0b :\u7528\u7684\u662f\u6240\u6709mini-batches**\u8bad\u7ec3\u6837\u672c**\u5747\u503c\u548c\u65b9\u5dee\u7684**\u7d2f\u8ba1\u6ed1\u52a8\u5e73\u5747\u7ed3\u679c**\uff0c\u8fd9\u6837\u7684\u8bdd\u5355\u6837\u672c\u4e5f\u80fd\u9884\u6d4b\u3002 # momentum : \u52a8\u91cf\u53c2\u6570\uff0c\u4e00\u822c\u4e3a0.9\uff0c 0.99\uff0c 0.999 # pytorch\u7684BN\u4e2d\u5e38\u6709\u4ee5\u4e0b\u53d8\u91cf\u3002 # running_mean \uff1a\u6ed1\u52a8\u5e73\u5747\u7684\u65b9\u5f0f\u8ba1\u7b97\u65b0\u7684\u5747\u503c\uff0c\u8bad\u7ec3\u65f6\u8ba1\u7b97\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u505a\u51c6\u5907 # running_var : \u6ed1\u52a8\u5e73\u5747\u7684\u65b9\u5f0f\u8ba1\u7b97\u65b0\u7684\u65b9\u5dee\uff0c\u8bad\u7ec3\u65f6\u8ba1\u7b97\uff0c\u4e3a\u6d4b\u8bd5\u6570\u636e\u505a\u51c6\u5907 running_mean = momentum * running_mean + ( 1 - momentum ) * x_mean running_var = momentum * running_var + ( 1 - momentum ) * x_var GN:Group Normbalization BN \u7684\u7f3a\u70b9 BN \u662f\u4ee5 batch \u4e3a\u4e3b\u7684\uff0c \u8fc7\u5c0f\u7684 batch size \u4f1a\u5bfc\u81f4\u5176\u6027\u80fd\u4e0b\u964d (\u4e00\u822c\u6765\u8bf4\u6bcf\u4e2a gpu \u4e0a batch_size=32 \u6700\u5408\u9002)\uff0c\u4f46\u5bf9\u4e8e\u5927\u578b\u7684\u7f51\u7edc\uff0c\u5c24\u5176\u662f\u68c0\u6d4b\u7f51\u7edc\uff0c batch_size \u6709\u7684\u8bbe\u7f6e\u6210 2,4 \u5c31\u5360\u6ee1\u663e\u5b58 \u9884\u6d4b\u65f6\uff0c\u5747\u503c\u65b9\u5dee\u662f\u7528**\u8bad\u7ec3\u96c6\u7684\u6ed1\u52a8\u5e73\u5747**\u6c42\u5f97\u7684\uff0c\u5982\u679c\u5f53\u8bad\u7ec3\u6570\u636e\u548c\u6d4b\u8bd5\u6570\u636e\u5206\u5e03\u6709\u5dee\u522b\u65f6\uff0c\u7ed3\u679c\u5c31\u4f1a\u4e0d\u597d GN \u7684\u5f52\u4e00\u5316\u65b9\u5f0f\u907f\u5f00\u4e86 batch size \u5bf9\u6a21\u578b\u7684\u5f71\u54cd\uff0c\u7279\u5f81\u7684 group \u5f52\u4e00\u5316\u540c\u6837\u53ef\u4ee5\u89e3\u51b3\u6570\u636e\u5206\u5e03\u5dee\u5f02\u7684\u95ee\u9898\uff0c\u5e76\u53d6\u5f97\u8f83\u597d\u7684\u6548\u679c\u3002 \u5c0f\u7684batch size\u53ef\u4ee5\u8003\u8651\u4f7f\u7528GN","title":"Bn and GN"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_9","text":"\u601d\u60f3 :\u6bcf\u4e2a\u5377\u79ef\u5c42\u6709\u5f88\u591a\u901a\u9053\uff0c\u8fd9\u4e9b\u901a\u9053\u6709\u53ef\u80fd\u662f\u5197\u4f59\u7684\uff0c\u60f3\u6cd5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u901a\u9053\u5f15\u5165\u4e00\u4e2a\u7f29\u653e\u56e0\u5b50 gamma ,\u7136\u540e\u548c\u901a\u9053\u7684\u8f93\u51fa\u76f8\u4e58\uff0c\u63a5\u7740\u8054\u5408\u8bad\u7ec3\u7f51\u7edc\u6743\u91cd\u548c\u8fd9\u4e9b\u7f29\u653e\u56e0\u5b50\uff0c\u6700\u540e\u5c06\u5c0f\u7f29\u653e\u56e0\u5b50\u7684\u901a\u9053\u76f4\u63a5\u79fb\u9664\uff0c\u5fae\u8c03\u526a\u679d\u540e\u7684\u7f51\u7edc\u5373\u53ef\uff0c\u56e0\u4e3aconv+bn\u662f\u4e00\u822c\u7f51\u7edc\u7684\u6807\u914d\uff0c\u6240\u4ee5\u53ef\u4ee5\u628a BN \u5c42\u7684 gamma \u7cfb\u6570\u4f5c\u4e3a\u7f29\u653e\u56e0\u5b50\u6765\u8fdb\u884c L1 \u6b63\u5219\u3002 # pytorch\u5bf9BN\u5c42\u8fdb\u884cL1\u6b63\u5219\u5316 def updateBN ( model ): for n , m in model . named_modules (): if isinstance ( m , nn . BatchNorm2d ): # torch.sign\u662f\u5224\u65ad\u6b63\u8d1f\u7684\uff0c\u5927\u4e8e0\u7684\u8fd4\u56de1\uff0c\u5c0f\u4e8e0\u7684\u8fd4\u56de-1 m . weight . grad . data . add_ ( args . s * torch . sign ( m . weight . data )) # L1 \u6211\u4eec\u5148\u5bf9\u6240\u6709 bn \u5c42\u7f29\u653e\u56e0\u5b50 gamma \u7684\u7edd\u5bf9\u503c\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u53d6\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u7684\u7f29\u653e\u56e0\u5b50\u4e2d70%\uff08\u526a\u679d\u6bd4\uff09\u7684\u4f4d\u7f6e\u7684\u7f29\u653e\u56e0\u5b50\u4e3a\u9608\u503c\u3002 \u526a\u679d\u65b9\u5f0f \u526a\u679d\u540e\u6bcf\u5c42\u901a\u9053\u5269\u4f59\uff0c\u81f3\u5c11\u4e3a 1 \uff0c\u6216\u8005\u53ef\u4ee5\u8bbe\u7f6e\u4e3a 2^x \u6570\u76ee\uff0c\u8fd9\u6837\u8f83\u7a33\u5b9a\u4f46\u727a\u7272\u4e86\u90e8\u5206\u538b\u7f29\u7387 \u6052\u5b9a s \u526a\u679d:\u4e00\u76f4\u4ee5\u56fa\u5b9a\u7684 L1 \u60e9\u7f5a\u7cfb\u6570 s=0.01 \u5168\u5c40 s \u8870\u51cf\u526a\u679d: s = s if epoch <= opt.epochs * 0.5 else s * 0.01 \uff0c\u8d85\u8fc7 epochs/2 \u540e\u60e9\u7f5a\u7cfb\u6570\u8870\u51cf 100 \u500d\uff0c\u4f7f\u5f97\u7cbe\u5ea6\u7a0d\u5fae\u6062\u590d\u3002 \u5c40\u90e8 s \u8870\u51cf\u526a\u679d:\u8d85\u8fc7 epochs/2 \u540e\u5bf9 85 %\u7684\u901a\u9053(\u6240\u6709 bn \u901a\u9053 s \u6392\u5e8f)\u4fdd\u6301\u539f\u59cb\u6052\u5b9a\u60e9\u7f5a\u7cfb\u6570 s \u538b\u7f29\uff0c 15% \u7684\u901a\u9053\u8fdb\u884c s \u8870\u51cf 100 \u500d\u7684\u538b\u7f29( 85% \u662f\u4e2a\u5148\u9a8c\u77e5\u8bc6\uff0c\u4e00\u822c\u8fd9\u4e2a\u538b\u7f29\u7387\u662f\u6700\u4f73\u7684)\u3002","title":"\u901a\u9053\u526a\u679d"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_10","text":"\u53ea\u84b8\u998f\u4e00\u4e2a\u8f93\u51fa\u5c42 \u8981\u84b8\u998f\u7684\u5c0f\u6a21\u578b\uff0c\u4ee5\u5927\u6a21\u578b\u7684\u8f93\u51fa\u7684\u6982\u7387\u5411\u91cf( soft target : \u8f6f\u6807\u7b7e ->\u62e5\u6709\u4e0d\u540c\u7c7b\u4e4b\u95f4\u5173\u7cfb\u7684\u4fe1\u606f)\u4e3a\u5b66\u4e60\u76ee\u6807\uff0c\u56e0\u4e3a one-hot \u5305\u542b\u7684\u4fe1\u606f\u91cf\u5f88\u4f4e [0,1] \uff08\u7c7b\u4f3c label smooth \uff09\uff0c\u56e0\u4e3a\u8d1f\u6807\u7b7e\u4e5f\u5e26\u6709\u5927\u91cf\u4fe1\u606f\u3002 \u5982\u4f55\u505a\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u5728 softmax \u4e2d\u589e\u52a0\u6e29\u5ea6\u53c2\u6570 T \uff0c\u63a8\u7406\u7684\u65f6\u5019 T=1 \uff0c\u4f18\u5316 L_soft \u7684\u65f6\u5019\u5e38\u7528 KL\u6563\u5ea6 \u8ba1\u7b97 Loss : \u4ea4\u53c9\u71b5= KL \u6563\u5ea6+\u71b5 \uff0c one-hot \u6807\u7b7e\u7684\u771f\u5b9e\u4fe1\u606f\u71b5\u662f\u56fa\u5b9a\u7684\u6240\u4ee5\u7528\u4ea4\u53c9\u71b5\u4ee3\u66ff KL \u6563\u5ea6\uff0c\u4f46\u662f soft label \u7684\u4fe1\u606f\u71b5\u662f teacher \u7f51\u7edc\u751f\u6210\u7684\uff0c\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u7528 KL \u6563\u5ea6\u3002 \u6e29\u5ea6 T :\u8d8a\u5c0f\u8d8a\u653e\u5927\u6b63\u6837\u672c\uff0c\u8d8a\u5927\u8d8a\u653e\u5927\u8d1f\u6837\u672c(\u5373\u653e\u5927\u5c0f\u6982\u7387\u503c\u5206\u91cf\u6240\u643a\u5e26\u7684\u4fe1\u606f)\u3002 \u7cbe\u5ea6\u66f4\u9ad8\u7684\u6a21\u578b\u84b8\u998f\u5c0f\u6a21\u578b\u63d0\u5347\u70b9\u66f4\u5c11\uff0c\u539f\u56e0\u5206\u6790 \uff1a Teacher \u66f4\u590d\u6742\uff0c Student \u6ca1\u6709\u8db3\u591f\u7684\u80fd\u529b\u6765\u6a21\u4eff Teacher Teacher \u7684\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u6a21\u578b\u786e\u5b9a\u6027\u66f4\u5f3a\uff0c\u8f93\u51fa logits \uff08 soft label \uff09\u53d8\u5f97 less soft \uff0c\u8d8b\u8fd1\u4e8e one-hot \u89e3\u51b3\u65b9\u6848:\u53ef\u4ee5\u5229\u7528\u8d85\u5927\u6a21\u578b\u4f5c\u4e3a**\u52a9\u6559\u7f51\u7edc**\u8f85\u52a9\u84b8\u998f(\u8d85\u5927\u7f51\u7edc\u4f5c\u4e3a Teacher ,\u5927\u7f51\u7edc\u4f5c\u4e3a Teach-Assistant \uff0c\u5c0f\u7f51\u7edc\u4f5c\u4e3a Student ) \u9996\u5148\u5bf9\u8d85\u5927\u7f51\u7edc\u5bf9\u5927\u7f51\u7edc\u8fdb\u884c\u84b8\u998f(\u5927\u7f51\u7edc\u7684\u9009\u53d6\u548c\u8d85\u5927\u7f51\u7edc\u76f8\u5dee\u4e0d\u8981\u592a\u5927( 7\u500d \u4ee5\u4e0a)\uff0c\u4e0d\u7136\u4e5f\u84b8\u4e0d\u51fa\u6765) \u518d\u7528\u6574\u7406\u597d\u7684\u5927\u7f51\u7edc\u5bf9\u6700\u7ec8\u7684\u5c0f\u7f51\u7edc\u8fdb\u884c\u84b8\u998f \u591a\u4e2aTeacher\u6a21\u578b\u5982\u4f55\u84b8\u998f link \u5c06\u591a\u4e2ateacher\u6a21\u578b\u7684\u9884\u6d4b\u6982\u7387\uff08softmax\u540e\u8f93\u51fa\uff09\u6c42\u5e73\u5747\u503c\u6765\u8fdb\u884c\u84b8\u998f\uff0c\u6548\u679c\u597d\u4e8e\u968f\u673a\u9009\u4e00\u4e2ateacher\u6a21\u578b\u8fdb\u884c\u84b8\u998f\u3002 \u8f93\u51fa\u5c42\u548c\u7279\u5f81\u5c42\u4e00\u8d77\u84b8\u998f \u5bf9\u4e8eT\u548cS\u4e2d\u95f4\u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff0c\u91c7\u7528\u5728 S \u7f51\u7edc\u8f93\u51fa\u63a5\u4e00\u4e2a\u8f6c\u6362\u5668( conv+bn+mish )\uff0c\u5c06\u5176\u5347\u7ef4\u5230 T \u7f51\u7edc\u5339\u914d\uff0cT\u7684\u8bdd\u76f4\u63a5\u63a5\u4e00\u4e2a mish \u4fdd\u8bc1\u6fc0\u6d3b\u51fd\u6570\u76f8\u540c( mish=x*tanh(ln(1+e^x)) )\u3002 loss:nn.MSE-->\u9884\u6d4b\u6570\u636e\u548c\u539f\u59cb\u6570\u636e\u5bf9\u5e94\u70b9\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u7684\u5747\u503c","title":"\u77e5\u8bc6\u84b8\u998f(\u5206\u7c7b/\u56de\u5f52\u7528)"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#fp32","text":"\u4f4d\uff0c\u5b57\u8282\u89e3\u91ca :1\u4f4d=1bit=0/1(\u4e00\u4e2a0\u62161\u5c31\u4ee3\u8868\u4e00\u4f4d)\uff0c1Byte(\u5b57\u8282)=8\u4f4d=8bit \u6d6e\u70b9\u6570\u8be6\u89e31 | \u6d6e\u70b9\u6570\u8be6\u89e32 fp32\u7ec4\u6210=1\u7b26\u53f7\u4f4dS[ ] + 8\u6307\u6570\u4f4de[ ] [ ] [ ] [ ] [ ] [ ] [ ] [ ] + \u5c3e\u6570f[ ]*23 1 \u7b26\u53f7\u4f4d\uff0c\u53ea\u6709 0/1 \uff0c float \u548c double \u7b26\u53f7\u4f4d\u5747\u4e3a 1 \u4f4d\uff0c 0 \u4ee3\u8868\u6b63\u6570\uff0c 1 \u4ee3\u8868\u8d1f\u6570 8 \u6307\u6570\u4f4d\u8868\u793a\u6307\u6570\u90e8\u5206\uff0c\u5b58\u50a8\u79d1\u5b66\u8ba1\u6570\u6cd5\u4e2d\u7684\u6307\u6570\u90e8\u5206\uff0c\u91c7\u7528\u79fb\u4f4d\u5b58\u50a8\uff0c\u6307\u6570\u8303\u56f4: [-127,128] 23 \u5c3e\u6570\u8868\u793a\u5c0f\u6570\u90e8\u5206\uff0c\u5b58\u50a8\u79d1\u5b66\u8ba1\u6570\u6cd5\u4e2d\u7684\u5c3e\u6570\u90e8\u5206:","title":"FP32\u626b\u76f2"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#int8","text":"\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u662f\u6743\u91cd\u548c\u6fc0\u6d3b\u503c\u7684\u5377\u79ef\u4e58\u52a0\u64cd\u4f5c \u6a21\u578b\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u9488\u5bf9\u6743\u91cd Weight \u91cf\u5316\uff0c\u4e00\u662f\u9488\u5bf9\u6fc0\u6d3b\u503c Activation \u91cf\u5316\uff0c\u5728\u4e00\u4e9b\u6587\u7ae0\u4e2d\u5df2\u7ecf\u8868\u660e\u4e86\u5c06\u6743\u91cd\u548c\u6fc0\u6d3b\u503c\u91cf\u5316\u5230 8bit \u65f6\u5c31\u53ef\u4ee5\u7b49\u4ef7 32bit \u7684\u6027\u80fd\u3002 \u672c\u6b21\u4ecb\u7ecd\u7684\u662f\u9759\u6001\u79bb\u7ebf\u8bad\u7ec3\u5728\u9884\u6d4b\u524d**\u4f7f\u7528\u91cf\u5316\u6821\u51c6\u96c6\u8fdb\u884c\u6a21\u578b\u6fc0\u6d3b\u503c\u5206\u5e03\u7684\u7edf\u8ba1**\uff0c\u786e\u5b9a\u6fc0\u6d3b\u5c42\u7684\u91cf\u5316\u53c2\u6570\u7684\u65b9\u5f0f\u3002 FP32\u5360\u75284\u4e2a\u5b57\u8282\u517132\u4f4d;FP16\u5360\u75282\u4e2a\u5b57\u8282\u517116\u4f4d;int8\u5360\u75281\u4e2a\u5b57\u8282\u51718\u4f4d; | \u91cf\u5316\u65b9\u6cd5\u6c47\u603b | TensorRt\u91cf\u5316\u8be6\u89e3 \u7b80\u4ecb \u91cf\u5316\u4e0d\u662f\u65b0\u4e1c\u897f\uff0c\u6211\u4eec\u505a\u56fe\u50cf\u9884\u5904\u7406\u5c31\u7528\u5230\u4e86\u91cf\u5316\uff1b**\u53cd\u91cf\u5316:**\u4e00\u5f20\u56fe\u7247(0-255)\u2192\u5f52\u4e00\u5316(0~1)\uff1b**\u91cf\u5316:**\u53cd\u8fc7\u6765\uff0c\u91cf\u5316\u672c\u8d28\u4e0a\u53ea\u662f\u5bf9\u6570\u503c\u8303\u56f4\u7684\u91cd\u65b0\u8c03\u6574\uff0c\u662f\u4e00\u79cd\u6620\u5c04\u5173\u7cfb\u3002 \u4e3e\u4e2a\u7b80\u5355\u4f8b\u5b50\uff0c\u91cf\u5316\u5230\u5e95\u5728\u91cf\u5316\u4ec0\u4e48\uff1f \u4e00\u56fe\u80dc\u5343\u8a00\uff0c\u5377\u79ef\u91cf\u5316\u662f\u5bf9\u8f93\u5165\u7684 tensor \u548c weight \u53c2\u6570\u90fd\u9700\u8981\u8fdb\u884c\u91cf\u5316\uff0c\u5c06\u8ba1\u7b97\u5c42\u7684\u8f93\u5165\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u539f\u672c32bit\u6d6e\u70b9\u6570\u7684\u4e58\u52a0\u64cd\u4f5c\u53d8\u4e3a8bit\u7684\u6574\u6570\u4e58\u52a0\u64cd\u4f5c\uff0c\u51cf\u5c11\u4e86\u6a21\u578b\u63a8\u7406\u7684\u8ba1\u7b97\u91cf \u516c\u5f0f\u89e3\u6790 # 1. \u7ebf\u6027\u91cf\u5316\u516c\u5f0f\uff1aFP32 \u6570\u503c\uff08Tensor Values\uff09\u88ab\u8868\u793a\u6210 INT8 \u6570\u503c\uff08INT8 array\uff09\u4e58\u4ee5\u91cf\u5316\u56e0\u5b50\u52a0\u4e0a\u4e00\u4e2a\u91cf\u5316\u504f\uff0c\u4e24\u4e2a\u53c2\u6570\u5747\u4e3a FP32 \u7c7b\u578b\u3002 Tensor Values = FP32 scale factor * INT8 array + FP32 bias # 2.\u5229\u7528\u4e0a\u8ff0\u7684\u516c\u5f0f\u53ef\u4ee5\u8868\u793a\u795e\u7ecf\u7f51\u7edc\u4e2d\u4e24\u4e2a\u77e9\u9635\u76f8\u4e58 A = scale_A * QA + bias_A B = scale_B * QB + bias_B A * B = scale_A * scale_B * QA * QB + scale_A * QA * bias_B + scale_B * QB * bias_A + bias_A * bias_B # 2.1 NVIDIA\u7814\u7a76\u5458\u5b9e\u9a8c\u8868\u660e:\u5e76\u4e0d\u9700\u8981\u5728\u91cf\u5316\u7684\u65f6\u5019\u52a0\u4e0a\u504f\u7f6e(\u6211\u7406\u89e3:\u504f\u7f6e\u53ea\u662f\u6539\u53d8\u6570\u503c\u7684\u5206\u5e03\u4f4d\u7f6e),\u516c\u5f0f\u7b80\u5316 A * B = scale_A * scale_B * QA * QB # QA\u3001QB=F32A/scale_A\u3001F32B/scale_B # \u6240\u4ee5\u6700\u7ec8\u7684\u95ee\u9898\u5c31\u53d8\u6210\u4e86\u5982\u4f55\u5f97\u5230\u91cf\u5316\u53c2\u6570scale factor\u7684\u95ee\u9898 \u5982\u4f55\u9009\u53d6\u5408\u9002\u7684scale? \u4e0a\u9762\u662f\u6309\u7167\u7edd\u5bf9\u503c\u6700\u5927\u503c\u4f5c\u4e3a\u9600\u503c\uff0c\u4f46\u662f\u5f53\u6b63\u8d1f\u5206\u5e03\u4e0d\u5747\u5300\u7684\u65f6\u5019\uff0c\u662f\u6709\u4e00\u90e8\u5206\u662f\u7a7a\u7f3a\u7684\uff0c\u4e5f\u5c31\u662f\u4e00\u90e8\u5206\u503c\u57df\u88ab\u6d6a\u8d39\u4e86(\u8003\u8651\u6781\u7aef:\u6fc0\u6d3b\u503c\u5168\u4e3a\u6b63)\uff0c\u4e8e\u662f\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u662f\u8fd9\u4e48\u5e72\u7684: \u9009\u62e9\u5408\u9002\u7684\u9608\u503cT\u540e, \u5c06 \u00b1|T| \u6620\u5c04\u4e3a\u00b1127 ,\u8d85\u51fa \u9608\u503c \u00b1|T| \u5916\u7684\u76f4\u63a5\u6620\u5c04\u4e3a\u9608\u503c \u00b1127 \uff0c**\u5982\u4f55\u5bfb\u627e\u6700\u4f18\u7684\u9600\u503cT\u4f7f\u5f97\u7cbe\u5ea6\u7684\u635f\u5931\u6700\u5c0f\u5462\uff1f\u8fd9\u5c31\u53d8\u6210\u4e86\u6700\u4f18\u5316\u95ee\u9898\uff0c\u6211\u9996\u5148\u60f3\u5230\u7684\u662f\u635f\u5931\u51fd\u6570\uff0c\u800c\u4e14\u662f\u524d\u540e\u4e24\u8005\u7684\u5206\u5e03\u5dee\u5f02\u6700\u5c0f\uff0c\u90a3\u4e48\u7528 \u76f8\u5bf9\u71b5(KL\u6563\u5ea6) | \u535a\u5ba21 | \u535a\u5ba22 :\u7528\u4e8e**\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02 \uff0c\u5373\u7528\u76f8\u5bf9\u71b5\u6765\u63cf\u8ff0int8\u91cf\u5316\u540e\u7684\u503c\u5206\u5e03\u8ddff32\u7684\u503c\u5206\u5e03\u4e4b\u95f4\u7684\u4fe1\u606f\u91cf\u4e22\u5931\u7a0b\u5ea6, KL\u6563\u5ea6\u8d8a\u5c0f\u4ee3\u8868 INT8\u7f16\u7801\u540e\u7684\u4fe1\u606f\u635f\u5931\u8d8a\u5c11\u3002 \u622a\u65ad\u533a( -T~T )\u4e4b\u5916\u7684\u503c\u4e3a\u4ec0\u4e48\u8981\u52a0\u5230\u622a\u65ad\u533a\u5185\u6700\u540e\u4e00\u4e2a\u503c\u5462\uff1f \u4e00\u662f\u6c42P\u7684\u6982\u7387\u5206\u5e03\u65f6\uff0c\u9700\u8981\u603b\u7684P\u603b\u503c. \u4e8c\u5c06\u622a\u65ad\u533a\u4e4b\u5916\u7684\u52a0\u5230\u622a\u65adP\u7684\u6700\u540e\uff0c\u8fd9\u6837\u662f\u5c3d\u53ef\u80fd\u5730\u5c06\u622a\u65ad\u540e\u7684\u4fe1\u606f\u7ed9\u52a0\u8fdb\u6765\u3002 def get_KL (): # \u968f\u673a\u751f\u6210\u4e24\u4e2a\u79bb\u6563\u578b\u5206\u5e03 x = [ np . random . uniform ( 1 , 11 ) for i in range ( 10 )] px = x / np . sum ( x ) y = [ np . random . uniform ( 1 , 11 ) for i in range ( 10 )] py = y / np . sum ( y ) KL = 0.0 for i in range ( 10 ): KL += px [ i ] * np . log ( px [ i ] / py [ i ]) if KL < 0.1 : print ( x ) return KL \u8fd9\u6837\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\u4e86\u6c42\u6982\u7387\u4e86\uff0c\u5373\u4e8b\u4ef6q\uff08int8\uff09\u5206\u5e03\u7684\u6982\u7387\u4ee5\u53ca\u4e8b\u4ef6p\uff08f32\uff09\u5206\u5e03\u7684\u6982\u7387\u3002 \u76f4\u65b9\u56fe( hist,bin_edges=np.histogram(arr,bins=xx,range=(min,max)) )\uff0c(\u9891\u6570,\u5206\u754c\u7bb1\u8fb9\u754c)\uff0c\u5373\u843d\u5230\u67d0\u4e2a\u6570\u503c\u8303\u56f4\u7684\u6570\u503c\u6709\u591a\u5c11\u4e2a\uff0c\u8fd9\u6837\u6570\u636e\u7684\u6982\u7387\u5206\u5e03\u5c31\u51fa\u6765\u4e86\u3002 int\u7c7b\u7684\u79bb\u6563\u70b9\u5404\u4e2a\u6982\u7387\u8fd8\u597d\u6c42\u4e00\u4e9b\uff0c\u76f4\u63a5\u7edf\u8ba1\u8fd9\u4e9b\u6574\u578b\u6570\u636e\u96c6\u5408hist\u5373\u53ef float\u5462\uff1f\u7cbe\u5ea6\u7406\u8bba\u4e0a\u662f\u5f88\u5c0f\u7684\u5440\uff0c\u5982\u4f55\u5b9a\u8fb9\u754c\u624d\u80fd\u628a\u6570\u636e\u5f52\u7c7b\u597d\uff1f\u56e0\u6b64\u5c31\u7c7b\u4f3c\u4e8e\u6574\u578b\u7684\u6211\u4eec\u5206bin\uff0c\u90a3\u4e48\u5206\u591a\u5c11\u4e2abin\u624d\u80fd\u6c42bin\u7684\u6982\u7387\uff1f\u770b\u4e0b\u56fe\uff0cbins\u8d8a\u591a\u5f53\u7136\u4f60\u548c\u7684\u8d8a\u597d\uff0c\u4f46\u7b97\u529b\u6709\u9650\u554a\uff0cNVIDAIA\u7ed9\u7684\u662f**2048**\u4e2abin\uff08maxnet\u4ee3\u7801\u91cc\u9762\u7ed9\u7684\u662f**8000**bins\uff09\uff0c\u6bd4128bin\u8981\u591a\uff0c\u4f46\u662f\u53c8\u4e0d\u4f1a\u591a\u5904\u592a\u591a\u4ece\u800c\u8fed\u4ee3\u592a\u591a\u5f71\u54cd\u8ba1\u7b97\u901f\u5ea6\uff01 NvidiA\u5904\u7406\u6d41\u7a0b \u63d0\u4f9b\u4e00\u4e2a\u6837\u672c\u6570\u636e\u96c6\uff08\u6700\u597d\u662f\u9a8c\u8bc1\u96c6\u7684\u5b50\u96c6:500/1000\u5f20\u5c31\u5dee\u4e0d\u591a\u4e86\uff0c\u4f46\u8981\u4fdd\u8bc1\u591a\u6837\u6027\uff09\uff0c\u79f0\u4e3a\u201c\u6821\u51c6\u6570\u636e\u96c6\u201d\uff0c\u5b83\u7528\u6765\u505a\u6240\u8c13\u7684\u6821\u51c6\u3002\u9996\u5148\u5728 \u6821\u51c6\u96c6\u4e0a \u8fdb\u884c FP32 inference \u63a8\u7406\uff0c\u7136\u540e\u5bf9\u7f51\u7edc\u6bcf\u5c42\u904d\u5386 \u6536\u96c6\u8fd9\u4e00\u5c42\u7684\u6fc0\u6d3b\u503c(\u7ecf\u8fc7\u6fc0\u6d3b\u51fd\u6570\u4e4b\u540e\u7684\u503c)\uff0c\u5e76\u505a \u76f4\u65b9\u56fe\uff08histograms \uff09\uff0c\u5206\u6210\u51e0\u4e2a\u7ec4\u522b\uff08bins\uff09\uff08\u5b98\u65b9\u7ed9\u7684\u4e00\u4e2a\u8bf4\u660e\u4f7f\u7528\u7684\u662f2048\u7ec4/maxnet\u662f8000\uff09\uff0c\u5206\u7ec4\u662f\u4e3a\u4e86\u4e0b\u9762\u904d\u5386 |T| \u65f6\uff0c\u51cf\u5c11\u904d\u5386\u6b21\u6570(\u8981\u4e0d\u7136\u4f60\u6bcf\u4e00\u4e2a\u503c\u90fd\u6d4b\u8bd5\u4e00\u6b21\uff0c\u90a3\u4e48\u4e00\u5b9a\u8303\u56f4\u5185\u7684\u6d6e\u70b9\u503c\u6709\u65e0\u7a77\u4e2a\u4f60\u600e\u4e48\u6d4b\uff1f)\uff1b \u5bf9\u4e8e\u4e0d\u540c\u7684 \u9608\u503c |T| \u8fdb\u884c\u904d\u5386\uff0c\u56e0\u4e3a\u8fd9\u91cc |T|\u7684\u53d6\u503c\u80af\u5b9a\u5728 \u7b2c 128-2047 \u7ec4\u4e4b\u95f4(\u5982\u679c\u5c0f\u4e8e128\uff0c\u90a3\u76f4\u63a5\u4e00\u4e00\u5bf9\u5e94\u5c31\u884c\u4e86\uff0c\u7136\u540e\u8d85\u51fa \u9608\u503c \u00b1|T| \u5916\u7684\u76f4\u63a5\u6620\u5c04\u4e3a\u9608\u503c \u00b1127 \uff0c\u60f3\u5565\u597d\u4e8b\u5462)\uff0c\u6240\u4ee5\u5c31\u9009\u53d6\u6bcf\u7ec4\u7684\u4e2d\u95f4\u503c(\u7528\u8be5bin\u7684\u4e2d\u95f4\u503c\u4f5c\u4e3a\u8be5bin\u7684\u9608\u503c)\u8fdb\u884c\u904d\u5386\uff1b \u9009\u53d6\u4f7f\u5f97 KL_divergence(ref_distr, quant_distr) \u53d6\u5f97\u6700\u5c0f\u503c\u7684 |T|\u3002 \u8fd4\u56de\u4e00\u7cfb\u5217 |T|\u503c\uff0c\u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a |T|\u3002\u521b\u5efa CalibrationTable \uff0c\u9009\u53d6\u6700\u5c0f\u7684\u90a3\u4e2a\u5373\u53ef\uff1b\u5047\u8bbe \u6700\u540e \u4f7f\u5f97 KL\u6563\u5ea6\u6700\u5c0f\u7684|T|\u503c\u662f\u7b2c200\u7ec4\u7684\u4e2d\u95f4\u503c\uff0c\u90a3\u4e48\u5c31\u628a\u539f\u6765 \u7b2c 0-200\u7ec4\u7684 \u6570\u503c\u7ebf\u6027\u6620\u5c04\u5230 0-128\u4e4b\u95f4\uff0c\u8d85\u51fa\u8303\u56f4\u7684\u76f4\u63a5\u6620\u5c04\u5230128\u3002 \u6709\u4e2a\u5c0f\u95ee\u9898\uff0cReLU\u7684\u6fc0\u6d3b\u503c\u5168\u662f\u6b63\u503c\u554a\uff0c\u5982\u679c\u6309\u7167\u82f1\u4f1f\u8fbe\u7684PPT\u91cc\u8d70\uff0c\u90a3\u4e48\u91cf\u5316\u53ea\u91cf\u5316\u4e86\u6b63\u534a\u8f74\uff0c\u4f46\u662f\u6709\u65f6\u5019\u6211\u4eec\u7684\u6fc0\u6d3b\u503c\u662f sigmoid/tanh/ELU \uff0c\u6709\u6b63\u6709\u8d1f\u554a\uff0c\u8d1f\u8f74\u4e0d\u8003\u8651\u90a3\u6570\u636e\u5206\u5e03\u7edd\u5bf9\u5dee\u5f02\u5f88\u5927\u3002\u56e0\u6b64\u5f97\u628a\u8d1f\u8f74\u8003\u8651\u8fdb\u53bb\u3002\u4f8b\u5982: \u4ecebin0\u4f4d\u7f6e\u5f00\u59cb\u5bf9\u79f0\u5411\u6b63\u8d1f\u65b9\u5411\u79fb\u52a8\u5bfb\u627e\u9971\u548c\u9600\u503c INT8\u91cf\u5316\u5b9e\u73b0-\u6821\u51c6\u7b97\u6cd5 #\u9996\u5148\u5206\u6210 2048\u4e2a\u7ec4\uff0c\u6bcf\u7ec4\u5305\u542b\u591a\u4e2a\u6570\u503c\uff08\u57fa\u672c\u90fd\u662f\u5c0f\u6570\uff09 Input : FP32 histogram H with 2048 bins : bin [ 0 ], \u2026 , bin [ 2047 ] # |T|\u7684\u53d6\u503c\u80af\u5b9a\u5728 \u7b2c128-2047 \u7ec4\u4e4b\u95f4,\u53d6\u6bcf\u7ec4\u7684\u4e2d\u70b9,\u4e3a\u4ec0\u4e48\u4ece128\u5f00\u59cb\u5462\uff1f\u56e0\u4e3a|T|\u6240\u5728\u7ec4i<=128\u7ec4\u7684\u8bdd\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u4e00\u4e00\u5bf9\u5e94\u5c31\u597d\u4e86 For i in range ( 128 , 2048 ): # \u9009\u53d6\u524d i \u7ec4\u6784\u6210P\uff0ci>=128 reference_distribution_P = [ bin [ 0 ] , ... , bin [ i - 1 ] ] outliers_count = sum ( bin [ i ] , bin [ i + 1 ] , \u2026 , bin [ 2047 ] ) #\u8fb9\u754c\u5916\u7684\u7ec4 #\u8fb9\u754c\u5916\u7684\u7ec4\u52a0\u5230\u8fb9\u754cP[i-1]\u4e0a\uff0c\u6ca1\u6709\u76f4\u63a5\u4e22\u6389 reference_distribution_P [ i - 1 ] += outliers_count P /= sum ( P ) # \u5f52\u4e00\u5316 # \u5c06\u524d\u9762\u7684P\uff08\u5305\u542bi\u4e2a\u7ec4\uff0ci>=128\uff09\uff0c\u6620\u5c04\u5230 0-128 \u4e0a\uff0c\u6620\u5c04\u540e\u7684\u79f0\u4e3aQ\uff0cQ\u5305\u542b128\u4e2a\u7ec4\uff0c\u4e00\u4e2a\u6574\u6570\u662f\u4e00\u7ec4 candidate_distribution_Q = quantize [ bin [ 0 ], \u2026 , bin [ i - 1 ] ] into 128 levels #\u8fd9\u65f6\u7684P\uff08\u5305\u542bi\u4e2a\u7ec4\uff0ci>=128\uff09\u548cQ\u5411\u91cf\uff08\u5305\u542b128\u4e2a\u7ec4\uff09\u7684\u5927\u5c0f\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u65e0\u6cd5\u76f4\u63a5\u8ba1\u7b97\u4e8c\u8005\u7684KL\u6563\u5ea6 #\u56e0\u6b64\u9700\u8981\u5c06Q\u6269\u5c55\u4e3a i \u4e2a\u7ec4\uff0c\u4ee5\u4fdd\u8bc1\u8ddfP\u5927\u5c0f\u4e00\u6837 expand candidate_distribution_Q to \u2018 i \u2019 bins Q /= sum ( Q ) # \u5f52\u4e00\u5316 #\u8ba1\u7b97P\u548cQ\u7684KL\u6563\u5ea6\uff0c\u8fd9\u4e2a\u8981\u6c42len(P)==len(Q)\uff0c\u8fd9\u662f\u4e2a\u786c\u6027\u8981\u6c42 divergence [ i ] = KL_divergence ( reference_distribution_P , candidate_distribution_Q ) End For #\u627e\u51fa divergence[ i ] \u6700\u5c0f\u7684\u6570\u503c\uff0c\u5047\u8bbe divergence[m] \u6700\u5c0f\uff0c #\u90a3\u4e48|T|=( m + 0.5 ) * ( width of a bin ) Find index \u2018 m \u2019 for which divergence [ m ] is minimal threshold = ( m + 0.5 ) * ( width of a bin ) # \u5982\u4f55\u5c06Q\u6269\u5145\u5230\u548cP\u4e2a\u6570\u76f8\u7b49\uff1f\u4e3e\u4e2a\u5c0f\u4f8b\u5b50 P = [ 1 , 0 , 2 , 3 , 5 , 3 , 1 , 7 ] # \u8fd9\u91cc\u5047\u8bbe\u4e00\u4e2abin\u53ea\u5305\u542b\u4e00\u4e2a\u6570\u636e\uff0c\u6545\u67098\u4e2abin # \u6211\u4eec\u60f3\u628a\u5b83\u6620\u5c04\u4e3a 2 \u4e2abins\uff0c\u4e8e\u662f 4\u4e2a\u4e00\u7ec4\u5408\u5e76 [ 1 + 0 + 2 + 3 , 5 + 3 + 1 + 7 ] = [ 6 , 16 ] # \u7136\u540e\u8981\u6210\u6bd4\u4f8b\u7684 \u6269\u5c55\u56de\u5230 8\u4e2a\u7ec4\uff0c\u4fdd\u7559\u539f\u6765\u662f0\u7684\u7ec4 Q = [ 6 / 3 , 0 , 6 / 3 , 6 / 3 , 16 / 4 , 16 / 4 , 16 / 4 , 16 / 4 ] = [ 2 , 0 , 2 , 2 , 4 , 4 , 4 , 4 ] # \u5bf9P\u548cQ\u8fdb\u884c\u6807\u51c6\u5316 P /= sum ( P ) \u3001 Q /= sum ( Q ) # \u8ba1\u7b97\u6563\u5ea6 result = KL_divergence ( P , Q ) python\u5b9e\u73b0 # \u5b9e\u73b0\u4ee3\u7801 def threshold_distribution ( distribution , target_bin = 128 ): \"\"\" Return the best threshold value. Ref: https://github.com//apache/incubator-mxnet/blob/master/ python/mxnet/contrib/quantization.py Args: distribution: list, activations has been processed by histogram and normalize,size is 2048 target_bin: int, the num of bin that is used by quantize, Int8 default value is 128 Returns: target_threshold: int, num of bin with the minimum KL \"\"\" distribution = distribution [ 1 :] length = distribution . size threshold_sum = sum ( distribution [ target_bin :]) kl_divergence = np . zeros ( length - target_bin ) for threshold in range ( target_bin , length ): sliced_nd_hist = copy . deepcopy ( distribution [: threshold ]) # generate reference distribution p p = sliced_nd_hist . copy () p [ threshold - 1 ] += threshold_sum threshold_sum = threshold_sum - distribution [ threshold ] # is_nonzeros[k] indicates whether hist[k] is nonzero is_nonzeros = ( p != 0 ) . astype ( np . int64 ) # quantized_bins = np . zeros ( target_bin , dtype = np . int64 ) # calculate how many bins should be merged to generate # quantized distribution q num_merged_bins = sliced_nd_hist . size // target_bin # merge hist into num_quantized_bins bins for j in range ( target_bin ): start = j * num_merged_bins stop = start + num_merged_bins quantized_bins [ j ] = sliced_nd_hist [ start : stop ] . sum () quantized_bins [ - 1 ] += sliced_nd_hist [ target_bin * num_merged_bins :] . sum () # expand quantized_bins into p.size bins q = np . zeros ( sliced_nd_hist . size , dtype = np . float64 ) for j in range ( target_bin ): start = j * num_merged_bins if j == target_bin - 1 : stop = - 1 else : stop = start + num_merged_bins norm = is_nonzeros [ start : stop ] . sum () if norm != 0 : q [ start : stop ] = float ( quantized_bins [ j ]) / float ( norm ) # q[p == 0] = 0 p = _smooth_distribution ( p ) q = _smooth_distribution ( q ) # p[p == 0] = 0.0001 # q[q == 0] = 0.0001 # calculate kl_divergence between q and p kl_divergence [ threshold - target_bin ] = stats . entropy ( p , q ) min_kl_divergence = np . argmin ( kl_divergence ) threshold_value = min_kl_divergence + target_bin return threshold_value def _smooth_distribution ( p , eps = 0.0001 ): \"\"\"Given a discrete distribution (may have not been normalized to 1), smooth it by replacing zeros with eps multiplied by a scaling factor and taking the corresponding amount off the non-zero values. Ref: http://web.engr.illinois.edu/~hanj/cs412/bk3/KL-divergence.pdf \"\"\" is_zeros = ( p == 0 ) . astype ( np . float32 ) is_nonzeros = ( p != 0 ) . astype ( np . float32 ) n_zeros = is_zeros . sum () n_nonzeros = p . size - n_zeros if not n_nonzeros : raise ValueError ( 'The discrete probability distribution is malformed. All entries are 0.' ) eps1 = eps * float ( n_zeros ) / float ( n_nonzeros ) assert eps1 < 1.0 , 'n_zeros= %d , n_nonzeros= %d , eps1= %f ' % ( n_zeros , n_nonzeros , eps1 ) hist = p . astype ( np . float32 ) hist += eps * is_zeros + ( - eps1 ) * is_nonzeros assert ( hist <= 0 ) . sum () == 0 return hist smooth\u5904\u7406 # smooth\u5904\u7406\u7684\u539f\u56e0:\u8bc4\u4f30\u4fe1\u606f\u4e22\u5931\u60c5\u51b5\u7684, KL ( P,Q ) = sum ( i = 1 ..n ) [ p_i * log ( p_i / q_i ) ] # 1. \u5f53\u67d0\u4e9bqi=0\u6216\u8005pi=0\u65f6\u6211\u4eec\u600e\u4e48\u5904\u7406\uff1f\u4f8b\u5982 pi!=0 \u540c\u65f6 qi=0,\u7ed3\u679c\u65e0\u7a77\u5927......(\u8fd9\u5c31\u597d\u6bd4\u4e00\u4e2a\u5206\u5e03(P)\u8ba4\u4e3a\u67d0\u4e2a\u4e8b\u4ef6e\u662f\u53ef\u80fd\u5b58 \u5728\u7684\uff0c\u4f46\u662f\u53e6\u5916\u4e00\u4e2a\u5206\u5e03(Q)\u5374\u8ba4\u4e3a\u8be5\u4e8b\u4ef6\u5b8c\u5168\u4e0d\u53ef\u80fd\u5b58\u5728\uff0c\u56e0\u6b64\u8fd9\u4e24 \u4e2a\u5206\u5e03\u662f\u7edd\u5bf9\u7edd\u5bf9\u4e0d\u53ef\u80fd\u76f8\u540c\u7684\u3002),\u4f7f\u7528\u7edd\u5bf9\u51cf\u503c\u6cd5 # 2.\u7b97\u6cd5\u6d41\u7a0b P: a:1/2, b:1/4, c:1/4 Q: a:7/12, b:2/12, d:3/12 # \u7edd\u5bf9\u51cf\u503c\u7b97\u6cd5\u6d41\u7a0b\u5982\u4e0b\uff1a 1 . \u8bbe\u7f6e\u4e00\u4e2a\u5f88\u5c0f\u7684\u5e38\u91cfeps ( \u6bd4\u5982 eps = 0 .0001 ) \uff1b 2 . SP = { a, b, c } \u4eceP\u4e2d\u89c2\u5bdf\u5230\u7684\u6837\u672c\uff1b 3 . CP = | SP | = 3 , P\u5206\u5e03\u4e2d\u89c2\u5bdf\u5230\u7684\u6837\u672c\u7684\u6570\u91cf\uff1b 4 . SQ = { a, b, d } \uff1b 5 . CQ = 3 \uff1b 6 . SU = SP U SQ = { a, b, c, d } \u6240\u6709\u89c2\u5bdf\u5230\u7684\u6837\u672c\uff0c\u5373\u9650\u5b9a\u4e00\u4e2a\u5168\u96c6\uff1b 7 . CU = | SU | = 4 \u3002# \u6700\u7ec8\u7684\u6837\u672c\u957f\u5ea6 # \u6211\u4eec\u91cd\u65b0\u53ef\u4ee5\u5b9a\u4e49P\u548cQ\u7684\u5e73\u6ed1\u7248\u672c P\u2019\u5e73\u6ed1\u7248\u672c: 1 . P '(i) = P(i) - pc; if i in SP 2. P' ( i ) = eps ; otherwise for i in SU - SP Q\u2019\u5e73\u6ed1\u7248\u672c: 3 . Q '(i) = Q(i) - qc; if i in SP 4. Q' ( i ) = eps ; otherwise for i in SU - SP # \u6700\u7ec8\u7ed3\u679c\uff0c\u6839\u636e sum(P'(i)) = 1.0; sum(Q'(j)) = 1.0;\u7684\u7ea6\u675f\u6761\u4ef6\u53ef\u8ba1\u7b97\u51fapc\u548cqc P ': a:1/2-pc, b:1/4-pc, c:1/4-pc, d: eps pc = eps/3 Q' : a:7/12-qc, b:2/12-qc, c: eps, d:3/12-qc qc = eps/3 # \u6216\u8005\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u516c\u5f0f pc = eps* (|| SU-SP || / || SP ||) qc = eps* (|| SU-SQ || / || SQ ||)","title":"int8\u91cf\u5316"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#winograd","text":"\u6309\u7406\u8bf4int8\u91cf\u5316\u540e\u76f8\u6bd4\u4e8efp32\u7406\u8bba\u4e0a\u52a0\u901f4x\uff0c\u4f46\u662f\u4e5f\u8981\u7ecf\u8fc7fp32-to-int8-IO\u7684\u8f6c\u6362\u7b49\u989d\u5916\u64cd\u4f5c\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u4f9d\u7136\u4ec5\u4ec5\u80fd\u8fbe\u5230\u7ea61.2~1.5\u7684\u52a0\u901f\u6bd4\u3002 \u5982 NCNN \u3001 NNPACK \u7b49\uff0c\u53ef\u4ee5\u770b\u5230\uff0c\u5bf9\u4e8e\u5377\u79ef\u5c42\uff0c\u5927\u5bb6\u4e0d\u7ea6\u800c\u540c\u5730\u91c7\u7528\u4e86Winograd\u5feb\u901f\u5377\u79ef\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u51fa\u81ea Fast Algorithms for Convolutional Neural Networks \uff0c\u535a\u5ba2\u8be6\u89e3 link \uff0c\u4e3b\u8981\u601d\u60f3\u662f\u8ba9\u5377\u79ef\u7684\u4e58\u6cd5\u6570\u91cf\u66f4\u5c11\u3002 \u4e3e\u4f8b\u8bf4\u660eWinograd F(2x2,3x3)\u7684\u5b9e\u73b0\u7ec6\u8282 \u90a3\u4e48\u5269\u4e0b\u7684 g\u548cd \u8868\u793a\u4ec0\u4e48\uff1f Winograd F(2x2,3x3)\uff0c\u5230\u5e95\u5728\u8ba1\u7b97\u795e\u9a6c\uff1f \u201c2x2\u201d: **\u8f93\u51fa**4\u4e2a\u7ed3\u679c\uff08\u56e0\u4e3a2x2 = 4\uff09 \u201c3x3\u201d: \u5377\u79ef\u6838\u662f3x3\uff08conv3x3s1\u7684\u5377\u79ef\u6838\u5f53\u7136\u662f3x3\uff09 \u56e0\u6b64\uff0c\u9700\u8981\u8f93\u5165\u7684Feature Map\u5c31\u662f4x4\u7684matrix(\u8f93\u5165\u6570\u636e)\u3002 Y \u8f93\u51fa\u7684matrix[2,2]\uff0c4\u4e2a\u7ed3\u679c g \u5377\u79ef\u6838matrix[3,3]\uff0c9\u4e2a\u6570\u636e d \u8f93\u5165\u7684matrix[4,4]\uff0c16\u4e2a\u8f93\u5165 \u5982\u4f55\u5bf9\u5feb\u901f\u5377\u79ef\u8fdb\u884cint8\u5b9a\u70b9\u91cf\u5316\uff1f \u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5bf9Winograd\u7684\u8ba1\u7b97\u8fc7\u7a0b\u8fdb\u884c\u91cf\u5316\uff0c\u800c\u662f\u5c06\u91cf\u5316\u540e\u7684\u6570\u636e\u8fdb\u884cWinograd\u8ba1\u7b97\u3002\u9664\u4e86Matrix G\u4e2d\u67090.5\uff0c\u5176\u4ed6\u7684Matrix\u90fd\u662fInt8\u7684\u6574\u5f62\u6570\u636e\u4e86\u3002\u90a3\u4e48\u53ea\u9700\u8981\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u64cd\u4f5c\u5c06Matrix G\u53d8\u6210Int8\u6574\u5f62\u5c31\u884c\u4e86\uff1a G\u2019 = G x 2 \u6700\u540e\u6211\u4eec\u5f97\u5230\u7684Y\u2019\u518d\u9664\u4ee54\uff08\u4e3a\u4ec0\u4e48\u662f4\u4e0d\u662f2\u5462\uff1f\u56e0\u4e3a\u4e58\u4ee5\u4e86\u4e24\u6b21\u7684\uff0cG\u4e0eG^T\uff09\u5c31\u662f\u6211\u4eec\u9700\u8981\u7684Y\u4e86\u3002\u6211\u4eec\u7684Int8 Convolution \u8ba1\u7b97\u6d41\u7a0b\u53d8\u5316\u5982\u4e0b\uff1a Int8 Convolution \u6d41\u7a0b\uff1a input_fp32 -> quantize -> int8-conv -> Int32 -> dequantize -> output_fp32 Int8 Winograd\u6d41\u7a0b\uff1a input_fp32 -> quantize -> int8-winograd -> Int32 -> dequantize -> output_fp32","title":"Winograd\u5feb\u901f\u5377\u79ef"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#bnn","text":"\u535a\u5ba2\u603b\u7ed31 | \u535a\u5ba2\u603b\u7ed32 \u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u7684\u57fa\u672c\u64cd\u4f5c\u5c31\u662f\u6743\u91cd(W)\u548c\u6fc0\u6d3b\u503c(X)\u7684\u5377\u79ef\u4e58\u52a0\u64cd\u4f5c(W*X) L1\u8303\u6570\u662f\u6307\u5411\u91cf\u4e2d\u5404\u4e2a\u5143\u7d20\u7edd\u5bf9\u503c\u4e4b\u548c\uff1bL2\u8303\u6570\u662f\u6307\u5411\u91cf\u5404\u5143\u7d20\u7684\u5e73\u65b9\u548c\u7136\u540e\u6c42\u5e73\u65b9\u6839 \u5b9e\u9645\u9879\u76ee\u4e2d\u4e00\u76f4\u5728\u7528\u7684 binary_conv \u56fe\u793a\u7ed3\u679c\u5982\u4e0b\uff0c\u5176\u5b9e\u5c31\u662f BWN (\u4e0d\u540c\u5377\u79ef\u6838\u7684\u7edd\u5bf9\u503c**\u76f8\u540c**)\u6539\u7248\uff0c\u6bcf\u4e2a\u5377\u79ef\u6838\u81ea\u8eab\u7684\u7edd\u5bf9\u503c\u90fd\u76f8\u540c( c_in,k_h,k_w )\u3010caffe/pytorch\u7684\u5377\u79ef\u6838\u7ef4\u5ea6\u4e00\u6837\u3011\uff0c\u4f46\u4e0d\u540c\u5377\u79ef\u6838\u7684\u7edd\u5bf9\u503c**\u4e0d\u76f8\u540c**\uff1a \u5f00\u5c71\u4e4b\u4f5c:\u300aBinaryNet: Training Deep Neural Networks with Weights and Activations Constrained to +1 or -1.\u300b \u5b83\u9996\u6b21\u63d0\u51fa\u4e00\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u7528\u968f\u673a\u68af\u5ea6\u4e0b\u964d\u7684\u65b9\u5f0f\u8bad\u7ec3\u540c\u65f6\u4f7f\u7528\u4e8c\u503c\u5316\u7684 weights \u548c activations \u7684\u795e\u7ecf\u7f51\u7edc\u3002\u4e8c\u503c\u6743\u91cd {-1,1} \u66ff\u4ee3\u6d6e\u70b9\u6743\u91cd\uff0c\u4f5c\u8005\u901a\u8fc7 sign \u51fd\u6570\u83b7\u53d6: W_binary = sign(W_float32) \u5bf9\u4e8e sign \u51fd\u6570\u5728 0 \u5904\u4e0d\u53ef\u5bfc\uff0c\u5176\u4ed6\u5012\u6570\u4e3a 0 \u65e0\u6cd5\u8fdb\u884c\u68af\u5ea6\u4f20\u9012\uff0c\u6240\u4ee5\u4f5c\u8005\u8bbe\u8ba1\u4e86**\u76f4\u901a\u4f30\u8ba1\u5668\uff1a STE **\uff0c\u5373\u4f7f\u7528 clip(-1,x,1) \u7684\u5bfc\u6570\u6765\u62df\u5408 sign \u7684\u5bfc\u6570\u3002 \u5176\u5b9e\u8bba\u6587\u4e2d\u6743\u91cd\u4e8c\u503c\u5316\u53cd\u5411\u4f20\u64ad\u65f6\u9047\u5230 sign \u51fd\u6570\u76f4\u63a5\u4e3a\u8f93\u5165\u7684\u68af\u5ea6(\u76f8\u5f53\u4e8e src_grad*1 )\uff0c\u6fc0\u6d3b\u4e8c\u503c\u5316\u662f clip(-1,x,1) \u51fd\u6570\u7684\u68af\u5ea6\u62df\u5408 sign \uff0c\u4e5f\u5c31\u662f\u8bf4 output_grad = abs(input)>1--->grad==0*src_grad \uff0c\u5f53 output_grad = abs(input)<=1--->1*src_grad # \u5982\u679c\u8981\u8fdb\u884c\u6fc0\u6d3b\u4e8c\u503c\u5316\uff0c\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u53c2\u6570\u4e0d\u80fd\u662f\u4e8c\u503c\uff0c\u56e0\u4e3a\u56fe\u7247\u662f8bit\uff0c\u5982\u679c\u76f4\u63a5\u4e8c\u503c\u5316\uff0c\u4e22\u5931\u4fe1\u606f\u8fc7\u591a # 1. \u5bf9\u6fc0\u6d3b\u503c\u8fdb\u884c\u4e8c\u503c\u5316\u7684\u5177\u4f53\u5b9e\u73b0 class BinActive ( torch . autograd . Function ): ''' Binarize the input activations for ***** BNN and XNOR *****. ''' @staticmethod def forward ( ctx , input ): ctx . save_for_backward ( input ) input = input . sign () # \u4f7f\u7528y=x\u51fd\u6570\u62df\u5408\u68af\u5ea6 return input @staticmethod def backward ( ctx , grad_output , ): input , = ctx . saved_tensors grad_input = grad_output . clone () # \u5f00\u5c71\u4e4b\u4f5cBNN\u4e2d\u6fc0\u6d3b\u503c:\u5f53sign\u51fd\u6570\u7684\u8f93\u5165\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u5c06\u68af\u5ea6\u7f6e0\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002 grad_input [ input . ge ( 1 )] = 0 grad_input [ input . le ( - 1 )] = 0 # \u6700\u7ec8\u7684\u68af\u5ea6\u7ed3\u679c\u5c31\u662fsign\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u4f7f\u7528clip(-1,x,1)\u51fd\u6570\u6765\u62df\u5408 return grad_input # \u5f53\u5728[-1,1]\u8303\u56f4\u5185\uff0c\u8f93\u5165\u68af\u5ea6\u662f\u5565\u76f4\u63a5\u8fd4\u56de\u5565\uff0c\u4e0d\u9700\u8981\u5173\u5fc3\u8be5\u9608\u503c\u51fd\u6570\u7684\u5b9e\u9645\u5bfc\u6570 # 2.\u5bf9\u6743\u91cd\u8fdb\u884c\u4e8c\u503c\u5316 class Binary_w ( torch . autograd . Function ): @staticmethod def forward ( self , input ): output = torch . sign ( input ) return output @staticmethod def backward ( self , grad_output ): #*******************ste********************* grad_input = grad_output . clone () return grad_input \u8fd9\u6837 weights \u4e8c\u503c\u5316{-1,+1},\u6fc0\u6d3b\u503c activation \u4e8c\u503c\u5316{-1,+1},\u5377\u79ef\u8fc7\u7a0b\u4e24\u8005\u53ea\u8981\u8fdb\u884c XNOR+bitcout \u8ba1\u7b97\u4ee3\u66ff float32 \u7684\u7d2f\u4e58\u64cd\u4f5c\uff0c\u901f\u5ea6\u63d0\u5347\u5f88\u5927\u3002 XNOR-Net \u8bba\u6587 | \u4ee3\u7801 \u8be5\u7bc7\u8bba\u6587\u63d0\u51fa BWN+XNOR-Net \u4e24\u79cd\u4e8c\u503c\u5316\u7f51\u7edc\u3002 BWN(Binary Weight Networks) :\u53ea\u5bf9 weights \u4e8c\u503c\u5316{-1,+1}\uff0c\u5bf9\u4e8e activation \u4ecd\u7136\u91c7\u7528 float32 \u5168\u7cbe\u5ea6\uff0c\u7cbe\u5ea6\u5f71\u54cd\u4e0d\u5927( resnet18 \u9664\u5916)\u3002 W_float= a*B , a :\u662f\u5c3a\u5ea6\u53c2\u6570, B \u662f\u4e8c\u503c\u77e9\u9635{-1,1}\uff0c a \u7684\u6700\u4f18\u503c= np.sum(abs(w)) / n \uff08\u6743\u91cd\u7684L1\u8303\u6570\u7684\u5747\u503c\uff09 \u63a8\u7406\u6b65\u9aa4: XNOR-Net \u662f weights \u548c activation \u90fd\u8fdb\u884c\u4e8c\u503c\u5316 \u6743\u91cd(W)\u4e8c\u503c\u5316\uff1a W_float= a*B \uff0c\u540c\u4e0a \u6fc0\u6d3b\u503c(X)\u4e8c\u503c\u5316\uff1a X_float = \u03b2*H , H \u662f\u4e8c\u503c\u77e9\u9635{-1,1}, \u03b2 \u7684\u6700\u4f18\u503c\u662f np.sum(abs(X)) / n \uff08\u8f93\u5165X\u7684L1\u8303\u6570\u7684\u5747\u503c\uff09 XNOR-Net \u7684\u4e8c\u503c\u64cd\u4f5c\u8fc7\u7a0b\uff1a Bi-Real Net \u8bba\u6587 | \u535a\u5ba2 | code | \u7efc\u5408\u4ee3\u7801 \u4f5c\u8005\u53d1\u73b0\u5e38\u7528\u7684\u4e8c\u503c\u5316\u7f51\u7edc\u6709\u4e24\u4e2a\u7f3a\u9677 1-bit CNN \u7684\u8868\u8fbe\u80fd\u529b\u672c\u8eab\u5f88\u6709\u9650\uff0c\u4e0d\u5982\u5b9e\u6570\u503c\u7684\u7f51\u7edc\u3002 Bi-Real-Net \u501f\u7528 \u6b8b\u5dee\u7684\u601d\u60f3\uff0c\u7528shortcut \u4f20\u9012\u7f51\u7edc\u4e2d\u5df2\u6709\u7684\u5b9e\u6570\u503c \uff0c\u4ece\u800c\u63d0\u9ad8\u4e8c\u503c\u5316\u7f51\u7edc\u7684\u8868\u8fbe\u80fd\u529b\u3002 \u5377\u79ef\u53c2\u6570 {-1,1} \uff0c\u6fc0\u6d3b\u503c {-1,1} \uff0c\u8fdb\u884c xnor+bitcout \u64cd\u4f5c\uff0c\u7ed3\u679c\u51fa\u73b0\u975e{-1,1}\u7684**\u5b9e\u6570\u503c**\uff0c\u4f46\u662f\u8fd9\u4e2a\u5b9e\u6570\u503c\u7684\u8f93\u51fa\u5982\u679c\u7ecf\u8fc7\u4e0b\u4e00\u5c42\u4e8c\u503c\u5377\u79ef\u5c31\u53c8\u4f1a\u88ab\u4e8c\u503c\u5316\uff0c\u9020\u6210\u6781\u5927\u7684\u4fe1\u606f\u4e22\u5931\u3002 1-bit CNN \u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6709\u5bfc\u6570\u4e0d\u5339\u914d\u7684\u95ee\u9898\u5bfc\u81f4\u96be\u4ee5\u6536\u655b\u5230\u5f88\u597d\u7684\u7cbe\u5ea6 \u6fc0\u6d3b\u503c\u6c42\u5bfc\u65f6\uff0c\u5e38\u7528 clip(-1,x,1) \u6765\u62df\u5408 sign \u51fd\u6570\u7684\u5bfc\u6570\uff1b\u4f46\u662f clip \u51fd\u6570\u4e0e sign \u51fd\u6570\u6709\u5dee\u8ddd\uff08\u7070\u8272\u659c\u7ebf\uff09\uff0c\u8fd9\u79cd\u8ba1\u7b97\u65b9\u5f0f\u4f1a\u5e26\u6765\u6240\u8c13\u7684**\u5bfc\u6570\u503c\u4e0d\u5339\u914d\u7684\u95ee\u9898**\u3002\u63d0\u51fa**\u7528\u4e8c\u9636\u62df\u5408 sign \u7684 ApproxSign \u7684\u5bfc\u6570\u6765\u4f5c\u4e3a sign \u7684\u5bfc\u6570\uff0c\u4ece\u800c\u7f29\u5c0f\u5bfc\u6570\u503c\u7684\u4e0d\u5339\u914d\u95ee\u9898**\u3002\u8fd9\u4e2a\u5e26\u6765\u4e86**\u7ea6 12% \u7684\u6027\u80fd\u63d0\u5347**\u3002 \u4f7f\u7528 Clip \u51fd\u6570\u4ee3\u66ff ReLU \u51fd\u6570\u6548\u679c\u66f4\u597d\uff0c\u56e0\u4e3a x->{-1,1} \uff0c\u4f7f\u7528\u622a\u65ad\u51fd\u6570\u4f1a\u66f4\u5feb\u6536\u655b\u3002","title":"\u4e8c\u503c\u6a21\u578b(BNN)"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_11","text":"ACCV\u7ec6\u7c92\u5ea6\u8bc6\u522b\u6bd4\u8d5b\u67d0\u5206\u4eab\u4ee3\u7801 | \u535a\u5ba2 Warm up :\u5982\u679c\u6a21\u578b\u662f\u4ece\u5934\u8bad\u7ec3(\u6a21\u578b\u6743\u91cd\u968f\u673a\u521d\u59cb\u5316)\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u5c0f\u7684\u5b66\u4e60\u7387\u5148\u8bad\u7ec3\u51e0\u4e2a epoch \uff0c\u5047\u5982\u4e00\u5f00\u59cb\u5c31\u91c7\u7528\u8f83\u5927\u7684\u5b66\u4e60\u7387\u5bb9\u6613\u51fa\u73b0\u6570\u503c\u4e0d\u7a33\u5b9a\uff1b\u5982\u679c\u6a21\u578b\u6bd4\u8f83\u96be\u8bad\u7ec3\u53ef\u4ee5\u8003\u8651\u5982\u4e0b\u7b56\u7565:\u5982\u679c\u662f\u666e\u901a\u5206\u7c7b\u6a21\u578b\u53ef\u4ee5\u4f7f\u7528 ImageNet \u7684\u9884\u8bad\u7ec3\u6a21\u578b\u521d\u59cb\u5316\u6743\u91cd\uff0c\u5982\u679c\u662f\u7ec6\u7c92\u5ea6\u5206\u7c7b\u53ef\u4ee5\u4f7f\u7528 CUB-200-2011 (Caltech-UCSD Birds-200-2011:\u7ec6\u7c92\u5ea6\u8bc6\u522b\u6570\u636e\u96c6,\u6ce8\u610f\u6d4b\u8bd5\u96c6\u4e0eImageNet\u8bad\u7ec3\u96c6\u6709\u91cd\u53e0)\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u521d\u59cb\u5316\u6743\u91cd\u3002\u603b\u7ed3:\u65e0\u8bba\u662f\u6bd4\u8d5b\u8fd8\u662f\u5176\u4ed6\uff0c\u6700\u597d\u5148\u627e\u516c\u5f00\u6570\u636e\u96c6\u8bad\u7ec3\u4e2abaseline\u518d\u505a\u6a21\u578b\u8fc1\u79fb\u5373\u53ef\u3002 \u591a\u8bad\u7ec3\u51e0\u4e2aepochs\uff0c\u5e73\u5747\u4e00\u4e0b\u5c31\u80fd\u5f97\u5230\u66f4\u597d\u7684\u6a21\u578b\u3002\u4e00\u822c\u8bad\u7ec3\u540e\uff0c\u9009\u53d6\u6700\u4f18\u6a21\u578b\uff0c\u4f7f\u7528\u8be5\u6a21\u578b\u8fdb\u884c\u56fa\u5b9a\u5b66\u4e60\u7387( 2e-4 \u6216\u8005\u4f59\u5f26\u9000\u706b\u5b66\u4e60\u7387:\u6548\u679c\u66f4\u597d\uff0c pytorch \u4e2d\u6709\u5b9e\u73b0: CosineAnnealingLR )\u6765\u591a\u8bad\u7ec3\u7ed3\u679cepoch\uff0c\u5e73\u5747\u5176\u6743\u91cd\u5373\u53ef\u3002 \u4f59\u5f26\u9000\u706b\u5b66\u4e60\u7387:\u8bbe\u7f6e\u4e00\u4e2a\u57fa\u7840\u5b66\u4e60\u7387(0.02),\u7136\u540e\u8bbe\u7f6e T_0=5,T_mult=x(x>=1) ,\u90a3\u4e48\u6bcf\u5230 epoch=5,(1+T_mult)*T_0,(1+T_mult+T_mult**2)*T_0,... \u5904\u56de\u5230\u6700\u5927\u7684\u5b66\u4e60\u7387(0.02)\uff0c\u5176\u4ed6epoch\u4f1a\u81ea\u52a8\u6309\u7167cosin\u4e0b\u964d\u5b66\u4e60\u7387 \u4f7f\u7528 fp16 \u548c fp32 \u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\uff0c\u53ef\u4ee5\u5feb\u901f\u6536\u655b\uff0c\u5c24\u5176\u662f\u5bf9\u4eba\u8138\u8bc6\u522b\u8bad\u7ec3\u6765\u8bf4\u3002 \u6570\u636e\u5904\u7406\uff0c\u5982\u679c\u6570\u636e\u91cc\u9762\u6709\u810f\u6570\u636e\uff0c\u53ef\u4ee5\u5148\u8bad\u7ec3\u4e00\u4e2a baseline \uff0c\u7136\u540e\u5bf9\u6bcf\u4e2a\u7c7b\u522b\u7684 feature \u8fdb\u884c\u805a\u7c7b\uff0c\u805a 2 \u4e2a\u7c7b\uff0c\u54ea\u4e2a\u7c7b\u522b\u7684\u6570\u636e\u91cf\u591a\u5c31\u9009\u54ea\u4e2a\u505a\u4e3a\u6b63\u4f8b\uff0c\u540c\u65f6\u6309\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u8fdb\u884c\u5c11\u91cf\u8d1f\u4f8b\u91c7\u6837(\u5927\u6982\u662f 10% \u3002 \u5e38\u89c4\u7684\u6570\u636e\u589e\u5f3a\uff1a\u968f\u673a\u88c1\u526a\uff0c\u89d2\u5ea6\u65cb\u8f6c\uff0c\u4eae\u5ea6/\u5bf9\u6bd4\u5ea6\u8c03\u8282\u7b49 \u4f7f\u7528 Mixup \u3001 Cutout \u3001 Cutmix(\u4e00\u822c\u66f4\u4f18) \u5bf9\u6bd4\u9009\u62e9\u6548\u679c\u597d\u7684\u518d\u914d\u5408 labelsmooth \u4e00\u8d77\u3002 Mixup :\u5c06\u968f\u673a\u7684\u4e24\u5f20\u6837\u672c\u6309\u6bd4\u4f8b\u6df7\u5408\uff0c\u5206\u7c7b\u7684\u7ed3\u679c\u6309\u6bd4\u4f8b\u5206\u914d\uff1b Cutout :\u968f\u673a\u7684\u5c06\u6837\u672c\u4e2d\u7684\u90e8\u5206\u533a\u57dfcut\u6389\uff0c\u5e76\u4e14\u586b\u51450\u50cf\u7d20\u503c\uff0c\u5206\u7c7b\u7684\u7ed3\u679c\u4e0d\u53d8\uff1b CutMix :\u5c31\u662f\u5c06\u4e00\u90e8\u5206\u533a\u57dfcut\u6389\u4f46\u4e0d\u586b\u51450\u50cf\u7d20\u800c\u662f\u968f\u673a\u586b\u5145\u8bad\u7ec3\u96c6\u4e2d\u7684\u5176\u4ed6\u6570\u636e\u7684\u533a\u57df\u50cf\u7d20\u503c\uff0c\u5206\u7c7b\u7ed3\u679c\u6309\u4e00\u5b9a\u7684\u6bd4\u4f8b\u5206\u914d \u4f7f\u7528**cosinelr**\u6765\u8870\u51cf\u5b66\u4e60\u7387(\u4f59\u5f26\u51fd\u6570\u8870\u51cf)\uff0c\u5e26\u6709\u52a8\u91cf\u7684 SGD \u5982\u679c\u4f60\u7684**\u5206\u7c7b\u7cbe\u5ea6\u4e0d\u591f\u662f\u56e0\u4e3a\u6709\u4e24\u7c7b\u6216\u8005\u591a\u7c7b\u592a\u76f8\u8fd1\u9020\u6210\u7684**\uff0c\u8003\u8651\u4f7f\u7528\u5176\u4ed6 softmax \uff0c\u6bd4\u5982**amsoftmax**\u3002 \u5982\u679c\u4f60\u7684\u5206\u7c7b\u7cbe\u5ea6\u4e0d\u591f\u662f**\u6837\u672c\u4e0d\u5747\u8861**\u9020\u6210\u7684\uff0c\u8003\u8651\u4f7f\u7528 focal loss \u5c3d\u53ef\u80fd\u4f7f\u7528\u5168\u5377\u79ef\u7f51\u7edc\u6765\u505alandmark\uff0c\u4e0d\u8981\u76f4\u63a5\u7528fc\u56de\u5f52\uff0c\u56de\u5f52\u771f\u7684\u4e0d\u592a\u7a33\u5b9a","title":"\u8c03\u53c2\u5c0f\u6280\u5de7"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_12","text":"Sort(\u591a\u76ee\u6807\u8ddf\u8e2a) \u4ee5 IOU \u4f5c\u4e3a\u524d\u540e\u4e24\u5e27\u95f4\u76ee\u6807\u5173\u7cfb\u5ea6\u91cf\u6307\u6807 \u5229\u7528**\u5361\u5c14\u66fc\u6ee4\u6ce2\u5668**\u9884\u6d4b\u4fee\u6b63\u5f97\u5230\u4e0b\u4e00\u5e27\u76ee\u6807\u7684\u7cbe\u51c6\u6846(OpenCV\u4e2d\u5df2\u5b9e\u73b0)\u3002 \u601d\u60f3:\u4e0b\u4e00\u5e27\u6a21\u578b\u5bf9A\u7684\u9884\u6d4b\u6846+\u5bf9A\u76ee\u6807\u7684\u8f68\u8ff9\u7684\u9884\u6d4b\u6846+\u4e24\u6846\u7684\u8bef\u5dee\uff0c\u5229\u7528\u5361\u5c14\u66fc\u6ee4\u6ce2\u65b9\u7a0b\u8ba1\u7b97\u51fa\u6700\u4f18\u6846 \u901a\u8fc7**\u5308\u7259\u5229\u7b97\u6cd5(\u5339\u914d\u7ebf\u5730\u4f4d\u76f8\u540c) \u5bf9\u524d\u540e\u4e24\u5e27\u4e2d\u7684\u6846\u8fdb\u884c\u5339\u914d(\u5bfb\u627e\u6700\u4f18\u89e3)\uff0c\u8fdb\u5316\u7248\u662f:**KM\u7b97\u6cd5(\u5339\u914d\u7ebf\u5e26\u6743\u91cd) \u8bba\u6587\u4e2d\u4f7f\u7528\u7684\u662f\u5308\u7259\u5229\u7b97\u6cd5\uff0c\u4f46\u662f\u5b9e\u9645\u4ee3\u7801\u662fKM\u7b97\u6cd5\u3002 DeepSort(\u540c\u4e00\u56e2\u961f) \u6574\u4f53\u6ca1\u5565\u6539\u53d8\uff0c\u4e3b\u8981\u6539\u53d8\u6709\u4e24\u70b9: \u52a0\u5165\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\uff0c\u8f93\u5165\u4e00\u5f20\u56fe\u7247\u4f1a\u8f93\u51fa\u4e00\u4e2a\u5411\u91cf\uff0c\u901a\u8fc7\u6bd4\u5bf9\u4e24\u4e2a\u5411\u91cf(128\u7ef4\u5ea6)\u4e4b\u95f4\u7684\u4f59\u5f26\u8ddd\u79bb\uff0c\u6765\u5224\u65ad\u4e24\u526f\u8f93\u5165\u56fe\u7247\u662f\u5426\u662f\u540c\u4e00\u4e2a\u76ee\u6807(\u5728\u884c\u4eba\u91cd\u8bc6\u522b\u6570\u636e\u96c6\u4e0a\u8bad\u7ec3\u7684)\u3002","title":"\u76ee\u6807\u8ffd\u8e2a"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#tensorrt","text":"TensorRT\u4e3a\u4ec0\u4e48\u80fd\u52a0\u901f?(\u5355\u7cbe\u5ea6 FP32 \u534a\u7cbe\u5ea6 FP16 ) TensorRT\u652f\u6301 FP16 \u6216\u8005 INT8 \u7684\u8ba1\u7b97\uff0c\u800c\u63a8\u7406\u7cbe\u5ea6\u4e0d\u53d1\u751f\u660e\u663e\u7684\u964d\u4f4e\u3002\u53ea\u652f\u6301\u63a8\u7406\uff0c\u4e0d\u652f\u6301\u8bad\u7ec3\uff0c\u8bad\u7ec3\u9636\u6bb5\u56e0\u4e3a\u8981\u8fdb\u884c\u68af\u5ea6\u66f4\u65b0\uff0c\u8bad\u7ec3\u540e\u671f\u6bcf\u6b21\u68af\u5ea6\u66f4\u65b0\u662f\u5fae\u5c0f\u7684\uff0c\u8fd9\u4e2a\u65f6\u5019\u9700\u8981\u9ad8\u53c2\u6570\u9700\u8981\u9ad8\u7cbe\u5ea6\uff0c\u4f8b\u5982float32\uff0c\u4f46\u662f\u53ea\u662f\u63a8\u7406\u7684\u8bdd\u5bf9\u7cbe\u5ea6\u8981\u6c42\u5e76\u4e0d\u9ad8\uff0c\u6240\u4ee5\u53ef\u4ee5\u964d\u4f4e\u7cbe\u5ea6\u3002 TensorRT\u5bf9\u4e8e\u7f51\u7edc\u7ed3\u6784\u8fdb\u884c\u4e86\u91cd\u6784\uff0c\u628a\u4e00\u4e9b\u80fd\u591f\u5408\u5e76\u7684\u8fd0\u7b97\u5408\u5e76\u5728\u4e86\u4e00\u8d77\uff0c\u800c\u4e14\u9488\u5bf9NVIDIA\u663e\u5361\u505a\u4e86\u591a\u65b9\u9762\u4f18\u5316\u3002 \u5b83\u628a\u4e00\u4e9b\u7f51\u7edc\u5c42\u8fdb\u884c\u4e86\u5408\u5e76 \uff1a\u6bd4\u5982 \u4e00\u4e2a\u5377\u79ef\u5c42\u3001\u4e00\u4e2a\u504f\u7f6e\u5c42\u548c\u4e00\u4e2arelu\u5c42 \uff0c\u8fd9\u4e09\u5c42\u662f\u9700\u8981\u8c03\u7528\u4e09\u6b21cuDNN\u5bf9\u5e94\u7684API\uff0cTensorRT\u5bf9\u6b64\u8fdb\u884c\u4e86\u5408\u5e76\u3002 \u53d6\u6d88 concat \u5c42 \uff1a\u5728concat\u8fd9\u4e00\u5c42\uff0c\u6bd4\u5982\u8bf4\u8fd9\u8fb9\u8ba1\u7b97\u51fa\u6765\u4e00\u4e2a 1\u00d73\u00d724\u00d724 \uff0c\u53e6\u4e00\u8fb9\u8ba1\u7b97\u51fa\u6765 1\u00d75\u00d724\u00d724 \uff0cconcat\u5230\u4e00\u8d77\uff0c\u53d8\u6210\u4e00\u4e2a1\u00d78\u00d724\u00d724\u7684\u77e9\u9635\uff0c\u8fd9\u4e2a\u53ebconcat\u8fd9\u5c42\u8fd9\u5176\u5b9e\u662f\u5b8c\u5168\u6ca1\u6709\u5fc5\u8981\u7684\uff0c\u56e0\u4e3aTensorRT\u5b8c\u5168\u53ef\u4ee5\u5b9e\u73b0\u76f4\u63a5\u63a5\u5230\u9700\u8981\u7684\u5730\u65b9\uff0c\u4e0d\u7528\u4e13\u95e8\u505aconcat\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u8fd9\u4e00\u5c42\u4e5f\u53ef\u4ee5\u53d6\u6d88\u6389\u3002 TensorRT\u7684\u6d41\u7a0b \u89e3\u6790\u5668\u89e3\u6790\u6a21\u578b \uff1a\u9996\u5148\u8f93\u5165\u4e00\u4e2a\u9884\u5148\u8bad\u7ec3\u597d\u7684 FP32 \u7684\u6a21\u578b\u548c\u7f51\u7edc\uff0c\u5c06\u6a21\u578b\u901a\u8fc7 parser\uff08\u89e3\u6790\u5668\uff09 \u7b49\u65b9\u5f0f\u8f93\u5165\u5230 TensorRT \u4e2d \u5728\u8fd9\u4e2a\u89e3\u6790\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u8bbe\u7f6e\u6a21\u578b\u7684 DataType \u662f\u7528 FP16 \u8fd8\u662f\u4f7f\u7528 INT8 \uff0c FP32->FP16 \uff0c\u4ec5\u4ec5 Tesla P100/V100 \u652f\u6301 FP16 ?\u5982\u679c\u53ea\u662f\u4f7f\u7528 float 16 \u7684\u6570\u636e\u7cbe\u5ea6\u4ee3\u66ff float-32 \uff0c \u5b9e\u9645\u4e0a\u5e76\u4e0d\u4f1a\u6709\u591a\u5927\u7684\u6027\u80fd\u63d0\u5347\u3002\u771f\u6b63\u63d0\u5347\u6027\u80fd\u7684\u662f half2mode \uff0c\u5373\u4f7f\u7528\u4e86\u4ea4\u53c9\u5b58\u5b58\u50a8\u65b9\u5f0f\u7684\u6a21\u5f0f(\u56fe\u7247\u4e0a\u76f8\u90bb\u533a\u57df\u7684 tensor \u662f \u4ee516\u4f4d \u4ea4\u53c9\u5b58\u50a8\u7684\u65b9\u5f0f\u5b58\u5728\u7684 \u94fe\u63a5 ) FP32->INT8 ,\u6ce8\u610f\uff0c\u8fd9\u91cc\u4f20\u5165\u7684 DataType::KFLOAT \uff0c\u662fFP32\uff0c\u56e0\u4e3aINT8 \u9700\u8981\u5148\u7528FP32\u7684\u7cbe\u5ea6\u6765\u786e\u5b9a\u8f6c\u6362\u7cfb\u6570\uff0cTensorRT\u81ea\u5df1\u4f1a\u5728\u5185\u90e8\u8f6c\u6362\u6210INT8\u3002 TensorRT\u5f15\u64ce \uff1a\u6a21\u578b\u89e3\u6790\u540e\uff0cengine\u4f1a\u8fdb\u884c\u6a21\u578b\u4f18\u5316\uff0c\u5f97\u5230\u4f18\u5316\u597d\u7684engine\u53ef\u4ee5**\u5e8f\u5217\u5316\u5230\u5185\u5b58\uff08buffer\uff09\u6216\u6587\u4ef6\uff08file\uff09 \uff0c\u8bfb\u7684\u65f6\u5019\u9700\u8981**\u53cd\u5e8f\u5217\u5316 \uff0c\u5c06\u5176\u53d8\u6210engine\u4ee5\u4f9b\u4f7f\u7528\u3002\u7136\u540e\u5728\u6267\u884c\u7684\u65f6\u5019\u521b\u5efacontext(\u4e0a\u4e0b\u6587)\uff0c\u4e3b\u8981\u662f\u5206\u914d\u9884\u5148\u7684\u8d44\u6e90\uff0cengine\u52a0context\u5c31\u53ef\u4ee5\u505a\u63a8\u65ad\uff08Inference\uff09\u3002 \u6269\u5c55 TensorRT5\u52a0\u901fyolov3 caffe\u7248\u672c\u7684yolov3\u52a0\u901f\uff0c\u7136\u540e\u5b9e\u9645\u8fd0\u7528\u5230\u9879\u76ee\u4e0a\u540e\uff0c\u53d1\u73b0\u539f\u59cb\u6a21\u578b\u5728TX2\uff08\u4f7f\u7528TensorRT\u52a0\u901f\u540e\uff0cFP16\uff09\u4e0a\u8fd0\u884c260ms\uff0c\u8fdb\u884cL1 \u6392\u5e8f\u526a\u679d\u540e\u539f\u59cb\u6a21\u578b\u7531246.3M\u538b\u7f29\u523064.8M\uff0c\u4f46\u662f\u65f6\u95f4\u8fd0\u884c\u53ea\u63d0\u901f\u5230\u4e86142ms","title":"TensorRT"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_13","text":"L1\u6216L2\u4e00\u822c\u4e0d\u7528\u4f5c\u6846\u56de\u5f52\u635f\u5931\u7684\u539f\u56e0 L1 loss \u7684\u5bfc\u6570\u4e3a\u5e38\u6570\uff0c\u5728\u8bad\u7ec3\u540e\u671f\uff0c x \u5f88\u5c0f\u65f6\uff0c\u5982\u679c lr \u4e0d\u53d8\uff0c\u635f\u5931\u51fd\u6570\u4f1a\u5728\u7a33\u5b9a\u503c\u9644\u8fd1\u6ce2\u52a8\uff0c\u5f88\u96be\u6536\u655b\u5230\u66f4\u9ad8\u7cbe\u5ea6\u3002 L2 loss \u8bad\u7ec3\u521d\u671f\uff0c x \u503c\u5f88\u5927\u65f6\uff0c\u5176\u5bfc\u6570\u4e5f\u5f88\u5927\uff0c\u8bad\u7ec3\u521d\u671f\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002 Smooth L1 Loss \u5b9a\u4e49 \u5b9e\u9645\u76ee\u6807\u68c0\u6d4b\u6846\u56de\u5f52loss \u9884\u6d4b\u7684\u6846\u5750\u6807\uff1a GT \u7684\u6846\u5750\u6807\uff1a \u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u6c42\u548c sum \uff0c\u4e5f\u6709\u7684\u4f1a\u6c42\u5747\u503c mean \u7f3a\u70b9 \u8fd9\u91cc\u5148\u6c42\u51fa\u56db\u4e2a\u70b9\u7684loss\uff0c\u518d\u76f8\u52a0\uff0c\u4f46\u5b9e\u9645\u56db\u4e2a\u70b9\u662f\u76f8\u5173\u8054\u7684\uff0c\u5b9e\u9645\u8bc4\u4ef7\u6846\u68c0\u6d4b\u7684\u6307\u6807\u662f\u4f7f\u7528 IOU \uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u5f88\u53ef\u80fd\u591a\u4e2a\u68c0\u6d4b\u6846IOU\u5dee\u5f02\u5f88\u5927\uff0c\u4f46 smooth l1 loss \u76f8\u540c\u3002 IOU Loss \u5b9a\u4e492\uff1a IOU Loss = -ln(IOU) | L_iou = 1 - iou \u7f3a\u70b9\uff1a\u65e0\u6cd5\u4f18\u5316\u65e0\u4ea4\u96c6\u7684\u8fb9\u754c\u6846( loss \u6052\u5b9a\u4e3a 1 )\uff0c\u4e0d\u80fd\u53cd\u6620\u4e24\u6846\u4e4b\u95f4\u7684\u8ddd\u79bb\u8fdc\u8fd1\uff0c\u4e14\u53ea\u8981 iou \u76f8\u540c\uff0c\u4e24\u6846\u7684\u4f4d\u7f6e\u5173\u7cfb\u65e0\u6cd5\u533a\u5206\u3002 GIou Loss C\u4e3aB\u4e0eB^gt\u6700\u5c0f\u5916\u63a5\u77e9\u5f62 ,\u76f8\u5f53\u4e8e\u5728 IoU loss \u7684\u57fa\u7840\u4e0a\u589e\u52a0\u4e00\u4e2a\u60e9\u7f5a\u9879\uff0c\u5f53 bbox \u7684\u8ddd\u79bb\u8d8a\u5927\u65f6\uff0c\u60e9\u7f5a\u9879\u5c06\u8d8a\u5927\uff0c\u4f46\u662f IoU \u548c GIoU \u7684\u503c\u90fd\u4e00\u6837\uff0c\u6b64\u65f6 GIoU \u9000\u5316\u4e3a IoU , \u65e0\u6cd5\u533a\u5206\u5176\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb DIou Loss :\u4e0d\u91cd\u53e0\u4ecd\u7136\u53ef\u4ee5\u4e3a\u8fb9\u754c\u6846\u63d0\u4f9b\u68af\u5ea6\uff0c\u76f4\u63a5\u4f18\u5316\u4e24\u6846\u8ddd\u79bb\u6536\u655b\u66f4\u5feb\uff0c\u4f46\u662f\u6ca1\u6709\u8003\u8651\u957f\u5bbd\u6bd4\u3002 \u7f3a\u70b9\uff0c\u6ca1\u6709\u8003\u8651\u957f\u5bbd\u6bd4 DIoU-NMS \u80fd\u591f\u66f4\u597d\u7684\u5f15\u5bfcbbox\u7684\u6d88\u9664\uff0c\u4ee5\u540e\u8003\u8651\u4f7f\u7528 CIoU Loss + DIoU-NMS \uff0c\u4e3a\u4ec0\u4e48\u4e0d\u4f7f\u7528 CIOU_nms ciou \u662f\u5728 Diou \u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u5f71\u54cd\u56e0\u5b50\uff0c\u5305\u542b GT \uff0c\u9884\u6d4b\u7684\u65f6\u5019\u6ca1\u6709 GT \u4fe1\u606f\uff0c\u4e0d\u7528\u8003\u8651\u5f71\u54cd\u56e0\u5b50\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 DIOU_nms \u5373\u53ef CIou Loss : Lciou = Ldiou + \u957f\u5bbd\u6bd4 \u5728 DIOU \u57fa\u7840\u4e0a\u52a0\u4e86\u4e00\u4e2a\u5f71\u54cd\u56e0\u5b50 av \uff1a \u52a0\u5165\u4e86\u957f\u5bbd\u6bd4\u7684\u8003\u91cf (\u8003\u8651\u4e86\u9884\u6d4b\u6846\u957f\u5bbd\u6bd4\u62df\u5408\u76ee\u6807\u6846\u7684\u957f\u5bbd\u6bd4) v \uff1a\u7528\u6765\u8861\u91cf\u957f\u5bbd\u6bd4\u4e00\u81f4\u6027\u7684\u53c2\u6570 a \uff1a\u6743\u8861\u56e0\u5b50 \u8fd9\u6837 CIOU Loss \u8003\u8651\u4e86:\u91cd\u53e0\u9762\u79ef\u3001\u4e2d\u5fc3\u70b9\u8ddd\u79bb\uff0c\u957f\u5bbd\u6bd4\uff0c\u6548\u679c\u4f1a\u66f4\u597d\u3002 \u7f3a\u70b9\uff1a v \u8fc7\u4e8e\u590d\u6742\uff0c\u51cf\u6162\u6536\u655b\u901f\u5ea6\uff1bv\u7684\u5bfc\u6570\u4e2d\u542b\u6709 1/(w^2+h^2) \u8fd9\u4e2a\u503c\u5f80\u5f80\u5f88\u5927\uff0c\u901a\u5e38\u4f1a\u5bfc\u81f4\u68af\u5ea6\u7206\u70b8\u3002 Focal-EIoU Loss EIOU Loss Focal-EIoU Loss **IOU_Loss\uff1a**\u4e3b\u8981\u8003\u8651\u68c0\u6d4b\u6846\u548c\u76ee\u6807\u6846\u91cd\u53e0\u9762\u79ef\u3002 **GIOU_Loss\uff1a**\u5728IOU\u7684\u57fa\u7840\u4e0a\uff0c\u89e3\u51b3\u8fb9\u754c\u6846\u4e0d\u91cd\u5408\u65f6\u7684\u95ee\u9898\u3002 **DIOU_Loss\uff1a**\u5728IOU\u548cGIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u4fe1\u606f\u3002 **CIOU_Loss\uff1a**\u5728DIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u5bbd\u9ad8\u6bd4\u7684\u5c3a\u5ea6\u4fe1\u606f\u3002","title":"\u5e38\u7528\u76ee\u6807\u68c0\u6d4b\u635f\u5931\u51fd\u6570"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#link","text":"\u4eba\u8138\u8bc6\u522b\uff1a\u672c\u8d28\u4e0a\u662f\u5206\u7c7b\u95ee\u9898(\u76ee\u7684\u5c31\u662f\u4e0d\u540c\u7c7b\u7684**\u7c7b\u95f4\u95f4\u8ddd\u591f\u5927\uff0c\u540c\u4e00\u7c7b\u7684\u7c7b\u5185\u8ddd\u79bb\u8db3\u591f\u5c0f**)\u3002\u4e00\u822c\u5206\u7c7b\u635f\u5931\u51fd\u6570\u5c31\u662f softmax loss (\u4ea4\u53c9\u71b5\u635f\u5931)\uff0c\u4f46\u5bf9\u4e8e\u4eba\u8138\u5c31\u4e0d\u591f\u7528\u4e86\uff0c\u56e0\u4e3a**\u4eba\u8138\u7279\u5f81\u5dee\u5f02\u4e0d\u660e\u663e**\uff0c softmax loss \u5bf9\u7c7b\u95f4\u8ddd\u79bb\u548c\u7c7b\u5185\u8ddd\u79bb\u63a7\u5236\u7684\u90fd\u4e0d\u597d\uff0c\u6240\u4ee5\u6700\u540e\u8bc6\u522b\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u6cdb\u5316\u80fd\u529b\u8f83\u5dee\uff0c\u5e38\u7528 Center-Loss\u3001L-Softmax\u3001A-Softmax\u3001ArcFace\u3001AM-softmax \u7b49 softmax Loss:\u7c7b\u95f4\u8ddd\u79bb\u548c\u7c7b\u5185\u8ddd\u79bb\u63a7\u5236\u7684\u90fd\u4e0d\u597d \uff0c\u5404\u7c7b\u635f\u5931\u6743\u91cd\u76f8\u540c\uff0c\u7c7b\u95f4\u7c7b\u5185\u90fd\u6ca1\u505a\u4f18\u5316\u3002 Center Loss:\u4e3b\u8981\u4f18\u5316\u4e86\u7c7b\u5185\u8ddd\u79bb\uff0c\u4f46\u5bf9\u7c7b\u95f4\u8ddd\u79bb\u63a7\u5236\u4e0d\u8db3(\u4eba\u8138\u65b9\u5411\u8fd8\u884c(\u5355\u7c7b)\uff0c\u7528\u4e8e\u5176\u4ed6\u65b9\u5411\u6548\u679c\u5dee\u4e8esoftmax) \uff0c\u5f15\u5165\u771f\u5b9e\u7c7b\u522b\u7684\u4e2d\u5fc3\u8ddd\u79bb\u5411\u91cf C_yi \uff0c\u7c7b\u5185\u635f\u5931\u589e\u5927\uff0c\u4f18\u5316\u540e\u4f7f\u7c7b\u5185\u8ddd\u79bb\u66f4\u7d27\u51d1\u3002\u03bb \u662f\u8d85\u53c2\uff0c\u63a7\u5236\u7c7b\u5185\u8ddd\u79bb\u635f\u5931\u5728\u5f53\u524d\u6837\u672c\u635f\u5931\u4e2d\u7684\u6bd4\u91cd\u3002 L-softmax Loss(Large-Margin Softmax Loss):\u7c7b\u5185\u8ddd\u79bb\u548c\u7c7b\u95f4\u8ddd\u79bb\u90fd\u80fd\u4f18\u5316 :\u501f\u7528 SVM \u601d\u60f3\uff0c\u5982\u679c\u539f\u6765\u7684softmax loss\u662f\u53ea\u8981\u652f\u6301\u5411\u91cf\u548c\u5206\u7c7b\u9762\u7684\u8ddd\u79bb\u5927\u4e8eh\u5c31\u7b97\u5206\u7c7b\u6548\u679c\u6bd4\u8f83\u597d\u4e86\uff0c\u90a3\u4e48 L-softmax loss \u5c31\u662f\u9700\u8981\u8ddd\u79bb\u8fbe\u5230 mh \uff08 m\u662f>=2 \u6b63\u6574\u6570\uff09\u624d\u7b97\u5206\u7c7b\u6548\u679c\u6bd4\u8f83\u597d\u4e86\u3002 \u4e58\u6cd5\u89d2\u5ea6\u95f4\u9694 \u3002 \u89e3\u91ca:\u5f88\u597d\u7406\u89e3\uff0c\u539f\u5148\u53ea\u9700\u8981 \u03b81>\u03b82 \u5c31\u80fd\u5206\u7c7b\uff0c\u73b0\u5728\u81f3\u5c11 \u03b81>m*\u03b82 \uff0c\u8fb9\u754c\u8ddd\u79bb\u589e\u52a0\u4e86 m \u500d\uff0c\u66f4\u96be\u8bad\u7ec3\u4e86\uff0c\u4f46\u5982\u679c\u6536\u655b\u597d\u540e\u7c7b\u5185\u8ddd\u79bb\u4f1a\u66f4\u5927\uff0c\u7c7b\u95f4\u8ddd\u79bb\u4f1a\u66f4\u597d\uff0c\u56e0\u4e3a\u8fd9\u4e2a m \u5f3a\u8feb\u4f60\u5f80\u8fd9\u4e2a\u65b9\u5411\u6536\u655b\u3002\u901a\u5e38\u7528 m \u8c03\u8282\u8bad\u7ec3\u96be\u5ea6\uff0c m \u8d8a\u5927\u6548\u679c\u8d8a\u597d\uff0c\u5f53\u7136\u6a21\u578b\u8d8a\u4e0d\u6613\u6536\u655b\uff0c\u5e38 m=2,3,4 A-softmax loss ( SphereFace ):\u7c7b\u4f3c L-softmax \uff0c\u9650\u5236\u6761\u4ef6(\u5f52\u4e00\u5316\u6743\u91cd,bias\u7f6e0): w=1,bias=0,\u4ee3\u7801\u4e2d\u5b9e\u73b0:\u5f52\u4e00\u5316\u6743\u91cd(w/w_2\u8303\u6570) \uff0c\u7528\u89d2\u5ea6\u589e\u5927\u95f4\u9694\u3002 AM-Softmax(\u4f59\u5f26\u8ddd\u79bb:\u540cCosFace) \uff1a A-softmax(\u89d2\u5ea6\u8ddd\u79bb) \u7684\u6539\u8fdb\u3002\u9650\u5236\u6761\u4ef6(\u5f52\u4e00\u5316\u6743\u91cd\u548c\u7279\u5f81\u5411\u91cf,bias\u7f6e0): w=1,x=1,bias=0,\u4ee3\u7801\u4e2d\u5b9e\u73b0:\u5f52\u4e00\u5316\u6743\u91cd(w/w_2\u8303\u6570)\uff0c\u5f52\u4e00\u5316\u7279\u5f81\u5411\u91cf(x/x_2\u8303\u6570) \uff0c \u51cf\u6cd5\u4f59\u5f26\u95f4\u9694 ArcFace loss(\u89d2\u5ea6\u95f4\u9694) **: A-softmax(\u89d2\u5ea6\u8ddd\u79bb) \u7684\u6539\u8fdb\uff0c\u89d2\u5ea6 \u03b8 \u52a0\u4e0a\u95f4\u9694 m \u3002\u9650\u5236\u6761\u4ef6(\u5f52\u4e00\u5316\u6743\u91cd\u548c\u7279\u5f81\u5411\u91cf,bias\u7f6e0): w=1,x=1,bias=0,\u4ee3\u7801\u4e2d\u5b9e\u73b0:\u5f52\u4e00\u5316\u6743\u91cd(w/w_2\u8303\u6570)\uff0c\u5f52\u4e00\u5316\u7279\u5f81\u5411\u91cf(x/x_2\u8303\u6570) \uff0c\u7528\u89d2\u5ea6\u6765\u589e\u5927\u95f4\u9694\u3002**\u52a0\u6cd5\u89d2\u5ea6\u95f4\u9694 \u5148\u5c06\u7279\u5f81\u5411\u91cfL2\u5f52\u4e00\u5316\uff0c\u6743\u91cdL2\u5f52\u4e00\u5316\uff0c\u8ba1\u7b97\u4e24\u8005\u7684cos(\u03b8)\uff0c\u6c42\u53cd\u4f59\u5f26arccos(\u03b8)\u5f97\u5230\u7279\u5f81 x \u4e0e\u771f\u5b9e\u6743\u503c W \u4e4b\u95f4\u7684\u5939\u89d2\u03b8\uff0c\u6dfb\u52a0\u89d2\u5ea6\u95f4\u9694 m \uff0c\u518d\u6c42\u4f59\u5f26 cos(\u03b8+m) \uff0c\u5c06\u6240\u6709\u7684 log \u4e58\u4ee5\u7279\u5f81\u5c3a\u5ea6 s \uff0c\u7136\u540e\u5c06 log \u9001\u5230 softmax \u51fd\u6570\u5f97\u5230\u5404\u7c7b\u522b\u6982\u7387\u3002\u518d\u7528 Ground Truth \u548c One Hot Vector \u4e00\u8d77\u7b97\u51fa\u4ea4\u53c9\u71b5\u635f\u5931 ArcFace loss \u7ec8\u6781\u5927\u6cd5: \u8054\u5408 margin : \u7ed3\u5408\u6240\u6709\u7684margin\u60e9\u7f5a(cos(m1*\u03b8+m2)\u2212m3)","title":"\u5e38\u7528\u4eba\u8138\u8bc6\u522b\u635f\u5931\u51fd\u6570link"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_14","text":"FAR(\u8bef\u8bc6\u522b\u7387: False Accept Rate ):\u4e0d\u540c\u4eba\u5224\u5b9a\u4e3a\u540c\u4e00\u4eba\u7684\u6bd4\u4f8b\uff1aright/\u7c7b\u95f4\u5339\u914d\u603b\u6b21\u6570 FRR(\u62d2\u8bc6\u522b\u7387: False Reject Rate ):\u540c\u4e00\u4eba\u5224\u5b9a\u4e3a\u4e0d\u540c\u4eba\u7684\u6bd4\u4f8b\uff1aright/\u7c7b\u5185\u5339\u914d\u603b\u6b21\u6570 EER(\u7b49\u9519\u8bef\u7387: Equal Error Rate ):FAR\u662f\u968f\u9608\u503c\u589e\u5927\u800c\u51cf\u5c0f\u7684\uff0cFRR\u662f\u968f\u9608\u503c\u589e\u5927\u800c\u589e\u5927\u7684\u3002\u56e0\u6b64\u5b83\u4eec\u4e00\u5b9a\u6709\u4ea4\u70b9\u4e3aEER\uff0c\u4ece\u800c\u9009\u53d6\u6700\u4f73\u9608\u503c\u3002\u5e38\u53d6 FAR=1e-3 \u65f6\uff0cFRR\u7684\u503c\u4f5c\u4e3a\u53c2\u8003\uff0c\u503c\u8d8a\u5c0f\uff0c\u6027\u80fd\u8d8a\u597d(\u8bba\u6587\u4e2d\u5e38\u5e38 TAR =xx @ FAR=0.00100 )\u6765\u8bc4\u6d4b","title":"\u4eba\u8138\u8bc6\u522b\u8bc4\u4f30\u6307\u6807"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_15","text":"Sobel\u7b97\u5b50 \u200b Sx= Sy= 3*3 Sobel\u4e24\u4e2a\u65b9\u5411\u7684\u7b97\u5b50\u5728\u56fe\u50cf\u4e0a\u6ed1\u52a8\uff0c\u6a21\u677f\u4e0e\u5176\u8986\u76d6\u7684\u56fe\u50cf 3*3 \u533a\u57df9\u4e2a\u50cf\u7d20\u8fdb\u884c\u5377\u79ef\uff0c\u6c42\u548c\u540e\u5f97\u5230\u6b64\u65b9\u5411\u7684**\u8fb9\u7f18\u68c0\u6d4b\u5e45\u503c**\u3002 A\u4e3a\u56fe\u50cf Gx\u548cGy\u5206\u522b\u662f\u6c34\u5e73\u548c\u7ad6\u76f4\u65b9\u5411\u7b97\u5b50\u7684\u5377\u79ef\u7ed3\u679c G\u5219\u662f\u6700\u7ec8\u5f97\u5230\u7684\u8fb9\u7f18\u68c0\u6d4b\u5e45\u503c \u03b8\u503c\u5219\u662f\u8fb9\u7f18\u65b9\u5411 Sobel\u7b97\u5b50\u8fd8\u6709\u4e00\u79cd\u53d8\u79cd\uff0c\u662f\u5404\u5411\u540c\u6027Sobel\u7b97\u5b50(\u66f4\u51c6\u786e)\uff0c\u5176\u6a21\u677f\u4e3a \u6a21\u677f\u7684\u6743\u503c\u662f\u79bb\u4e2d\u5fc3\u4f4d\u7f6e\u8d8a\u8fdc\u5219\u6743\u503c\u5f71\u54cd\u8d8a\u5c0f\uff0c\u4f46\u662f\u4e0a\u9762\u7684\u6a21\u677f\u4f7f\u5176\u8ddd\u79bb\u4e00\u6837\u957f\uff0c\u4f8b\u5982:\u4e2d\u5fc3\u70b9\u5230(0,0)\u70b9\u8ddd\u79bb\u662f\u6839\u53f72\uff0c\u5230(1,0)\u70b9\u8ddd\u79bb\u4e5f\u662f\u6839\u53f72\uff0c\u8fd9\u6837\u5c31\u6d88\u9664\u4e86\u6743\u91cd\u7684\u5f71\u54cd\u3002 Canny\u7b97\u5b50(6\u6b65) \u5f69\u8272\u56fe\u7247\u7070\u5ea6\u5316\u3002 \u4f7f\u7528\u9ad8\u65af\u6ee4\u6ce2\u5668\uff0c\u4ee5\u5e73\u6ed1\u56fe\u50cf\uff0c\u6ee4\u9664\u566a\u58f0\u3002 \u9ad8\u65af\u5377\u79ef\u6838\u5c3a\u5bf8\u8d8a\u5927\uff0c\u68c0\u6d4b\u5668\u5bf9\u566a\u58f0\u7684\u654f\u611f\u5ea6\u8d8a\u4f4e\uff0c\u4f46\u662f\u8fb9\u7f18\u68c0\u6d4b\u7684\u5b9a\u4f4d\u8bef\u5dee\u4e5f\u5c06\u7565\u6709\u589e\u52a0\uff0c\u4e00\u822c\u800c\u8a00 5x5 \u662f\u6700\u5408\u9002\u7684\u3002 \u8ba1\u7b97\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u50cf\u7d20\u70b9\u7684\u68af\u5ea6\u5f3a\u5ea6\u548c\u65b9\u5411\u3002 \u56fe\u50cf\u4e2d\u7684\u8fb9\u7f18\u53ef\u4ee5\u6307\u5411\u5404\u4e2a\u65b9\u5411\uff0c\u6240\u4ee5\u8fd9\u6b65\u5e38\u7528\u4e00\u9636\u5fae\u5206\u7b97\u5b50(\u5982:Sobel\u7b97\u5b50)\uff0c\u5f97\u5230\u50cf\u7d20\u70b9\u7684\u68af\u5ea6G\u548c\u65b9\u5411theta\u3002 \u5e94\u7528\u975e\u6781\u5927\u503c\u6291\u5236 \uff0c\u4f7f\u5f97\u8fb9\u7f18\u7ec6\u5316\u3002 \u4e3b\u8981\u4f5c\u7528\u662f\"\u7626\u8fb9\"\uff0c\u4ec5\u4ec5\u57fa\u4e8e\u68af\u5ea6\u503c\u63d0\u53d6\u7684\u8fb9\u7f18\u4ecd\u7136\u5f88\u6a21\u7cca\uff0c\u5c06\u5c40\u90e8\u6700\u5927\u503c\u4e4b\u5916\u7684\u6240\u6709\u68af\u5ea6\u503c\u6291\u5236\u4e3a0(\u5c06\u5f53\u524d\u50cf\u7d20\u7684\u68af\u5ea6\u5f3a\u5ea6\u4e0e\u6cbf\u6b63\u8d1f\u68af\u5ea6\u65b9\u5411\u4e0a\u7684\u4e24\u4e2a\u50cf\u7d20\u7684\u68af\u5ea6\u5f3a\u5ea6\u8fdb\u884c\u6bd4\u8f83\uff0c\u6700\u5927\u5219\u4fdd\u7559\uff0c\u5426\u5219\u88ab\u6291\u5236) \u5e94\u7528**\u53cc\u9608\u503c\u68c0\u6d4b**\u6765\u4f18\u5316\u8fb9\u7f18\u8fde\u63a5\u5904\u7406\u3002 \u975e\u6781\u5927\u503c\u6291\u5236\u540e\uff0c\u8fb9\u7f18\u5df2\u7ecf\u5f88\u660e\u663e\u4e86\uff0c\u4f46\u8fd8\u662f\u5b58\u5728\u566a\u58f0\u548c\u989c\u8272\u53d8\u5316\u5f15\u8d77\u7684\u4e00\u4e9b\u8fb9\u7f18\u50cf\u7d20(\u566a\u70b9)\uff0c\u53ef\u4ee5\u901a\u8fc7\u9ad8\u4f4e\u9608\u503c\u6765\u89e3\u51b3(\u7528\u5f31\u68af\u5ea6\u503c\u8fc7\u6ee4\u8fb9\u7f18\u50cf\u7d20\uff0c\u5e76\u4fdd\u7559\u5177\u6709\u9ad8\u68af\u5ea6\u503c\u7684\u8fb9\u7f18\u50cf\u7d20)\u3002 \u5982\u679c\u8fb9\u7f18\u50cf\u7d20\u7684\u68af\u5ea6\u503c\u5c0f\u4e8e\u4f4e\u9608\u503c\uff0c\u5219\u4f1a\u88ab\u6291\u5236\uff1b \u5982\u679c\u8fb9\u7f18\u50cf\u7d20\u7684\u68af\u5ea6\u503c\u5c0f\u4e8e\u9ad8\u9608\u503c\u5e76\u4e14\u5927\u4e8e\u4f4e\u9608\u503c\uff0c\u5219\u5c06\u5176\u6807\u8bb0\u4e3a**\u5f31\u8fb9\u7f18\u50cf\u7d20(\u4fdd\u7559\uff1f)**\uff1b \u5982\u679c\u8fb9\u7f18\u50cf\u7d20\u7684\u68af\u5ea6\u503c\u9ad8\u4e8e\u9ad8\u9608\u503c\uff0c\u5219\u5c06\u5176\u6807\u8bb0\u4e3a**\u5f3a\u8fb9\u7f18\u50cf\u7d20(\u4fdd\u7559)**\uff1b \u9608\u503c\u7684\u9009\u62e9\u53d6\u51b3\u4e8e\u7ed9\u5b9a\u8f93\u5165\u56fe\u50cf\u7684\u5185\u5bb9\u3002 \u901a\u8fc7\u6291\u5236\u5b64\u7acb\u7684\u5f31\u8fb9\u7f18\u6700\u7ec8\u5b8c\u6210\u8fb9\u7f18\u68c0\u6d4b(\u4e8c\u503c\u5316\u56fe\u50cf\u8f93\u51fa\u7ed3\u679c)\u3002 \u5f3a\u8fb9\u7f18\u50cf\u7d20\u4fdd\u7559\uff0c\u56e0\u4e3a\u5b83\u4eec\u662f\u4ece\u56fe\u50cf\u4e2d\u7684\u771f\u5b9e\u8fb9\u7f18\u4e2d\u63d0\u53d6\u51fa\u6765\u7684\uff0c\u7136\u800c\uff0c\u5f31\u8fb9\u7f18\u533a\u57df\u662f\u5426\u4fdd\u7559\uff1f(\u56e0\u4e3a\u8fd9\u4e9b\u50cf\u7d20\u53ef\u4ee5\u4ece\u771f\u5b9e\u8fb9\u7f18\u63d0\u53d6\u4e5f\u53ef\u4ee5\u662f\u56e0\u566a\u58f0\u6216\u989c\u8272\u53d8\u5316\u5f15\u8d77\u7684)\uff0c\u4fdd\u7559\u771f\u5b9e\u7684\uff0c\u53bb\u9664\u566a\u58f0\u5f15\u8d77\u7684\u3002 \u901a\u5e38\uff0c\u7531\u771f\u5b9e\u8fb9\u7f18\u5f15\u8d77\u7684\u5f31\u8fb9\u7f18\u50cf\u7d20\u5c06\u8fde\u63a5\u5230\u5f3a\u8fb9\u7f18\u50cf\u7d20\uff0c\u800c\u566a\u58f0\u54cd\u5e94\u672a\u8fde\u63a5\u3002\u4e3a\u4e86\u8ddf\u8e2a\u8fb9\u7f18\u8fde\u63a5\uff0c\u901a\u8fc7\u67e5\u770b\u5f31\u8fb9\u7f18\u50cf\u7d20\u53ca\u51768\u4e2a\u90bb\u57df\u50cf\u7d20\uff0c\u53ea\u8981\u5176\u4e2d\u4e00\u4e2a\u4e3a\u5f3a\u8fb9\u7f18\u50cf\u7d20\uff0c\u5219\u8be5\u5f31\u8fb9\u7f18\u70b9\u5c31\u53ef\u4ee5\u4fdd\u7559\u4e3a\u771f\u5b9e\u7684\u8fb9\u7f18\u3002","title":"\u5e38\u89c1\u8fb9\u7f18\u5904\u7406\u7b97\u5b50"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#_16","text":"\u56fe\u50cf\u6ee4\u6ce2\u7684\u76ee\u7684 \u6d88\u9664\u56fe\u50cf\u4e2d\u6df7\u5165\u7684\u566a\u58f0 \u4e3a\u56fe\u50cf\u8bc6\u522b\u62bd\u53d6\u51fa\u56fe\u50cf\u7279\u5f81 \u6ee4\u6ce2\u79cd\u7c7b \u7ebf\u6027\u6ee4\u6ce2\uff1a\u5747\u503c\u6ee4\u6ce2\u3001\u9ad8\u65af\u6ee4\u6ce2 \u975e\u7ebf\u6027\u6ee4\u6ce2\uff1a\u4e2d\u503c\u6ee4\u6ce2\u3001\u53cc\u8fb9\u6ee4\u6ce2 \u5747\u503c\u6ee4\u6ce2 \u5747\u503c\u6ee4\u6ce2\uff0c\u5bf9**\u9ad8\u65af\u566a\u58f0**\u8868\u73b0\u8f83\u597d\uff0c\u5bf9\u6912\u76d0\u566a\u58f0\u8868\u73b0\u8f83\u5dee\u3002 blur = cv2 . blur ( src_img ,( 7 , 7 )) # \u6838\u5c3a\u5bf8\u4e00\u822c\u6709 3x5,5x5,7x7,\u4e00\u822c\u6838\u8d8a\u5927\uff0c\u56fe\u7247\u5904\u7406\u5b8c\u7684\u6548\u679c\u8d8a\u6a21\u7cca \u4e2d\u503c\u6ee4\u6ce2(\u975e\u7ebf\u6027) \u4e2d\u503c\u6ee4\u6ce2\u4e3b\u9898\u601d\u60f3\u662f\u53d6\u76f8\u90bb\u50cf\u7d20\u7684\u70b9\uff0c\u7136\u540e\u5bf9\u76f8\u90bb\u50cf\u7d20\u7684\u70b9\u8fdb\u884c\u6392\u5e8f\uff0c\u53d6\u4e2d\u70b9\u7684\u7070\u5ea6\u503c\u4f5c\u4e3a\u8be5\u50cf\u7d20\u70b9\u7684\u7070\u5ea6\u503c \u8be5\u65b9\u6cd5\u5728\u53bb\u9664**\u8109\u51b2\u566a\u58f0\u3001\u6912\u76d0\u566a\u58f0**\u7684\u540c\u65f6\u8fd8\u80fd\u4fdd\u7559\u56fe\u50cf\u7684\u7ec6\u8282\u90e8\u5206 \u4e2d\u503c\u6ee4\u6ce2\u82b1\u8d39\u7684\u65f6\u95f4\u6bd4\u5747\u503c\u6ee4\u6ce2\u66f4\u4e45\uff0c\u4f46\u5176\u5728\u566a\u58f0\u7684\u6d88\u9664\u80fd\u529b\u4e0a\u66f4\u5f3a\u3002 \u9ad8\u65af\u6ee4\u6ce2(\u9ad8\u65af\u6a21\u7cca) \u9ad8\u65af\u6ee4\u6ce2\u4e00\u822c\u9488\u5bf9\u7684\u662f**\u9ad8\u65af\u566a\u58f0**\uff0c\u80fd\u591f\u5f88\u597d\u7684\u6291\u5236\u56fe\u50cf\u8f93\u5165\u65f6**\u968f\u673a\u5f15\u5165\u7684\u566a\u58f0**\uff0c\u5c06\u50cf\u7d20\u70b9\u8ddf\u90bb\u57df\u50cf\u7d20\u770b\u4f5c\u662f\u4e00\u79cd\u9ad8\u65af\u5206\u5e03\u7684\u5173\u7cfb\uff0c \u5b83\u7684\u64cd\u4f5c\u662f\u5c06\u56fe\u50cf\u548c\u4e00\u4e2a\u9ad8\u65af\u6838\u8fdb\u884c\u5377\u79ef\u64cd\u4f5c \uff1a \u53cc\u8fb9\u6ee4\u6ce2 \u76ee\u7684\u662f**\u4fdd\u8fb9\u53bb\u566a**\uff0c\u539f\u7406:\u4e8c\u7ef4\u9ad8\u65af\u51fd\u6570\u751f\u6210\u8ddd\u79bb\u6a21\u677f\uff0c\u4f7f\u7528\u4e00\u7ef4\u9ad8\u65af\u51fd\u6570\u751f\u6210\u503c\u57df\u6a21\u677f\uff0c\u4e24\u8005\u76f8\u4e58\u5373\u53ef\u3002 \u8ddd\u79bb\u6a21\u677f :\u5176\u4e2d\uff0c(k,l)\u4e3a\u6a21\u677f\u7a97\u53e3\u7684\u4e2d\u5fc3\u5750\u6807\uff1b(i,j)\u4e3a\u6a21\u677f\u7a97\u53e3\u5176\u4ed6\u7cfb\u6570\u7684\u5750\u6807\uff1b\u03c3\u4e3a\u9ad8\u65af\u51fd\u6570\u7684\u6807\u51c6\u5dee\u3002 \u503c\u57df\u6a21\u677f \u4e24\u8005\u76f8\u4e58\u5f97\u5230\u53cc\u8fb9\u8fc7\u6ee4\u5668\u6a21\u677f: \u5c0f\u603b\u7ed3 \u5747\u503c\u6a21\u7cca\u65e0\u6cd5\u514b\u670d\u8fb9\u7f18\u50cf\u7d20\u4fe1\u606f\u4e22\u5931\u7684\u7f3a\u9677\uff0c\u539f\u56e0\u662f\u5747\u503c\u6ee4\u6ce2\u662f\u57fa\u4e8e\u5e73\u5747\u6743\u91cd\u7684\u3002 \u9ad8\u65af\u6a21\u7cca\u90e8\u5206\u514b\u670d\u4e86\u8be5\u7f3a\u9677\uff0c\u4f46\u65e0\u6cd5\u5b8c\u5168\u907f\u514d\uff0c\u56e0\u4e3a\u6ca1\u6709\u8003\u8651\u50cf\u7d20\u503c\u7684\u4e0d\u540c\u3002 \u9ad8\u65af\u53cc\u8fb9\u6a21\u7cca-\u662f\u8fb9\u7f18\u4fdd\u7559\u7684\u6ee4\u6ce2\u65b9\u6cd5\uff0c\u907f\u514d\u4e86\u8fb9\u7f18\u4fe1\u606f\u4e22\u5931\uff0c\u4fdd\u7559\u4e86\u56fe\u50cf\u8f6e\u5ed3\u4e0d\u53d8\u3002","title":"\u56fe\u50cf\u6ee4\u6ce2"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/#c","text":"\u535a\u5ba2\u94fe\u63a5 \u6808\u5185\u5b58\u548c\u5806\u5185\u5b58 \u6808\u5185\u5b58:\u5e38\u5206\u914d\u7ed9\u5c40\u90e8\u53d8\u91cf\u3001\u4e34\u65f6\u53d8\u91cf\u3001\u51fd\u6570\u53c2\u6570\u7b49\uff0c\u4e3a\u7f16\u8bd1\u5668\u81ea\u52a8\u5206\u914d\u548c\u91ca\u653e \u5f53\u5728\u6808\u4e0a\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u53d8\u91cf\u65f6(\u6216\u8fdb\u5165\u4e00\u4e2a\u51fd\u6570\u65f6)\uff0c\u6808\u7684\u6307\u9488\u4f1a\u4e0b\u79fb\uff0c\u76f8\u5f53\u4e8e\u5728\u6808\u4e0a\u5206\u914d\u4e86\u4e00\u5757\u5185\u5b58\u3002\u3002\u5f53\u8fd9\u4e2a\u53d8\u91cf\u7684\u751f\u547d\u5468\u671f\u7ed3\u675f\u65f6\uff0c\u6808\u7684\u6307\u9488\u4f1a\u4e0a\u79fb\uff0c\u76f8\u540c\u4e8e\u56de\u6536\u4e86\u5185\u5b58\u3002\u7531\u4e8e\u6808\u4e0a\u7684\u5185\u5b58\u7684\u5206\u914d\u548c\u56de\u6536\u90fd\u662f\u7531\u7f16\u8bd1\u5668\u63a7\u5236\u7684\uff0c\u6240\u4ee5\u5728\u6808\u4e0a\u662f\u4e0d\u4f1a\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u7684\uff0c\u53ea\u4f1a\u53d1\u751f**\u6808\u6ea2\u51fa**\uff0c\u4e5f\u5c31\u662f\u5206\u914d\u7684\u7a7a\u95f4\u8d85\u8fc7\u4e86\u89c4\u5b9a\u7684\u6808\u5927\u5c0f(\u4e00\u4e2a\u7ebf\u7a0b\u7684\u6808\u5185\u5b58\u662f\u6709\u9650\u7684\uff0c\u901a\u5e38\u6765\u8bf4\u662f 8M \u5de6\u53f3\uff08\u53d6\u51b3\u4e8e\u8fd0\u884c\u7684\u73af\u5883\uff09)\u3002 \u5806\u5185\u5b58:\u4e3a\u6210\u5458\u5206\u914d\u548c\u91ca\u653e\uff0c\u4e00\u822c\u7531\u7a0b\u5e8f\u5458\u81ea\u5df1\u7533\u8bf7\u3001\u81ea\u5df1\u91ca\u653e\u3002\u5426\u5219\u53d1\u751f\u5185\u5b58\u6cc4\u9732\u3002\u5178\u578b\u4e3a\u4f7f\u7528new\u7533\u8bf7\u7684\u5806\u5185\u5bb9\u3002 \u5185\u5b58\u6cc4\u9732:\u5806\u4e0a\u7684\u5185\u5b58\u662f\u7531\u7a0b\u5e8f\u76f4\u63a5\u63a7\u5236\u7684\uff0c\u7a0b\u5e8f\u53ef\u4ee5\u901a\u8fc7 malloc/free \u6216 new/delete \u6765\u5206\u914d\u548c\u56de\u6536\u5185\u5b58\uff0c\u5982\u679c\u7a0b\u5e8f\u4e2d\u901a\u8fc7 malloc/new \u5206\u914d\u4e86\u4e00\u5757\u5185\u5b58\uff0c\u4f46\u5fd8\u8bb0\u4f7f\u7528 free/delete \u6765\u56de\u6536\u5185\u5b58\uff0c\u5c31\u53d1\u751f\u4e86\u5185\u5b58\u6cc4\u9732\u3002 \u9759\u6001\u5b58\u50a8\u533a:\u4e3b\u8981\u5b58\u653e\u9759\u6001\u6570\u636e\u3001\u5168\u5c40\u6570\u636e\u548c\u5e38\u91cf\u3002\u5185\u5b58\u5728\u7a0b\u5e8f\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u5df2\u7ecf\u5206\u914d\u597d\uff0c\u800c\u4e14\u8fd9\u5757\u5185\u5b58\u5728\u7a0b\u5e8f\u7684\u6574\u4e2a\u8fd0\u884c\u671f\u95f4\u90fd\u5b58\u5728\u3002 c++\u4e2d\u5185\u5b58\u6cc4\u9732\u548c\u91ce\u6307\u9488 \u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u548c\u6790\u6784\u51fd\u6570\u4e2d\u6ca1\u6709\u5339\u914d\u7684\u8c03\u7528new\u548cdelete\u51fd\u6570 \u4e00\u662f\u5728\u5806\u91cc\u521b\u5efa\u4e86\u5bf9\u8c61\u5360\u7528\u4e86\u5185\u5b58\uff0c\u4f46\u662f\u6ca1\u6709\u663e\u793a\u5730\u91ca\u653e\u5bf9\u8c61\u5360\u7528\u7684\u5185\u5b58\uff1b \u4e8c\u662f\u5728\u7c7b\u7684\u6784\u9020\u51fd\u6570\u4e2d\u52a8\u6001\u7684\u5206\u914d\u4e86\u5185\u5b58\uff0c\u4f46\u662f\u5728\u6790\u6784\u51fd\u6570\u4e2d\u6ca1\u6709\u91ca\u653e\u5185\u5b58\u6216\u8005\u6ca1\u6709\u6b63\u786e\u7684\u91ca\u653e\u5185\u5b58 \u5728\u91ca\u653e\u5bf9\u8c61\u6570\u7ec4\u65f6\u5728delete\u4e2d\u6ca1\u6709\u4f7f\u7528\u65b9\u62ec\u53f7 int *p = new int[10] \u65b9\u62ec\u53f7\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u8fd9\u4e2a\u6307\u9488\u6307\u5411\u7684\u662f\u4e00\u4e2a**\u5bf9\u8c61\u6570\u7ec4**\uff0c delete p \u5982\u679c\u6ca1\u6709\u65b9\u62ec\u53f7\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6307\u9488\u5c31\u88ab\u9ed8\u8ba4\u4e3a\u53ea\u6307\u5411\u4e00\u4e2a\u5bf9\u8c61\uff0c\u5bf9\u8c61\u6570\u7ec4\u4e2d\u7684\u5176\u4ed6\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\u5c31\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u7ed3\u679c\u9020\u6210\u4e86\u5185\u5b58\u6cc4\u9732\uff0c\u6b63\u786e\u505a\u6cd5 delete [] p; \u4e00\u4e2a\u7c7b\u91cc\u6709\u6307\u9488\u6210\u5458\u53d8\u91cf\uff0c\u5fc5\u987b\u663e\u793a\u7684\u5199\u62f7\u8d1d\u6784\u9020\u51fd\u6570 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u90a3\u4e48\u7f16\u8bd1\u5668\u5c31\u4f1a\u8c03\u7528\u9ed8\u8ba4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5982\u679c\u7c7b\u91cc\u6709\u6307\u9488\u6210\u5458\u53d8\u91cf\u4f1a\u88ab\u5b9a\u4e49\u4e3a\u5c06\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\u8d4b\u7ed9\u53e6\u4e00\u4e2a\u53d8\u91cf\uff0c\u8fd9\u79cd\u9690\u5f0f\u7684\u6307\u9488\u590d\u5236\u7ed3\u679c\u5c31\u662f**\u4e24\u4e2a\u5bf9\u8c61\u62e5\u6709\u6307\u5411\u540c\u4e00\u4e2a\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u7684\u6307\u9488**\u3002\u5f53\u91ca\u653e\u7b2c\u4e00\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u5c31\u4f1a\u91ca\u653e\u4e0e\u8be5\u5bf9\u8c61\u6709\u5173\u7684\u52a8\u6001\u5206\u914d\u7684\u5185\u5b58\u7a7a\u95f4\u3002\u800c\u91ca\u653e\u7b2c\u4e8c\u4e2a\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5b83\u7684\u6790\u6784\u51fd\u6570\u4f1a\u91ca\u653e\u76f8\u540c\u7684\u5185\u5b58\uff0c\u8fd9\u662f\u9519\u8bef\u7684\u540c\u65f6\u6709\u53ef\u80fd\u9020\u6210\u5806\u5d29\u6e83\u3002 \u6ca1\u6709\u5c06\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5b9a\u4e49\u4e3a\u865a\u51fd\u6570 \u5f53\u57fa\u7c7b\u6307\u9488\u6307\u5411\u5b50\u7c7b\u5bf9\u8c61\u65f6\uff0c\u5982\u679c\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4e0d\u662fvirtual\uff0c\u91ca\u653e\u7531\u4e00\u4e2a\u57fa\u7c7b\u6307\u9488\u6307\u5411\u7684\u6d3e\u751f\u7c7b\u5bf9\u8c61\u65f6\uff0c\u53ea\u4f1a\u8c03\u7528\u57fa\u7c7b\u7684\u6790\u6784\u51fd\u6570\uff0c\u4e0d\u4f1a\u89e6\u53d1\u52a8\u6001\u7ed1\u5b9a\uff0c\u90a3\u4e48\u5b50\u7c7b\u7684\u6790\u6784\u51fd\u6570\u5c06\u4e0d\u4f1a\u88ab\u8c03\u7528\uff0c\u5b50\u7c7b\u7684\u8d44\u6e90\u6ca1\u6709\u6b63\u786e\u662f\u91ca\u653e\uff0c\u56e0\u6b64\u9020\u6210\u5185\u5b58\u6cc4\u9732\u3002 \u91ce\u6307\u9488 \uff1a\u6307\u5411\u88ab\u91ca\u653e\u7684\u6216\u8005\u8bbf\u95ee\u53d7\u9650\u5185\u5b58\u7684\u6307\u9488 \u6307\u9488\u53d8\u91cf\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff08\u5982\u679c\u503c\u4e0d\u5b9a\uff0c\u53ef\u4ee5\u521d\u59cb\u5316\u4e3aNULL\uff09 \u6307\u9488\u88abfree\u6216\u8005delete\u540e\uff0c\u6ca1\u6709\u7f6e\u4e3aNULL, free\u548cdelete\u53ea\u662f\u628a\u6307\u9488\u6240\u6307\u5411\u7684\u5185\u5b58\u7ed9\u91ca\u653e\u6389\uff0c\u5e76\u6ca1\u6709\u628a\u6307\u9488\u672c\u8eab\u5e72\u6389\uff0c\u6b64\u65f6\u6307\u9488\u6307\u5411\u7684\u662f\u201c\u5783\u573e\u201d\u5185\u5b58\u3002\u91ca\u653e\u540e\u7684\u6307\u9488\u5e94\u8be5\u88ab\u7f6e\u4e3aNULL. \u6307\u9488\u64cd\u4f5c\u8d85\u8d8a\u4e86\u53d8\u91cf\u7684\u4f5c\u7528\u8303\u56f4\uff0c\u6bd4\u5982\u8fd4\u56de\u6307\u5411\u6808\u5185\u5b58\u7684\u6307\u9488\u5c31\u662f\u91ce\u6307\u9488\u3002 \u6307\u9488\u548c\u5f15\u7528 \u6307\u9488\u662f\u4e00\u4e2a\u53d8\u91cf\uff0c\u4ed6\u7684\u5185\u5bb9\u662f\u6240\u6307\u5411\u5185\u5b58\u7684\u5730\u5740\uff1b\u5f15\u7528\u662f\u67d0\u5757\u5185\u5b58\u7684\u522b\u540d\u3002 Sizeof \u6307\u9488 :\u5f97\u5230\u7684\u662f\u6307\u9488\u672c\u8eab\u7684\u5927\u5c0f\uff1b Sizeof \u5f15\u7528 \uff1a\u6240\u6307\u5411\u7684\u53d8\u91cf(\u5bf9\u8c61)\u7684\u5927\u5c0f\u3002 \u6307\u9488\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u5f15\u7528\u4e0d\u53ef\u4e3a\u7a7a\uff1b\u6307\u9488\u89c1\u5f02\u601d\u8fc1\uff0c\u5f15\u7528\u4ece\u4e00\u800c\u7ec8(\u53ea\u5728\u5b9a\u4e49\u65f6\u88ab\u521d\u59cb\u5316\u4e00\u6b21,\u4e4b\u540e\u4e0d\u53ef\u53d8)\uff1b","title":"c++\u9762\u8bd5\u5e38\u95ee\u9898\u76ee"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/","text":"opencv\u4e0e\u56fe\u50cf\u5904\u7406\u57fa\u7840 \u00b6 code \u94fe\u63a5 \u76ee\u6807\u68c0\u6d4b\u635f\u5931\u51fd\u6570 \u00b6 Smooth L1 Loss IoU Loss GIoU Loss DIoU Loss CIoU Loss Smooth L1 Loss \u7f3a\u70b9 \u8fd9\u91cc\u5148\u6c42\u51fa\u56db\u4e2a\u70b9\u7684loss\uff0c\u518d\u76f8\u52a0\uff0c\u524d\u63d0\u5047\u8bbe4\u4e2a\u70b9\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f46\u5b9e\u9645\u56db\u4e2a\u70b9\u662f\u76f8\u5173\u8054\u7684 \u5b9e\u9645\u8bc4\u4ef7\u6846\u68c0\u6d4b\u7684\u6307\u6807\u662f\u4f7f\u7528 IOU \uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u5f88\u53ef\u80fd\u591a\u4e2a\u68c0\u6d4b\u6846IOU\u5dee\u5f02\u5f88\u5927\uff0c\u4f46 smooth l1 loss \u76f8\u540c\u3002 def smoothL1Loss ( predict_box , gt_box , reduction = \"mean\" ): ''' predict_box:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] gt_box:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] th: float reduction:\"mean\"or\"sum\" return: loss ''' # \u8ba1\u7b97\u5750\u6807\u5dee x_diff = torch . abs ( predict_box - gt_box ) # \u5176\u5b9e\u5c31\u662f\u8ba1\u7b97\u4e24\u6846\u5404\u81ea\u4e24\u70b9\u5bf9\u5e94\u7684\u5dee\u503c\uff0c\u56db\u4e2a\u503c # torch.where(condition,x,y) -> True:x,False:y loss = torch . where ( x_diff < 1.0 , 0.5 * x_diff * x_diff , x_diff - 0.5 ) if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( loss ) if reduction == \"mean\" else torch . sum ( loss ) return loss # \u5e38\u7528\u5b98\u65b9\u5b9e\u73b0 import torch.nn.functional as F F . smooth_l1_loss ( predict_box , gt_box , reduction = 'sum' ) IOU Loss \u7f3a\u70b9 \u5f53\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u4e0d\u76f8\u4ea4\u65f6\uff0c IoU(A,B)=0 \u65f6\uff0c\u4e0d\u80fd\u53cd\u6620A,B\u8ddd\u79bb\u7684\u8fdc\u8fd1 (\u5f88\u8fd1\u7684\u65e0\u4ea4\u96c6\u6846\u548c\u5f88\u8fdc\u7684\u65e0\u4ea4\u96c6\u6846\u7684\u8f93\u51fa\u4e00\u6837) \uff0c\u6b64\u65f6\u635f\u5931\u51fd\u6570\u4e0d\u53ef\u5bfc\uff0c IoU Loss \u65e0\u6cd5\u4f18\u5316\u4e24\u4e2a\u6846\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u3002 YOLO \u4e2d\u53ef\u80fd\u51fa\u73b0:\u6309\u7167 GT \u662f\u5426\u5728 cell \u5224\u65ad\u5f53\u524d bbox \u662f\u5426\u9700\u8981\u56de\u5f52 two stage \u4e0d\u4e00\u822c\u4e0d\u4f1a\u51fa\u73b0\uff0c\u56e0\u4e3a\u90fd\u4f1a\u6709\u4e00\u4e2a IOU>=0.5 \u7684\u7b5b\u9009\uff0c\u4e0d\u4f1a\u5bf9\u65e0\u4ea4\u96c6\u7684\u6846\u8fdb\u884c\u56de\u5f52\u3002 \u5047\u8bbe\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u7684\u5927\u5c0f\u90fd\u786e\u5b9a\uff0c\u53ea\u8981\u4e24\u4e2a\u6846\u7684\u76f8\u4ea4\u503c\u662f\u786e\u5b9a\u7684\uff0c\u5176IoU\u503c\u662f\u76f8\u540c\u65f6\uff0cIoU\u503c\u4e0d\u80fd\u53cd\u6620\u4e24\u4e2a\u6846\u662f\u5982\u4f55\u76f8\u4ea4\u7684\u3002 # IOU Loss = -ln(IOU) def iouLoss ( bboxes1 , bboxes2 , eps = 1e-6 , reduction = 'mean' ): ''' bboxes1:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # predict_box bboxes2:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # gt_box th: float reduction:\"mean\"or\"sum\" return: loss ''' rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] ious = torch . zeros (( rows , cols )) if rows * cols == 0 : # \u8be5\u7c7b\u65e0gtbox\u6216\u8005\u65e0anchor box return ious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: # \u9884\u6d4b\u6846\u8fc7\u591a bboxes1 , bboxes2 = bboxes2 , bboxes1 ious = torch . zeros (( cols , rows )) exchange = True area1 = ( bboxes1 [:, 2 ] - bboxes1 [:, 0 ]) * ( bboxes1 [:, 3 ] - bboxes1 [:, 1 ]) # \u9884\u6d4b\u6846\u9762\u79ef area2 = ( bboxes2 [:, 2 ] - bboxes2 [:, 0 ]) * ( bboxes2 [:, 3 ] - bboxes2 [:, 1 ]) # \u771f\u5b9e\u6846\u9762\u79ef inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) # eps\u4fdd\u8bc1\u5206\u5b50\u4e0d\u4e3a0 inter_area = inter [:, 0 ] * inter [:, 1 ] union = area1 + area2 - inter_area ious = inter_area / union ious = torch . clamp ( ious , min = 0 , max = 1.0 ) # \u9650\u5b9a\u8303\u56f4 0~1 if exchange : ious = ious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) # loss = -ln(ious) loss = torch . mean ( - ious . log ()) if reduction == \"mean\" else torch . sum ( - ious . log ()) # loss = 1.0 - ious # loss = torch.mean(1.0 - ious) if reduction == \"mean\" else torch.sum(1.0 - ious) return loss GIou Loss \u7f3a\u70b9:\u5f53\u76ee\u6807\u6846\u5b8c\u5168\u5305\u88f9\u9884\u6d4b\u6846\u7684\u65f6\u5019\uff0c IoU \u548c GIoU \u7684\u503c\u90fd\u4e00\u6837\uff0c\u6b64\u65f6 GIoU \u9000\u5316\u4e3a IoU , \u65e0\u6cd5\u533a\u5206\u5176\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb def giouLoss ( bboxes1 , bboxes2 , eps = 1e-6 , reduction = 'mean' ): ''' bboxes1:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # predict_box bboxes2:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # gt_box th: float reduction:\"mean\"or\"sum\" return: loss ''' rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] ious = torch . zeros (( rows , cols )) if rows * cols == 0 : return ious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: bboxes1 , bboxes2 = bboxes2 , bboxes1 ious = torch . zeros (( cols , rows )) exchange = True area1 = ( bboxes1 [:, 2 ] - bboxes1 [:, 0 ]) * ( bboxes1 [:, 3 ] - bboxes1 [:, 1 ]) area2 = ( bboxes2 [:, 2 ] - bboxes2 [:, 0 ]) * ( bboxes2 [:, 3 ] - bboxes2 [:, 1 ]) inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) # out\u662f\u6700\u5c0f\u5916\u63a5\u77e9\u5f62 out_max_xy = torch . max ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) out_min_xy = torch . min ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) inter_area = inter [:, 0 ] * inter [:, 1 ] outer = torch . clamp (( out_max_xy - out_min_xy ), min = eps ) outer_area = outer [:, 0 ] * outer [:, 1 ] union = area1 + area2 - inter_area closure = outer_area gious = inter_area / union - ( closure - union ) / closure gious = torch . clamp ( gious , min =- 1.0 , max = 1.0 ) if exchange : gious = gious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( 1.0 - gious ) if reduction == \"mean\" else torch . sum ( 1.0 - gious ) return loss DIou Loss \u4f18\u70b9 \u5f53\u76ee\u6807\u6846\u4e0d\u91cd\u53e0\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u4e3a\u8fb9\u754c\u6846\u63d0\u4f9b\u68af\u5ea6 DIoU loss \u53ef\u4ee5\u76f4\u63a5\u6700\u5c0f\u5316\u4e24\u4e2a\u76ee\u6807\u6846\u7684\u8ddd\u79bb\uff0c\u6536\u655b\u66f4\u5feb( GIOU \u4f18\u5316\u4e24\u6846\u7684IOU,\u6162) \u5bf9\u4e8e\u76ee\u6807\u6846\u5305\u88f9\u9884\u6d4b\u6846\u7684\u8fd9\u79cd\u60c5\u51b5\uff0c DIoU Loss \u53ef\u4ee5\u6536\u655b\u7684\u5f88\u5feb\uff0c\u800c GIoU Loss \u6b64\u65f6\u9000\u5316\u4e3a IoU Loss \u6536\u655b\u901f\u5ea6\u8f83\u6162 def diouLoss ( bboxes1 , bboxes2 , eps = 1e-6 , reduction = 'mean' ): ''' bboxes1:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # predict_box bboxes2:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # gt_box th: float reduction:\"mean\"or\"sum\" return: loss ''' rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] dious = torch . zeros (( rows , cols )) if rows * cols == 0 : return dious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: bboxes1 , bboxes2 = bboxes2 , bboxes1 dious = torch . zeros (( cols , rows )) exchange = True w1 = bboxes1 [:, 2 ] - bboxes1 [:, 0 ] h1 = bboxes1 [:, 3 ] - bboxes1 [:, 1 ] w2 = bboxes2 [:, 2 ] - bboxes2 [:, 0 ] h2 = bboxes2 [:, 3 ] - bboxes2 [:, 1 ] area1 = w1 * h1 area2 = w2 * h2 center_x1 = ( bboxes1 [:, 2 ] + bboxes1 [:, 0 ]) / 2 center_y1 = ( bboxes1 [:, 3 ] + bboxes1 [:, 1 ]) / 2 center_x2 = ( bboxes2 [:, 2 ] + bboxes2 [:, 0 ]) / 2 center_y2 = ( bboxes2 [:, 3 ] + bboxes2 [:, 1 ]) / 2 inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) out_max_xy = torch . max ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) out_min_xy = torch . min ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) inter_area = inter [:, 0 ] * inter [:, 1 ] inter_diag = ( center_x2 - center_x1 ) ** 2 + ( center_y2 - center_y1 ) ** 2 outer = torch . clamp (( out_max_xy - out_min_xy ), min = 0 ) outer_diag = ( outer [:, 0 ] ** 2 ) + ( outer [:, 1 ] ** 2 ) union = area1 + area2 - inter_area dious = inter_area / union - ( inter_diag ) / outer_diag dious = torch . clamp ( dious , min =- 1.0 , max = 1.0 ) if exchange : dious = dious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( 1.0 - dious ) if reduction == \"mean\" else torch . sum ( 1.0 - dious ) return loss Ciou Loss def bbox_overlaps_ciou ( bboxes1 , bboxes2 ): rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] cious = torch . zeros (( rows , cols )) if rows * cols == 0 : return cious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: bboxes1 , bboxes2 = bboxes2 , bboxes1 cious = torch . zeros (( cols , rows )) exchange = True w1 = bboxes1 [:, 2 ] - bboxes1 [:, 0 ] h1 = bboxes1 [:, 3 ] - bboxes1 [:, 1 ] w2 = bboxes2 [:, 2 ] - bboxes2 [:, 0 ] h2 = bboxes2 [:, 3 ] - bboxes2 [:, 1 ] area1 = w1 * h1 area2 = w2 * h2 center_x1 = ( bboxes1 [:, 2 ] + bboxes1 [:, 0 ]) / 2 center_y1 = ( bboxes1 [:, 3 ] + bboxes1 [:, 1 ]) / 2 center_x2 = ( bboxes2 [:, 2 ] + bboxes2 [:, 0 ]) / 2 center_y2 = ( bboxes2 [:, 3 ] + bboxes2 [:, 1 ]) / 2 inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) out_max_xy = torch . max ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) out_min_xy = torch . min ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) inter_area = inter [:, 0 ] * inter [:, 1 ] inter_diag = ( center_x2 - center_x1 ) ** 2 + ( center_y2 - center_y1 ) ** 2 outer = torch . clamp (( out_max_xy - out_min_xy ), min = 0 ) outer_diag = ( outer [:, 0 ] ** 2 ) + ( outer [:, 1 ] ** 2 ) union = area1 + area2 - inter_area u = ( inter_diag ) / outer_diag iou = inter_area / union v = ( 4 / ( math . pi ** 2 )) * torch . pow (( torch . atan ( w2 / h2 ) - torch . atan ( w1 / h1 )), 2 ) with torch . no_grad (): S = 1 - iou alpha = v / ( S + v ) cious = iou - ( u + alpha * v ) cious = torch . clamp ( cious , min =- 1.0 , max = 1.0 ) if exchange : cious = cious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( 1.0 - cious ) if reduction == \"mean\" else torch . sum ( 1.0 - cious ) return loss NMS\u53ca\u5176\u53d8\u4f53 \u00b6 nms DIoU-NMS nms def nms ( boxes , scores , overlap = 0.5 , top_k = 200 ): \"\"\"Apply non-maximum suppression at test time to avoid detecting too many overlapping bounding boxes for a given object. Args: boxes: (tensor) The location preds for the img, Shape: [num_priors,4]. scores: (tensor) The class predscores for the img, Shape:[num_priors]. overlap: (float) The overlap thresh for suppressing unnecessary boxes. top_k: (int) The Maximum number of box preds to consider. Return: The indices of the kept boxes with respect to num_priors. \"\"\" keep = scores . new ( scores . size ( 0 )) . zero_ () . long () # \u7528\u6765\u5b58\u50a8\u4fdd\u7559\u4e0b\u7684\u6846index if boxes . numel () == 0 : return keep x1 = boxes [:, 0 ] y1 = boxes [:, 1 ] x2 = boxes [:, 2 ] y2 = boxes [:, 3 ] area = torch . mul ( x2 - x1 , y2 - y1 ) # \u5bf9\u5e94\u4f4d\u7f6e\u76f8\u4e58 v , idx = scores . sort ( 0 ) # \u4e0a\u5347\u6392\u5e8f\uff0c\u8fd4\u56devalues,indexs # I = I[v >= 0.01] idx = idx [ - top_k :] # \u4e0a\u5347\u6392\u5e8f\u7d22\u5f15\uff0c\u53d6topk\u4e2a\uff0c\u8fd9k\u4e2a\u6846\u7528\u6765\u904d\u5386\u6c42\u89e3 xx1 = boxes . new () # \u590d\u5236boxes\u7684\u4e00\u5207\u5c5e\u6027\uff0c\u4f46value=[] yy1 = boxes . new () xx2 = boxes . new () yy2 = boxes . new () w = boxes . new () h = boxes . new () # keep = torch.Tensor() count = 0 while idx . numel () > 0 : # torch.numel() \u8fd4\u56detensor\u53d8\u91cf\u5185\u6240\u6709\u5143\u7d20\u4e2a\u6570 i = idx [ - 1 ] # \u53d6\u6700\u5927\u503c\u7684\u7d22\u5f15 # keep.append(i) keep [ count ] = i # \u4fdd\u7559score\u6700\u5927\u7684\u6846\u7d22\u5f15 count += 1 if idx . size ( 0 ) == 1 : break idx = idx [: - 1 ] # \u904d\u5386\u7684\u65f6\u5019\u6392\u9664\u6700\u5927score\u7684\u6846 # torch.index_select(input,dim,index,out=None) # \u6cbf\u7740\u6307\u5b9a\u7ef4\u5ea6\u5bf9\u8f93\u5165\u8fdb\u884c\u5207\u7247\uff0c\u53d6index\u4e2d\u7684\u6307\u5b9a\u7684\u76f8\u5e94\u9879\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5f20\u91cf(\u4e0d\u5171\u4eab\u5185\u5b58\u7a7a\u95f4) # input(tensor)->\u8f93\u5165\u5f20\u91cf;dim(int:0/1)->\u7d22\u5f15\u7684\u8f74;index(LongTensor)->\u5305\u542b\u7d22\u5f15\u4e0b\u6807\u7684\u4e00\u7ef4\u5f20\u91cf;out(Tensor)->\u76ee\u6807\u5f20\u91cf torch . index_select ( x1 , 0 , idx , out = xx1 ) # \u6839\u636eidx\u7d22\u5f15\uff0c\u53bb\u9664x1\u7684\u503c\uff0c\u653e\u5230xx1\u91cc\u9762 torch . index_select ( y1 , 0 , idx , out = yy1 ) torch . index_select ( x2 , 0 , idx , out = xx2 ) torch . index_select ( y2 , 0 , idx , out = yy2 ) # store element-wise max with next highest score xx1 = torch . clamp ( xx1 , min = x1 [ i ]) yy1 = torch . clamp ( yy1 , min = y1 [ i ]) xx2 = torch . clamp ( xx2 , max = x2 [ i ]) yy2 = torch . clamp ( yy2 , max = y2 [ i ]) w . resize_as_ ( xx2 ) h . resize_as_ ( yy2 ) w = xx2 - xx1 h = yy2 - yy1 # check sizes of xx1 and xx2.. after each iteration w = torch . clamp ( w , min = 0.0 ) h = torch . clamp ( h , min = 0.0 ) inter = w * h # IoU = i / (area(a) + area(b) - i) rem_areas = torch . index_select ( area , 0 , idx ) # load remaining areas) union = ( rem_areas - inter ) + area [ i ] IoU = inter / union # store result in iou # keep only elements with an IoU <= overlap idx = idx [ IoU . le ( overlap )] # IoU.le(val) \u8fd4\u56de\u7684\u662fTrue/False\u7ec4\u6210\u7684\u5411\u91cf return keep , count # \u4f7f\u7528 ids , count = nms ( ... ) torch . cat (( scores [ ids [: count ]] . unsqueeze ( 1 ), bboxes [ ids [: count ]]), 1 ) DIoU-NMS def diounms ( boxes , scores , overlap = 0.5 , top_k = 200 , beta1 = 1.0 ): \"\"\"Apply DIoU-NMS at test time to avoid detecting too many overlapping bounding boxes for a given object. Args: boxes: (tensor) The location preds for the img, Shape: [num_priors,4]. scores: (tensor) The class predscores for the img, Shape:[num_priors]. overlap: (float) The overlap thresh for suppressing unnecessary boxes. top_k: (int) The Maximum number of box preds to consider. beta1: (float) DIoU=IoU-R_DIoU^{beta1}. Return: The indices of the kept boxes with respect to num_priors. \"\"\" keep = scores . new ( scores . size ( 0 )) . zero_ () . long () if boxes . numel () == 0 : return keep x1 = boxes [:, 0 ] y1 = boxes [:, 1 ] x2 = boxes [:, 2 ] y2 = boxes [:, 3 ] area = torch . mul ( x2 - x1 , y2 - y1 ) v , idx = scores . sort ( 0 ) # sort in ascending order # I = I[v >= 0.01] idx = idx [ - top_k :] # indices of the top-k largest vals xx1 = boxes . new () yy1 = boxes . new () xx2 = boxes . new () yy2 = boxes . new () w = boxes . new () h = boxes . new () # keep = torch.Tensor() count = 0 while idx . numel () > 0 : i = idx [ - 1 ] # index of current largest val # keep.append(i) keep [ count ] = i count += 1 if idx . size ( 0 ) == 1 : break idx = idx [: - 1 ] # remove kept element from view # load bboxes of next highest vals torch . index_select ( x1 , 0 , idx , out = xx1 ) torch . index_select ( y1 , 0 , idx , out = yy1 ) torch . index_select ( x2 , 0 , idx , out = xx2 ) torch . index_select ( y2 , 0 , idx , out = yy2 ) # store element-wise max with next highest score inx1 = torch . clamp ( xx1 , min = x1 [ i ]) iny1 = torch . clamp ( yy1 , min = y1 [ i ]) inx2 = torch . clamp ( xx2 , max = x2 [ i ]) iny2 = torch . clamp ( yy2 , max = y2 [ i ]) center_x1 = ( x1 [ i ] + x2 [ i ]) / 2 center_y1 = ( y1 [ i ] + y2 [ i ]) / 2 center_x2 = ( xx1 + xx2 ) / 2 center_y2 = ( yy1 + yy2 ) / 2 d = ( center_x1 - center_x2 ) ** 2 + ( center_y1 - center_y2 ) ** 2 cx1 = torch . clamp ( xx1 , max = x1 [ i ]) cy1 = torch . clamp ( yy1 , max = y1 [ i ]) cx2 = torch . clamp ( xx2 , min = x2 [ i ]) cy2 = torch . clamp ( yy2 , min = y2 [ i ]) c = ( cx2 - cx1 ) ** 2 + ( cy2 - cy1 ) ** 2 u = d / c w . resize_as_ ( xx2 ) h . resize_as_ ( yy2 ) w = inx2 - inx1 h = iny2 - iny1 # check sizes of xx1 and xx2.. after each iteration w = torch . clamp ( w , min = 0.0 ) h = torch . clamp ( h , min = 0.0 ) inter = w * h # IoU = i / (area(a) + area(b) - i) rem_areas = torch . index_select ( area , 0 , idx ) # load remaining areas) union = ( rem_areas - inter ) + area [ i ] IoU = inter / union - u ** beta1 # store result in diou # keep only elements with an IoU <= overlap idx = idx [ IoU . le ( overlap )] return keep , count \u5373\u63d2\u5373\u7528\u6a21\u5757 \u00b6 \u4ee3\u7801\u6301\u7eed\u66f4\u65b0 \u5373\u63d2\u5373\u7528\u6a21\u5757\u4e00\u822c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u7528\u4e8e\u53d6\u4ee3\u666e\u901a\u7684\u5377\u79ef\u7ed3\u6784\uff0c\u6216\u8005\u76f4\u63a5\u63d2\u5165\u7f51\u7edc\u7ed3\u6784\u4e2d\uff0c\u7528\u7684\u597d\u6709\u5947\u6548\uff0c\u5c31\u770b\u4f60\u4f1a\u7528\u4e0d\u4f1a\u7528\uff0c\u5177\u4f53\u63d2\u5165\u4ec0\u4e48\u4f4d\u7f6e\u6700\u597d\u770b\u4e00\u4e0b\u8bba\u6587\uff0c\u4e00\u822c\u800c\u8a00\u5e38\u63d2\u5165\u56db\u4e2a\u4f4d\u7f6e\u3002 \u74f6\u9888\u5c42\uff1a\u6bd4\u5982 ResNet\uff0cDenseNet \u7684\u74f6\u9888\u5c42\u3002 \u4e0a\u91c7\u6837\u5c42\uff1a\u6bd4\u5982 FPN \u5206\u652f\uff0cAttention UNet\u3002 \u9aa8\u5e72\u7f51\u7edc\u6700\u540e\u4e00\u5c42\uff1a\u6bd4\u5982 SPP, ASPP \u7b49 \u6240\u6709\u7684 3x3 \u5377\u79ef\uff1a\u6bd4\u5982\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7b49 \u6ce8\u610f\u529b\u6a21\u5757 code AFF(\u6ce8\u610f\u529b**\u7279\u5f81\u878d\u5408**:\u6027\u80fd\u4f18\u4e8eSKNet\u3001SENet) SENet SKNet(SENet\u7684\u6539\u8fdb) scSE(SENet\u7684\u6539\u8fdb,\u5206\u5272\u7f51\u7edc\u5e38\u7528) Non-Local Net(\u8ba1\u7b97\u91cf\u8fc7\u5927,\u901a\u7528,\u89c6\u9891\u5206\u7c7b\u6548\u679c\u66f4\u597d) GCNet(\u89e3\u51b3Non-Local Net\u8ba1\u7b97\u91cf\u8fc7\u5927\u95ee\u9898:Non-Local Net+SENet\u4f18\u70b9) CCNet(Non-Local Net\u53d1\u5c55\u5f97\u5230\uff0c\u8bed\u4e49\u5206\u5272\u5e38\u7528) CBAM(Faster-Rcnn\u4e24\u4e2a\u70b9\u63d0\u5347,\u901a\u9053\u7a7a\u95f4\u4e32\u8054) BAM(CBAM\u540c\u4f5c\u8005,\u901a\u9053\u7a7a\u95f4\u5e76\u8054) SplitAttention(ResNeSt = SENet + SKNet + ResNeXt\uff0c \u8bba\u6587 ) MS-CAM\u2192(AFF\u6a21\u5757/iAFF\u6a21\u5757) | code | \u8bba\u6587 | \u535a\u5ba2 \u4e00\u822c\u7684\u7279\u5f81\u878d\u5408(\u6765\u81ea\u4e0d\u540c\u5c42\u6216\u5206\u652f\u7684\u7279\u5f81\u7684\u7ec4\u5408)\u901a\u5e38\u90fd\u662f\u901a\u8fc7\u7b80\u5355\u7684\u6c42\u548c\u6216\u4e32\u8054\u5b9e\u73b0\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u6700\u4f73\u9009\u62e9\uff0c\u672c\u7bc7\u5254\u9664\u6ce8\u610f\u529b\u7279\u5f81\u878d\u5408\uff0c\u9002\u7528\u4e8e\u5927\u591a\u6570\u573a\u666f\uff0c\u6bd4\u5982resnet/inception\u7b49\u5c42\u7684\u7279\u5f81\u878d\u5408\u3002\u5c3a\u5ea6\u4e0d\u540c\u5982\u4f55\u878d\u5408\uff1a\u63d0\u51fa\u4e5f\u4e86\u4e00\u4e2a\u591a\u5c3a\u5ea6\u7684\u901a\u9053\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u89e3\u51b3\u4e86\u5728\u878d\u5408\u4e0d\u540c\u5c3a\u5ea6\u7684\u7279\u5f81\u65f6\u51fa\u73b0\u7684\u95ee\u9898\u3002\u540c\u65f6\u8fd8\u901a\u8fc7\u6dfb\u52a0\u53e6\u4e00\u4e2a\u6ce8\u610f\u529b\u7ea7\u522b\uff08\u79f0\u4e3a\u8fed\u4ee3\u6ce8\u610f\u529b\u7279\u5f81\u878d\u5408\uff09\u6765\u7f13\u89e3\u7279\u5f81\u56fe\u7684\u521d\u59cb\u96c6\u6210\u7684\u74f6\u9888\u3002 Multi-Scale Channel Attention Module(MS-CAM) :\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u6539\u53d8\u7a7a\u95f4\u6c60\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u5c3a\u5ea6\u4e0a\u5b9e\u73b0\u901a\u9053\u5173\u6ce8;\u9009\u62e9\u9010\u70b9\u5377\u79ef(PWConv)\u4f5c\u4e3a\u901a\u9053\u4e0a\u4e0b\u6587\u878d\u5408\u5668\uff0c\u5b83\u53ea\u5229\u7528\u6bcf\u4e2a\u7a7a\u95f4\u4f4d\u7f6e\u7684\u70b9\u5411\u901a\u9053\u878d\u5408\u3002 class ResGlobLocaChaFuse ( HybridBlock ): def __init__ ( self , channels = 64 ): super ( ResGlobLocaChaFuse , self ) . __init__ () with self . name_scope (): self . local_att = nn . HybridSequential ( prefix = 'local_att' ) self . local_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . local_att . add ( nn . BatchNorm ()) self . global_att = nn . HybridSequential ( prefix = 'global_att' ) self . global_att . add ( nn . GlobalAvgPool2D ()) self . global_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . global_att . add ( nn . BatchNorm ()) self . sig = nn . Activation ( 'sigmoid' ) def hybrid_forward ( self , F , x , residual ): xa = x + residual xl = self . local_att ( xa ) xg = self . global_att ( xa ) xlg = F . broadcast_add ( xl , xg ) wei = self . sig ( xlg ) xo = 2 * F . broadcast_mul ( x , wei ) + 2 * F . broadcast_mul ( residual , 1 - wei ) return xo AFF\u6a21\u5757 :\u57fa\u4e8e\u591a\u5c3a\u5ea6\u4fe1\u9053\u7684\u6ce8\u610f\u6a21\u5757M\uff0cAttentional Feature Fusion (AFF) \u53ef\u4ee5\u88ab\u8868\u8fbe\u4e3a class AXYforXplusYAddFuse ( HybridBlock ): def __init__ ( self , channels = 64 ): super ( AXYforXplusYAddFuse , self ) . __init__ () with self . name_scope (): self . local_att = nn . HybridSequential ( prefix = 'local_att' ) self . local_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . local_att . add ( nn . BatchNorm ()) self . global_att = nn . HybridSequential ( prefix = 'global_att' ) self . global_att . add ( nn . GlobalAvgPool2D ()) self . global_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . global_att . add ( nn . BatchNorm ()) self . sig = nn . Activation ( 'sigmoid' ) def hybrid_forward ( self , F , x , residual ): xi = x + residual xl = self . local_att ( xi ) xg = self . global_att ( xi ) xlg = F . broadcast_add ( xl , xg ) wei = self . sig ( xlg ) xo = F . broadcast_mul ( wei , residual ) + x return xo iAFF\u6a21\u5757 :\u5b8c\u5168\u4e0a\u4e0b\u6587\u611f\u77e5\u65b9\u6cd5\u6709\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u95ee\u9898\uff0c\u5373\u5982\u4f55\u521d\u59cb\u5730\u96c6\u6210\u8f93\u5165\u7279\u6027\u3002\u521d\u59cb\u878d\u5408\u8d28\u91cf\u4f5c\u4e3a\u6ce8\u610f\u529b\u6a21\u5757\u7684\u8f93\u5165\u4f1a\u5bf9\u6700\u7ec8\u878d\u5408\u6743\u91cd\u4ea7\u751f\u5f71\u54cd\u3002\u7531\u4e8e\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u7279\u5f81\u878d\u5408\u95ee\u9898\uff0c\u4e00\u79cd\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u53e6\u4e00\u4e2aattention\u6a21\u5757\u6765\u878d\u5408\u8f93\u5165\u7684\u7279\u5f81\uff0c\u5373iterative Attentional Feature Fusion (iAFF)\uff1a class AXYforXYAddFuse ( HybridBlock ): def __init__ ( self , channels = 64 ): super ( AXYforXYAddFuse , self ) . __init__ () with self . name_scope (): self . local_att = nn . HybridSequential ( prefix = 'local_att' ) self . local_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . local_att . add ( nn . BatchNorm ()) self . global_att = nn . HybridSequential ( prefix = 'global_att' ) self . global_att . add ( nn . GlobalAvgPool2D ()) self . global_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . global_att . add ( nn . BatchNorm ()) self . sig = nn . Activation ( 'sigmoid' ) def hybrid_forward ( self , F , x , residual ): xi = x + residual xl = self . local_att ( xi ) xg = self . global_att ( xi ) xlg = F . broadcast_add ( xl , xg ) wei = self . sig ( xlg ) xo = F . broadcast_mul ( wei , xi ) return xo SENet | \u8bba\u6587 \u5c06\u5168\u5c40\u7a7a\u95f4\u4fe1\u606f\u538b\u7f29\u5230\u901a\u9053\u63cf\u8ff0\u4e2d\uff0c\u4ee5\u6355\u83b7\u4e0e\u901a\u9053\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 Ftr :\u4f20\u7edf\u7684\u5377\u79ef\u7f51\u7edc, X \u4e0e U \u662f\u8f93\u5165\u548c\u8f93\u51fa\uff0c U \u4e4b\u540e\u662f\u65b0\u589e\u7684 \u4e0a\u534a\u90e8\u5206 F_sq(.) :\u5148\u5bf9 U \u505a\u4e2a Global Average Pooling \uff0c\u5373 Squeeze \u8fc7\u7a0b\uff0c\u8f93\u51fa 1x1xC 1x1 :\u56e0\u4e3a\u6700\u7ec8\u7684 scale \u662f\u5bf9\u6574\u4e2a\u901a\u9053\u4f5c\u7528\u7684\uff0c\u4f5c\u8005\u5229\u7528\u7684\u662f\u901a\u9053\u95f4\u7684\u76f8\u5173\u6027\u800c\u975e\u7a7a\u95f4\u5206\u5e03\u76f8\u5173\u6027\uff0c\u6240\u4ee5\u5c06\u7a7a\u95f4\u4e0a\u6240\u6709\u70b9\u7684\u4fe1\u606f\u90fd\u5e73\u5747\u6210\u4e86\u4e00\u4e2a\u503c\u3002 F_ex(.) :\u518d\u7ecf\u8fc7\u4e24\u7ea7\u5168\u8fde\u63a5,\u5c5e\u4e8e Excitation \u4e3a\u4ec0\u4e48\u7528\u5168\u8fde\u63a5\u5c42:\u4e3a\u4e86\u5229\u7528\u901a\u9053\u95f4\u7684\u76f8\u5173\u6027\u6765\u8bad\u7ec3\u51fa\u771f\u6b63\u7684scale\u3002 \u5982\u679c\u65e0\u5168\u8fde\u63a5\u5c42\uff0c\u90a3\u4e48\u4e0a\u9762\u5206\u652f\u6839\u672c\u65e0\u53cd\u5411\u8ba1\u7b97\u3001\u65e0\u8bad\u7ec3\u7684\u8fc7\u7a0b\uff0c\u5c31\u65e0\u6cd5\u57fa\u4e8e\u5168\u90e8\u6570\u636e\u96c6\u6765\u8bad\u7ec3\u5f97\u51fa\u901a\u9053\u589e\u5f3a\u3001\u51cf\u5f31\u7684\u89c4\u5f8b\u3002 \u6709\u4eba\u4f1a\u8bf4\u5377\u79ef\u8bad\u7ec3\u51fa\u7684\u6743\u503c\u5c31\u542b\u6709\u4e86scale\u7684\u6210\u5206\u5728\u91cc\u9762\uff0c\u4e5f\u5229\u7528\u4e86\u901a\u9053\u95f4\u7684\u76f8\u5173\u6027\uff0c\u4e3a\u5565\u8fd8\u8981\u591a\u4e2a SE Block \uff1f \u56e0\u4e3a\u8fd9\u79cd\u5377\u79ef\u6709\u7a7a\u95f4\u7684\u6210\u5206\u5728\u91cc\u9762\uff0c\u4e3a\u4e86\u6392\u9664\u7a7a\u95f4\u4e0a\u7684\u5e72\u6270\u5c31\u5f97\u5148\u7528GAP\u538b\u7f29\u6210\u4e00\u4e2a\u70b9\u540e\u518d\u4f5c\u5377\u79ef\uff0c\u538b\u7f29\u540e\u56e0\u4e3a\u6ca1\u6709\u4e86 Height \u3001 Width \u7684\u6210\u5206\uff0c\u8fd9\u79cd\u5377\u79ef\u5c31\u662f\u5168\u8fde\u63a5\u4e86\u3002 \u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u628a C \u4e2a\u901a\u9053\u538b\u7f29\u6210\u4e86 C/r \u4e2a\u901a\u9053\u6765\u964d\u4f4e\u8ba1\u7b97\u91cf\uff08\u540e\u9762\u8ddf\u4e86 RELU \uff09 r \u662f\u6307\u538b\u7f29\u7684\u6bd4\u4f8b\u3002\u4f5c\u8005\u5c1d\u8bd5\u4e86 r \u5728\u5404\u79cd\u53d6\u503c\u4e0b\u7684\u6027\u80fd \uff0c\u6700\u540e\u5f97\u51fa\u7ed3\u8bba r=16 \u65f6\u6574\u4f53\u6027\u80fd\u548c\u8ba1\u7b97\u91cf\u6700\u5e73\u8861\u3002 \u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u518d\u6062\u590d\u56de C \u4e2a\u901a\u9053\uff08\u540e\u9762\u8ddf\u4e86 Sigmoid \uff09 \u6700\u540e\u7528 sigmoid \u9650\u5236\u5230 [0,1] \u8303\u56f4 \u4e0b\u534a\u90e8\u5206 F_scale(.) :\u4e0a\u534a\u90e8\u5206\u8f93\u51fa\u4f5c\u4e3a scale \u4e58\u5230 U\u7684C\u4e2a\u901a\u9053 \u4e0a\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u7ea7\u7684\u8f93\u5165\u6570\u636e \u603b\u7ed3 \u539f\u7406 :\u901a\u8fc7\u63a7\u5236 scale \u7684\u5927\u5c0f\uff0c SENet \u628a\u91cd\u8981\u901a\u9053\u7684\u7279\u5f81\u5f3a\u5316\uff0c\u975e\u91cd\u8981\u901a\u9053\u7684\u7279\u5f81\u5f31\u5316\uff0c\u4ece\u800c\u8ba9\u63d0\u53d6\u7684\u7279\u5f81\u6307\u5411\u6027\u66f4\u5f3a\u3002 \u5e94\u7528 import torch.nn as nn class SELayer ( nn . Module ): def __init__ ( self , channel , reduction = 16 ): super ( SELayer , self ) . __init__ () self . avgpool = nn . AdaptiveAvgPool2d ( 1 ) #\u81ea\u9002\u5e94\u5e73\u5747\u6c60\u5316,\u901a\u9053\u6570\u4e0d\u6539\u53d8\uff0c\u53ea\u7ed9outsize=xx\u5373\u53ef->(b,n,1,1) self . fc = nn . Sequential ( nn . Linear ( channel , channel // reduction , bias = False ), nn . ReLU ( inplace = True ), nn . Linear ( channel // reduction , channel , bias = False ), nn . Sigmoid () ) def forward ( self , x ): b , c , h , w = x . size () y = self . avgpool ( x ) . view ( b , c ) # shape->(b,c) y = self . fc ( y ) . view ( b , c , 1 , 1 ) return x * y . expand_as ( x ) SkNet(SENet\u7684\u6539\u8fdb) | \u8bba\u6587 \u597d\u591a\u7f51\u7edc\u4f7f\u7528\u4e86\u5404\u79cd Trick \u964d\u4f4e\u8ba1\u7b97\u91cf\uff0c\u5982 ResNeXt \uff0c\u8ba1\u7b97\u91cf\u7684\u51cf\u5c11\uff0c\u7cbe\u5ea6\u5374\u7565\u6709\u63d0\u5347\u3002\u90a3\u4e48\u5982\u679c\u4e0d\u727a\u7272\u592a\u591a\u8ba1\u7b97\u91cf\u7cbe\u5ea6\u662f\u5426\u80fd\u518d\u63d0\u9ad8\u4e00\u70b9\uff1f\u6bd4\u5982\u4f7f\u7528\u5927\u7684 KerNel=5x5 \u7ed3\u5408\u73b0\u6709\u666e\u904d\u4f7f\u7528\u7684 Attention \u64cd\u4f5c \u52a0\u4e86\u4e0a\u9762\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u540e\uff0c\u663e\u7136\u8ba1\u7b97\u91cf\u4f1a\u4e0a\u53bb\uff0c\u4e8e\u662f\u4f5c\u8005\u518d\u52a0\u4e86\u4e00\u4e2a Group Convlution \u6765\u505a trade off Split :\u8f93\u5165 c*h*w \u7684\u7279\u5f81\u56fe\uff0c F^,F~ \u5747\u8868\u793a Group Convlution (\u5206\u7ec4\u5377\u79ef:\u51cf\u5c11\u8ba1\u7b97\u91cf)\uff0c\u4e24\u8005\u5377\u79ef\u6838\u5927\u5c0f\u4e0d\u540c\u76ee\u7684\u5728\u4e8e\u63d0\u5347\u7cbe\u5ea6\u3002 Fuse :\u901a\u8fc7 Split \u64cd\u4f5c\u5206\u6210\u4e24\u8def,\u5404\u8def\u8fdb\u884c\u4e00\u4e2a Sequeeze and Excitation block \u64cd\u4f5c\u3002 Select \uff1a\u628a Sequeeze and Excitation block \u6a21\u5757\u7684\u7ed3\u679c\u901a\u8fc7\u4e24\u4e2a softmax \u4ee5\u56de\u5f52\u51fa Channel \u4e4b\u95f4\u7684\u6743\u91cd\u4fe1\u606f\u3002\u7136\u540e\u628a\u8fd9\u4e2a\u6743\u91cd\u4fe1\u606f\u4e58\u5230 U^,U~ \u4e2d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a `soft attention \u3002\u6700\u540e\u628a\u4e24\u8def\u7684\u7279\u5f81\u56fe\u8fdb\u884c\u76f8\u52a0\u5f97\u5230\u8f93\u51fa\u7279\u5f81\u56fe V Select \u90e8\u5206\u7684 attention \u4e0d\u4ec5\u8003\u8651\u4e86 Channel \u4e4b\u95f4\u7684\u6743\u91cd\uff0c\u8fd8\u8003\u8651\u4e86\u4e24\u8def\u5377\u79ef\u7684\u6743\u91cd. import torch.nn as nn import torch class SKConv ( nn . Module ): def __init__ ( self , features , WH , M , G , r , stride = 1 , L = 32 ): \"\"\" Constructor Args: features: input channel dimensionality. WH: input spatial dimensionality, used for GAP kernel size. M: the number of branchs. G: num of convolution groups. r: the radio for compute d, the length of z. stride: stride, default 1. L: the minimum dim of the vector z in paper, default 32. \"\"\" super ( SKConv , self ) . __init__ () d = max ( int ( features / r ), L ) # \u83b7\u53d6Fuse\u7684z\u6a21\u5757fc\u7684\u538b\u7f29\u901a\u9053\uff0c\u5176\u5b9e\u5c31\u662f\u4e0a\u56fe\u7684z self . M = M # \u5206\u652f\u6570\u91cf self . features = features # \u8f93\u5165\u901a\u9053 self . convs = nn . ModuleList ([]) for i in range ( M ): # \u904d\u5386M\u4e2a\u5206\u652f\u4f9d\u6b21\u52a0\u5165\u5230self.convs\u4e2d\uff0c\u53ea\u4e0d\u8fc7\u6bcf\u4e2a\u5206\u652f\u7684kernel\u548cpadding\u4e0d\u540c self . convs . append ( nn . Sequential ( nn . Conv2d ( features , features , kernel_size = 3 + i * 2 , stride = stride , padding = 1 + i , groups = G ), # \u5206\u7ec4\u5377\u79ef,channel/groups,groups=feature\u4e3a\u6df1\u5ea6\u53ef\u5206\u79bb\u5377 nn . BatchNorm2d ( features ), nn . ReLU ( inplace = False ))) # self.gap = nn.AvgPool2d(int(WH/stride)) self . fc = nn . Linear ( features , d ) self . fcs = nn . ModuleList ([]) # M\u4e2a\u5206\u652f\u7684fc\u5217\u8868 for i in range ( M ): self . fcs . append ( nn . Linear ( d , features )) self . softmax = nn . Softmax ( dim = 1 ) def forward ( self , x ): for i , conv in enumerate ( self . convs ): # 3\u5206\u652f\u65f6\u662f\u56fe\u4e2d\u7684u1,u2,u3 fea = conv ( x ) . unsqueeze_ ( dim = 1 ) # torch.Size([b, 1, c, h, w]),\u6269\u5c55dim=1\u8fd9\u4e2a\u901a\u9053\u662f\u4e3a\u4e863\u5206\u652f\u7684concat if i == 0 : feas = fea else : feas = torch . cat ([ feas , fea ], dim = 1 ) fea_U = torch . sum ( feas , dim = 1 ) # fea_U.shape->[b,c,h,w],dim=1\u56e0\u4e3a\u76f8\u52a0\u540e\u6d88\u5931 # fea_U:\u662f\u4e0a\u56fe\u4e2d\u7b2c\u4e00\u4e2a+ # fea_s = self.gap(fea_U).squeeze_() fea_s = fea_U . mean ( - 1 ) . mean ( - 1 ) # \u6cbf\u7740H*W\u9762\u8fdb\u884c\u5e73\u5747\uff0c\u7c7b\u4f3cadaptivaAvgPool2d fea_s.shape:[b,c]\u3002h,w\u56e0\u4e3amean\u540e\u6d88\u5931 fea_z = self . fc ( fea_s ) # \u901a\u9053\u538b\u7f29:[b,c]->[b,z] for i , fc in enumerate ( self . fcs ): # \u653e\u5927\u901a\u9053:z->c\uff0c\u5e76\u4e14M\u4e2a\u5206\u652f\u5904\u7406 vector = fc ( fea_z ) . unsqueeze_ ( dim = 1 ) # [b,1,z] if i == 0 : attention_vectors = vector else : attention_vectors = torch . cat ([ attention_vectors , vector ], dim = 1 ) # attention_vectors.shape->[b,M,c] attention_vectors = self . softmax ( attention_vectors ) attention_vectors = attention_vectors . unsqueeze ( - 1 ) . unsqueeze ( - 1 ) # [b,M,c,1,1] fea_v = ( feas * attention_vectors ) . sum ( dim = 1 ) # \u4e0a\u56fe\u4e09\u6761\u8df3\u8dc3\u7ebf,M\u4e2a\u5206\u652f\u901a\u9053\u5404\u81ea\u76f8\u4e58\u5e76\u6c42\u548c return fea_v if __name__ == \"__main__\" : t = torch . ones (( 32 , 256 , 24 , 24 )) sk = SKConv ( 256 , WH = 1 , M = 2 , G = 1 , r = 2 ) out = sk ( t ) print ( out . shape ) # torch.Size([32, 256, 24, 24])\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u5927\u5c0f\u4e00\u6837 SCSE | \u8bba\u6587 scSE \u5206\u4e3a\u4e24\u4e2a\u6a21\u5757:\u4e00\u4e2a\u662f sSE \u548c cSE \u6a21\u5757\uff0c\u5206\u522b\u662f\u7a7a\u95f4\u6ce8\u610f\u529b\u548c\u901a\u9053\u6ce8\u610f\u529b\uff0c\u6700\u7ec8\u4ee5\u76f8\u52a0\u7684\u65b9\u5f0f\u878d\u5408\u3002\u8bba\u6587\u4e2d\u53ea\u5c06\u5176\u4f7f\u7528\u5728**\u5206\u5272\u6a21\u578b**(\u5bf9\u8bed\u4e49\u5206\u5272\u51c6\u786e\u7387\u63d0\u5347\u8f83\u5927\u800c\u4e14\u4f7f\u5206\u5272\u8fb9\u754c\u66f4\u5e73\u6ed1)\u4e2d\uff0c\u5728\u5f88\u591a\u56fe\u50cf\u5206\u5272\u6bd4\u8d5b\u4e2d\u90fd\u6709\u7528\u5230\u8fd9\u4e2a\u6a21\u5757\u4f5c\u4e3a trick(\u6bd4\u5982 UNet ,\u53ef\u4ee5\u653e\u5728\u6bcf\u4e2a\u5377\u79ef\u5c42\u540e\u9762)\u3002 cSE(\u901a\u9053\u6ce8\u610f\u529b) \u5c06 feature map \u901a\u8fc7 global average pooling \u65b9\u6cd5\u4ece [C, H, W] \u53d8\u4e3a [C, 1, 1] \u7136\u540e\u4f7f\u7528\u4e24\u4e2a 1\u00d71 \u5377\u79ef\u8fdb\u884c\u4fe1\u606f\u7684\u5904\u7406\uff0c\u6700\u7ec8\u5f97\u5230C\u7ef4\u7684\u5411\u91cf \u7136\u540e\u4f7f\u7528 sigmoid \u51fd\u6570\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u5f97\u5230\u5bf9\u5e94\u7684mask \u6700\u540e\u901a\u8fc7 channel-wise \u76f8\u4e58\uff0c\u5f97\u5230\u7ecf\u8fc7\u4fe1\u606f\u6821\u51c6\u8fc7\u7684 feature map sSE(\u7a7a\u95f4\u6ce8\u610f\u529b) \u76f4\u63a5\u5bf9 feature map \u4f7f\u7528 1\u00d71 \u5377\u79ef, \u4ece [C, H, W] \u53d8\u4e3a [1, H, W] \u7684features \u7136\u540e\u4f7f\u7528 sigmoid \u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230 spatial attention map \u7136\u540e\u76f4\u63a5\u65bd\u52a0\u5230\u539f\u59cbfeature map\u4e2d\uff0c\u5b8c\u6210\u7a7a\u95f4\u7684\u4fe1\u606f\u6821\u51c6 # \u8f93\u5165\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\u4e00\u6837 class cSE ( nn . Module ): def __init__ ( self , in_channels ): super () . __init__ () self . avgpool = nn . AdaptiveAvgPool2d ( 1 ) # gap->[b,c,1,1] self . Conv_Squeeze = nn . Conv2d ( in_channels , in_channels // 2 , kernel_size = 1 , bias = False ) self . Conv_Excitation = nn . Conv2d ( in_channels // 2 , in_channels , kernel_size = 1 , bias = False ) self . norm = nn . Sigmoid () def forward ( self , U ): z = self . avgpool ( U ) # shape: [b, c, h, w] to [b, c, 1, 1] z = self . Conv_Squeeze ( z ) # shape: [b, c/2, 1, 1] z = self . Conv_Excitation ( z ) # shape: [b, c, 1, 1] z = self . norm ( z ) # \u6fc0\u6d3b\u51fd\u6570z^\u7528sigmoid -> [b,c,1,1] return U * z . expand_as ( U ) # [b,c,h,w] # \u8f93\u5165\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\u4e00\u6837 class sSE ( nn . Module ): def __init__ ( self , in_channels ): super () . __init__ () self . Conv1x1 = nn . Conv2d ( in_channels , 1 , kernel_size = 1 , bias = False ) self . norm = nn . Sigmoid () def forward ( self , U ): q = self . Conv1x1 ( U ) # U:[b,c,h,w] to q:[b,1,h,w] q = self . norm ( q ) return U * q # [b,c,h,w] # \u8f93\u5165\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\u4e00\u6837 class csSE ( nn . Module ): def __init__ ( self , in_channels ): super () . __init__ () self . cSE = cSE ( in_channels ) self . sSE = sSE ( in_channels ) def forward ( self , U ): U_sse = self . sSE ( U ) U_cse = self . cSE ( U ) return U_cse + U_sse if __name__ == \"__main__\" : b , c , h , w = 10 , 3 , 64 , 64 in_tensor = torch . ones ( b , c , h , w ) cs_se = csSE ( c ) print ( \"in shape:\" , in_tensor . shape ) out_tensor = cs_se ( in_tensor ) print ( \"out shape:\" , out_tensor . shape ) Non-Local Net | \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2\u8be6\u89e3 NLNet \u4e3b\u8981\u501f\u9274\u4e86\u4f20\u7edf\u65b9\u6cd5\u4e2d\u7684\u975e\u5c40\u90e8\u5747\u503c\u6ee4\u6ce2\u8bbe\u8ba1\u4e86 Non-Local \u5168\u5c40\u6ce8\u610f\u529b\uff0c\u867d\u7136\u6548\u679c\u597d\uff0c \u4f46\u662f\u8ba1\u7b97\u91cf\u504f\u5927\uff0c\u5efa\u8bae\u4e0d\u8981\u5728\u5e95\u5c42\u7f51\u7edc\u4f7f\u7528\uff0c\u53ef\u4ee5\u9002\u5f53\u5728**\u9ad8\u5c42\u7f51\u7edc**\u4e2d\u4f7f\u7528\uff0c\u7ecf\u8fc7\u4f5c\u8005\u5b9e\u9a8c\uff0c\u8bc1\u660e\u4e86\u5176\u53ef\u4ee5\u5e94\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u3001\u76ee\u6807\u68c0\u6d4b\u3001\u76ee\u6807\u5206\u5272\u3001\u59ff\u6001\u8bc6\u522b\u7b49\u89c6\u89c9\u4efb\u52a1\u4e2d\uff0c\u5e76\u4e14\u6548\u679c\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u63d0\u5347\uff0c\u5728**\u89c6\u9891\u5206\u7c7b**\u4e0a\u6548\u679c\u5f88\u597d\uff0c\u5728\u89c6\u9891\u5206\u7c7b\u7684\u4efb\u52a1\u4e2d\u6548\u679c\u53ef\u89c2\u3002 # \u4ee3\u7801\u89c1\u535a\u5ba2\u8be6\u89e3 GCNet | \u8bba\u6587 | \u535a\u5ba2\u8be6\u89e3 GCNet \u4e3b\u8981\u9488\u5bf9 Non-Local \u8ba1\u7b97\u91cf\u8fc7\u5927\u7684\u95ee\u9898\u7ed3\u5408\u4e86\u63d0\u51fa\u4e86\u89e3\u51b3\u65b9\u6848,\u4f7f\u5176\u5373\u80fd\u591f\u50cfNLNet\u4e00\u6837\u6709\u6548\u7684\u5bf9\u5168\u5c40\u4e0a\u4e0b\u6587\u5efa\u6a21\uff0c\u53c8\u80fd\u591f\u50cfSENet\u4e00\u6837\u8f7b\u91cf\u3002 import torch from torch import nn class ContextBlock ( nn . Module ): def __init__ ( self , inplanes , ratio , pooling_type = 'att' , fusion_types = ( 'channel_add' , )): super ( ContextBlock , self ) . __init__ () valid_fusion_types = [ 'channel_add' , 'channel_mul' ] assert pooling_type in [ 'avg' , 'att' ] assert isinstance ( fusion_types , ( list , tuple )) assert all ([ f in valid_fusion_types for f in fusion_types ]) assert len ( fusion_types ) > 0 , 'at least one fusion should be used' self . inplanes = inplanes self . ratio = ratio self . planes = int ( inplanes * ratio ) self . pooling_type = pooling_type self . fusion_types = fusion_types if pooling_type == 'att' : self . conv_mask = nn . Conv2d ( inplanes , 1 , kernel_size = 1 ) self . softmax = nn . Softmax ( dim = 2 ) else : self . avg_pool = nn . AdaptiveAvgPool2d ( 1 ) if 'channel_add' in fusion_types : self . channel_add_conv = nn . Sequential ( nn . Conv2d ( self . inplanes , self . planes , kernel_size = 1 ), nn . LayerNorm ([ self . planes , 1 , 1 ]), nn . ReLU ( inplace = True ), # yapf: disable nn . Conv2d ( self . planes , self . inplanes , kernel_size = 1 )) else : self . channel_add_conv = None if 'channel_mul' in fusion_types : self . channel_mul_conv = nn . Sequential ( nn . Conv2d ( self . inplanes , self . planes , kernel_size = 1 ), nn . LayerNorm ([ self . planes , 1 , 1 ]), nn . ReLU ( inplace = True ), # yapf: disable nn . Conv2d ( self . planes , self . inplanes , kernel_size = 1 )) else : self . channel_mul_conv = None def spatial_pool ( self , x ): batch , channel , height , width = x . size () if self . pooling_type == 'att' : input_x = x # [N, C, H * W] input_x = input_x . view ( batch , channel , height * width ) # [N, 1, C, H * W] input_x = input_x . unsqueeze ( 1 ) # [N, 1, H, W] context_mask = self . conv_mask ( x ) # [N, 1, H * W] context_mask = context_mask . view ( batch , 1 , height * width ) # [N, 1, H * W] context_mask = self . softmax ( context_mask ) # [N, 1, H * W, 1] context_mask = context_mask . unsqueeze ( - 1 ) # [N, 1, C, 1] context = torch . matmul ( input_x , context_mask ) # [N, C, 1, 1] context = context . view ( batch , channel , 1 , 1 ) else : # [N, C, 1, 1] context = self . avg_pool ( x ) return context def forward ( self , x ): # [N, C, 1, 1] context = self . spatial_pool ( x ) out = x if self . channel_mul_conv is not None : # [N, C, 1, 1] channel_mul_term = torch . sigmoid ( self . channel_mul_conv ( context )) out = out * channel_mul_term if self . channel_add_conv is not None : # [N, C, 1, 1] channel_add_term = self . channel_add_conv ( context ) out = out + channel_add_term return out if __name__ == \"__main__\" : in_tensor = torch . ones (( 12 , 64 , 128 , 128 )) cb = ContextBlock ( inplanes = 64 , ratio = 1. / 16. , pooling_type = 'att' ) out_tensor = cb ( in_tensor ) print ( in_tensor . shape ) print ( out_tensor . shape ) CCNet | \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2\u8be6\u89e3 | \u4ee3\u7801\u7b80\u5355\u5b9e\u73b0 \u7531 Non-Local \u53d1\u5c55\u800c\u6765\u7684\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u5176\u7279\u6b8a\u4e4b\u5904\u5728\u7eb5\u6a2a\u4ea4\u53c9\u5173\u6ce8\u6a21\u5757\uff0c\u53ef\u4ee5\u4ee5\u66f4\u6709\u6548\u7684\u65b9 \u5f0f\u4ece\u8fdc\u7a0b\u4f9d\u8d56\u4e2d\u83b7\u53d6\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002 CBAM | \u8bba\u6587 | ResNet\u4e2d\u52a0\u5165\u8be5\u6a21\u5757 | \u535a\u5ba2\u4ecb\u7ecd \u5c06\u7a7a\u95f4\u6ce8\u610f\u529b\u673a\u5236\u548c\u901a\u9053\u6ce8\u610f\u529b\u673a\u5236\u8fdb\u884c\u4e32\u8054 \u8f93\u5165\u662f H\u00d7W\u00d7C \u7279\u5f81 F\uff0c \u5206\u522b\u8fdb\u884c\u4e00\u4e2a\u7a7a\u95f4\u7684\u5168\u5c40\u5e73\u5747\u6c60\u5316\u548c\u6700\u5927\u6c60\u5316\u5f97\u5230\u4e24\u4e2a 1\u00d71\u00d7C \u7684\u901a\u9053\u63cf\u8ff0\u3002 \u518d\u5c06\u5b83\u4eec\u5206\u522b\u9001\u5165\u4e00\u4e2a\u4e24\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u7b2c\u4e00\u5c42\u795e\u7ecf\u5143\u4e2a\u6570\u4e3a C/r \uff0c\u6fc0\u6d3b\u51fd\u6570\u4e3a Relu \uff0c\u7b2c\u4e8c\u5c42\u795e\u7ecf\u5143\u4e2a\u6570\u4e3a C \u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u4e24\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u662f\u5171\u4eab\u7684\u3002 \u518d\u5c06\u5f97\u5230\u7684\u4e24\u4e2a\u7279\u5f81**\u76f8\u52a0**\u540e\u7ecf\u8fc7\u4e00\u4e2a Sigmoid \u6fc0\u6d3b\u51fd\u6570\u5f97\u5230\u6743\u91cd\u7cfb\u6570 Mc\u3002 \u6700\u540e\uff0c\u62ff\u6743\u91cd\u7cfb\u6570\u548c\u539f\u6765\u7684\u7279\u5f81 F \u76f8\u4e58\u5373\u53ef\u5f97\u5230\u7f29\u653e\u540e\u7684\u65b0\u7279\u5f81\u3002 \u8f93\u5165\u4e00\u4e2a H\u00d7W\u00d7C \u7684\u7279\u5f81 F\u2018 \uff0c\u5206\u522b\u8fdb\u884c\u4e00\u4e2a\u901a\u9053\u7ef4\u5ea6\u7684\u5e73\u5747\u6c60\u5316\u548c\u6700\u5927\u6c60\u5316\u5f97\u5230\u4e24\u4e2a H\u00d7W\u00d71 \u7684\u901a\u9053\u63cf\u8ff0\uff0c\u5c06\u8fd9\u4e24\u4e2a\u63cf\u8ff0\u6309\u7167\u901a\u9053\u62fc\u63a5\u5728\u4e00\u8d77\u3002 \u7136\u540e\uff0c\u7ecf\u8fc7\u4e00\u4e2a 7\u00d77 \u7684\u5377\u79ef\u5c42\uff0c\u6fc0\u6d3b\u51fd\u6570\u4e3a Sigmoid \uff0c\u5f97\u5230\u6743\u91cd\u7cfb\u6570 Ms\u3002 \u6700\u540e\uff0c\u62ff\u6743\u91cd\u7cfb\u6570\u548c\u7279\u5f81 F\u2019 \u76f8\u4e58\u5373\u53ef\u5f97\u5230\u7f29\u653e\u540e\u7684\u65b0\u7279\u5f81\u3002 \u901a\u9053\u6ce8\u610f\u529b\u548c\u7a7a\u95f4\u6ce8\u610f\u529b\u8fd9\u4e24\u4e2a\u6a21\u5757\u53ef\u4ee5\u4ee5\u5e76\u884c\u6216\u8005\u4e32\u8054\u7684\u65b9\u5f0f\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u4f5c\u8005\u53d1\u73b0\u4e32\u8054\u7ec4\u5408\u5e76\u4e14\u5c06\u901a\u9053\u6ce8\u610f\u529b\u653e\u5728\u524d\u9762\u53ef\u4ee5\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002 import torch import torch.nn as nn def conv3x3 ( in_planes , out_planes , stride = 1 ): \"3x3 convolution with padding\" return nn . Conv2d ( in_planes , out_planes , kernel_size = 3 , stride = stride , padding = 1 , bias = False ) class ChannelAttention ( nn . Module ): def __init__ ( self , in_planes , ratio = 4 ): super ( ChannelAttention , self ) . __init__ () self . avg_pool = nn . AdaptiveAvgPool2d ( 1 ) self . max_pool = nn . AdaptiveMaxPool2d ( 1 ) self . sharedMLP = nn . Sequential ( nn . Conv2d ( in_planes , in_planes // ratio , 1 , bias = False ), nn . ReLU (), nn . Conv2d ( in_planes // ratio , in_planes , 1 , bias = False )) self . sigmoid = nn . Sigmoid () def forward ( self , x ): avgout = self . sharedMLP ( self . avg_pool ( x )) maxout = self . sharedMLP ( self . max_pool ( x )) return self . sigmoid ( avgout + maxout ) class SpatialAttention ( nn . Module ): def __init__ ( self , kernel_size = 7 ): super ( SpatialAttention , self ) . __init__ () assert kernel_size in ( 3 , 7 ), \"kernel size must be 3 or 7\" padding = 3 if kernel_size == 7 else 1 self . conv = nn . Conv2d ( 2 , 1 , kernel_size , padding = padding , bias = False ) self . sigmoid = nn . Sigmoid () def forward ( self , x ): avgout = torch . mean ( x , dim = 1 , keepdim = True ) maxout , _ = torch . max ( x , dim = 1 , keepdim = True ) x = torch . cat ([ avgout , maxout ], dim = 1 ) x = self . conv ( x ) return self . sigmoid ( x ) class BasicBlock ( nn . Module ): expansion = 1 def __init__ ( self , inplanes , planes , stride = 1 , downsample = None ): super ( BasicBlock , self ) . __init__ () self . conv1 = conv3x3 ( inplanes , planes , stride ) self . bn1 = nn . BatchNorm2d ( planes ) self . relu = nn . ReLU ( inplace = True ) self . conv2 = conv3x3 ( planes , planes ) self . bn2 = nn . BatchNorm2d ( planes ) self . ca = ChannelAttention ( planes ) self . sa = SpatialAttention () self . downsample = downsample self . stride = stride def forward ( self , x ): residual = x out = self . conv1 ( x ) out = self . bn1 ( out ) out = self . relu ( out ) out = self . conv2 ( out ) out = self . bn2 ( out ) out = self . ca ( out ) * out # \u5e7f\u64ad\u673a\u5236 out = self . sa ( out ) * out # \u5e7f\u64ad\u673a\u5236 if self . downsample is not None : print ( \"downsampling\" ) residual = self . downsample ( x ) print ( out . shape , residual . shape ) out += residual out = self . relu ( out ) return out if __name__ == \"__main__\" : downsample = nn . Sequential ( nn . Conv2d ( 16 , 32 , kernel_size = 1 , stride = 1 , bias = False ), nn . BatchNorm2d ( 32 )) x = torch . ones ( 3 , 16 , 32 , 32 ) model = BasicBlock ( 16 , 32 , stride = 1 , downsample = downsample ) print ( model ( x ) . shape ) BAM | \u8bba\u6587 \u548c CBAM \u540c\u4e00\u4e2a\u4f5c\u8005\uff0c\u5c06\u901a\u9053\u6ce8\u610f\u529b\u548c\u7a7a\u95f4\u6ce8\u610f\u529b\u7528\u5e76\u8054\u7684\u65b9\u5f0f\u8fde\u63a5 import torch import math import torch.nn as nn import torch.nn.functional as F class Flatten ( nn . Module ): def forward ( self , x ): return x . view ( x . size ( 0 ), - 1 ) class ChannelGate ( nn . Module ): def __init__ ( self , gate_channel , reduction_ratio = 16 , num_layers = 1 ): super ( ChannelGate , self ) . __init__ () self . gate_c = nn . Sequential () self . gate_c . add_module ( 'flatten' , Flatten ()) gate_channels = [ gate_channel ] # eg 64 gate_channels += [ gate_channel // reduction_ratio ] * num_layers # eg 4 gate_channels += [ gate_channel ] # 64 # gate_channels: [64, 4, 4] for i in range ( len ( gate_channels ) - 2 ): self . gate_c . add_module ( 'gate_c_fc_ %d ' % i , nn . Linear ( gate_channels [ i ], gate_channels [ i + 1 ])) self . gate_c . add_module ( 'gate_c_bn_ %d ' % ( i + 1 ), nn . BatchNorm1d ( gate_channels [ i + 1 ])) self . gate_c . add_module ( 'gate_c_relu_ %d ' % ( i + 1 ), nn . ReLU ()) self . gate_c . add_module ( 'gate_c_fc_final' , nn . Linear ( gate_channels [ - 2 ], gate_channels [ - 1 ])) def forward ( self , x ): avg_pool = F . avg_pool2d ( x , x . size ( 2 ), stride = x . size ( 2 )) return self . gate_c ( avg_pool ) . unsqueeze ( 2 ) . unsqueeze ( 3 ) . expand_as ( x ) class SpatialGate ( nn . Module ): def __init__ ( self , gate_channel , reduction_ratio = 16 , dilation_conv_num = 2 , dilation_val = 4 ): super ( SpatialGate , self ) . __init__ () self . gate_s = nn . Sequential () self . gate_s . add_module ( 'gate_s_conv_reduce0' , nn . Conv2d ( gate_channel , gate_channel // reduction_ratio , kernel_size = 1 )) self . gate_s . add_module ( 'gate_s_bn_reduce0' , nn . BatchNorm2d ( gate_channel // reduction_ratio )) self . gate_s . add_module ( 'gate_s_relu_reduce0' , nn . ReLU ()) # \u8fdb\u884c\u591a\u4e2a\u7a7a\u6d1e\u5377\u79ef\uff0c\u4e30\u5bcc\u611f\u53d7\u91ce for i in range ( dilation_conv_num ): self . gate_s . add_module ( 'gate_s_conv_di_ %d ' % i , nn . Conv2d ( gate_channel // reduction_ratio , gate_channel // reduction_ratio , kernel_size = 3 , padding = dilation_val , dilation = dilation_val )) self . gate_s . add_module ( 'gate_s_bn_di_ %d ' % i , nn . BatchNorm2d ( gate_channel // reduction_ratio )) self . gate_s . add_module ( 'gate_s_relu_di_ %d ' % i , nn . ReLU ()) self . gate_s . add_module ( 'gate_s_conv_final' , nn . Conv2d ( gate_channel // reduction_ratio , 1 , kernel_size = 1 )) def forward ( self , x ): return self . gate_s ( x ) . expand_as ( x ) class BAM ( nn . Module ): def __init__ ( self , gate_channel ): super ( BAM , self ) . __init__ () self . channel_att = ChannelGate ( gate_channel ) self . spatial_att = SpatialGate ( gate_channel ) def forward ( self , x ): att = 1 + F . sigmoid ( self . channel_att ( x ) * self . spatial_att ( x )) return att * x \u81ea\u52a8\u68c0\u6d4bGPU \u00b6 def auto_select_gpu ( mem_bound = 500 , utility_bound = 0 , gpus = ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ), selected_gpus = None ): import sys import os import subprocess import re import time import numpy as np if 'CUDA_VISIBLE_DEVCIES' in os . environ : sys . exit ( 0 ) if selected_gpus is None : mem_trace = [] utility_trace = [] for i in range ( 5 ): # sample 5 times info = subprocess . check_output ( 'nvidia-smi' , shell = True ) . decode ( 'utf-8' ) mem = [ int ( s [: - 5 ]) for s in re . compile ( '\\d+MiB\\s/' ) . findall ( info )] utility = [ int ( re . compile ( '\\d+' ) . findall ( s )[ 0 ]) for s in re . compile ( '\\d+%\\s+Default' ) . findall ( info )] mem_trace . append ( mem ) utility_trace . append ( utility ) time . sleep ( 0.1 ) mem = np . mean ( mem_trace , axis = 0 ) utility = np . mean ( utility_trace , axis = 0 ) assert ( len ( mem ) == len ( utility )) nGPU = len ( utility ) ideal_gpus = [ i for i in range ( nGPU ) if mem [ i ] <= mem_bound and utility [ i ] <= utility_bound and i in gpus ] if len ( ideal_gpus ) < 1 : print ( \"No gpu is available!!!\" ) sys . exit ( 0 ) else : print ( f \"This code will use gpus: { ideal_gpus } \" ) selected_gpus = list ( map ( str , ideal_gpus )) else : selected_gpus = selected_gpus . split ( ',' ) print ( \"Setting GPU: {} \" . format ( selected_gpus )) os . environ [ 'CUDA_VISIBLE_DEVICES' ] = ',' . join ( selected_gpus ) return selected_gpus TSNE\u53ef\u89c6\u5316 \u00b6 import numpy as np from numpy.linalg import norm from sklearn import manifold , decomposition from skimage import io , transform , color import seaborn as sns import matplotlib.pyplot as plt import matplotlib.patheffects as PathEffects from matplotlib.offsetbox import OffsetImage , AnnotationBbox from pylab import mpl myfont = mpl . font_manager . FontProperties ( fname = '/usr/share/fonts/truetype/droid/DroidSansFallbackFull.ttf' ) mpl . rcParams [ 'axes.unicode_minus' ] = False from sklearn.metrics.pairwise import pairwise_distances caffe_root = '/data_2/malin/SOFTWARES/caffe-all' import sys , string , random sys . path . insert ( 0 , caffe_root + '/python' ) import caffe , cv2 , os def imscatter ( img_paths , X , Y , imgbox_size , ax , zoom ): ''' Show images instead of plot points while doing tsne in Python Input: show_img_lists: image path lists n * 1 X, Y: x and y position lists got from t-sne, x is n * 1, y is n * 1 imgbox_size: the size of image showed in the cluster picture ax zoom Output: artists ''' X , Y = np . atleast_1d ( X , Y ) XY = zip ( X , Y ) artists = [] for i in range ( len ( img_paths )): image = io . imread ( img_paths [ i ]) image = transform . resize ( image , imgbox_size ) im = OffsetImage ( image , zoom = zoom ) ab = AnnotationBbox ( im , XY [ i ], xycoords = 'data' , frameon = False ) artists . append ( ax . add_artist ( ab )) ax . update_datalim ( np . column_stack ([ X , Y ])) ax . autoscale () return artists def visual_feature_space ( img_paths , features , labels , fea_dim , num_classes , classId , imgbox_size , zoom , metric = 'cosine' ): # compute the tsne map num = len ( labels ) F = np . zeros (( num , fea_dim )) Y = np . zeros (( num , )) for i in range ( num ): F [ i , :] = features [ i ] Y [ i ] = labels [ i ] pre_matrix = pairwise_distances ( F , F , metric = metric ) pre_matrix = pre_matrix + 1e-10 tsne = manifold . TSNE ( n_components = 2 , metric = 'precomputed' ) X = tsne . fit_transform ( pre_matrix ) # draw palette = np . array ( sns . color_palette ( 'hls' , num_classes )) # We create a scatter plot. f = plt . figure ( figsize = ( 8 , 8 )) ax = plt . subplot ( aspect = 'equal' ) # We draw image ins,\u8fd9\u4e2a\u7528\u4e0d\u7528\u770b\u81ea\u5df1\u9009\u62e9 #imscatter(img_paths, X[:,0], X[:,1], imgbox_size, ax=ax, zoom=zoom) sc = ax . scatter ( X [:, 0 ], X [:, 1 ], lw = 0 , s = 40 , c = palette [ labels . astype ( np . int )]) ax . axis ( 'off' ) ax . axis ( 'tight' ) # We add the labels for each digit. txts = [] for i in range ( num_classes ): # Position of each label. xtext , ytext = np . median ( X [ labels == i ,:], axis = 0 ) txt = ax . text ( xtext , ytext , classId [ i ], fontproperties = myfont ) txt . set_path_effects ([ PathEffects . Stroke ( linewidth = 5 , foreground = 'w' ), PathEffects . Normal ()]) txts . append ( txt ) plt . show () return f , ax , sc , txts if __name__ == '__main__' : features = xxx # \u6ce8\u610f\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d\u95ee\u9898 labels = xxx # labels\u6807\u7b7e img_paths = xxx # \u4f7f\u7528img_scatter\u65f6\u5019\u9700\u8981\u7528\u5230 visual_feature_space ( img_paths , features , labels , fea_dim = 128 , num_classes = 2 , classId = [ 0 , 1 ], imgbox_size = ( 1 , 1 ), zoom = 0.1 , metric = 'cosine' ) \u5377\u79ef\u53ef\u89c6\u5316-GradCAM \u00b6 \u5377\u79ef\u53ef\u89c6\u5316-GradCAM-keras/pytorch | caffe\u7248\u672c :caffe\u9ed8\u8ba4\u6ca1\u6709\u635f\u5931\u5c31\u4e0d\u7b97\u68af\u5ea6 \u89e3\u51b3 # caffe\u7248\u672c,caffe \u9ed8\u8ba4\u6ca1\u6709\u635f\u5931\u5c31\u4e0d\u7b97\u68af\u5ea6\u3002\u6240\u4ee5\u8981\u5728deploy\u4e2d\u6dfb\u52a0force_backward: true from PIL import Image import matplotlib.cm as cm class_nums = 1000 resize_ = ( 227 , 227 ) vis_layer = 'pool5' # visualization layer #Perform a backward pass for the cat class (281) net . blobs [ 'data' ] . data [ ... ] = transformed_image output = net . forward () output_prob = output [ 'prob' ][ 0 ] # the output probability vector for the first image in the batch print ( 'predicted class is:' , output_prob . argmax ()) label_index = output_prob . argmax () caffeLabel = np . zeros (( 1 , class_nums )) caffeLabel [ 0 , label_index ] = 1 ; grads = net . backward ( diffs = [ vis_layer ], ** { 'prob' : caffeLabel }) #bw=net.backward(diffs=[vis_layer],**{net.outputs[0]: caffeLabel}) vis_grad = grads [ 'pool5' ] # gradients of pool5 layer with respect to output class vis_grad = np . squeeze ( vis_grad , axis = 0 ) # removing the extra dimension mean_grads = np . mean ( vis_grad , axis = ( 1 , 2 )) # mean of gradients activations = net . blobs [ vis_layer ] . data activations = np . squeeze ( activations , axis = 0 ) n_nodes = activations . shape [ 0 ] # number of nodels vis_size = activations . shape [ 1 :] #visualization shape vis = np . zeros ( activations . shape [ 1 :], dtype = np . float32 ) #generating saliency image for i in range ( n_nodes ): activation = activations [ i , :, :] weight = mean_grads [ i ] weighted_activation = activation * weight vis += weighted_activation # We select only those activation which has positively contributed in prediction of given class heatmap = np . maximum ( vis , 0 ) # relu heatmap /= np . max ( heatmap ) src_img = cv2 . resize ( xxx , resize_ , interpolation = cv2 . INTER_LINEAR ) src_img = src_img [:,:, None ] if src_img . ndim == 1 else src_img heatmap = cv2 . resize ( heatmap , src_image . shape [: 2 ][:: - 1 ]) heatmap = np . uint8 ( 255 * heatmap ) heatmap = cv2 . applyColorMap ( heatmap , cv2 . COLORMAP_JET ) # \u5c06\u70ed\u529b\u56fe\u5e94\u7528\u4e8e\u539f\u59cb\u56fe\u50cf result = heatmap * 0.4 + src_img # \u6ce8\u610f\u6b64\u65f6heatmap\u662f\u4e09\u901a\u9053\uff0c\u5fc5\u987b\u4fdd\u8bc1src_img\u662f\u4e09\u7ef4 \u7f51\u7edc\u7ed3\u6784\u53ef\u89c6\u5316\u5de5\u5177 \u00b6 https://lutzroeder.github.io/netron/ ==> https://netron.app/ VOC\u6570\u636e\u96c6\u5236\u4f5c \u00b6 import os import glob import xml.etree.ElementTree as ET import cv2 def GetAnnotBoxLoc ( AnotPath ): tree = ET . ElementTree ( file = AnotPath ) root = tree . getroot () ObjectSet = root . findall ( 'object' ) ObjBndBoxSet = [] for Object in ObjectSet : BndBox = Object . find ( 'bndbox' ) x1 = int ( BndBox . find ( 'xmin' ) . text ) y1 = int ( BndBox . find ( 'ymin' ) . text ) x2 = int ( BndBox . find ( 'xmax' ) . text ) y2 = int ( BndBox . find ( 'ymax' ) . text ) ObjBndBoxSet . append ([ x1 , y1 , x2 , y2 ]) return ObjBndBoxSet os . makedirs ( \"new_Annotations\" , exist_ok = True ) os . makedirs ( \"new_JPEGImages\" , exist_ok = True ) for img_path_new in glob . glob ( \"JPEGImages/*.jpg\" ): save_img_name = img_path_new . replace ( \"JPEGImages\" , \"new_JPEGImages\" ) img_new = cv2 . imread ( img_path_new ) target_size = 320 im_scale = float ( target_size ) / max ( img_new . shape [: 2 ]) if im_scale != 1 : img_new = cv2 . resize ( img_new , None , None , fx = im_scale , fy = im_scale , interpolation = cv2 . INTER_LINEAR ) image_name = os . path . basename ( img_path_new ) xml_path = os . path . join ( \"Annotations\" , image_name [: - 4 ] + \".xml\" ) height , width = img_new . shape [: 2 ] img_boxs = GetAnnotBoxLoc ( xml_path ) if len ( img_boxs ) >= 10 : continue cv2 . imwrite ( save_img_name , img_new ) with open ( f \"new_Annotations/ { image_name [: - 4 ] } .xml\" , 'w' ) as xml_file : xml_file . write ( \"<?xml version='1.0' encoding='us-ascii'?> \\n \" ) xml_file . write ( '<annotation> \\n ' ) xml_file . write ( ' \\t <folder>simple</folder> \\n ' ) xml_file . write ( ' \\t <filename>' + f \" { image_name } \" + '</filename> \\n ' ) xml_file . write ( ' \\t <source> \\n ' ) xml_file . write ( ' \\t\\t <database>' + 'The simple Database' + '</database> \\n ' ) xml_file . write ( ' \\t\\t <annotation>' + 'simple' + '</annotation> \\n ' ) xml_file . write ( ' \\t\\t <image>head</image> \\n ' ) xml_file . write ( ' \\t\\t <flickrid>325991873</flickrid> \\n ' ) xml_file . write ( ' \\t </source> \\n ' ) xml_file . write ( ' \\t <owner> \\n ' ) xml_file . write ( ' \\t\\t <flickrid>archin</flickrid> \\n ' ) xml_file . write ( ' \\t\\t <name>?</name> \\n ' ) xml_file . write ( ' \\t </owner> \\n ' ) xml_file . write ( ' \\t <size> \\n ' ) xml_file . write ( ' \\t\\t <width>' + str ( width ) + '</width> \\n ' ) xml_file . write ( ' \\t\\t <height>' + str ( height ) + '</height> \\n ' ) xml_file . write ( ' \\t\\t <depth>3</depth> \\n ' ) xml_file . write ( ' \\t </size> \\n ' ) xml_file . write ( ' \\t <segmented>0</segmented> \\n ' ) # write the region of text on xml file for spt in img_boxs : xml_file . write ( ' \\t <object> \\n ' ) # \u4fee\u6539\u540d\u79f0 xml_file . write ( ' \\t\\t <name>head</name> \\n ' ) xml_file . write ( ' \\t\\t <pose>Unspecified</pose> \\n ' ) xml_file . write ( ' \\t\\t <truncated>0</truncated> \\n ' ) xml_file . write ( ' \\t\\t <difficult>0</difficult> \\n ' ) xml_file . write ( ' \\t\\t <bndbox> \\n ' ) xml_file . write ( ' \\t\\t\\t <xmin>' + str ( int ( float ( spt [ 0 ]) * im_scale )) + '</xmin> \\n ' ) xml_file . write ( ' \\t\\t\\t <ymin>' + str ( int ( float ( spt [ 1 ]) * im_scale )) + '</ymin> \\n ' ) xml_file . write ( ' \\t\\t\\t <xmax>' + str ( int ( float ( spt [ 2 ]) * im_scale )) + '</xmax> \\n ' ) xml_file . write ( ' \\t\\t\\t <ymax>' + str ( int ( float ( spt [ 3 ]) * im_scale )) + '</ymax> \\n ' ) xml_file . write ( ' \\t\\t </bndbox> \\n ' ) xml_file . write ( ' \\t </object> \\n ' ) xml_file . write ( '</annotation>' ) \u6570\u636e\u96c6anchor\u8ba1\u7b97(yolov3) \u00b6 \u535a\u5ba2\u94fe\u63a5 #coding=utf-8 import xml.etree.ElementTree as ET import numpy as np import glob def iou ( box , clusters ): \"\"\" \u8ba1\u7b97\u4e00\u4e2aground truth\u8fb9\u754c\u76d2\u548ck\u4e2a\u5148\u9a8c\u6846(Anchor)\u7684\u4ea4\u5e76\u6bd4(IOU)\u503c\u3002 \u53c2\u6570box: \u5143\u7ec4\u6216\u8005\u6570\u636e\uff0c\u4ee3\u8868ground truth\u7684\u957f\u5bbd\u3002 \u53c2\u6570clusters: \u5f62\u5982(k,2)\u7684numpy\u6570\u7ec4\uff0c\u5176\u4e2dk\u662f\u805a\u7c7bAnchor\u6846\u7684\u4e2a\u6570 \u8fd4\u56de\uff1aground truth\u548c\u6bcf\u4e2aAnchor\u6846\u7684\u4ea4\u5e76\u6bd4\u3002 \"\"\" x = np . minimum ( clusters [:, 0 ], box [ 0 ]) y = np . minimum ( clusters [:, 1 ], box [ 1 ]) if np . count_nonzero ( x == 0 ) > 0 or np . count_nonzero ( y == 0 ) > 0 : raise ValueError ( \"Box has no area\" ) intersection = x * y box_area = box [ 0 ] * box [ 1 ] cluster_area = clusters [:, 0 ] * clusters [:, 1 ] iou_ = intersection / ( box_area + cluster_area - intersection ) return iou_ def avg_iou ( boxes , clusters ): \"\"\" \u8ba1\u7b97\u4e00\u4e2aground truth\u548ck\u4e2aAnchor\u7684\u4ea4\u5e76\u6bd4\u7684\u5747\u503c\u3002 \"\"\" return np . mean ([ np . max ( iou ( boxes [ i ], clusters )) for i in range ( boxes . shape [ 0 ])]) def kmeans ( boxes , k , dist = np . median ): \"\"\" \u5229\u7528IOU\u503c\u8fdb\u884cK-means\u805a\u7c7b \u53c2\u6570boxes: \u5f62\u72b6\u4e3a(r, 2)\u7684ground truth\u6846\uff0c\u5176\u4e2dr\u662fground truth\u7684\u4e2a\u6570 \u53c2\u6570k: Anchor\u7684\u4e2a\u6570 \u53c2\u6570dist: \u8ddd\u79bb\u51fd\u6570 \u8fd4\u56de\u503c\uff1a\u5f62\u72b6\u4e3a(k, 2)\u7684k\u4e2aAnchor\u6846 \"\"\" # \u5373\u662f\u4e0a\u9762\u63d0\u5230\u7684r rows = boxes . shape [ 0 ] # \u8ddd\u79bb\u6570\u7ec4\uff0c\u8ba1\u7b97\u6bcf\u4e2aground truth\u548ck\u4e2aAnchor\u7684\u8ddd\u79bb distances = np . empty (( rows , k )) # \u4e0a\u4e00\u6b21\u6bcf\u4e2aground truth\"\u8ddd\u79bb\"\u6700\u8fd1\u7684Anchor\u7d22\u5f15 last_clusters = np . zeros (( rows ,)) # \u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50 np . random . seed () # \u521d\u59cb\u5316\u805a\u7c7b\u4e2d\u5fc3\uff0ck\u4e2a\u7c07\uff0c\u4ecer\u4e2aground truth\u968f\u673a\u9009k\u4e2a clusters = boxes [ np . random . choice ( rows , k , replace = False )] # \u5f00\u59cb\u805a\u7c7b while True : # \u8ba1\u7b97\u6bcf\u4e2aground truth\u548ck\u4e2aAnchor\u7684\u8ddd\u79bb\uff0c\u75281-IOU(box,anchor)\u6765\u8ba1\u7b97 for row in range ( rows ): distances [ row ] = 1 - iou ( boxes [ row ], clusters ) # \u5bf9\u6bcf\u4e2aground truth\uff0c\u9009\u53d6\u8ddd\u79bb\u6700\u5c0f\u7684\u90a3\u4e2aAnchor\uff0c\u5e76\u5b58\u4e0b\u7d22\u5f15 nearest_clusters = np . argmin ( distances , axis = 1 ) # \u5982\u679c\u5f53\u524d\u6bcf\u4e2aground truth\"\u8ddd\u79bb\"\u6700\u8fd1\u7684Anchor\u7d22\u5f15\u548c\u4e0a\u4e00\u6b21\u4e00\u6837\uff0c\u805a\u7c7b\u7ed3\u675f if ( last_clusters == nearest_clusters ) . all (): break # \u66f4\u65b0\u7c07\u4e2d\u5fc3\u4e3a\u7c07\u91cc\u9762\u6240\u6709\u7684ground truth\u6846\u7684\u5747\u503c for cluster in range ( k ): clusters [ cluster ] = dist ( boxes [ nearest_clusters == cluster ], axis = 0 ) # \u66f4\u65b0\u6bcf\u4e2aground truth\"\u8ddd\u79bb\"\u6700\u8fd1\u7684Anchor\u7d22\u5f15 last_clusters = nearest_clusters return clusters # \u52a0\u8f7d\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u53ea\u9700\u8981\u6240\u6709labelimg\u6807\u6ce8\u51fa\u6765\u7684xml\u6587\u4ef6\u5373\u53ef def load_dataset ( path ): dataset = [] for xml_file in glob . glob ( \" {} /*xml\" . format ( path )): tree = ET . parse ( xml_file ) # \u56fe\u7247\u9ad8\u5ea6 height = int ( tree . findtext ( \"./size/height\" )) # \u56fe\u7247\u5bbd\u5ea6 width = int ( tree . findtext ( \"./size/width\" )) for obj in tree . iter ( \"object\" ): # \u504f\u79fb\u91cf,\u8fd9\u91cc\u5df2\u7ecf\u662f\u5f52\u4e00\u5316\u540e\u7684x\u3001y xmin = int ( obj . findtext ( \"bndbox/xmin\" )) / width ymin = int ( obj . findtext ( \"bndbox/ymin\" )) / height xmax = int ( obj . findtext ( \"bndbox/xmax\" )) / width ymax = int ( obj . findtext ( \"bndbox/ymax\" )) / height xmin = np . float64 ( xmin ) ymin = np . float64 ( ymin ) xmax = np . float64 ( xmax ) ymax = np . float64 ( ymax ) if xmax == xmin or ymax == ymin : print ( xml_file ) # \u5c06Anchor\u7684\u957f\u5bbd\u653e\u5165dateset\uff0c\u8fd0\u884ckmeans\u83b7\u5f97Anchor dataset . append ([ xmax - xmin , ymax - ymin ]) return np . array ( dataset ) if __name__ == '__main__' : ANNOTATIONS_PATH = \"F:\\Annotations\" #xml\u6587\u4ef6\u6240\u5728\u6587\u4ef6\u5939 CLUSTERS = 9 #\u805a\u7c7b\u6570\u91cf\uff0canchor\u6570\u91cf INPUTDIM = 416 #\u8f93\u5165\u7f51\u7edc\u5927\u5c0f data = load_dataset ( ANNOTATIONS_PATH ) # kmeans\u51fd\u6570\u5f97\u5230\u7684\u7ed3\u679c\u5b9e\u9645\u4e0a\u662f\u5f52\u4e00\u5316\u52300-1\u4e4b\u95f4\u7684 out = kmeans ( data , k = CLUSTERS ) print ( 'Boxes:' ) # \u7136\u540eAnchor\u7684\u8f93\u51fa\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u4e58\u4ee5\u8f93\u5165\u5206\u8fa8\u7387\u7684\u5927\u5c0f(\u6a21\u578b\u8f93\u51fa),\u6240\u4ee5Anchor\u548c\u56fe\u7247\u7684\u8f93\u5165\u5206\u8fa8\u7387\u662f\u6709\u5173\u7684 print ( np . array ( out ) * INPUTDIM ) print ( \"Accuracy: {:.2f} %\" . format ( avg_iou ( data , out ) * 100 )) final_anchors = np . around ( out [:, 0 ] / out [:, 1 ], decimals = 2 ) . tolist () print ( \"Before Sort Ratios: \\n {} \" . format ( final_anchors )) print ( \"After Sort Ratios: \\n {} \" . format ( sorted ( final_anchors ))) MAP\u8ba1\u7b97\u5e93 \u00b6 code \u4eba\u8138\u56fe\u7247\u6269\u5145 \u00b6 def merge_image ( img , bboxes , scale ): if scale == 1.0 / 4 : scale_w = int ( img . shape [ 1 ] * scale ) scale_h = int ( img . shape [ 0 ] * scale ) img_scale = cv2 . resize ( img , ( scale_w , scale_h )) # import pdb; pdb.set_trace() bboxes_scale = bboxes * scale merge_img = np . zeros ( np . array ([ scale_h * 2 , scale_w * 2 , 3 ], dtype = int ), dtype = img_scale . dtype ) merge_bboxes = np . zeros (( 0 , 4 )) for i in range ( 4 ): flip = random . randint ( 0 , 1 ) if flip : img_scale = cv2 . flip ( img_scale , flip ) bboxes_scale [:,[ 2 , 0 ]] = img_scale . shape [ 1 ] - 1 - bboxes_scale [:,[ 0 , 2 ]] merge_img [( i // 2 ) * scale_h : ( i // 2 + 1 ) * scale_h , ( i % 2 ) * scale_w : ( i % 2 + 1 ) * scale_w ,:] = img_scale offset = np . array ([( i % 2 ) * scale_w , ( i // 2 ) * scale_h , ( i % 2 ) * scale_w , ( i // 2 ) * scale_h ]) merge_bboxes = np . concatenate (( merge_bboxes , bboxes_scale + offset ), axis = 0 ) return ( merge_img , merge_bboxes , scale ) img_scale , bboxes_scale , scale = merge_image ( img , bboxes , scale * 0.5 ) scale = 2 * scale scale_w = int ( img . shape [ 1 ] * scale ) scale_h = int ( img . shape [ 0 ] * scale ) merge_img = np . zeros ( np . array ([ scale_h * 2 , scale_w * 2 , 3 ], dtype = int ), dtype = img_scale . dtype ) merge_bboxes = np . zeros (( 0 , 4 )) pos = random . randint ( 0 , 3 ) cut_ymin , cut_ymax , cut_xmin , cut_xmax = ( pos // 2 ) * scale_h ,( pos // 2 + 1 ) * scale_h , ( pos % 2 ) * scale_w ,( pos % 2 + 1 ) * scale_w y_pad = img_scale . shape [ 0 ] - ( cut_ymax - cut_ymin ) x_pad = img_scale . shape [ 1 ] - ( cut_xmax - cut_xmin ) merge_img [ cut_ymin : cut_ymax + y_pad , cut_xmin : cut_xmax + x_pad ,:] = img_scale offset = np . array ([( pos % 2 ) * scale_w , ( pos // 2 ) * scale_h , ( pos % 2 ) * scale_w , ( pos // 2 ) * scale_h ]) merge_bboxes = np . concatenate (( merge_bboxes , bboxes_scale + offset ), axis = 0 ) img_scale = cv2 . resize ( img , ( scale_w , scale_h )) bboxes_scale = bboxes * scale for i in range ( 4 ): if i == pos : continue flip = random . randint ( 0 , 1 ) if flip : img_scale = cv2 . flip ( img_scale , flip ) bboxes_scale [:,[ 2 , 0 ]] = img_scale . shape [ 1 ] - 1 - bboxes_scale [:,[ 0 , 2 ]] merge_img [( i // 2 ) * scale_h : ( i // 2 + 1 ) * scale_h , ( i % 2 ) * scale_w : ( i % 2 + 1 ) * scale_w ,:] = img_scale offset = np . array ([( i % 2 ) * scale_w , ( i // 2 ) * scale_h , ( i % 2 ) * scale_w , ( i // 2 ) * scale_h ]) merge_bboxes = np . concatenate (( merge_bboxes , bboxes_scale + offset ), axis = 0 ) return ( merge_img , merge_bboxes , scale ) def expand_rect ( merge_img , merge_bboxes , img , img_boxs , expand_img_num = 4 ): src_h , src_w = img . shape [: 2 ] merge_h , merge_w = merge_img . shape [: 2 ] if src_h >= src_w : img = np . vstack ([ img ] * expand_img_num ) im_scale = float ( merge_img . shape [ 0 ] / img . shape [ 0 ]) img_boxs = img_boxs * im_scale temp_boxs = img_boxs . copy () for index in range ( 1 , expand_img_num ): temp_boxs [:,[ 1 , 3 ]] += src_h * im_scale img_boxs = np . vstack ([ img_boxs , temp_boxs ]) else : img = np . hstack ([ img ] * expand_img_num ) im_scale = float ( merge_img . shape [ 1 ] / img . shape [ 1 ]) img_boxs = img_boxs * im_scale temp_boxs = img_boxs . copy () for index in range ( 1 , expand_img_num ): temp_boxs [:,[ 0 , 2 ]] += src_w * im_scale img_boxs = np . vstack ([ img_boxs , temp_boxs ]) img = cv2 . resize ( img , None , None , fx = im_scale , fy = im_scale , interpolation = cv2 . INTER_LINEAR ) if src_h >= src_w : img_boxs [:,[ 0 , 2 ]] += merge_w result_img = np . hstack (( merge_img , img )) else : img_boxs [:,[ 1 , 3 ]] += merge_h result_img = np . vstack (( merge_img , img )) result_boxes = np . vstack ([ merge_bboxes , img_boxs ]) pad_w = int (( result_img . shape [ 0 ] - result_img . shape [ 1 ]) // 2 ) if pad_w >= 0 : result_img = np . pad ( result_img ,(( 0 , 0 ),( pad_w , pad_w ),( 0 , 0 ))) result_boxes [:,[ 0 , 2 ]] += pad_w else : pad_h = abs ( pad_w ) result_img = np . pad ( result_img ,(( pad_h , pad_h ),( 0 , 0 ),( 0 , 0 ))) result_boxes [:,[ 1 , 3 ]] += pad_h return result_img , result_boxes . astype ( np . int ) if __name__ == '__main__' : merge_img , merge_bboxes , _ = merge_image ( img_new , img_boxs , 1.0 ) result_img , result_boxes = expand_rect ( merge_img , merge_bboxes , img_new , img_boxs ) \u56fe\u50cf\u589e\u4eae \u00b6 import cv2 import glob import numpy as np def gain_light ( img ): h , w = img . shape [: 2 ] lw = cv2 . cvtColor ( img , cv2 . COLOR_RGB2GRAY ) / 255. lwaver = np . exp ( np . log ( 0.001 + lw ) . sum () / ( h * w )) gain = ( np . log ( lw / lwaver + 1 ) / np . log ( lw . max () / lwaver + 1 )) / lw gain [ lw == 0 ] = 0 return cv2 . convertScaleAbs ( img * gain [:,:, None ])","title":"\u6df1\u5ea6\u5b66\u4e60\u5de5\u5177\u4ee3\u7801"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#opencv","text":"code \u94fe\u63a5","title":"opencv\u4e0e\u56fe\u50cf\u5904\u7406\u57fa\u7840"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#_1","text":"Smooth L1 Loss IoU Loss GIoU Loss DIoU Loss CIoU Loss Smooth L1 Loss \u7f3a\u70b9 \u8fd9\u91cc\u5148\u6c42\u51fa\u56db\u4e2a\u70b9\u7684loss\uff0c\u518d\u76f8\u52a0\uff0c\u524d\u63d0\u5047\u8bbe4\u4e2a\u70b9\u662f\u76f8\u4e92\u72ec\u7acb\u7684\uff0c\u4f46\u5b9e\u9645\u56db\u4e2a\u70b9\u662f\u76f8\u5173\u8054\u7684 \u5b9e\u9645\u8bc4\u4ef7\u6846\u68c0\u6d4b\u7684\u6307\u6807\u662f\u4f7f\u7528 IOU \uff0c\u7528\u8fd9\u79cd\u65b9\u5f0f\u5f88\u53ef\u80fd\u591a\u4e2a\u68c0\u6d4b\u6846IOU\u5dee\u5f02\u5f88\u5927\uff0c\u4f46 smooth l1 loss \u76f8\u540c\u3002 def smoothL1Loss ( predict_box , gt_box , reduction = \"mean\" ): ''' predict_box:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] gt_box:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] th: float reduction:\"mean\"or\"sum\" return: loss ''' # \u8ba1\u7b97\u5750\u6807\u5dee x_diff = torch . abs ( predict_box - gt_box ) # \u5176\u5b9e\u5c31\u662f\u8ba1\u7b97\u4e24\u6846\u5404\u81ea\u4e24\u70b9\u5bf9\u5e94\u7684\u5dee\u503c\uff0c\u56db\u4e2a\u503c # torch.where(condition,x,y) -> True:x,False:y loss = torch . where ( x_diff < 1.0 , 0.5 * x_diff * x_diff , x_diff - 0.5 ) if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( loss ) if reduction == \"mean\" else torch . sum ( loss ) return loss # \u5e38\u7528\u5b98\u65b9\u5b9e\u73b0 import torch.nn.functional as F F . smooth_l1_loss ( predict_box , gt_box , reduction = 'sum' ) IOU Loss \u7f3a\u70b9 \u5f53\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u4e0d\u76f8\u4ea4\u65f6\uff0c IoU(A,B)=0 \u65f6\uff0c\u4e0d\u80fd\u53cd\u6620A,B\u8ddd\u79bb\u7684\u8fdc\u8fd1 (\u5f88\u8fd1\u7684\u65e0\u4ea4\u96c6\u6846\u548c\u5f88\u8fdc\u7684\u65e0\u4ea4\u96c6\u6846\u7684\u8f93\u51fa\u4e00\u6837) \uff0c\u6b64\u65f6\u635f\u5931\u51fd\u6570\u4e0d\u53ef\u5bfc\uff0c IoU Loss \u65e0\u6cd5\u4f18\u5316\u4e24\u4e2a\u6846\u4e0d\u76f8\u4ea4\u7684\u60c5\u51b5\u3002 YOLO \u4e2d\u53ef\u80fd\u51fa\u73b0:\u6309\u7167 GT \u662f\u5426\u5728 cell \u5224\u65ad\u5f53\u524d bbox \u662f\u5426\u9700\u8981\u56de\u5f52 two stage \u4e0d\u4e00\u822c\u4e0d\u4f1a\u51fa\u73b0\uff0c\u56e0\u4e3a\u90fd\u4f1a\u6709\u4e00\u4e2a IOU>=0.5 \u7684\u7b5b\u9009\uff0c\u4e0d\u4f1a\u5bf9\u65e0\u4ea4\u96c6\u7684\u6846\u8fdb\u884c\u56de\u5f52\u3002 \u5047\u8bbe\u9884\u6d4b\u6846\u548c\u76ee\u6807\u6846\u7684\u5927\u5c0f\u90fd\u786e\u5b9a\uff0c\u53ea\u8981\u4e24\u4e2a\u6846\u7684\u76f8\u4ea4\u503c\u662f\u786e\u5b9a\u7684\uff0c\u5176IoU\u503c\u662f\u76f8\u540c\u65f6\uff0cIoU\u503c\u4e0d\u80fd\u53cd\u6620\u4e24\u4e2a\u6846\u662f\u5982\u4f55\u76f8\u4ea4\u7684\u3002 # IOU Loss = -ln(IOU) def iouLoss ( bboxes1 , bboxes2 , eps = 1e-6 , reduction = 'mean' ): ''' bboxes1:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # predict_box bboxes2:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # gt_box th: float reduction:\"mean\"or\"sum\" return: loss ''' rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] ious = torch . zeros (( rows , cols )) if rows * cols == 0 : # \u8be5\u7c7b\u65e0gtbox\u6216\u8005\u65e0anchor box return ious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: # \u9884\u6d4b\u6846\u8fc7\u591a bboxes1 , bboxes2 = bboxes2 , bboxes1 ious = torch . zeros (( cols , rows )) exchange = True area1 = ( bboxes1 [:, 2 ] - bboxes1 [:, 0 ]) * ( bboxes1 [:, 3 ] - bboxes1 [:, 1 ]) # \u9884\u6d4b\u6846\u9762\u79ef area2 = ( bboxes2 [:, 2 ] - bboxes2 [:, 0 ]) * ( bboxes2 [:, 3 ] - bboxes2 [:, 1 ]) # \u771f\u5b9e\u6846\u9762\u79ef inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) # eps\u4fdd\u8bc1\u5206\u5b50\u4e0d\u4e3a0 inter_area = inter [:, 0 ] * inter [:, 1 ] union = area1 + area2 - inter_area ious = inter_area / union ious = torch . clamp ( ious , min = 0 , max = 1.0 ) # \u9650\u5b9a\u8303\u56f4 0~1 if exchange : ious = ious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) # loss = -ln(ious) loss = torch . mean ( - ious . log ()) if reduction == \"mean\" else torch . sum ( - ious . log ()) # loss = 1.0 - ious # loss = torch.mean(1.0 - ious) if reduction == \"mean\" else torch.sum(1.0 - ious) return loss GIou Loss \u7f3a\u70b9:\u5f53\u76ee\u6807\u6846\u5b8c\u5168\u5305\u88f9\u9884\u6d4b\u6846\u7684\u65f6\u5019\uff0c IoU \u548c GIoU \u7684\u503c\u90fd\u4e00\u6837\uff0c\u6b64\u65f6 GIoU \u9000\u5316\u4e3a IoU , \u65e0\u6cd5\u533a\u5206\u5176\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb def giouLoss ( bboxes1 , bboxes2 , eps = 1e-6 , reduction = 'mean' ): ''' bboxes1:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # predict_box bboxes2:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # gt_box th: float reduction:\"mean\"or\"sum\" return: loss ''' rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] ious = torch . zeros (( rows , cols )) if rows * cols == 0 : return ious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: bboxes1 , bboxes2 = bboxes2 , bboxes1 ious = torch . zeros (( cols , rows )) exchange = True area1 = ( bboxes1 [:, 2 ] - bboxes1 [:, 0 ]) * ( bboxes1 [:, 3 ] - bboxes1 [:, 1 ]) area2 = ( bboxes2 [:, 2 ] - bboxes2 [:, 0 ]) * ( bboxes2 [:, 3 ] - bboxes2 [:, 1 ]) inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) # out\u662f\u6700\u5c0f\u5916\u63a5\u77e9\u5f62 out_max_xy = torch . max ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) out_min_xy = torch . min ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) inter_area = inter [:, 0 ] * inter [:, 1 ] outer = torch . clamp (( out_max_xy - out_min_xy ), min = eps ) outer_area = outer [:, 0 ] * outer [:, 1 ] union = area1 + area2 - inter_area closure = outer_area gious = inter_area / union - ( closure - union ) / closure gious = torch . clamp ( gious , min =- 1.0 , max = 1.0 ) if exchange : gious = gious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( 1.0 - gious ) if reduction == \"mean\" else torch . sum ( 1.0 - gious ) return loss DIou Loss \u4f18\u70b9 \u5f53\u76ee\u6807\u6846\u4e0d\u91cd\u53e0\u65f6\uff0c\u4ecd\u7136\u53ef\u4ee5\u4e3a\u8fb9\u754c\u6846\u63d0\u4f9b\u68af\u5ea6 DIoU loss \u53ef\u4ee5\u76f4\u63a5\u6700\u5c0f\u5316\u4e24\u4e2a\u76ee\u6807\u6846\u7684\u8ddd\u79bb\uff0c\u6536\u655b\u66f4\u5feb( GIOU \u4f18\u5316\u4e24\u6846\u7684IOU,\u6162) \u5bf9\u4e8e\u76ee\u6807\u6846\u5305\u88f9\u9884\u6d4b\u6846\u7684\u8fd9\u79cd\u60c5\u51b5\uff0c DIoU Loss \u53ef\u4ee5\u6536\u655b\u7684\u5f88\u5feb\uff0c\u800c GIoU Loss \u6b64\u65f6\u9000\u5316\u4e3a IoU Loss \u6536\u655b\u901f\u5ea6\u8f83\u6162 def diouLoss ( bboxes1 , bboxes2 , eps = 1e-6 , reduction = 'mean' ): ''' bboxes1:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # predict_box bboxes2:[[x1,y1,x2,y2], [x1,y1,x2,y2],,,] # gt_box th: float reduction:\"mean\"or\"sum\" return: loss ''' rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] dious = torch . zeros (( rows , cols )) if rows * cols == 0 : return dious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: bboxes1 , bboxes2 = bboxes2 , bboxes1 dious = torch . zeros (( cols , rows )) exchange = True w1 = bboxes1 [:, 2 ] - bboxes1 [:, 0 ] h1 = bboxes1 [:, 3 ] - bboxes1 [:, 1 ] w2 = bboxes2 [:, 2 ] - bboxes2 [:, 0 ] h2 = bboxes2 [:, 3 ] - bboxes2 [:, 1 ] area1 = w1 * h1 area2 = w2 * h2 center_x1 = ( bboxes1 [:, 2 ] + bboxes1 [:, 0 ]) / 2 center_y1 = ( bboxes1 [:, 3 ] + bboxes1 [:, 1 ]) / 2 center_x2 = ( bboxes2 [:, 2 ] + bboxes2 [:, 0 ]) / 2 center_y2 = ( bboxes2 [:, 3 ] + bboxes2 [:, 1 ]) / 2 inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) out_max_xy = torch . max ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) out_min_xy = torch . min ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) inter_area = inter [:, 0 ] * inter [:, 1 ] inter_diag = ( center_x2 - center_x1 ) ** 2 + ( center_y2 - center_y1 ) ** 2 outer = torch . clamp (( out_max_xy - out_min_xy ), min = 0 ) outer_diag = ( outer [:, 0 ] ** 2 ) + ( outer [:, 1 ] ** 2 ) union = area1 + area2 - inter_area dious = inter_area / union - ( inter_diag ) / outer_diag dious = torch . clamp ( dious , min =- 1.0 , max = 1.0 ) if exchange : dious = dious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( 1.0 - dious ) if reduction == \"mean\" else torch . sum ( 1.0 - dious ) return loss Ciou Loss def bbox_overlaps_ciou ( bboxes1 , bboxes2 ): rows = bboxes1 . shape [ 0 ] cols = bboxes2 . shape [ 0 ] cious = torch . zeros (( rows , cols )) if rows * cols == 0 : return cious exchange = False if bboxes1 . shape [ 0 ] > bboxes2 . shape [ 0 ]: bboxes1 , bboxes2 = bboxes2 , bboxes1 cious = torch . zeros (( cols , rows )) exchange = True w1 = bboxes1 [:, 2 ] - bboxes1 [:, 0 ] h1 = bboxes1 [:, 3 ] - bboxes1 [:, 1 ] w2 = bboxes2 [:, 2 ] - bboxes2 [:, 0 ] h2 = bboxes2 [:, 3 ] - bboxes2 [:, 1 ] area1 = w1 * h1 area2 = w2 * h2 center_x1 = ( bboxes1 [:, 2 ] + bboxes1 [:, 0 ]) / 2 center_y1 = ( bboxes1 [:, 3 ] + bboxes1 [:, 1 ]) / 2 center_x2 = ( bboxes2 [:, 2 ] + bboxes2 [:, 0 ]) / 2 center_y2 = ( bboxes2 [:, 3 ] + bboxes2 [:, 1 ]) / 2 inter_max_xy = torch . min ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) inter_min_xy = torch . max ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) out_max_xy = torch . max ( bboxes1 [:, 2 :], bboxes2 [:, 2 :]) out_min_xy = torch . min ( bboxes1 [:, : 2 ], bboxes2 [:, : 2 ]) inter = torch . clamp (( inter_max_xy - inter_min_xy ), min = eps ) inter_area = inter [:, 0 ] * inter [:, 1 ] inter_diag = ( center_x2 - center_x1 ) ** 2 + ( center_y2 - center_y1 ) ** 2 outer = torch . clamp (( out_max_xy - out_min_xy ), min = 0 ) outer_diag = ( outer [:, 0 ] ** 2 ) + ( outer [:, 1 ] ** 2 ) union = area1 + area2 - inter_area u = ( inter_diag ) / outer_diag iou = inter_area / union v = ( 4 / ( math . pi ** 2 )) * torch . pow (( torch . atan ( w2 / h2 ) - torch . atan ( w1 / h1 )), 2 ) with torch . no_grad (): S = 1 - iou alpha = v / ( S + v ) cious = iou - ( u + alpha * v ) cious = torch . clamp ( cious , min =- 1.0 , max = 1.0 ) if exchange : cious = cious . T if reduction != \"mean\" or reduction != \"sum\" : raise Exception ( \"reduction must be mean or sum\" ) loss = torch . mean ( 1.0 - cious ) if reduction == \"mean\" else torch . sum ( 1.0 - cious ) return loss","title":"\u76ee\u6807\u68c0\u6d4b\u635f\u5931\u51fd\u6570"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#nms","text":"nms DIoU-NMS nms def nms ( boxes , scores , overlap = 0.5 , top_k = 200 ): \"\"\"Apply non-maximum suppression at test time to avoid detecting too many overlapping bounding boxes for a given object. Args: boxes: (tensor) The location preds for the img, Shape: [num_priors,4]. scores: (tensor) The class predscores for the img, Shape:[num_priors]. overlap: (float) The overlap thresh for suppressing unnecessary boxes. top_k: (int) The Maximum number of box preds to consider. Return: The indices of the kept boxes with respect to num_priors. \"\"\" keep = scores . new ( scores . size ( 0 )) . zero_ () . long () # \u7528\u6765\u5b58\u50a8\u4fdd\u7559\u4e0b\u7684\u6846index if boxes . numel () == 0 : return keep x1 = boxes [:, 0 ] y1 = boxes [:, 1 ] x2 = boxes [:, 2 ] y2 = boxes [:, 3 ] area = torch . mul ( x2 - x1 , y2 - y1 ) # \u5bf9\u5e94\u4f4d\u7f6e\u76f8\u4e58 v , idx = scores . sort ( 0 ) # \u4e0a\u5347\u6392\u5e8f\uff0c\u8fd4\u56devalues,indexs # I = I[v >= 0.01] idx = idx [ - top_k :] # \u4e0a\u5347\u6392\u5e8f\u7d22\u5f15\uff0c\u53d6topk\u4e2a\uff0c\u8fd9k\u4e2a\u6846\u7528\u6765\u904d\u5386\u6c42\u89e3 xx1 = boxes . new () # \u590d\u5236boxes\u7684\u4e00\u5207\u5c5e\u6027\uff0c\u4f46value=[] yy1 = boxes . new () xx2 = boxes . new () yy2 = boxes . new () w = boxes . new () h = boxes . new () # keep = torch.Tensor() count = 0 while idx . numel () > 0 : # torch.numel() \u8fd4\u56detensor\u53d8\u91cf\u5185\u6240\u6709\u5143\u7d20\u4e2a\u6570 i = idx [ - 1 ] # \u53d6\u6700\u5927\u503c\u7684\u7d22\u5f15 # keep.append(i) keep [ count ] = i # \u4fdd\u7559score\u6700\u5927\u7684\u6846\u7d22\u5f15 count += 1 if idx . size ( 0 ) == 1 : break idx = idx [: - 1 ] # \u904d\u5386\u7684\u65f6\u5019\u6392\u9664\u6700\u5927score\u7684\u6846 # torch.index_select(input,dim,index,out=None) # \u6cbf\u7740\u6307\u5b9a\u7ef4\u5ea6\u5bf9\u8f93\u5165\u8fdb\u884c\u5207\u7247\uff0c\u53d6index\u4e2d\u7684\u6307\u5b9a\u7684\u76f8\u5e94\u9879\uff0c\u7136\u540e\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684\u5f20\u91cf(\u4e0d\u5171\u4eab\u5185\u5b58\u7a7a\u95f4) # input(tensor)->\u8f93\u5165\u5f20\u91cf;dim(int:0/1)->\u7d22\u5f15\u7684\u8f74;index(LongTensor)->\u5305\u542b\u7d22\u5f15\u4e0b\u6807\u7684\u4e00\u7ef4\u5f20\u91cf;out(Tensor)->\u76ee\u6807\u5f20\u91cf torch . index_select ( x1 , 0 , idx , out = xx1 ) # \u6839\u636eidx\u7d22\u5f15\uff0c\u53bb\u9664x1\u7684\u503c\uff0c\u653e\u5230xx1\u91cc\u9762 torch . index_select ( y1 , 0 , idx , out = yy1 ) torch . index_select ( x2 , 0 , idx , out = xx2 ) torch . index_select ( y2 , 0 , idx , out = yy2 ) # store element-wise max with next highest score xx1 = torch . clamp ( xx1 , min = x1 [ i ]) yy1 = torch . clamp ( yy1 , min = y1 [ i ]) xx2 = torch . clamp ( xx2 , max = x2 [ i ]) yy2 = torch . clamp ( yy2 , max = y2 [ i ]) w . resize_as_ ( xx2 ) h . resize_as_ ( yy2 ) w = xx2 - xx1 h = yy2 - yy1 # check sizes of xx1 and xx2.. after each iteration w = torch . clamp ( w , min = 0.0 ) h = torch . clamp ( h , min = 0.0 ) inter = w * h # IoU = i / (area(a) + area(b) - i) rem_areas = torch . index_select ( area , 0 , idx ) # load remaining areas) union = ( rem_areas - inter ) + area [ i ] IoU = inter / union # store result in iou # keep only elements with an IoU <= overlap idx = idx [ IoU . le ( overlap )] # IoU.le(val) \u8fd4\u56de\u7684\u662fTrue/False\u7ec4\u6210\u7684\u5411\u91cf return keep , count # \u4f7f\u7528 ids , count = nms ( ... ) torch . cat (( scores [ ids [: count ]] . unsqueeze ( 1 ), bboxes [ ids [: count ]]), 1 ) DIoU-NMS def diounms ( boxes , scores , overlap = 0.5 , top_k = 200 , beta1 = 1.0 ): \"\"\"Apply DIoU-NMS at test time to avoid detecting too many overlapping bounding boxes for a given object. Args: boxes: (tensor) The location preds for the img, Shape: [num_priors,4]. scores: (tensor) The class predscores for the img, Shape:[num_priors]. overlap: (float) The overlap thresh for suppressing unnecessary boxes. top_k: (int) The Maximum number of box preds to consider. beta1: (float) DIoU=IoU-R_DIoU^{beta1}. Return: The indices of the kept boxes with respect to num_priors. \"\"\" keep = scores . new ( scores . size ( 0 )) . zero_ () . long () if boxes . numel () == 0 : return keep x1 = boxes [:, 0 ] y1 = boxes [:, 1 ] x2 = boxes [:, 2 ] y2 = boxes [:, 3 ] area = torch . mul ( x2 - x1 , y2 - y1 ) v , idx = scores . sort ( 0 ) # sort in ascending order # I = I[v >= 0.01] idx = idx [ - top_k :] # indices of the top-k largest vals xx1 = boxes . new () yy1 = boxes . new () xx2 = boxes . new () yy2 = boxes . new () w = boxes . new () h = boxes . new () # keep = torch.Tensor() count = 0 while idx . numel () > 0 : i = idx [ - 1 ] # index of current largest val # keep.append(i) keep [ count ] = i count += 1 if idx . size ( 0 ) == 1 : break idx = idx [: - 1 ] # remove kept element from view # load bboxes of next highest vals torch . index_select ( x1 , 0 , idx , out = xx1 ) torch . index_select ( y1 , 0 , idx , out = yy1 ) torch . index_select ( x2 , 0 , idx , out = xx2 ) torch . index_select ( y2 , 0 , idx , out = yy2 ) # store element-wise max with next highest score inx1 = torch . clamp ( xx1 , min = x1 [ i ]) iny1 = torch . clamp ( yy1 , min = y1 [ i ]) inx2 = torch . clamp ( xx2 , max = x2 [ i ]) iny2 = torch . clamp ( yy2 , max = y2 [ i ]) center_x1 = ( x1 [ i ] + x2 [ i ]) / 2 center_y1 = ( y1 [ i ] + y2 [ i ]) / 2 center_x2 = ( xx1 + xx2 ) / 2 center_y2 = ( yy1 + yy2 ) / 2 d = ( center_x1 - center_x2 ) ** 2 + ( center_y1 - center_y2 ) ** 2 cx1 = torch . clamp ( xx1 , max = x1 [ i ]) cy1 = torch . clamp ( yy1 , max = y1 [ i ]) cx2 = torch . clamp ( xx2 , min = x2 [ i ]) cy2 = torch . clamp ( yy2 , min = y2 [ i ]) c = ( cx2 - cx1 ) ** 2 + ( cy2 - cy1 ) ** 2 u = d / c w . resize_as_ ( xx2 ) h . resize_as_ ( yy2 ) w = inx2 - inx1 h = iny2 - iny1 # check sizes of xx1 and xx2.. after each iteration w = torch . clamp ( w , min = 0.0 ) h = torch . clamp ( h , min = 0.0 ) inter = w * h # IoU = i / (area(a) + area(b) - i) rem_areas = torch . index_select ( area , 0 , idx ) # load remaining areas) union = ( rem_areas - inter ) + area [ i ] IoU = inter / union - u ** beta1 # store result in diou # keep only elements with an IoU <= overlap idx = idx [ IoU . le ( overlap )] return keep , count","title":"NMS\u53ca\u5176\u53d8\u4f53"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#_2","text":"\u4ee3\u7801\u6301\u7eed\u66f4\u65b0 \u5373\u63d2\u5373\u7528\u6a21\u5757\u4e00\u822c\u662f\u4f5c\u4e3a\u4e00\u4e2a\u72ec\u7acb\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u7528\u4e8e\u53d6\u4ee3\u666e\u901a\u7684\u5377\u79ef\u7ed3\u6784\uff0c\u6216\u8005\u76f4\u63a5\u63d2\u5165\u7f51\u7edc\u7ed3\u6784\u4e2d\uff0c\u7528\u7684\u597d\u6709\u5947\u6548\uff0c\u5c31\u770b\u4f60\u4f1a\u7528\u4e0d\u4f1a\u7528\uff0c\u5177\u4f53\u63d2\u5165\u4ec0\u4e48\u4f4d\u7f6e\u6700\u597d\u770b\u4e00\u4e0b\u8bba\u6587\uff0c\u4e00\u822c\u800c\u8a00\u5e38\u63d2\u5165\u56db\u4e2a\u4f4d\u7f6e\u3002 \u74f6\u9888\u5c42\uff1a\u6bd4\u5982 ResNet\uff0cDenseNet \u7684\u74f6\u9888\u5c42\u3002 \u4e0a\u91c7\u6837\u5c42\uff1a\u6bd4\u5982 FPN \u5206\u652f\uff0cAttention UNet\u3002 \u9aa8\u5e72\u7f51\u7edc\u6700\u540e\u4e00\u5c42\uff1a\u6bd4\u5982 SPP, ASPP \u7b49 \u6240\u6709\u7684 3x3 \u5377\u79ef\uff1a\u6bd4\u5982\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef\u7b49 \u6ce8\u610f\u529b\u6a21\u5757 code AFF(\u6ce8\u610f\u529b**\u7279\u5f81\u878d\u5408**:\u6027\u80fd\u4f18\u4e8eSKNet\u3001SENet) SENet SKNet(SENet\u7684\u6539\u8fdb) scSE(SENet\u7684\u6539\u8fdb,\u5206\u5272\u7f51\u7edc\u5e38\u7528) Non-Local Net(\u8ba1\u7b97\u91cf\u8fc7\u5927,\u901a\u7528,\u89c6\u9891\u5206\u7c7b\u6548\u679c\u66f4\u597d) GCNet(\u89e3\u51b3Non-Local Net\u8ba1\u7b97\u91cf\u8fc7\u5927\u95ee\u9898:Non-Local Net+SENet\u4f18\u70b9) CCNet(Non-Local Net\u53d1\u5c55\u5f97\u5230\uff0c\u8bed\u4e49\u5206\u5272\u5e38\u7528) CBAM(Faster-Rcnn\u4e24\u4e2a\u70b9\u63d0\u5347,\u901a\u9053\u7a7a\u95f4\u4e32\u8054) BAM(CBAM\u540c\u4f5c\u8005,\u901a\u9053\u7a7a\u95f4\u5e76\u8054) SplitAttention(ResNeSt = SENet + SKNet + ResNeXt\uff0c \u8bba\u6587 ) MS-CAM\u2192(AFF\u6a21\u5757/iAFF\u6a21\u5757) | code | \u8bba\u6587 | \u535a\u5ba2 \u4e00\u822c\u7684\u7279\u5f81\u878d\u5408(\u6765\u81ea\u4e0d\u540c\u5c42\u6216\u5206\u652f\u7684\u7279\u5f81\u7684\u7ec4\u5408)\u901a\u5e38\u90fd\u662f\u901a\u8fc7\u7b80\u5355\u7684\u6c42\u548c\u6216\u4e32\u8054\u5b9e\u73b0\uff0c\u4f46\u8fd9\u5e76\u4e0d\u662f\u6700\u4f73\u9009\u62e9\uff0c\u672c\u7bc7\u5254\u9664\u6ce8\u610f\u529b\u7279\u5f81\u878d\u5408\uff0c\u9002\u7528\u4e8e\u5927\u591a\u6570\u573a\u666f\uff0c\u6bd4\u5982resnet/inception\u7b49\u5c42\u7684\u7279\u5f81\u878d\u5408\u3002\u5c3a\u5ea6\u4e0d\u540c\u5982\u4f55\u878d\u5408\uff1a\u63d0\u51fa\u4e5f\u4e86\u4e00\u4e2a\u591a\u5c3a\u5ea6\u7684\u901a\u9053\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u8be5\u6a21\u5757\u89e3\u51b3\u4e86\u5728\u878d\u5408\u4e0d\u540c\u5c3a\u5ea6\u7684\u7279\u5f81\u65f6\u51fa\u73b0\u7684\u95ee\u9898\u3002\u540c\u65f6\u8fd8\u901a\u8fc7\u6dfb\u52a0\u53e6\u4e00\u4e2a\u6ce8\u610f\u529b\u7ea7\u522b\uff08\u79f0\u4e3a\u8fed\u4ee3\u6ce8\u610f\u529b\u7279\u5f81\u878d\u5408\uff09\u6765\u7f13\u89e3\u7279\u5f81\u56fe\u7684\u521d\u59cb\u96c6\u6210\u7684\u74f6\u9888\u3002 Multi-Scale Channel Attention Module(MS-CAM) :\u6838\u5fc3\u601d\u60f3\u662f\u901a\u8fc7\u6539\u53d8\u7a7a\u95f4\u6c60\u7684\u5927\u5c0f\uff0c\u53ef\u4ee5\u5728\u591a\u4e2a\u5c3a\u5ea6\u4e0a\u5b9e\u73b0\u901a\u9053\u5173\u6ce8;\u9009\u62e9\u9010\u70b9\u5377\u79ef(PWConv)\u4f5c\u4e3a\u901a\u9053\u4e0a\u4e0b\u6587\u878d\u5408\u5668\uff0c\u5b83\u53ea\u5229\u7528\u6bcf\u4e2a\u7a7a\u95f4\u4f4d\u7f6e\u7684\u70b9\u5411\u901a\u9053\u878d\u5408\u3002 class ResGlobLocaChaFuse ( HybridBlock ): def __init__ ( self , channels = 64 ): super ( ResGlobLocaChaFuse , self ) . __init__ () with self . name_scope (): self . local_att = nn . HybridSequential ( prefix = 'local_att' ) self . local_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . local_att . add ( nn . BatchNorm ()) self . global_att = nn . HybridSequential ( prefix = 'global_att' ) self . global_att . add ( nn . GlobalAvgPool2D ()) self . global_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . global_att . add ( nn . BatchNorm ()) self . sig = nn . Activation ( 'sigmoid' ) def hybrid_forward ( self , F , x , residual ): xa = x + residual xl = self . local_att ( xa ) xg = self . global_att ( xa ) xlg = F . broadcast_add ( xl , xg ) wei = self . sig ( xlg ) xo = 2 * F . broadcast_mul ( x , wei ) + 2 * F . broadcast_mul ( residual , 1 - wei ) return xo AFF\u6a21\u5757 :\u57fa\u4e8e\u591a\u5c3a\u5ea6\u4fe1\u9053\u7684\u6ce8\u610f\u6a21\u5757M\uff0cAttentional Feature Fusion (AFF) \u53ef\u4ee5\u88ab\u8868\u8fbe\u4e3a class AXYforXplusYAddFuse ( HybridBlock ): def __init__ ( self , channels = 64 ): super ( AXYforXplusYAddFuse , self ) . __init__ () with self . name_scope (): self . local_att = nn . HybridSequential ( prefix = 'local_att' ) self . local_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . local_att . add ( nn . BatchNorm ()) self . global_att = nn . HybridSequential ( prefix = 'global_att' ) self . global_att . add ( nn . GlobalAvgPool2D ()) self . global_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . global_att . add ( nn . BatchNorm ()) self . sig = nn . Activation ( 'sigmoid' ) def hybrid_forward ( self , F , x , residual ): xi = x + residual xl = self . local_att ( xi ) xg = self . global_att ( xi ) xlg = F . broadcast_add ( xl , xg ) wei = self . sig ( xlg ) xo = F . broadcast_mul ( wei , residual ) + x return xo iAFF\u6a21\u5757 :\u5b8c\u5168\u4e0a\u4e0b\u6587\u611f\u77e5\u65b9\u6cd5\u6709\u4e00\u4e2a\u4e0d\u53ef\u907f\u514d\u7684\u95ee\u9898\uff0c\u5373\u5982\u4f55\u521d\u59cb\u5730\u96c6\u6210\u8f93\u5165\u7279\u6027\u3002\u521d\u59cb\u878d\u5408\u8d28\u91cf\u4f5c\u4e3a\u6ce8\u610f\u529b\u6a21\u5757\u7684\u8f93\u5165\u4f1a\u5bf9\u6700\u7ec8\u878d\u5408\u6743\u91cd\u4ea7\u751f\u5f71\u54cd\u3002\u7531\u4e8e\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u7279\u5f81\u878d\u5408\u95ee\u9898\uff0c\u4e00\u79cd\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u4f7f\u7528\u53e6\u4e00\u4e2aattention\u6a21\u5757\u6765\u878d\u5408\u8f93\u5165\u7684\u7279\u5f81\uff0c\u5373iterative Attentional Feature Fusion (iAFF)\uff1a class AXYforXYAddFuse ( HybridBlock ): def __init__ ( self , channels = 64 ): super ( AXYforXYAddFuse , self ) . __init__ () with self . name_scope (): self . local_att = nn . HybridSequential ( prefix = 'local_att' ) self . local_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . local_att . add ( nn . BatchNorm ()) self . global_att = nn . HybridSequential ( prefix = 'global_att' ) self . global_att . add ( nn . GlobalAvgPool2D ()) self . global_att . add ( nn . Conv2D ( channels , kernel_size = 1 , strides = 1 , padding = 0 )) self . global_att . add ( nn . BatchNorm ()) self . sig = nn . Activation ( 'sigmoid' ) def hybrid_forward ( self , F , x , residual ): xi = x + residual xl = self . local_att ( xi ) xg = self . global_att ( xi ) xlg = F . broadcast_add ( xl , xg ) wei = self . sig ( xlg ) xo = F . broadcast_mul ( wei , xi ) return xo SENet | \u8bba\u6587 \u5c06\u5168\u5c40\u7a7a\u95f4\u4fe1\u606f\u538b\u7f29\u5230\u901a\u9053\u63cf\u8ff0\u4e2d\uff0c\u4ee5\u6355\u83b7\u4e0e\u901a\u9053\u7684\u4f9d\u8d56\u5173\u7cfb\u3002 Ftr :\u4f20\u7edf\u7684\u5377\u79ef\u7f51\u7edc, X \u4e0e U \u662f\u8f93\u5165\u548c\u8f93\u51fa\uff0c U \u4e4b\u540e\u662f\u65b0\u589e\u7684 \u4e0a\u534a\u90e8\u5206 F_sq(.) :\u5148\u5bf9 U \u505a\u4e2a Global Average Pooling \uff0c\u5373 Squeeze \u8fc7\u7a0b\uff0c\u8f93\u51fa 1x1xC 1x1 :\u56e0\u4e3a\u6700\u7ec8\u7684 scale \u662f\u5bf9\u6574\u4e2a\u901a\u9053\u4f5c\u7528\u7684\uff0c\u4f5c\u8005\u5229\u7528\u7684\u662f\u901a\u9053\u95f4\u7684\u76f8\u5173\u6027\u800c\u975e\u7a7a\u95f4\u5206\u5e03\u76f8\u5173\u6027\uff0c\u6240\u4ee5\u5c06\u7a7a\u95f4\u4e0a\u6240\u6709\u70b9\u7684\u4fe1\u606f\u90fd\u5e73\u5747\u6210\u4e86\u4e00\u4e2a\u503c\u3002 F_ex(.) :\u518d\u7ecf\u8fc7\u4e24\u7ea7\u5168\u8fde\u63a5,\u5c5e\u4e8e Excitation \u4e3a\u4ec0\u4e48\u7528\u5168\u8fde\u63a5\u5c42:\u4e3a\u4e86\u5229\u7528\u901a\u9053\u95f4\u7684\u76f8\u5173\u6027\u6765\u8bad\u7ec3\u51fa\u771f\u6b63\u7684scale\u3002 \u5982\u679c\u65e0\u5168\u8fde\u63a5\u5c42\uff0c\u90a3\u4e48\u4e0a\u9762\u5206\u652f\u6839\u672c\u65e0\u53cd\u5411\u8ba1\u7b97\u3001\u65e0\u8bad\u7ec3\u7684\u8fc7\u7a0b\uff0c\u5c31\u65e0\u6cd5\u57fa\u4e8e\u5168\u90e8\u6570\u636e\u96c6\u6765\u8bad\u7ec3\u5f97\u51fa\u901a\u9053\u589e\u5f3a\u3001\u51cf\u5f31\u7684\u89c4\u5f8b\u3002 \u6709\u4eba\u4f1a\u8bf4\u5377\u79ef\u8bad\u7ec3\u51fa\u7684\u6743\u503c\u5c31\u542b\u6709\u4e86scale\u7684\u6210\u5206\u5728\u91cc\u9762\uff0c\u4e5f\u5229\u7528\u4e86\u901a\u9053\u95f4\u7684\u76f8\u5173\u6027\uff0c\u4e3a\u5565\u8fd8\u8981\u591a\u4e2a SE Block \uff1f \u56e0\u4e3a\u8fd9\u79cd\u5377\u79ef\u6709\u7a7a\u95f4\u7684\u6210\u5206\u5728\u91cc\u9762\uff0c\u4e3a\u4e86\u6392\u9664\u7a7a\u95f4\u4e0a\u7684\u5e72\u6270\u5c31\u5f97\u5148\u7528GAP\u538b\u7f29\u6210\u4e00\u4e2a\u70b9\u540e\u518d\u4f5c\u5377\u79ef\uff0c\u538b\u7f29\u540e\u56e0\u4e3a\u6ca1\u6709\u4e86 Height \u3001 Width \u7684\u6210\u5206\uff0c\u8fd9\u79cd\u5377\u79ef\u5c31\u662f\u5168\u8fde\u63a5\u4e86\u3002 \u7b2c\u4e00\u4e2a\u5168\u8fde\u63a5\u628a C \u4e2a\u901a\u9053\u538b\u7f29\u6210\u4e86 C/r \u4e2a\u901a\u9053\u6765\u964d\u4f4e\u8ba1\u7b97\u91cf\uff08\u540e\u9762\u8ddf\u4e86 RELU \uff09 r \u662f\u6307\u538b\u7f29\u7684\u6bd4\u4f8b\u3002\u4f5c\u8005\u5c1d\u8bd5\u4e86 r \u5728\u5404\u79cd\u53d6\u503c\u4e0b\u7684\u6027\u80fd \uff0c\u6700\u540e\u5f97\u51fa\u7ed3\u8bba r=16 \u65f6\u6574\u4f53\u6027\u80fd\u548c\u8ba1\u7b97\u91cf\u6700\u5e73\u8861\u3002 \u7b2c\u4e8c\u4e2a\u5168\u8fde\u63a5\u518d\u6062\u590d\u56de C \u4e2a\u901a\u9053\uff08\u540e\u9762\u8ddf\u4e86 Sigmoid \uff09 \u6700\u540e\u7528 sigmoid \u9650\u5236\u5230 [0,1] \u8303\u56f4 \u4e0b\u534a\u90e8\u5206 F_scale(.) :\u4e0a\u534a\u90e8\u5206\u8f93\u51fa\u4f5c\u4e3a scale \u4e58\u5230 U\u7684C\u4e2a\u901a\u9053 \u4e0a\uff0c \u4f5c\u4e3a\u4e0b\u4e00\u7ea7\u7684\u8f93\u5165\u6570\u636e \u603b\u7ed3 \u539f\u7406 :\u901a\u8fc7\u63a7\u5236 scale \u7684\u5927\u5c0f\uff0c SENet \u628a\u91cd\u8981\u901a\u9053\u7684\u7279\u5f81\u5f3a\u5316\uff0c\u975e\u91cd\u8981\u901a\u9053\u7684\u7279\u5f81\u5f31\u5316\uff0c\u4ece\u800c\u8ba9\u63d0\u53d6\u7684\u7279\u5f81\u6307\u5411\u6027\u66f4\u5f3a\u3002 \u5e94\u7528 import torch.nn as nn class SELayer ( nn . Module ): def __init__ ( self , channel , reduction = 16 ): super ( SELayer , self ) . __init__ () self . avgpool = nn . AdaptiveAvgPool2d ( 1 ) #\u81ea\u9002\u5e94\u5e73\u5747\u6c60\u5316,\u901a\u9053\u6570\u4e0d\u6539\u53d8\uff0c\u53ea\u7ed9outsize=xx\u5373\u53ef->(b,n,1,1) self . fc = nn . Sequential ( nn . Linear ( channel , channel // reduction , bias = False ), nn . ReLU ( inplace = True ), nn . Linear ( channel // reduction , channel , bias = False ), nn . Sigmoid () ) def forward ( self , x ): b , c , h , w = x . size () y = self . avgpool ( x ) . view ( b , c ) # shape->(b,c) y = self . fc ( y ) . view ( b , c , 1 , 1 ) return x * y . expand_as ( x ) SkNet(SENet\u7684\u6539\u8fdb) | \u8bba\u6587 \u597d\u591a\u7f51\u7edc\u4f7f\u7528\u4e86\u5404\u79cd Trick \u964d\u4f4e\u8ba1\u7b97\u91cf\uff0c\u5982 ResNeXt \uff0c\u8ba1\u7b97\u91cf\u7684\u51cf\u5c11\uff0c\u7cbe\u5ea6\u5374\u7565\u6709\u63d0\u5347\u3002\u90a3\u4e48\u5982\u679c\u4e0d\u727a\u7272\u592a\u591a\u8ba1\u7b97\u91cf\u7cbe\u5ea6\u662f\u5426\u80fd\u518d\u63d0\u9ad8\u4e00\u70b9\uff1f\u6bd4\u5982\u4f7f\u7528\u5927\u7684 KerNel=5x5 \u7ed3\u5408\u73b0\u6709\u666e\u904d\u4f7f\u7528\u7684 Attention \u64cd\u4f5c \u52a0\u4e86\u4e0a\u9762\u4e24\u4e2a\u64cd\u4f5c\u4e4b\u540e\uff0c\u663e\u7136\u8ba1\u7b97\u91cf\u4f1a\u4e0a\u53bb\uff0c\u4e8e\u662f\u4f5c\u8005\u518d\u52a0\u4e86\u4e00\u4e2a Group Convlution \u6765\u505a trade off Split :\u8f93\u5165 c*h*w \u7684\u7279\u5f81\u56fe\uff0c F^,F~ \u5747\u8868\u793a Group Convlution (\u5206\u7ec4\u5377\u79ef:\u51cf\u5c11\u8ba1\u7b97\u91cf)\uff0c\u4e24\u8005\u5377\u79ef\u6838\u5927\u5c0f\u4e0d\u540c\u76ee\u7684\u5728\u4e8e\u63d0\u5347\u7cbe\u5ea6\u3002 Fuse :\u901a\u8fc7 Split \u64cd\u4f5c\u5206\u6210\u4e24\u8def,\u5404\u8def\u8fdb\u884c\u4e00\u4e2a Sequeeze and Excitation block \u64cd\u4f5c\u3002 Select \uff1a\u628a Sequeeze and Excitation block \u6a21\u5757\u7684\u7ed3\u679c\u901a\u8fc7\u4e24\u4e2a softmax \u4ee5\u56de\u5f52\u51fa Channel \u4e4b\u95f4\u7684\u6743\u91cd\u4fe1\u606f\u3002\u7136\u540e\u628a\u8fd9\u4e2a\u6743\u91cd\u4fe1\u606f\u4e58\u5230 U^,U~ \u4e2d\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u770b\u505a\u662f\u4e00\u4e2a `soft attention \u3002\u6700\u540e\u628a\u4e24\u8def\u7684\u7279\u5f81\u56fe\u8fdb\u884c\u76f8\u52a0\u5f97\u5230\u8f93\u51fa\u7279\u5f81\u56fe V Select \u90e8\u5206\u7684 attention \u4e0d\u4ec5\u8003\u8651\u4e86 Channel \u4e4b\u95f4\u7684\u6743\u91cd\uff0c\u8fd8\u8003\u8651\u4e86\u4e24\u8def\u5377\u79ef\u7684\u6743\u91cd. import torch.nn as nn import torch class SKConv ( nn . Module ): def __init__ ( self , features , WH , M , G , r , stride = 1 , L = 32 ): \"\"\" Constructor Args: features: input channel dimensionality. WH: input spatial dimensionality, used for GAP kernel size. M: the number of branchs. G: num of convolution groups. r: the radio for compute d, the length of z. stride: stride, default 1. L: the minimum dim of the vector z in paper, default 32. \"\"\" super ( SKConv , self ) . __init__ () d = max ( int ( features / r ), L ) # \u83b7\u53d6Fuse\u7684z\u6a21\u5757fc\u7684\u538b\u7f29\u901a\u9053\uff0c\u5176\u5b9e\u5c31\u662f\u4e0a\u56fe\u7684z self . M = M # \u5206\u652f\u6570\u91cf self . features = features # \u8f93\u5165\u901a\u9053 self . convs = nn . ModuleList ([]) for i in range ( M ): # \u904d\u5386M\u4e2a\u5206\u652f\u4f9d\u6b21\u52a0\u5165\u5230self.convs\u4e2d\uff0c\u53ea\u4e0d\u8fc7\u6bcf\u4e2a\u5206\u652f\u7684kernel\u548cpadding\u4e0d\u540c self . convs . append ( nn . Sequential ( nn . Conv2d ( features , features , kernel_size = 3 + i * 2 , stride = stride , padding = 1 + i , groups = G ), # \u5206\u7ec4\u5377\u79ef,channel/groups,groups=feature\u4e3a\u6df1\u5ea6\u53ef\u5206\u79bb\u5377 nn . BatchNorm2d ( features ), nn . ReLU ( inplace = False ))) # self.gap = nn.AvgPool2d(int(WH/stride)) self . fc = nn . Linear ( features , d ) self . fcs = nn . ModuleList ([]) # M\u4e2a\u5206\u652f\u7684fc\u5217\u8868 for i in range ( M ): self . fcs . append ( nn . Linear ( d , features )) self . softmax = nn . Softmax ( dim = 1 ) def forward ( self , x ): for i , conv in enumerate ( self . convs ): # 3\u5206\u652f\u65f6\u662f\u56fe\u4e2d\u7684u1,u2,u3 fea = conv ( x ) . unsqueeze_ ( dim = 1 ) # torch.Size([b, 1, c, h, w]),\u6269\u5c55dim=1\u8fd9\u4e2a\u901a\u9053\u662f\u4e3a\u4e863\u5206\u652f\u7684concat if i == 0 : feas = fea else : feas = torch . cat ([ feas , fea ], dim = 1 ) fea_U = torch . sum ( feas , dim = 1 ) # fea_U.shape->[b,c,h,w],dim=1\u56e0\u4e3a\u76f8\u52a0\u540e\u6d88\u5931 # fea_U:\u662f\u4e0a\u56fe\u4e2d\u7b2c\u4e00\u4e2a+ # fea_s = self.gap(fea_U).squeeze_() fea_s = fea_U . mean ( - 1 ) . mean ( - 1 ) # \u6cbf\u7740H*W\u9762\u8fdb\u884c\u5e73\u5747\uff0c\u7c7b\u4f3cadaptivaAvgPool2d fea_s.shape:[b,c]\u3002h,w\u56e0\u4e3amean\u540e\u6d88\u5931 fea_z = self . fc ( fea_s ) # \u901a\u9053\u538b\u7f29:[b,c]->[b,z] for i , fc in enumerate ( self . fcs ): # \u653e\u5927\u901a\u9053:z->c\uff0c\u5e76\u4e14M\u4e2a\u5206\u652f\u5904\u7406 vector = fc ( fea_z ) . unsqueeze_ ( dim = 1 ) # [b,1,z] if i == 0 : attention_vectors = vector else : attention_vectors = torch . cat ([ attention_vectors , vector ], dim = 1 ) # attention_vectors.shape->[b,M,c] attention_vectors = self . softmax ( attention_vectors ) attention_vectors = attention_vectors . unsqueeze ( - 1 ) . unsqueeze ( - 1 ) # [b,M,c,1,1] fea_v = ( feas * attention_vectors ) . sum ( dim = 1 ) # \u4e0a\u56fe\u4e09\u6761\u8df3\u8dc3\u7ebf,M\u4e2a\u5206\u652f\u901a\u9053\u5404\u81ea\u76f8\u4e58\u5e76\u6c42\u548c return fea_v if __name__ == \"__main__\" : t = torch . ones (( 32 , 256 , 24 , 24 )) sk = SKConv ( 256 , WH = 1 , M = 2 , G = 1 , r = 2 ) out = sk ( t ) print ( out . shape ) # torch.Size([32, 256, 24, 24])\uff0c\u8f93\u5165\u548c\u8f93\u51fa\u5927\u5c0f\u4e00\u6837 SCSE | \u8bba\u6587 scSE \u5206\u4e3a\u4e24\u4e2a\u6a21\u5757:\u4e00\u4e2a\u662f sSE \u548c cSE \u6a21\u5757\uff0c\u5206\u522b\u662f\u7a7a\u95f4\u6ce8\u610f\u529b\u548c\u901a\u9053\u6ce8\u610f\u529b\uff0c\u6700\u7ec8\u4ee5\u76f8\u52a0\u7684\u65b9\u5f0f\u878d\u5408\u3002\u8bba\u6587\u4e2d\u53ea\u5c06\u5176\u4f7f\u7528\u5728**\u5206\u5272\u6a21\u578b**(\u5bf9\u8bed\u4e49\u5206\u5272\u51c6\u786e\u7387\u63d0\u5347\u8f83\u5927\u800c\u4e14\u4f7f\u5206\u5272\u8fb9\u754c\u66f4\u5e73\u6ed1)\u4e2d\uff0c\u5728\u5f88\u591a\u56fe\u50cf\u5206\u5272\u6bd4\u8d5b\u4e2d\u90fd\u6709\u7528\u5230\u8fd9\u4e2a\u6a21\u5757\u4f5c\u4e3a trick(\u6bd4\u5982 UNet ,\u53ef\u4ee5\u653e\u5728\u6bcf\u4e2a\u5377\u79ef\u5c42\u540e\u9762)\u3002 cSE(\u901a\u9053\u6ce8\u610f\u529b) \u5c06 feature map \u901a\u8fc7 global average pooling \u65b9\u6cd5\u4ece [C, H, W] \u53d8\u4e3a [C, 1, 1] \u7136\u540e\u4f7f\u7528\u4e24\u4e2a 1\u00d71 \u5377\u79ef\u8fdb\u884c\u4fe1\u606f\u7684\u5904\u7406\uff0c\u6700\u7ec8\u5f97\u5230C\u7ef4\u7684\u5411\u91cf \u7136\u540e\u4f7f\u7528 sigmoid \u51fd\u6570\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u5f97\u5230\u5bf9\u5e94\u7684mask \u6700\u540e\u901a\u8fc7 channel-wise \u76f8\u4e58\uff0c\u5f97\u5230\u7ecf\u8fc7\u4fe1\u606f\u6821\u51c6\u8fc7\u7684 feature map sSE(\u7a7a\u95f4\u6ce8\u610f\u529b) \u76f4\u63a5\u5bf9 feature map \u4f7f\u7528 1\u00d71 \u5377\u79ef, \u4ece [C, H, W] \u53d8\u4e3a [1, H, W] \u7684features \u7136\u540e\u4f7f\u7528 sigmoid \u8fdb\u884c\u6fc0\u6d3b\u5f97\u5230 spatial attention map \u7136\u540e\u76f4\u63a5\u65bd\u52a0\u5230\u539f\u59cbfeature map\u4e2d\uff0c\u5b8c\u6210\u7a7a\u95f4\u7684\u4fe1\u606f\u6821\u51c6 # \u8f93\u5165\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\u4e00\u6837 class cSE ( nn . Module ): def __init__ ( self , in_channels ): super () . __init__ () self . avgpool = nn . AdaptiveAvgPool2d ( 1 ) # gap->[b,c,1,1] self . Conv_Squeeze = nn . Conv2d ( in_channels , in_channels // 2 , kernel_size = 1 , bias = False ) self . Conv_Excitation = nn . Conv2d ( in_channels // 2 , in_channels , kernel_size = 1 , bias = False ) self . norm = nn . Sigmoid () def forward ( self , U ): z = self . avgpool ( U ) # shape: [b, c, h, w] to [b, c, 1, 1] z = self . Conv_Squeeze ( z ) # shape: [b, c/2, 1, 1] z = self . Conv_Excitation ( z ) # shape: [b, c, 1, 1] z = self . norm ( z ) # \u6fc0\u6d3b\u51fd\u6570z^\u7528sigmoid -> [b,c,1,1] return U * z . expand_as ( U ) # [b,c,h,w] # \u8f93\u5165\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\u4e00\u6837 class sSE ( nn . Module ): def __init__ ( self , in_channels ): super () . __init__ () self . Conv1x1 = nn . Conv2d ( in_channels , 1 , kernel_size = 1 , bias = False ) self . norm = nn . Sigmoid () def forward ( self , U ): q = self . Conv1x1 ( U ) # U:[b,c,h,w] to q:[b,1,h,w] q = self . norm ( q ) return U * q # [b,c,h,w] # \u8f93\u5165\u7ef4\u5ea6\u548c\u8f93\u51fa\u7ef4\u5ea6\u4e00\u6837 class csSE ( nn . Module ): def __init__ ( self , in_channels ): super () . __init__ () self . cSE = cSE ( in_channels ) self . sSE = sSE ( in_channels ) def forward ( self , U ): U_sse = self . sSE ( U ) U_cse = self . cSE ( U ) return U_cse + U_sse if __name__ == \"__main__\" : b , c , h , w = 10 , 3 , 64 , 64 in_tensor = torch . ones ( b , c , h , w ) cs_se = csSE ( c ) print ( \"in shape:\" , in_tensor . shape ) out_tensor = cs_se ( in_tensor ) print ( \"out shape:\" , out_tensor . shape ) Non-Local Net | \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2\u8be6\u89e3 NLNet \u4e3b\u8981\u501f\u9274\u4e86\u4f20\u7edf\u65b9\u6cd5\u4e2d\u7684\u975e\u5c40\u90e8\u5747\u503c\u6ee4\u6ce2\u8bbe\u8ba1\u4e86 Non-Local \u5168\u5c40\u6ce8\u610f\u529b\uff0c\u867d\u7136\u6548\u679c\u597d\uff0c \u4f46\u662f\u8ba1\u7b97\u91cf\u504f\u5927\uff0c\u5efa\u8bae\u4e0d\u8981\u5728\u5e95\u5c42\u7f51\u7edc\u4f7f\u7528\uff0c\u53ef\u4ee5\u9002\u5f53\u5728**\u9ad8\u5c42\u7f51\u7edc**\u4e2d\u4f7f\u7528\uff0c\u7ecf\u8fc7\u4f5c\u8005\u5b9e\u9a8c\uff0c\u8bc1\u660e\u4e86\u5176\u53ef\u4ee5\u5e94\u7528\u4e8e\u56fe\u50cf\u5206\u7c7b\u3001\u76ee\u6807\u68c0\u6d4b\u3001\u76ee\u6807\u5206\u5272\u3001\u59ff\u6001\u8bc6\u522b\u7b49\u89c6\u89c9\u4efb\u52a1\u4e2d\uff0c\u5e76\u4e14\u6548\u679c\u6709\u4e0d\u540c\u7a0b\u5ea6\u7684\u63d0\u5347\uff0c\u5728**\u89c6\u9891\u5206\u7c7b**\u4e0a\u6548\u679c\u5f88\u597d\uff0c\u5728\u89c6\u9891\u5206\u7c7b\u7684\u4efb\u52a1\u4e2d\u6548\u679c\u53ef\u89c2\u3002 # \u4ee3\u7801\u89c1\u535a\u5ba2\u8be6\u89e3 GCNet | \u8bba\u6587 | \u535a\u5ba2\u8be6\u89e3 GCNet \u4e3b\u8981\u9488\u5bf9 Non-Local \u8ba1\u7b97\u91cf\u8fc7\u5927\u7684\u95ee\u9898\u7ed3\u5408\u4e86\u63d0\u51fa\u4e86\u89e3\u51b3\u65b9\u6848,\u4f7f\u5176\u5373\u80fd\u591f\u50cfNLNet\u4e00\u6837\u6709\u6548\u7684\u5bf9\u5168\u5c40\u4e0a\u4e0b\u6587\u5efa\u6a21\uff0c\u53c8\u80fd\u591f\u50cfSENet\u4e00\u6837\u8f7b\u91cf\u3002 import torch from torch import nn class ContextBlock ( nn . Module ): def __init__ ( self , inplanes , ratio , pooling_type = 'att' , fusion_types = ( 'channel_add' , )): super ( ContextBlock , self ) . __init__ () valid_fusion_types = [ 'channel_add' , 'channel_mul' ] assert pooling_type in [ 'avg' , 'att' ] assert isinstance ( fusion_types , ( list , tuple )) assert all ([ f in valid_fusion_types for f in fusion_types ]) assert len ( fusion_types ) > 0 , 'at least one fusion should be used' self . inplanes = inplanes self . ratio = ratio self . planes = int ( inplanes * ratio ) self . pooling_type = pooling_type self . fusion_types = fusion_types if pooling_type == 'att' : self . conv_mask = nn . Conv2d ( inplanes , 1 , kernel_size = 1 ) self . softmax = nn . Softmax ( dim = 2 ) else : self . avg_pool = nn . AdaptiveAvgPool2d ( 1 ) if 'channel_add' in fusion_types : self . channel_add_conv = nn . Sequential ( nn . Conv2d ( self . inplanes , self . planes , kernel_size = 1 ), nn . LayerNorm ([ self . planes , 1 , 1 ]), nn . ReLU ( inplace = True ), # yapf: disable nn . Conv2d ( self . planes , self . inplanes , kernel_size = 1 )) else : self . channel_add_conv = None if 'channel_mul' in fusion_types : self . channel_mul_conv = nn . Sequential ( nn . Conv2d ( self . inplanes , self . planes , kernel_size = 1 ), nn . LayerNorm ([ self . planes , 1 , 1 ]), nn . ReLU ( inplace = True ), # yapf: disable nn . Conv2d ( self . planes , self . inplanes , kernel_size = 1 )) else : self . channel_mul_conv = None def spatial_pool ( self , x ): batch , channel , height , width = x . size () if self . pooling_type == 'att' : input_x = x # [N, C, H * W] input_x = input_x . view ( batch , channel , height * width ) # [N, 1, C, H * W] input_x = input_x . unsqueeze ( 1 ) # [N, 1, H, W] context_mask = self . conv_mask ( x ) # [N, 1, H * W] context_mask = context_mask . view ( batch , 1 , height * width ) # [N, 1, H * W] context_mask = self . softmax ( context_mask ) # [N, 1, H * W, 1] context_mask = context_mask . unsqueeze ( - 1 ) # [N, 1, C, 1] context = torch . matmul ( input_x , context_mask ) # [N, C, 1, 1] context = context . view ( batch , channel , 1 , 1 ) else : # [N, C, 1, 1] context = self . avg_pool ( x ) return context def forward ( self , x ): # [N, C, 1, 1] context = self . spatial_pool ( x ) out = x if self . channel_mul_conv is not None : # [N, C, 1, 1] channel_mul_term = torch . sigmoid ( self . channel_mul_conv ( context )) out = out * channel_mul_term if self . channel_add_conv is not None : # [N, C, 1, 1] channel_add_term = self . channel_add_conv ( context ) out = out + channel_add_term return out if __name__ == \"__main__\" : in_tensor = torch . ones (( 12 , 64 , 128 , 128 )) cb = ContextBlock ( inplanes = 64 , ratio = 1. / 16. , pooling_type = 'att' ) out_tensor = cb ( in_tensor ) print ( in_tensor . shape ) print ( out_tensor . shape ) CCNet | \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2\u8be6\u89e3 | \u4ee3\u7801\u7b80\u5355\u5b9e\u73b0 \u7531 Non-Local \u53d1\u5c55\u800c\u6765\u7684\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u5176\u7279\u6b8a\u4e4b\u5904\u5728\u7eb5\u6a2a\u4ea4\u53c9\u5173\u6ce8\u6a21\u5757\uff0c\u53ef\u4ee5\u4ee5\u66f4\u6709\u6548\u7684\u65b9 \u5f0f\u4ece\u8fdc\u7a0b\u4f9d\u8d56\u4e2d\u83b7\u53d6\u4e0a\u4e0b\u6587\u4fe1\u606f\u3002 CBAM | \u8bba\u6587 | ResNet\u4e2d\u52a0\u5165\u8be5\u6a21\u5757 | \u535a\u5ba2\u4ecb\u7ecd \u5c06\u7a7a\u95f4\u6ce8\u610f\u529b\u673a\u5236\u548c\u901a\u9053\u6ce8\u610f\u529b\u673a\u5236\u8fdb\u884c\u4e32\u8054 \u8f93\u5165\u662f H\u00d7W\u00d7C \u7279\u5f81 F\uff0c \u5206\u522b\u8fdb\u884c\u4e00\u4e2a\u7a7a\u95f4\u7684\u5168\u5c40\u5e73\u5747\u6c60\u5316\u548c\u6700\u5927\u6c60\u5316\u5f97\u5230\u4e24\u4e2a 1\u00d71\u00d7C \u7684\u901a\u9053\u63cf\u8ff0\u3002 \u518d\u5c06\u5b83\u4eec\u5206\u522b\u9001\u5165\u4e00\u4e2a\u4e24\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\uff0c\u7b2c\u4e00\u5c42\u795e\u7ecf\u5143\u4e2a\u6570\u4e3a C/r \uff0c\u6fc0\u6d3b\u51fd\u6570\u4e3a Relu \uff0c\u7b2c\u4e8c\u5c42\u795e\u7ecf\u5143\u4e2a\u6570\u4e3a C \u3002\u6ce8\u610f\uff0c\u8fd9\u4e2a\u4e24\u5c42\u7684\u795e\u7ecf\u7f51\u7edc\u662f\u5171\u4eab\u7684\u3002 \u518d\u5c06\u5f97\u5230\u7684\u4e24\u4e2a\u7279\u5f81**\u76f8\u52a0**\u540e\u7ecf\u8fc7\u4e00\u4e2a Sigmoid \u6fc0\u6d3b\u51fd\u6570\u5f97\u5230\u6743\u91cd\u7cfb\u6570 Mc\u3002 \u6700\u540e\uff0c\u62ff\u6743\u91cd\u7cfb\u6570\u548c\u539f\u6765\u7684\u7279\u5f81 F \u76f8\u4e58\u5373\u53ef\u5f97\u5230\u7f29\u653e\u540e\u7684\u65b0\u7279\u5f81\u3002 \u8f93\u5165\u4e00\u4e2a H\u00d7W\u00d7C \u7684\u7279\u5f81 F\u2018 \uff0c\u5206\u522b\u8fdb\u884c\u4e00\u4e2a\u901a\u9053\u7ef4\u5ea6\u7684\u5e73\u5747\u6c60\u5316\u548c\u6700\u5927\u6c60\u5316\u5f97\u5230\u4e24\u4e2a H\u00d7W\u00d71 \u7684\u901a\u9053\u63cf\u8ff0\uff0c\u5c06\u8fd9\u4e24\u4e2a\u63cf\u8ff0\u6309\u7167\u901a\u9053\u62fc\u63a5\u5728\u4e00\u8d77\u3002 \u7136\u540e\uff0c\u7ecf\u8fc7\u4e00\u4e2a 7\u00d77 \u7684\u5377\u79ef\u5c42\uff0c\u6fc0\u6d3b\u51fd\u6570\u4e3a Sigmoid \uff0c\u5f97\u5230\u6743\u91cd\u7cfb\u6570 Ms\u3002 \u6700\u540e\uff0c\u62ff\u6743\u91cd\u7cfb\u6570\u548c\u7279\u5f81 F\u2019 \u76f8\u4e58\u5373\u53ef\u5f97\u5230\u7f29\u653e\u540e\u7684\u65b0\u7279\u5f81\u3002 \u901a\u9053\u6ce8\u610f\u529b\u548c\u7a7a\u95f4\u6ce8\u610f\u529b\u8fd9\u4e24\u4e2a\u6a21\u5757\u53ef\u4ee5\u4ee5\u5e76\u884c\u6216\u8005\u4e32\u8054\u7684\u65b9\u5f0f\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u662f\u4f5c\u8005\u53d1\u73b0\u4e32\u8054\u7ec4\u5408\u5e76\u4e14\u5c06\u901a\u9053\u6ce8\u610f\u529b\u653e\u5728\u524d\u9762\u53ef\u4ee5\u53d6\u5f97\u66f4\u597d\u7684\u6548\u679c\u3002 import torch import torch.nn as nn def conv3x3 ( in_planes , out_planes , stride = 1 ): \"3x3 convolution with padding\" return nn . Conv2d ( in_planes , out_planes , kernel_size = 3 , stride = stride , padding = 1 , bias = False ) class ChannelAttention ( nn . Module ): def __init__ ( self , in_planes , ratio = 4 ): super ( ChannelAttention , self ) . __init__ () self . avg_pool = nn . AdaptiveAvgPool2d ( 1 ) self . max_pool = nn . AdaptiveMaxPool2d ( 1 ) self . sharedMLP = nn . Sequential ( nn . Conv2d ( in_planes , in_planes // ratio , 1 , bias = False ), nn . ReLU (), nn . Conv2d ( in_planes // ratio , in_planes , 1 , bias = False )) self . sigmoid = nn . Sigmoid () def forward ( self , x ): avgout = self . sharedMLP ( self . avg_pool ( x )) maxout = self . sharedMLP ( self . max_pool ( x )) return self . sigmoid ( avgout + maxout ) class SpatialAttention ( nn . Module ): def __init__ ( self , kernel_size = 7 ): super ( SpatialAttention , self ) . __init__ () assert kernel_size in ( 3 , 7 ), \"kernel size must be 3 or 7\" padding = 3 if kernel_size == 7 else 1 self . conv = nn . Conv2d ( 2 , 1 , kernel_size , padding = padding , bias = False ) self . sigmoid = nn . Sigmoid () def forward ( self , x ): avgout = torch . mean ( x , dim = 1 , keepdim = True ) maxout , _ = torch . max ( x , dim = 1 , keepdim = True ) x = torch . cat ([ avgout , maxout ], dim = 1 ) x = self . conv ( x ) return self . sigmoid ( x ) class BasicBlock ( nn . Module ): expansion = 1 def __init__ ( self , inplanes , planes , stride = 1 , downsample = None ): super ( BasicBlock , self ) . __init__ () self . conv1 = conv3x3 ( inplanes , planes , stride ) self . bn1 = nn . BatchNorm2d ( planes ) self . relu = nn . ReLU ( inplace = True ) self . conv2 = conv3x3 ( planes , planes ) self . bn2 = nn . BatchNorm2d ( planes ) self . ca = ChannelAttention ( planes ) self . sa = SpatialAttention () self . downsample = downsample self . stride = stride def forward ( self , x ): residual = x out = self . conv1 ( x ) out = self . bn1 ( out ) out = self . relu ( out ) out = self . conv2 ( out ) out = self . bn2 ( out ) out = self . ca ( out ) * out # \u5e7f\u64ad\u673a\u5236 out = self . sa ( out ) * out # \u5e7f\u64ad\u673a\u5236 if self . downsample is not None : print ( \"downsampling\" ) residual = self . downsample ( x ) print ( out . shape , residual . shape ) out += residual out = self . relu ( out ) return out if __name__ == \"__main__\" : downsample = nn . Sequential ( nn . Conv2d ( 16 , 32 , kernel_size = 1 , stride = 1 , bias = False ), nn . BatchNorm2d ( 32 )) x = torch . ones ( 3 , 16 , 32 , 32 ) model = BasicBlock ( 16 , 32 , stride = 1 , downsample = downsample ) print ( model ( x ) . shape ) BAM | \u8bba\u6587 \u548c CBAM \u540c\u4e00\u4e2a\u4f5c\u8005\uff0c\u5c06\u901a\u9053\u6ce8\u610f\u529b\u548c\u7a7a\u95f4\u6ce8\u610f\u529b\u7528\u5e76\u8054\u7684\u65b9\u5f0f\u8fde\u63a5 import torch import math import torch.nn as nn import torch.nn.functional as F class Flatten ( nn . Module ): def forward ( self , x ): return x . view ( x . size ( 0 ), - 1 ) class ChannelGate ( nn . Module ): def __init__ ( self , gate_channel , reduction_ratio = 16 , num_layers = 1 ): super ( ChannelGate , self ) . __init__ () self . gate_c = nn . Sequential () self . gate_c . add_module ( 'flatten' , Flatten ()) gate_channels = [ gate_channel ] # eg 64 gate_channels += [ gate_channel // reduction_ratio ] * num_layers # eg 4 gate_channels += [ gate_channel ] # 64 # gate_channels: [64, 4, 4] for i in range ( len ( gate_channels ) - 2 ): self . gate_c . add_module ( 'gate_c_fc_ %d ' % i , nn . Linear ( gate_channels [ i ], gate_channels [ i + 1 ])) self . gate_c . add_module ( 'gate_c_bn_ %d ' % ( i + 1 ), nn . BatchNorm1d ( gate_channels [ i + 1 ])) self . gate_c . add_module ( 'gate_c_relu_ %d ' % ( i + 1 ), nn . ReLU ()) self . gate_c . add_module ( 'gate_c_fc_final' , nn . Linear ( gate_channels [ - 2 ], gate_channels [ - 1 ])) def forward ( self , x ): avg_pool = F . avg_pool2d ( x , x . size ( 2 ), stride = x . size ( 2 )) return self . gate_c ( avg_pool ) . unsqueeze ( 2 ) . unsqueeze ( 3 ) . expand_as ( x ) class SpatialGate ( nn . Module ): def __init__ ( self , gate_channel , reduction_ratio = 16 , dilation_conv_num = 2 , dilation_val = 4 ): super ( SpatialGate , self ) . __init__ () self . gate_s = nn . Sequential () self . gate_s . add_module ( 'gate_s_conv_reduce0' , nn . Conv2d ( gate_channel , gate_channel // reduction_ratio , kernel_size = 1 )) self . gate_s . add_module ( 'gate_s_bn_reduce0' , nn . BatchNorm2d ( gate_channel // reduction_ratio )) self . gate_s . add_module ( 'gate_s_relu_reduce0' , nn . ReLU ()) # \u8fdb\u884c\u591a\u4e2a\u7a7a\u6d1e\u5377\u79ef\uff0c\u4e30\u5bcc\u611f\u53d7\u91ce for i in range ( dilation_conv_num ): self . gate_s . add_module ( 'gate_s_conv_di_ %d ' % i , nn . Conv2d ( gate_channel // reduction_ratio , gate_channel // reduction_ratio , kernel_size = 3 , padding = dilation_val , dilation = dilation_val )) self . gate_s . add_module ( 'gate_s_bn_di_ %d ' % i , nn . BatchNorm2d ( gate_channel // reduction_ratio )) self . gate_s . add_module ( 'gate_s_relu_di_ %d ' % i , nn . ReLU ()) self . gate_s . add_module ( 'gate_s_conv_final' , nn . Conv2d ( gate_channel // reduction_ratio , 1 , kernel_size = 1 )) def forward ( self , x ): return self . gate_s ( x ) . expand_as ( x ) class BAM ( nn . Module ): def __init__ ( self , gate_channel ): super ( BAM , self ) . __init__ () self . channel_att = ChannelGate ( gate_channel ) self . spatial_att = SpatialGate ( gate_channel ) def forward ( self , x ): att = 1 + F . sigmoid ( self . channel_att ( x ) * self . spatial_att ( x )) return att * x","title":"\u5373\u63d2\u5373\u7528\u6a21\u5757"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#gpu","text":"def auto_select_gpu ( mem_bound = 500 , utility_bound = 0 , gpus = ( 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 ), selected_gpus = None ): import sys import os import subprocess import re import time import numpy as np if 'CUDA_VISIBLE_DEVCIES' in os . environ : sys . exit ( 0 ) if selected_gpus is None : mem_trace = [] utility_trace = [] for i in range ( 5 ): # sample 5 times info = subprocess . check_output ( 'nvidia-smi' , shell = True ) . decode ( 'utf-8' ) mem = [ int ( s [: - 5 ]) for s in re . compile ( '\\d+MiB\\s/' ) . findall ( info )] utility = [ int ( re . compile ( '\\d+' ) . findall ( s )[ 0 ]) for s in re . compile ( '\\d+%\\s+Default' ) . findall ( info )] mem_trace . append ( mem ) utility_trace . append ( utility ) time . sleep ( 0.1 ) mem = np . mean ( mem_trace , axis = 0 ) utility = np . mean ( utility_trace , axis = 0 ) assert ( len ( mem ) == len ( utility )) nGPU = len ( utility ) ideal_gpus = [ i for i in range ( nGPU ) if mem [ i ] <= mem_bound and utility [ i ] <= utility_bound and i in gpus ] if len ( ideal_gpus ) < 1 : print ( \"No gpu is available!!!\" ) sys . exit ( 0 ) else : print ( f \"This code will use gpus: { ideal_gpus } \" ) selected_gpus = list ( map ( str , ideal_gpus )) else : selected_gpus = selected_gpus . split ( ',' ) print ( \"Setting GPU: {} \" . format ( selected_gpus )) os . environ [ 'CUDA_VISIBLE_DEVICES' ] = ',' . join ( selected_gpus ) return selected_gpus","title":"\u81ea\u52a8\u68c0\u6d4bGPU"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#tsne","text":"import numpy as np from numpy.linalg import norm from sklearn import manifold , decomposition from skimage import io , transform , color import seaborn as sns import matplotlib.pyplot as plt import matplotlib.patheffects as PathEffects from matplotlib.offsetbox import OffsetImage , AnnotationBbox from pylab import mpl myfont = mpl . font_manager . FontProperties ( fname = '/usr/share/fonts/truetype/droid/DroidSansFallbackFull.ttf' ) mpl . rcParams [ 'axes.unicode_minus' ] = False from sklearn.metrics.pairwise import pairwise_distances caffe_root = '/data_2/malin/SOFTWARES/caffe-all' import sys , string , random sys . path . insert ( 0 , caffe_root + '/python' ) import caffe , cv2 , os def imscatter ( img_paths , X , Y , imgbox_size , ax , zoom ): ''' Show images instead of plot points while doing tsne in Python Input: show_img_lists: image path lists n * 1 X, Y: x and y position lists got from t-sne, x is n * 1, y is n * 1 imgbox_size: the size of image showed in the cluster picture ax zoom Output: artists ''' X , Y = np . atleast_1d ( X , Y ) XY = zip ( X , Y ) artists = [] for i in range ( len ( img_paths )): image = io . imread ( img_paths [ i ]) image = transform . resize ( image , imgbox_size ) im = OffsetImage ( image , zoom = zoom ) ab = AnnotationBbox ( im , XY [ i ], xycoords = 'data' , frameon = False ) artists . append ( ax . add_artist ( ab )) ax . update_datalim ( np . column_stack ([ X , Y ])) ax . autoscale () return artists def visual_feature_space ( img_paths , features , labels , fea_dim , num_classes , classId , imgbox_size , zoom , metric = 'cosine' ): # compute the tsne map num = len ( labels ) F = np . zeros (( num , fea_dim )) Y = np . zeros (( num , )) for i in range ( num ): F [ i , :] = features [ i ] Y [ i ] = labels [ i ] pre_matrix = pairwise_distances ( F , F , metric = metric ) pre_matrix = pre_matrix + 1e-10 tsne = manifold . TSNE ( n_components = 2 , metric = 'precomputed' ) X = tsne . fit_transform ( pre_matrix ) # draw palette = np . array ( sns . color_palette ( 'hls' , num_classes )) # We create a scatter plot. f = plt . figure ( figsize = ( 8 , 8 )) ax = plt . subplot ( aspect = 'equal' ) # We draw image ins,\u8fd9\u4e2a\u7528\u4e0d\u7528\u770b\u81ea\u5df1\u9009\u62e9 #imscatter(img_paths, X[:,0], X[:,1], imgbox_size, ax=ax, zoom=zoom) sc = ax . scatter ( X [:, 0 ], X [:, 1 ], lw = 0 , s = 40 , c = palette [ labels . astype ( np . int )]) ax . axis ( 'off' ) ax . axis ( 'tight' ) # We add the labels for each digit. txts = [] for i in range ( num_classes ): # Position of each label. xtext , ytext = np . median ( X [ labels == i ,:], axis = 0 ) txt = ax . text ( xtext , ytext , classId [ i ], fontproperties = myfont ) txt . set_path_effects ([ PathEffects . Stroke ( linewidth = 5 , foreground = 'w' ), PathEffects . Normal ()]) txts . append ( txt ) plt . show () return f , ax , sc , txts if __name__ == '__main__' : features = xxx # \u6ce8\u610f\u6d45\u62f7\u8d1d\u548c\u6df1\u62f7\u8d1d\u95ee\u9898 labels = xxx # labels\u6807\u7b7e img_paths = xxx # \u4f7f\u7528img_scatter\u65f6\u5019\u9700\u8981\u7528\u5230 visual_feature_space ( img_paths , features , labels , fea_dim = 128 , num_classes = 2 , classId = [ 0 , 1 ], imgbox_size = ( 1 , 1 ), zoom = 0.1 , metric = 'cosine' )","title":"TSNE\u53ef\u89c6\u5316"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#-gradcam","text":"\u5377\u79ef\u53ef\u89c6\u5316-GradCAM-keras/pytorch | caffe\u7248\u672c :caffe\u9ed8\u8ba4\u6ca1\u6709\u635f\u5931\u5c31\u4e0d\u7b97\u68af\u5ea6 \u89e3\u51b3 # caffe\u7248\u672c,caffe \u9ed8\u8ba4\u6ca1\u6709\u635f\u5931\u5c31\u4e0d\u7b97\u68af\u5ea6\u3002\u6240\u4ee5\u8981\u5728deploy\u4e2d\u6dfb\u52a0force_backward: true from PIL import Image import matplotlib.cm as cm class_nums = 1000 resize_ = ( 227 , 227 ) vis_layer = 'pool5' # visualization layer #Perform a backward pass for the cat class (281) net . blobs [ 'data' ] . data [ ... ] = transformed_image output = net . forward () output_prob = output [ 'prob' ][ 0 ] # the output probability vector for the first image in the batch print ( 'predicted class is:' , output_prob . argmax ()) label_index = output_prob . argmax () caffeLabel = np . zeros (( 1 , class_nums )) caffeLabel [ 0 , label_index ] = 1 ; grads = net . backward ( diffs = [ vis_layer ], ** { 'prob' : caffeLabel }) #bw=net.backward(diffs=[vis_layer],**{net.outputs[0]: caffeLabel}) vis_grad = grads [ 'pool5' ] # gradients of pool5 layer with respect to output class vis_grad = np . squeeze ( vis_grad , axis = 0 ) # removing the extra dimension mean_grads = np . mean ( vis_grad , axis = ( 1 , 2 )) # mean of gradients activations = net . blobs [ vis_layer ] . data activations = np . squeeze ( activations , axis = 0 ) n_nodes = activations . shape [ 0 ] # number of nodels vis_size = activations . shape [ 1 :] #visualization shape vis = np . zeros ( activations . shape [ 1 :], dtype = np . float32 ) #generating saliency image for i in range ( n_nodes ): activation = activations [ i , :, :] weight = mean_grads [ i ] weighted_activation = activation * weight vis += weighted_activation # We select only those activation which has positively contributed in prediction of given class heatmap = np . maximum ( vis , 0 ) # relu heatmap /= np . max ( heatmap ) src_img = cv2 . resize ( xxx , resize_ , interpolation = cv2 . INTER_LINEAR ) src_img = src_img [:,:, None ] if src_img . ndim == 1 else src_img heatmap = cv2 . resize ( heatmap , src_image . shape [: 2 ][:: - 1 ]) heatmap = np . uint8 ( 255 * heatmap ) heatmap = cv2 . applyColorMap ( heatmap , cv2 . COLORMAP_JET ) # \u5c06\u70ed\u529b\u56fe\u5e94\u7528\u4e8e\u539f\u59cb\u56fe\u50cf result = heatmap * 0.4 + src_img # \u6ce8\u610f\u6b64\u65f6heatmap\u662f\u4e09\u901a\u9053\uff0c\u5fc5\u987b\u4fdd\u8bc1src_img\u662f\u4e09\u7ef4","title":"\u5377\u79ef\u53ef\u89c6\u5316-GradCAM"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#_3","text":"https://lutzroeder.github.io/netron/ ==> https://netron.app/","title":"\u7f51\u7edc\u7ed3\u6784\u53ef\u89c6\u5316\u5de5\u5177"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#voc","text":"import os import glob import xml.etree.ElementTree as ET import cv2 def GetAnnotBoxLoc ( AnotPath ): tree = ET . ElementTree ( file = AnotPath ) root = tree . getroot () ObjectSet = root . findall ( 'object' ) ObjBndBoxSet = [] for Object in ObjectSet : BndBox = Object . find ( 'bndbox' ) x1 = int ( BndBox . find ( 'xmin' ) . text ) y1 = int ( BndBox . find ( 'ymin' ) . text ) x2 = int ( BndBox . find ( 'xmax' ) . text ) y2 = int ( BndBox . find ( 'ymax' ) . text ) ObjBndBoxSet . append ([ x1 , y1 , x2 , y2 ]) return ObjBndBoxSet os . makedirs ( \"new_Annotations\" , exist_ok = True ) os . makedirs ( \"new_JPEGImages\" , exist_ok = True ) for img_path_new in glob . glob ( \"JPEGImages/*.jpg\" ): save_img_name = img_path_new . replace ( \"JPEGImages\" , \"new_JPEGImages\" ) img_new = cv2 . imread ( img_path_new ) target_size = 320 im_scale = float ( target_size ) / max ( img_new . shape [: 2 ]) if im_scale != 1 : img_new = cv2 . resize ( img_new , None , None , fx = im_scale , fy = im_scale , interpolation = cv2 . INTER_LINEAR ) image_name = os . path . basename ( img_path_new ) xml_path = os . path . join ( \"Annotations\" , image_name [: - 4 ] + \".xml\" ) height , width = img_new . shape [: 2 ] img_boxs = GetAnnotBoxLoc ( xml_path ) if len ( img_boxs ) >= 10 : continue cv2 . imwrite ( save_img_name , img_new ) with open ( f \"new_Annotations/ { image_name [: - 4 ] } .xml\" , 'w' ) as xml_file : xml_file . write ( \"<?xml version='1.0' encoding='us-ascii'?> \\n \" ) xml_file . write ( '<annotation> \\n ' ) xml_file . write ( ' \\t <folder>simple</folder> \\n ' ) xml_file . write ( ' \\t <filename>' + f \" { image_name } \" + '</filename> \\n ' ) xml_file . write ( ' \\t <source> \\n ' ) xml_file . write ( ' \\t\\t <database>' + 'The simple Database' + '</database> \\n ' ) xml_file . write ( ' \\t\\t <annotation>' + 'simple' + '</annotation> \\n ' ) xml_file . write ( ' \\t\\t <image>head</image> \\n ' ) xml_file . write ( ' \\t\\t <flickrid>325991873</flickrid> \\n ' ) xml_file . write ( ' \\t </source> \\n ' ) xml_file . write ( ' \\t <owner> \\n ' ) xml_file . write ( ' \\t\\t <flickrid>archin</flickrid> \\n ' ) xml_file . write ( ' \\t\\t <name>?</name> \\n ' ) xml_file . write ( ' \\t </owner> \\n ' ) xml_file . write ( ' \\t <size> \\n ' ) xml_file . write ( ' \\t\\t <width>' + str ( width ) + '</width> \\n ' ) xml_file . write ( ' \\t\\t <height>' + str ( height ) + '</height> \\n ' ) xml_file . write ( ' \\t\\t <depth>3</depth> \\n ' ) xml_file . write ( ' \\t </size> \\n ' ) xml_file . write ( ' \\t <segmented>0</segmented> \\n ' ) # write the region of text on xml file for spt in img_boxs : xml_file . write ( ' \\t <object> \\n ' ) # \u4fee\u6539\u540d\u79f0 xml_file . write ( ' \\t\\t <name>head</name> \\n ' ) xml_file . write ( ' \\t\\t <pose>Unspecified</pose> \\n ' ) xml_file . write ( ' \\t\\t <truncated>0</truncated> \\n ' ) xml_file . write ( ' \\t\\t <difficult>0</difficult> \\n ' ) xml_file . write ( ' \\t\\t <bndbox> \\n ' ) xml_file . write ( ' \\t\\t\\t <xmin>' + str ( int ( float ( spt [ 0 ]) * im_scale )) + '</xmin> \\n ' ) xml_file . write ( ' \\t\\t\\t <ymin>' + str ( int ( float ( spt [ 1 ]) * im_scale )) + '</ymin> \\n ' ) xml_file . write ( ' \\t\\t\\t <xmax>' + str ( int ( float ( spt [ 2 ]) * im_scale )) + '</xmax> \\n ' ) xml_file . write ( ' \\t\\t\\t <ymax>' + str ( int ( float ( spt [ 3 ]) * im_scale )) + '</ymax> \\n ' ) xml_file . write ( ' \\t\\t </bndbox> \\n ' ) xml_file . write ( ' \\t </object> \\n ' ) xml_file . write ( '</annotation>' )","title":"VOC\u6570\u636e\u96c6\u5236\u4f5c"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#anchoryolov3","text":"\u535a\u5ba2\u94fe\u63a5 #coding=utf-8 import xml.etree.ElementTree as ET import numpy as np import glob def iou ( box , clusters ): \"\"\" \u8ba1\u7b97\u4e00\u4e2aground truth\u8fb9\u754c\u76d2\u548ck\u4e2a\u5148\u9a8c\u6846(Anchor)\u7684\u4ea4\u5e76\u6bd4(IOU)\u503c\u3002 \u53c2\u6570box: \u5143\u7ec4\u6216\u8005\u6570\u636e\uff0c\u4ee3\u8868ground truth\u7684\u957f\u5bbd\u3002 \u53c2\u6570clusters: \u5f62\u5982(k,2)\u7684numpy\u6570\u7ec4\uff0c\u5176\u4e2dk\u662f\u805a\u7c7bAnchor\u6846\u7684\u4e2a\u6570 \u8fd4\u56de\uff1aground truth\u548c\u6bcf\u4e2aAnchor\u6846\u7684\u4ea4\u5e76\u6bd4\u3002 \"\"\" x = np . minimum ( clusters [:, 0 ], box [ 0 ]) y = np . minimum ( clusters [:, 1 ], box [ 1 ]) if np . count_nonzero ( x == 0 ) > 0 or np . count_nonzero ( y == 0 ) > 0 : raise ValueError ( \"Box has no area\" ) intersection = x * y box_area = box [ 0 ] * box [ 1 ] cluster_area = clusters [:, 0 ] * clusters [:, 1 ] iou_ = intersection / ( box_area + cluster_area - intersection ) return iou_ def avg_iou ( boxes , clusters ): \"\"\" \u8ba1\u7b97\u4e00\u4e2aground truth\u548ck\u4e2aAnchor\u7684\u4ea4\u5e76\u6bd4\u7684\u5747\u503c\u3002 \"\"\" return np . mean ([ np . max ( iou ( boxes [ i ], clusters )) for i in range ( boxes . shape [ 0 ])]) def kmeans ( boxes , k , dist = np . median ): \"\"\" \u5229\u7528IOU\u503c\u8fdb\u884cK-means\u805a\u7c7b \u53c2\u6570boxes: \u5f62\u72b6\u4e3a(r, 2)\u7684ground truth\u6846\uff0c\u5176\u4e2dr\u662fground truth\u7684\u4e2a\u6570 \u53c2\u6570k: Anchor\u7684\u4e2a\u6570 \u53c2\u6570dist: \u8ddd\u79bb\u51fd\u6570 \u8fd4\u56de\u503c\uff1a\u5f62\u72b6\u4e3a(k, 2)\u7684k\u4e2aAnchor\u6846 \"\"\" # \u5373\u662f\u4e0a\u9762\u63d0\u5230\u7684r rows = boxes . shape [ 0 ] # \u8ddd\u79bb\u6570\u7ec4\uff0c\u8ba1\u7b97\u6bcf\u4e2aground truth\u548ck\u4e2aAnchor\u7684\u8ddd\u79bb distances = np . empty (( rows , k )) # \u4e0a\u4e00\u6b21\u6bcf\u4e2aground truth\"\u8ddd\u79bb\"\u6700\u8fd1\u7684Anchor\u7d22\u5f15 last_clusters = np . zeros (( rows ,)) # \u8bbe\u7f6e\u968f\u673a\u6570\u79cd\u5b50 np . random . seed () # \u521d\u59cb\u5316\u805a\u7c7b\u4e2d\u5fc3\uff0ck\u4e2a\u7c07\uff0c\u4ecer\u4e2aground truth\u968f\u673a\u9009k\u4e2a clusters = boxes [ np . random . choice ( rows , k , replace = False )] # \u5f00\u59cb\u805a\u7c7b while True : # \u8ba1\u7b97\u6bcf\u4e2aground truth\u548ck\u4e2aAnchor\u7684\u8ddd\u79bb\uff0c\u75281-IOU(box,anchor)\u6765\u8ba1\u7b97 for row in range ( rows ): distances [ row ] = 1 - iou ( boxes [ row ], clusters ) # \u5bf9\u6bcf\u4e2aground truth\uff0c\u9009\u53d6\u8ddd\u79bb\u6700\u5c0f\u7684\u90a3\u4e2aAnchor\uff0c\u5e76\u5b58\u4e0b\u7d22\u5f15 nearest_clusters = np . argmin ( distances , axis = 1 ) # \u5982\u679c\u5f53\u524d\u6bcf\u4e2aground truth\"\u8ddd\u79bb\"\u6700\u8fd1\u7684Anchor\u7d22\u5f15\u548c\u4e0a\u4e00\u6b21\u4e00\u6837\uff0c\u805a\u7c7b\u7ed3\u675f if ( last_clusters == nearest_clusters ) . all (): break # \u66f4\u65b0\u7c07\u4e2d\u5fc3\u4e3a\u7c07\u91cc\u9762\u6240\u6709\u7684ground truth\u6846\u7684\u5747\u503c for cluster in range ( k ): clusters [ cluster ] = dist ( boxes [ nearest_clusters == cluster ], axis = 0 ) # \u66f4\u65b0\u6bcf\u4e2aground truth\"\u8ddd\u79bb\"\u6700\u8fd1\u7684Anchor\u7d22\u5f15 last_clusters = nearest_clusters return clusters # \u52a0\u8f7d\u81ea\u5df1\u7684\u6570\u636e\u96c6\uff0c\u53ea\u9700\u8981\u6240\u6709labelimg\u6807\u6ce8\u51fa\u6765\u7684xml\u6587\u4ef6\u5373\u53ef def load_dataset ( path ): dataset = [] for xml_file in glob . glob ( \" {} /*xml\" . format ( path )): tree = ET . parse ( xml_file ) # \u56fe\u7247\u9ad8\u5ea6 height = int ( tree . findtext ( \"./size/height\" )) # \u56fe\u7247\u5bbd\u5ea6 width = int ( tree . findtext ( \"./size/width\" )) for obj in tree . iter ( \"object\" ): # \u504f\u79fb\u91cf,\u8fd9\u91cc\u5df2\u7ecf\u662f\u5f52\u4e00\u5316\u540e\u7684x\u3001y xmin = int ( obj . findtext ( \"bndbox/xmin\" )) / width ymin = int ( obj . findtext ( \"bndbox/ymin\" )) / height xmax = int ( obj . findtext ( \"bndbox/xmax\" )) / width ymax = int ( obj . findtext ( \"bndbox/ymax\" )) / height xmin = np . float64 ( xmin ) ymin = np . float64 ( ymin ) xmax = np . float64 ( xmax ) ymax = np . float64 ( ymax ) if xmax == xmin or ymax == ymin : print ( xml_file ) # \u5c06Anchor\u7684\u957f\u5bbd\u653e\u5165dateset\uff0c\u8fd0\u884ckmeans\u83b7\u5f97Anchor dataset . append ([ xmax - xmin , ymax - ymin ]) return np . array ( dataset ) if __name__ == '__main__' : ANNOTATIONS_PATH = \"F:\\Annotations\" #xml\u6587\u4ef6\u6240\u5728\u6587\u4ef6\u5939 CLUSTERS = 9 #\u805a\u7c7b\u6570\u91cf\uff0canchor\u6570\u91cf INPUTDIM = 416 #\u8f93\u5165\u7f51\u7edc\u5927\u5c0f data = load_dataset ( ANNOTATIONS_PATH ) # kmeans\u51fd\u6570\u5f97\u5230\u7684\u7ed3\u679c\u5b9e\u9645\u4e0a\u662f\u5f52\u4e00\u5316\u52300-1\u4e4b\u95f4\u7684 out = kmeans ( data , k = CLUSTERS ) print ( 'Boxes:' ) # \u7136\u540eAnchor\u7684\u8f93\u51fa\u662f\u5728\u6b64\u57fa\u7840\u4e0a\u4e58\u4ee5\u8f93\u5165\u5206\u8fa8\u7387\u7684\u5927\u5c0f(\u6a21\u578b\u8f93\u51fa),\u6240\u4ee5Anchor\u548c\u56fe\u7247\u7684\u8f93\u5165\u5206\u8fa8\u7387\u662f\u6709\u5173\u7684 print ( np . array ( out ) * INPUTDIM ) print ( \"Accuracy: {:.2f} %\" . format ( avg_iou ( data , out ) * 100 )) final_anchors = np . around ( out [:, 0 ] / out [:, 1 ], decimals = 2 ) . tolist () print ( \"Before Sort Ratios: \\n {} \" . format ( final_anchors )) print ( \"After Sort Ratios: \\n {} \" . format ( sorted ( final_anchors )))","title":"\u6570\u636e\u96c6anchor\u8ba1\u7b97(yolov3)"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#map","text":"code","title":"MAP\u8ba1\u7b97\u5e93"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#_4","text":"def merge_image ( img , bboxes , scale ): if scale == 1.0 / 4 : scale_w = int ( img . shape [ 1 ] * scale ) scale_h = int ( img . shape [ 0 ] * scale ) img_scale = cv2 . resize ( img , ( scale_w , scale_h )) # import pdb; pdb.set_trace() bboxes_scale = bboxes * scale merge_img = np . zeros ( np . array ([ scale_h * 2 , scale_w * 2 , 3 ], dtype = int ), dtype = img_scale . dtype ) merge_bboxes = np . zeros (( 0 , 4 )) for i in range ( 4 ): flip = random . randint ( 0 , 1 ) if flip : img_scale = cv2 . flip ( img_scale , flip ) bboxes_scale [:,[ 2 , 0 ]] = img_scale . shape [ 1 ] - 1 - bboxes_scale [:,[ 0 , 2 ]] merge_img [( i // 2 ) * scale_h : ( i // 2 + 1 ) * scale_h , ( i % 2 ) * scale_w : ( i % 2 + 1 ) * scale_w ,:] = img_scale offset = np . array ([( i % 2 ) * scale_w , ( i // 2 ) * scale_h , ( i % 2 ) * scale_w , ( i // 2 ) * scale_h ]) merge_bboxes = np . concatenate (( merge_bboxes , bboxes_scale + offset ), axis = 0 ) return ( merge_img , merge_bboxes , scale ) img_scale , bboxes_scale , scale = merge_image ( img , bboxes , scale * 0.5 ) scale = 2 * scale scale_w = int ( img . shape [ 1 ] * scale ) scale_h = int ( img . shape [ 0 ] * scale ) merge_img = np . zeros ( np . array ([ scale_h * 2 , scale_w * 2 , 3 ], dtype = int ), dtype = img_scale . dtype ) merge_bboxes = np . zeros (( 0 , 4 )) pos = random . randint ( 0 , 3 ) cut_ymin , cut_ymax , cut_xmin , cut_xmax = ( pos // 2 ) * scale_h ,( pos // 2 + 1 ) * scale_h , ( pos % 2 ) * scale_w ,( pos % 2 + 1 ) * scale_w y_pad = img_scale . shape [ 0 ] - ( cut_ymax - cut_ymin ) x_pad = img_scale . shape [ 1 ] - ( cut_xmax - cut_xmin ) merge_img [ cut_ymin : cut_ymax + y_pad , cut_xmin : cut_xmax + x_pad ,:] = img_scale offset = np . array ([( pos % 2 ) * scale_w , ( pos // 2 ) * scale_h , ( pos % 2 ) * scale_w , ( pos // 2 ) * scale_h ]) merge_bboxes = np . concatenate (( merge_bboxes , bboxes_scale + offset ), axis = 0 ) img_scale = cv2 . resize ( img , ( scale_w , scale_h )) bboxes_scale = bboxes * scale for i in range ( 4 ): if i == pos : continue flip = random . randint ( 0 , 1 ) if flip : img_scale = cv2 . flip ( img_scale , flip ) bboxes_scale [:,[ 2 , 0 ]] = img_scale . shape [ 1 ] - 1 - bboxes_scale [:,[ 0 , 2 ]] merge_img [( i // 2 ) * scale_h : ( i // 2 + 1 ) * scale_h , ( i % 2 ) * scale_w : ( i % 2 + 1 ) * scale_w ,:] = img_scale offset = np . array ([( i % 2 ) * scale_w , ( i // 2 ) * scale_h , ( i % 2 ) * scale_w , ( i // 2 ) * scale_h ]) merge_bboxes = np . concatenate (( merge_bboxes , bboxes_scale + offset ), axis = 0 ) return ( merge_img , merge_bboxes , scale ) def expand_rect ( merge_img , merge_bboxes , img , img_boxs , expand_img_num = 4 ): src_h , src_w = img . shape [: 2 ] merge_h , merge_w = merge_img . shape [: 2 ] if src_h >= src_w : img = np . vstack ([ img ] * expand_img_num ) im_scale = float ( merge_img . shape [ 0 ] / img . shape [ 0 ]) img_boxs = img_boxs * im_scale temp_boxs = img_boxs . copy () for index in range ( 1 , expand_img_num ): temp_boxs [:,[ 1 , 3 ]] += src_h * im_scale img_boxs = np . vstack ([ img_boxs , temp_boxs ]) else : img = np . hstack ([ img ] * expand_img_num ) im_scale = float ( merge_img . shape [ 1 ] / img . shape [ 1 ]) img_boxs = img_boxs * im_scale temp_boxs = img_boxs . copy () for index in range ( 1 , expand_img_num ): temp_boxs [:,[ 0 , 2 ]] += src_w * im_scale img_boxs = np . vstack ([ img_boxs , temp_boxs ]) img = cv2 . resize ( img , None , None , fx = im_scale , fy = im_scale , interpolation = cv2 . INTER_LINEAR ) if src_h >= src_w : img_boxs [:,[ 0 , 2 ]] += merge_w result_img = np . hstack (( merge_img , img )) else : img_boxs [:,[ 1 , 3 ]] += merge_h result_img = np . vstack (( merge_img , img )) result_boxes = np . vstack ([ merge_bboxes , img_boxs ]) pad_w = int (( result_img . shape [ 0 ] - result_img . shape [ 1 ]) // 2 ) if pad_w >= 0 : result_img = np . pad ( result_img ,(( 0 , 0 ),( pad_w , pad_w ),( 0 , 0 ))) result_boxes [:,[ 0 , 2 ]] += pad_w else : pad_h = abs ( pad_w ) result_img = np . pad ( result_img ,(( pad_h , pad_h ),( 0 , 0 ),( 0 , 0 ))) result_boxes [:,[ 1 , 3 ]] += pad_h return result_img , result_boxes . astype ( np . int ) if __name__ == '__main__' : merge_img , merge_bboxes , _ = merge_image ( img_new , img_boxs , 1.0 ) result_img , result_boxes = expand_rect ( merge_img , merge_bboxes , img_new , img_boxs )","title":"\u4eba\u8138\u56fe\u7247\u6269\u5145"},{"location":"%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81/#_5","text":"import cv2 import glob import numpy as np def gain_light ( img ): h , w = img . shape [: 2 ] lw = cv2 . cvtColor ( img , cv2 . COLOR_RGB2GRAY ) / 255. lwaver = np . exp ( np . log ( 0.001 + lw ) . sum () / ( h * w )) gain = ( np . log ( lw / lwaver + 1 ) / np . log ( lw . max () / lwaver + 1 )) / lw gain [ lw == 0 ] = 0 return cv2 . convertScaleAbs ( img * gain [:,:, None ])","title":"\u56fe\u50cf\u589e\u4eae"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/","text":"\u5927\u767d\u8001\u5e08\u8bfe\u7a0b\u7b14\u8bb0:\u5f88\u8be6\u5c3d]( https://www.yuque.com/darrenzhang/cv ) \u4ece\u57fa\u7840\u7efc\u8ff0\u5230\u5de5\u7a0b\u7ecf\u9a8c\uff0c\u6211\u8fd9\u4e24\u5e74\u6536\u85cf\u7684\u76ee\u6807\u68c0\u6d4b\u597d\u6587\u5206\u4eab luoqiuluoqiu/note: \u65e5\u5e38\u6536\u96c6\u7684\u8d44\u6599\u548c\u4ee3\u7801 - GitHub FPN\u7684\u6f14\u53d8 \u00b6 FPN\u7684\u5e38\u89c1\u4f5c\u7528 FPN\u7684\u5e38\u89c1\u7c7b\u578b \u65e0\u878d\u5408 :\u8fd9\u4e2a\u6700\u5177\u6709\u4ee3\u8868\u6027\u7684\u5c31\u662f SSD \uff0c\u76f4\u63a5\u51fa\u6765\u591a\u4e2a\u4e0d\u540c\u5c3a\u5bf8\u7684\u7279\u5f81\u56fe\u8d1f\u8d23\u4e0d\u540c scale \u7684\u5927\u5c0f\u7269\u4f53\u68c0\u6d4b \u81ea\u4e0a\u800c\u4e0b\u878d\u5408 \uff1a\u5e38\u89c1\u7684\u6709 Faster/Mask RCNN\u3001YOLOV3\u3001RetinaNet\u3001Cascade RCNN \u7b49 Faster(\u5e26FPN\u7248\u672c)/Mask RCNN \uff0c P2->P6 \uff0c\u800c\u4f5c\u4e3a\u540e\u7eed\u7279\u5f81\u56fe\u8f93\u5165\u7684\u53ea\u6709 p2->p5 \uff0c\u56e0\u4e3a\u4f5c\u8005\u53ea\u662f\u7528 P6 \u5728 RPN \u4e2d\u83b7\u53d6\u66f4\u5927\u5c3a\u5bf8\u7684 anchor \u7684\uff0c\u800c\u4e14 C6 \u662f\u76f4\u63a5\u901a\u8fc7 C5 \u8fdb\u884c maxpool \u4ea7\u751f\u7684\u3002 RetinaNet YOLOV3 \u7b80\u5355\u53cc\u5411\u878d\u5408 \uff1a PANet \uff0c\u589e\u52a0\u4e86\u589e\u4e86\u4ece\u4e0b\u800c\u4e0a\u7684\u878d\u5408\u8def\u5f84\u3002 \u590d\u6742\u7684\u53cc\u5411\u878d\u5408 \uff1a ASFF\u3001NAS-FPN\u3001Bi-FPN ASFF NAS-FPN\u3001Bi-FPN \u90fd\u662f\u5728 FPN \u4e2d\u5bfb\u627e\u4e00\u4e2a\u6709\u6548\u7684block\uff0c\u7136\u540e\u91cd\u590d\u53e0\u52a0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f39\u6027\u7684\u63a7\u5236 FPN \u7684\u5927\u5c0f\u3002 \u65b0\u51fa\u7684FPN\u7684\u6539\u8fdb \u9012\u5f52FPN : DetectoRS \uff0c\u6548\u679c\u51fa\u5947\u7684\u597d COCO mAP 54.7 MLFPN : M2det CE-FPN \uff1a CE-FPN \u8de8\u5c3a\u5ea6\u878d\u5408\u7684\u7279\u5f81\u4e00\u822c\u5b58\u5728\u8bed\u4e49\u5dee\u5f02\uff0c \u7efc\u5408\u7684\u7279\u5f81\u53ef\u80fd\u4f1a\u4ea7\u751f\u6df7\u53e0\u6548\u5e94\uff0c\u6df7\u6dc6\u5b9a\u4f4d\u548c\u8bc6\u522b \u3002\u5728FPN\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5408\u5e76\u7684\u7279\u5f81\u6620\u5c04\u90fd\u8981\u8fdb\u884c 3\u00d73 \u7684\u5377\u79ef\uff0c\u751f\u6210\u6700\u7ec8\u7684\u7279\u5f81\u91d1\u5b57\u5854\u3002\u672c\u6587\u7684**SSF+SCE\u878d\u5408**\u4f1a\u4f7f\u5f97\u6df7\u53e0\u6548\u5e94\u66f4\u4e25\u91cd\uff0c\u6240\u4ee5\u4f5c\u8005\u53d7 CBAM \u542f\u53d1\u63d0\u51fa**\u901a\u9053\u6ce8\u610f\u5f15\u5bfc\u6a21\u5757(CAG) \uff0c\u5b83\u53ef\u4ee5\u5f15\u5bfc\u91d1\u5b57\u5854\u7684\u5404\u4e2a\u5c42\u6b21\u6765\u7f13\u89e3\u6df7\u53e0\u6548\u5e94\u3002**CAG\u53ea\u901a\u8fc7\u96c6\u6210\u6620\u5c04I\u63d0\u53d6Channel\u6743\u503c\uff0c\u7136\u540e\u5c06Channel\u6743\u503c\u4e58\u4ee5\u6bcf\u4e2a\u8f93\u51fa\u7279\u5f81\u3002 YOLOV1 \u00b6 \u5c06**\u8f93\u5165\u56fe\u50cf**\u5206\u6210 SxS \u4e2a\u65b9\u683c(\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u5c31\u662f\u4e00\u4e2a\u70b9)\uff0c\u6bcf\u4e2a\u65b9\u683c\u5355\u5143\u4f1a\u4ea7\u751f\u4e24\u4e2a\u8fb9\u754c\u6846\uff0c\u5982\u679c\u4e00\u4e2a\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u843d\u5728\u4e86\u67d0\u4e2a\u65b9\u683c\u533a\u57df\u5185\uff0c\u5219\u8be5\u65b9\u683c\u5c31\u8d1f\u8d23\u68c0\u6d4b\u8be5\u7269\u4f53(\u5c06\u8be5\u65b9\u683c\u7684\u4e24\u4e2a\u6846\u4e0e\u771f\u5b9e\u7269\u4f53\u6846\u8fdb\u884c\u5339\u914d\uff0cloU\u66f4\u5927\u7684\u6846\u8d1f\u8d23\u56de\u5f52\u8be5\u771f\u5b9e\u7269\u4f53\u6846) \u6bcf\u4e2a\u5355\u5143\u683c\u8f93\u51fa\u901a\u9053\u6570\u662f 30 ,\u5305\u542b 20 \u4e2a\u7c7b\u522b(\u4e24\u6846\u5171\u7528\u4e00\u4e2a\u7c7b\u522b\u9884\u6d4b:\u4e00\u65b9\u683c\u591a\u7c7b\u4e5f\u53ea\u9884\u6d4b\u4e00\u7c7b)+ 2 \u4e2a\u6846\u7684\u8f93\u51fa\uff0c\u6bcf\u4e2a\u8fb9\u754c\u6846\u8ba1\u7b97\u4e00\u4e2a\u6846\u7f6e\u4fe1\u5ea6 C (\u4e24\u90e8\u5206:\u662f\u5426\u6709\u7269\u4f53[0/1]*\u8fb9\u6846\u51c6\u786e\u5ea6)\u548c\u8fb9\u754c\u68464\u4e2a\u503c(\u4e2d\u5fc3\u70b9\u5750\u6807: x,y +\u5bbd\u9ad8: w,h \u2192\u8fb9\u754c\u6846\u5bbd\u5ea6 w \u548c\u9ad8\u5ea6 h \u7528\u56fe\u50cf\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5f52\u4e00\u5316\u3002 \u00d7\u548cy \u662f\u76f8\u5e94\u5355\u5143\u683c\u7684\u504f\u79fb\u91cf\u3002\u56e0\u6b64 x, y, w, h \u90fd\u5728 0\u548c1 \u4e4b\u95f4\u3002) YOLOv1\u5728\u6bcf\u4e00\u4e2a\u533a\u57df\u5185\u9884\u6d4b\u4e24\u4e2a\u8fb9\u6846\uff0c\u8fd9\u6837\u6574\u4e2a\u56fe\u4e0a\u2014\u5171\u9884\u6d4b 7\u00d77\u00d72=98 \u4e2a\u6846\uff0c\u8fd9\u4e9b\u8fb9\u6846\u5927\u5c0f\u4e0e\u4f4d\u7f6e\u5404\u4e0d\u76f8\u540c\uff0c\u57fa\u672c\u53ef\u4ee5\u8986\u76d6\u6574\u4e2a\u56fe\u4e0a\u53ef\u80fd\u51fa\u73b0\u7684\u7269\u4f53\u3002\u7531\u4e8e\u4e24\u6846\u5171\u7528\u4e00\u4e2a\u7c7b\u522b\u9884\u6d4b\uff0c\u5171\u8ba1 7x7=49 \u4e2a\u7c7b\u522b\uff0c\u5982\u679c\u4e00\u65b9\u683c\u4e2d\u6709\u591a\u7c7b\u4e5f\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7c7b\u522b\u3002 \u7f51\u7edc\u7ed3\u6784 \u7f6e\u4fe1\u5ea6\u5f97\u5206 \u8bad\u7ec3 \u6b63\u6837\u672c:\u5f53\u2014\u4e2a\u771f\u5b9e\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u843d\u5728\u4e86\u67d0\u4e2a\u533a\u57df\u5185\u65f6\uff0c\u8be5\u533a\u57df\u5c31\u8d1f\u8d23\u68c0\u6d4b\u8be5\u7269\u4f53\u3002\u5177\u4f53\u505a\u6cd5\u662f\u5c06\u4e0e\u8be5\u771f\u5b9e\u7269\u4f53\u6709\u6700\u5927loU\u7684\u8fb9\u6846\u8bbe\u4e3a\u6b63\u6837\u672c\uff0c\u8fd9\u4e2a\u533a\u57df\u7684\u7c7b\u522b\u771f\u503c\u4e3a\u8be5\u771f\u5b9e\u7269\u4f53\u7684\u7c7b\u522b\uff0c\u8be5\u8fb9\u6846\u7684\u7f6e\u4fe1\u5ea6\u771f\u503c\u4e3a1\u3002 \u8d1f\u6837\u672c:\u9664\u4e86\u4e0a\u8ff0\u88ab\u8d4b\u4e88\u6b63\u6837\u672c\u7684\u8fb9\u6846\uff0c\u5176\u4f59\u8fb9\u6846\u90fd\u4e3a\u8d1f\u6837\u672c\u3002\u8d1f\u6837\u672c\u6ca1\u6709\u7c7b\u522b\u635f\u5931\u4e0e\u8fb9\u6846\u4f4d\u7f6e\u635f\u5931,\u53ea\u6709\u7f6e\u4fe1\u5ea6\u635f\u5931\uff0c\u5176\u771f\u503c\u4e3a0\u3002 YOLO\u4f7f\u7528\u9884\u6d4b\u503c\u548cGT\u4e4b\u95f4\u7684\u8bef\u5dee\u5e73\u65b9\u7684\u6c42\u548c(MSE)\u6765\u8ba1\u7b97\u635f\u5931\u3002\u635f\u5931\u51fd\u6570\u5305\u62ec: localization loss ->\u5b9a\u4f4d\u635f\u5931(\u9884\u6d4b\u8fb9\u754c\u6846\u4e0eGT\u4e4b\u95f4\u7684\u8bef\u5dee) confidence loss ->\u7f6e\u4fe1\u5ea6\u635f\u5931\uff08\u6846\u7684\u76ee\u6807\u6027, objectness of thebox) \u5927\u591a\u6570\u6846\u4e0d\u5305\u542b\u4efb\u4f55\u76ee\u6807\u3002\u8fd9\u5bfc\u81f4\u6837\u672c\u7c7b\u522b\u4e0d\u5e73\u8861\u95ee\u9898\uff0c\u5373\u8bad\u7ec3\u6a21\u578b\u65f6\u66f4\u9891\u7e41\u5730\u68c0\u6d4b\u5230\u80cc\u666f\u800c\u4e0d\u662f\u68c0\u6d4b\u76ee\u6807\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c06\u8fd9\u4e2a\u635f\u5931\u7528\u56e0\u5b50\u5165noobj(\u9ed8\u8ba4\u503c:0.5)\u964d\u4f4e\u3002 classification loss ->\u5206\u7c7b\u635f\u5931 YOLOV2 \u00b6 YOLO v2:\u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\u5bf9YOLOv1\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u5728\u4fdd\u6301\u539f\u6709\u901f\u5ea6\u7684\u540c\u65f6\u63d0\u5347\u51c6\u786e\u3002 Better \u4f7f\u7528\u6279\u5f52\u4e00\u5316( Batch Normalization )\u63d0\u9ad8\u51c6\u786e\u5ea6\u3002 \u9ad8\u5206\u8fa8\u7387\u5206\u7c7b\u5668( High-resolution classifier )\uff1a YoLOv2 \u4ee5 224 \u00d7 224 \u56fe\u7247\u5f00\u59cb\u7528\u4e8e\u5206\u7c7b\u5668\u8bad\u7ec3\uff0c\u4f46\u662f\u7136\u540e\u4f7f\u7528 10\u4e2aepoch \u518d\u6b21\u7528 448 x 448 \u56fe\u7247\u91cd\u65b0\u8c03\u6574\u5206\u7c7b\u5668\u3002\u8ba9\u7f51\u7edc\u53ef\u4ee5\u8c03\u6574\u6ee4\u6ce2\u5668\u6765\u9002\u5e94\u9ad8\u5206\u8fa8\u7387(\u56e0\u4e3aresize\u5230224\u5bb9\u6613\u4e22\u5931\u5c0f\u76ee\u6807\u4fe1\u606f)\uff0c\u8fd9\u4f7f\u5f97\u68c0\u6d4b\u5668\u8bad\u7ec3\u66f4\u5bb9\u6613\u3002\u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u7684\u5206\u7c7b\u7f51\u7edc\u63d0\u5347\u4e86\u5c06\u8fd14%\u7684mAP\u3002 \u7528\u951a\u5b9a\u6846\u7684\u5377\u79ef( Convolutional with Anchor Boxes )\uff1a yolov1 \u4f7f\u7528 1470x1-->reshape-->7x7x30 \uff0c\u8fd9\u6837\u4e22\u5931\u8f83\u591a\u7684\u7a7a\u95f4\u4fe1\u606f\u5bfc\u81f4\u5b9a\u4e3a\u4e0d\u51c6; yolov2 \u79fb\u9664\u4e86\u5168\u8fde\u63a5\u5c42\uff0c\u91c7\u7528\u5377\u79ef\u6765\u751f\u6210 anchor \u6846\uff0c\u4fdd\u7559\u4e86\u7a7a\u95f4\u4fe1\u606f\u3002\u5c0f\u6280\u5de7:\u8f93\u5165\u5206\u8fa8\u7387\u6539\u4e3a 416x416 \uff0c\u8fd9\u6837\u540e\u9762\u4ea7\u751f\u7684\u5377\u79ef\u7279\u5f81\u56fe\u5bbd\u9ad8\u90fd\u4e3a\u5947\u6570\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6765\u9884\u6d4b\u76ee\u6807\u6846(\u5076\u6570\u7684\u8bdd\u9700\u8981\u4f7f\u7528 4\u4e2a \u65b9\u683c\u6765\u9884\u6d4b\uff0c\u589e\u52a0\u8ba1\u7b97\u91cf) \u7ef4\u5ea6\u805a\u7c7b( Dimension Clusters )\uff1a K-means \u805a\u7c7b\uff0c\u8ddd\u79bb\u5ea6\u91cf\u4f7f\u7528 1-IOU \u800c\u4e0d\u662f\u6b27\u5f0f\u8ddd\u79bb(\u6b27\u5f0f\u8ddd\u79bb\u5927\u6846\u6bd4\u5c0f\u6846\u4ea7\u751f\u66f4\u591a\u8bef\u5dee\uff0c IOU \u4e0e\u6846\u7684\u5927\u5c0f\u65e0\u5173\uff0c yolov2 k=5 ) \u76f4\u63a5\u4f4d\u7f6e\u9884\u6d4b( Direct Location Prediction )\u3002\u9884\u6d4b\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u76f8\u5bf9\u4e8e\u5bf9\u5e94cell\u5de6\u4e0a\u89d2\u4f4d\u7f6e\u7684\u76f8\u5bf9\u504f\u79fb\u503c\u3002\u9884\u6d4b\u516c\u5f0f\u5982\u4e0b: \u66f4\u7cbe\u7ec6\u7684\u7279\u5f81( Fine-Grained Features ): reog\u5c42 \u591a\u5c3a\u5ea6\u8bad\u7ec3( Multi-Scale Training )\uff0c\u56e0\u4e3a\u662f\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u4e0d\u5c40\u9650\u4e8e\u8f93\u5165\u5927\u5c0f:\u5177\u4f53\u6765\u8bf4\u662f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u95f4\u9694\u4e00\u5b9a\u7684\u8fed\u4ee3\u6b21\u6570\u4e4b\u540e\u6539\u53d8\u6a21\u578b\u7684\u8f93\u5165\u56fe\u7247\u5927\u5c0f\uff0cyolov2\u662f\u4e0b\u91c7\u6837 32 \u500d\uff0c\u8f93\u5165\u56fe\u7247\u4e00\u822c\u9009\u62e9\u4e00\u7cfb\u5217 32 \u500d\u6570\u7684\u503c:{ 320,352,...,608 }\uff0c\u7279\u5f81\u56fe\u5bf9\u5e94{ 10x10,11x11,...,19x19 }\u3002 \u6b63\u8d1f\u6837\u672c\u548c\u635f\u5931\u51fd\u6570 \u6b63\u8d1f\u6837\u672c \u6b63\u6837\u672c:\u9996\u5148\u8ba1\u7b97\u76ee\u6807\u4e2d\u5fc3\u70b9\u843d\u5728\u54ea\u4e2a grid \u4e0a\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2agrid\u7684 k \u4e2a\u5148\u9a8c\u6846\uff08anchor\uff09\u548c\u76ee\u6807\u771f\u5b9e\u4f4d\u7f6e\u7684IOU\u503c\uff08\u76f4\u63a5\u8ba1\u7b97\uff0c\u4e0d\u8003\u8651\u4e8c\u8005\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff09\uff0c \u53d6 IOU \u503c\u5927\u4e8e\u9608\u503c\u7684\u4f5c\u4e3a\u6b63\u6837\u672c \u3002 loss \u8ba1\u7b97 box loss (\u5305\u62ec\u4e2d\u5fc3\u70b9+\u5bbd\u9ad8)+ confidence loss + \u7c7b\u522b loss \u3002 \u8d1f\u6837\u672c\uff1a\u8ba1\u7b97\u5404\u4e2a\u5148\u9a8c\u6846\u548c\u6240\u6709\u7684\u76ee\u6807 ground truth \u4e4b\u95f4\u7684 IOU \uff0c\u5982\u679c\u67d0\u5148\u9a8c\u6846\u548c\u56fe\u50cf\u4e2d\u6240\u6709\u7269\u4f53\u6700\u5927\u7684IOU\u90fd\u5c0f\u4e8e\u9608\u503c\uff08\u4e00\u822c0.5\uff09\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u8be5\u5148\u9a8c\u6846\u4e0d\u542b\u76ee\u6807\uff0c\u8bb0\u4f5c\u8d1f\u6837\u672c\uff0c\u5176\u7f6e\u4fe1\u5ea6\u5e94\u5f53\u4e3a0 loss\u53ea\u8ba1\u7b97confidence loss \u3002 \u5ffd\u7565\u6837\u672c\uff1a\u548c gt box \u7684 iou \u5927\u4e8e\u4e00\u5b9a\u9608\u503c\uff0c\u4f46\u53c8\u4e0d\u8d1f\u8d23\u8be5 gt box \u7684 anchor \uff0c\u4e00\u822c\u6307\u4e2d\u5fc3\u70b9 grid cell \u9644\u8fd1\u7684\u5176\u4ed6 grid cell \u91cc\u7684 anchor \u3002\u4e0d\u8ba1\u7b97\u4efb\u4f55 loss \u3002 \u635f\u5931\u51fd\u6570 Faster Darknet-19\u7f51\u7edc\u6a21\u578b \u4f7f\u7528\u8fde\u7eed\u7684 3x3 \u5377\u79ef\u4ee3\u66ff 7x7 \u5377\u79ef\uff0c\u51cf\u5c11\u8ba1\u7b97\u91cf\uff1b \u53bb\u6389\u5168\u8fde\u63a5\u5c42\u548cDropOut\u5c42\uff0c\u91c7\u7528\u5168\u5377\u79ef\uff0c\u6700\u540e\u7528 global avg pooling+Softmax \u505a\u9884\u6d4b\uff0c\u5e76\u4f7f\u7528 1x1 \u5377\u79ef\u6765\u538b\u7f29 YOLOV3 \u00b6 \u7c7b\u522b\u9884\u6d4b \u4e00\u5f20\u56fe\u5373\u662f person \u7c7b\u53c8\u662f woman \u7c7b\uff0c softmax \u8f93\u51fa\u591a\u4e2a\u7c7b\u522b\u9884\u6d4b\u4f1a\u76f8\u4e92\u6291\u5236(\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7c7b\u522b)\uff0c YOLOv3 \u7528\u591a\u4e2a\u72ec\u7acb\u7684\u903b\u8f91\u5206\u7c7b\u5668\uff08 Logistic :\u4e8c\u5143\u4ea4\u53c9\u5ae1\u635f\u5931\uff09\u66ff\u6362 softmax \u51fd\u6570\uff0c\u56e0\u4e3a logistic \u5206\u7c7b\u5668\u76f8\u4e92\u72ec\u7acb\uff0c\u53ef\u4ee5\u5b9e\u73b0\u591a\u7c7b\u522b\u7684\u9884\u6d4b\u3002\u8fd9\u4e2a loss \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u522b\u95f4\u7684\u89e3\u8026\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7269\u4f53\u7684\u591a\u6807\u7b7e\u5206\u7c7b\u3002 \u8bad\u7ec3\u6837\u672c\u9009\u53d6 \u6b63\u6837\u672c:\u9996\u5148\u8ba1\u7b97\u76ee\u6807\u4e2d\u5fc3\u70b9\u843d\u5728\u54ea\u4e2a grid \u4e0a\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2agrid\u7684 k \u4e2a\u5148\u9a8c\u6846\uff08anchor\uff09\u548c\u76ee\u6807\u771f\u5b9e\u4f4d\u7f6e\u7684IOU\u503c\uff08\u76f4\u63a5\u8ba1\u7b97\uff0c\u4e0d\u8003\u8651\u4e8c\u8005\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff09\uff0c \u53d6IOU\u503c\u6700\u5927\u7684\u5148\u9a8c\u6846\u548c\u76ee\u6807\u5339\u914d \u3002\u4e8e\u662f\uff0c\u627e\u5230\u7684 \u8be5 grid \u4e2d\u7684 \u8be5anchor \u8d1f\u8d23\u9884\u6d4b\u8fd9\u4e2a\u76ee\u6807\uff0c\u5176\u4f59\u7684\u7f51\u683c\u3001anchor\u90fd\u4e0d\u8d1f\u8d23\u3002 loss \u8ba1\u7b97 box loss (\u5305\u62ec\u4e2d\u5fc3\u70b9+\u5bbd\u9ad8)+ confidence loss + \u7c7b\u522b loss \u3002 \u8d1f\u6837\u672c\uff1a\u8ba1\u7b97\u5404\u4e2a\u5148\u9a8c\u6846\u548c\u6240\u6709\u7684\u76ee\u6807 ground truth \u4e4b\u95f4\u7684 IOU \uff0c\u5982\u679c\u67d0\u5148\u9a8c\u6846\u548c\u56fe\u50cf\u4e2d\u6240\u6709\u7269\u4f53\u6700\u5927\u7684IOU\u90fd\u5c0f\u4e8e\u9608\u503c\uff08\u4e00\u822c0.5\uff09\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u8be5\u5148\u9a8c\u6846\u4e0d\u542b\u76ee\u6807\uff0c\u8bb0\u4f5c\u8d1f\u6837\u672c\uff0c\u5176\u7f6e\u4fe1\u5ea6\u5e94\u5f53\u4e3a0 loss\u53ea\u8ba1\u7b97confidence loss \u3002 \u5ffd\u7565\u6837\u672c\uff1a\u548c gt box \u7684 iou \u5927\u4e8e\u4e00\u5b9a\u9608\u503c\uff0c\u4f46\u53c8\u4e0d\u8d1f\u8d23\u8be5 gt box \u7684 anchor \uff0c\u4e00\u822c\u6307\u4e2d\u5fc3\u70b9 grid cell \u9644\u8fd1\u7684\u5176\u4ed6 grid cell \u91cc\u7684 anchor \u3002\u4e0d\u8ba1\u7b97\u4efb\u4f55 loss \u3002 yolov3\u7f51\u7edc\u7ed3\u6784( Darknet-53 ): \u6b8b\u5dee(\u7f13\u89e3\u68af\u5ea6\u6d88\u5931)+FPN+\u591a\u5c42\u7279\u5f81\u878d\u5408(\u6709\u5229\u4e8e\u5c0f\u7269\u4f53\u68c0\u6d4b) \u65e0\u6c60\u5316\u5c42:\u4e4b\u524d\u7684 YOLO \u7f51\u7edc\u6709 5 \u4e2a\u6700\u5927\u6c60\u5316\u5c42\uff0c\u7528\u6765\u7f29\u5c0f\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u4e0b\u91c7\u6837\u7387\u4e3a 32 \uff0c\u800c DarkNet-53 \u5e76\u6ca1\u6709\u91c7\u7528\u6c60\u5316\u7684\u505a\u6cd5\uff0c\u800c\u662f\u901a\u8fc7\u6b65\u957f\u4e3a 2 \u7684\u5377\u79ef\u6838\u6765\u8fbe\u5230\u7f29\u5c0f\u5c3a\u5bf8\u7684\u6548\u679c\uff0c\u4e0b\u91c7\u6837\u6b21\u6570\u540c\u6837\u662f 5 \u6b21\uff0c\u603b\u4f53\u4e0b\u91c7\u6837\u7387\u4e3a 32 \u3002 \u8f93\u5165 416x416 \u2192\u8f93\u51fa\u4e09\u4e2a\u7279\u5f81\u56fesize\uff1a 13x13x255 \uff0c 26x26x255 \uff0c 52x52x255 \u8f93\u5165 608x608 \u2192\u8f93\u51fa\u4e09\u4e2a\u7279\u5f81\u56fesize\uff1a 19x19x255 \uff0c 38x38x255 \uff0c 76x76x255 255 = 3*(5+80) =\u6bcf\u4e2a\u5355\u5143\u683c 3 \u4e2a box*([x, y, w, h, confidence],80\u7c7b) concat \u64cd\u4f5c\u662f\u4e0a\u9762\u7279\u5f81\u56fe\u548c\u672c\u5206\u652f\u7279\u5f81\u56fe\u901a\u9053\u7ed3\u5408\u540e\u8f93\u51fa\uff0c\u4e0d\u50cf ssd \u76f4\u63a5\u62ff\u6765\u7528\uff0c\u7279\u5f81\u56fe\u878d\u5408\uff0c\u6548\u679c\u66f4\u597d \u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408+FPN \u591a\u5c3a\u5ea6\u7279\u5f81\u8fdb\u884c\u5bf9\u8c61\u68c0\u6d4b \uff08\u5047\u8bbe\u8f93\u5165 416*416 \uff09 \u4e0b\u91c7\u6837 32 \u500d, 13*13 \u7684\u7279\u5f81\u56fe:\u7531\u4e8e\u4e0b\u91c7\u6837\u500d\u6570\u9ad8\uff0c\u8fd9\u91cc\u7279\u5f81\u56fe\u7684\u611f\u53d7\u91ce\u6bd4\u8f83\u5927\uff0c\u56e0\u6b64**\u9002\u5408\u68c0\u6d4b\u56fe\u50cf\u4e2d\u5c3a\u5bf8\u6bd4\u8f83\u5927\u7684\u5bf9\u8c61**\u3002 \u4e0b\u91c7\u6837 16 \u500d, 26*26 \u7684\u7279\u5f81\u56fe: \u5b83\u5177\u6709\u4e2d\u7b49\u5c3a\u5ea6\u7684\u611f\u53d7\u91ce\uff0c\u9002\u5408\u68c0\u6d4b\u4e2d\u7b49\u5c3a\u5ea6\u7684\u5bf9\u8c61\u3002 \u4e0b\u91c7\u6837 8 \u500d, 52*52 \u7684\u7279\u5f81\u56fe: \u5b83\u7684\u611f\u53d7\u91ce\u6700\u5c0f\uff0c\u9002\u5408\u68c0\u6d4b\u5c0f\u5c3a\u5bf8\u7684\u5bf9\u8c61\u3002 \u951a\u70b9\u805a\u7c7b\u6210\u4e86 9 \u7c7b\uff0c\u8fd9\u6837\u5c31\u67099\u79cd\u5c3a\u5ea6\u7684anchor box \u56e0\u4e3a\u67093\u4e2a\u7279\u5f81\u56fe\uff0c\u4e3a\u6bcf\u4e2a\u7279\u5f81\u56fe\u8bbe\u7f6e3\u79cdanchor box,\u8fd9\u6837\u805a\u7c7b\u7684\u65f6\u5019\u805a\u7c7b\u6210\u4e5d\u7c7b\u5c31\u53ef\u4ee5\u4e86\u3002 \u5728\u6700\u5c0f\u7684 13*13 \u7279\u5f81\u56fe\u4e0a\uff08\u6709\u6700\u5927\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528**\u8f83\u5927\u7684\u5148\u9a8c\u6846**(116x90)\uff0c(156x198)\uff0c(373x326)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5927\u7684\u5bf9\u8c61\u3002 \u4e2d\u7b49\u7684 26*26 \u7279\u5f81\u56fe\u4e0a\uff08\u4e2d\u7b49\u611f\u53d7\u91ce\uff09\u5e94\u7528**\u4e2d\u7b49\u7684\u5148\u9a8c\u6846**(30x61)\uff0c(62x45)\uff0c(59x119)\uff0c\u9002\u5408\u68c0\u6d4b\u4e2d\u7b49\u5927\u5c0f\u7684\u5bf9\u8c61\u3002 \u8f83\u5927\u7684 52*52 \u7279\u5f81\u56fe\u4e0a\uff08\u8f83\u5c0f\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528**\u8f83\u5c0f\u7684\u5148\u9a8c\u6846**(10x13)\uff0c(16x30)\uff0c(33x23)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5c0f\u7684\u5bf9\u8c61\u3002 YOLO v3 \u4f7f\u7528\u7684\u65b9\u6cd5\u6709\u522b\u4e8e SSD \uff0c\u867d\u7136\u90fd\u5229\u7528\u4e86\u591a\u4e2a\u7279\u5f81\u56fe\u7684\u4fe1\u606f\uff0c\u4f46SSD\u7684\u7279\u5f81\u662f\u4ece\u6d45\u5230\u6df1\u5730**\u5206\u522b**\u9884\u6d4b\uff0c\u6ca1\u6709\u6df1\u6d45\u7684\u878d\u5408\uff0c\u800cYOLO v3\u7684\u57fa\u7840\u7f51\u7edc\u66f4\u50cf\u662fSSD\u4e0eFPN\u7684\u7ed3\u5408\u3002 yolov3\u7ed3\u6784\u89e3\u6790 Neck\u90e8\u5206\u7acb\u4f53\u5316:FPN\u7ed3\u6784 \u635f\u5931\u51fd\u6570 YOLO\u6bcf\u4e2a\u7f51\u683c\u5355\u5143\u9884\u6d4b\u591a\u4e2a\u8fb9\u754c\u6846\u3002\u4e3a\u4e86\u8ba1\u7b97 true positive \u7684\u635f\u5931\uff0c\u53ea\u5e0c\u671b\u5176\u4e2d\u2014\u4e2a\u6846\u8d1f\u8d23\u8be5\u76ee\u6807\u3002\u4e3a\u6b64\uff0c\u9009\u62e9\u4e0eGT\u5177\u6709\u6700\u9ad8loU\u7684\u90a3\u4e2a\u6846\u3002YOLO\u4f7f\u7528\u9884\u6d4b\u503c\u548cGT\u4e4b\u95f4\u7684\u8bef\u5dee\u5e73\u65b9\u7684\u6c42\u548c\u6765\u8ba1\u7b97\u635f\u5931\u3002\u635f\u5931\u51fd\u6570\u5305\u62ec: localization loss :\u5b9a\u4f4d\u635f\u5931(\u9884\u6d4b\u8fb9\u754c\u6846\u4e0eGT\u4e4b\u95f4\u7684\u8bef\u5dee) confidence loss :\u7f6e\u4fe1\u5ea6\u635f\u5931(\u6846\u7684\u76ee\u6807\u6027; objectness of the box) classification loss :\u5206\u7c7b\u635f\u5931 Poly-YoLo \u00b6 \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2 YoLoV3\u7684\u4e24\u4e2a\u7f3a\u70b9 \u5927\u91cf\u6807\u7b7e\u91cd\u5199 :yolo\u7cfb\u5217\u662f\u628a\u56fe\u7247\u5207\u6210 cell \u7f51\u683c\uff0c\u6bcf\u4e2a\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u843d\u5230\u8be5\u7f51\u683c\u4e0a\uff0c\u8be5\u7f51\u683c\u5c31\u8d1f\u8d23\u68c0\u6d4b\u8be5\u7269\u4f53\u3002 416x416-->13x13 \u7279\u5f81\u56fe\u4e00\u4e2a\u70b9\u7684\u76f8\u5bf9\u4e8e\u539f\u56fe\u7684\u611f\u53d7\u91ce\u5c31\u662f 32 ,\u5bf9\u4e8e\u7a20\u5bc6\u7269\u4f53\uff0c\u540c\u4e00\u4e2aceil\u7f51\u683c\u9884\u6d4b\u591a\u4e2a\u7269\u4f53\u6982\u7387\u5f88\u5927\uff0c\u4f46\u662f yolov3 \u4ea7\u751f anchor \u7684\u65b9\u5f0f\uff0c\u6bcf\u4e2a\u7279\u5f81\u56fe\u7684\u65b9\u683c\u4ea7\u751f3\u4e2a\u5148\u9a8c\u6846\uff0c\u8fd9\u6837\u7684\u8bdd**\u76f8\u540c\u7684\u4e24\u4e2a\u76ee\u6807\u4e2d\u5fc3\u4f4d\u4e8e\u540c\u4e00\u4e2a cell ,\u5e76\u4e14\u5206\u7ed9\u540c\u4e00\u4e2a anchor \u8fd9\u6837\u7684\u8bdd\u524d\u4e00\u4e2a\u76ee\u6807\u4f1a\u88ab\u540e\u9762\u7684\u76ee\u6807\u91cd\u5199**( \u5f88\u5e38\u89c1\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u68c0\u6d4b\u7684\u7269\u4f53size\u90fd\u5904\u4e8e\u76f8\u540c\u5c3a\u5bf8:\u5c0f\u6c7d\u8f66\u3001\u732a\u53ea )\uff0c\u8fd9\u6837\u7f51\u7edc\u8bad\u7ec3\u4f1a\u5ffd\u7565\u4e00\u4e9b\u76ee\u6807\uff0c\u5bfc\u81f4\u6b63\u6837\u672c\u6570\u91cf\u975e\u5e38\u5c11\uff0c\u5c24\u5176\u662f\u5728\u5c0f\u7279\u5f81\u56fe\u4e2d\u66f4\u5e38\u89c1\uff08\u7ed3\u679c:\u6f0f\u68c0\u7387\u589e\u9ad8\uff09 \u65e0\u6548\u7684anchor\u5206\u914d \uff1ayolov3\u4e2d\u662f\u4f7f\u75283\u4e2a\u7279\u5f81\u56fe\u6765\u5206\u522b\u4ea7\u751fanchor\u6846\u9884\u6d4b\u7684\uff0c\u5206\u914d\u539f\u5219\u662f**\u5c0f\u5206\u8fa8\u7387\u7279\u5f81\u56fe\u5206\u914d\u8f83\u5927\u5148\u9a8c\u6846\u68c0\u6d4b\u5927\u7269\u4f53\uff0c\u5927\u5206\u8fa8\u7387\u7279\u5f81\u56fe\u5206\u914d\u5c0f\u5148\u9a8c\u6846\u68c0\u6d4b\u5c0f\u7269\u4f53\uff0canchor\u901a\u8fc7kmeans\u805a\u7c7b\u4ea7\u751f**\uff0c\u5bf9\u4e8e\u76ee\u6807\u7269\u4f53\u4e2d\u6709\u5927\u4e2d\u5c0f\u7269\u4f53\uff0c\u8fd9\u6837\u5206\u914d\u6ca1\u6709\u95ee\u9898\uff0c\u5f88\u5408\u7406\uff0c\u4f46\u5728\u901a\u5e38\u7684\u8bad\u7ec3\u4e2d\u7269\u4f53\u4e00\u822c\u5904\u4e8e\u540c\u4e00\u4e2asize\uff0c\u6bd4\u5982\u68c0\u6d4b\u5927\u7269\u4f53\uff0c\u90a3\u4e48\u5927\u4e2d\u4e24\u4e2a\u7279\u5f81\u56fe\u7684anchor\u5229\u7528\u7387\u5c31\u6781\u4f4e\u4e86\u3002 \u6539\u8fdb \u6807\u7b7e\u91cd\u5199\u95ee\u9898 \u589e\u5927\u8f93\u51fa\u7279\u5f81\u56fe\u5927\u5c0f(\u4f5c\u8005\u601d\u8def) \u589e\u5927\u56fe\u50cf\u5206\u8fa8\u7387(\u901f\u5ea6\u4f1a\u5f88\u6162\uff0c\u629b\u5f03) \u65e0\u6548\u7684anchor\u5206\u914d\u95ee\u9898 kmeans\u805a\u7c7b\u7684\u6539\u8fdb\uff0c\u68c0\u6d4b\u5355\u7c7b(\u732a\u53ea\u7c7b)\uff0c\u4f7f\u7528kmeans\u805a\u7c7b\u62109\u7c7b\uff0c\u90a3\u4e48\u5373\u4f7f\u732a\u53ea\u7c7b\u5c3a\u5bf8\u7edf\u4e00\u4e5f\u4f1a\u88ab\u5f3a\u5236\u5206\u62109\u7c7b\uff0c\u88ab\u89c4\u5212\u5230\u90a33\u4e2a\u7279\u5f81\u56fe\u4e0a\u53bb\u9884\u6d4b(\u4e0d\u5408\u7406)\u3002\u6539\u8fdb:\u5148\u6839\u636e\u7279\u5f81\u56fe\u7684\u611f\u53d7\u91ce\u5b9a\u51fa\u4e09\u4e2a\u5927\u6982\u7684\u5c3a\u5ea6\u8303\u56f4\uff0c\u8bbe\u7f6e\u4e24\u4e2a\u9608\u503c\uff0c\u7136\u540e\u6839\u636e\u9608\u503c\u5bf9 bbox \u8fdb\u884c\u5355\u72ec\u4e09\u6b21\u805a\u7c7b\u800c\u4e0d\u662f\u4f5c\u7528\u4e8e\u6574\u4e2a\u6570\u636e\u96c6\u3002\u6bd4\u5982\u8bf4\u732a\u53ea\u8fd9\u4e2a\u5927\u7269\u4f53\u88ab\u5206\u914d\u5230\u540c\u4e00\u4e2a\u7279\u5f81\u56fe\u4e2d\uff0c\u5176\u4ed6\u4e24\u4e2a\u7279\u5f81\u56fe\u4e0d\u662f\u88ab\u6d6a\u8d39\u4e86\u561b\u3002 \u4e0a\u9762\u7684\u65b9\u6cd5\u4f1a\u9020\u6210\u8d44\u6e90\u7684\u6d6a\u8d39\uff0c\u8003\u8651\u591a\u5c3a\u5ea6\u7279\u5f81\u56fe\u662f\u5426\u6709\u5fc5\u8981\uff0c\u662f\u5426\u80fd\u7528\u5206\u8fa8\u7387\u9ad8\u7684\u5355\u5c3a\u5ea6\u6765\u4ee3\u66ff\u591a\u5c3a\u5ea6(FaceBoxes\u7cbe\u7b80\u7248\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u4ed6\u4eec\u5728\u6700\u540e\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u65b9\u683c\u4ea7\u751f\u4e8623\u4e2a\u5148\u9a8c\u6846)\u3002\u7279\u5f81\u56fe\u5927\u4e86\u6807\u7b7e\u91cd\u5199\u6982\u7387\u4e5f\u4f1a\u964d\u4f4e\u3002 \u7f51\u7edc\u6539\u5199\uff0c\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\u53ef\u4ee5\u52a0\u5f3a\u7279\u5f81\u7684\u63d0\u53d6\u80fd\u529b\u3002 \u878d\u5408\u65b9\u5f0f\u89e3\u6790 YOLOV4(20/04) \u00b6 \u8bba\u6587 | code | pytorch code | \u535a\u5ba2\u8be6\u89e3 \u8f93\u5165\u7aef Mosaic (\u9a6c\u8d5b\u514b)\u6570\u636e\u589e\u5f3a:\u89e3\u51b3coco\u6570\u636e\u96c6\u4e2d\u5c0f\u76ee\u6807\u5360\u6bd4 41.4% \u5927\u4e14\u4e0d\u5747\u5300\u95ee\u9898 \u5927\u5927\u4e30\u5bcc\u6570\u636e\u96c6\uff0c\u7279\u522b\u662f\u968f\u673a\u7f29\u653e\u589e\u52a0\u4e86\u5f88\u591a\u5c0f\u76ee\u6807\uff0c\u8ba9\u7f51\u7edc\u7684\u9c81\u68d2\u6027\u66f4\u597d\u3002 BackBone\u521b\u65b0 CSPDarknet53 \u501f\u9274\u4e86 CSPNet \u7684\u7ecf\u9a8c\uff0c\u5176\u4e2d\u5305\u542b\u4e865\u4e2a CSP \u6a21\u5757 CSPNet(19/11) \u8be5\u7f51\u7edc\u53ef\u4ee5\u589e\u5f3aCNN\u5b66\u4e60\u80fd\u529b(\u901f\u5ea6\u5feb\uff0c\u5185\u5b58\u6210\u672c\u4f4e)\u3002 CSPNet \u5c06\u5e95\u5c42\u7684\u7279\u5f81\u6620\u5c04\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7ecf\u8fc7\u5bc6\u96c6\u5757\u548c\u8fc7\u6e21\u5c42\uff0c\u53e6\u4e00\u90e8\u5206\u4e0e\u4f20\u8f93\u7684\u7279\u5f81\u6620\u5c04\u7ed3\u5408\u5230\u4e0b\u4e00\u9636\u6bb5\u3002 Mish\u6fc0\u6d3b\u51fd\u6570 Dropblock Dropblock \u7f13\u89e3\u8fc7\u62df\u5408\u7684\u4e00\u79cd\u6b63\u5219\u5316\u65b9\u5f0f\uff0c\u5377\u79ef\u5c42\u5bf9\u968f\u673a\u4e22\u5f03\u4e0d\u654f\u611f(\u56e0\u4e3a\u968f\u673a\u4e22\u5f03\u540e\uff0c\u5377\u79ef\u5c42\u4ecd\u7136\u53ef\u4ee5\u4ece\u76f8\u90bb\u7684\u6fc0\u6d3b\u5355\u5143\u5b66\u4e60\u5230**\u76f8\u540c\u7684\u4fe1\u606f**) \u501f\u9274 cutout \u6570\u636e\u589e\u5f3a(\u5c06\u8f93\u5165\u56fe\u50cf\u90e8\u5206\u7f6e\u96f6:\u64e6\u9664),\u5728\u8bad\u7ec3\u4e2d\u6309\u7167\u4e00\u5b9a\u6bd4\u4f8b Dropblock \u6bcf\u4e2a\u7279\u5f81\u56fe\uff0c\u6bd4\u4f8b\u4e0d\u56fa\u5b9a\uff0c\u5f00\u59cb\u662f\u5f88\u5c0f\u6bd4\u4f8b\uff0c\u968f\u7740\u8bad\u7ec3\u8fc7\u7a0b**\u7ebf\u6027\u589e\u52a0**\u8fd9\u4e2a\u6bd4\u4f8b\u3002 Neck\u521b\u65b0 \u5728\u76ee\u6807\u68c0\u6d4b\u9886\u57df\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u63d0\u53d6\u878d\u5408\u7279\u5f81\uff0c\u901a\u5e38\u5728**Backbone**\u548c**\u8f93\u51fa\u5c42**\uff0c\u4f1a\u63d2\u5165\u4e00\u4e9b\u5c42\uff0c\u8fd9\u4e2a\u90e8\u5206\u79f0\u4e3aNeck\u3002\u76f8\u5f53\u4e8e\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u7684\u9888\u90e8\uff0c\u4e5f\u662f\u975e\u5e38\u5173\u952e\u7684\u3002 SPP\u6a21\u5757 \u91c7\u7528**SPP\u6a21\u5757**\u7684\u65b9\u5f0f\uff0c\u6bd4\u5355\u7eaf\u7684\u4f7f\u7528**k*k\u6700\u5927\u6c60\u5316**\u7684\u65b9\u5f0f\uff0c\u66f4\u6709\u6548\u7684\u589e\u52a0\u4e3b\u5e72\u7279\u5f81\u7684\u63a5\u6536\u8303\u56f4\uff0c\u663e\u8457\u7684\u5206\u79bb\u4e86\u6700\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u7279\u5f81\u3002 Yolov4\u7684\u4f5c\u8005\u5728\u4f7f\u7528**608*608**\u5927\u5c0f\u7684\u56fe\u50cf\u8fdb\u884c\u6d4b\u8bd5\u65f6\u53d1\u73b0\uff0c\u5728COCO\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4ee50.5%\u7684\u989d\u5916\u8ba1\u7b97\u4ee3\u4ef7\u5c06AP50\u589e\u52a0\u4e862.7%\uff0c\u56e0\u6b64Yolov4\u4e2d\u4e5f\u91c7\u7528\u4e86**SPP\u6a21\u5757**\u3002 FPN+PAN\u7ed3\u6784 Yolov4\u5728FPN\u5c42\u7684\u540e\u9762\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a**\u81ea\u5e95\u5411\u4e0a\u7684\u7279\u5f81\u91d1\u5b57\u5854\u3002 FPN\u5c42\u81ea\u9876\u5411\u4e0b\u4f20\u8fbe**\u5f3a\u8bed\u4e49\u7279\u5f81 \uff0c\u800c\u7279\u5f81\u91d1\u5b57\u5854\u5219\u81ea\u5e95\u5411\u4e0a\u4f20\u8fbe**\u5f3a\u5b9a\u4f4d\u7279\u5f81** \u539f\u672c\u7684PANet\u7f51\u7edc\u7684**PAN\u7ed3\u6784**\u4e2d\uff0c\u4e24\u4e2a\u7279\u5f81\u56fe\u7ed3\u5408\u662f\u91c7\u7528**shortcut(add-\u7ef4\u5ea6\u4e0d\u53d8)**\u64cd\u4f5c\uff0c\u800cYolov4\u4e2d\u5219\u91c7\u7528**concat\uff08route:\u901a\u9053\u62fc\u63a5\uff09**\u64cd\u4f5c\uff0c\u7279\u5f81\u56fe\u878d\u5408\u540e\u7684\u5c3a\u5bf8\u53d1\u751f\u4e86\u53d8\u5316\u3002 Prediction\u521b\u65b0:(CIou_loss+DIou_nms) CIou_loss **IOU_Loss\uff1a**\u4e3b\u8981\u8003\u8651\u68c0\u6d4b\u6846\u548c\u76ee\u6807\u6846\u91cd\u53e0\u9762\u79ef\u3002 **GIOU_Loss\uff1a**\u5728IOU\u7684\u57fa\u7840\u4e0a\uff0c\u89e3\u51b3\u8fb9\u754c\u6846\u4e0d\u91cd\u5408\u65f6\u7684\u95ee\u9898\u3002 **DIOU_Loss\uff1a**\u5728IOU\u548cGIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u4fe1\u606f\u3002 **CIOU_Loss\uff1a**\u5728DIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u5bbd\u9ad8\u6bd4\u7684\u5c3a\u5ea6\u4fe1\u606f\u3002 DIOU_nms \uff1a\u6548\u679c\u4f18\u4e8e\u4f20\u7edf NMS \uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528 CIOU_nms ? ciou \u662f\u5728 Diou \u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u5f71\u54cd\u56e0\u5b50\uff0c\u5305\u542b GT \uff0c\u9884\u6d4b\u7684\u65f6\u5019\u6ca1\u6709 GT \u4fe1\u606f\uff0c\u4e0d\u7528\u8003\u8651\u5f71\u54cd\u56e0\u5b50\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 DIOU_nms \u5373\u53ef YOLOV5 \u00b6 \u535a\u5ba2 | code \u8f93\u5165\u7aef Mosaic\u6570\u636e\u589e\u5f3a \u81ea\u9002\u5e94\u951a\u70b9\u6846\u8ba1\u7b97:\u5c06\u951a\u70b9\u6846\u8ba1\u7b97\u5d4c\u5165\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u8bad\u7ec3\u53ef\u4ee5\u81ea\u9002\u5e94\u7684\u8ba1\u7b97\u4e0d\u540c\u8bad\u7ec3\u96c6\u4e2d\u7684\u6700\u4f73\u951a\u70b9\u6846(\u53ef\u5173\u95ed) \u63a8\u7406\u65f6\u81ea\u9002\u5e94\u56fe\u7247\u7f29\u653e:\u4e0d\u540c\u957f\u5bbd\u6bd4\u7684\u56fe\u7247resize\u5230\u76f8\u540c\u5c3a\u5bf8\u4f1a\u6709\u7578\u53d8\uff0c\u82e5\u586b\u5145\u9ed1\u8fb9\u540eresize\u867d\u7136\u65e0\u7578\u53d8\u4f46\u957f\u5bbd 2:1 \u7684\u586b\u5145\u9ed1\u8fb9\u8fc7\u591a\uff0c\u5b58\u5728\u4fe1\u606f\u5197\u4f59\uff0c\u5f71\u54cd\u63a8\u7406\u901f\u5ea6\uff1b\u6539\u8fdb:\u957f\u8fb9\u6c42\u7f29\u653e\u7cfb\u6570\uff0c\u77ed\u8fb9\u7b49\u6bd4\u4f8b\u7f29\u653e\uff0c pad_width=(\u7f29\u653e\u957f\u8fb9-\u7f29\u653e\u77ed\u8fb9)%32 / 2 \uff0c\u77ed\u8fb9\u8865 pad_width \u5373\u53ef(yolov5\u4e0d\u662f\u8865\u9ed1\u8fb9,\u800c\u662f\u7070\u8272 114,114,114 \uff0c\u5176\u5b9e\u7ed3\u679c\u90fd\u4e00\u6837)\uff1b 32 \uff1aYolov5\u7684\u7f51\u7edc\u7ecf\u8fc75\u6b21\u4e0b\u91c7\u6837\uff0c\u800c2\u76845\u6b21\u65b9\uff0c\u7b49\u4e8e**32**\u3002\u6240\u4ee5\u81f3\u5c11\u8981\u53bb\u638932\u7684\u500d\u6570\uff0c\u518d\u8fdb\u884c\u53d6\u4f59\u3002 Backbone\u521b\u65b0 Yolov4\u4e2d\u53ea\u6709\u4e3b\u5e72\u7f51\u7edc\u4f7f\u7528\u4e86CSP\u7ed3\u6784\uff0cyolov5\u4e3b\u5e72\u548cneck\u90fd\u7528\u4e86CSP\u7ed3\u6784 Focus\u7ed3\u6784 Neck\u521b\u65b0 FPN+PAN\u7ed3\u6784 Yolov4\u7684Neck\u7ed3\u6784\u4e2d\uff0c\u91c7\u7528\u7684\u90fd\u662f\u666e\u901a\u7684\u5377\u79ef\u64cd\u4f5c\u3002\u800cYolov5\u7684Neck\u7ed3\u6784\u4e2d\uff0c\u91c7\u7528\u501f\u9274CSPnet\u8bbe\u8ba1\u7684CSP2\u7ed3\u6784\uff0c\u52a0\u5f3a\u7f51\u7edc\u7279\u5f81\u878d\u5408\u7684\u80fd\u529b\u3002 Predict yolov4->CIOU_loss vs yolov5->GIOU_loss yolov4->GIOU_nms vs yolov5->\u52a0\u6743\u7684nms \u603b\u7ed3:yolov5\u56db\u4e2a\u7f51\u7edc yolov5s/yolov5m/yolov5l/yolov5x \u7f51\u7edc\u7ed3\u6784\u90fd\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u901a\u8fc7\u4e0d\u540c\u7684 depth_multiple/width_umltiple \u6765\u63a7\u5236\u7f51\u7edc\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\u3002 YOLOF(21/03) \u00b6 \u8bba\u6587 | code \u4f5c\u8005\u8ba4\u4e3aFPN\u7684\u4f5c\u7528\u6709\u4ee5\u4e0b\u4e24\u4e2a\uff0c\u63a2\u7d22FPN\u7684\u8fd9\u4e24\u4e2a\u4f5c\u7528\u7684\u5b9e\u9645\u8d21\u732e\u7a0b\u5ea6 \u4e00\u662f\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\uff0c\u63d0\u9ad8\u4e86\u7279\u5f81\u7684\u4e30\u5bcc\u7a0b\u5ea6\uff1b \u4e8c\u662f\u4f7f\u7528\u5206\u6cbb\u6cd5\uff0c\u5c06\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6309\u7167\u76ee\u6807\u5c3a\u5bf8\u4e0d\u540c\uff0c\u5206\u6210\u82e5\u5e72\u4e2a\u68c0\u6d4b\u5b50\u4efb\u52a1(\u6d45\u5c42\u7279\u5f81\u5206\u5e03\u5c0f\u5c3a\u5ea6 anchor \u68c0\u6d4b\u5c0f\u76ee\u6807\uff0c\u6df1\u5c42\u7279\u5f81\u5206\u914d\u5927 anchor \u68c0\u6d4b\u5927\u76ee\u6807)\u3002 \u4ee5Retinanet\u7684FPN\u505a\u5b9e\u9a8c\u7ed3\u679c\u5982\u4e0b \u591a\u8f93\u5165\u548c\u5355\u8f93\u5165\u5bf9\u7ed3\u679c\u76f8\u5dee\u4e0d\u5927\uff0c\u4f46\u662f\u591a\u8f93\u51fa\u548c\u5355\u8f93\u51fa\u5bf9\u7ed3\u679c\u5f71\u54cd\u5de8\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4 FPN \u7684\u5b9e\u9645\u8d21\u732e\u5ea6\u5927\u90e8\u5206\u5728\u5206\u6cbb\u6cd5\u8fd9\u8fb9\u3002\u5206\u6790\u539f\u56e0\u662f\uff1a \u591a\u5c3a\u5ea6\u8f93\u51fa\u53ef\u4ee5\u83b7\u5f97\u66f4\u5927\u4e30\u5bcc\u7684\u611f\u53d7\u91ce\u3002 a->d\uff0c\u5982\u679cp5\u7684\u8f93\u51fa\u83b7\u5f97\u7684\u611f\u53d7\u91ce\u548ca\u7b49\u540c\u7684\u8bdd\uff0c\u8ba1\u7b97\u91cf\u662f\u4e0d\u662f\u4f1a\u5927\u5927\u964d\u4f4e\uff1f \u4f7f\u7528Dilated Encoder\u4ee3\u66ffFPN\u6548\u679c\u5f88\u68d2 \u95ee\u9898:\u5f15\u5165positive anchor\u4e0d\u5747\u8861\u95ee\u9898 retinaNet \u67d0\u4e2a anchor \u548c gt\u6846 \u7684\u6700\u5927 iou>0.5 \u5373\u4e3a positive anchor ,\u79f0\u4e3a Max-IoU Matching \uff0c\u5176\u4ed6\u68c0\u6d4b\u5668\u4e5f\u5e38\u7528(\u56e0\u4e3a\uff0c\u591a\u5c3a\u5ea6\u7279\u5f81\u53ef\u4ee5\u4ea7\u751f\u5f88\u591a positive anchor )\uff0c\u4f46 Dilated Encoder \u7ed3\u6784\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u7279\u5f81\uff0c\u5982\u679c\u4f7f\u7528\u8be5\u65b9\u6cd5\uff0c positive anchor \u4f1a\u5f88\u5c11( 100k-->5k )\uff0c\u800c\u4e14\uff0c ground truth \u5c3a\u5bf8\u5927\u7684\u76ee\u6807\u4ea7\u751f\u7684 positive anchor \u8981\u591a\u4e8e ground truth \u5c3a\u5bf8\u5c0f\u7684\u76ee\u6807\u4ea7\u751f\u7684 positive anchor \uff0c\u8fd9\u79cd\u73b0\u8c61\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5728\u8bad\u7ec3\u65f6\u66f4\u5173\u6ce8\u5927\u5c3a\u5bf8\u7684\u76ee\u6807\uff0c\u5ffd\u7565\u5c0f\u5c3a\u5bf8\u76ee\u6807\u3002\u89e3\u51b3: Uniform Matching \u5bf9\u4e8e\u6bcf\u4e2a\u76ee\u6807\uff0c\u90fd\u5c06\u548c\u8be5\u76ee\u6807 ground truth \u6700\u8fd1\u7684 k \u4e2a anchor \u4f5c\u4e3a\u8be5\u76ee\u6807\u7684 positive anchor \uff0c\u4ece\u800c\u4fdd\u8bc1\u6bcf\u4e2a\u76ee\u6807\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684 positive anchor \uff0c\u4fdd\u8bc1\u7f51\u7edc\u8bad\u7ec3\u65f6\u80fd\u517c\u987e\u5c3a\u5bf8\u5927\u5c0f\u4e0d\u540c\u7684\u76ee\u6807\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4e3a\u4e86\u907f\u514d\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\uff0c\u5ffd\u7565 Uniform Matching \u65b9\u6cd5\u4e2d\u4ea7\u751f\u7684\u4e0e ground truth \u7684 IoU \u5927\u4e8e 0.7 \u7684 negative anchor \u548c\u4e0e ground truth \u7684 IoU \u5c0f\u4e8e 0.15 \u7684 positive anchor \u3002 \u7f51\u7edc\u7ed3\u6784 PPYOLO(20/07) \u00b6 \u5168\u79f0: PaddlePaddle-YOLO | \u8bba\u6587\u5730\u5740 | code \u57fa\u4e8e yolov3 \u7684\u76ee\u6807\u68c0\u6d4b\u5668\uff0c\u5c1d\u8bd5\u7ed3\u5408\u5404\u79cd\u4e0d\u589e\u52a0\u6a21\u578b\u53c2\u6570\u7684\u6280\u5de7\uff0c\u786e\u4fdd\u73b0\u6709\u901f\u5ea6\u7684\u60c5\u51b5\u4e0b\u5c3d\u53ef\u80fd\u63d0\u9ad8\u7cbe\u5ea6\u3002 \u7ecf\u9a8c+\u5b9e\u9a8c\u6280\u5de7\u6587\uff1a\u65e0\u521b\u65b0\u70b9\uff0c\u63a2\u7d22\u7684\u662f\u6280\u5de7\u5982\u4f55\u7ed3\u5408\u6548\u679c\u66f4\u4f18 \u7f51\u7edc\u7ed3\u6784 : backbone:resnet50-vd-dcn,detectionNeck:FPN,detectionHead:yolv3 \u7d2b\u8272\u4e09\u89d2\u8868\u793a\u4f7f\u7528\u4e86 DropBlock ,\u6240\u4ee5\u4ec5\u4ec5\u5728 FPN \u4e0a\u4f7f\u7528\u4e86\uff0c\u5728 backbone \u4e0a\u4f7f\u7528\u6027\u80fd\u4f1a\u4e0b\u964d\uff1b \u9ec4\u8272\u94bb\u77f3\u8868\u793a CoordConv(\u5750\u6807\u5377\u79ef) \u7ea2\u8272\u4e94\u89d2\u661f\u8868\u793a SPP \u7ed3\u6784 \u6280\u5de7\u7684\u8fd0\u7528\u7ed3\u5408 \uff1a\u6700\u7ec8PP-YOLO\u5728COCO test-dev 2017\u4e0a\u7684\u6027\u80fd\u8868\u73b0\uff1a 45.2% mAP\uff0c72.9 FPS\uff01 # \u6570\u636e\u589e\u5f3a # 1. \u5e94\u7528\u4eceBeta(a=1.5,b=1.5)\u5206\u5e03\u4e2d\u91c7\u6837\u7684\u6743\u91cdMixUp # 2. RandomColorDistortion, RandomExpand,RandCrop\u548cRandomFlip\u4ee50.5\u7684\u6982\u7387\u4f9d\u6b21\u5e94\u7528\u3002 # 3. \u5c06RGB\u901a\u9053\u5206\u522b\u51cf\u53bb0.485\u30010.456\u30010.406\u30010.229\u30010.224\u30010.225\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\u3002 # 4. \u6700\u540e\uff0c\u8f93\u5165\u5927\u5c0f\u4ece[320,352,384,416,448,480,512,544,576,608]\u5747\u5300\u62bd\u53d6\u3002 ResNet50-vd:resnet50\u7684d\u7248\u6539\u8fdb ; Deformable Conv :\u53ef\u53d8\u5f62\u5377\u79ef\uff1b LB:Larger Batch Size(64->192) ;\u6307\u6570\u79fb\u52a8\u5e73\u5747 EMA ; DropBlock:feature map drop :\u4f5c\u8005\u4ec5\u4ec5\u7528\u4e8e FPN \u4e0a\uff0c\u56e0\u4e3a\u4f5c\u8005\u7528\u5230 backbone \u4e0a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff1b IOU Loss :\u4f5c\u8005\u53d1\u73b0\u5404\u79cd IOU Loss \u7684\u6539\u5584\u662f\u76f8\u4f3c\u7684,\u6240\u4ee5\u9009\u62e9\u6700\u57fa\u7840\u7684 IOU Loss \uff0c\u4e14\u5e76\u6ca1\u6709\u76f4\u63a5\u7528\u8be5 Iou loss \u66ff\u6362 smooth L1 Loss \uff0c\u800c\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5206\u652f\u53bb\u8ba1\u7b97\u3002 Iou Aware : yolov3 \u4e2d detection_score=class_score*objectness[0,1] \uff0c\u7136\u800c\u8fd9\u5e76\u6ca1\u6709\u8003\u8651\u5b9a\u4f4d\u7684\u7cbe\u5ea6\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u589e\u52a0\u4e86 Iou \u9884\u6d4b\u5206\u652f\u6765\u8861\u91cf\u5b9a\u4f4d\u7684\u51c6\u786e\u6027\u3002\u5728\u8bad\u7ec3\u671f\u95f4\uff0c\u91c7\u7528 IoU aware loss \u6765\u8bad\u7ec3 IoU \u9884\u6d4b\u5206\u652f\u3002 \u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d: detection_score=iou_aware_loss*class_score*objectness[0,1] \uff0c\u8fd9\u4e0e\u5b9a\u4f4d\u7cbe\u5ea6\u66f4\u52a0\u76f8\u5173\u3002 \u7136\u540e\u5c06\u6700\u7ec8\u7684\u68c0\u6d4b\u7f6e\u4fe1\u5ea6\u7528\u4f5c\u540e\u7eed NMS \u7684\u8f93\u5165\uff0c\u867d\u7136\u52a0\u5165\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5206\u652f\u4f46\u662f\u53c2\u6570\u53ea\u589e\u52a0\u4e86\u4e00\u70b9\u70b9\u3002 Grid Sensitive :\u7f51\u683c\u654f\u611f\u6027\u3002 Matrix NMS :\u77e9\u9635NMS\u662f\u7531Soft-NMS\u63a8\u52a8\u7684\uff0c\u5b83\u4f1a\u524a\u5f31\u5176\u4ed6\u68c0\u6d4b\u5f97\u5206\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u91cd\u53e0\u90e8\u5206\u5448\u5355\u8c03\u9012\u51cf\u51fd\u6570\uff1b\u901f\u5ea6\u4f18\u4e8e\u4f20\u7edf NMS CoordConv(\u5750\u6807\u5377\u79ef) :\u5176\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u4f7f\u7528\u989d\u5916\u7684\u5750\u6807\u901a\u9053\u6765\u4f7f\u5377\u79ef\u8bbf\u95ee\u5176\u81ea\u8eab\u7684\u8f93\u5165\u5750\u6807\u6765\u589e\u52a0\u7279\u5f81\u4e4b\u95f4\u7684\u4f9d\u8d56\u6027\u3002\u56e0\u4e3a\u5176\u5411\u5377\u79ef\u5c42\u6dfb\u52a0\u4e24\u4e2a\u8f93\u5165\u901a\u9053\uff0c\u6dfb\u52a0\u4e00\u4e9b\u53c2\u6570\u548c FLOP \uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u51cf\u5c11\u6548\u7387\u635f\u5931\uff0c\u6211\u4eec\u4e0d\u66f4\u6539\u4e3b\u5e72\u4e2d\u7684\u5377\u79ef\u5c42\uff0c\u800c\u4ec5\u7528 CoordConv \u66ff\u6362\u4e86 FPN \u4e2d\u7684 1x1 \u5377\u79ef\u5c42\u548c\u68c0\u6d4b\u5934\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u3002 Better Pretrain Model :\u5728 ImageNet \u4e0a\u4f7f\u7528\u5177\u6709\u8f83\u9ad8\u5206\u7c7b\u7cbe\u5ea6\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u53ef\u80fd\u4f1a\u5bfc\u81f4\u66f4\u597d\u7684\u68c0\u6d4b\u6027\u80fd PPYOLOV2(21/04) \u00b6 \u8bba\u6587\u5730\u5740 | code | \u535a\u5ba2 \u6539\u8fdbv1(fpn)\u7684NECK :\u521b\u5efa\u65b0 neck \uff0c\u76ee\u7684\u662f\u7528\u4e8e\u6784\u5efa\u6240\u6709\u5c3a\u5ea6\u7684\u9ad8\u7ea7\u8bed\u4e49\u7279\u5f81 map \uff0c\u56e0\u4e3a\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0b\u68c0\u6d4b\u4efb\u52a1\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u4e00\u4e2a\u57fa\u672c\u6311\u6218\uff1b\u5982\u4e0b\u56fe\uff0c\u8def\u5f84\u662f\u81ea\u5e95\u5411\u4e0a\u3002 \u7ed3\u679c\u63d0\u5347\u5982\u4e0b\u56fe \u6539\u8fdbIou Aware :\u8ba1\u7b97\u91c7\u7528\u4e86 soft weight format \uff0c\u8fd9\u4e0e\u6700\u521d\u7684\u610f\u56fe\u4e0d\u4e00\u81f4\u3002\u56e0\u6b64\u6539\u8fdb\u4e3a\u5e94\u7528 soft label format t \u4e3a anchor \u4e0e ground-truth-bounding box \u4e4b\u95f4\u7684 IoU p \u4e3a IoU aware branch \u7684\u539f\u59cb\u8f93\u51fa\uff0c \u03c3 \u4e3a sigmoid \u6fc0\u6d3b\u51fd\u6570\u3002 \u6ce8\u610f\uff0c\u53ea\u8ba1\u7b97\u6b63\u6837\u672c\u7684 IoU aware loss \u3002\u901a\u8fc7\u66ff\u6362\u635f\u5931\u51fd\u6570 IoU aware branch \u6bd4\u4ee5\u524d\u66f4\u597d\u3002 Larger Input Size \uff1a\u8f93\u5165\u5927\u5c0f\u5747\u5300\u5730\u4ece [320,352,384,416,448,480\uff0c512\u3001544\u3001576\u3001608\u3001640\u3001672\u3001704\u3001736\u3001768] \u83b7\u53d6\uff0c\u66f4\u5927\u5c3a\u5bf8\u9884\u793a\u7740\u66f4\u591a\u5185\u5b58\uff0c\u9700\u8981\u51cf\u5c11 batch size mish\u6fc0\u6d3b : mish \u5728 yolov4/yolov5 \u4e0a\u88ab\u8bc1\u660e\u662f\u6709\u6548\u7684\uff0c\u4f5c\u8005\u4e3a\u4e86 backbone \u4f7f\u7528\u9884\u8bad\u7ec3\u53c2\u6570\uff0c\u6ca1\u6709\u5728 backbone \u4e0a\u4f7f\u7528 mish \uff0c\u800c\u662f\u5728 neck \u4e0a\u7528\u4e86 mish \u6fc0\u6d3b \u5176\u4ed6\u8be6\u89c1\u8bba\u6587\uff0c\u4e0b\u9762\u8fd9\u4e9b\u4e0d\u786e\u5b9a\u662f\u5426work Cosine Learning Rate Decay Backbone Parameter Freezing SiLU Activation Function FasterRcnn(15/06) \u00b6 \u8bba\u6587\u5730\u5740 \u4e3b\u8981\u601d\u60f3 \u8f93\u5165\u4efb\u610f\u5927\u5c0fPxQ\u7684\u56fe\u50cf\uff0c\u9996\u5148\u7f29\u653e\u81f3\u56fa\u5b9a\u5927\u5c0fMxN ( 800*600 )\uff0c\u9001\u5165\u5377\u79ef\u7f51\u7edc\u4ea7\u751f\u4e00\u5f20\u7279\u5f81\u56fe\uff0c\u8fd9\u5f20\u7279\u5f81\u56fe\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u4e00\u662f\u7ecf\u8fc7RPN\u7f51\u7edc\u751f\u6210\u8f83\u4e3a\u7cbe\u51c6\u7684\u5efa\u8bae\u6846\uff0c\u4e8c\u662f\u548c\u8fd9\u4e9b\u5efa\u8bae\u6846\u7ed3\u5408\u4f9d\u6b21\u9001\u5165\u5230RoiPooling\u4e2d\uff0c\u5f97\u5230\u4e00\u7cfb\u7c7b\u5efa\u8bae\u7279\u5f81\u56fe\uff0c\u518d\u9001\u5165\u5168\u8fde\u63a5\u5c42\u8fdb\u884c\u540e\u7eed\u7684softmax\u4ea4\u53c9\u71b5\u5206\u7c7b\u548csmooth l1\u8fb9\u6846\u56de\u5f52\uff08 \u5206\u7c7b\u6982\u7387\u548c\u8fb9\u6846\u56de\u5f52\u8054\u5408\u8bad\u7ec3 \uff09\uff0c\u5f97\u5230\u7cbe\u51c6\u7684\u8fb9\u6846\u548c\u7269\u4f53\u7c7b\u522b\u3002 \u7f51\u7edc\u7ec6\u8282\uff1a \u5728\u6574\u4e2aConv layers\u4e2d\uff0cconv\u548crelu\u5c42\u4e0d\u6539\u53d8\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\uff0c\u53ea\u6709pooling\u5c42\u4f7f\u8f93\u51fa\u957f\u5bbd\u90fd\u53d8\u4e3a\u8f93\u5165\u7684\u00bd\u3002 anchor 9\u79cd\u5c3a\u5bf8=3\u4e2a\u9762\u79ef(128,256,512)*3\u79cd\u5c3a\u5bf8(1:1,1:2,2:1)\uff0c\u8fd99\u4e2aAnchors\u5927\u5c0f\u5bbd\u9ad8\u4e0d\u540c\uff0c\u5bf9\u5e94\u5230\u539f\u56fe\u57fa\u672c\u53ef\u4ee5\u8986\u76d6\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u7269\u4f53 **\u5bf9\u4e8e\u4e00\u5e45 W*H \u7684feature map,\u5bf9\u5e94 W*H*k(9) \u4e2a**\u951a\u70b9(Anchor)\uff0c\u5c31VGG16\u800c\u8a00\uff0c\u5230\u7279\u5f81\u56fe\u90a3\u4e00\u6b65\u4e0b\u91c7\u6837\u4e8616\u500d\uff0c\u5171\u6709anchor: 256-d \u662fZF\u7f51\u7edc\u7684\uff0c\u4f7f\u7528VGG16\u7f51\u7edc\u7684\u8bdd\u662f 512-d \uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6\u662f512\u3002 RPN \u7279\u5f81\u56fe\u4e4b\u540e\u53c8\u505a\u4e86 3x3 \u7684\u5377\u79ef\uff0c\u4e0d\u6539\u53d8\u901a\u9053\u6570\uff0c\u5176\u76ee\u7684\u662f\u8ba9\u6bcf\u4e2a\u70b9\u53c8\u878d\u5408\u4e86\u5468\u56f43x3\u7684\u7a7a\u95f4\u4fe1\u606f\u3002 \u7136\u540e\u8be5\u7279\u5f81\u56fe\u53c8\u7ecf\u8fc7\u4e86\u4e24\u4e2a 1x1\u5377\u79ef \uff0c\u4fee\u6539\u901a\u9053\u5206\u522b\u4e3a 2k+4k \uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u6bcf\u4e2a\u951a\u70b9\u6846\u8fdb\u884c2\u5206\u7c7b(softmax\u4ea4\u53c9\u71b5\uff1a\u662f\u5426\u662f\u7269\u4f53,\u6ce8\u610f\u4e0d\u80fd\u5f97\u5230\u5177\u4f53\u7c7b\u522b)\u548c4\u4e2a\u504f\u79fb\u91cf(smooth l1 loss:x,y,w,h) \u5982\u4f55\u83b7\u53d6\u5408\u9002\u7684anchor\uff1f \u6309\u7167\u8f93\u5165\u7684foreground softmax scores\u7531\u5927\u5230\u5c0f\u6392\u5e8fanchors\uff0c\u63d0\u53d6\u524dpre_nms_topN(e.g. 6000)\u4e2aanchors \u8bbe\u7f6e\u5408\u9002\u9608\u503c\uff0c\u5254\u9664\u975e\u5e38\u5c0f\uff08width<threshold or height<threshold\uff09\u7684foreground anchors \u518d\u6b21\u6309\u7167nms\u540e\u7684foreground softmax scores\u7531\u5927\u5230\u5c0f\u6392\u5e8ffg anchors\uff0c\u63d0\u53d6\u524dpost_nms_topN(e.g. 300)\u7ed3\u679c\u4f5c\u4e3aproposal\u8f93\u51fa w*h*k*2+w*h*k*4 \u5982\u4f55\u6df7\u5408\uff1f\u5efa\u8bae\u7f51\u7edc\u5c42(proposal layer)\u3002\u4e09\u4e2a\u8f93\u5165(2+im_info:\u4fdd\u5b58\u4e86\u6b64\u6b21\u7f29\u653e\u7684\u6240\u6709\u4fe1\u606f) RoiPooling \u56fa\u5b9a\u957f\u5ea6\u7684\u8f93\u51fa\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5411\u540e\u9762\u7684\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u3002 \u6700\u540e\uff0c\u5c06\u5f97\u5230\u7684\u7279\u5f81\u62fc\u63a5\u8d77\u6765\uff0c\u5f97\u5230\u7684\u7279\u5f81\u662f 16c+4c+c= 21c \u7ef4\u7684\u7279\u5f81\u3002\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a\u8f93\u51fa\u7279\u5f81\u7684\u957f\u5ea6\u4e0ew\u3001h\u4e24\u4e2a\u503c\u662f\u65e0\u5173\u7684\uff0c\u56e0\u6b64**SPP\u6c60\u5316\u5c42\u53ef\u4ee5\u628a\u4efb\u610f\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u7684\u5377\u79ef\u7279\u5f81\u8f6c\u6362\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u5411\u91cf**\u3002 SSD(16/11) \u00b6 \u8bba\u6587\u5730\u5740 | \u535a\u5ba2\u8be6\u89e3 \u7b80\u5355\u601d\u60f3:\u4f7f\u7528\u4e00\u79cd\u5168\u5377\u79ef\u7f51\u7edc(\u9b54\u6539\u4e86vgg16)\uff0c\u7136\u540e\u4f7f\u7528\u591a\u5c3a\u5ea6\u7279\u5f81\u56fe\u505a\u68c0\u6d4b\uff0c\u5e76\u4e14\u4f7f\u7528\u4e86\u4e0d\u540c\u957f\u5bbd\u7684\u5148\u9a8c\u6846 \u7b80\u5355\u6b65\u9aa4 \u9b54\u6539vgg16 \u5c06VGG16\u7684FC6\u548cFC7\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42\uff0c\u540e\u9762\u52a0\u4e86\u56db\u5c42\u5377\u79ef\uff0cconv4,7,8,9,10,11,\u51716\u4e2a\u7279\u5f81\u56fe\u3002\u6bcf\u4e2a\u7279\u5f81\u56fe\u7684\u6bcf\u4e00\u4e2a\u70b9\u6784\u90204/6( 4,6,6,6,4,4 )\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u5927\u5c0f\u7684BB\uff0c\u7136\u540e\u5206\u522b\u8fdb\u884c\u68c0\u6d4b\u548c\u5206\u7c7b\uff0c\u5c06\u4e0d\u540cfeature map\u83b7\u5f97\u7684BB\u7ed3\u5408\u8d77\u6765(\u6620\u5c04\u5230\u539f\u56fe\u50cf)\uff0c\u7ecf\u8fc7NMS\u65b9\u6cd5\u6765\u6291\u5236\u6389\u4e00\u90e8\u5206\u91cd\u53e0\u6216\u8005\u4e0d\u6b63\u786e\u7684BB\uff0c\u751f\u6210\u6700\u7ec8\u7684BB\u96c6\u5408\uff08\u5373\u68c0\u6d4b\u7ed3\u679c\uff09 \u5148\u9a8c\u6846\u751f\u6210\uff1a Prior box \u9488\u5bf9 feature map \u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u4e00\u4e2a cell \uff0c\u901a\u8fc7\u7b49\u6bd4\u653e\u7f29\u7684\u65b9\u6cd5\u6765\u627e\u5230\u539f\u56fe\u50cf\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06 cell \u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u63d0\u53d6\u51fa\u4e0d\u540c\u5c3a\u5ea6\u7684 bounding box \u5019\u9009\u533a\u57df\uff0c\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u53eb\u505a Prior box \u3002\u9488\u5bf9\u6bcf\u4e00\u4e2a Prior Box \u548c \u771f\u503cGT \u6bd4\u8f83\u4f1a\u5f97\u5230 label \u3002\u5bf9\u4e8e cell \u4f1a\u5bf9\u5e94\u5230\u4e0d\u540c\u7684 Prior Box \uff0c\u5206\u522b\u5f53\u524d Prior Box \u9884\u6d4b\u7c7b\u522b\u6982\u7387\u548c\u5750\u6807 (x,y,w,h) .\u5982\u679c\u9884\u6d4b\u7c7b\u522b\u5171\u6709 C \u7c7b\uff0c\u6700\u7ec8\u4e00\u4e2a Prior Box \u7684\u8f93\u51fa\u4e3a C+4 \u7ef4\u5ea6\uff0c\u6240\u4ee5 m*n \u7684\u7279\u5f81\u56fe\uff0c\u6bcf\u4e2a cell \u6709 K \u4e2a Prior box \uff0c\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u7ef4\u5ea6\u662f: (C+4)*k*m*n \u5148\u9a8c\u6846\u751f\u6210\u89c4\u5219\uff1a \u6bcf\u4e00\u4e2a cell \u751f\u6210\u56fa\u5b9a\u7684 scale \u548c aspect ratio (\u7eb5\u6a2a\u6bd4)\u7684 box \uff0c\u7531\u56fe\u53ef\u77e5\uff0c SSD \u6700\u540e\u751f\u6210\u4e86 8732 \u4e2a\u5148\u9a8c\u6846\u3002 \u8bad\u7ec3 \u6b63\u8d1f\u6837\u672c\u786e\u5b9a: \u96be\u4f8b\u6316\u6398 \u6bcf\u4e00\u4e2a feature map cell \u4e0d\u662f k \u4e2a default box \u90fd\u53d6 prior box \u4e0e GT box \u505a\u5339\u914d\uff0c IOU >\u9608\u503c( 0.5 )\u4e3a\u6b63\u6837\u672c\uff0c\u901a\u8fc7\u96be\u4f8b\u6316\u6398\uff0c\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c\u6bd4\u4e3a 1:3 \u5206\u7c7b\u548c\u56de\u5f52(\u6bcf\u4e00\u4e2a\u7279\u5f81\u56fe\u90fd\u8981\u8fdb\u884c Detector&classifier ) \u6bd4\u5982block7( 19x19 )\uff0c\u9ed8\u8ba4\u6846\uff08def boxes\uff09\u6570\u76ee\u4e3a 6 \uff0c\u6bcf\u4e2a\u9ed8\u8ba4\u6846\u5305\u542b 4\u4e2a \u504f\u79fb\u4f4d\u7f6e\u548c 21=(20+1)\u4e2a \u7c7b\u522b\u7f6e\u4fe1\u5ea6 \uff084+21\uff09 \u3002\u56e0\u6b64\uff0c block7 \u7684\u6700\u540e\u8f93\u51fa\u4e3a (19*19)*6*(4+21) \u3002 \u63a8\u7406\u7684\u65f6\u5019\uff0c\u4ee3\u7801\u4e2d\u4f1a\u53d6 top200\u505anms \uff0c\u7136\u540e\u6839\u636e\u9608\u503c\u7b5b\u9009\u5373\u53ef Loss\uff1a\u5206\u7c7b\u662f softmax \uff0c\u56de\u5f52\u662f Smooth L1 Loss \uff0c\u4e24\u4e2aloss\u7528\u53c2\u6570 alpha \u8c03\u6574\u6743\u91cd\u6bd4\u4f8b \u5148\u9a8c\u6846\u548c\u76ee\u6807\u7c7b\u522b\u7684\u7f6e\u4fe1\u5ea6loss+\u4f4d\u7f6e\u56de\u5f52loss\uff0c\u5176\u4e2dN\u662fmatch\u5230Ground Truth\u7684default box\u6570\u91cf\uff1b\u800calpha\u53c2\u6570\u7528\u4e8e\u8c03\u6574confidence loss\u548clocation loss\u4e4b\u95f4\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4alpha=1\u3002 \u7f6e\u4fe1\u5ea6loss \u56de\u5f52loss \u7f3a\u70b9 \u5728 SSD \u4e2d\uff0c\u4e0d\u540c\u5c42\u7684 feature map \u90fd\u662f\u72ec\u7acb\u4f5c\u4e3a\u5206\u7c7b\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u5bb9\u6613\u51fa\u73b0\u76f8\u540c\u7269\u4f53\u88ab\u4e0d\u540c\u5927\u5c0f\u7684\u6846\u540c\u65f6\u68c0\u6d4b\u51fa\u6765\uff08\u4e0d\u540c\u7279\u5f81\u56fe\u4e4b\u95f4\u7f3a\u4e4f\u7f3a\u4e4f\u8054\u7cfb\uff09 SSD\u7b97\u6cd5\u5bf9**\u5c0f\u76ee\u6807\u4e0d\u591f\u9c81\u68d2**\u7684\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f**\u6d45\u5c42**feature map\u7684**\u8868\u5f81\u80fd\u529b\u4e0d\u591f\u5f3a** DSSD(17/01) \u00b6 \u8bba\u6587:ssd\u539f\u4f5c\u8005 \uff1aSSD\u7b97\u6cd5\u5bf9**\u5c0f\u76ee\u6807\u4e0d\u591f\u9c81\u68d2**\u7684\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f**\u6d45\u5c42**feature map\u7684**\u8868\u5f81\u80fd\u529b\u4e0d\u591f\u5f3a**\uff0c\u8fd9\u7bc7\u8bba\u6587\u4e3b\u8981\u662f\u5728\u539f\u59cbSSD\u4e0a\u52a0\u5165\u4e86**\u53cd\u5377\u79ef**\u7528\u6765\u63d0\u5347\u8868\u5f81\u80fd\u529b\u3002 DSOD(17/08) \u00b6 \u8bba\u6587 | \u4ee3\u7801 DSOD=SSD+DenseNet \uff1a\u63d0\u51fa\u4e00\u79cd\u65b0\u7684dense\u7ed3\u6784\u7528\u4e8e\u878d\u5408\u591a\u5c3a\u5ea6\u4fe1\u606f\uff08\u76f8\u6bd4\u539f\u7248SSD\u7684\u4e00\u4e2a\u6539\u8fdb\uff09 FSSD(17/12) \u00b6 \u8bba\u6587 | pytorch \u4ee3\u7801 | caffe \u4ee3\u7801 FSSD=SSD+FPN FSSD\u4e2d\u5c06**\u8f83\u5c0f**\u7684\u7279\u5f81\u56fe\u4e0a\u91c7\u6837\u5230\u7edf\u4e00\u5c3a\u5bf8\uff0c\u901a\u8fc7 concat \u8fdb\u884c\u7279\u5f81\u8fde\u63a5\uff0c\u4f5c\u4e3a\u540e\u7eedSSD\u9884\u6d4b\u6a21\u5757\u7684\u8f93\u5165\u3002 RSSD(17/05) \u00b6 \u8bba\u6587 \u6539\u5584\u4e86SSD\u5b58\u5728\u7684\u4e24\u4e2a\u95ee\u9898 \u4e00\u65b9\u9762\u5229\u7528**\u5206\u7c7b\u7f51\u7edc**\u589e\u52a0\u4e0d\u540c\u5c42\u4e4b\u95f4\u7684feature map\u8054\u7cfb\uff0c\u51cf\u5c11\u91cd\u590d\u6846\u7684\u51fa\u73b0\uff1b \u53e6\u4e00\u65b9\u9762\u589e\u52a0 feature pyramid \u4e2dfeature map\u7684\u4e2a\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u68c0\u6d4b\u66f4\u591a\u7684\u5c0f\u5c3a\u5bf8\u7269\u4f53\u3002 pooling\u65b9\u5f0f\u751f\u6210\u7279\u5f81\u91d1\u5b57\u5854 pooling \u662f\u964d\u7ef4\uff0c\u4ece\u5de6\u5f80\u53f3 concate \uff1a\u6700\u5de6\u8fb9\u7684 38*38 \u7684 feature map \uff0c\u5c06\u5176\u505a pooling \u540e\u548c\u53f3\u8fb9\u7b2c\u4e8c\u4e2a\u7684 19*19 \u7684 feature map\u505aconcate \uff0c\u8fd9\u6837\u5c31\u6709\u4e24\u4e2a 19*19 \u7684 feature map \u4e86\uff08\u4e00\u4e2a\u7ea2\u8272\uff0c\u4e00\u4e2a\u6a59\u8272\uff09\uff1b\u7136\u540e\u518d\u5bf9\u8fd9\u4e24\u4e2a 19*19 \u7684 feature map \u505a pooling \uff0c\u518d\u548c\u5de6\u8fb9\u7b2c\u4e09\u4e2a\u9ec4\u8272\u7684 10*10 \u7684 feature map \u505a concate \u2026\u2026 deconvolusion\u53cd\u5377\u79ef\u65b9\u5f0f\u751f\u6210\u7279\u5f81\u91d1\u5b57\u5854 \u53cd\u5377\u79ef\u662f\u5347\u7ef4\uff0c\u4ece\u53f3\u5230\u5de6\uff0c\u6700\u53f3\u8fb9\u7684 1*1 \u7684\u7d2b\u8272feature map\u5f80\u5de6\u505aconcate \u4f5c\u8005\u8ba4\u4e3a\u524d\u4e24\u79cd\u7279\u5f81\u878d\u5408\u65b9\u5f0f\u7684\u7f3a\u70b9\u5728\u4e8e\u4fe1\u606f\u7684\u4f20\u9012\u90fd\u662f\u5355\u5411\u7684\uff0c\u8fd9\u6837\u5206\u7c7b\u7f51\u7edc\u5c31\u6ca1\u6cd5\u5229\u7528\u5176\u5b83\u65b9\u5411\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u5c31\u6709\u4e86 both pooling and deconvolution\uff08Rainbow concatenation\uff09 Rainbow concatenation \u7528\u4e0d\u540c\u989c\u8272\u7684\u77e9\u5f62\u6846\u8868\u793a\u4e0d\u540c\u5c42\u7684 feature map (\u7ec4\u5408\u8d77\u6765\u50cf\u5f69\u8679)\uff0c\u540c\u65f6\u91c7\u7528 pooling\u548cdeconvolution \u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0c\u4ece\u5de6\u81f3\u53f3\uff08 pooling\uff0cconcate \uff09\u548c\u4ece\u53f3\u81f3\u5de6\uff08 deconvolution\uff0cconcate \uff09 \u5728\u505a concate \u4e4b\u524d\u90fd\u4f1a\u5bf9 feature map \u505a\u4e00\u4e2a normalization \u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e0d\u540c\u5c42\u7684 feature map \u7684 scale \u662f\u4e0d\u540c\u7684\uff0c\u6587\u4e2d\u7684 normalization \u65b9\u5f0f\u91c7\u7528 batch normalization RFBNet(17/11) \u00b6 \u8bba\u6587\u5730\u5740 \u4e3b\u8981\u601d\u60f3:\u63d0\u51fa\u4e86RFB\u6a21\u5757\uff0c\u5e76\u5c06\u5b83\u6dfb\u52a0\u5230SSD\u7684\u9876\u90e8\uff0c\u6784\u5efa\u4e86RFBnet\uff0cInception\u601d\u60f3(\u5e76\u8054)+\u7a7a\u6d1e\u5377\u79ef:\u589e\u5927\u611f\u53d7\u91ce,\u603b\u800c\u8a00\u4e4b:\u51fa\u53d1\u70b9\u662f\u6a21\u62df\u4eba\u7c7b\u89c6\u89c9\u7684\u611f\u53d7\u91ce\u8fdb\u884cRFB\u7ed3\u6784\u7684\u8bbe\u8ba1 RFB\u6a21\u5757 * \u53c2\u8003\u4e86`Inception\u7ed3\u6784`\uff0cRFB\u6a21\u5757\u5f15\u7528\u4e86\u4e0d\u540c\u5c3a\u5bf8\u7684\u5377\u79ef\u6838(`1x1,3x3,5x5`)\u6784\u6210\u5e76\u8054\u5206\u652f\u3002 * \u7a7a\u6d1e\u5377\u79ef\u5c42(`3x3 rate=1`,`3x3 rate=3`,`3x3 rate=5`) RFB\u7ed3\u6784\u4e2d\u6700\u540e\u4f1a\u5c06\u4e0d\u540c\u5c3a\u5bf8\u548crate\u7684\u5377\u79ef\u5c42\u8f93\u51fa\u8fdb\u884cconcat\uff0c\u8fbe\u5230\u878d\u5408\u4e0d\u540c\u7279\u5f81\u7684\u76ee\u7684\u3002( 1x1 \u5377\u79ef) \u7f51\u7edc\u7ed3\u6784 RFB\u6a21\u5757 RFB-s\u6a21\u5757 RFB-s\u548cRFB\u76f8\u6bd4\u4e3b\u8981\u6709\u4e24\u4e2a\u6539\u8fdb \u4e00\u65b9\u9762\u7528 3*3\u5377\u79ef\u5c42 \u4ee3\u66ff 5*5\u5377\u79ef\u5c42 \u53e6\u4e00\u65b9\u9762\u7528 1*3 \u548c 3*1 \u5377\u79ef\u5c42\u4ee3\u66ff 3*3 \u5377\u79ef\u5c42\uff0c\u4e3b\u8981\u76ee\u7684\u5e94\u8be5\u662f\u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u91cf\uff0c\u7c7b\u4f3cInception\u540e\u671f\u7248\u672c\u5bf9Inception\u7ed3\u6784\u7684\u6539\u8fdb\u3002 \u7f51\u7edc\u7ed3\u6784(\u5bf9ssd\u8f7b\u5fae\u6539\u52a8) \u4e3b\u5e72\u7f51\u7edc\u4e0a\u7528\u4e24\u4e2aRFB\u7ed3\u6784\u66ff\u6362\u539f\u6765\u65b0\u589e\u7684\u4e24\u5c42\u3002 conv4_3\u548cconv7_fc\u5728\u63a5\u9884\u6d4b\u5c42\u4e4b\u524d\u5206\u522b\u63a5RFB-s\u548cRFB\u7ed3\u6784 RefineDet(17/11:\u5c0f\u76ee\u6807) \u00b6 \u8bba\u6587\u5730\u5740 \u4fdd\u8bc1 SSD \u9ad8\u6548\u7684\u524d\u63d0\u4e0b\u63d0\u5347\u68c0\u6d4b\u6548\u679c(\u505a\u6cd5:\u7ed3\u5408 one stage + two stage )\uff1aSSD+RPN+FPN\u7684\u601d\u60f3\u3002 \u5f15\u5165two stage\u7684object detection\u4e2d\u7684\u5bf9box\u7531\u7c97\u5230\u7ec6\u7684\u56de\u5f52\u601d\u60f3( RPN\u5148\u7c97\u7c92\u5ea6\u56de\u5f52box\u4fe1\u606f+\u4e00\u4e2a\u5e38\u89c4\u56de\u5f52\u5206\u652f\u5f97\u5230\u66f4\u51c6\u786e\u7684\u6846\u4fe1\u606f ) \u5f15\u5165\u7c7b\u4f3c**FPN\u7f51\u7edc\u7684\u7279\u5f81\u878d\u5408\u64cd\u4f5c**\uff0c\u53ef\u4ee5\u6709\u6548\u63d0\u9ad8\u5bf9**\u5c0f\u76ee\u6807\u7684\u68c0\u6d4b\u6548\u679c**\uff0c\u68c0\u6d4b\u7f51\u7edc\u7684\u6846\u67b6\u8fd8\u662f**SSD**\u3002 \u7f51\u7edc\u642d\u5efa \u4ee5\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\u4e3aResNet101\u4e3a\u4f8b \u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u4e3a 320*320 \u4e3a\u4f8b\uff0c\u5728 ARM \u90e8\u5206\u76844\u4e2a\u7070\u8272\u77e9\u5f62\u5757\uff08feature map\uff09\u7684size\u5206\u522b\u662f 40*40,20*20,10*10,5*5 \uff0c\u5176\u4e2d\u524d\u4e09\u4e2a\u662f ResNet101 \u7f51\u7edc\u672c\u8eab\u7684\u8f93\u51fa\u5c42\uff0c\u6700\u540e 5*5 \u8f93\u51fa\u662f\u53e6\u5916\u6dfb\u52a0\u7684\u4e00\u4e2aresidual block\u3002 \u6709\u4e86\u7279\u5f81\u63d0\u53d6\u7684\u4e3b\u7f51\u7edc\u540e\uff0c\u5c31\u8981\u5f00\u59cb\u505a**\u878d\u5408\u5c42\u64cd\u4f5c**\u4e86\uff0c\u9996\u5148\u662f 5*5 \u7684feature map\u7ecf\u8fc7\u4e00\u4e2atransfer connection block\u5f97\u5230\u5bf9\u5e94\u5927\u5c0f\u7684\u84dd\u8272\u77e9\u5f62\u5757\uff08P6\uff09,\u5bf9\u4e8e\u751f\u6210P6\u7684\u8fd9\u6761\u652f\u8def\u800c\u8a00\u53ea\u662f3\u4e2a\u5377\u79ef\u5c42\u800c\u5df2\u3002\u63a5\u7740\u57fa\u4e8e 10*10 \u7684\u7070\u8272\u77e9\u5f62\u5757\uff08feature map\uff09\u7ecf\u8fc7transfer connection block\u5f97\u5230\u5bf9\u5e94\u5927\u5c0f\u7684\u84dd\u8272\u77e9\u5f62\u5757\uff08P5\uff09\uff0c\u6b64\u5904\u7684transfer connection block\u76f8\u6bd4P6\u589e\u52a0\u4e86**\u53cd\u5377\u79ef\u652f\u8def**\uff0c\u53cd\u5377\u79ef\u652f\u8def\u7684\u8f93\u5165\u6765\u81ea\u4e8e\u751f\u6210P6\u7684\u4e2d\u95f4\u5c42\u8f93\u51fa\u3002P4\u548cP3\u7684\u751f\u6210\u4e0eP5\u540c\u7406\u3002 \u7f51\u7edc\u7ed3\u6784\u601d\u60f3 \u4e0a\u9762\u8fd9\u4e2a\u7f51\u7edc\u7c7b\u4f3c\u4e24\u9636\u6bb5:\u4e00\u4e2a\u5b50\u6a21\u5757\u505aRPN\u7684\u4e8b\uff0c\u53e6\u4e00\u4e2a\u5b50\u6a21\u5757\u505aSSD\u7684\u4e8b\u3002 ARM \u90e8\u5206\u626e\u6f14\u4e86 RPN \u7f51\u7edc\u7684\u89d2\u8272:\u53bb\u9664\u4e00\u4e9b\u8d1f\u6837\u672c(\u56e0\u4e3a\u8d1f\u6837\u672c\u6570\u91cf>\u6b63\u6837\u672c\u6570\u91cf)\uff0c\u5f97\u5230\u4e86\u8f83\u4e3a\u7cbe\u7ec6\u7684boxes\u3002\u5e76\u4e14 ARM \u90e8\u5206\u8f93\u5165\u5229\u7528\u4e86\u591a\u5c42\u7279\u5f81\uff0c\u800cRPN\u7f51\u7edc\u7684\u8f93\u5165\u662f\u5355\u5c42\u7279\u5f81\u3002\u57fa\u4e8e4\u5c42\u7279\u5f81\u6700\u540e\u5f97\u5230\u7684\u8fd8\u662f\u4e24\u6761\u652f\u8def\uff0c\u4e00\u4e2abbox\u7684\u5750\u6807\u56de\u5f52\u652f\u8def\uff0c\u53e6\u4e00\u4e2a\u662fbbox\u7684\u4e8c\u5206\u7c7b\u652f\u8def\u3002 \u6ce8\u610f:IOU\u9608\u503c\u8bbe\u7f6e\u4e3a0.5\u4f1a\u6709\u5f88\u591a\u80cc\u666f\u6807\u7b7e(\u8d1f\u6837\u672c)\uff0c ARM \u7ed3\u6784\u867d\u7136\u53ef\u4ee5\u8fc7\u6ee4\u6389\u4e00\u4e9b\u8d1f\u6837\u672c\uff0c\u4f46\u63a5\u4e0b\u6765\u8fd8\u662f\u8981\u91c7\u7528\u7c7b\u4f3cSSD\u7b97\u6cd5\u4e2d\u7684 hard negative mining \u6765\u8bbe\u5b9a\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\uff08\u4e00\u822c\u8bbe\u5b9a\u4e3a1:3\uff09\uff0c\u5f53\u7136\u8d1f\u6837\u672c\u4e0d\u662f\u968f\u673a\u9009\u7684\uff0c\u800c\u662f\u6839\u636ebox\u7684\u5206\u7c7bloss\u6392\u5e8f\u6765\u9009\u7684\uff0c\u6309\u7167\u6307\u5b9a\u6bd4\u4f8b\u9009\u62e9loss\u6700\u9ad8\u7684\u90a3\u4e9b\u8d1f\u6837\u672c\u5373\u53ef\u3002 TCB \u90e8\u5206\u662f\u505a\u7279\u5f81\u7684\u8f6c\u6362\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u5c06 ARM \u90e8\u5206\u7684\u8f93\u51fafeature map\u8f6c\u6362\u6210 ODM \u90e8\u5206\u7684\u8f93\u5165\uff0c\u8fd9\u90e8\u5206\u5176\u5b9e\u548cFPN\u7b97\u6cd5\u7684\u7279\u5f81\u878d\u5408\u5f88\u50cf\uff0cFPN\u4e5f\u662f\u8fd9\u6837\u7684upsample\u540e\u878d\u5408\u7684\u601d\u60f3\u3002 ODM \u90e8\u5206\u5c31\u662fSSD\u4e86,\u4e5f\u662f\u878d\u5408\u4e0d\u540c\u5c42\u7684\u7279\u5f81\uff0c\u7136\u540e\u505a\u591a\u5206\u7c7b\u548c\u56de\u5f52\u3002\u4e0d\u540c\u4e8eSSD\u7684\u4e24\u65b9\u9762: \u8f93\u5165\u7684 anchors \u662f ARM \u90e8\u5206\u5f97\u5230\u7684\u7cbe\u51c6 anchors (\u7c7b\u4f3cRPN\u7f51\u7edc\u8f93\u51fa\u7684proposal) \u53e6\u4e00\u65b9\u9762\u548cFPN\u7b97\u6cd5\u7c7b\u4f3c(\u591a\u5c3a\u5ea6\u878d\u5408)\uff0c\u5bf9SSD\u505a\u4e86\u6539\u8fdb\u3002 \u5728SSD\u4e2d\u6d45\u5c42\u7684feature map\u662f\u76f4\u63a5\u62ff\u6765\u7528\u7684\uff08\u5e76\u6ca1\u6709\u548c\u9ad8\u5c42\u7684feature map\u878d\u5408\uff09\uff0c\u4e5f\u5c31\u662f\u5bf9bbox\u7684\u9884\u6d4b\u662f\u5728\u6bcf\u4e00\u5c42\u4e0a\u8fdb\u884c\u7684\uff0c\u9884\u6d4b\u5f97\u5230\u7ed3\u679c\u540e\u518d\u5c06\u5404\u5c42\u7ed3\u679c\u6574\u5408\u5728\u4e00\u8d77\u3002 \u800c\u8fd9\u91cc\u7684\u6d45\u5c42feature map\uff08size\u8f83\u5927\u7684\u84dd\u8272\u77e9\u5f62\u5757\uff09\u878d\u5408\u4e86\u9ad8\u5c42feature map\u7684\u4fe1\u606f\uff0c\u7136\u540e\u9884\u6d4bbbox\u662f\u57fa\u4e8e\u6bcf\u5c42feature map\uff08\u6bcf\u4e2a\u84dd\u8272\u77e9\u5f62\u5757\uff09\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u5404\u5c42\u7ed3\u679c\u518d\u6574\u5408\u5230\u4e00\u8d77\u3002 \u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\u533a\u522b\uff1a \u8fd9\u6837\u505a\u7684\u597d\u5904\u5c31\u662f\u5bf9\u5c0f\u76ee\u6807\u7269\u4f53\u7684\u68c0\u6d4b\u6548\u679c\u66f4\u597d \uff0c\u8fd9\u5728FPN\u548cRON\u7b49\u7b97\u6cd5\u4e2d\u5df2\u7ecf\u8bc1\u660e\u8fc7\u4e86\u3002 \u635f\u5931\u51fd\u6570 ARM\u90e8\u5206\u5305\u542bbinary classification\u635f\u5931Lb\u548c\u56de\u5f52\u635f\u5931Lr ODM\u90e8\u5206\u5305\u542bmulti-class classification\u635f\u5931Lm\u548c\u56de\u5f52\u635f\u5931Lr\u3002 SegNet(15/11) \u00b6 \u8bba\u6587\u5730\u5740 \u4f7f\u7528 VGG16 \u7f51\u7edc\uff0c\u53bb\u6389\u5168\u8fde\u63a5\u5c42\uff0c\u642d\u5efa\u5bf9\u79f0\u6a21\u578b\u30022016\u5e74\uff0cSegnet\u7814\u7a76\u7ec4\u5728\u539f\u6709\u7f51\u7edc\u6846\u67b6\u57fa\u7840\u52a0\u5165\u4e86\u8df3\u8dc3\u8fde\u63a5\uff0c\u7b97\u662f\u6709\u4e86\u8fdb\u4e00\u6b65\u53d1\u5c55\u3002 Segnet \u8bed\u4e49\u5206\u5272\u7f51\u7edc\u7684\u5173\u952e\u5728\u4e8e\u4e0b\u91c7\u6837\u548c\u4e0a\u91c7\u6837\u3002\u5728\u4e0a\u91c7\u6837(\u53cd\u5377\u79ef)\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e0b\u91c7\u6837\u65f6\u8bb0\u5f55\u7684 Max Value \u50cf\u7d20\u4f4d\u7f6e\u6307\u6807\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u9632\u6b62\u8fb9\u7f18\u4fe1\u606f\u7684\u4e22\u5931(ENet\u4e2d\u4e5f\u4f7f\u7528\u4e86)\u3002 ENet(16/06) \u00b6 \u8bba\u6587\u5730\u5740 \u5b9e\u65f6\u8bed\u4e49\u5206\u5272 : \u8981\u60f3\u5728\u79fb\u52a8\u7ec8\u7aef\u6216\u8005\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0a\u5e94\u7528\uff0c\u5c0f\u5de7\u9ad8\u901f\u662f\u5f88\u91cd\u8981\u7684\u3002ENet\u5728\u8ffd\u6c42\u9ad8\u6548\u7387\u7684\u540c\u65f6\u517c\u987e\u4e86\u7cbe\u5ea6 \u521d\u59cb\u5316\u5c42 :\u538b\u7f29\u8f93\u5165\u56fe\u7247\u7684\u5206\u8fa8\u7387\uff0c\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002\u56e0\u4e3a\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u5206\u8fa8\u7387\u4ee3\u4ef7\u8f83\u9ad8\uff0c\u800c\u4e14\u89c6\u89c9\u4fe1\u606f\u5b58\u5728\u5927\u91cf\u5197\u4f59\uff0c\u9700\u8981\u5bf9\u8f93\u5165\u505a\u4e00\u4e2a\u9884\u5904\u7406\uff0c\u5148\u7528\u4e00\u5c42\u7f51\u7edc\u8bb2\u8fd9\u4e9b\u4fe1\u606f\u6d53\u7f29\uff0c\u5f53\u7136**\u8fd9\u4e00\u6b65\u7684\u7279\u5f81\u56fe\u4e2a\u6570(\u901a\u9053\u4e2a\u6570)\u4e0d\u7528\u592a\u591a\uff0c16\u4e0e32\u6548\u679c\u51e0\u4e4e\u76f8\u540c\u3002** \u4e0b\u91c7\u6837(\u8fb9\u7f18\u4fe1\u606f\u4e22\u5931\u95ee\u9898):\u5355\u72ec\u5b58\u50a8\u8fb9\u7f18\u4fe1\u606f,\u7136\u540e\u4e0a\u91c7\u6837\u6062\u590d\u65f6\u4f7f\u7528\u4e4b\u524d\u4fdd\u5b58\u7684\u8fb9\u7f18\u4fe1\u606f( SegNet\u65b9\u6848 ) \u4e0d\u540c\u4e8e\u666e\u901a\u7684\u7f16\u89e3\u7801\u7ed3\u6784(\u7ed3\u6784\u4e0a\u5b8c\u5168\u5bf9\u7b49)\uff0c \u4f5c\u8005\u7684\u7f16\u7801\u5668\u89c4\u6a21\u5927\u4e00\u4e9b\uff0c**\u56e0\u4e3a\u8981**\u7528\u6765\u63d0\u53d6\u4fe1\u606f\uff1b**\u4f46\u662f**\u89e3\u7801\u5668\u672c\u8d28\u4e0a\u53ea\u662f\u5bf9\u7f16\u7801\u5668\u7ed3\u679c\u7684\u7ec6\u8282\u7cbe\u8c03\uff0c**\u56e0\u6b64**\u89c4\u6a21\u53ef\u4ee5\u51cf\u5c0f \uff0c\u8fd9\u6837\u4e5f\u7f29\u5c0f\u4e86\u7f51\u7edc\u4f53\u79ef\uff0c\u52a0\u901f\u4e86\u8fd0\u7b97\u3002 \u7ecf\u8fc7\u4f5c\u8005\u7684\u6d4b\u8bd5,\u5728ENet\u4e2d\u4f7f\u7528ReLU\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u53cd\u800c\u964d\u4f4e\u4e86ENet\u7684\u7cbe\u5ea6(\u539f\u56e0:\u4f5c\u8005\u63a8\u8bba\u7f51\u7edc\u672c\u8eab\u8f83\u6d45)\uff0c\u6240\u4ee5\u4f7f\u7528\u4e86 PReLu \u7cbe\u5ea6\u53cd\u800c\u8f83\u9ad8\u3002 \u5bf9\u79f0\u5377\u79ef(\u4f4e\u9636\u8fd1\u4f3c) \uff1a\u8003\u8651\u5230\u5377\u79ef\u5c42\u6743\u91cd\u5176\u5b9e\u6709\u76f8\u5f53\u5927\u7684\u5197\u4f59\uff0c\u53ef\u4ee5\u7528 nx1\u548c1xn \u7684\u4e24\u4e2a\u5377\u79ef\u5c42\u7ea7\u8054\uff08\u5bf9\u79f0\u5377\u79ef\uff09\u6765\u66ff\u4ee3\u4e00\u4e2a nxn \u7684\u5377\u79ef\u5c42\u6765\u7f29\u5c0f\u8ba1\u7b97\u91cf\u3002\u5177\u4f53\u5730\uff0c\u7528n=5\u7684\u5bf9\u79f0\u5377\u79ef\u7684\u8ba1\u7b97\u91cf\u8fd1\u4f3c\u4e8e\u4e00\u4e2a3x3\u7684\u666e\u901a\u5377\u79ef\uff0c\u4f46\u662f\u7531\u4e8e\u5f15\u5165\u4e86\u975e\u7ebf\u6027\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u8fd8\u80fd\u591f\u589e\u52a0\u51fd\u6570\u7684\u591a\u6837\u6027 \u7a7a\u6d1e\u5377\u79ef \uff1a\u7a7a\u6d1e\u5377\u79ef\u53ef\u4ee5\u51cf\u5c0f\u8ba1\u7b97\u91cf\u3001\u589e\u5927\u611f\u53d7\u91ce\u3002\u4e3a\u4e86\u4f7f\u7a7a\u6d1e\u5377\u79ef\u53d1\u6325\u6700\u5927\u7684\u4f5c\u7528\uff0cENet\u4e2d\u7a7f\u63d2\u5730\u4f7f\u7528\u4e86\u666e\u901a\u5377\u79ef\u3001\u5bf9\u79f0\u5377\u79ef\u548c\u7a7a\u6d1e\u5377\u79ef\u3002 FPN(16/12) \u00b6 \u8bba\u6587\u5730\u5740 FPN\u4e3b\u8981\u89e3\u51b3\u7684\u662f\u7269\u4f53\u68c0\u6d4b\u4e2d\u7684\u591a\u5c3a\u5ea6\u95ee\u9898\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u7f51\u7edc\u8fde\u63a5\u6539\u53d8\uff0c\u5728\u57fa\u672c\u4e0d\u589e\u52a0\u539f\u6709\u6a21\u578b\u8ba1\u7b97\u91cf\u60c5\u51b5\u4e0b\uff0c\u5927\u5e45\u5ea6\u63d0\u5347\u4e86\u5c0f\u7269\u4f53\u68c0\u6d4b\u7684\u6027\u80fd\u3002 \u8fd9\u91cc\u7684\u4e0a\u91c7\u6837\u76f4\u63a5\u4f7f\u7528\u7684\u662f**\u6700\u8fd1\u90bb\u4e0a\u91c7\u6837(\u76f4\u63a5\u5bf9\u4e34\u8fd1\u5143\u7d20\u8fdb\u884c\u590d\u5236)**\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u6216\u53cd\u5377\u79ef\u64cd\u4f5c\uff0c\u4e00\u65b9\u9762\u7b80\u5355\uff0c\u53e6\u5916\u4e00\u65b9\u9762\u53ef\u4ee5\u51cf\u5c11\u8bad\u7ec3\u53c2\u6570\u3002 \u8fdb\u884c 1 * 1 \u7684\u5377\u79ef\uff0c\u4ee5\u8c03\u6574\u901a\u9053\u6570\u548c\u4e0a\u91c7\u6837\u7684\u7ed3\u679c\u76f8\u540c\u3002 \u76f8\u52a0:\u662f\u6307\u7279\u5f81\u56fe\u7684\u957f\u5bbd\u76f8\u540c\uff0c\u901a\u9053\u6570\u56fa\u5b9a\u4e3a 256 \uff0c\u9010\u5143\u7d20\u76f8\u52a0\u3002 \u76f8\u52a0\u4e4b\u540e\uff0c \u5bf9\u76f8\u52a0\u7684\u7ed3\u679c\u8fdb\u884c 3*3 \u7684\u5377\u79ef\uff0c\u4ee5\u6d88\u9664\u4e0a\u91c7\u6837\u7684\u6df7\u6dc6\u73b0\u8c61\uff08aliasing effect\uff09 MaskRCNN(17/03) \u00b6 \u8bba\u6587\u5730\u5740 MaskRCNN\u662f\u5728FasterRCNN\u7684\u57fa\u7840\u4e0a\u6539\u8fdb\u7684\uff0c\u4e3b\u5e72\u7f51\u7edc\u6362\u6210\u4e86ResNet-FPN,\u589e\u52a0\u4e86RoiAlign,FCN\u9884\u6d4bmask\u5206\u652f ResNet-FPN \u5b9e\u9645\u4e0a\uff0c \u4e0a\u56fe\u5c11\u7ed8\u5236\u4e86\u4e00\u4e2a\u5206\u652f \uff1aM5\u7ecf\u8fc7\u6b65\u957f\u4e3a 2 \u7684max pooling\u4e0b\u91c7\u6837\u5f97\u5230 P6 \uff0c\u4f5c\u8005\u6307\u51fa\u4f7f\u7528P6\u662f\u60f3\u5f97\u5230\u66f4\u5927\u7684anchor\u5c3a\u5ea6 512\u00d7512 \u3002 \u4f46 P6 \u662f\u53ea\u7528\u5728 RPN\u4e2d\u7528\u6765\u5f97\u5230region proposal\u7684\uff0c\u5e76\u4e0d\u4f1a\u4f5c\u4e3a\u540e\u7eedFast RCNN\u7684\u8f93\u5165 ResNet-FPN\u4f5c\u4e3aRPN\u8f93\u5165\u7684feature map\u662f [P 2, P 3, P 4, P 5, P 6]\uff0c\u800c\u4f5c\u4e3a\u540e\u7eed Fast RCNN \u7684\u8f93\u5165\u5219\u662f[P 2, P 3, P 4, P 5] Resnet-FPN\u4ea7\u751f\u4e86\u5927\u5c0f\u4e0d\u540c\u7684\u4e94\u4e2a\u7279\u5f81\u56fe[P 2, P 3, P 4, P 5, P 6]\uff0c\u8fd9\u4e9b\u7279\u5f81\u56fe\u5404\u81ea\u7ecf\u8fc7RPN\u5c42\u4ea7\u751f\u5f88\u591a\u5148\u9a8c\u6846\uff0c\u4f46\u662f\u7528\u4e8e\u6620\u5c04\u5230\u7279\u5f81\u56fe\u7684\u53ea\u6709[P 2, P 3, P 4, P 5]\u6ca1\u6709 P6 \uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u5728[P 2, P 3, P 4, P 5]\u4e2d\u6839\u636e region proposal \u5207\u51fa ROI \u8fdb\u884c\u540e\u7eed\u7684\u5206\u7c7b\u548c\u56de\u5f52\u9884\u6d4b \u3002 \u6211\u4eec\u8981\u9009\u62e9\u54ea\u4e2afeature map\u6765\u5207\u51fa\u8fd9\u4e9bROI\u533a\u57df\u624d\u7b97\u6700\u5408\u9002\u7684feature map\u5462\uff1f \u5927\u5c3a\u5ea6\u7684ROI\u8981\u4ece\u4f4e\u5206\u8fa8\u7387\u7684feature map\u4e0a\u5207\uff0c\u6709\u5229\u4e8e\u68c0\u6d4b\u5927\u76ee\u6807\uff0c\u5c0f\u5c3a\u5ea6\u7684ROI\u8981\u4ece\u9ad8\u5206\u8fa8\u7387\u7684feature map\u4e0a\u5207\uff0c\u6709\u5229\u4e8e\u68c0\u6d4b\u5c0f\u76ee\u6807 RoiAlign(roi\u7279\u5f81\u56fe\u8f93\u9001\u5230roipooling) Faster Rcnn\u7684\u4e24\u6b21\u6574\u6570\u5316 region proposal \u7684(x,y,w,h)\u901a\u5e38\u662f**\u5c0f\u6570**\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c\u4f1a\u628a\u5b83\u6574\u6570\u5316\u3002 \u5c06\u6574\u6570\u5316\u540e\u7684\u8fb9\u754c\u533a\u57df\u5e73\u5747\u5206\u5272\u6210 k x k \u4e2a\u5355\u5143\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u8fb9\u754c\u8fdb\u884c\u6574\u6570\u5316\u3002 ROI Align\u65b9\u6cd5\u53d6\u6d88\u6574\u6570\u5316\u64cd\u4f5c\uff0c\u4fdd\u7559\u4e86\u5c0f\u6570\uff0c\u4f7f\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u7684\u65b9\u6cd5\u83b7\u5f97\u5750\u6807\u4e3a\u6d6e\u70b9\u6570\u7684\u50cf\u7d20\u70b9\u4e0a\u7684\u56fe\u50cf\u6570\u503c \u635f\u5931\u51fd\u6570 \u5047\u8bbe\u4e00\u5171\u6709 K \u4e2a\u7c7b\u522b\uff0c\u5219 mask \u5206\u5272\u5206\u652f\u7684\u8f93\u51fa\u7ef4\u5ea6\u662f K * m * m \uff0c\u5bf9\u4e8e m*m \u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u90fd\u4f1a\u8f93\u51fa K \u4e2a\u4e8c\u503cMask\uff08\u6bcf\u4e2a\u7c7b\u522b\u4f7f\u7528sigmoid\u8f93\u51fa\uff09\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8ba1\u7b97loss\u7684\u65f6\u5019\uff0c \u5e76\u4e0d\u662f\u6bcf\u4e2a\u7c7b\u522b\u7684sigmoid\u8f93\u51fa\u90fd\u8ba1\u7b97\u4e8c\u503c\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u800c\u662f\u8be5\u50cf\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\uff0c\u54ea\u4e2a\u7c7b\u7684sigmoid\u8f93\u51fa\u624d\u8981\u8ba1\u7b97\u635f\u5931(\u5982\u56fe\u7ea2\u8272\u65b9\u5f62\u6240\u793a) \u3002\u5e76\u4e14\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u5206\u7c7b\u5206\u652f\u9884\u6d4b\u7684\u7c7b\u522b\u6765\u9009\u62e9\u76f8\u5e94\u7684mask\u9884\u6d4b\u3002 \u8fd9\u6837\uff0cmask\u9884\u6d4b\u548c\u5206\u7c7b\u9884\u6d4b\u5c31\u5f7b\u5e95\u89e3\u8026\u4e86 \u3002 \u8fd9\u4e0eFCN\u65b9\u6cd5\u662f\u4e0d\u540c\uff0c FCN\u662f\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u591a\u7c7b\u522bsoftmax\u5206\u7c7b\uff0c\u7136\u540e\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931 \uff0c \u5f88\u660e\u663e\uff0c\u8fd9\u79cd\u505a\u6cd5\u662f\u4f1a\u9020\u6210\u7c7b\u95f4\u7ade\u4e89\u7684 \uff0c \u800c\u6bcf\u4e2a\u7c7b\u522b\u4f7f\u7528sigmoid\u8f93\u51fa\u5e76\u8ba1\u7b97\u4e8c\u503c\u635f\u5931\uff0c\u53ef\u4ee5\u907f\u514d\u7c7b\u95f4\u7ade\u4e89 \u3002\u5b9e\u9a8c\u8868\u660e\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8f83\u597d\u5730\u63d0\u5347\u6027\u80fd\u3002 OHEM(16/04) \u00b6 \u8bba\u6587\u5730\u5740 OHEM(FastRCNN\u4f5c\u4e3a\u57fa\u7840\u68c0\u6d4b\u7b97\u6cd5)\uff0c\u7528\u6765\u89e3\u51b3\u76ee\u6807\u4e0d\u5747\u8861\u95ee\u9898 \u5bf9RoI\u7684\u635f\u5931\u8fdb\u884c\u6392\u5e8f\uff0c\u8fdb\u884c\u4e00\u6b65NMS\u64cd\u4f5c\uff0c\u4ee5\u53bb\u9664\u6389\u91cd\u53e0\u4e25\u91cd\u7684RoI\uff0c\u5e76\u5728\u7b5b\u9009\u540e\u7684RoI\u4e2d\u9009\u62e9\u51fa\u56fa\u5b9a\u6570\u91cf\u635f\u5931\u8f83\u5927\u7684\u90e8\u5206\uff0c\u4f5c\u4e3a\u96be\u6837\u672c\u3002 \u5c06\u7b5b\u9009\u51fa\u7684\u96be\u6837\u672c\u8f93\u5165\u5230\u53ef\u8bfb\u5199\u7684b\u7f51\u7edc\u4e2d\uff0c\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\uff0c\u5f97\u5230\u635f\u5931\u3002 \u5229\u7528b\u7f51\u7edc\u5f97\u5230\u7684\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u7f51\u7edc\uff0c\u5e76\u5c06\u66f4\u65b0\u540e\u7684\u53c2\u6570\u4e0e\u4e0a\u534a\u90e8\u7684a\u7f51\u7edc\u540c\u6b65\uff0c\u5b8c\u6210\u4e00\u6b21\u8fed\u4ee3\u3002 OHEM\u662f\u8fd1\u5e74\u5174\u8d77\u7684\u53e6\u4e00\u79cd\u7b5b\u9009example\u7684\u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7\u5bf9loss\u6392\u5e8f\uff0c\u9009\u51faloss\u6700\u5927\u7684example\u6765\u8fdb\u884c\u8bad\u7ec3\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u8bad\u7ec3\u7684\u533a\u57df\u90fd\u662fhard example\u3002\u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e2a\u7f3a\u9677\uff0c\u5b83\u628a\u6240\u6709\u7684easy example\u90fd\u53bb\u9664\u6389\u4e86\uff0c\u9020\u6210easy positive example\u65e0\u6cd5\u8fdb\u4e00\u6b65\u63d0\u5347\u8bad\u7ec3\u7684\u7cbe\u5ea6\u3002 OHEM\u7b97\u6cd5\u867d\u7136\u589e\u52a0\u4e86\u9519\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd\uff0c\u4f46\u662fOHEM\u7b97\u6cd5\u5ffd\u7565\u4e86\u5bb9\u6613\u5206\u7c7b\u7684\u6837\u672c\u3002 RetinaNet(17/08:Focal Loss) \u00b6 \u8bba\u6587\u5730\u5740 Focal Loss + OneStage = RetinaNet \uff0c\u76ee\u7684\u662f\u60f3\u63d0\u9ad8\u5355\u9636\u6bb5\u7f51\u7edc\u7cbe\u5ea6\u4e0d\u9ad8\u7684\u95ee\u9898\uff0c\u4e3b\u8981\u539f\u56e0\u662f**\u6b63\u8d1f\u7c7b\u522b\u4e0d\u5747\u8861**\u95ee\u9898(\u4e00\u5f20\u56fe\u7247\u8981\u4ea7\u751f\u6210\u5343\u4e0a\u4e07\u7684\u5019\u9009\u6846\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u542b\u6709object)\u3002 \u6b63\u8d1f\u7c7b\u522b\u4e0d\u5747\u8861\u4f1a\u5e26\u6765\u4ec0\u4e48\uff1f \u8d1f\u6837\u672c\u6570\u91cf\u592a\u5927\uff0c\u5360\u603b\u7684loss\u7684\u5927\u90e8\u5206\uff0c\u800c\u4e14\u591a\u662f\u5bb9\u6613\u5206\u7c7b\u7684\uff0c\u56e0\u6b64\u4f7f\u5f97\u6a21\u578b\u7684\u4f18\u5316\u65b9\u5411\u5e76\u4e0d\u662f\u6211\u4eec\u6240\u5e0c\u671b\u7684\u90a3\u6837\uff0c\u56e0\u4e3a\u5206\u7c7b\u5668\u65e0\u8111\u5730\u628a\u6240\u6709bbox\u7edf\u4e00\u5f52\u7c7b\u4e3abackground\uff0caccuracy\u4e5f\u53ef\u4ee5\u5237\u5f97\u5f88\u9ad8\u3002 ssd\u3001yolo\u548cfaster-Rcnn\u7684\u89e3\u51b3\u65b9\u6848 : \u5728SSD\u4e2d\u5229\u7528Hard-Negtive-Mining\u7684\u65b9\u5f0f\u5c06\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u63a7\u5236\u57281:3 YOLO\u901a\u8fc7\u635f\u5931\u51fd\u6570\u4e2d\u6743\u91cd\u60e9\u7f5a\u7684\u65b9\u5f0f\u589e\u5927\u6b63\u6837\u672c\u5bf9\u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd Faster-RCNN\u5728FPN\u9636\u6bb5\u4f1a\u6839\u636e\u524d\u666f\u5206\u6570\u63d0\u51fa\u6700\u53ef\u80fd\u662f\u524d\u666f\u7684example\uff0c\u8fd9\u5c31\u4f1a\u6ee4\u9664\u5927\u91cf\u80cc\u666f\u6982\u7387\u9ad8\u7684easy negtive\u6837\u672c Focal Loss \u5f15\u5165\u4e86Focal Loss\u6765\u89e3\u51b3**\u96be\u6613\u6837\u672c\u6570\u91cf\u4e0d\u5e73\u8861**\uff0c \u901a\u8fc7\u51cf\u5c11\u6613\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd\uff0c\u4f7f\u5f97\u6a21\u578b\u5728\u8bad\u7ec3\u65f6\u66f4\u4e13\u6ce8\u4e8e\u96be\u5206\u7c7b\u7684\u6837\u672c \u3002 \u635f\u5931\u51fd\u6570\u8be6\u89e3 \u56e0\u4e3a\u662f\u4e8c\u5206\u7c7b\uff0c\u6240\u4ee5y\u7684\u503c\u662f\u6b631\u6216\u8d1f1\uff0cp\u7684\u8303\u56f4\u4e3a0\u52301\u3002\u5f53\u771f\u5b9elabel\u662f1\uff0c\u4e5f\u5c31\u662fy=1\u65f6\uff0c\u5047\u5982\u67d0\u4e2a\u6837\u672cx\u9884\u6d4b\u4e3a1\u8fd9\u4e2a\u7c7b\u7684\u6982\u7387p=0.6\uff0c\u90a3\u4e48\u635f\u5931\u5c31\u662f-log(0.6)\uff0c\u6ce8\u610f\u8fd9\u4e2a\u635f\u5931\u662f\u5927\u4e8e\u7b49\u4e8e0\u7684\u3002\u5982\u679cp=0.9\uff0c\u90a3\u4e48\u635f\u5931\u5c31\u662f-log(0.9)\uff0c\u6240\u4ee5p=0.6\u7684\u635f\u5931\u8981\u5927\u4e8ep=0.9\u7684\u635f\u5931\uff0c\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\u3002 at\u7cfb\u6570\u7c7b\u4f3c\u4e8ept\uff0c\u5f53label=1\u7684\u65f6\u5019\uff0cat=a\uff1b\u5f53label=-1\u7684\u65f6\u5019\uff0cat=1-a\uff0ca\u7684\u8303\u56f4\u4e5f\u662f0\u52301\u3002 \u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8bbe\u5b9aa\u7684\u503c\uff08\u4e00\u822c\u800c\u8a00\u5047\u59821\u8fd9\u4e2a\u7c7b\u7684\u6837\u672c\u6570\u6bd4-1\u8fd9\u4e2a\u7c7b\u7684\u6837\u672c\u6570\u591a\u5f88\u591a\uff0c\u90a3\u4e48a\u4f1a\u53d60\u52300.5\u6765\u589e\u52a0-1\u8fd9\u4e2a\u7c7b\u7684\u6837\u672c\u7684\u6743\u91cd\uff09\u6765\u63a7\u5236\u6b63\u8d1f\u6837\u672c\u5bf9\u603b\u7684loss\u7684\u5171\u4eab\u6743\u91cd\u3002 \u867d\u7136\u53ef\u4ee5\u63a7\u5236\u6b63\u8d1f\u6837\u672c\u7684\u6743\u91cd\uff0c\u4f46\u662f\u6ca1\u6cd5\u63a7\u5236\u5bb9\u6613\u5206\u7c7b\u548c\u96be\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd \uff0c\u4e8e\u662f\u5c31\u6709\u4e86focal loss \u5f53\u4e00\u4e2a\u6837\u672c\u88ab\u5206\u9519\u7684\u65f6\u5019\uff0cpt\u662f\u5f88\u5c0f\u7684\uff08\u8bf7\u7ed3\u5408pt\u516c\u5f0f\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\u5f53y=1\u65f6\uff0cp\u8981\u5c0f\u4e8e0.5\u624d\u662f\u9519\u5206\u7c7b\uff0c\u6b64\u65f6pt\u5c31\u6bd4\u8f83\u5c0f\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u56e0\u6b64\u8c03\u5236\u7cfb\u6570\u5c31\u8d8b\u4e8e1\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f8\u6bd4\u539f\u6765\u7684loss\u662f\u6ca1\u6709\u4ec0\u4e48\u5927\u7684\u6539\u53d8\u7684\u3002\u5f53pt\u8d8b\u4e8e1\u7684\u65f6\u5019\uff08\u6b64\u65f6\u5206\u7c7b\u6b63\u786e\u800c\u4e14\u662f\u6613\u5206\u7c7b\u6837\u672c\uff09\uff0c\u8c03\u5236\u7cfb\u6570\u8d8b\u4e8e0\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u603b\u7684loss\u7684\u8d21\u732e\u5f88\u5c0f\u3002 \u5f53\u03b3=0\u7684\u65f6\u5019\uff0cfocal loss\u5c31\u662f\u4f20\u7edf\u7684\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u5f53\u03b3\u589e\u52a0\u7684\u65f6\u5019\uff0c\u8c03\u5236\u7cfb\u6570\u4e5f\u4f1a\u589e\u52a0\u3002 \u8fd9\u6837\u65e2\u80fd\u8c03\u6574\u6b63\u8d1f\u6837\u672c\u7684\u6743\u91cd\uff0c\u53c8\u80fd\u63a7\u5236\u96be\u6613\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd \u5728\u5b9e\u9a8c\u4e2da\u7684\u9009\u62e9\u8303\u56f4\u4e5f\u5f88\u5e7f\uff0c\u4e00\u822c\u800c\u8a00\u5f53\u03b3\u589e\u52a0\u7684\u65f6\u5019\uff0ca\u9700\u8981\u51cf\u5c0f\u4e00\u70b9\uff08\u5b9e\u9a8c\u4e2d\u03b3=2\uff0ca=0.25\u7684\u6548\u679c\u6700\u597d\uff09 RetinaNet\u7f51\u7edc\u7ed3\u6784 \u6548\u679c (a)\u662f\u5728\u4ea4\u53c9\u71b5\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u53c2\u6570a\uff0ca=0.5\u5c31\u8868\u793a\u4f20\u7edf\u7684\u4ea4\u53c9\u71b5\uff0c\u53ef\u4ee5\u770b\u51fa\u5f53a=0.75\u7684\u65f6\u5019\u6548\u679c\u6700\u597d\uff0cAP\u503c\u63d0\u5347\u4e860.9\u3002 (b) \u662f\u5bf9\u6bd4\u4e0d\u540c\u7684\u53c2\u6570\u03b3\u548ca\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0c\u53ef\u4ee5\u770b\u51fa\u968f\u7740\u03b3\u7684\u589e\u52a0\uff0cAP\u63d0\u5347\u6bd4\u8f83\u660e\u663e\u3002 (d) \u901a\u8fc7\u548cOHEM\u7684\u5bf9\u6bd4\u53ef\u4ee5\u770b\u51fa\u6700\u597d\u7684Focal Loss\u6bd4\u6700\u597d\u7684OHEM\u63d0\u9ad8\u4e863.2AP\u3002\u8fd9\u91ccOHEM1:3\u8868\u793a\u5728\u901a\u8fc7OHEM\u5f97\u5230\u7684minibatch\u4e0a\u5f3a\u5236positive\u548cnegative\u6837\u672c\u7684\u6bd4\u4f8b\u4e3a1:3\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u770b\u51fa\u8fd9\u79cd\u5f3a\u5236\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u63d0\u5347AP\u3002 (e) \u52a0\u5165\u4e86\u8fd0\u7b97\u65f6\u95f4\u7684\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u548c\u524d\u9762\u7684Figure2\u7ed3\u5408\u8d77\u6765\u770b\uff0c\u901f\u5ea6\u65b9\u9762\u4e5f\u6709\u4f18\u52bf\uff01\u6ce8\u610f\u8fd9\u91ccRetinaNet-101-800\u7684AP\u662f37.8\uff0c\u5f53\u628a\u8bad\u7ec3\u65f6\u95f4\u6269\u59271.5\u500d\u540c\u65f6\u91c7\u7528scale jitter\uff0cAP\u53ef\u4ee5\u63d0\u9ad8\u523039.1\uff0c\u8fd9\u5c31\u662f\u5168\u6587\u548ctable2\u4e2d\u7684\u6700\u9ad8\u768439.1AP\u7684\u7531\u6765\u3002 \u5bf9\u6bd4forground\u548cbackground\u6837\u672c\u5728\u4e0d\u540c\u03b3\u60c5\u51b5\u4e0b\u7684\u7d2f\u79ef\u8bef\u5dee\u3002 \u7eb5\u5750\u6807\u662f\u5f52\u4e00\u5316\u540e\u7684\u635f\u5931 \u6a2a\u5750\u6807\u662f\u603b\u7684foreground\u6216background\u6837\u672c\u6570\u7684\u767e\u5206\u6bd4\u3002 \u53ef\u4ee5\u770b\u51fa\u03b3\u7684\u53d8\u5316\u5bf9\u6b63\uff08forground\uff09\u6837\u672c\u7684\u7d2f\u79ef\u8bef\u5dee\u7684\u5f71\u54cd\u5e76\u4e0d\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e\u8d1f\uff08background\uff09\u6837\u672c\u7684\u7d2f\u79ef\u8bef\u5dee\u7684\u5f71\u54cd\u8fd8\u662f\u5f88\u5927\u7684\uff08\u03b3=2\u65f6\uff0c\u5c06\u8fd199%\u7684background\u6837\u672c\u7684\u635f\u5931\u90fd\u975e\u5e38\u5c0f\uff09 Repulsion Loss(17/11:\u89e3\u51b3\u906e\u6321) \u00b6 \u8bba\u6587\u5730\u5740 | Code | \u535a\u5ba2 | \u535a\u5ba2\u4ee3\u7801 |[r\u026a'p\u028cl\u0283\u0259n]:\u65a5\u529b \u672c\u6587\u662f\u65f7\u89c6\u7814\u7a76\u9662CVPR2018\u4e0a\u7684\u4e00\u7bc7\u5de5\u4f5c\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u884c\u4eba\u68c0\u6d4b\u7684\u906e\u6321(\u7c7b\u95f4\u6216\u7c7b\u5185)\u95ee\u9898\uff0c\u8fd9\u91cc\u5148\u8bb2\u89e3\u7c7b\u5185\u906e\u6321\u3002 \u906e\u6321\u95ee\u9898 \u95ee\u9898\u4e00:\u6846\u504f\u79fb \u95ee\u9898\u4e8c:\u6846\u6291\u5236\uff0c\u6f0f\u68c0 **NMS**\u64cd\u4f5c\u662f\u4e3a\u4e86\u6291\u5236\u53bb\u9664\u6389\u591a\u4f59\u7684\u6846\u3002\u4f46\u662f\u5728\u906e\u6321\u68c0\u6d4b\u4e2d\uff0c NMS \u64cd\u4f5c\u4f1a\u5e26\u6765\u66f4\u7cdf\u7cd5\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u56e0\u4e3a T \u7684\u9884\u6d4b\u6846 P \u4f1a\u88ab B \u7684\u9884\u6d4b\u6846\u7ed9\u6291\u5236\uff0c\u5bfc\u81f4\u6f0f\u68c0\u3002 \u603b\u7ed3: \u5bf9NMS\u9608\u503c\u5f88\u654f\u611f \uff1a\u9608\u503c\u592a\u4f4e\u4e86\u4f1a\u5e26\u6765\u6f0f\u68c0\uff0c\u9608\u503c\u592a\u9ad8\u4e86\u4f1a\u5e26\u6765**\u5047\u6b63\u4f8b**\uff08\u5373\u6807\u51fa\u9519\u8bef\u7684\u76ee\u6807: \u7ea2\u8272\u504f\u79fb\u90e8\u5206 \uff09 \u95ee\u9898\u89e3\u51b3 \u4e0d\u4ec5\u4ec5\u8003\u8651\u76ee\u6807\u6846\uff0c\u8fd8\u8981\u8003\u8651\u5468\u56f4\u6846\u7684\u5f71\u54cd\uff0c\u78c1\u94c1\u6548\u5e94:\u8bbe\u8ba1\u635f\u5931\u51fd\u6570\u5728\u8981\u6c42\u9884\u6d4b\u6846 P \u9760\u8fd1\u76ee\u6807\u6846 T (\u5438\u5f15)\u7684\u540c\u65f6\uff0c\u4e5f\u8981\u6c42\u9884\u6d4b\u6846 P \u8fdc\u79bb\u5176\u4ed6\u4e0d\u5c5e\u4e8e\u76ee\u6807 T \u7684\u771f\u5b9e\u6846(\u6392\u65a5)\uff0c\u8fd9\u6837\u5c31\u5f88\u597d\u7684\u964d\u4f4e NMS \u7684\u5bf9\u9608\u503c\u7684\u654f\u611f\u6027 \u53c2\u6570\u89e3\u91ca:\u8bbe P(lP , tP , wP , hP ) \u4e3a\u5019\u9009\u6846 G(lG, tG, wG, hG) \u4e3a\u771f\u5b9e\u6846\uff0c P+ \u4e3a\u6b63\u5019\u9009\u6846\u96c6\u5408\uff0c\u6b63\u5019\u9009\u6846\u7684\u610f\u601d\u662f\uff0c\u81f3\u5c11\u4e0e\u5176\u4e2d\u4e00\u4e2a\u771f\u5b9e\u6846\u7684 IoU \u5927\u4e8e\u67d0\u4e2a\u9608\u503c\uff0c\u8fd9\u91cc\u662f 0.5 g = {G} \u662f\u771f\u5b9e\u6846\u96c6\u5408 L_attr : smooth L1 \u635f\u5931\uff0c\u76ee\u7684\u662f\u4f7f\u5f97\u9884\u6d4b\u6846\u548c\u5339\u914d\u4e0a\u7684\u76ee\u6807\u6846\u5c3d\u53ef\u80fd\u63a5\u8fd1\u3002 L_RepGT :\u76ee\u6807\u4f7f\u9884\u6d4b\u6846\u8981\u5c3d\u91cf\u8fdc\u79bb\u548c\u5b83\u91cd\u53e0\u7684\u7b2c\u4e8c\u5927\u7684 GT (\u9664\u53bb\u672c\u8eab\u8981\u56de\u5f52\u76ee\u6807\u7684\u771f\u5b9e\u6846\u5916\uff0c\u4e0e\u5176IoU\u6700\u5927\u7684\u771f\u5b9e\u6846) \u4f7f\u7528 IoG \u800c\u4e0d\u4f7f\u7528 IoU \u7684\u539f\u56e0\u662f\uff0c IoG\u7684\u5206\u6bcd\u4e0b\uff0c\u771f\u5b9e\u6846\u5927\u5c0farea(G)\u662f\u56fa\u5b9a\u7684 \uff0c\u56e0\u6b64\u5176\u4f18\u5316\u76ee\u6807\u662f\u53bb\u51cf\u5c11\u4e0e\u76ee\u6807\u6846\u91cd\u53e0\uff0c\u5373**area(B\u2229G)**\u3002\u800c\u5728 IoU \u4e0b\uff0c\u56de\u5f52\u5668\u4e5f\u8bb8\u4f1a\u5c3d\u53ef\u80fd\u8ba9\u9884\u6d4b\u6846\u66f4\u5927\uff08\u5373\u5206\u6bcd\uff09\u6765\u6700\u5c0f\u5316 loss L_RepBox :\u4f7f\u5206\u6d3e\u5230\u4e0d\u540cGT\u7684\u9884\u6d4b\u6846\u4e4b\u95f4\u5c3d\u91cf\u8fdc\u79bb\u3002 \u03b1\u548c\u03b2 \u7528\u4e8e\u5e73\u8861\u4e24\u8005\u7684\u6743\u91cd \u540e\u7eed\u7684NMS\u53ef\u4ee5\u4f7f\u7528soft-nms\u3001DIOU-NMS\u7528\u6765\u51cf\u5c11\u635f\u5931\u3002 \u7ed3\u8bba \u732a\u53ea\u6570\u636e\u96c6\u5408\u63d0\u5347\u4e0d\u5927\uff0c\u6574\u4f53\u4ec5\u63d0\u5347\u4e860.5\u4e2a\u767e\u5206\u70b9\uff1b\u9009\u53d6iou\u91cd\u53e0(\u9608\u503c0.5)\u5360\u6bd4\u8fbe30%,\u7684\u6570\u636e\u96c6\uff0c\u9a8c\u8bc1\u6574\u4f53\u63d0\u5347\u4e862.1\u4e2a\u767e\u5206\u70b9\u3002\u753b\u51fa\u7ed3\u679c\uff0c\u8089\u773c\u89c2\u5bdf\u5f88\u660e\u663e\u6f0f\u68c0\u6d88\u5931\u3002 PANet(18/03) \u00b6 \u8bba\u6587\u5730\u5740 COCO2017\u5b9e\u4f8b\u5206\u5272\u6bd4\u8d5b\u7684\u51a0\u519b\uff0c\u4e5f\u662f\u76ee\u6807\u68c0\u6d4b\u6bd4\u8d5b\u7684\u7b2c\u4e8c\u540d\u3002 \u53ef\u4ee5\u770b\u505a\u662f Mask RCNN \u7684\u591a\u5904\u6539\u8fdb\uff0c\u5145\u5206\u5229\u7528\u4e86\u7279\u5f81\u878d\u5408\uff0c\u6bd4\u5982\u5f15\u5165 bottom-up path augmentation \u7ed3\u6784\uff0c\u5145\u5206\u5229\u7528\u7f51\u7edc\u6d45\u7279\u5f81\u8fdb\u884c\u5206\u5272 \u5f15\u5165 adaptive feature pooling \u4f7f\u5f97\u63d0\u53d6\u5230\u7684ROI\u7279\u5f81\u66f4\u52a0\u4e30\u5bcc \u5f15\u5165 fully-connected fusion \uff0c\u901a\u8fc7\u878d\u5408\u4e00\u4e2a\u524d\u80cc\u666f\u4e8c\u5206\u7c7b\u652f\u8def\u7684\u8f93\u51fa\u5f97\u5230\u66f4\u52a0\u7cbe\u786e\u7684\u5206\u5272\u7ed3\u679c\u3002 FPN :\u4e3b\u8981\u662f\u901a\u8fc7\u878d\u5408\u9ad8\u4f4e\u5c42\u7279\u5f81\u63d0\u5347\u76ee\u6807\u68c0\u6d4b\u7684\u6548\u679c\uff0c\u5c24\u5176\u53ef\u4ee5\u63d0\u9ad8\u5c0f\u5c3a\u5bf8\u76ee\u6807\u7684\u68c0\u6d4b\u6548\u679c bottom-up path augmentation :\u8fd9\u4e2a\u5f15\u5165\u4e3b\u8981\u662f\u8003\u8651\u6d45\u5c42\u7279\u5f81\u4fe1\u606f(\u8fb9\u7f18\u5f62\u72b6\u7b49\u7279\u5f81)\u5bf9\u5b9e\u4f8b\u5206\u5272(\u56e0\u4e3a\u662f\u50cf\u7d20\u7ea7\u7684\u5206\u7c7b)\u975e\u5e38\u91cd\u8981\u3002 FPN\u7684\u7ea2\u8272\u7bad\u5934\uff0c\u7531\u5e95\u5c42\u4f20\u5230\u9876\u5c42\uff0c\u8981\u7ecf\u8fc7\u51e0\u5341\u4e0a\u767e\u7684\u5c42\uff0c\u6d45\u5c42\u7279\u5f81\u4fe1\u606f\u4e22\u5931\u4e25\u91cd \u7eff\u8272\u7bad\u5934(\u8fd9\u4e2a\u7ed3\u6784\u4e0d\u523010\u5c42)\uff1a\u6d45\u5c42\u7279\u5f81\u2192P2\u2192\u6cbf\u7740 bottom-up path augmentation \u4f20\u9012\u5230\u9876\u5c42\uff0c\u7ecf\u8fc7\u7684\u5c42\u6570\u5c31\u4e0d\u523010\u5c42\uff0c\u80fd\u8f83\u597d\u5730\u4fdd\u7559\u6d45\u5c42\u7279\u5f81\u4fe1\u606f\u3002 adaptive feature pooling :\u4e3b\u8981\u505a\u7684\u8fd8\u662f\u7279\u5f81\u878d\u5408\uff0c\u5c06\u5355\u5c42\u7279\u5f81(\u7c7b\u4f3cFasterRcnn\u7684\u6bcf\u4e2aROI\u5c42\u8981\u7ecf\u8fc7\u4e00\u4e2aROIPooling\u4e00\u6837,(FPN\u4e5f\u662f\u5355\u5c42))\u6362\u6210\u6bcf\u4e2aROI\u9700\u8981\u7ecf\u8fc7**\u591a\u5c42\u7279\u5f81**\uff1a\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2aROI\u9700\u8981\u548c\u591a\u5c42\u7279\u5f81( N2.N3.N4.N5 )\u505aROI Align\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u4e0d\u540c\u5c42\u7684ROI\u7279\u5f81\u878d\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u6bcf\u4e2aROI\u7279\u5f81\u5c31\u878d\u5408\u4e86\u591a\u5c42\u7279\u5f81\u3002 \u591a\u5c42\u7279\u5f81\u878d\u5408\u662f\u56e0\u4e3a\u8bba\u6587\u4e2d\u4f5c\u8005\u505a\u4e86\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u8be6\u60c5\u770bAI\u4e4b\u8def\u535a\u5ba2\u6216\u8bba\u6587\u3002 fully-connected fusion :\u9488\u5bf9\u539f\u6709\u7684\u5206\u5272\u652f\u8def\uff08FCN\uff09\u5f15\u5165\u4e00\u4e2a\u524d\u80cc\u666f\u4e8c\u5206\u7c7b\u7684\u5168\u8fde\u63a5\u652f\u8def\uff0c\u901a\u8fc7\u878d\u5408\u8fd9\u4e24\u6761\u652f\u8def\u7684\u8f93\u51fa\u5f97\u5230\u66f4\u52a0\u7cbe\u786e\u7684\u5206\u5272\u7ed3\u679c\u3002 EfficientNet(19/05) \u00b6 \u8bba\u6587\u5730\u5740 \u76ee\u524d\u5206\u7c7b\u7f51\u7edc\u5e38\u7528\u4f18\u5316\u65b9\u5411: \u52a0\u5bbd\u7f51\u7edc\u3001\u52a0\u6df1\u7f51\u7edc\u3001\u589e\u52a0\u5206\u8fa8\u7387 \uff0c\u4f5c\u8005\u8ba4\u4e3a\u8fd9\u4e09\u79cd\u65b9\u5f0f\u4e0d\u5e94\u8be5\u76f8\u4e92\u72ec\u7acb\uff0c\u6240\u4ee5\u4f5c\u8005\u901a\u8fc7\u7efc\u5408\u8fd9\u4e9b\u65b9\u5f0f\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u6a21\u578b\u53c2\u6570\u91cf\u548c\u8ba1\u7b97\u91cf\u3002 \u4f5c\u8005\u505a\u4e86\u4e00\u4e2a\u5c0f\u5b9e\u9a8c\u8fdb\u884c\u9a8c\u8bc1: \u5355\u4e2a\u7ef4\u5ea6\u7684\u4f18\u5316:\u80fd\u63d0\u5347\u6a21\u578b\u6548\u679c\uff0c\u4f46\u662f\u4e0a\u9650\u4e5f\u6bd4\u8f83\u660e\u663e\uff0c\u57fa\u672c\u4e0a\u5728Acc\u8fbe\u523080\u540e\u63d0\u5347\u5c31\u5f88\u5c0f\u4e86\u3002 3\u4e2a\u7ef4\u5ea6\u5171\u540c\u4f18\u5316:\u6709\u6548\u63d0\u5347\u6a21\u578b\u7684\u6548\u679c\uff08\u7a81\u783480\uff09\uff0c\u8fd9\u5c31\u8bf4\u660e\u591a\u7ef4\u5ea6\u878d\u5408\u662f\u6709\u6548\u7684\u3002 \u5982\u4f55\u627e\u52303\u4e2a\u7ef4\u5ea6\u5408\u9002\u7684\u7f29\u653e\u7cfb\u6570\u5462\uff1f 1.\u5efa\u7acb\u4f18\u5316\u516c\u5f0f N\u8868\u793a\u5206\u7c7b\u7f51\u7edc\uff0cX\u8868\u793a\u8f93\u5165\uff0cFi\u8868\u793a\u57fa\u7840\u7f51\u7edc\u5c42\uff0ci\u8868\u793astage\uff0cLi\u8868\u793aFi\u7ed3\u6784\u5728\u7b2ci\u4e2astage\u4e2d\u7684\u91cd\u590d\u6570\u91cf\u3002 \u516c\u5f0f1\u8fd9\u6837\u7684\u5b9a\u4e49\u65b9\u5f0f\u5bf9\u5e94\u7684\u6700\u76f4\u89c2\u4f8b\u5b50\u5c31\u662fResNet\u7cfb\u5217\u7f51\u7edc\uff0c\u6211\u4eec\u77e5\u9053ResNet\u7cfb\u5217\u7f51\u7edc\u6709\u591a\u4e2astage\uff0c\u6bcf\u4e2astage\u5305\u542b\u4e0d\u540c\u6570\u91cf\u7684block\u7ed3\u6784\u3002 \u5f85\u4f18\u5316\u7684\u53c2\u6570\u5c31\u662f\u7f51\u7edc\u6df1\u5ea6\uff08d\uff09\u3001\u7f51\u7edc\u5bbd\u5ea6\uff08w\uff09\u548c\u5206\u8fa8\u7387\uff08r\uff09 \u5728\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u91cf\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6700\u5927\u5316\u7f51\u7edc\u7684\u51c6\u786e\u7387 \u5f15\u5165\u03a6\u53c2\u6570\uff0c\u5e76\u5c063\u4e2a\u5f85\u4f18\u5316\u53c2\u6570\u90fd\u7528\u03a6\u6307\u6570\u8868\u793a \u540c\u65f6\u5bf9\u5e95\u505a\u4e86\u6570\u503c\u9650\u5236\uff0c\u505a\u9650\u5236\u53ef\u4ee5\u51cf\u5c11\u7f51\u683c\u641c\u7d22\u65f6\u7684\u8ba1\u7b97\u91cf\uff0c\u800c\u5177\u4f53\u7684\u9650\u5236\u516c\u5f0f\u786e\u5b9a\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97FLOPS\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u4e00\u4e0bd\u3001w\u548cr\u53c2\u6570\u5bf9FLOPS\u8ba1\u7b97\u7684\u5f71\u54cd\uff0c\u4ee5\u5377\u79ef\u5c42\u4e3a\u4f8b,\u5047\u5982d\u53d8\u6210\u539f\u6765\u76842\u500d\uff0c\u90a3\u4e48FLOPS\u4e5f\u4f1a\u53d8\u6210\u539f\u6765\u76842\u500d\uff1b\u5047\u5982w\u53d8\u6210\u539f\u6765\u76842\u500d\uff0c\u90a3\u4e48FLOPS\u5c31\u53d8\u6210\u539f\u6765\u76844\u500d\uff0c\u56e0\u4e3a\u8f93\u5165\u8f93\u51fa\u901a\u9053\u90fd\u53d8\u6210\u539f\u6765\u76842\u500d\u4e86\uff0c\u6240\u4ee5\u5728\u8ba1\u7b97\u91cf\u65b9\u9762\u76f8\u5f53\u4e8e4\u500d\uff1br\u548cw\u540c\u7406\u3002 2.\u901a\u8fc7\u7f51\u7edc\u7ed3\u6784\u641c\u7d22\u8bbe\u8ba1baseline\u7f51\u7edc 3.\u5982\u4f55\u4f18\u5316 \u7b2c\u4e00\u6b65\u662f\u56fa\u5b9a \u03a6=1 \uff0c\u7136\u540e\u901a\u8fc7\u7f51\u683c\u641c\u7d22\u627e\u5230\u6ee1\u8db3\u516c\u5f0f3\u7684\u6700\u4f18 \u03b1\u3001\u03b2\u3001\u03b3 \uff0c\u6bd4\u5982\u5bf9\u4e8e EfficientNet-B0 \u7f51\u7edc\u800c\u8a00\uff0c\u6700\u4f73\u7684\u53c2\u6570\u5206\u522b\u662f\u03b1=1.2\u3001\u03b2=1.1\u3001\u03b3=1.15\uff08\u6b64\u65f6\u5f97\u5230\u7684\u4e5f\u5c31\u662f EfficientNet-B1 \uff09 \u56fa\u5b9a\u7b2c\u4e00\u6b65\u6c42\u5f97\u7684\u03b1\u3001\u03b2\u3001\u03b3\u53c2\u6570\uff0c\u7136\u540e\u7528\u4e0d\u540c\u7684\u03a6\u53c2\u6570\u5f97\u5230EfficientNet-B1\u5230EfficientNet-B7\u7f51\u7edc \u6a21\u578b\u7ed3\u679c EfficientDet(19/11) \u00b6 \u8bba\u6587\u5730\u5740 EfficientDet\u662f\u4e00\u4e2a\u603b\u79f0\uff0c\u53ef\u4ee5\u5206\u4e3a EfficientDet D1 ~ EfficientDet D7\uff0c\u901f\u5ea6\u9010\u6e10\u53d8\u6162\uff0c\u4f46\u662f\u7cbe\u5ea6\u4e5f\u9010\u6e10\u63d0\u9ad8\u3002 \u4e24\u70b9\u4e3b\u8981\u8d21\u732e\uff1a BiFPN \u548c Compound Scaling BiFPN **FPN**\u4e2d\u4e0d\u540c\u7684\u8f93\u5165\u7279\u5f81\u5177\u6709\u4e0d\u540c\u7684\u5206\u8fa8\u7387\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u5b83\u4eec\u5bf9\u878d\u5408\u8f93\u51fa\u7279\u5f81\u7684\u8d21\u732e\u5f80\u5f80\u662f\u4e0d\u5e73\u7b49\u7684\u3002 BiFPN**\u4f5c\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u7b80\u5355\u800c\u9ad8\u6548\u7684**\u52a0\u6743\uff08\u7c7b\u4f3c\u4e0eattention\uff09**\u53cc\u5411\u7279\u5f81\u91d1\u5b57\u5854\u7f51\u7edc\uff08**BiFPN \uff09\uff0c\u5b83\u5f15\u5165\u53ef\u5b66\u4e60\u7684\u6743\u503c\u6765\u5b66\u4e60\u4e0d\u540c\u8f93\u5165\u7279\u5f81\u7684\u91cd\u8981\u6027\uff0c\u540c\u65f6\u53cd\u590d\u5e94\u7528\u81ea\u9876\u5411\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\u3002 BiFPN\u52a0\u6743\u7b56\u7565 Wi \u53ef\u4ee5\u662f\u4e00\u4e2a\u7279\u5f81/\u4e00\u4e2a\u901a\u9053/\u4e00\u4e2a\u591a\u7ef4\u5ea6\u7684tensor\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u5bf9\u5176\u9650\u5236\u5bb9\u6613\u5bfc\u81f4\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002 \u6240\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6743\u91cd\u7528 softmax \uff0c\u4f46\u662f\u8ba1\u7b97 softmax \u901f\u5ea6\u8f83\u6162 \u4f5c\u8005\u63d0\u51fa\u4e86\u5feb\u901f\u7684\u9650\u5236\u65b9\u6cd5\uff0c\u4e3a\u4e86\u4fdd\u8bc1weight\u5927\u4e8e0\uff0cweight\u524d\u91c7\u7528relu\u51fd\u6570\u3002 \u4e3e\u4f8b\u8bf4\u660e Compound Scaling Backbone network\uff1a\u76f4\u63a5\u4f7f\u7528EfficientNet-b0~b6 BiFPN network Box/class prediction network Input image resolution\uff08\u6587\u4e2d\u8bf4\u5fc5\u987b\u662f2^7\uff1d128\u7684\u500d\u6570\uff09 HRNet(19/02) \u00b6 \u8bba\u6587 | \u535a\u5ba2 | Code HRNet \u6253\u901a\u4e86\u5404\u4e2a\u65b9\u5411(\u5206\u7c7b\u3001\u68c0\u6d4b\u3001\u5206\u5272\u3001\u59ff\u6001\u4f30\u8ba1\u3001\u4eba\u8138\u5173\u952e\u70b9\u7b49)\uff0c\u4e3b\u8981\u539f\u7406: \u901a\u8fc7\u5e76\u884c\u591a\u4e2a\u5206\u8fa8\u7387\u7684\u5206\u652f\uff0c\u52a0\u4e0a\u4e0d\u65ad\u8fdb\u884c\u4e0d\u540c\u5206\u652f\u4e4b\u95f4\u7684\u4fe1\u606f\u4ea4\u4e92(\u76ee\u7684\u662f\u8865\u5145\u901a\u9053\u6570\u51cf\u5c11\u5e26\u6765\u7684\u635f\u8017)\uff0c\u540c\u65f6\u8fbe\u5230\u5f3a\u8bed\u4e49\u4fe1\u606f\u548c\u7cbe\u51c6\u4f4d\u7f6e\u4fe1\u606f\u7684\u76ee\u7684 \u3002\u5c31\u68c0\u6d4b\u800c\u8a00\uff0c\u9ad8\u5206\u8fa8\u7387\u5bf9\u4e8e\u4f4d\u7f6e\u4fe1\u606f\u5341\u5206\u654f\u611f\uff0c\u4e4b\u524d\u7684\u8bb8\u591a\u7f51\u7edc\u4e3a\u4e86\u7ef4\u6301\u9ad8\u5206\u8fa8\u7387\uff0c\u5e38\u5e38\u662f\u4e0b\u91c7\u6837\u5f97\u5230\u5f3a\u8bed\u4e49\u4fe1\u606f\u540e\u518d\u4e0a\u91c7\u6837\u6062\u590d\u9ad8\u5206\u8fa8\u7387\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u635f\u5931\u5927\u91cf\u7684\u6709\u6548\u4fe1\u606f\uff0c HRNet \u91cd\u70b9\u5728**\u5e76\u884c** backbone\u89e3\u6790 FuseLayer \u524d\u5411\u8ba1\u7b97\u65f6\u7528\u4e00\u4e2a\u4e8c\u91cd\u5faa\u73af\u5c06\u6784\u5efa\u597d\u7684\u4e8c\u7ef4\u77e9\u9635\u4e00\u4e00\u89e3\u5f00\uff0c\u5c06\u5bf9\u5e94\u540c\u4e00\u4e2apost\u7684pre\u8f6c\u6362\u540e\u8fdb\u884c\u878d\u5408\u76f8\u52a0\u3002\u6bd4\u5982 post1 = f11(pre1) + f12(pre2) + f13(pre3) TransitionLayer \u9759\u6001\u6784\u5efa\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635\uff0c\u7136\u540e\u5c06pre\u548cpost\u5bf9\u5e94\u8fde\u63a5\u7684\u64cd\u4f5c\u4e00\u4e00\u586b\u5165\u8fd9\u4e2a\u4e00\u7ef4\u77e9\u9635\u4e2d\u3002post4\u6bd4\u8f83\u7279\u6b8a\uff0c \u8fd9\u4e00\u90e8\u5206\u4ee3\u7801\u548c\u56fe\u4f8b\u4e0d\u592a\u4e00\u81f4 \uff0c\u56fe\u4f8b\u662fpre1&pre2&pre3\u90fd\u8fdb\u884c\u4e0b\u91c7\u7136\u540e\u8fdb\u884c\u878d\u5408\u76f8\u52a0\u5f97\u5230post4\uff0c\u800c\u4ee3\u7801\u4e2dpost4\u901a\u8fc7pre3\u4e0b\u91c7\u5f97\u5230\u3002 Neck\u8bbe\u8ba1 : HRNet \u7684 backbone \u8f93\u51fa\u6709\u56db\u4e2a\u5206\u652f\uff0c paper \u4e2d\u7ed9\u51fa\u4e86\u51e0\u79cd\u65b9\u5f0f\u5bf9\u8f93\u51fa\u5206\u652f\u8fdb\u884c\u64cd\u4f5c Cascade R-CNN(17/12) \u00b6 \u8bba\u6587\u5730\u5740 \u901a\u8fc7\u7ea7\u8054\u51e0\u4e2a\u68c0\u6d4b\u7f51\u7edc(\u8bbe\u7f6e\u4e0d\u540cIOU\u503c\u786e\u5b9a\u6b63\u8d1f\u6837\u672c)\u8fbe\u5230\u4e0d\u65ad\u4f18\u5316\u9884\u6d4b\u7ed3\u679c\u7684\u76ee\u7684\uff0c\u4e3b\u8981\u89e3\u51b3\u4e86\u68c0\u6d4b\u6846\u4e0d\u662f\u7279\u522b\u51c6\uff0c\u5bb9\u6613\u51fa\u73b0\u566a\u58f0\u5e72\u6270\u7684\u95ee\u9898 \u601d\u8def\u89e3\u5256 u=0.5 \u5e38\u7528,\u4f1a\u51fa\u73b0\u8f83\u591a\u8bef\u68c0\u6d4b\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u9608\u503c\u4f1a\u4f7f\u5f97\u6b63\u6837\u672c\u4e2d\u542b\u6709\u6709\u8f83\u591a\u7684\u80cc\u666f\u3002 u=0.7 \u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u8bef\u68c0\u6d4b\u4e86\u5427\uff0c\u4f46\u662f\u8fd9\u6837\u4f1a\u5bfc\u81f4,\u6b63\u6837\u672c\u6570\u91cf\u8f83\u5c11\uff0c\u8fc7\u62df\u5408\u98ce\u9669\u5927\uff0c\u68c0\u6d4b\u6548\u679c\u5c31\u5dee \u4f5c\u8005\u901a\u8fc7\u5b9e\u9a8c\uff0cc\u4e2d\u53ef\u4ee5\u770b\u51fa: \u5f53\u4e00\u4e2a\u68c0\u6d4b\u6a21\u578b\u91c7\u7528\u67d0\u4e2a\u9608\u503c\uff08\u5047\u8bbeu=0.6\uff09\u6765\u754c\u5b9a\u6b63\u8d1f\u6837\u672c\u65f6\uff0c\u90a3\u4e48\u5f53\u8f93\u5165proposal\u7684IOU\u5728\u8fd9\u4e2a\u9608\u503c\uff08u=0.6\uff09\u9644\u8fd1\u65f6\uff0c\u8be5\u68c0\u6d4b\u6a21\u578b\u6bd4\u57fa\u4e8e\u5176\u4ed6\u9608\u503c\u8bad\u7ec3\u7684\u68c0\u6d4b\u6a21\u578b\u7684\u6548\u679c\u8981\u597d \u3002\u65e2\u7136\u8fd9\u6837\uff0c\u90a3IOU\u9608\u503c\u8bbe\u7f6e\u7684\u8d8a\u5927\u4e0d\u5c31\u8d8a\u597d\u5417\uff1f\u601d\u8def\u8d70\u4e0d\u901a\uff0c\u89e3\u7b54\u4e3a\u4e0a\u3002 \u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u7684\u662f: \u540c\u65f6\u8bad\u7ec3\u591a\u4e2a\u68c0\u6d4b\u6a21\u578b\uff0c\u6bcf\u4e2a\u68c0\u6d4b\u6a21\u578b\u7528\u7684IOU\u9608\u503c\u8981\u5c3d\u53ef\u80fd\u548c\u8f93\u5165proposal\u7684IOU\u63a5\u8fd1\uff0c\u8fd9\u6837\u6bcf\u4e2a\u68c0\u6d4b\u6a21\u578b\u5f97\u5230\u7684\u6548\u679c\u90fd\u5f88\u597d\u3002\u8fd9\u51e0\u4e2a\u68c0\u6d4b\u6a21\u578b\u5982\u4f55\u8fde\u63a5\u5462\uff1f**\u4f5c\u8005\u5728\u5b9e\u9a8c\u4e2d\u53d1\u73b0\uff0c**\u8f93\u51fa\u7684IOU\u5927\u4e8e\u8f93\u5165\u7684IOU\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u4f5c\u4e3a\u540e\u4e00\u4e2a\u68c0\u6d4b\u6a21\u578b\u7684\u8f93\u5165\uff0c\u8fd9\u6837IOU\u9608\u503c\u4f1a\u4e00\u76f4\u4e0a\u5347\u3002 \u56e0\u6b64\u91c7\u53d6cascade\u7684\u65b9\u5f0f\u80fd\u591f\u8ba9\u6bcf\u4e00\u4e2astage\u7684detector\u90fd\u4e13\u6ce8\u4e8e\u68c0\u6d4bIOU\u5728\u67d0\u4e00\u8303\u56f4\u5185\u7684proposal\uff0c\u56e0\u4e3a\u8f93\u51faIOU\u666e\u904d\u5927\u4e8e\u8f93\u5165IOU\uff0c\u56e0\u6b64\u68c0\u6d4b\u6548\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d \u3002 \u8fd9\u4e5f\u5c31\u89e3\u91ca\u4e86\u53ea\u7528\u56fa\u5b9aIOU=0.5,\u68c0\u6d4b\u6548\u679c\u4e0d\u7cbe\u51c6\u7684\u539f\u56e0:\u5f53\u8f93\u5165proposal\u7684IOU\u4e0d\u5728\u4f60\u8bad\u7ec3\u68c0\u6d4b\u6a21\u578b\u65f6IOU\u503c\u9644\u8fd1\u65f6\uff0c\u6548\u679c\u4e0d\u4f1a\u6709\u592a\u5927\u63d0\u5347\u3002 Mask Scoring R-CNN(19/03) \u00b6 \u8bba\u6587\u5730\u5740 \u601d\u60f3 :\u672c\u7b97\u6cd5\u662f\u5728 Mask R-CNN \u7684\u57fa\u7840\u4e0a\u63d0\u51fa\u7684\uff0c\u4f5c\u8005\u53d1\u73b0\u7ecf\u5178\u5206\u5272\u6846\u67b6\u5b58\u5728\u7740\u4e00\u4e2a\u7f3a\u9677:mask score=bounding box\u7684classification confidence\uff0c\u7136\u800cmask score\u548cmask quality\u4e0d\u914d\u51c6(classification confidence\u9ad8\u53ef\u4ee5\u8868\u793a\u68c0\u6d4b\u6846\u7684\u7f6e\u4fe1\u5ea6\u9ad8\uff08\u4e25\u683c\u6765\u8bb2\u4e0d\u80fd\u8868\u793a\u6846\u7684\u5b9a\u4f4d\u7cbe\u51c6\uff09\uff0c\u4f46\u4e5f\u4f1a\u5b58\u5728mask\u5206\u5272\u7684\u8d28\u91cf\u5dee\u7684\u60c5\u51b5)\uff0c\u5982\u4f55\u5f97\u5230\u7cbe\u51c6mask\u8d28\u91cf\u5462\uff1f mask quality = maskIoU(pre_mask+gt_mask) * classification score:mask score\u5c31\u540c\u65f6\u8868\u793a\u5206\u7c7b\u7f6e\u4fe1\u5ea6\u548c\u5206\u5272\u7684\u8d28\u91cf \u505a\u6cd5 : \u5728Mask R-CNN\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a**MaskIoU\u5206\u652f**\u7528\u4e8e\u5f97\u5230pre mask\u548cgt mask\u7684IoU\uff0c\u8f93\u5165\u7531\u4e24\u90e8\u5206\u7ec4\u6210 \u4e00\u662fROIAlign\u5f97\u5230\u7684RoI feature map = gt_mask \u4e8c\u662fmask\u5206\u652f\u8f93\u51fa\u7684mask = pre_mask \u68c0\u6d4b\u5206\u652f\u8f93\u51fascore\u6700\u9ad8\u7684100\u4e2a\u6846\uff0c\u518d\u9001\u5165mask\u5206\u652f\uff0c\u5f97\u5230mask\u7ed3\u679c \u4e24\u8005concat\u4e4b\u540e\u7ecf\u8fc73\u5c42\u5377\u79ef\u548c2\u5c42\u5168\u8fde\u63a5\u8f93\u51fa MaskIoU RoI feature map\u548cmask\u7ed3\u679c\u9001\u5165MaskIoU\u5206\u652f\u5f97\u5230mask iou\uff0c\u4e0ebox\u7684classification score\u76f8\u4e58\u5c31\u5f97\u5230\u6700\u540e\u7684mask score\u3002 CornerNet(18/08) \u00b6 \u8bba\u6587\u5730\u5740 \u901a\u8fc7\u68c0\u6d4b\u76ee\u6807\u6846\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u4e24\u4e2a\u5173\u952e\u70b9\u5f97\u5230\u9884\u6d4b\u6846 \uff0c\u56e0\u6b64CornerNet\u7b97\u6cd5\u4e2d\u6ca1\u6709anchor\u7684\u6982\u5ff5\uff0c\u4e5f\u5c31\u6ca1\u6709\u6837\u672c\u4e0d\u5747\u8861\uff0c\u4e5f\u65e0\u9700NMS\u3002 CornerNet\u7b97\u6cd5\u6574\u4f53\u7ed3\u6784 \u4e3b\u5e72\u7f51\u7edc Hourglass ,\u4e0b\u91c7\u6837\u56e0\u5b50 4 \uff1a 512//4=128 \u540e\u9762\u63a5\u4e86\u4e24\u4e2a\u5206\u652f( \u5de6\u4e0a\u89d2\u70b9\u9884\u6d4b\u5206\u652f\u548c\u53f3\u4e0b\u89d2\u70b9\u9884\u6d4b\u5206\u652f )\uff0c\u6bcf\u4e2a\u5206\u652f\u6a21\u5757\u5305\u542b\u4e00\u4e2a corner pooling \u5c42\u548c 3 \u4e2a\u8f93\u51fa\uff1a heatmaps\u3001embeddings\u548coffsets \u3002 heatmaps \u662f\u8f93\u51fa**\u9884\u6d4b\u89d2\u70b9\u4fe1\u606f**\uff0c\u53ef\u4ee5\u7528\u7ef4\u5ea6\u4e3a C*H*W \u7684\u7279\u5f81\u56fe\u8868\u793a\uff0c\u5176\u4e2dC\u8868\u793a\u76ee\u6807\u7684\u7c7b\u522b\uff08\u6ce8\u610f\uff1a\u6ca1\u6709\u80cc\u666f\u7c7b\uff09\uff0c\u8fd9\u4e2a\u7279\u5f81\u56fe\u7684\u6bcf\u4e2a\u901a\u9053\u90fd\u662f\u4e00\u4e2amask\uff0cmask\u7684\u6bcf\u4e2a\u503c\uff08\u9884\u6d4b\u503c\u8303\u56f4\u4e3a0~1\uff09\u8868\u793a\u8be5\u70b9\u662f**\u89d2\u70b9\u7684\u5206\u6570** p_cij \u8868\u793a\u9884\u6d4b\u7684heatmaps\u5728\u7b2cc\u4e2a\u901a\u9053\uff08\u7c7b\u522bc\uff09\u7684(i,j)\u4f4d\u7f6e\u7684\u503c\uff0c y_cij \u8868\u793a\u5bf9\u5e94\u4f4d\u7f6e\u7684 ground truth \uff0c N \u8868\u793a\u76ee\u6807\u7684\u6570\u91cf\u3002 y_cij=1 \u65f6\u5019\u7684\u635f\u5931\u51fd\u6570\u5bb9\u6613\u7406\u89e3\uff0c\u5c31\u662f focal loss \uff0c \u03b1\u53c2\u6570 \u7528\u6765\u63a7\u5236\u96be\u6613\u5206\u7c7b\u6837\u672c\u7684\u635f\u5931\u6743\u91cd\uff1b y_cij \u7b49\u4e8e\u5176\u4ed6\u503c\u65f6\u8868\u793a(i,j)\u70b9\u4e0d\u662f \u7c7b\u522bc \u7684\u76ee\u6807\u89d2\u70b9\uff0c\u7167\u7406\u8bf4\u6b64\u65f6 y_cij \u5e94\u8be5\u662f0\uff08\u5927\u90e8\u5206\u7b97\u6cd5\u90fd\u662f\u8fd9\u6837\u5904\u7406\u7684\uff09\uff0c\u4f46\u662f\u8fd9\u91ccycij\u4e0d\u662f0\uff0c\u800c\u662f\u7528\u57fa\u4e8e ground truth \u89d2\u70b9\u7684\u9ad8\u65af\u5206\u5e03\u8ba1\u7b97\u5f97\u5230\uff0c\u56e0\u6b64\u8ddd\u79bbground truth\u6bd4\u8f83\u8fd1\u7684(i,j)\u70b9\u7684 y_cij \u503c\u63a5\u8fd11\uff0c\u8fd9\u90e8\u5206\u901a\u8fc7 \u03b2\u53c2\u6570 \u63a7\u5236\u6743\u91cd\uff0c\u8fd9\u662f\u548c focal loss \u7684\u5dee\u522b\u3002\u4e3a\u4ec0\u4e48\u5bf9\u4e0d\u540c\u7684\u8d1f\u6837\u672c\u70b9\u7528\u4e0d\u540c\u6743\u91cd\u7684\u635f\u5931\u51fd\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u9760\u8fd1ground truth\u7684\u8bef\u68c0\u89d2\u70b9\u7ec4\u6210\u7684\u9884\u6d4b\u6846\u4ecd\u4f1a\u548cground truth\u6709\u8f83\u5927\u7684\u91cd\u53e0\u9762\u79ef\u3002 \u5bf9\u4e0d\u540c\u8d1f\u6837\u672c\u70b9\u7684\u635f\u5931\u51fd\u6570\u91c7\u53d6\u4e0d\u540c\u6743\u91cd\u503c\u7684\u539f\u56e0 embeddings \u7528\u6765\u5bf9\u9884\u6d4b\u7684\u89d2\u70b9\u505agroup\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\u7684\u5de6\u4e0a\u89d2\u89d2\u70b9\u548c\u53f3\u4e0b\u89d2\u89d2\u70b9 \u4e0a\u9762\u4ecb\u7ecd\u7684\u4e24\u4e2a\u89d2\u70b9\u7684\u9884\u6d4b\u662f\u72ec\u7acb\u7684\uff0c\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u76ee\u6807\u7684\u4e24\u4e2a\u89d2\u70b9\u5c31\u662f\u8fd9\u6b65\u5b8c\u6210\u7684\u3002 \u57fa\u4e8e\u4e0d\u540c\u89d2\u70b9\u7684embedding vector\u4e4b\u95f4\u7684\u8ddd\u79bb\u627e\u5230\u6bcf\u4e2a\u76ee\u6807\u7684\u4e00\u5bf9\u89d2\u70b9\uff0c\u5982\u679c\u4e00\u4e2a\u5de6\u4e0a\u89d2\u89d2\u70b9\u548c\u4e00\u4e2a\u53f3\u4e0b\u89d2\u89d2\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\uff0c\u90a3\u4e48\u4e8c\u8005\u7684embedding vector\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e94\u8be5\u5f88\u5c0f \u3002 \u8fd9\u90e8\u5206\u7684\u8bad\u7ec3\u4e3b\u8981\u662f\u901a\u8fc7\u4e24\u4e2a\u635f\u5931\u51fd\u6570\u5b8c\u6210 e_tk \u8868\u793a\u7b2c k \u4e2a\u76ee\u6807\u7684**\u5de6\u4e0a\u89d2\u89d2\u70b9**\u7684embedding vector\uff0c e_bk \u8868\u793a\u7b2ck\u4e2a\u76ee\u6807\u7684**\u53f3\u4e0b\u89d2\u89d2\u70b9**\u7684embedding vector\uff0c e_k \u8868\u793a e_tk\u548ce_bk \u7684\u5747\u503c\u3002 \u516c\u5f0f4\u7528\u6765\u7f29\u5c0f\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\uff08\u7b2ck\u4e2a\u76ee\u6807\uff09\u7684\u4e24\u4e2a\u89d2\u70b9\u7684embedding vector\uff08etk\u548cebk\uff09\u8ddd\u79bb\u3002 \u516c\u5f0f5\u7528\u6765\u6269\u5927\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\u7684\u4e24\u4e2a\u89d2\u70b9\u7684embedding vector\u8ddd\u79bb\u3002 offsets \u7528\u6765**\u5bf9\u9884\u6d4b\u6846\u505a\u5fae\u8c03**\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ece\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u70b9\u6620\u5c04\u5230\u7279\u5f81\u56fe\u65f6\u6709\u91cf\u5316\u8bef\u5dee\uff0coffsets\u5c31\u662f\u7528\u6765\u8f93\u51fa\u8fd9\u4e9b\u8bef\u5dee\u4fe1\u606f\u3002 \u4ece\u8f93\u5165\u56fe\u50cf\u5230\u7279\u5f81\u56fe\u4e4b\u95f4\u4f1a\u6709\u5c3a\u5bf8\u7f29\u5c0f\uff0c\u5047\u8bbe\u7f29\u5c0f\u500d\u6570\u662fn\uff0c\u90a3\u4e48\u8f93\u5165\u56fe\u50cf\u4e0a\u7684(x,y)\u70b9\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u7684\u5f0f\u5b50: ,\u5411\u4e0b\u53d6\u6574\u4f1a\u5e26\u6765\u7cbe\u5ea6\u4e22\u5931(\u7c7b\u4f3cFasterRcnn\u4e2d\u7684\u7cbe\u5ea6\u4e22\u5931: \u5c24\u5176\u5f71\u54cd\u5c0f\u5c3a\u5bf8\u76ee\u6807\u7684\u56de\u5f52 ) \u516c\u5f0f2\u8ba1\u7b97offset\uff0c\u7136\u540e\u901a\u8fc7\u516c\u5f0f3\u7684smooth L1\u635f\u5931\u51fd\u6570\u76d1\u7763\u5b66\u4e60\u8be5\u53c2\u6570\uff0c\u548c\u5e38\u89c1\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u56de\u5f52\u652f\u8def\u7c7b\u4f3c\u3002 corner pooling \u4e3a\u4ec0\u4e48\u4f7f\u7528 corner pooling \u800c\u4e0d\u662f\u4f7f\u7528\u666e\u901a\u6c60\u5316 \u56e0\u4e3aCornerNet\u662f\u9884\u6d4b\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u4e24\u4e2a\u89d2\u70b9\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u89d2\u70b9\u5728\u4e0d\u540c\u76ee\u6807\u4e0a\u6ca1\u6709\u76f8\u540c\u89c4\u5f8b\u53ef\u5faa\uff0c\u5982\u679c\u91c7\u7528\u666e\u901a\u6c60\u5316\u64cd\u4f5c\uff0c\u90a3\u4e48\u5728\u8bad\u7ec3\u9884\u6d4b\u89d2\u70b9\u652f\u8def\u65f6\u4f1a\u6bd4\u8f83\u56f0\u96be\u3002\u8003\u8651\u5230\u5de6\u4e0a\u89d2\u89d2\u70b9\u7684\u53f3\u8fb9\u6709\u76ee\u6807\u9876\u7aef\u7684\u7279\u5f81\u4fe1\u606f\uff08\u7b2c\u4e00\u5f20\u56fe\u7684\u5934\u9876\uff09\uff0c\u5de6\u4e0a\u89d2\u89d2\u70b9\u7684\u4e0b\u8fb9\u6709\u76ee\u6807\u5de6\u4fa7\u7684\u7279\u5f81\u4fe1\u606f\uff08\u7b2c\u4e00\u5f20\u56fe\u7684\u624b\uff09\uff0c\u56e0\u6b64\u5982\u679c\u5de6\u4e0a\u89d2\u89d2\u70b9\u7ecf\u8fc7\u6c60\u5316\u64cd\u4f5c\u540e\u80fd\u6709\u8fd9\u4e24\u4e2a\u4fe1\u606f\uff0c\u90a3\u4e48\u5c31\u6709\u5229\u4e8e\u8be5\u70b9\u7684\u9884\u6d4b\uff0c\u8fd9\u5c31\u6709\u4e86corner pooling\u3002 \u5982\u4f55\u9488\u5bf9\u5de6\u4e0a\u89d2\u70b9\u505a corner pooling \uff1f \u4e0a\u5c42\u67092\u4e2a\u8f93\u5165\u7279\u5f81\u56fe\uff0c\u7279\u5f81\u56fe\u7684\u5bbd\u9ad8\u5206\u522b\u7528W\u548cH\u8868\u793a\uff0c\u5047\u8bbe\u63a5\u4e0b\u6765\u8981\u5bf9\u56fe\u4e2d\u7ea2\u8272\u70b9\uff08\u5750\u6807\u5047\u8bbe\u662f(i,j)\uff09\u505acorner pooling\uff0c\u90a3\u4e48\u5c31\u8ba1\u7b97(i,j)\u5230(i,H)\u7684\u6700\u5927\u503c\uff08\u5bf9\u5e94Figure3\u4e0a\u9762\u7b2c\u4e8c\u4e2a\u56fe\uff09\uff0c\u7c7b\u4f3c\u4e8e\u627e\u5230Figure2\u4e2d\u7b2c\u4e00\u5f20\u56fe\u7684\u5de6\u4fa7\u624b\u4fe1\u606f\uff1b\u540c\u65f6\u8ba1\u7b97(i,j)\u5230(W,j)\u7684\u6700\u5927\u503c\uff08\u5bf9\u5e94Figure3\u4e0b\u9762\u7b2c\u4e8c\u4e2a\u56fe\uff09\uff0c\u7c7b\u4f3c\u4e8e\u627e\u5230Figure2\u4e2d\u7b2c\u4e00\u5f20\u56fe\u7684\u5934\u9876\u4fe1\u606f\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u6700\u5927\u503c\u76f8\u52a0\u5f97\u5230(i,j)\u70b9\u7684\u503c\uff08\u5bf9\u5e94Figure3\u6700\u540e\u4e00\u4e2a\u56fe\u7684\u84dd\u8272\u70b9\uff09\u3002\u53f3\u4e0b\u89d2\u70b9\u7684corner pooling\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8ba1\u7b97\u6700\u5927\u503c\u53d8\u6210\u4ece(0,j)\u5230(i,j)\u548c\u4ece(i,0)\u5230(i,j)\u3002 \u4e3e\u4f8b\u89e3\u91ca\u5982\u4f55\u5bf9\u5de6\u4e0a\u89d2\u505a corner pooling \u8be5\u56fe\u4e00\u5171\u8ba1\u7b97\u4e864\u4e2a\u70b9\u7684corner pooling\u7ed3\u679c\u3002\u7b2c\u4e8c\u5217\u7684\u6570\u503c\u8ba1\u7b97\u548cFigure3\u4ecb\u7ecd\u7684\u4e00\u6837\uff0c\u6bd4\u5982\u7b2c\u4e00\u884c\u7b2c\u4e00\u4e2a\u56fe\u4e2d\u76840\u503c\u70b9\uff0c\u8ba1\u7b97\u8be5\u70b9\u7684\u6700\u5927\u503c\u65f6\u662f\u8ba1\u7b97\u8be5\u70b9\u548c\u5176\u53f3\u4fa7\u7684\u503c\u4e3a2\u7684\u70b9\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u5f97\u5230\u7684\u5c31\u662f2\u3002 \u9884\u6d4b\u6a21\u5757\u8be6\u7ec6\u7ed3\u6784 \u8be5\u7ed3\u6784\u5305\u62eccorner pooling\u6a21\u5757\u548c\u9884\u6d4b\u8f93\u51fa\u6a21\u5757\u4e24\u90e8\u5206\uff0ccorner pooling\u6a21\u5757\u91c7\u7528\u4e86\u7c7b\u4f3cresidual block\u7684\u5f62\u5f0f\uff0c\u6709\u4e00\u4e2askip connection\uff0c\u865a\u7ebf\u6846\u90e8\u5206\u6267\u884c\u7684\u5c31\u662fcorner pooling\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662fFigure6\u7684\u64cd\u4f5c\uff0c\u8fd9\u6837\u6574\u4e2acorner pooling\u64cd\u4f5c\u5c31\u4ecb\u7ecd\u5b8c\u4e86\u3002 \u6a21\u578b\u6d4b\u8bd5\u65f6\u7ec6\u8282 \u5728\u5f97\u5230\u9884\u6d4b\u89d2\u70b9\u540e\uff0c\u4f1a\u5bf9\u8fd9\u4e9b\u89d2\u70b9\u505aNMS\u64cd\u4f5c\uff0c\u9009\u62e9\u524d100\u4e2a\u5de6\u4e0a\u89d2\u89d2\u70b9\u548c100\u4e2a\u53f3\u4e0b\u89d2\u89d2\u70b9\u3002 \u8ba1\u7b97\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u89d2\u70b9\u7684embedding vector\u7684\u8ddd\u79bb\u65f6\u91c7\u7528L1\u8303\u6570\uff0c\u8ddd\u79bb\u5927\u4e8e0.5\u6216\u8005\u4e24\u4e2a\u70b9\u6765\u81ea\u4e0d\u540c\u7c7b\u522b\u7684\u76ee\u6807\u7684\u90fd\u4e0d\u80fd\u6784\u6210\u4e00\u5bf9\u3002 \u6d4b\u8bd5\u56fe\u50cf\u91c7\u75280\u503c\u586b\u5145\u65b9\u5f0f\u5f97\u5230\u6307\u5b9a\u5927\u5c0f\u4f5c\u4e3a\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u800c\u4e0d\u662f\u91c7\u7528resize\uff0c\u53e6\u5916\u540c\u65f6\u6d4b\u8bd5\u56fe\u50cf\u7684\u6c34\u5e73\u7ffb\u8f6c\u56fe\u5e76\u878d\u5408\u4e8c\u8005\u7684\u7ed3\u679c\u3002 \u6700\u540e\u901a\u8fc7soft-nms\u64cd\u4f5c\u53bb\u9664\u5197\u4f59\u6846\uff0c\u53ea\u4fdd\u7559\u524d100\u4e2a\u9884\u6d4b\u6846\u3002 FCOS(19/03) \u00b6 \u8bba\u6587 | \u4ee3\u7801 \u6838\u5fc3\u601d\u60f3(\u4e0d\u592a\u5229\u4e8e\u5c0f\u76ee\u6807\u8bad\u7ec3) one-stage(\u4e0eRetinaNet\u5bf9\u6bd4)+anchorfree(cornerNet\u601d\u60f3) \u501f\u9274 FCN \u7684\u9010\u50cf\u7d20\u76ee\u6807\u68c0\u6d4b\u601d\u60f3:\u9884\u6d4b\u8f93\u5165\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u76ee\u6807\u7c7b\u522b\u548c\u76ee\u6807\u6846 \u63d0\u51fa\u4e86 \u4e2d\u5fc3\u5ea6\uff08Center\u2014ness\uff09 \u7684\u601d\u60f3 \u7f51\u7edc\u7ed3\u6784 \u7c7b\u4f3c FPN \u7684\u7f51\u7edc\u7ed3\u6784(\u56e0\u4e3a\u548c RetinaNet \u505a\u5bf9\u6bd4,\u6240\u4ee5\u7f51\u7edc\u7ed3\u6784\u7c7b\u4f3c),\u6700\u540e\u57fa\u4e8e5\u4e2a\u7279\u5f81\u56fe\u505a\u9884\u6d4b,\u9884\u6d4b\u5c42\u6709\u4e09\u4e2a\u5206\u652f,\u4e0b\u9762\u89e3\u91ca\u4e09\u4e2a\u9884\u6d4b\u5c42\u3002 \u7b2c\u4e00\u4e2a\u662f**\u5206\u7c7b\u652f\u8def**: H*W \u8868\u793a\u7279\u5f81\u7684\u5927\u5c0f, C \u8868\u793a\u7c7b\u522b\u6570,\u8be5\u9884\u6d4b\u5c42\u7684\u7279\u5f81\u56fe\u4f4d\u7f6e(x,y)\u5bf9\u5e94\u5230\u8f93\u5165\u56fe\u50cf\u4f4d\u7f6e\u6362\u7b97\u516c\u5f0f\u5982\u4e0b(s\u8868\u793a\u7f29\u653e\u6bd4\u4f8b),\u65b9\u4fbf\u8ba1\u7b97\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u5206\u7c7b\u548c\u56de\u5f52\u76ee\u6807: \u7b2c\u4e09\u4e2a\u662f**\u56de\u5f52\u5206\u652f**:4\u8868\u793a**\u56de\u5f52\u76f8\u5173\u76844\u4e2a\u503c**( (l,t,r,b) \u4e0d\u540c\u4e8e anchor \u7684\u4e3b\u8981\u5dee\u522b) 4\u4e2a\u503c (l,t,r,b) \u8868\u793a\u76ee\u6807\u6846\u5185\u67d0\u4e2a\u70b9\u79bb\u6846\u7684\u5de6\u8fb9\u3001\u4e0a\u8fb9\u3001\u53f3\u8fb9\u3001\u4e0b\u8fb9\u7684\u8ddd\u79bb \u6807\u6ce8\u597d\u7684\u76ee\u6807\u6846(\u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2+\u7c7b\u522b)\u8868\u793a: B_i = ({x_0}^{(i)},{y_0}^{(i)},{x_1}^{(i)},{y_1}^{(i)},{c}^{(i)}) B_i = ({x_0}^{(i)},{y_0}^{(i)},{x_1}^{(i)},{y_1}^{(i)},{c}^{(i)}) \u786e\u5b9a\u8f93\u5165\u56fe\u50cf\u7684\u6bcf\u4e2a\u70b9\u7c7b\u522b\u6807\u7b7e(\u6839\u636e\u8fd9\u4e2a\u70b9\u662f\u5426\u5728\u6807\u8bb0\u6846\u4e2d:\u5728->\u6b63\u6837\u672c,\u7c7b\u522b=\u6807\u6ce8\u6846\u7c7b\u522b.\u4e0d\u5728:\u8d1f\u6837\u672c,\u7c7b\u522b=0)\uff0c\u56de\u5f52\u76ee\u6807\u5c31\u662f\u4e0b\u9762\u8fd94\u4e2a\u503c(\u4e3a\u4fdd\u8bc1\u90fd\u662f\u6b63\u503c,\u56db\u503c\u90fd\u9700\u8981\u901a\u8fc7exp()\u51fd\u6570): FCOS\u7684\u6b63\u8d1f\u6837\u672c\u662f\u57fa\u4e8e\u6bcf\u4e2a\u70b9\u7684\uff0c\u4e00\u822c\u4e00\u5f20\u56fe\u50cf\u4e0a\u76ee\u6807\u6846\u7684\u9762\u79ef\u548c\u975e\u76ee\u6807\u6846\u7684\u9762\u79ef\u5dee\u8ddd\u4e0d\u4f1a\u975e\u5e38\u5927\uff0c \u56e0\u6b64\u57fa\u672c\u4e0d\u5b58\u5728\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u7684\u73b0\u8c61(\u5c0f\u76ee\u6807\u5c31\u4e0d\u592a\u597d\u8bad\u7ec3\u4e86) \u3002 \u4e0a\u56fe\u6846\u91cd\u53e0,\u91cd\u5408\u70b9\u7684\u8bad\u7ec3\u76ee\u6807\u5982\u4f55\u7b97\uff1f \u4f5c\u8005\u5f15\u5165 FPN \u7ed3\u6784\u5e76\u57fa\u4e8e\u4e0d\u540c\u7279\u5f81\u5c42\u9884\u6d4b\u4e0d\u540c\u5c3a\u5ea6\u7684\u76ee\u6807\u6846,\u8fd9\u6837\u53ef\u4ee5\u628a**\u5927\u90e8\u5206\u91cd\u5408\u76ee\u6807\u6846\u7ed9\u5265\u79bb**\u3002 \u5982\u4f55\u786e\u5b9a\u67d0\u4e2a\u70b9\u5728\u54ea\u4e2a\u7279\u5f81\u5c42(5\u4e2a)\u5462? \u8be5\u70b9\u7684 (l, t, r, b) \u8fd94\u4e2a\u503c\u7684\u6700\u5927\u503c\u662f\u5426\u5728\u9884\u5148\u8bbe\u5b9a\u597d\u7684\u8303\u56f4\u5185(\u6bcf\u4e2a\u7279\u5f81\u5c42\u90fd\u9884\u5148\u8bbe\u5b9a\u597d\u5c3a\u5ea6\u8303\u56f4\uff0c\u6bd4\u5982P3\u5c42\u53ea\u8d1f\u8d23\u6700\u5927\u503c\u5728[0, 64]\u8303\u56f4\u5185\u7684\u70b9\uff0cP4\u5c42\u53ea\u8d1f\u8d23\u6700\u5927\u503c\u5728[64, 128]\u8303\u56f4\u5185\u7684\u70b9\uff0c\u4f9d\u6b21\u7c7b\u63a8) \u4e3e\u4f8b\u5b50:\u4e0a\u56fe\u4e2d,\u5047\u8bbe\u91cd\u5408\u90e8\u5206\u7684\u90a3\u4e2a\u70b9\u5230\u7403\u62cd\u6846\u76844\u4e2a\u8ddd\u79bb\u4e2d\u6700\u5927\u503c\u4e3a60\uff0c\u5230\u4eba\u6846\u76844\u4e2a\u8ddd\u79bb\u4e2d\u6700\u5927\u503c\u4e3a120\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5728P3\u5c42\u65f6\u7684\u56de\u5f52\u76ee\u6807\u662f\u7403\u62cd\u6846\uff0c\u5728P4\u5c42\u65f6\u7684\u56de\u5f52\u76ee\u6807\u662f\u4eba\u6846\uff0c\u800c\u5728P5\u3001P6\u3001P7\u5c42\u65f6\u662f\u8d1f\u6837\u672c\u70b9\u3002 \u8be5\u7b56\u7565\u9002\u7528\u4e8e\u57fa\u4e8e\u5927\u90e8\u5206\u6709\u91cd\u5408\u800c\u4e14\u76ee\u6807\u6846\u5c3a\u5ea6\u5dee\u522b\u8f83\u5927\u7684 \u5982\u679c\u91cd\u5408\u76ee\u6807\u6846\u5927\u5c0f\u63a5\u8fd1\u4e14\u7c7b\u522b\u4e0d\u540c,\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u68d8\u624b\u4e86,\u5982\u4f55\u505a\uff1f \u5bf9\u4e8e\u90a3\u4e9b\u4ecd\u65e7\u65e0\u6cd5\u5265\u79bb\u7684\u76ee\u6807\u6846\uff0c\u4f7f\u7528**\u5f3a\u5236\u7b56\u7565**\uff1a\u8bad\u7ec3\u76ee\u6807\u57fa\u4e8e\u91cd\u5408\u76ee\u6807\u6846\u4e2d\u9762\u79ef\u6700\u5c0f\u7684\u90a3\u4e2a\u6846\u8fdb\u884c\u8ba1\u7b97(yolov3\u4e2d3\u4e2a\u7279\u5f81\u56fe\u4e0a\u5206\u522b\u52063\u6bb5anchor,\u5927\u7279\u5f81\u56fe\u5c0fanchor,\u4f46\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u5f3a\u5236\u7684: \u6709\u4e00\u4e9b\u5927\u76ee\u6807\u53ef\u80fd\u8fd8\u662f\u901a\u8fc7\u6d45\u5c42\u9884\u6d4b\u5f97\u5230\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136 )\u3002 \u7b2c\u4e8c\u4e2a\u5206\u652f\u8f93\u51fa Center-ness (\u4e2d\u5fc3\u5ea6),\u7528\u4e8e\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u548c\u76ee\u6807\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\uff0c\u7528\u4e8e\u51cf\u5c11\u90a3\u4e9b\u79bb\u76ee\u6807\u4e2d\u5fc3\u70b9\u8f83\u8fdc\u7684\u9884\u6d4b\u70b9\u3002 \u5982\u679c\u4e0d\u52a0\u5165\u8fd9\u4e2a\u5206\u652f, AP \u6700\u597d\u7684\u662f 33.8 < RetinaNet AP=36.1 ,\u539f\u56e0: \u90e8\u5206\u8bef\u68c0\u6846(\u9519\u7684\u79bb\u8c31\u7684\u6846)\u79bb\u771f\u5b9e\u6846\u7684\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u8f83\u5927 ,\u89e3\u51b3: \u5206\u7c7b\u652f\u8def\u7684\u8f93\u51fa\u4e58\u4ee5\u4e00\u4e2a \u6743\u91cd\u56fe(Center-ness\u5206\u652f\u8f93\u51fa) \u5f97\u5230\u6700\u7ec8\u7684\u5206\u7c7b\u7f6e\u4fe1\u5ea6\uff0c\u800c\u8fd9\u4e2a\u6743\u91cd\u56fe\u4ee3\u8868\u7684\u5c31\u662f\u76ee\u6807\u6846\u4e2d\u6bcf\u4e2a\u70b9\u5230\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u6743\u91cd\u8d8a\u5927 \u3002 \u8be5\u5206\u652f\u65e2\u7136\u8bad\u7ec3\u5f97\u5230\u6743\u91cd\u56fe\uff0c\u5176\u76d1\u7763\u4fe1\u606f\u7528\u4e0b\u5f0f\u8868\u793a\uff0c\u56db\u4e2a\u8f93\u5165\u503c\u662f\u56de\u5f52\u652f\u8def\u7684\u56de\u5f52\u76ee\u6807: NanoDet(\u624b\u673a\u7aef97fps:Anchor Free) \u00b6 code | \u77e5\u4e4e\u535a\u5ba2 | \u5fae\u4fe1\u535a\u5ba2 |FCOS\u6539\u8fdb CenterNet(19/04) \u00b6 \u8bba\u6587\u5730\u5740 | code | \u535a\u5ba21 | \u535a\u5ba22 | \u901a\u8fc7\u9884\u6d4b\u4e2d\u5fc3\u70b9\u6765\u9884\u6d4b\u7269\u4f53 \u65e0 Anchor \uff0c\u6bcf\u4e00\u4e2a\u76ee\u6807\u5bf9\u5e94\u4e00\u4e2a\u6846\uff0c\u65e0\u9700\u533a\u5206anchor\u662f\u80cc\u666f\u8fd8\u662f\u7269\u4f53\u3002\u8f93\u51fa\u5206\u8fa8\u7387\u7684\u4e0b\u91c7\u6837\u56e0\u5b50 4 \u76f8\u5bf9 maskRcnn(\u6700\u5c0f:16) \u548c ssd(16) \u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u5206\u8fa8\u7387\u6bd4\u8f83\u5927( 512//4=128 )\u3002 PS\uff1a \u672c\u7bc7\u8bba\u6587\u662f Objects as Points ,\u548c CenterNet:Keypoint Triplets for Object Detection \u8bba\u6587\u7f51\u7edc\u540d\u51b2\u7a81\u4e86\uff0c\u4e0d\u8981\u6df7\u6dc6\u3002 \u7f51\u7edc\u7ed3\u6784 \u8bba\u6587\u4e2dCenterNet\u63d0\u5230\u4e86\u4e09\u79cd\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u7684\u7f51\u7edc\uff0c\u8fd9\u4e09\u79cd\u7f51\u7edc\u90fd\u662f\u7f16\u7801\u89e3\u7801(encoder-decoder)\u7684\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u4e0d\u540c\uff0c\u4f46\u662f\u5728\u6a21\u578b\u7684\u6700\u540e\u90fd\u662f\u52a0\u4e86**\u4e09\u4e2a\u7f51\u7edc\u6784\u9020**\u6765\u8f93\u51fa\u9884\u6d4b\u503c\uff0c\u9ed8\u8ba4\u662f 80 \u4e2a\u7c7b\u3001 2\u4e2a \u9884\u6d4b\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\u3001 2\u4e2a \u4e2d\u5fc3\u70b9\u7684\u504f\u7f6e\uff0cpytorch\u8f93\u51fa\u5206\u522b\u662f hm->Conv2d(64,80):heatmap\u70ed\u529b\u56fe,wh->Conv2d(64,2),reg->Conv2d(64,2) \uff1a Resnet-18 with up-convolutional layers : 28.1% coco and 142 FPS DLA-34 : 37.4% COCOAP and 52 FPS Hourglass-104 : 45.1% COCOAP and 1.4 FPS \u70ed\u529b\u56fe\u7406\u89e3 (GT\u6846label\u7684\u751f\u6210) heatmap \u662f\u8868\u793a\u5206\u7c7b\u4fe1\u606f\u3002\u6bcf\u4e00\u4e2a\u7c7b\u522b\u90fd\u6709\u4e00\u5f20 heatmap \uff0c\u6bcf\u4e00\u5f20 heatmap \u4e0a\uff0c\u82e5\u67d0\u4e2a\u5750\u6807\u5904\u6709\u7269\u4f53\u76ee\u6807\u7684\u4e2d\u5fc3\u70b9\uff0c\u5373\u5728\u8be5\u5750\u6807\u5904\u4ea7\u751f\u4e00\u4e2a keypoint (\u7528**\u9ad8\u65af\u5706**\u8868\u793a\uff09 \u539f\u59cb\u6846\u4e2d\u5fc3\u70b9\u5750\u6807( p=((x1+x2)/2,(y1+y2)/2) )\u2192\u7279\u5f81\u56fe\u4e2d\u5fc3\u70b9 p//4->p~ \u8be5\u7c7b\u7684 heatmap (\u5176\u5b9e\u5c31\u662f\u7279\u5f81\u56fe\u7684\u7b2cc\u4e2a\u901a\u9053)\uff0c\u6709\u51e0\u4e2a\u540c\u7c7b\u7269\u4f53\u5c31\u6709\u51e0\u4e2a\u70b9\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u70b9\u503c\u4e3a 1 \u5468\u56f4\u5176\u4f59\u70b9\u4e3a 0 \u592a\u4e25\u683c\u4e86\uff0c\u5468\u8fb9\u9700\u8981\u7528\u4e8c\u7ef4\u7684\u9ad8\u65af\u6838\u8fc7\u6e21\u4e00\u4e0b(\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u8be5\u70b9\u4e3a\u5706\u5fc3\uff0c\u534a\u5f84 r \u4e3a GT \u6846 IOU \u5927\u4e8e 0.7 \u7684\u8fd9\u4e9b\u70b9(\u8fd9\u4e9b\u70b9\u751f\u6210\u7684\u6846\u4e5f\u80fd\u5f88\u597d\u7684\u5305\u56f4\u76ee\u6807)\uff0c\u6807\u7b7e\u4e0d\u76f4\u63a5\u8bbe\u7f6e\u4e3a 0 \uff0c\u800c\u662f\u4f7f\u7528\u4e8c\u7ef4\u9ad8\u65af\u7684\u65b9\u5f0f\u9010\u6e10\u51cf\u5c11\u8be5\u503c\uff0c \u5982\u679c\u67d0\u4e00\u4e2a\u7c7b\u7684\u4e24\u4e2a\u9ad8\u65af\u5206\u5e03\u53d1\u751f\u4e86\u91cd\u53e0\uff0c\u76f4\u63a5\u53d6\u5143\u7d20\u95f4\u6700\u5927\u7684\u5c31\u53ef\u4ee5 ) \u9ad8\u65af\u51fd\u6570 \u6700\u7ec8\u7ed3\u679c \u635f\u5931\u51fd\u6570 \u4e2d\u5fc3\u70b9\u9884\u6d4b\u7684\u635f\u5931\u51fd\u6570(\u662f\u4e0d\u662f\u7269\u4f53):\u4fee\u6539\u7248 Focal Loss alpha=2,beta=4 ,\u662f Focal loss \u8d85\u53c2\u6570\uff0c N :\u662f\u56fe\u50cf I \u7684\u5173\u952e\u70b9\u6570\u91cf \u5f53 Y_xyc=1 \u65f6 \u5bf9\u4e8e easy point \u9002\u5f53\u51cf\u5c11\u5176\u8bad\u7ec3\u6bd4\u91cd(Y=1,Y ->1,(1-Y )->0) \u5bf9\u4e8e hard point \u9002\u5f53\u589e\u52a0\u5176\u6743\u91cd\u6bd4\u91cd(Y=1,Y ->0,(1-Y )->1) \u5f53 Y_xyc=otherwise \u65f6 Y^ \u672c\u8be5\u8d8b\u4e8e 0 \uff0c\u5982\u679c\u8d8b\u8fd1 1 \u5219\u4f1a\u52a0\u5927\u8bad\u7ec3\u6743\u91cd\u8fdb\u884c\u60e9\u7f5a\uff0c\u8ba9\u5176\u8d8b\u8fd1\u4e8e 0 1-Y \u5bf9\u8ddd\u79bb\u4e2d\u5fc3\u70b9\u5f88\u8fd1\u7684\u70b9\u8fdb\u884c\u6291\u5236(\u79bb\u4e2d\u5fc3\u70b9\u8d8a\u8fd1\u8d8a\u5bb9\u6613\u5f71\u54cd\u9020\u6210\u8bef\u68c0\u6d4b)(Y->1,1-Y->0) \u5982\u4f55\u8ba9 (1-Y)\u548cY^ \u534f\u540c\u5408\u4f5c\u5462\uff1f \u76ee\u6807\u4e2d\u5fc3\u70b9\u7684\u504f\u7f6e\u635f\u5931:\u4e0b\u91c7\u6837 R=4 \uff0c\u53d6\u6b63\u540e\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\u4f1a\u5e26\u6765\u8bef\u5dee\uff0c\u6240\u6709 C \u7c7b\u516c\u7528\u4e00\u4e2a\u504f\u7f6e\uff0c\u635f\u5931\u7528 L1 Loss \u6765\u8bad\u7ec3\u3002 Q \u4e3a\u9884\u6d4b\u51fa\u6765\u7684\u504f\u7f6e (N,2) \uff0c (p/R - p~) \u662f\u5b9e\u9645\u8ba1\u7b97\u51fa\u7684\u504f\u7f6e [98.97667 2.3566666] - [98 2] = [0.97667, 0.3566666] \u76ee\u6807\u5927\u5c0f\u635f\u5931\uff1a sk = [xmax-xmin,ymax-ymin] ,k\u4e3a\u6240\u5c5e\u7c7b\u522b\uff0c\u662f\u8fdb\u884c\u4e86\u4e0b\u91c7\u6837\u4e4b\u540e h,w S^_pk \uff1a\u9884\u6d4b\u503c\uff0c\u4f7f\u7528 (N,2) \u8868\u793a \u6574\u4f53\u635f\u5931 \u5982\u4f55\u63a8\u7406\uff1f \u5bf9\u4e8e\u67d0\u7c7b\u7684\u4e00\u4e2a heatmap ,\u4f7f\u7528 3x3\u7684MaxPool \u9009\u53d6100\u4e2a\u9884\u6d4b\u7684\u4e2d\u5fc3\u70b9(\u7c7b\u4f3c NMS \uff0c\u5176\u5b9e\u5c31\u662f\u68c0\u6d4b\u5f53\u524d\u70ed\u70b9\u7684\u503c\u662f\u5426\u6bd4\u5468\u56f4\u7684\u516b\u4e2a\u8fd1\u90bb\u70b9(\u516b\u65b9\u4f4d)\u90fd\u5927(\u6216\u8005\u7b49\u4e8e)\uff0c\u9009\u53d6100\u4e2a\uff0c\u5f97\u5206\u6309\u7167 Y~ )\uff0c\u7136\u540e\u9009\u53d6\u9608\u503c\u7ed3\u679c\u5927\u4e8e 0.3 \u7684\u4e2d\u5fc3\u70b9\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 \u6846\u5982\u4f55\u8868\u793a\uff1f \u7f3a\u70b9 \uff1a\u4e24\u4e2a\u7269\u4f53\u5728GT\u4e2d\u7684\u4e2d\u5fc3\u70b9\u91cd\u53e0\u4e86\uff0cCenterNet\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e5f\u662f\u65e0\u80fd\u4e3a\u529b\u7684\uff0c\u4e5f\u5c31\u662f\u5c06\u8fd9\u4e24\u4e2a\u7269\u4f53\u7684\u5f53\u6210\u4e00\u4e2a\u7269\u4f53\u6765\u8bad\u7ec3(\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9)\u3002\u540c\u7406\uff0c\u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u540c\u7c7b\u7684\u7269\u4f53\u5728\u4e0b\u91c7\u6837\u540e\u7684\u4e2d\u5fc3\u70b9\u4e5f\u91cd\u53e0\u4e86\uff0c\u90a3\u4e48CenterNet\u4e5f\u662f\u53ea\u80fd\u68c0\u6d4b\u51fa\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u4e0d\u8fc7CenterNet\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u7684\u5904\u7406\u8981\u6bd4faster-rcnn\u5f3a\u4e00\u4e9b\u7684\uff0c\u5177\u4f53\u6307\u6807\u53ef\u4ee5\u67e5\u770b\u8bba\u6587\u76f8\u5173\u90e8\u5206\u3002 \u4f18\u70b9 :\u611f\u53d7\u91ce\u8f83\u5927\uff0c\u5bf9\u5c0f\u76ee\u6807\u68c0\u6d4b\u8f83\u53cb\u597d\u3002\u5bf9\u4e8e\u5927\u76ee\u6807\u800c\u8a00\uff0closs\u76f8\u5bf9\u8f83\u5927\uff0c\u4e0d\u592a\u5bb9\u6613\u8bad\u7ec3\uff0c\u6548\u679c\u4e0d\u592a\u597d\u3002 CentripetalNet(20/03:coco 48%) \u00b6 \u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2 \u6838\u5fc3\u601d\u60f3:\u63d0\u51fa\u4e00\u79cd\u4f7f\u7528\u5411\u5fc3\u504f\u79fb\u6765\u5bf9\u540c\u4e00\u76ee\u6807\u4e2d\u7684\u89d2\u70b9\u8fdb\u884c\u7cbe\u51c6\u914d\u5bf9,\u6539\u5584 Anchore Free \u5173\u952e\u70b9\u5339\u914d\u51fa\u9519\u7684\u95ee\u9898 \uff0c CentripetalNet \u4e0d\u4ec5\u4ee548.0\uff05\u7684AP\u80dc\u8fc7\u6240\u6709\u73b0\u6709\u7684anchor-free\u68c0\u6d4b\u5668\uff0c\u800c\u4e14\u4ee540.2\uff05\u7684MaskAP\u8fbe\u5230\u4e86\u4e0e\u6700\u65b0\u5b9e\u4f8b\u5206\u5272\u65b9\u6cd5\u76f8\u5f53\u7684\u6027\u80fd. \u5411\u5fc3\u504f\u79fb\u89d2\u5339\u914d\u65b9\u6cd5: R-C3D(17/03) \u00b6 \u8bba\u6587\u5730\u5740 R-C3D=C3D(\u57fa\u7840)+faster-rcnn(\u601d\u8def)\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684\u8f93\u5165\u89c6\u9891L\uff0c\u5148\u8fdb\u884cproposal\uff0c\u7136\u540e3D-pooling,\u6700\u540e\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u64cd\u4f5c \u5728\u5355\u4e2atitan x maxwell gpu\u4e0a\u6bcf\u79d2569\u5e27 \u53ef\u4ee5\u9488\u5bf9**\u4efb\u610f\u957f\u5ea6\u89c6\u9891**\u3001\u4efb\u610f\u957f\u5ea6\u884c\u4e3a\u8fdb\u884c**\u7aef\u5230\u7aef\u7684\u68c0\u6d4b** \u901f\u5ea6\u5f88\u5feb(\u662f\u76ee\u524d\u7f51\u7edc\u76845\u500d) \uff0c\u901a\u8fc7\u5171\u4eabProgposal generation \u548cClassification\u7f51\u7edc\u7684C3D\u53c2\u6570 \u4f5c\u8005\u6d4b\u8bd5\u4e863\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u96c6\uff0c\u6548\u679c\u90fd\u5f88\u597d\uff0c\u663e\u793a\u4e86\u901a\u7528\u6027\u3002 \u7279\u5f81\u63d0\u53d6\u7f51\u7edc \u9aa8\u5e72\u7f51\u7edc\u4f5c\u8005\u9009\u62e9\u4e86C3D\u7f51\u7edc\uff0c\u7ecf\u8fc7C3D\u7f51\u7edc\u76845\u5c42\u5377\u79ef\u540e\uff0c\u53ef\u4ee5\u5f97\u5230 512 x L/8 x H/16 x W/16 \u5927\u5c0f\u7684**\u7279\u5f81\u56fe**\u3002\u8fd9\u91cc\u4e0d\u540c\u4e8eC3D\u7f51\u7edc\u7684\u662f\uff0cR-C3D\u5141\u8bb8\u4efb\u610f\u957f\u5ea6\u7684\u89c6\u9891L\u4f5c\u4e3a\u8f93\u5165\u3002 \u65f6\u5e8f\u5019\u9009\u6846\u63d0\u53d6\u7f51\u7edc \u7c7b\u4f3c\u4e8eFaster R-CNN\u4e2d\u7684RPN\uff0c\u8fd9\u91cc\u662f\u63d0\u53d6\u4e00\u7cfb\u5217\u53ef\u80fd\u5b58\u5728\u884c\u4e3a\u7684\u5019\u9009\u65f6\u5e8f \u5019\u9009\u65f6\u5e8f\u751f\u6210 \uff1a\u8f93\u5165\u89c6\u9891\u7ecf\u8fc7\u4e0a\u8ff0C3D\u7f51\u7edc\u540e\u5f97\u5230\u4e86 512 x L/8 x H/16 x W/16 \u5927\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u4f5c\u8005\u5047\u8bbeanchor\u5747\u5300\u5206\u5e03\u5728L/8\u7684\u65f6\u95f4\u57df\u4e0a\uff0c \u4e5f\u5c31\u662f\u6709 L/8 \u4e2aanchors\uff0c\u6bcf\u4e2aanchor\u751f\u6210K\u4e2a\u4e0d\u540cscale\u7684\u5019\u9009\u65f6\u5e8f \u4e3a\u4e86\u83b7\u5f97\u6bcf\u4e2a\u65f6\u5e8f\u70b9\uff08anchor\uff09\u4e0a\u6bcf\u6bb5\u5019\u9009\u65f6\u5e8f\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u504f\u79fb\u548c\u65f6\u5e8f\u7684\u957f\u5ea6 \uff1a\u5f97\u5230\u7684 512xL/8xH/16xW/16 \u7684\u7279\u5f81\u56fe\u540e\uff0c\u4f5c\u8005\u5c06\u7a7a\u95f4\u4e0a H/16 x W/16 \u7684\u7279\u5f81\u56fe\u7ecf\u8fc7\u4e00\u4e2a 3x3x3 \u7684\u5377\u79ef\u6838\u548c\u4e00\u4e2a3D pooling\u5c42\u4e0b\u91c7\u6837\u5230 1x1 \u3002\u6700\u540e\u8f93\u51fa 512xL/8x1x1 . \u884c\u4e3a\u5206\u7c7b\u5b50\u7f51\u7edc \u5bf9\u4e8e\u751f\u6210\u7684\u4e00\u7cfb\u5217\u65f6\u5e8f\u5019\u9009\u6846\uff0c\u5148\u8fdb\u884cNMS(\u9608\u503c0.7) 3D ROI\u6c60\u5316 \uff1a\u5047\u8bbeC3D\u8f93\u51fa\u7684\u662f 512xL/8x7x7 \u5927\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u5047\u8bbe\u5176\u4e2d\u6709\u4e00\u4e2a proposal \u7684\u957f\u5ea6\uff08\u65f6\u5e8f\u957f\u5ea6\uff09\u4e3a lp \uff0c\u90a3\u4e48\u8fd9\u4e2aproposal\u7684\u5927\u5c0f\u4e3a 512xlpx7x7 \uff0c\u8fd9\u91cc\u501f\u9274SPPnet\u4e2d\u7684\u6c60\u5316\u5c42\uff0c\u5229\u7528\u4e00\u4e2a\u52a8\u6001\u5927\u5c0f\u7684\u6c60\u5316\u6838\uff0c ls x hs x ws \u3002\u6700\u7ec8\u5f97\u5230 512x1x4x4 \u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u5206\u7c7b\u548c\u56de\u5f52 \uff1a\u7ecf\u8fc7\u6c60\u5316\u540e\uff0c\u518d\u8f93\u51fa\u5230\u5168\u8fde\u63a5\u5c42\u3002\u6700\u540e\u63a5\u4e00\u4e2a\u8fb9\u6846\u56de\u5f52( start-end time )\u548c\u7c7b\u522b\u5206\u7c7b(Activity Scores)\u3002 loss GHM(18/11) \u00b6 \u8bba\u6587\u5730\u5740 \u5355\u9636\u6bb5\u6bd4\u4e24\u9636\u6bb5\u66f4\u4f18\u96c5\uff0c\u4f46\u662f\u5b58\u5728\u6b63\u8d1f\u6837\u672c\u95f4\u6570\u91cf\u4e0d\u5747\u8861\uff0c\u5bf9\u4e8e\u5355\u9636\u6bb5\u5206\u7c7b\u5668\u6765\u8bf4\uff0c\u5b58\u5728\u7740\u5927\u91cf\u7684\u8d1f\u6837\u672c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6b63\u786e\u5206\u7c7b\uff0c\u5c11\u91cf\u7684\u6b63\u6837\u672c\u901a\u5e38\u662f\u56f0\u96be\u6837\u672c\u3002\u56e0\u6b64\u6b63\u8d1f\u6837\u672c\u7684\u4e0d\u5747\u8861\u6027\u672c\u8d28\u662f\u7b80\u5355\u56f0\u96be\u6837\u672c\u7684\u4e0d\u5747\u8861\u6027\u3002 \u4f20\u7edf\u89e3\u51b3\u65b9\u5f0f: OHEM\uff1a\u76f4\u63a5\u653e\u5f03\u5927\u91cfexamples(\u5b83\u53ea\u9009\u62e9topN\u800c\u4e22\u5f03\u4e86\u592a\u591a\u6837\u672c)\uff0c\u8bad\u7ec3\u6548\u7387\u8f83\u4f4e\u3002 Focal loss\uff1a\u5b58\u5728\u4e24\u4e2a\u8d85\u53c2\u9700\u8981\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u968f\u8bad\u7ec3\u6570\u636e\u7684\u53d8\u5316\u52a8\u6001\u8c03\u6574\u3002\u540c\u65f6\uff0cFocal loss\u662f\u4e00\u79cd\u9759\u6001\u635f\u5931\uff0c\u5bf9\u6570\u636e\u96c6\u7684\u5206\u5e03\u4e0d\u654f\u611f\uff0c\u800c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6570\u636e\u96c6\u7684\u5206\u5e03\u662f\u4f1a\u53d1\u751f\u53d8\u5316\u7684\u3002 \u672c\u6587\u89e3\u51b3\u65b9\u5f0f: GHM:\u4ece\u68af\u5ea6\u7684\u89d2\u5ea6( \u68af\u5ea6\u5747\u8861\u673a\u5236 )\u89e3\u51b3\u6b63\u8d1f\u6837\u672c\u95f4\u6570\u91cf\u5dee\u5f02\u548ceasy\u3001hard examples\u4e4b\u95f4\u7684\u77db\u76fe\u3002 easy examples:\u6a21\u578b\u5f88\u96be\u4ece\u7b80\u5355\u6837\u672c(\u5f88\u5bb9\u6613\u88ab\u6b63\u786e\u5206\u7c7b)\u4e2d\u5f97\u5230\u66f4\u591a\u4fe1\u606f\uff0c\u4ece\u68af\u5ea6\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6837\u672c\u4ea7\u751f\u7684\u68af\u5ea6\u5e45\u503c\u76f8\u5bf9\u8f83\u5c0f\u3002 Hard examples:\u5bf9\u4e8e\u4e00\u4e2a\u5206\u9519\u7684\u6837\u672c\u6765\u8bf4\uff0c\u5b83\u4ea7\u751f\u7684\u68af\u5ea6\u4fe1\u606f\u5219\u4f1a\u66f4\u4e30\u5bcc\uff0c\u5b83\u66f4\u80fd\u6307\u5bfc\u6a21\u578b\u4f18\u5316\u7684\u65b9\u5411\u3002\u4f5c\u8005\u8ba4\u4e3a\uff0c\u6a21\u578b\u66f4\u5e94\u8be5\u5173\u6ce8\u88ab\u5206\u9519\u7684\u6837\u672c\u3002 gradient norm(\u68af\u5ea6\u6a21\u957f)\u7684\u5b9a\u4e49 p[0~1]:\u6a21\u578b\u9884\u6d4b\u51fa\u7684\u6982\u7387\u3002 P*\u4ee3\u8868\u5bf9\u4e8e\u7279\u5b9a\u7c7b\u522b\u7684ground truth \u6807\u7b7e\u53d6\u503c0\u62161 \u4ee4x\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u51fa \u5b9a\u4e49\u4e86g\u7b49\u5f0f\u5982\u4e0a\u6240\u793a\uff0cg\u4e0eLce\u5bf9x\u7684\u504f\u5bfc\u503c\u7684\u6b63\u5219\u76f8\u7b49\uff0cg\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\u7684\u5c5e\u6027\u4ee5\u53ca\u8be5\u6837\u672c\u5bf9\u6574\u4f53\u68af\u5ea6\u7684\u4f5c\u7528\uff0c\u672c\u6587\u5c06g\u79f0\u4e3a gradient norm (\u68af\u5ea6\u6a21\u957f:\u6837\u672c\u7684\u771f\u5b9e\u503c\u4e0e\u5f53\u524d\u9884\u6d4b\u503c\u7684\u8ddd\u79bb)\u3002 \u6587\u4e2d\u7684 very hard examples \u6bd4 medium \u7684\u6837\u672c\u6570\u91cf\u8fd8\u8981\u591a\uff0c\u5b9a\u4e49\u4e3a\u79bb\u7fa4\u70b9outliers\uff0c\u8fd9\u4e9boutliers\u5728\u6a21\u578b\u7684\u4e0d\u65ad\u62df\u5408\u8fc7\u7a0b\u4e2d\u4e00\u76f4\u4e3avery hard examples\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u68af\u5ea6\u6a21\u4e0e\u6574\u4f53\u7684\u68af\u5ea6\u6a21\u7684\u5206\u5e03\u5dee\u5f02\u592a\u5927\uff0c\u5e76\u4e14\u6a21\u578b\u5f88\u96be\u5904\u7406\uff0c\u5982\u679c\u8ba9\u6a21\u578b\u5f3a\u884c\u53bb\u5b66\u4e60\u8fd9\u4e9b\u79bb\u7fa4\u6837\u672c\uff0c\u53cd\u800c\u4f1a\u5bfc\u81f4\u6574\u4f53\u6027\u80fd\u4e0b\u964d\u3002 Gradient Density(\u68af\u5ea6\u5bc6\u5ea6:\u89e3\u51b3g\u5206\u5e03\u4e0d\u5747\u5300\u7684\u95ee\u9898) \u601d\u8def\u662f\u5bf9\u4e8e\u68af\u5ea6\u5206\u5e03\u5207bin\uff0c\u7edf\u8ba1\u6bcf\u4e00\u4e2abin\u5185\u7684\u6837\u672c\u6570\u91cf\uff0c\u5f97\u5230\u6bcf\u4e2abin\u7684\u5206\u5e03\uff0c\u8fdb\u884c\u5206\u5e03\u7684\u5747\u8861\u5316\u3002\u5177\u4f53\u5730\uff0c\u57fa\u4e8e\u8fd9\u4e2abin\u5185\u7684\u6837\u672c\u6570\u91cf\u548c\u8fd9\u4e2abin\u7684\u957f\u5ea6 GD(g):\u68af\u5ea6\u5bc6\u5ea6\uff0c\u8868\u793a\u67d0\u4e2a\u5355\u4f4d\u533a\u95f4\u5185\u6837\u672c\u7684\u6570\u91cf\u3002 \\delta_{\\epsilon}(x, y) \\delta_{\\epsilon}(x, y) :\u8868\u660e\u4e86\u6837\u672c 1\uff5eN \u4e2d\uff0c\u68af\u5ea6\u6a21\u957f\u5206\u5e03\u5728 \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \u8303\u56f4\u5185\u7684\u6837\u672c\u6570 l_{\\varepsilon}(g) l_{\\varepsilon}(g) :\u4ee3\u8868\u4e86 \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \u533a\u95f4\u7684\u957f\u5ea6 \u56e0\u6b64\u68af\u5ea6\u5bc6\u5ea6 gradient density \u7684\u76f4\u89c2\u7406\u89e3\u5c31\u662f\uff1a\u5355\u4f4d\u68af\u5ea6\u6a21\u957fg\u957f\u5ea6\u5185\u6240\u5206\u90e8\u7684\u6837\u672c\u4e2a\u6570\uff0c\u53cagradient norm\u7684\u5bc6\u5ea6\u3002 N:\u662f\u4e3a\u4e86\u4f7f\u5f97\u5f53\u5212\u5206\u7684\u533a\u95f4\u957f\u5ea6 \\varepsilon \\varepsilon \u5f88\u5927\u4e3a1\u7684\u65f6\u5019, \\beta_{i}=1 \\beta_{i}=1 \\beta_{i} \\beta_{i} \u662f\u6291\u5236\u53c2\u6570\uff0cGD\u5c0f\u8be5\u53c2\u6570\u5927\uff0cGD\u5927\u8be5\u53c2\u6570\u5c0f\uff0c\u4ece\u4e0a\u9762\u7684 gradient norm \u56fe\u4e2d\u53ef\u4ee5\u770b\u5230easy example\u548cvery hard example\u7684\u5206\u5e03\u90fd\u975e\u5e38\u7684\u5bc6\u96c6\uff0c\u5373GD\u7684\u503c\u5f88\u5927\uff0c\u56e0\u6b64\u901a\u8fc7\u53c2\u6570\u521a\u597d\u80fd\u591f\u8fbe\u5230\u6291\u5236\u8fd9\u4e24\u90e8\u5206\uff0c\u540c\u65f6\u63d0\u9ad8\u6709\u7528\u6837\u672c\u6743\u91cd\u7684\u76ee\u7684\u3002 GHM-C Loss:\u9488\u5bf9\u5206\u7c7b \u628a \\beta_{i} \\beta_{i} \u6291\u5236\u53c2\u6570\u5f15\u5165\u5230\u4ea4\u53c9\u71b5\u51fd\u6570\uff0c\u53ef\u4ee5\u5f97\u5230GHM-C loss\u7684\u5b9a\u4e49\u5982\u4e0b: \u6548\u679c\u5982\u4e0b GHM-C\u548cFocal Loss\u90fd\u5bf9easy example\u505a\u4e86\u5f88\u597d\u7684\u6291\u5236 \u800cGHM-C\u6bd4Focal Loss\u5728\u5bf9very hard examples\u4e0a\u6709\u66f4\u597d\u7684\u6291\u5236\u6548\u679c\u3002 \u539f\u59cb\u5b9a\u4e49\u7684gadient density\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f5c\u8005\u7ed9\u51fa\u4e86\u7b80\u5316\u7248\u672c: \u5c06g\u7684\u7a7a\u95f4\u5212\u4ee5\u95f4\u9694 \\varepsilon \\varepsilon \uff0c\u5206\u4e3a\u72ec\u7acb\u7684\u5355\u5143\u533a\u57df\uff0c\u56e0\u6b64\u6709 M=\\frac{1}{\\varepsilon} M=\\frac{1}{\\varepsilon} \u4e2a\u5355\u5143\u533a\u57df\uff0crj\u4ee3\u8868\u7d22\u5f15\u4e3aj\u7684\u533a\u57df r_{j}=[(j-1) \\epsilon, j \\epsilon) r_{j}=[(j-1) \\epsilon, j \\epsilon) ,\u4ee4Rj\u4ee3\u8868\u843d\u5165rj\u533a\u57df\u7684\u6837\u672c\u6570\u91cf\u3002\u5b9a\u4e49ind (g)=t (g)=t s.t. (t-1) \\epsilon<=g<t \\epsilon (t-1) \\epsilon<=g<t \\epsilon \u7528\u4e8e\u83b7\u5f97g\u6240\u5728\u5355\u5143\u533a\u57df\u7684\u7d22\u5f15\u3002 GHM-R Loss:\u9488\u5bf9\u76ee\u6807\u6846\u7684\u56de\u5f52 \u63d0\u5230\u76ee\u6807\u6846\u7684\u56de\u5f52\u635f\u5931,\u5e38\u7528:Smooth L1 loss \u5176\u4e2dd\u6307\u7684\u662f\u5b66\u4e60\u7684\u504f\u79fb\u91cf: d=\\left(t_{i}-t_{i}^{*}\\right) d=\\left(t_{i}-t_{i}^{*}\\right) \u5f53 |d| \\leq \\delta |d| \\leq \\delta \u65f6, d / \\delta d / \\delta \u53ef\u4ee5\u5b9a\u91cf\u7684\u8868\u793a\u6570\u636e\u7ed3\u679c\u548c\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1b \u5f53 |d| \\geq \\delta |d| \\geq \\delta \u65f6,\u635f\u5931\u7684\u68af\u5ea6\u5747\u4e3a1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u65e0\u6cd5\u6839\u636e\u68af\u5ea6\u6765\u4f30\u8ba1\u4e00\u4e9bexample\u8f93\u51fa\u8d21\u732e\u5ea6\u3002\u57fa\u4e8e\u6b64\u4f5c\u8005\u5bf9smooth L1\u505a\u4e86\u4fee\u6b63\uff0c\u5f97\u5230ASL1\uff1a \u901a\u8fc7\u4e0a\u56fe\u53ef\u4ee5\u53d1\u73b0\u6709\u76f8\u5f53\u6570\u91cf\u7684outliers\uff0c\u4ee5\u53caoutliers\u6240\u5bf9\u7528\u7684gradient norm\u503c\u5f88\u5927\uff0c\u56e0\u6b64\u4e0eGHM-C\u76f8\u4f3c\u7684\u65b9\u5f0f\uff0c\u5b9a\u4e49GHM-R\uff0c\u8fbe\u5230\u5bf9outlier\u7684loss\u8fbe\u5230\u6291\u5236\u7684\u76ee\u7684\u3002: \u6ce8\u610f:GHM-R\u4e2d\u5e76\u6ca1\u6709\u5bf9easy example\u505a\u6291\u5236\uff0c\u56e0\u4e3a\u4f5c\u8005\u8ba4\u4e3a\uff0c\u5728\u76ee\u6807\u6846\u7684\u56de\u5f52\u9636\u6bb5\uff0ceasy examples\u540c\u6837\u80fd\u591f\u5bf9\u63d0\u5347\u6846\u56de\u5f52\u7684\u51c6\u786e\u6027\u5e26\u6765\u5e2e\u52a9\u3002 \u6548\u679c\u5c55\u793a ATSS(19/12) \u00b6 \u8bba\u6587 | \u4ee3\u7801 \u8bba\u6587\u6307\u51fa one-stage anchor-based \u548c center-based anchor-free \u68c0\u6d4b\u7b97\u6cd5\u95f4\u7684\u5dee\u5f02\u4e3b\u8981\u6765\u81ea\u4e8e**\u6b63\u8d1f\u6837\u672c\u7684\u9009\u62e9**\uff0c\u63d0\u51fa\u4e00\u79cd\u80fd\u591f\u81ea\u52a8\u6839\u636e GT \u7684\u76f8\u5173\u7edf\u8ba1\u7279\u5f81**\u9009\u62e9\u5408\u9002\u7684anchor box\u4f5c\u4e3a\u6b63\u6837\u672c**\uff0c\u5728\u4e0d\u5e26\u6765\u989d\u5916\u8ba1\u7b97\u91cf\u548c\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5927\u5e45\u63d0\u5347\u6a21\u578b\u7684\u6027\u80fd\u7684\u65b9\u6cd5\u3002 anchor base and free \u6b63\u8d1f\u6837\u672c3\u70b9\u5dee\u5f02\u5206\u6790(RetinaNet vs FCOS) \u6570\u91cf\u5dee\u5f02 :RetinaNet\u5728\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u94fa\u8bbe\u591a\u4e2aanchor\uff0c\u800cFCOS\u5728\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u53ea\u94fa\u8bbe\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u8fd9\u662f\u6570\u91cf\u4e0a\u7684\u5dee\u5f02\u3002 \u6b63\u8d1f\u6837\u672c\u9009\u62e9\u4e0d\u540c :RetinaNet\u57fa\u4e8eanchor\u548cGT\u4e4b\u95f4\u7684 IoU \u548c\u8bbe\u5b9a\u7684\u9608\u503c\u6765\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\uff0c\u800cFCOS\u901a\u8fc7GT\u4e2d\u5fc3\u70b9\u548c\u94fa\u8bbe\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\u5c3a\u5bf8\u6765\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\u3002 \u84dd\u8272\u6846:GT\uff0c\u7ea2\u8272\u6846:RetinaNet\u7684anchor\uff0c\u7ea2\u8272\u70b9:FCOS\u94fa\u8bbe\u7684\u70b9\uff0c\u6570\u503c:0\u8d1f\u6837\u672c,1\u6b63\u6837\u672c\u3002 \u504f\u7f6e(offeset)\u9884\u6d4b\u4e0d\u540c:RetinaNet\u901a\u8fc7\u56de\u5f52\u77e9\u5f62\u6846\u76842\u4e2a\u89d2\u70b9\u504f\u7f6e\u8fdb\u884c\u9884\u6d4b\u6846\u4f4d\u7f6e\u548c\u5927\u5c0f\u7684\u9884\u6d4b\uff0c\u800cFCOS\u662f\u57fa\u4e8e\u4e2d\u5fc3\u70b9\u9884\u6d4b\u56db\u6761\u8fb9\u548c\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\u8fdb\u884c\u9884\u6d4b\u6846\u4f4d\u7f6e\u548c\u5927\u5c0f\u7684\u9884\u6d4b\u3002 \u84dd\u8272\u6846+\u84dd\u8272\u70b9:GT\uff0c\u7ea2\u8272\u6846:RetinaNet\u6b63\u6837\u672c\uff0c\u7ea2\u8272\u70b9:FCOS\u6b63\u6837\u672c\u3002 \u505a\u5b9e\u9a8c\uff0c\u6bd4\u8f833\u4e2a\u5dee\u5f02\u7684\u7ed3\u679c\u5f71\u54cd\u5927\u5c0f **\u5dee\u5f021\u6392\u9664:**\u5c06RetinaNet\u5728\u6bcf\u4e2a\u70b9\u94fa\u8bbe\u7684anchor\u6570\u91cf\u51cf\u5c11\u52301(\u548cFCOS\u4fdd\u6301\u4e00\u81f4),AP\u503c\u4ec5\u5dee 0.8 \u7531\u4e8eFCOS\u8bba\u6587\u4e2d\u7528\u4e86\u4e00\u4e9b\u8bad\u7ec3\u7684\u6280\u5de7(\u6bd4\u5982 Group Normalization \u3001 GIoU Loss \u7b49)\uff0c\u6240\u4ee5\u4e3a\u4e86\u516c\u5e73\u5bf9\u6bd42\u4e2a\u7b97\u6cd5\uff0c\u4f5c\u8005\u5728RetinaNet\u4e0a\u4e5f\u52a0\u4e0a\u4e86\u8fd9\u4e9b\u6280\u5de7\u3002 \u5dee\u5f022\u6392\u9664(\u6309\u884c\u770b): Intersection over Union \uff1a\u8868\u793aRetinaNet\u548cFCOS\u90fd\u91c7\u7528\u57fa\u4e8eIoU\u65b9\u5f0f\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\uff0c\u4e8c\u8005\u7684mAP\u57fa\u672c\u6ca1\u6709\u5dee\u522b\u3002 Spatial and Scale Constraint :\u8868\u793aRetinaNet\u548cFCOS\u90fd\u91c7\u7528\u57fa\u4e8e\u8ddd\u79bb\u548c\u5c3a\u5bf8\u65b9\u5f0f\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\uff0c\u4e8c\u8005\u7684mAP\u4e5f\u662f\u4e00\u6837\u3002 \u56de\u5f52\u65b9\u5f0f\u7684\u4e0d\u540c\u5e76\u4e0d\u662f\u9020\u6210FCOS\u548cRetinaNet\u6548\u679c\u5dee\u5f02\u7684\u539f\u56e0 \u786e\u5b9a\u5dee\u5f02\u4e09\u662f\u6839\u672c:(\u6309\u5217\u770b) Box\u8fd9\u4e00\u5217\u7684\u4e24\u4e2a\u6570\u503c\u8868\u793a\u5c06RetinaNet\u7684\u6b63\u8d1f\u6837\u672c\u786e\u5b9a\u65b9\u5f0f\u4eceIoU\u6362\u6210\u548cFCOS\u4e00\u6837\u7684\u57fa\u4e8e\u8ddd\u79bb\u548c\u5c3a\u5bf8\uff0c\u90a3\u4e48mAP\u5c31\u4ece37.0\u4e0a\u5347\u523037.8 Point\u8fd9\u4e00\u5217\u7684\u4e24\u4e2a\u6570\u503c\u8868\u793a\u5c06FCOS\u7684\u6b63\u8d1f\u6837\u672c\u786e\u5b9a\u65b9\u5f0f\u4ece\u57fa\u4e8e\u8ddd\u79bb\u548c\u5c3a\u5bf8\u6362\u6210\u548cRetinaNet\u4e00\u6837\u7684\u57fa\u4e8eIoU\uff0c\u90a3\u4e48mAP\u5c31\u4ece37.8\u964d\u4e3a36.9\u3002 \u5982\u4f55\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\u624d\u662f\u9020\u6210FCOS\u548cRetinaNet\u6548\u679c\u5dee\u5f02\u7684\u539f\u56e0 ATSS\u786e\u5b9a\u6b63\u8d1f\u6837\u672c \u5c0f\u5c0f\u7684\u7f3a\u70b9: ATSS \u7684 A \u8868\u793a adaptive \u8868\u793a\u81ea\u9002\u5e94\uff0c\u4f46\u662f\u4e0a\u56fe\u4e2d\u6709\u5c11\u91cf\u8d85\u53c2\u6570\uff0c\u4f8b\u5982:k \u611f\u89c9 IOU \u7684\u9009\u62e9\u6709\u4e00\u5b9a\u7684\u5148\u9a8c\u77e5\u8bc6\u3002","title":"\u76ee\u6807\u68c0\u6d4b\u8bba\u6587\u89e3\u8bfb"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#fpn","text":"FPN\u7684\u5e38\u89c1\u4f5c\u7528 FPN\u7684\u5e38\u89c1\u7c7b\u578b \u65e0\u878d\u5408 :\u8fd9\u4e2a\u6700\u5177\u6709\u4ee3\u8868\u6027\u7684\u5c31\u662f SSD \uff0c\u76f4\u63a5\u51fa\u6765\u591a\u4e2a\u4e0d\u540c\u5c3a\u5bf8\u7684\u7279\u5f81\u56fe\u8d1f\u8d23\u4e0d\u540c scale \u7684\u5927\u5c0f\u7269\u4f53\u68c0\u6d4b \u81ea\u4e0a\u800c\u4e0b\u878d\u5408 \uff1a\u5e38\u89c1\u7684\u6709 Faster/Mask RCNN\u3001YOLOV3\u3001RetinaNet\u3001Cascade RCNN \u7b49 Faster(\u5e26FPN\u7248\u672c)/Mask RCNN \uff0c P2->P6 \uff0c\u800c\u4f5c\u4e3a\u540e\u7eed\u7279\u5f81\u56fe\u8f93\u5165\u7684\u53ea\u6709 p2->p5 \uff0c\u56e0\u4e3a\u4f5c\u8005\u53ea\u662f\u7528 P6 \u5728 RPN \u4e2d\u83b7\u53d6\u66f4\u5927\u5c3a\u5bf8\u7684 anchor \u7684\uff0c\u800c\u4e14 C6 \u662f\u76f4\u63a5\u901a\u8fc7 C5 \u8fdb\u884c maxpool \u4ea7\u751f\u7684\u3002 RetinaNet YOLOV3 \u7b80\u5355\u53cc\u5411\u878d\u5408 \uff1a PANet \uff0c\u589e\u52a0\u4e86\u589e\u4e86\u4ece\u4e0b\u800c\u4e0a\u7684\u878d\u5408\u8def\u5f84\u3002 \u590d\u6742\u7684\u53cc\u5411\u878d\u5408 \uff1a ASFF\u3001NAS-FPN\u3001Bi-FPN ASFF NAS-FPN\u3001Bi-FPN \u90fd\u662f\u5728 FPN \u4e2d\u5bfb\u627e\u4e00\u4e2a\u6709\u6548\u7684block\uff0c\u7136\u540e\u91cd\u590d\u53e0\u52a0\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5f39\u6027\u7684\u63a7\u5236 FPN \u7684\u5927\u5c0f\u3002 \u65b0\u51fa\u7684FPN\u7684\u6539\u8fdb \u9012\u5f52FPN : DetectoRS \uff0c\u6548\u679c\u51fa\u5947\u7684\u597d COCO mAP 54.7 MLFPN : M2det CE-FPN \uff1a CE-FPN \u8de8\u5c3a\u5ea6\u878d\u5408\u7684\u7279\u5f81\u4e00\u822c\u5b58\u5728\u8bed\u4e49\u5dee\u5f02\uff0c \u7efc\u5408\u7684\u7279\u5f81\u53ef\u80fd\u4f1a\u4ea7\u751f\u6df7\u53e0\u6548\u5e94\uff0c\u6df7\u6dc6\u5b9a\u4f4d\u548c\u8bc6\u522b \u3002\u5728FPN\u4e2d\uff0c\u6bcf\u4e00\u4e2a\u5408\u5e76\u7684\u7279\u5f81\u6620\u5c04\u90fd\u8981\u8fdb\u884c 3\u00d73 \u7684\u5377\u79ef\uff0c\u751f\u6210\u6700\u7ec8\u7684\u7279\u5f81\u91d1\u5b57\u5854\u3002\u672c\u6587\u7684**SSF+SCE\u878d\u5408**\u4f1a\u4f7f\u5f97\u6df7\u53e0\u6548\u5e94\u66f4\u4e25\u91cd\uff0c\u6240\u4ee5\u4f5c\u8005\u53d7 CBAM \u542f\u53d1\u63d0\u51fa**\u901a\u9053\u6ce8\u610f\u5f15\u5bfc\u6a21\u5757(CAG) \uff0c\u5b83\u53ef\u4ee5\u5f15\u5bfc\u91d1\u5b57\u5854\u7684\u5404\u4e2a\u5c42\u6b21\u6765\u7f13\u89e3\u6df7\u53e0\u6548\u5e94\u3002**CAG\u53ea\u901a\u8fc7\u96c6\u6210\u6620\u5c04I\u63d0\u53d6Channel\u6743\u503c\uff0c\u7136\u540e\u5c06Channel\u6743\u503c\u4e58\u4ee5\u6bcf\u4e2a\u8f93\u51fa\u7279\u5f81\u3002","title":"FPN\u7684\u6f14\u53d8"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#yolov1","text":"\u5c06**\u8f93\u5165\u56fe\u50cf**\u5206\u6210 SxS \u4e2a\u65b9\u683c(\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u5c31\u662f\u4e00\u4e2a\u70b9)\uff0c\u6bcf\u4e2a\u65b9\u683c\u5355\u5143\u4f1a\u4ea7\u751f\u4e24\u4e2a\u8fb9\u754c\u6846\uff0c\u5982\u679c\u4e00\u4e2a\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u843d\u5728\u4e86\u67d0\u4e2a\u65b9\u683c\u533a\u57df\u5185\uff0c\u5219\u8be5\u65b9\u683c\u5c31\u8d1f\u8d23\u68c0\u6d4b\u8be5\u7269\u4f53(\u5c06\u8be5\u65b9\u683c\u7684\u4e24\u4e2a\u6846\u4e0e\u771f\u5b9e\u7269\u4f53\u6846\u8fdb\u884c\u5339\u914d\uff0cloU\u66f4\u5927\u7684\u6846\u8d1f\u8d23\u56de\u5f52\u8be5\u771f\u5b9e\u7269\u4f53\u6846) \u6bcf\u4e2a\u5355\u5143\u683c\u8f93\u51fa\u901a\u9053\u6570\u662f 30 ,\u5305\u542b 20 \u4e2a\u7c7b\u522b(\u4e24\u6846\u5171\u7528\u4e00\u4e2a\u7c7b\u522b\u9884\u6d4b:\u4e00\u65b9\u683c\u591a\u7c7b\u4e5f\u53ea\u9884\u6d4b\u4e00\u7c7b)+ 2 \u4e2a\u6846\u7684\u8f93\u51fa\uff0c\u6bcf\u4e2a\u8fb9\u754c\u6846\u8ba1\u7b97\u4e00\u4e2a\u6846\u7f6e\u4fe1\u5ea6 C (\u4e24\u90e8\u5206:\u662f\u5426\u6709\u7269\u4f53[0/1]*\u8fb9\u6846\u51c6\u786e\u5ea6)\u548c\u8fb9\u754c\u68464\u4e2a\u503c(\u4e2d\u5fc3\u70b9\u5750\u6807: x,y +\u5bbd\u9ad8: w,h \u2192\u8fb9\u754c\u6846\u5bbd\u5ea6 w \u548c\u9ad8\u5ea6 h \u7528\u56fe\u50cf\u5bbd\u5ea6\u548c\u9ad8\u5ea6\u5f52\u4e00\u5316\u3002 \u00d7\u548cy \u662f\u76f8\u5e94\u5355\u5143\u683c\u7684\u504f\u79fb\u91cf\u3002\u56e0\u6b64 x, y, w, h \u90fd\u5728 0\u548c1 \u4e4b\u95f4\u3002) YOLOv1\u5728\u6bcf\u4e00\u4e2a\u533a\u57df\u5185\u9884\u6d4b\u4e24\u4e2a\u8fb9\u6846\uff0c\u8fd9\u6837\u6574\u4e2a\u56fe\u4e0a\u2014\u5171\u9884\u6d4b 7\u00d77\u00d72=98 \u4e2a\u6846\uff0c\u8fd9\u4e9b\u8fb9\u6846\u5927\u5c0f\u4e0e\u4f4d\u7f6e\u5404\u4e0d\u76f8\u540c\uff0c\u57fa\u672c\u53ef\u4ee5\u8986\u76d6\u6574\u4e2a\u56fe\u4e0a\u53ef\u80fd\u51fa\u73b0\u7684\u7269\u4f53\u3002\u7531\u4e8e\u4e24\u6846\u5171\u7528\u4e00\u4e2a\u7c7b\u522b\u9884\u6d4b\uff0c\u5171\u8ba1 7x7=49 \u4e2a\u7c7b\u522b\uff0c\u5982\u679c\u4e00\u65b9\u683c\u4e2d\u6709\u591a\u7c7b\u4e5f\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7c7b\u522b\u3002 \u7f51\u7edc\u7ed3\u6784 \u7f6e\u4fe1\u5ea6\u5f97\u5206 \u8bad\u7ec3 \u6b63\u6837\u672c:\u5f53\u2014\u4e2a\u771f\u5b9e\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u843d\u5728\u4e86\u67d0\u4e2a\u533a\u57df\u5185\u65f6\uff0c\u8be5\u533a\u57df\u5c31\u8d1f\u8d23\u68c0\u6d4b\u8be5\u7269\u4f53\u3002\u5177\u4f53\u505a\u6cd5\u662f\u5c06\u4e0e\u8be5\u771f\u5b9e\u7269\u4f53\u6709\u6700\u5927loU\u7684\u8fb9\u6846\u8bbe\u4e3a\u6b63\u6837\u672c\uff0c\u8fd9\u4e2a\u533a\u57df\u7684\u7c7b\u522b\u771f\u503c\u4e3a\u8be5\u771f\u5b9e\u7269\u4f53\u7684\u7c7b\u522b\uff0c\u8be5\u8fb9\u6846\u7684\u7f6e\u4fe1\u5ea6\u771f\u503c\u4e3a1\u3002 \u8d1f\u6837\u672c:\u9664\u4e86\u4e0a\u8ff0\u88ab\u8d4b\u4e88\u6b63\u6837\u672c\u7684\u8fb9\u6846\uff0c\u5176\u4f59\u8fb9\u6846\u90fd\u4e3a\u8d1f\u6837\u672c\u3002\u8d1f\u6837\u672c\u6ca1\u6709\u7c7b\u522b\u635f\u5931\u4e0e\u8fb9\u6846\u4f4d\u7f6e\u635f\u5931,\u53ea\u6709\u7f6e\u4fe1\u5ea6\u635f\u5931\uff0c\u5176\u771f\u503c\u4e3a0\u3002 YOLO\u4f7f\u7528\u9884\u6d4b\u503c\u548cGT\u4e4b\u95f4\u7684\u8bef\u5dee\u5e73\u65b9\u7684\u6c42\u548c(MSE)\u6765\u8ba1\u7b97\u635f\u5931\u3002\u635f\u5931\u51fd\u6570\u5305\u62ec: localization loss ->\u5b9a\u4f4d\u635f\u5931(\u9884\u6d4b\u8fb9\u754c\u6846\u4e0eGT\u4e4b\u95f4\u7684\u8bef\u5dee) confidence loss ->\u7f6e\u4fe1\u5ea6\u635f\u5931\uff08\u6846\u7684\u76ee\u6807\u6027, objectness of thebox) \u5927\u591a\u6570\u6846\u4e0d\u5305\u542b\u4efb\u4f55\u76ee\u6807\u3002\u8fd9\u5bfc\u81f4\u6837\u672c\u7c7b\u522b\u4e0d\u5e73\u8861\u95ee\u9898\uff0c\u5373\u8bad\u7ec3\u6a21\u578b\u65f6\u66f4\u9891\u7e41\u5730\u68c0\u6d4b\u5230\u80cc\u666f\u800c\u4e0d\u662f\u68c0\u6d4b\u76ee\u6807\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5c06\u8fd9\u4e2a\u635f\u5931\u7528\u56e0\u5b50\u5165noobj(\u9ed8\u8ba4\u503c:0.5)\u964d\u4f4e\u3002 classification loss ->\u5206\u7c7b\u635f\u5931","title":"YOLOV1"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#yolov2","text":"YOLO v2:\u4f7f\u7528\u4e00\u7cfb\u5217\u7684\u65b9\u6cd5\u5bf9YOLOv1\u8fdb\u884c\u4e86\u6539\u8fdb\uff0c\u5728\u4fdd\u6301\u539f\u6709\u901f\u5ea6\u7684\u540c\u65f6\u63d0\u5347\u51c6\u786e\u3002 Better \u4f7f\u7528\u6279\u5f52\u4e00\u5316( Batch Normalization )\u63d0\u9ad8\u51c6\u786e\u5ea6\u3002 \u9ad8\u5206\u8fa8\u7387\u5206\u7c7b\u5668( High-resolution classifier )\uff1a YoLOv2 \u4ee5 224 \u00d7 224 \u56fe\u7247\u5f00\u59cb\u7528\u4e8e\u5206\u7c7b\u5668\u8bad\u7ec3\uff0c\u4f46\u662f\u7136\u540e\u4f7f\u7528 10\u4e2aepoch \u518d\u6b21\u7528 448 x 448 \u56fe\u7247\u91cd\u65b0\u8c03\u6574\u5206\u7c7b\u5668\u3002\u8ba9\u7f51\u7edc\u53ef\u4ee5\u8c03\u6574\u6ee4\u6ce2\u5668\u6765\u9002\u5e94\u9ad8\u5206\u8fa8\u7387(\u56e0\u4e3aresize\u5230224\u5bb9\u6613\u4e22\u5931\u5c0f\u76ee\u6807\u4fe1\u606f)\uff0c\u8fd9\u4f7f\u5f97\u68c0\u6d4b\u5668\u8bad\u7ec3\u66f4\u5bb9\u6613\u3002\u4f7f\u7528\u9ad8\u5206\u8fa8\u7387\u7684\u5206\u7c7b\u7f51\u7edc\u63d0\u5347\u4e86\u5c06\u8fd14%\u7684mAP\u3002 \u7528\u951a\u5b9a\u6846\u7684\u5377\u79ef( Convolutional with Anchor Boxes )\uff1a yolov1 \u4f7f\u7528 1470x1-->reshape-->7x7x30 \uff0c\u8fd9\u6837\u4e22\u5931\u8f83\u591a\u7684\u7a7a\u95f4\u4fe1\u606f\u5bfc\u81f4\u5b9a\u4e3a\u4e0d\u51c6; yolov2 \u79fb\u9664\u4e86\u5168\u8fde\u63a5\u5c42\uff0c\u91c7\u7528\u5377\u79ef\u6765\u751f\u6210 anchor \u6846\uff0c\u4fdd\u7559\u4e86\u7a7a\u95f4\u4fe1\u606f\u3002\u5c0f\u6280\u5de7:\u8f93\u5165\u5206\u8fa8\u7387\u6539\u4e3a 416x416 \uff0c\u8fd9\u6837\u540e\u9762\u4ea7\u751f\u7684\u5377\u79ef\u7279\u5f81\u56fe\u5bbd\u9ad8\u90fd\u4e3a\u5947\u6570\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u4e2d\u5fc3\u70b9\u6765\u9884\u6d4b\u76ee\u6807\u6846(\u5076\u6570\u7684\u8bdd\u9700\u8981\u4f7f\u7528 4\u4e2a \u65b9\u683c\u6765\u9884\u6d4b\uff0c\u589e\u52a0\u8ba1\u7b97\u91cf) \u7ef4\u5ea6\u805a\u7c7b( Dimension Clusters )\uff1a K-means \u805a\u7c7b\uff0c\u8ddd\u79bb\u5ea6\u91cf\u4f7f\u7528 1-IOU \u800c\u4e0d\u662f\u6b27\u5f0f\u8ddd\u79bb(\u6b27\u5f0f\u8ddd\u79bb\u5927\u6846\u6bd4\u5c0f\u6846\u4ea7\u751f\u66f4\u591a\u8bef\u5dee\uff0c IOU \u4e0e\u6846\u7684\u5927\u5c0f\u65e0\u5173\uff0c yolov2 k=5 ) \u76f4\u63a5\u4f4d\u7f6e\u9884\u6d4b( Direct Location Prediction )\u3002\u9884\u6d4b\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u76f8\u5bf9\u4e8e\u5bf9\u5e94cell\u5de6\u4e0a\u89d2\u4f4d\u7f6e\u7684\u76f8\u5bf9\u504f\u79fb\u503c\u3002\u9884\u6d4b\u516c\u5f0f\u5982\u4e0b: \u66f4\u7cbe\u7ec6\u7684\u7279\u5f81( Fine-Grained Features ): reog\u5c42 \u591a\u5c3a\u5ea6\u8bad\u7ec3( Multi-Scale Training )\uff0c\u56e0\u4e3a\u662f\u5168\u5377\u79ef\u7f51\u7edc\uff0c\u4e0d\u5c40\u9650\u4e8e\u8f93\u5165\u5927\u5c0f:\u5177\u4f53\u6765\u8bf4\u662f\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\u6bcf\u95f4\u9694\u4e00\u5b9a\u7684\u8fed\u4ee3\u6b21\u6570\u4e4b\u540e\u6539\u53d8\u6a21\u578b\u7684\u8f93\u5165\u56fe\u7247\u5927\u5c0f\uff0cyolov2\u662f\u4e0b\u91c7\u6837 32 \u500d\uff0c\u8f93\u5165\u56fe\u7247\u4e00\u822c\u9009\u62e9\u4e00\u7cfb\u5217 32 \u500d\u6570\u7684\u503c:{ 320,352,...,608 }\uff0c\u7279\u5f81\u56fe\u5bf9\u5e94{ 10x10,11x11,...,19x19 }\u3002 \u6b63\u8d1f\u6837\u672c\u548c\u635f\u5931\u51fd\u6570 \u6b63\u8d1f\u6837\u672c \u6b63\u6837\u672c:\u9996\u5148\u8ba1\u7b97\u76ee\u6807\u4e2d\u5fc3\u70b9\u843d\u5728\u54ea\u4e2a grid \u4e0a\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2agrid\u7684 k \u4e2a\u5148\u9a8c\u6846\uff08anchor\uff09\u548c\u76ee\u6807\u771f\u5b9e\u4f4d\u7f6e\u7684IOU\u503c\uff08\u76f4\u63a5\u8ba1\u7b97\uff0c\u4e0d\u8003\u8651\u4e8c\u8005\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff09\uff0c \u53d6 IOU \u503c\u5927\u4e8e\u9608\u503c\u7684\u4f5c\u4e3a\u6b63\u6837\u672c \u3002 loss \u8ba1\u7b97 box loss (\u5305\u62ec\u4e2d\u5fc3\u70b9+\u5bbd\u9ad8)+ confidence loss + \u7c7b\u522b loss \u3002 \u8d1f\u6837\u672c\uff1a\u8ba1\u7b97\u5404\u4e2a\u5148\u9a8c\u6846\u548c\u6240\u6709\u7684\u76ee\u6807 ground truth \u4e4b\u95f4\u7684 IOU \uff0c\u5982\u679c\u67d0\u5148\u9a8c\u6846\u548c\u56fe\u50cf\u4e2d\u6240\u6709\u7269\u4f53\u6700\u5927\u7684IOU\u90fd\u5c0f\u4e8e\u9608\u503c\uff08\u4e00\u822c0.5\uff09\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u8be5\u5148\u9a8c\u6846\u4e0d\u542b\u76ee\u6807\uff0c\u8bb0\u4f5c\u8d1f\u6837\u672c\uff0c\u5176\u7f6e\u4fe1\u5ea6\u5e94\u5f53\u4e3a0 loss\u53ea\u8ba1\u7b97confidence loss \u3002 \u5ffd\u7565\u6837\u672c\uff1a\u548c gt box \u7684 iou \u5927\u4e8e\u4e00\u5b9a\u9608\u503c\uff0c\u4f46\u53c8\u4e0d\u8d1f\u8d23\u8be5 gt box \u7684 anchor \uff0c\u4e00\u822c\u6307\u4e2d\u5fc3\u70b9 grid cell \u9644\u8fd1\u7684\u5176\u4ed6 grid cell \u91cc\u7684 anchor \u3002\u4e0d\u8ba1\u7b97\u4efb\u4f55 loss \u3002 \u635f\u5931\u51fd\u6570 Faster Darknet-19\u7f51\u7edc\u6a21\u578b \u4f7f\u7528\u8fde\u7eed\u7684 3x3 \u5377\u79ef\u4ee3\u66ff 7x7 \u5377\u79ef\uff0c\u51cf\u5c11\u8ba1\u7b97\u91cf\uff1b \u53bb\u6389\u5168\u8fde\u63a5\u5c42\u548cDropOut\u5c42\uff0c\u91c7\u7528\u5168\u5377\u79ef\uff0c\u6700\u540e\u7528 global avg pooling+Softmax \u505a\u9884\u6d4b\uff0c\u5e76\u4f7f\u7528 1x1 \u5377\u79ef\u6765\u538b\u7f29","title":"YOLOV2"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#yolov3","text":"\u7c7b\u522b\u9884\u6d4b \u4e00\u5f20\u56fe\u5373\u662f person \u7c7b\u53c8\u662f woman \u7c7b\uff0c softmax \u8f93\u51fa\u591a\u4e2a\u7c7b\u522b\u9884\u6d4b\u4f1a\u76f8\u4e92\u6291\u5236(\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7c7b\u522b)\uff0c YOLOv3 \u7528\u591a\u4e2a\u72ec\u7acb\u7684\u903b\u8f91\u5206\u7c7b\u5668\uff08 Logistic :\u4e8c\u5143\u4ea4\u53c9\u5ae1\u635f\u5931\uff09\u66ff\u6362 softmax \u51fd\u6570\uff0c\u56e0\u4e3a logistic \u5206\u7c7b\u5668\u76f8\u4e92\u72ec\u7acb\uff0c\u53ef\u4ee5\u5b9e\u73b0\u591a\u7c7b\u522b\u7684\u9884\u6d4b\u3002\u8fd9\u4e2a loss \u53ef\u4ee5\u5b9e\u73b0\u7c7b\u522b\u95f4\u7684\u89e3\u8026\uff0c\u53ef\u4ee5\u5b9e\u73b0\u7269\u4f53\u7684\u591a\u6807\u7b7e\u5206\u7c7b\u3002 \u8bad\u7ec3\u6837\u672c\u9009\u53d6 \u6b63\u6837\u672c:\u9996\u5148\u8ba1\u7b97\u76ee\u6807\u4e2d\u5fc3\u70b9\u843d\u5728\u54ea\u4e2a grid \u4e0a\uff0c\u7136\u540e\u8ba1\u7b97\u8fd9\u4e2agrid\u7684 k \u4e2a\u5148\u9a8c\u6846\uff08anchor\uff09\u548c\u76ee\u6807\u771f\u5b9e\u4f4d\u7f6e\u7684IOU\u503c\uff08\u76f4\u63a5\u8ba1\u7b97\uff0c\u4e0d\u8003\u8651\u4e8c\u8005\u7684\u4e2d\u5fc3\u4f4d\u7f6e\uff09\uff0c \u53d6IOU\u503c\u6700\u5927\u7684\u5148\u9a8c\u6846\u548c\u76ee\u6807\u5339\u914d \u3002\u4e8e\u662f\uff0c\u627e\u5230\u7684 \u8be5 grid \u4e2d\u7684 \u8be5anchor \u8d1f\u8d23\u9884\u6d4b\u8fd9\u4e2a\u76ee\u6807\uff0c\u5176\u4f59\u7684\u7f51\u683c\u3001anchor\u90fd\u4e0d\u8d1f\u8d23\u3002 loss \u8ba1\u7b97 box loss (\u5305\u62ec\u4e2d\u5fc3\u70b9+\u5bbd\u9ad8)+ confidence loss + \u7c7b\u522b loss \u3002 \u8d1f\u6837\u672c\uff1a\u8ba1\u7b97\u5404\u4e2a\u5148\u9a8c\u6846\u548c\u6240\u6709\u7684\u76ee\u6807 ground truth \u4e4b\u95f4\u7684 IOU \uff0c\u5982\u679c\u67d0\u5148\u9a8c\u6846\u548c\u56fe\u50cf\u4e2d\u6240\u6709\u7269\u4f53\u6700\u5927\u7684IOU\u90fd\u5c0f\u4e8e\u9608\u503c\uff08\u4e00\u822c0.5\uff09\uff0c\u90a3\u4e48\u5c31\u8ba4\u4e3a\u8be5\u5148\u9a8c\u6846\u4e0d\u542b\u76ee\u6807\uff0c\u8bb0\u4f5c\u8d1f\u6837\u672c\uff0c\u5176\u7f6e\u4fe1\u5ea6\u5e94\u5f53\u4e3a0 loss\u53ea\u8ba1\u7b97confidence loss \u3002 \u5ffd\u7565\u6837\u672c\uff1a\u548c gt box \u7684 iou \u5927\u4e8e\u4e00\u5b9a\u9608\u503c\uff0c\u4f46\u53c8\u4e0d\u8d1f\u8d23\u8be5 gt box \u7684 anchor \uff0c\u4e00\u822c\u6307\u4e2d\u5fc3\u70b9 grid cell \u9644\u8fd1\u7684\u5176\u4ed6 grid cell \u91cc\u7684 anchor \u3002\u4e0d\u8ba1\u7b97\u4efb\u4f55 loss \u3002 yolov3\u7f51\u7edc\u7ed3\u6784( Darknet-53 ): \u6b8b\u5dee(\u7f13\u89e3\u68af\u5ea6\u6d88\u5931)+FPN+\u591a\u5c42\u7279\u5f81\u878d\u5408(\u6709\u5229\u4e8e\u5c0f\u7269\u4f53\u68c0\u6d4b) \u65e0\u6c60\u5316\u5c42:\u4e4b\u524d\u7684 YOLO \u7f51\u7edc\u6709 5 \u4e2a\u6700\u5927\u6c60\u5316\u5c42\uff0c\u7528\u6765\u7f29\u5c0f\u7279\u5f81\u56fe\u7684\u5c3a\u5bf8\uff0c\u4e0b\u91c7\u6837\u7387\u4e3a 32 \uff0c\u800c DarkNet-53 \u5e76\u6ca1\u6709\u91c7\u7528\u6c60\u5316\u7684\u505a\u6cd5\uff0c\u800c\u662f\u901a\u8fc7\u6b65\u957f\u4e3a 2 \u7684\u5377\u79ef\u6838\u6765\u8fbe\u5230\u7f29\u5c0f\u5c3a\u5bf8\u7684\u6548\u679c\uff0c\u4e0b\u91c7\u6837\u6b21\u6570\u540c\u6837\u662f 5 \u6b21\uff0c\u603b\u4f53\u4e0b\u91c7\u6837\u7387\u4e3a 32 \u3002 \u8f93\u5165 416x416 \u2192\u8f93\u51fa\u4e09\u4e2a\u7279\u5f81\u56fesize\uff1a 13x13x255 \uff0c 26x26x255 \uff0c 52x52x255 \u8f93\u5165 608x608 \u2192\u8f93\u51fa\u4e09\u4e2a\u7279\u5f81\u56fesize\uff1a 19x19x255 \uff0c 38x38x255 \uff0c 76x76x255 255 = 3*(5+80) =\u6bcf\u4e2a\u5355\u5143\u683c 3 \u4e2a box*([x, y, w, h, confidence],80\u7c7b) concat \u64cd\u4f5c\u662f\u4e0a\u9762\u7279\u5f81\u56fe\u548c\u672c\u5206\u652f\u7279\u5f81\u56fe\u901a\u9053\u7ed3\u5408\u540e\u8f93\u51fa\uff0c\u4e0d\u50cf ssd \u76f4\u63a5\u62ff\u6765\u7528\uff0c\u7279\u5f81\u56fe\u878d\u5408\uff0c\u6548\u679c\u66f4\u597d \u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408+FPN \u591a\u5c3a\u5ea6\u7279\u5f81\u8fdb\u884c\u5bf9\u8c61\u68c0\u6d4b \uff08\u5047\u8bbe\u8f93\u5165 416*416 \uff09 \u4e0b\u91c7\u6837 32 \u500d, 13*13 \u7684\u7279\u5f81\u56fe:\u7531\u4e8e\u4e0b\u91c7\u6837\u500d\u6570\u9ad8\uff0c\u8fd9\u91cc\u7279\u5f81\u56fe\u7684\u611f\u53d7\u91ce\u6bd4\u8f83\u5927\uff0c\u56e0\u6b64**\u9002\u5408\u68c0\u6d4b\u56fe\u50cf\u4e2d\u5c3a\u5bf8\u6bd4\u8f83\u5927\u7684\u5bf9\u8c61**\u3002 \u4e0b\u91c7\u6837 16 \u500d, 26*26 \u7684\u7279\u5f81\u56fe: \u5b83\u5177\u6709\u4e2d\u7b49\u5c3a\u5ea6\u7684\u611f\u53d7\u91ce\uff0c\u9002\u5408\u68c0\u6d4b\u4e2d\u7b49\u5c3a\u5ea6\u7684\u5bf9\u8c61\u3002 \u4e0b\u91c7\u6837 8 \u500d, 52*52 \u7684\u7279\u5f81\u56fe: \u5b83\u7684\u611f\u53d7\u91ce\u6700\u5c0f\uff0c\u9002\u5408\u68c0\u6d4b\u5c0f\u5c3a\u5bf8\u7684\u5bf9\u8c61\u3002 \u951a\u70b9\u805a\u7c7b\u6210\u4e86 9 \u7c7b\uff0c\u8fd9\u6837\u5c31\u67099\u79cd\u5c3a\u5ea6\u7684anchor box \u56e0\u4e3a\u67093\u4e2a\u7279\u5f81\u56fe\uff0c\u4e3a\u6bcf\u4e2a\u7279\u5f81\u56fe\u8bbe\u7f6e3\u79cdanchor box,\u8fd9\u6837\u805a\u7c7b\u7684\u65f6\u5019\u805a\u7c7b\u6210\u4e5d\u7c7b\u5c31\u53ef\u4ee5\u4e86\u3002 \u5728\u6700\u5c0f\u7684 13*13 \u7279\u5f81\u56fe\u4e0a\uff08\u6709\u6700\u5927\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528**\u8f83\u5927\u7684\u5148\u9a8c\u6846**(116x90)\uff0c(156x198)\uff0c(373x326)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5927\u7684\u5bf9\u8c61\u3002 \u4e2d\u7b49\u7684 26*26 \u7279\u5f81\u56fe\u4e0a\uff08\u4e2d\u7b49\u611f\u53d7\u91ce\uff09\u5e94\u7528**\u4e2d\u7b49\u7684\u5148\u9a8c\u6846**(30x61)\uff0c(62x45)\uff0c(59x119)\uff0c\u9002\u5408\u68c0\u6d4b\u4e2d\u7b49\u5927\u5c0f\u7684\u5bf9\u8c61\u3002 \u8f83\u5927\u7684 52*52 \u7279\u5f81\u56fe\u4e0a\uff08\u8f83\u5c0f\u7684\u611f\u53d7\u91ce\uff09\u5e94\u7528**\u8f83\u5c0f\u7684\u5148\u9a8c\u6846**(10x13)\uff0c(16x30)\uff0c(33x23)\uff0c\u9002\u5408\u68c0\u6d4b\u8f83\u5c0f\u7684\u5bf9\u8c61\u3002 YOLO v3 \u4f7f\u7528\u7684\u65b9\u6cd5\u6709\u522b\u4e8e SSD \uff0c\u867d\u7136\u90fd\u5229\u7528\u4e86\u591a\u4e2a\u7279\u5f81\u56fe\u7684\u4fe1\u606f\uff0c\u4f46SSD\u7684\u7279\u5f81\u662f\u4ece\u6d45\u5230\u6df1\u5730**\u5206\u522b**\u9884\u6d4b\uff0c\u6ca1\u6709\u6df1\u6d45\u7684\u878d\u5408\uff0c\u800cYOLO v3\u7684\u57fa\u7840\u7f51\u7edc\u66f4\u50cf\u662fSSD\u4e0eFPN\u7684\u7ed3\u5408\u3002 yolov3\u7ed3\u6784\u89e3\u6790 Neck\u90e8\u5206\u7acb\u4f53\u5316:FPN\u7ed3\u6784 \u635f\u5931\u51fd\u6570 YOLO\u6bcf\u4e2a\u7f51\u683c\u5355\u5143\u9884\u6d4b\u591a\u4e2a\u8fb9\u754c\u6846\u3002\u4e3a\u4e86\u8ba1\u7b97 true positive \u7684\u635f\u5931\uff0c\u53ea\u5e0c\u671b\u5176\u4e2d\u2014\u4e2a\u6846\u8d1f\u8d23\u8be5\u76ee\u6807\u3002\u4e3a\u6b64\uff0c\u9009\u62e9\u4e0eGT\u5177\u6709\u6700\u9ad8loU\u7684\u90a3\u4e2a\u6846\u3002YOLO\u4f7f\u7528\u9884\u6d4b\u503c\u548cGT\u4e4b\u95f4\u7684\u8bef\u5dee\u5e73\u65b9\u7684\u6c42\u548c\u6765\u8ba1\u7b97\u635f\u5931\u3002\u635f\u5931\u51fd\u6570\u5305\u62ec: localization loss :\u5b9a\u4f4d\u635f\u5931(\u9884\u6d4b\u8fb9\u754c\u6846\u4e0eGT\u4e4b\u95f4\u7684\u8bef\u5dee) confidence loss :\u7f6e\u4fe1\u5ea6\u635f\u5931(\u6846\u7684\u76ee\u6807\u6027; objectness of the box) classification loss :\u5206\u7c7b\u635f\u5931","title":"YOLOV3"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#poly-yolo","text":"\u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2 YoLoV3\u7684\u4e24\u4e2a\u7f3a\u70b9 \u5927\u91cf\u6807\u7b7e\u91cd\u5199 :yolo\u7cfb\u5217\u662f\u628a\u56fe\u7247\u5207\u6210 cell \u7f51\u683c\uff0c\u6bcf\u4e2a\u7269\u4f53\u7684\u4e2d\u5fc3\u70b9\u843d\u5230\u8be5\u7f51\u683c\u4e0a\uff0c\u8be5\u7f51\u683c\u5c31\u8d1f\u8d23\u68c0\u6d4b\u8be5\u7269\u4f53\u3002 416x416-->13x13 \u7279\u5f81\u56fe\u4e00\u4e2a\u70b9\u7684\u76f8\u5bf9\u4e8e\u539f\u56fe\u7684\u611f\u53d7\u91ce\u5c31\u662f 32 ,\u5bf9\u4e8e\u7a20\u5bc6\u7269\u4f53\uff0c\u540c\u4e00\u4e2aceil\u7f51\u683c\u9884\u6d4b\u591a\u4e2a\u7269\u4f53\u6982\u7387\u5f88\u5927\uff0c\u4f46\u662f yolov3 \u4ea7\u751f anchor \u7684\u65b9\u5f0f\uff0c\u6bcf\u4e2a\u7279\u5f81\u56fe\u7684\u65b9\u683c\u4ea7\u751f3\u4e2a\u5148\u9a8c\u6846\uff0c\u8fd9\u6837\u7684\u8bdd**\u76f8\u540c\u7684\u4e24\u4e2a\u76ee\u6807\u4e2d\u5fc3\u4f4d\u4e8e\u540c\u4e00\u4e2a cell ,\u5e76\u4e14\u5206\u7ed9\u540c\u4e00\u4e2a anchor \u8fd9\u6837\u7684\u8bdd\u524d\u4e00\u4e2a\u76ee\u6807\u4f1a\u88ab\u540e\u9762\u7684\u76ee\u6807\u91cd\u5199**( \u5f88\u5e38\u89c1\uff0c\u56e0\u4e3a\u5927\u591a\u6570\u68c0\u6d4b\u7684\u7269\u4f53size\u90fd\u5904\u4e8e\u76f8\u540c\u5c3a\u5bf8:\u5c0f\u6c7d\u8f66\u3001\u732a\u53ea )\uff0c\u8fd9\u6837\u7f51\u7edc\u8bad\u7ec3\u4f1a\u5ffd\u7565\u4e00\u4e9b\u76ee\u6807\uff0c\u5bfc\u81f4\u6b63\u6837\u672c\u6570\u91cf\u975e\u5e38\u5c11\uff0c\u5c24\u5176\u662f\u5728\u5c0f\u7279\u5f81\u56fe\u4e2d\u66f4\u5e38\u89c1\uff08\u7ed3\u679c:\u6f0f\u68c0\u7387\u589e\u9ad8\uff09 \u65e0\u6548\u7684anchor\u5206\u914d \uff1ayolov3\u4e2d\u662f\u4f7f\u75283\u4e2a\u7279\u5f81\u56fe\u6765\u5206\u522b\u4ea7\u751fanchor\u6846\u9884\u6d4b\u7684\uff0c\u5206\u914d\u539f\u5219\u662f**\u5c0f\u5206\u8fa8\u7387\u7279\u5f81\u56fe\u5206\u914d\u8f83\u5927\u5148\u9a8c\u6846\u68c0\u6d4b\u5927\u7269\u4f53\uff0c\u5927\u5206\u8fa8\u7387\u7279\u5f81\u56fe\u5206\u914d\u5c0f\u5148\u9a8c\u6846\u68c0\u6d4b\u5c0f\u7269\u4f53\uff0canchor\u901a\u8fc7kmeans\u805a\u7c7b\u4ea7\u751f**\uff0c\u5bf9\u4e8e\u76ee\u6807\u7269\u4f53\u4e2d\u6709\u5927\u4e2d\u5c0f\u7269\u4f53\uff0c\u8fd9\u6837\u5206\u914d\u6ca1\u6709\u95ee\u9898\uff0c\u5f88\u5408\u7406\uff0c\u4f46\u5728\u901a\u5e38\u7684\u8bad\u7ec3\u4e2d\u7269\u4f53\u4e00\u822c\u5904\u4e8e\u540c\u4e00\u4e2asize\uff0c\u6bd4\u5982\u68c0\u6d4b\u5927\u7269\u4f53\uff0c\u90a3\u4e48\u5927\u4e2d\u4e24\u4e2a\u7279\u5f81\u56fe\u7684anchor\u5229\u7528\u7387\u5c31\u6781\u4f4e\u4e86\u3002 \u6539\u8fdb \u6807\u7b7e\u91cd\u5199\u95ee\u9898 \u589e\u5927\u8f93\u51fa\u7279\u5f81\u56fe\u5927\u5c0f(\u4f5c\u8005\u601d\u8def) \u589e\u5927\u56fe\u50cf\u5206\u8fa8\u7387(\u901f\u5ea6\u4f1a\u5f88\u6162\uff0c\u629b\u5f03) \u65e0\u6548\u7684anchor\u5206\u914d\u95ee\u9898 kmeans\u805a\u7c7b\u7684\u6539\u8fdb\uff0c\u68c0\u6d4b\u5355\u7c7b(\u732a\u53ea\u7c7b)\uff0c\u4f7f\u7528kmeans\u805a\u7c7b\u62109\u7c7b\uff0c\u90a3\u4e48\u5373\u4f7f\u732a\u53ea\u7c7b\u5c3a\u5bf8\u7edf\u4e00\u4e5f\u4f1a\u88ab\u5f3a\u5236\u5206\u62109\u7c7b\uff0c\u88ab\u89c4\u5212\u5230\u90a33\u4e2a\u7279\u5f81\u56fe\u4e0a\u53bb\u9884\u6d4b(\u4e0d\u5408\u7406)\u3002\u6539\u8fdb:\u5148\u6839\u636e\u7279\u5f81\u56fe\u7684\u611f\u53d7\u91ce\u5b9a\u51fa\u4e09\u4e2a\u5927\u6982\u7684\u5c3a\u5ea6\u8303\u56f4\uff0c\u8bbe\u7f6e\u4e24\u4e2a\u9608\u503c\uff0c\u7136\u540e\u6839\u636e\u9608\u503c\u5bf9 bbox \u8fdb\u884c\u5355\u72ec\u4e09\u6b21\u805a\u7c7b\u800c\u4e0d\u662f\u4f5c\u7528\u4e8e\u6574\u4e2a\u6570\u636e\u96c6\u3002\u6bd4\u5982\u8bf4\u732a\u53ea\u8fd9\u4e2a\u5927\u7269\u4f53\u88ab\u5206\u914d\u5230\u540c\u4e00\u4e2a\u7279\u5f81\u56fe\u4e2d\uff0c\u5176\u4ed6\u4e24\u4e2a\u7279\u5f81\u56fe\u4e0d\u662f\u88ab\u6d6a\u8d39\u4e86\u561b\u3002 \u4e0a\u9762\u7684\u65b9\u6cd5\u4f1a\u9020\u6210\u8d44\u6e90\u7684\u6d6a\u8d39\uff0c\u8003\u8651\u591a\u5c3a\u5ea6\u7279\u5f81\u56fe\u662f\u5426\u6709\u5fc5\u8981\uff0c\u662f\u5426\u80fd\u7528\u5206\u8fa8\u7387\u9ad8\u7684\u5355\u5c3a\u5ea6\u6765\u4ee3\u66ff\u591a\u5c3a\u5ea6(FaceBoxes\u7cbe\u7b80\u7248\u5c31\u662f\u8fd9\u6837\u505a\u7684\uff0c\u4ed6\u4eec\u5728\u6700\u540e\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u65b9\u683c\u4ea7\u751f\u4e8623\u4e2a\u5148\u9a8c\u6846)\u3002\u7279\u5f81\u56fe\u5927\u4e86\u6807\u7b7e\u91cd\u5199\u6982\u7387\u4e5f\u4f1a\u964d\u4f4e\u3002 \u7f51\u7edc\u6539\u5199\uff0c\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\u53ef\u4ee5\u52a0\u5f3a\u7279\u5f81\u7684\u63d0\u53d6\u80fd\u529b\u3002 \u878d\u5408\u65b9\u5f0f\u89e3\u6790","title":"Poly-YoLo"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#yolov42004","text":"\u8bba\u6587 | code | pytorch code | \u535a\u5ba2\u8be6\u89e3 \u8f93\u5165\u7aef Mosaic (\u9a6c\u8d5b\u514b)\u6570\u636e\u589e\u5f3a:\u89e3\u51b3coco\u6570\u636e\u96c6\u4e2d\u5c0f\u76ee\u6807\u5360\u6bd4 41.4% \u5927\u4e14\u4e0d\u5747\u5300\u95ee\u9898 \u5927\u5927\u4e30\u5bcc\u6570\u636e\u96c6\uff0c\u7279\u522b\u662f\u968f\u673a\u7f29\u653e\u589e\u52a0\u4e86\u5f88\u591a\u5c0f\u76ee\u6807\uff0c\u8ba9\u7f51\u7edc\u7684\u9c81\u68d2\u6027\u66f4\u597d\u3002 BackBone\u521b\u65b0 CSPDarknet53 \u501f\u9274\u4e86 CSPNet \u7684\u7ecf\u9a8c\uff0c\u5176\u4e2d\u5305\u542b\u4e865\u4e2a CSP \u6a21\u5757 CSPNet(19/11) \u8be5\u7f51\u7edc\u53ef\u4ee5\u589e\u5f3aCNN\u5b66\u4e60\u80fd\u529b(\u901f\u5ea6\u5feb\uff0c\u5185\u5b58\u6210\u672c\u4f4e)\u3002 CSPNet \u5c06\u5e95\u5c42\u7684\u7279\u5f81\u6620\u5c04\u5206\u4e3a\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u7ecf\u8fc7\u5bc6\u96c6\u5757\u548c\u8fc7\u6e21\u5c42\uff0c\u53e6\u4e00\u90e8\u5206\u4e0e\u4f20\u8f93\u7684\u7279\u5f81\u6620\u5c04\u7ed3\u5408\u5230\u4e0b\u4e00\u9636\u6bb5\u3002 Mish\u6fc0\u6d3b\u51fd\u6570 Dropblock Dropblock \u7f13\u89e3\u8fc7\u62df\u5408\u7684\u4e00\u79cd\u6b63\u5219\u5316\u65b9\u5f0f\uff0c\u5377\u79ef\u5c42\u5bf9\u968f\u673a\u4e22\u5f03\u4e0d\u654f\u611f(\u56e0\u4e3a\u968f\u673a\u4e22\u5f03\u540e\uff0c\u5377\u79ef\u5c42\u4ecd\u7136\u53ef\u4ee5\u4ece\u76f8\u90bb\u7684\u6fc0\u6d3b\u5355\u5143\u5b66\u4e60\u5230**\u76f8\u540c\u7684\u4fe1\u606f**) \u501f\u9274 cutout \u6570\u636e\u589e\u5f3a(\u5c06\u8f93\u5165\u56fe\u50cf\u90e8\u5206\u7f6e\u96f6:\u64e6\u9664),\u5728\u8bad\u7ec3\u4e2d\u6309\u7167\u4e00\u5b9a\u6bd4\u4f8b Dropblock \u6bcf\u4e2a\u7279\u5f81\u56fe\uff0c\u6bd4\u4f8b\u4e0d\u56fa\u5b9a\uff0c\u5f00\u59cb\u662f\u5f88\u5c0f\u6bd4\u4f8b\uff0c\u968f\u7740\u8bad\u7ec3\u8fc7\u7a0b**\u7ebf\u6027\u589e\u52a0**\u8fd9\u4e2a\u6bd4\u4f8b\u3002 Neck\u521b\u65b0 \u5728\u76ee\u6807\u68c0\u6d4b\u9886\u57df\uff0c\u4e3a\u4e86\u66f4\u597d\u7684\u63d0\u53d6\u878d\u5408\u7279\u5f81\uff0c\u901a\u5e38\u5728**Backbone**\u548c**\u8f93\u51fa\u5c42**\uff0c\u4f1a\u63d2\u5165\u4e00\u4e9b\u5c42\uff0c\u8fd9\u4e2a\u90e8\u5206\u79f0\u4e3aNeck\u3002\u76f8\u5f53\u4e8e\u76ee\u6807\u68c0\u6d4b\u7f51\u7edc\u7684\u9888\u90e8\uff0c\u4e5f\u662f\u975e\u5e38\u5173\u952e\u7684\u3002 SPP\u6a21\u5757 \u91c7\u7528**SPP\u6a21\u5757**\u7684\u65b9\u5f0f\uff0c\u6bd4\u5355\u7eaf\u7684\u4f7f\u7528**k*k\u6700\u5927\u6c60\u5316**\u7684\u65b9\u5f0f\uff0c\u66f4\u6709\u6548\u7684\u589e\u52a0\u4e3b\u5e72\u7279\u5f81\u7684\u63a5\u6536\u8303\u56f4\uff0c\u663e\u8457\u7684\u5206\u79bb\u4e86\u6700\u91cd\u8981\u7684\u4e0a\u4e0b\u6587\u7279\u5f81\u3002 Yolov4\u7684\u4f5c\u8005\u5728\u4f7f\u7528**608*608**\u5927\u5c0f\u7684\u56fe\u50cf\u8fdb\u884c\u6d4b\u8bd5\u65f6\u53d1\u73b0\uff0c\u5728COCO\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u4e2d\uff0c\u4ee50.5%\u7684\u989d\u5916\u8ba1\u7b97\u4ee3\u4ef7\u5c06AP50\u589e\u52a0\u4e862.7%\uff0c\u56e0\u6b64Yolov4\u4e2d\u4e5f\u91c7\u7528\u4e86**SPP\u6a21\u5757**\u3002 FPN+PAN\u7ed3\u6784 Yolov4\u5728FPN\u5c42\u7684\u540e\u9762\u8fd8\u6dfb\u52a0\u4e86\u4e00\u4e2a**\u81ea\u5e95\u5411\u4e0a\u7684\u7279\u5f81\u91d1\u5b57\u5854\u3002 FPN\u5c42\u81ea\u9876\u5411\u4e0b\u4f20\u8fbe**\u5f3a\u8bed\u4e49\u7279\u5f81 \uff0c\u800c\u7279\u5f81\u91d1\u5b57\u5854\u5219\u81ea\u5e95\u5411\u4e0a\u4f20\u8fbe**\u5f3a\u5b9a\u4f4d\u7279\u5f81** \u539f\u672c\u7684PANet\u7f51\u7edc\u7684**PAN\u7ed3\u6784**\u4e2d\uff0c\u4e24\u4e2a\u7279\u5f81\u56fe\u7ed3\u5408\u662f\u91c7\u7528**shortcut(add-\u7ef4\u5ea6\u4e0d\u53d8)**\u64cd\u4f5c\uff0c\u800cYolov4\u4e2d\u5219\u91c7\u7528**concat\uff08route:\u901a\u9053\u62fc\u63a5\uff09**\u64cd\u4f5c\uff0c\u7279\u5f81\u56fe\u878d\u5408\u540e\u7684\u5c3a\u5bf8\u53d1\u751f\u4e86\u53d8\u5316\u3002 Prediction\u521b\u65b0:(CIou_loss+DIou_nms) CIou_loss **IOU_Loss\uff1a**\u4e3b\u8981\u8003\u8651\u68c0\u6d4b\u6846\u548c\u76ee\u6807\u6846\u91cd\u53e0\u9762\u79ef\u3002 **GIOU_Loss\uff1a**\u5728IOU\u7684\u57fa\u7840\u4e0a\uff0c\u89e3\u51b3\u8fb9\u754c\u6846\u4e0d\u91cd\u5408\u65f6\u7684\u95ee\u9898\u3002 **DIOU_Loss\uff1a**\u5728IOU\u548cGIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u7684\u4fe1\u606f\u3002 **CIOU_Loss\uff1a**\u5728DIOU\u7684\u57fa\u7840\u4e0a\uff0c\u8003\u8651\u8fb9\u754c\u6846\u5bbd\u9ad8\u6bd4\u7684\u5c3a\u5ea6\u4fe1\u606f\u3002 DIOU_nms \uff1a\u6548\u679c\u4f18\u4e8e\u4f20\u7edf NMS \uff0c\u4e3a\u4ec0\u4e48\u4e0d\u7528 CIOU_nms ? ciou \u662f\u5728 Diou \u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u5f71\u54cd\u56e0\u5b50\uff0c\u5305\u542b GT \uff0c\u9884\u6d4b\u7684\u65f6\u5019\u6ca1\u6709 GT \u4fe1\u606f\uff0c\u4e0d\u7528\u8003\u8651\u5f71\u54cd\u56e0\u5b50\uff0c\u6240\u4ee5\u76f4\u63a5\u7528 DIOU_nms \u5373\u53ef","title":"YOLOV4(20/04)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#yolov5","text":"\u535a\u5ba2 | code \u8f93\u5165\u7aef Mosaic\u6570\u636e\u589e\u5f3a \u81ea\u9002\u5e94\u951a\u70b9\u6846\u8ba1\u7b97:\u5c06\u951a\u70b9\u6846\u8ba1\u7b97\u5d4c\u5165\u8bad\u7ec3\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u8bad\u7ec3\u53ef\u4ee5\u81ea\u9002\u5e94\u7684\u8ba1\u7b97\u4e0d\u540c\u8bad\u7ec3\u96c6\u4e2d\u7684\u6700\u4f73\u951a\u70b9\u6846(\u53ef\u5173\u95ed) \u63a8\u7406\u65f6\u81ea\u9002\u5e94\u56fe\u7247\u7f29\u653e:\u4e0d\u540c\u957f\u5bbd\u6bd4\u7684\u56fe\u7247resize\u5230\u76f8\u540c\u5c3a\u5bf8\u4f1a\u6709\u7578\u53d8\uff0c\u82e5\u586b\u5145\u9ed1\u8fb9\u540eresize\u867d\u7136\u65e0\u7578\u53d8\u4f46\u957f\u5bbd 2:1 \u7684\u586b\u5145\u9ed1\u8fb9\u8fc7\u591a\uff0c\u5b58\u5728\u4fe1\u606f\u5197\u4f59\uff0c\u5f71\u54cd\u63a8\u7406\u901f\u5ea6\uff1b\u6539\u8fdb:\u957f\u8fb9\u6c42\u7f29\u653e\u7cfb\u6570\uff0c\u77ed\u8fb9\u7b49\u6bd4\u4f8b\u7f29\u653e\uff0c pad_width=(\u7f29\u653e\u957f\u8fb9-\u7f29\u653e\u77ed\u8fb9)%32 / 2 \uff0c\u77ed\u8fb9\u8865 pad_width \u5373\u53ef(yolov5\u4e0d\u662f\u8865\u9ed1\u8fb9,\u800c\u662f\u7070\u8272 114,114,114 \uff0c\u5176\u5b9e\u7ed3\u679c\u90fd\u4e00\u6837)\uff1b 32 \uff1aYolov5\u7684\u7f51\u7edc\u7ecf\u8fc75\u6b21\u4e0b\u91c7\u6837\uff0c\u800c2\u76845\u6b21\u65b9\uff0c\u7b49\u4e8e**32**\u3002\u6240\u4ee5\u81f3\u5c11\u8981\u53bb\u638932\u7684\u500d\u6570\uff0c\u518d\u8fdb\u884c\u53d6\u4f59\u3002 Backbone\u521b\u65b0 Yolov4\u4e2d\u53ea\u6709\u4e3b\u5e72\u7f51\u7edc\u4f7f\u7528\u4e86CSP\u7ed3\u6784\uff0cyolov5\u4e3b\u5e72\u548cneck\u90fd\u7528\u4e86CSP\u7ed3\u6784 Focus\u7ed3\u6784 Neck\u521b\u65b0 FPN+PAN\u7ed3\u6784 Yolov4\u7684Neck\u7ed3\u6784\u4e2d\uff0c\u91c7\u7528\u7684\u90fd\u662f\u666e\u901a\u7684\u5377\u79ef\u64cd\u4f5c\u3002\u800cYolov5\u7684Neck\u7ed3\u6784\u4e2d\uff0c\u91c7\u7528\u501f\u9274CSPnet\u8bbe\u8ba1\u7684CSP2\u7ed3\u6784\uff0c\u52a0\u5f3a\u7f51\u7edc\u7279\u5f81\u878d\u5408\u7684\u80fd\u529b\u3002 Predict yolov4->CIOU_loss vs yolov5->GIOU_loss yolov4->GIOU_nms vs yolov5->\u52a0\u6743\u7684nms \u603b\u7ed3:yolov5\u56db\u4e2a\u7f51\u7edc yolov5s/yolov5m/yolov5l/yolov5x \u7f51\u7edc\u7ed3\u6784\u90fd\u76f8\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u901a\u8fc7\u4e0d\u540c\u7684 depth_multiple/width_umltiple \u6765\u63a7\u5236\u7f51\u7edc\u7684\u6df1\u5ea6\u548c\u5bbd\u5ea6\u3002","title":"YOLOV5"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#yolof2103","text":"\u8bba\u6587 | code \u4f5c\u8005\u8ba4\u4e3aFPN\u7684\u4f5c\u7528\u6709\u4ee5\u4e0b\u4e24\u4e2a\uff0c\u63a2\u7d22FPN\u7684\u8fd9\u4e24\u4e2a\u4f5c\u7528\u7684\u5b9e\u9645\u8d21\u732e\u7a0b\u5ea6 \u4e00\u662f\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\uff0c\u63d0\u9ad8\u4e86\u7279\u5f81\u7684\u4e30\u5bcc\u7a0b\u5ea6\uff1b \u4e8c\u662f\u4f7f\u7528\u5206\u6cbb\u6cd5\uff0c\u5c06\u76ee\u6807\u68c0\u6d4b\u4efb\u52a1\u6309\u7167\u76ee\u6807\u5c3a\u5bf8\u4e0d\u540c\uff0c\u5206\u6210\u82e5\u5e72\u4e2a\u68c0\u6d4b\u5b50\u4efb\u52a1(\u6d45\u5c42\u7279\u5f81\u5206\u5e03\u5c0f\u5c3a\u5ea6 anchor \u68c0\u6d4b\u5c0f\u76ee\u6807\uff0c\u6df1\u5c42\u7279\u5f81\u5206\u914d\u5927 anchor \u68c0\u6d4b\u5927\u76ee\u6807)\u3002 \u4ee5Retinanet\u7684FPN\u505a\u5b9e\u9a8c\u7ed3\u679c\u5982\u4e0b \u591a\u8f93\u5165\u548c\u5355\u8f93\u5165\u5bf9\u7ed3\u679c\u76f8\u5dee\u4e0d\u5927\uff0c\u4f46\u662f\u591a\u8f93\u51fa\u548c\u5355\u8f93\u51fa\u5bf9\u7ed3\u679c\u5f71\u54cd\u5de8\u5927\uff0c\u4e5f\u5c31\u662f\u8bf4 FPN \u7684\u5b9e\u9645\u8d21\u732e\u5ea6\u5927\u90e8\u5206\u5728\u5206\u6cbb\u6cd5\u8fd9\u8fb9\u3002\u5206\u6790\u539f\u56e0\u662f\uff1a \u591a\u5c3a\u5ea6\u8f93\u51fa\u53ef\u4ee5\u83b7\u5f97\u66f4\u5927\u4e30\u5bcc\u7684\u611f\u53d7\u91ce\u3002 a->d\uff0c\u5982\u679cp5\u7684\u8f93\u51fa\u83b7\u5f97\u7684\u611f\u53d7\u91ce\u548ca\u7b49\u540c\u7684\u8bdd\uff0c\u8ba1\u7b97\u91cf\u662f\u4e0d\u662f\u4f1a\u5927\u5927\u964d\u4f4e\uff1f \u4f7f\u7528Dilated Encoder\u4ee3\u66ffFPN\u6548\u679c\u5f88\u68d2 \u95ee\u9898:\u5f15\u5165positive anchor\u4e0d\u5747\u8861\u95ee\u9898 retinaNet \u67d0\u4e2a anchor \u548c gt\u6846 \u7684\u6700\u5927 iou>0.5 \u5373\u4e3a positive anchor ,\u79f0\u4e3a Max-IoU Matching \uff0c\u5176\u4ed6\u68c0\u6d4b\u5668\u4e5f\u5e38\u7528(\u56e0\u4e3a\uff0c\u591a\u5c3a\u5ea6\u7279\u5f81\u53ef\u4ee5\u4ea7\u751f\u5f88\u591a positive anchor )\uff0c\u4f46 Dilated Encoder \u7ed3\u6784\u53ea\u6709\u4e00\u4e2a\u8f93\u51fa\u7279\u5f81\uff0c\u5982\u679c\u4f7f\u7528\u8be5\u65b9\u6cd5\uff0c positive anchor \u4f1a\u5f88\u5c11( 100k-->5k )\uff0c\u800c\u4e14\uff0c ground truth \u5c3a\u5bf8\u5927\u7684\u76ee\u6807\u4ea7\u751f\u7684 positive anchor \u8981\u591a\u4e8e ground truth \u5c3a\u5bf8\u5c0f\u7684\u76ee\u6807\u4ea7\u751f\u7684 positive anchor \uff0c\u8fd9\u79cd\u73b0\u8c61\u4f1a\u5bfc\u81f4\u7f51\u7edc\u5728\u8bad\u7ec3\u65f6\u66f4\u5173\u6ce8\u5927\u5c3a\u5bf8\u7684\u76ee\u6807\uff0c\u5ffd\u7565\u5c0f\u5c3a\u5bf8\u76ee\u6807\u3002\u89e3\u51b3: Uniform Matching \u5bf9\u4e8e\u6bcf\u4e2a\u76ee\u6807\uff0c\u90fd\u5c06\u548c\u8be5\u76ee\u6807 ground truth \u6700\u8fd1\u7684 k \u4e2a anchor \u4f5c\u4e3a\u8be5\u76ee\u6807\u7684 positive anchor \uff0c\u4ece\u800c\u4fdd\u8bc1\u6bcf\u4e2a\u76ee\u6807\u90fd\u6709\u76f8\u540c\u6570\u91cf\u7684 positive anchor \uff0c\u4fdd\u8bc1\u7f51\u7edc\u8bad\u7ec3\u65f6\u80fd\u517c\u987e\u5c3a\u5bf8\u5927\u5c0f\u4e0d\u540c\u7684\u76ee\u6807\u3002\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u4e3a\u4e86\u907f\u514d\u4e00\u4e9b\u6781\u7aef\u60c5\u51b5\uff0c\u5ffd\u7565 Uniform Matching \u65b9\u6cd5\u4e2d\u4ea7\u751f\u7684\u4e0e ground truth \u7684 IoU \u5927\u4e8e 0.7 \u7684 negative anchor \u548c\u4e0e ground truth \u7684 IoU \u5c0f\u4e8e 0.15 \u7684 positive anchor \u3002 \u7f51\u7edc\u7ed3\u6784","title":"YOLOF(21/03)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ppyolo2007","text":"\u5168\u79f0: PaddlePaddle-YOLO | \u8bba\u6587\u5730\u5740 | code \u57fa\u4e8e yolov3 \u7684\u76ee\u6807\u68c0\u6d4b\u5668\uff0c\u5c1d\u8bd5\u7ed3\u5408\u5404\u79cd\u4e0d\u589e\u52a0\u6a21\u578b\u53c2\u6570\u7684\u6280\u5de7\uff0c\u786e\u4fdd\u73b0\u6709\u901f\u5ea6\u7684\u60c5\u51b5\u4e0b\u5c3d\u53ef\u80fd\u63d0\u9ad8\u7cbe\u5ea6\u3002 \u7ecf\u9a8c+\u5b9e\u9a8c\u6280\u5de7\u6587\uff1a\u65e0\u521b\u65b0\u70b9\uff0c\u63a2\u7d22\u7684\u662f\u6280\u5de7\u5982\u4f55\u7ed3\u5408\u6548\u679c\u66f4\u4f18 \u7f51\u7edc\u7ed3\u6784 : backbone:resnet50-vd-dcn,detectionNeck:FPN,detectionHead:yolv3 \u7d2b\u8272\u4e09\u89d2\u8868\u793a\u4f7f\u7528\u4e86 DropBlock ,\u6240\u4ee5\u4ec5\u4ec5\u5728 FPN \u4e0a\u4f7f\u7528\u4e86\uff0c\u5728 backbone \u4e0a\u4f7f\u7528\u6027\u80fd\u4f1a\u4e0b\u964d\uff1b \u9ec4\u8272\u94bb\u77f3\u8868\u793a CoordConv(\u5750\u6807\u5377\u79ef) \u7ea2\u8272\u4e94\u89d2\u661f\u8868\u793a SPP \u7ed3\u6784 \u6280\u5de7\u7684\u8fd0\u7528\u7ed3\u5408 \uff1a\u6700\u7ec8PP-YOLO\u5728COCO test-dev 2017\u4e0a\u7684\u6027\u80fd\u8868\u73b0\uff1a 45.2% mAP\uff0c72.9 FPS\uff01 # \u6570\u636e\u589e\u5f3a # 1. \u5e94\u7528\u4eceBeta(a=1.5,b=1.5)\u5206\u5e03\u4e2d\u91c7\u6837\u7684\u6743\u91cdMixUp # 2. RandomColorDistortion, RandomExpand,RandCrop\u548cRandomFlip\u4ee50.5\u7684\u6982\u7387\u4f9d\u6b21\u5e94\u7528\u3002 # 3. \u5c06RGB\u901a\u9053\u5206\u522b\u51cf\u53bb0.485\u30010.456\u30010.406\u30010.229\u30010.224\u30010.225\u8fdb\u884c\u5f52\u4e00\u5316\u5904\u7406\u3002 # 4. \u6700\u540e\uff0c\u8f93\u5165\u5927\u5c0f\u4ece[320,352,384,416,448,480,512,544,576,608]\u5747\u5300\u62bd\u53d6\u3002 ResNet50-vd:resnet50\u7684d\u7248\u6539\u8fdb ; Deformable Conv :\u53ef\u53d8\u5f62\u5377\u79ef\uff1b LB:Larger Batch Size(64->192) ;\u6307\u6570\u79fb\u52a8\u5e73\u5747 EMA ; DropBlock:feature map drop :\u4f5c\u8005\u4ec5\u4ec5\u7528\u4e8e FPN \u4e0a\uff0c\u56e0\u4e3a\u4f5c\u8005\u7528\u5230 backbone \u4e0a\u5bfc\u81f4\u6027\u80fd\u4e0b\u964d\uff1b IOU Loss :\u4f5c\u8005\u53d1\u73b0\u5404\u79cd IOU Loss \u7684\u6539\u5584\u662f\u76f8\u4f3c\u7684,\u6240\u4ee5\u9009\u62e9\u6700\u57fa\u7840\u7684 IOU Loss \uff0c\u4e14\u5e76\u6ca1\u6709\u76f4\u63a5\u7528\u8be5 Iou loss \u66ff\u6362 smooth L1 Loss \uff0c\u800c\u662f\u6dfb\u52a0\u4e86\u4e00\u4e2a\u5206\u652f\u53bb\u8ba1\u7b97\u3002 Iou Aware : yolov3 \u4e2d detection_score=class_score*objectness[0,1] \uff0c\u7136\u800c\u8fd9\u5e76\u6ca1\u6709\u8003\u8651\u5b9a\u4f4d\u7684\u7cbe\u5ea6\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u589e\u52a0\u4e86 Iou \u9884\u6d4b\u5206\u652f\u6765\u8861\u91cf\u5b9a\u4f4d\u7684\u51c6\u786e\u6027\u3002\u5728\u8bad\u7ec3\u671f\u95f4\uff0c\u91c7\u7528 IoU aware loss \u6765\u8bad\u7ec3 IoU \u9884\u6d4b\u5206\u652f\u3002 \u5728\u63a8\u7406\u8fc7\u7a0b\u4e2d: detection_score=iou_aware_loss*class_score*objectness[0,1] \uff0c\u8fd9\u4e0e\u5b9a\u4f4d\u7cbe\u5ea6\u66f4\u52a0\u76f8\u5173\u3002 \u7136\u540e\u5c06\u6700\u7ec8\u7684\u68c0\u6d4b\u7f6e\u4fe1\u5ea6\u7528\u4f5c\u540e\u7eed NMS \u7684\u8f93\u5165\uff0c\u867d\u7136\u52a0\u5165\u4e86\u4e00\u4e2a\u5355\u72ec\u7684\u5206\u652f\u4f46\u662f\u53c2\u6570\u53ea\u589e\u52a0\u4e86\u4e00\u70b9\u70b9\u3002 Grid Sensitive :\u7f51\u683c\u654f\u611f\u6027\u3002 Matrix NMS :\u77e9\u9635NMS\u662f\u7531Soft-NMS\u63a8\u52a8\u7684\uff0c\u5b83\u4f1a\u524a\u5f31\u5176\u4ed6\u68c0\u6d4b\u5f97\u5206\uff0c\u56e0\u4e3a\u5b83\u4eec\u7684\u91cd\u53e0\u90e8\u5206\u5448\u5355\u8c03\u9012\u51cf\u51fd\u6570\uff1b\u901f\u5ea6\u4f18\u4e8e\u4f20\u7edf NMS CoordConv(\u5750\u6807\u5377\u79ef) :\u5176\u5de5\u4f5c\u539f\u7406\u662f\u901a\u8fc7\u4f7f\u7528\u989d\u5916\u7684\u5750\u6807\u901a\u9053\u6765\u4f7f\u5377\u79ef\u8bbf\u95ee\u5176\u81ea\u8eab\u7684\u8f93\u5165\u5750\u6807\u6765\u589e\u52a0\u7279\u5f81\u4e4b\u95f4\u7684\u4f9d\u8d56\u6027\u3002\u56e0\u4e3a\u5176\u5411\u5377\u79ef\u5c42\u6dfb\u52a0\u4e24\u4e2a\u8f93\u5165\u901a\u9053\uff0c\u6dfb\u52a0\u4e00\u4e9b\u53c2\u6570\u548c FLOP \uff0c\u4e3a\u4e86\u5c3d\u53ef\u80fd\u51cf\u5c11\u6548\u7387\u635f\u5931\uff0c\u6211\u4eec\u4e0d\u66f4\u6539\u4e3b\u5e72\u4e2d\u7684\u5377\u79ef\u5c42\uff0c\u800c\u4ec5\u7528 CoordConv \u66ff\u6362\u4e86 FPN \u4e2d\u7684 1x1 \u5377\u79ef\u5c42\u548c\u68c0\u6d4b\u5934\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u3002 Better Pretrain Model :\u5728 ImageNet \u4e0a\u4f7f\u7528\u5177\u6709\u8f83\u9ad8\u5206\u7c7b\u7cbe\u5ea6\u7684\u9884\u8bad\u7ec3\u6a21\u578b\u53ef\u80fd\u4f1a\u5bfc\u81f4\u66f4\u597d\u7684\u68c0\u6d4b\u6027\u80fd","title":"PPYOLO(20/07)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ppyolov22104","text":"\u8bba\u6587\u5730\u5740 | code | \u535a\u5ba2 \u6539\u8fdbv1(fpn)\u7684NECK :\u521b\u5efa\u65b0 neck \uff0c\u76ee\u7684\u662f\u7528\u4e8e\u6784\u5efa\u6240\u6709\u5c3a\u5ea6\u7684\u9ad8\u7ea7\u8bed\u4e49\u7279\u5f81 map \uff0c\u56e0\u4e3a\u5728\u4e0d\u540c\u5c3a\u5ea6\u4e0b\u68c0\u6d4b\u4efb\u52a1\u662f\u76ee\u6807\u68c0\u6d4b\u7684\u4e00\u4e2a\u57fa\u672c\u6311\u6218\uff1b\u5982\u4e0b\u56fe\uff0c\u8def\u5f84\u662f\u81ea\u5e95\u5411\u4e0a\u3002 \u7ed3\u679c\u63d0\u5347\u5982\u4e0b\u56fe \u6539\u8fdbIou Aware :\u8ba1\u7b97\u91c7\u7528\u4e86 soft weight format \uff0c\u8fd9\u4e0e\u6700\u521d\u7684\u610f\u56fe\u4e0d\u4e00\u81f4\u3002\u56e0\u6b64\u6539\u8fdb\u4e3a\u5e94\u7528 soft label format t \u4e3a anchor \u4e0e ground-truth-bounding box \u4e4b\u95f4\u7684 IoU p \u4e3a IoU aware branch \u7684\u539f\u59cb\u8f93\u51fa\uff0c \u03c3 \u4e3a sigmoid \u6fc0\u6d3b\u51fd\u6570\u3002 \u6ce8\u610f\uff0c\u53ea\u8ba1\u7b97\u6b63\u6837\u672c\u7684 IoU aware loss \u3002\u901a\u8fc7\u66ff\u6362\u635f\u5931\u51fd\u6570 IoU aware branch \u6bd4\u4ee5\u524d\u66f4\u597d\u3002 Larger Input Size \uff1a\u8f93\u5165\u5927\u5c0f\u5747\u5300\u5730\u4ece [320,352,384,416,448,480\uff0c512\u3001544\u3001576\u3001608\u3001640\u3001672\u3001704\u3001736\u3001768] \u83b7\u53d6\uff0c\u66f4\u5927\u5c3a\u5bf8\u9884\u793a\u7740\u66f4\u591a\u5185\u5b58\uff0c\u9700\u8981\u51cf\u5c11 batch size mish\u6fc0\u6d3b : mish \u5728 yolov4/yolov5 \u4e0a\u88ab\u8bc1\u660e\u662f\u6709\u6548\u7684\uff0c\u4f5c\u8005\u4e3a\u4e86 backbone \u4f7f\u7528\u9884\u8bad\u7ec3\u53c2\u6570\uff0c\u6ca1\u6709\u5728 backbone \u4e0a\u4f7f\u7528 mish \uff0c\u800c\u662f\u5728 neck \u4e0a\u7528\u4e86 mish \u6fc0\u6d3b \u5176\u4ed6\u8be6\u89c1\u8bba\u6587\uff0c\u4e0b\u9762\u8fd9\u4e9b\u4e0d\u786e\u5b9a\u662f\u5426work Cosine Learning Rate Decay Backbone Parameter Freezing SiLU Activation Function","title":"PPYOLOV2(21/04)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#fasterrcnn1506","text":"\u8bba\u6587\u5730\u5740 \u4e3b\u8981\u601d\u60f3 \u8f93\u5165\u4efb\u610f\u5927\u5c0fPxQ\u7684\u56fe\u50cf\uff0c\u9996\u5148\u7f29\u653e\u81f3\u56fa\u5b9a\u5927\u5c0fMxN ( 800*600 )\uff0c\u9001\u5165\u5377\u79ef\u7f51\u7edc\u4ea7\u751f\u4e00\u5f20\u7279\u5f81\u56fe\uff0c\u8fd9\u5f20\u7279\u5f81\u56fe\u6709\u4e24\u4e2a\u4f5c\u7528\uff0c\u4e00\u662f\u7ecf\u8fc7RPN\u7f51\u7edc\u751f\u6210\u8f83\u4e3a\u7cbe\u51c6\u7684\u5efa\u8bae\u6846\uff0c\u4e8c\u662f\u548c\u8fd9\u4e9b\u5efa\u8bae\u6846\u7ed3\u5408\u4f9d\u6b21\u9001\u5165\u5230RoiPooling\u4e2d\uff0c\u5f97\u5230\u4e00\u7cfb\u7c7b\u5efa\u8bae\u7279\u5f81\u56fe\uff0c\u518d\u9001\u5165\u5168\u8fde\u63a5\u5c42\u8fdb\u884c\u540e\u7eed\u7684softmax\u4ea4\u53c9\u71b5\u5206\u7c7b\u548csmooth l1\u8fb9\u6846\u56de\u5f52\uff08 \u5206\u7c7b\u6982\u7387\u548c\u8fb9\u6846\u56de\u5f52\u8054\u5408\u8bad\u7ec3 \uff09\uff0c\u5f97\u5230\u7cbe\u51c6\u7684\u8fb9\u6846\u548c\u7269\u4f53\u7c7b\u522b\u3002 \u7f51\u7edc\u7ec6\u8282\uff1a \u5728\u6574\u4e2aConv layers\u4e2d\uff0cconv\u548crelu\u5c42\u4e0d\u6539\u53d8\u8f93\u5165\u8f93\u51fa\u5927\u5c0f\uff0c\u53ea\u6709pooling\u5c42\u4f7f\u8f93\u51fa\u957f\u5bbd\u90fd\u53d8\u4e3a\u8f93\u5165\u7684\u00bd\u3002 anchor 9\u79cd\u5c3a\u5bf8=3\u4e2a\u9762\u79ef(128,256,512)*3\u79cd\u5c3a\u5bf8(1:1,1:2,2:1)\uff0c\u8fd99\u4e2aAnchors\u5927\u5c0f\u5bbd\u9ad8\u4e0d\u540c\uff0c\u5bf9\u5e94\u5230\u539f\u56fe\u57fa\u672c\u53ef\u4ee5\u8986\u76d6\u6240\u6709\u53ef\u80fd\u51fa\u73b0\u7684\u7269\u4f53 **\u5bf9\u4e8e\u4e00\u5e45 W*H \u7684feature map,\u5bf9\u5e94 W*H*k(9) \u4e2a**\u951a\u70b9(Anchor)\uff0c\u5c31VGG16\u800c\u8a00\uff0c\u5230\u7279\u5f81\u56fe\u90a3\u4e00\u6b65\u4e0b\u91c7\u6837\u4e8616\u500d\uff0c\u5171\u6709anchor: 256-d \u662fZF\u7f51\u7edc\u7684\uff0c\u4f7f\u7528VGG16\u7f51\u7edc\u7684\u8bdd\u662f 512-d \uff0c\u4e5f\u5c31\u662f\u8bf4\u8be5\u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6\u662f512\u3002 RPN \u7279\u5f81\u56fe\u4e4b\u540e\u53c8\u505a\u4e86 3x3 \u7684\u5377\u79ef\uff0c\u4e0d\u6539\u53d8\u901a\u9053\u6570\uff0c\u5176\u76ee\u7684\u662f\u8ba9\u6bcf\u4e2a\u70b9\u53c8\u878d\u5408\u4e86\u5468\u56f43x3\u7684\u7a7a\u95f4\u4fe1\u606f\u3002 \u7136\u540e\u8be5\u7279\u5f81\u56fe\u53c8\u7ecf\u8fc7\u4e86\u4e24\u4e2a 1x1\u5377\u79ef \uff0c\u4fee\u6539\u901a\u9053\u5206\u522b\u4e3a 2k+4k \uff0c\u5176\u5b9e\u5c31\u662f\u5bf9\u6bcf\u4e2a\u951a\u70b9\u6846\u8fdb\u884c2\u5206\u7c7b(softmax\u4ea4\u53c9\u71b5\uff1a\u662f\u5426\u662f\u7269\u4f53,\u6ce8\u610f\u4e0d\u80fd\u5f97\u5230\u5177\u4f53\u7c7b\u522b)\u548c4\u4e2a\u504f\u79fb\u91cf(smooth l1 loss:x,y,w,h) \u5982\u4f55\u83b7\u53d6\u5408\u9002\u7684anchor\uff1f \u6309\u7167\u8f93\u5165\u7684foreground softmax scores\u7531\u5927\u5230\u5c0f\u6392\u5e8fanchors\uff0c\u63d0\u53d6\u524dpre_nms_topN(e.g. 6000)\u4e2aanchors \u8bbe\u7f6e\u5408\u9002\u9608\u503c\uff0c\u5254\u9664\u975e\u5e38\u5c0f\uff08width<threshold or height<threshold\uff09\u7684foreground anchors \u518d\u6b21\u6309\u7167nms\u540e\u7684foreground softmax scores\u7531\u5927\u5230\u5c0f\u6392\u5e8ffg anchors\uff0c\u63d0\u53d6\u524dpost_nms_topN(e.g. 300)\u7ed3\u679c\u4f5c\u4e3aproposal\u8f93\u51fa w*h*k*2+w*h*k*4 \u5982\u4f55\u6df7\u5408\uff1f\u5efa\u8bae\u7f51\u7edc\u5c42(proposal layer)\u3002\u4e09\u4e2a\u8f93\u5165(2+im_info:\u4fdd\u5b58\u4e86\u6b64\u6b21\u7f29\u653e\u7684\u6240\u6709\u4fe1\u606f) RoiPooling \u56fa\u5b9a\u957f\u5ea6\u7684\u8f93\u51fa\uff0c\u4e3a\u4e86\u65b9\u4fbf\u5411\u540e\u9762\u7684\u5168\u8fde\u63a5\u5c42\u8f93\u51fa\u3002 \u6700\u540e\uff0c\u5c06\u5f97\u5230\u7684\u7279\u5f81\u62fc\u63a5\u8d77\u6765\uff0c\u5f97\u5230\u7684\u7279\u5f81\u662f 16c+4c+c= 21c \u7ef4\u7684\u7279\u5f81\u3002\u5f88\u663e\u7136\uff0c\u8fd9\u4e2a\u8f93\u51fa\u7279\u5f81\u7684\u957f\u5ea6\u4e0ew\u3001h\u4e24\u4e2a\u503c\u662f\u65e0\u5173\u7684\uff0c\u56e0\u6b64**SPP\u6c60\u5316\u5c42\u53ef\u4ee5\u628a\u4efb\u610f\u5bbd\u5ea6\u3001\u9ad8\u5ea6\u7684\u5377\u79ef\u7279\u5f81\u8f6c\u6362\u4e3a\u56fa\u5b9a\u957f\u5ea6\u7684\u5411\u91cf**\u3002","title":"FasterRcnn(15/06)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ssd1611","text":"\u8bba\u6587\u5730\u5740 | \u535a\u5ba2\u8be6\u89e3 \u7b80\u5355\u601d\u60f3:\u4f7f\u7528\u4e00\u79cd\u5168\u5377\u79ef\u7f51\u7edc(\u9b54\u6539\u4e86vgg16)\uff0c\u7136\u540e\u4f7f\u7528\u591a\u5c3a\u5ea6\u7279\u5f81\u56fe\u505a\u68c0\u6d4b\uff0c\u5e76\u4e14\u4f7f\u7528\u4e86\u4e0d\u540c\u957f\u5bbd\u7684\u5148\u9a8c\u6846 \u7b80\u5355\u6b65\u9aa4 \u9b54\u6539vgg16 \u5c06VGG16\u7684FC6\u548cFC7\u5c42\u8f6c\u5316\u4e3a\u5377\u79ef\u5c42\uff0c\u540e\u9762\u52a0\u4e86\u56db\u5c42\u5377\u79ef\uff0cconv4,7,8,9,10,11,\u51716\u4e2a\u7279\u5f81\u56fe\u3002\u6bcf\u4e2a\u7279\u5f81\u56fe\u7684\u6bcf\u4e00\u4e2a\u70b9\u6784\u90204/6( 4,6,6,6,4,4 )\u4e2a\u4e0d\u540c\u5c3a\u5ea6\u5927\u5c0f\u7684BB\uff0c\u7136\u540e\u5206\u522b\u8fdb\u884c\u68c0\u6d4b\u548c\u5206\u7c7b\uff0c\u5c06\u4e0d\u540cfeature map\u83b7\u5f97\u7684BB\u7ed3\u5408\u8d77\u6765(\u6620\u5c04\u5230\u539f\u56fe\u50cf)\uff0c\u7ecf\u8fc7NMS\u65b9\u6cd5\u6765\u6291\u5236\u6389\u4e00\u90e8\u5206\u91cd\u53e0\u6216\u8005\u4e0d\u6b63\u786e\u7684BB\uff0c\u751f\u6210\u6700\u7ec8\u7684BB\u96c6\u5408\uff08\u5373\u68c0\u6d4b\u7ed3\u679c\uff09 \u5148\u9a8c\u6846\u751f\u6210\uff1a Prior box \u9488\u5bf9 feature map \u4e2d\u7684\u6bcf\u4e2a\u70b9\u4f5c\u4e3a\u4e00\u4e2a cell \uff0c\u901a\u8fc7\u7b49\u6bd4\u653e\u7f29\u7684\u65b9\u6cd5\u6765\u627e\u5230\u539f\u56fe\u50cf\u4e2d\u5bf9\u5e94\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u5c06 cell \u4f5c\u4e3a\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u63d0\u53d6\u51fa\u4e0d\u540c\u5c3a\u5ea6\u7684 bounding box \u5019\u9009\u533a\u57df\uff0c\u8fd9\u4e9b\u5019\u9009\u533a\u57df\u53eb\u505a Prior box \u3002\u9488\u5bf9\u6bcf\u4e00\u4e2a Prior Box \u548c \u771f\u503cGT \u6bd4\u8f83\u4f1a\u5f97\u5230 label \u3002\u5bf9\u4e8e cell \u4f1a\u5bf9\u5e94\u5230\u4e0d\u540c\u7684 Prior Box \uff0c\u5206\u522b\u5f53\u524d Prior Box \u9884\u6d4b\u7c7b\u522b\u6982\u7387\u548c\u5750\u6807 (x,y,w,h) .\u5982\u679c\u9884\u6d4b\u7c7b\u522b\u5171\u6709 C \u7c7b\uff0c\u6700\u7ec8\u4e00\u4e2a Prior Box \u7684\u8f93\u51fa\u4e3a C+4 \u7ef4\u5ea6\uff0c\u6240\u4ee5 m*n \u7684\u7279\u5f81\u56fe\uff0c\u6bcf\u4e2a cell \u6709 K \u4e2a Prior box \uff0c\u8f93\u51fa\u7684\u7279\u5f81\u56fe\u7ef4\u5ea6\u662f: (C+4)*k*m*n \u5148\u9a8c\u6846\u751f\u6210\u89c4\u5219\uff1a \u6bcf\u4e00\u4e2a cell \u751f\u6210\u56fa\u5b9a\u7684 scale \u548c aspect ratio (\u7eb5\u6a2a\u6bd4)\u7684 box \uff0c\u7531\u56fe\u53ef\u77e5\uff0c SSD \u6700\u540e\u751f\u6210\u4e86 8732 \u4e2a\u5148\u9a8c\u6846\u3002 \u8bad\u7ec3 \u6b63\u8d1f\u6837\u672c\u786e\u5b9a: \u96be\u4f8b\u6316\u6398 \u6bcf\u4e00\u4e2a feature map cell \u4e0d\u662f k \u4e2a default box \u90fd\u53d6 prior box \u4e0e GT box \u505a\u5339\u914d\uff0c IOU >\u9608\u503c( 0.5 )\u4e3a\u6b63\u6837\u672c\uff0c\u901a\u8fc7\u96be\u4f8b\u6316\u6398\uff0c\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c\u6bd4\u4e3a 1:3 \u5206\u7c7b\u548c\u56de\u5f52(\u6bcf\u4e00\u4e2a\u7279\u5f81\u56fe\u90fd\u8981\u8fdb\u884c Detector&classifier ) \u6bd4\u5982block7( 19x19 )\uff0c\u9ed8\u8ba4\u6846\uff08def boxes\uff09\u6570\u76ee\u4e3a 6 \uff0c\u6bcf\u4e2a\u9ed8\u8ba4\u6846\u5305\u542b 4\u4e2a \u504f\u79fb\u4f4d\u7f6e\u548c 21=(20+1)\u4e2a \u7c7b\u522b\u7f6e\u4fe1\u5ea6 \uff084+21\uff09 \u3002\u56e0\u6b64\uff0c block7 \u7684\u6700\u540e\u8f93\u51fa\u4e3a (19*19)*6*(4+21) \u3002 \u63a8\u7406\u7684\u65f6\u5019\uff0c\u4ee3\u7801\u4e2d\u4f1a\u53d6 top200\u505anms \uff0c\u7136\u540e\u6839\u636e\u9608\u503c\u7b5b\u9009\u5373\u53ef Loss\uff1a\u5206\u7c7b\u662f softmax \uff0c\u56de\u5f52\u662f Smooth L1 Loss \uff0c\u4e24\u4e2aloss\u7528\u53c2\u6570 alpha \u8c03\u6574\u6743\u91cd\u6bd4\u4f8b \u5148\u9a8c\u6846\u548c\u76ee\u6807\u7c7b\u522b\u7684\u7f6e\u4fe1\u5ea6loss+\u4f4d\u7f6e\u56de\u5f52loss\uff0c\u5176\u4e2dN\u662fmatch\u5230Ground Truth\u7684default box\u6570\u91cf\uff1b\u800calpha\u53c2\u6570\u7528\u4e8e\u8c03\u6574confidence loss\u548clocation loss\u4e4b\u95f4\u7684\u6bd4\u4f8b\uff0c\u9ed8\u8ba4alpha=1\u3002 \u7f6e\u4fe1\u5ea6loss \u56de\u5f52loss \u7f3a\u70b9 \u5728 SSD \u4e2d\uff0c\u4e0d\u540c\u5c42\u7684 feature map \u90fd\u662f\u72ec\u7acb\u4f5c\u4e3a\u5206\u7c7b\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u56e0\u6b64\u5bb9\u6613\u51fa\u73b0\u76f8\u540c\u7269\u4f53\u88ab\u4e0d\u540c\u5927\u5c0f\u7684\u6846\u540c\u65f6\u68c0\u6d4b\u51fa\u6765\uff08\u4e0d\u540c\u7279\u5f81\u56fe\u4e4b\u95f4\u7f3a\u4e4f\u7f3a\u4e4f\u8054\u7cfb\uff09 SSD\u7b97\u6cd5\u5bf9**\u5c0f\u76ee\u6807\u4e0d\u591f\u9c81\u68d2**\u7684\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f**\u6d45\u5c42**feature map\u7684**\u8868\u5f81\u80fd\u529b\u4e0d\u591f\u5f3a**","title":"SSD(16/11)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#dssd1701","text":"\u8bba\u6587:ssd\u539f\u4f5c\u8005 \uff1aSSD\u7b97\u6cd5\u5bf9**\u5c0f\u76ee\u6807\u4e0d\u591f\u9c81\u68d2**\u7684\u6700\u4e3b\u8981\u7684\u539f\u56e0\u662f**\u6d45\u5c42**feature map\u7684**\u8868\u5f81\u80fd\u529b\u4e0d\u591f\u5f3a**\uff0c\u8fd9\u7bc7\u8bba\u6587\u4e3b\u8981\u662f\u5728\u539f\u59cbSSD\u4e0a\u52a0\u5165\u4e86**\u53cd\u5377\u79ef**\u7528\u6765\u63d0\u5347\u8868\u5f81\u80fd\u529b\u3002","title":"DSSD(17/01)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#dsod1708","text":"\u8bba\u6587 | \u4ee3\u7801 DSOD=SSD+DenseNet \uff1a\u63d0\u51fa\u4e00\u79cd\u65b0\u7684dense\u7ed3\u6784\u7528\u4e8e\u878d\u5408\u591a\u5c3a\u5ea6\u4fe1\u606f\uff08\u76f8\u6bd4\u539f\u7248SSD\u7684\u4e00\u4e2a\u6539\u8fdb\uff09","title":"DSOD(17/08)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#fssd1712","text":"\u8bba\u6587 | pytorch \u4ee3\u7801 | caffe \u4ee3\u7801 FSSD=SSD+FPN FSSD\u4e2d\u5c06**\u8f83\u5c0f**\u7684\u7279\u5f81\u56fe\u4e0a\u91c7\u6837\u5230\u7edf\u4e00\u5c3a\u5bf8\uff0c\u901a\u8fc7 concat \u8fdb\u884c\u7279\u5f81\u8fde\u63a5\uff0c\u4f5c\u4e3a\u540e\u7eedSSD\u9884\u6d4b\u6a21\u5757\u7684\u8f93\u5165\u3002","title":"FSSD(17/12)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#rssd1705","text":"\u8bba\u6587 \u6539\u5584\u4e86SSD\u5b58\u5728\u7684\u4e24\u4e2a\u95ee\u9898 \u4e00\u65b9\u9762\u5229\u7528**\u5206\u7c7b\u7f51\u7edc**\u589e\u52a0\u4e0d\u540c\u5c42\u4e4b\u95f4\u7684feature map\u8054\u7cfb\uff0c\u51cf\u5c11\u91cd\u590d\u6846\u7684\u51fa\u73b0\uff1b \u53e6\u4e00\u65b9\u9762\u589e\u52a0 feature pyramid \u4e2dfeature map\u7684\u4e2a\u6570\uff0c\u4f7f\u5176\u53ef\u4ee5\u68c0\u6d4b\u66f4\u591a\u7684\u5c0f\u5c3a\u5bf8\u7269\u4f53\u3002 pooling\u65b9\u5f0f\u751f\u6210\u7279\u5f81\u91d1\u5b57\u5854 pooling \u662f\u964d\u7ef4\uff0c\u4ece\u5de6\u5f80\u53f3 concate \uff1a\u6700\u5de6\u8fb9\u7684 38*38 \u7684 feature map \uff0c\u5c06\u5176\u505a pooling \u540e\u548c\u53f3\u8fb9\u7b2c\u4e8c\u4e2a\u7684 19*19 \u7684 feature map\u505aconcate \uff0c\u8fd9\u6837\u5c31\u6709\u4e24\u4e2a 19*19 \u7684 feature map \u4e86\uff08\u4e00\u4e2a\u7ea2\u8272\uff0c\u4e00\u4e2a\u6a59\u8272\uff09\uff1b\u7136\u540e\u518d\u5bf9\u8fd9\u4e24\u4e2a 19*19 \u7684 feature map \u505a pooling \uff0c\u518d\u548c\u5de6\u8fb9\u7b2c\u4e09\u4e2a\u9ec4\u8272\u7684 10*10 \u7684 feature map \u505a concate \u2026\u2026 deconvolusion\u53cd\u5377\u79ef\u65b9\u5f0f\u751f\u6210\u7279\u5f81\u91d1\u5b57\u5854 \u53cd\u5377\u79ef\u662f\u5347\u7ef4\uff0c\u4ece\u53f3\u5230\u5de6\uff0c\u6700\u53f3\u8fb9\u7684 1*1 \u7684\u7d2b\u8272feature map\u5f80\u5de6\u505aconcate \u4f5c\u8005\u8ba4\u4e3a\u524d\u4e24\u79cd\u7279\u5f81\u878d\u5408\u65b9\u5f0f\u7684\u7f3a\u70b9\u5728\u4e8e\u4fe1\u606f\u7684\u4f20\u9012\u90fd\u662f\u5355\u5411\u7684\uff0c\u8fd9\u6837\u5206\u7c7b\u7f51\u7edc\u5c31\u6ca1\u6cd5\u5229\u7528\u5176\u5b83\u65b9\u5411\u7684\u4fe1\u606f\uff0c\u56e0\u6b64\u5c31\u6709\u4e86 both pooling and deconvolution\uff08Rainbow concatenation\uff09 Rainbow concatenation \u7528\u4e0d\u540c\u989c\u8272\u7684\u77e9\u5f62\u6846\u8868\u793a\u4e0d\u540c\u5c42\u7684 feature map (\u7ec4\u5408\u8d77\u6765\u50cf\u5f69\u8679)\uff0c\u540c\u65f6\u91c7\u7528 pooling\u548cdeconvolution \u8fdb\u884c\u7279\u5f81\u878d\u5408\uff0c\u4ece\u5de6\u81f3\u53f3\uff08 pooling\uff0cconcate \uff09\u548c\u4ece\u53f3\u81f3\u5de6\uff08 deconvolution\uff0cconcate \uff09 \u5728\u505a concate \u4e4b\u524d\u90fd\u4f1a\u5bf9 feature map \u505a\u4e00\u4e2a normalization \u64cd\u4f5c\uff0c\u56e0\u4e3a\u4e0d\u540c\u5c42\u7684 feature map \u7684 scale \u662f\u4e0d\u540c\u7684\uff0c\u6587\u4e2d\u7684 normalization \u65b9\u5f0f\u91c7\u7528 batch normalization","title":"RSSD(17/05)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#rfbnet1711","text":"\u8bba\u6587\u5730\u5740 \u4e3b\u8981\u601d\u60f3:\u63d0\u51fa\u4e86RFB\u6a21\u5757\uff0c\u5e76\u5c06\u5b83\u6dfb\u52a0\u5230SSD\u7684\u9876\u90e8\uff0c\u6784\u5efa\u4e86RFBnet\uff0cInception\u601d\u60f3(\u5e76\u8054)+\u7a7a\u6d1e\u5377\u79ef:\u589e\u5927\u611f\u53d7\u91ce,\u603b\u800c\u8a00\u4e4b:\u51fa\u53d1\u70b9\u662f\u6a21\u62df\u4eba\u7c7b\u89c6\u89c9\u7684\u611f\u53d7\u91ce\u8fdb\u884cRFB\u7ed3\u6784\u7684\u8bbe\u8ba1 RFB\u6a21\u5757 * \u53c2\u8003\u4e86`Inception\u7ed3\u6784`\uff0cRFB\u6a21\u5757\u5f15\u7528\u4e86\u4e0d\u540c\u5c3a\u5bf8\u7684\u5377\u79ef\u6838(`1x1,3x3,5x5`)\u6784\u6210\u5e76\u8054\u5206\u652f\u3002 * \u7a7a\u6d1e\u5377\u79ef\u5c42(`3x3 rate=1`,`3x3 rate=3`,`3x3 rate=5`) RFB\u7ed3\u6784\u4e2d\u6700\u540e\u4f1a\u5c06\u4e0d\u540c\u5c3a\u5bf8\u548crate\u7684\u5377\u79ef\u5c42\u8f93\u51fa\u8fdb\u884cconcat\uff0c\u8fbe\u5230\u878d\u5408\u4e0d\u540c\u7279\u5f81\u7684\u76ee\u7684\u3002( 1x1 \u5377\u79ef) \u7f51\u7edc\u7ed3\u6784 RFB\u6a21\u5757 RFB-s\u6a21\u5757 RFB-s\u548cRFB\u76f8\u6bd4\u4e3b\u8981\u6709\u4e24\u4e2a\u6539\u8fdb \u4e00\u65b9\u9762\u7528 3*3\u5377\u79ef\u5c42 \u4ee3\u66ff 5*5\u5377\u79ef\u5c42 \u53e6\u4e00\u65b9\u9762\u7528 1*3 \u548c 3*1 \u5377\u79ef\u5c42\u4ee3\u66ff 3*3 \u5377\u79ef\u5c42\uff0c\u4e3b\u8981\u76ee\u7684\u5e94\u8be5\u662f\u4e3a\u4e86\u51cf\u5c11\u8ba1\u7b97\u91cf\uff0c\u7c7b\u4f3cInception\u540e\u671f\u7248\u672c\u5bf9Inception\u7ed3\u6784\u7684\u6539\u8fdb\u3002 \u7f51\u7edc\u7ed3\u6784(\u5bf9ssd\u8f7b\u5fae\u6539\u52a8) \u4e3b\u5e72\u7f51\u7edc\u4e0a\u7528\u4e24\u4e2aRFB\u7ed3\u6784\u66ff\u6362\u539f\u6765\u65b0\u589e\u7684\u4e24\u5c42\u3002 conv4_3\u548cconv7_fc\u5728\u63a5\u9884\u6d4b\u5c42\u4e4b\u524d\u5206\u522b\u63a5RFB-s\u548cRFB\u7ed3\u6784","title":"RFBNet(17/11)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#refinedet1711","text":"\u8bba\u6587\u5730\u5740 \u4fdd\u8bc1 SSD \u9ad8\u6548\u7684\u524d\u63d0\u4e0b\u63d0\u5347\u68c0\u6d4b\u6548\u679c(\u505a\u6cd5:\u7ed3\u5408 one stage + two stage )\uff1aSSD+RPN+FPN\u7684\u601d\u60f3\u3002 \u5f15\u5165two stage\u7684object detection\u4e2d\u7684\u5bf9box\u7531\u7c97\u5230\u7ec6\u7684\u56de\u5f52\u601d\u60f3( RPN\u5148\u7c97\u7c92\u5ea6\u56de\u5f52box\u4fe1\u606f+\u4e00\u4e2a\u5e38\u89c4\u56de\u5f52\u5206\u652f\u5f97\u5230\u66f4\u51c6\u786e\u7684\u6846\u4fe1\u606f ) \u5f15\u5165\u7c7b\u4f3c**FPN\u7f51\u7edc\u7684\u7279\u5f81\u878d\u5408\u64cd\u4f5c**\uff0c\u53ef\u4ee5\u6709\u6548\u63d0\u9ad8\u5bf9**\u5c0f\u76ee\u6807\u7684\u68c0\u6d4b\u6548\u679c**\uff0c\u68c0\u6d4b\u7f51\u7edc\u7684\u6846\u67b6\u8fd8\u662f**SSD**\u3002 \u7f51\u7edc\u642d\u5efa \u4ee5\u7279\u5f81\u63d0\u53d6\u7f51\u7edc\u4e3aResNet101\u4e3a\u4f8b \u8f93\u5165\u56fe\u50cf\u5927\u5c0f\u4e3a 320*320 \u4e3a\u4f8b\uff0c\u5728 ARM \u90e8\u5206\u76844\u4e2a\u7070\u8272\u77e9\u5f62\u5757\uff08feature map\uff09\u7684size\u5206\u522b\u662f 40*40,20*20,10*10,5*5 \uff0c\u5176\u4e2d\u524d\u4e09\u4e2a\u662f ResNet101 \u7f51\u7edc\u672c\u8eab\u7684\u8f93\u51fa\u5c42\uff0c\u6700\u540e 5*5 \u8f93\u51fa\u662f\u53e6\u5916\u6dfb\u52a0\u7684\u4e00\u4e2aresidual block\u3002 \u6709\u4e86\u7279\u5f81\u63d0\u53d6\u7684\u4e3b\u7f51\u7edc\u540e\uff0c\u5c31\u8981\u5f00\u59cb\u505a**\u878d\u5408\u5c42\u64cd\u4f5c**\u4e86\uff0c\u9996\u5148\u662f 5*5 \u7684feature map\u7ecf\u8fc7\u4e00\u4e2atransfer connection block\u5f97\u5230\u5bf9\u5e94\u5927\u5c0f\u7684\u84dd\u8272\u77e9\u5f62\u5757\uff08P6\uff09,\u5bf9\u4e8e\u751f\u6210P6\u7684\u8fd9\u6761\u652f\u8def\u800c\u8a00\u53ea\u662f3\u4e2a\u5377\u79ef\u5c42\u800c\u5df2\u3002\u63a5\u7740\u57fa\u4e8e 10*10 \u7684\u7070\u8272\u77e9\u5f62\u5757\uff08feature map\uff09\u7ecf\u8fc7transfer connection block\u5f97\u5230\u5bf9\u5e94\u5927\u5c0f\u7684\u84dd\u8272\u77e9\u5f62\u5757\uff08P5\uff09\uff0c\u6b64\u5904\u7684transfer connection block\u76f8\u6bd4P6\u589e\u52a0\u4e86**\u53cd\u5377\u79ef\u652f\u8def**\uff0c\u53cd\u5377\u79ef\u652f\u8def\u7684\u8f93\u5165\u6765\u81ea\u4e8e\u751f\u6210P6\u7684\u4e2d\u95f4\u5c42\u8f93\u51fa\u3002P4\u548cP3\u7684\u751f\u6210\u4e0eP5\u540c\u7406\u3002 \u7f51\u7edc\u7ed3\u6784\u601d\u60f3 \u4e0a\u9762\u8fd9\u4e2a\u7f51\u7edc\u7c7b\u4f3c\u4e24\u9636\u6bb5:\u4e00\u4e2a\u5b50\u6a21\u5757\u505aRPN\u7684\u4e8b\uff0c\u53e6\u4e00\u4e2a\u5b50\u6a21\u5757\u505aSSD\u7684\u4e8b\u3002 ARM \u90e8\u5206\u626e\u6f14\u4e86 RPN \u7f51\u7edc\u7684\u89d2\u8272:\u53bb\u9664\u4e00\u4e9b\u8d1f\u6837\u672c(\u56e0\u4e3a\u8d1f\u6837\u672c\u6570\u91cf>\u6b63\u6837\u672c\u6570\u91cf)\uff0c\u5f97\u5230\u4e86\u8f83\u4e3a\u7cbe\u7ec6\u7684boxes\u3002\u5e76\u4e14 ARM \u90e8\u5206\u8f93\u5165\u5229\u7528\u4e86\u591a\u5c42\u7279\u5f81\uff0c\u800cRPN\u7f51\u7edc\u7684\u8f93\u5165\u662f\u5355\u5c42\u7279\u5f81\u3002\u57fa\u4e8e4\u5c42\u7279\u5f81\u6700\u540e\u5f97\u5230\u7684\u8fd8\u662f\u4e24\u6761\u652f\u8def\uff0c\u4e00\u4e2abbox\u7684\u5750\u6807\u56de\u5f52\u652f\u8def\uff0c\u53e6\u4e00\u4e2a\u662fbbox\u7684\u4e8c\u5206\u7c7b\u652f\u8def\u3002 \u6ce8\u610f:IOU\u9608\u503c\u8bbe\u7f6e\u4e3a0.5\u4f1a\u6709\u5f88\u591a\u80cc\u666f\u6807\u7b7e(\u8d1f\u6837\u672c)\uff0c ARM \u7ed3\u6784\u867d\u7136\u53ef\u4ee5\u8fc7\u6ee4\u6389\u4e00\u4e9b\u8d1f\u6837\u672c\uff0c\u4f46\u63a5\u4e0b\u6765\u8fd8\u662f\u8981\u91c7\u7528\u7c7b\u4f3cSSD\u7b97\u6cd5\u4e2d\u7684 hard negative mining \u6765\u8bbe\u5b9a\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\uff08\u4e00\u822c\u8bbe\u5b9a\u4e3a1:3\uff09\uff0c\u5f53\u7136\u8d1f\u6837\u672c\u4e0d\u662f\u968f\u673a\u9009\u7684\uff0c\u800c\u662f\u6839\u636ebox\u7684\u5206\u7c7bloss\u6392\u5e8f\u6765\u9009\u7684\uff0c\u6309\u7167\u6307\u5b9a\u6bd4\u4f8b\u9009\u62e9loss\u6700\u9ad8\u7684\u90a3\u4e9b\u8d1f\u6837\u672c\u5373\u53ef\u3002 TCB \u90e8\u5206\u662f\u505a\u7279\u5f81\u7684\u8f6c\u6362\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662f\u5c06 ARM \u90e8\u5206\u7684\u8f93\u51fafeature map\u8f6c\u6362\u6210 ODM \u90e8\u5206\u7684\u8f93\u5165\uff0c\u8fd9\u90e8\u5206\u5176\u5b9e\u548cFPN\u7b97\u6cd5\u7684\u7279\u5f81\u878d\u5408\u5f88\u50cf\uff0cFPN\u4e5f\u662f\u8fd9\u6837\u7684upsample\u540e\u878d\u5408\u7684\u601d\u60f3\u3002 ODM \u90e8\u5206\u5c31\u662fSSD\u4e86,\u4e5f\u662f\u878d\u5408\u4e0d\u540c\u5c42\u7684\u7279\u5f81\uff0c\u7136\u540e\u505a\u591a\u5206\u7c7b\u548c\u56de\u5f52\u3002\u4e0d\u540c\u4e8eSSD\u7684\u4e24\u65b9\u9762: \u8f93\u5165\u7684 anchors \u662f ARM \u90e8\u5206\u5f97\u5230\u7684\u7cbe\u51c6 anchors (\u7c7b\u4f3cRPN\u7f51\u7edc\u8f93\u51fa\u7684proposal) \u53e6\u4e00\u65b9\u9762\u548cFPN\u7b97\u6cd5\u7c7b\u4f3c(\u591a\u5c3a\u5ea6\u878d\u5408)\uff0c\u5bf9SSD\u505a\u4e86\u6539\u8fdb\u3002 \u5728SSD\u4e2d\u6d45\u5c42\u7684feature map\u662f\u76f4\u63a5\u62ff\u6765\u7528\u7684\uff08\u5e76\u6ca1\u6709\u548c\u9ad8\u5c42\u7684feature map\u878d\u5408\uff09\uff0c\u4e5f\u5c31\u662f\u5bf9bbox\u7684\u9884\u6d4b\u662f\u5728\u6bcf\u4e00\u5c42\u4e0a\u8fdb\u884c\u7684\uff0c\u9884\u6d4b\u5f97\u5230\u7ed3\u679c\u540e\u518d\u5c06\u5404\u5c42\u7ed3\u679c\u6574\u5408\u5728\u4e00\u8d77\u3002 \u800c\u8fd9\u91cc\u7684\u6d45\u5c42feature map\uff08size\u8f83\u5927\u7684\u84dd\u8272\u77e9\u5f62\u5757\uff09\u878d\u5408\u4e86\u9ad8\u5c42feature map\u7684\u4fe1\u606f\uff0c\u7136\u540e\u9884\u6d4bbbox\u662f\u57fa\u4e8e\u6bcf\u5c42feature map\uff08\u6bcf\u4e2a\u84dd\u8272\u77e9\u5f62\u5757\uff09\u8fdb\u884c\uff0c\u6700\u540e\u5c06\u5404\u5c42\u7ed3\u679c\u518d\u6574\u5408\u5230\u4e00\u8d77\u3002 \u8fd9\u662f\u975e\u5e38\u91cd\u8981\u7684\u533a\u522b\uff1a \u8fd9\u6837\u505a\u7684\u597d\u5904\u5c31\u662f\u5bf9\u5c0f\u76ee\u6807\u7269\u4f53\u7684\u68c0\u6d4b\u6548\u679c\u66f4\u597d \uff0c\u8fd9\u5728FPN\u548cRON\u7b49\u7b97\u6cd5\u4e2d\u5df2\u7ecf\u8bc1\u660e\u8fc7\u4e86\u3002 \u635f\u5931\u51fd\u6570 ARM\u90e8\u5206\u5305\u542bbinary classification\u635f\u5931Lb\u548c\u56de\u5f52\u635f\u5931Lr ODM\u90e8\u5206\u5305\u542bmulti-class classification\u635f\u5931Lm\u548c\u56de\u5f52\u635f\u5931Lr\u3002","title":"RefineDet(17/11:\u5c0f\u76ee\u6807)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#segnet1511","text":"\u8bba\u6587\u5730\u5740 \u4f7f\u7528 VGG16 \u7f51\u7edc\uff0c\u53bb\u6389\u5168\u8fde\u63a5\u5c42\uff0c\u642d\u5efa\u5bf9\u79f0\u6a21\u578b\u30022016\u5e74\uff0cSegnet\u7814\u7a76\u7ec4\u5728\u539f\u6709\u7f51\u7edc\u6846\u67b6\u57fa\u7840\u52a0\u5165\u4e86\u8df3\u8dc3\u8fde\u63a5\uff0c\u7b97\u662f\u6709\u4e86\u8fdb\u4e00\u6b65\u53d1\u5c55\u3002 Segnet \u8bed\u4e49\u5206\u5272\u7f51\u7edc\u7684\u5173\u952e\u5728\u4e8e\u4e0b\u91c7\u6837\u548c\u4e0a\u91c7\u6837\u3002\u5728\u4e0a\u91c7\u6837(\u53cd\u5377\u79ef)\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e0b\u91c7\u6837\u65f6\u8bb0\u5f55\u7684 Max Value \u50cf\u7d20\u4f4d\u7f6e\u6307\u6807\uff0c\u8fd9\u6837\u505a\u7684\u597d\u5904\u662f\u9632\u6b62\u8fb9\u7f18\u4fe1\u606f\u7684\u4e22\u5931(ENet\u4e2d\u4e5f\u4f7f\u7528\u4e86)\u3002","title":"SegNet(15/11)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#enet1606","text":"\u8bba\u6587\u5730\u5740 \u5b9e\u65f6\u8bed\u4e49\u5206\u5272 : \u8981\u60f3\u5728\u79fb\u52a8\u7ec8\u7aef\u6216\u8005\u5d4c\u5165\u5f0f\u7cfb\u7edf\u4e0a\u5e94\u7528\uff0c\u5c0f\u5de7\u9ad8\u901f\u662f\u5f88\u91cd\u8981\u7684\u3002ENet\u5728\u8ffd\u6c42\u9ad8\u6548\u7387\u7684\u540c\u65f6\u517c\u987e\u4e86\u7cbe\u5ea6 \u521d\u59cb\u5316\u5c42 :\u538b\u7f29\u8f93\u5165\u56fe\u7247\u7684\u5206\u8fa8\u7387\uff0c\u51cf\u5c11\u8ba1\u7b97\u91cf\u3002\u56e0\u4e3a\u76f4\u63a5\u4f7f\u7528\u539f\u59cb\u5206\u8fa8\u7387\u4ee3\u4ef7\u8f83\u9ad8\uff0c\u800c\u4e14\u89c6\u89c9\u4fe1\u606f\u5b58\u5728\u5927\u91cf\u5197\u4f59\uff0c\u9700\u8981\u5bf9\u8f93\u5165\u505a\u4e00\u4e2a\u9884\u5904\u7406\uff0c\u5148\u7528\u4e00\u5c42\u7f51\u7edc\u8bb2\u8fd9\u4e9b\u4fe1\u606f\u6d53\u7f29\uff0c\u5f53\u7136**\u8fd9\u4e00\u6b65\u7684\u7279\u5f81\u56fe\u4e2a\u6570(\u901a\u9053\u4e2a\u6570)\u4e0d\u7528\u592a\u591a\uff0c16\u4e0e32\u6548\u679c\u51e0\u4e4e\u76f8\u540c\u3002** \u4e0b\u91c7\u6837(\u8fb9\u7f18\u4fe1\u606f\u4e22\u5931\u95ee\u9898):\u5355\u72ec\u5b58\u50a8\u8fb9\u7f18\u4fe1\u606f,\u7136\u540e\u4e0a\u91c7\u6837\u6062\u590d\u65f6\u4f7f\u7528\u4e4b\u524d\u4fdd\u5b58\u7684\u8fb9\u7f18\u4fe1\u606f( SegNet\u65b9\u6848 ) \u4e0d\u540c\u4e8e\u666e\u901a\u7684\u7f16\u89e3\u7801\u7ed3\u6784(\u7ed3\u6784\u4e0a\u5b8c\u5168\u5bf9\u7b49)\uff0c \u4f5c\u8005\u7684\u7f16\u7801\u5668\u89c4\u6a21\u5927\u4e00\u4e9b\uff0c**\u56e0\u4e3a\u8981**\u7528\u6765\u63d0\u53d6\u4fe1\u606f\uff1b**\u4f46\u662f**\u89e3\u7801\u5668\u672c\u8d28\u4e0a\u53ea\u662f\u5bf9\u7f16\u7801\u5668\u7ed3\u679c\u7684\u7ec6\u8282\u7cbe\u8c03\uff0c**\u56e0\u6b64**\u89c4\u6a21\u53ef\u4ee5\u51cf\u5c0f \uff0c\u8fd9\u6837\u4e5f\u7f29\u5c0f\u4e86\u7f51\u7edc\u4f53\u79ef\uff0c\u52a0\u901f\u4e86\u8fd0\u7b97\u3002 \u7ecf\u8fc7\u4f5c\u8005\u7684\u6d4b\u8bd5,\u5728ENet\u4e2d\u4f7f\u7528ReLU\u975e\u7ebf\u6027\u6fc0\u6d3b\u51fd\u6570\u53cd\u800c\u964d\u4f4e\u4e86ENet\u7684\u7cbe\u5ea6(\u539f\u56e0:\u4f5c\u8005\u63a8\u8bba\u7f51\u7edc\u672c\u8eab\u8f83\u6d45)\uff0c\u6240\u4ee5\u4f7f\u7528\u4e86 PReLu \u7cbe\u5ea6\u53cd\u800c\u8f83\u9ad8\u3002 \u5bf9\u79f0\u5377\u79ef(\u4f4e\u9636\u8fd1\u4f3c) \uff1a\u8003\u8651\u5230\u5377\u79ef\u5c42\u6743\u91cd\u5176\u5b9e\u6709\u76f8\u5f53\u5927\u7684\u5197\u4f59\uff0c\u53ef\u4ee5\u7528 nx1\u548c1xn \u7684\u4e24\u4e2a\u5377\u79ef\u5c42\u7ea7\u8054\uff08\u5bf9\u79f0\u5377\u79ef\uff09\u6765\u66ff\u4ee3\u4e00\u4e2a nxn \u7684\u5377\u79ef\u5c42\u6765\u7f29\u5c0f\u8ba1\u7b97\u91cf\u3002\u5177\u4f53\u5730\uff0c\u7528n=5\u7684\u5bf9\u79f0\u5377\u79ef\u7684\u8ba1\u7b97\u91cf\u8fd1\u4f3c\u4e8e\u4e00\u4e2a3x3\u7684\u666e\u901a\u5377\u79ef\uff0c\u4f46\u662f\u7531\u4e8e\u5f15\u5165\u4e86\u975e\u7ebf\u6027\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u8fd8\u80fd\u591f\u589e\u52a0\u51fd\u6570\u7684\u591a\u6837\u6027 \u7a7a\u6d1e\u5377\u79ef \uff1a\u7a7a\u6d1e\u5377\u79ef\u53ef\u4ee5\u51cf\u5c0f\u8ba1\u7b97\u91cf\u3001\u589e\u5927\u611f\u53d7\u91ce\u3002\u4e3a\u4e86\u4f7f\u7a7a\u6d1e\u5377\u79ef\u53d1\u6325\u6700\u5927\u7684\u4f5c\u7528\uff0cENet\u4e2d\u7a7f\u63d2\u5730\u4f7f\u7528\u4e86\u666e\u901a\u5377\u79ef\u3001\u5bf9\u79f0\u5377\u79ef\u548c\u7a7a\u6d1e\u5377\u79ef\u3002","title":"ENet(16/06)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#fpn1612","text":"\u8bba\u6587\u5730\u5740 FPN\u4e3b\u8981\u89e3\u51b3\u7684\u662f\u7269\u4f53\u68c0\u6d4b\u4e2d\u7684\u591a\u5c3a\u5ea6\u95ee\u9898\uff0c\u901a\u8fc7\u7b80\u5355\u7684\u7f51\u7edc\u8fde\u63a5\u6539\u53d8\uff0c\u5728\u57fa\u672c\u4e0d\u589e\u52a0\u539f\u6709\u6a21\u578b\u8ba1\u7b97\u91cf\u60c5\u51b5\u4e0b\uff0c\u5927\u5e45\u5ea6\u63d0\u5347\u4e86\u5c0f\u7269\u4f53\u68c0\u6d4b\u7684\u6027\u80fd\u3002 \u8fd9\u91cc\u7684\u4e0a\u91c7\u6837\u76f4\u63a5\u4f7f\u7528\u7684\u662f**\u6700\u8fd1\u90bb\u4e0a\u91c7\u6837(\u76f4\u63a5\u5bf9\u4e34\u8fd1\u5143\u7d20\u8fdb\u884c\u590d\u5236)**\uff0c\u800c\u4e0d\u662f\u4f7f\u7528\u7ebf\u6027\u63d2\u503c\u6216\u53cd\u5377\u79ef\u64cd\u4f5c\uff0c\u4e00\u65b9\u9762\u7b80\u5355\uff0c\u53e6\u5916\u4e00\u65b9\u9762\u53ef\u4ee5\u51cf\u5c11\u8bad\u7ec3\u53c2\u6570\u3002 \u8fdb\u884c 1 * 1 \u7684\u5377\u79ef\uff0c\u4ee5\u8c03\u6574\u901a\u9053\u6570\u548c\u4e0a\u91c7\u6837\u7684\u7ed3\u679c\u76f8\u540c\u3002 \u76f8\u52a0:\u662f\u6307\u7279\u5f81\u56fe\u7684\u957f\u5bbd\u76f8\u540c\uff0c\u901a\u9053\u6570\u56fa\u5b9a\u4e3a 256 \uff0c\u9010\u5143\u7d20\u76f8\u52a0\u3002 \u76f8\u52a0\u4e4b\u540e\uff0c \u5bf9\u76f8\u52a0\u7684\u7ed3\u679c\u8fdb\u884c 3*3 \u7684\u5377\u79ef\uff0c\u4ee5\u6d88\u9664\u4e0a\u91c7\u6837\u7684\u6df7\u6dc6\u73b0\u8c61\uff08aliasing effect\uff09","title":"FPN(16/12)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#maskrcnn1703","text":"\u8bba\u6587\u5730\u5740 MaskRCNN\u662f\u5728FasterRCNN\u7684\u57fa\u7840\u4e0a\u6539\u8fdb\u7684\uff0c\u4e3b\u5e72\u7f51\u7edc\u6362\u6210\u4e86ResNet-FPN,\u589e\u52a0\u4e86RoiAlign,FCN\u9884\u6d4bmask\u5206\u652f ResNet-FPN \u5b9e\u9645\u4e0a\uff0c \u4e0a\u56fe\u5c11\u7ed8\u5236\u4e86\u4e00\u4e2a\u5206\u652f \uff1aM5\u7ecf\u8fc7\u6b65\u957f\u4e3a 2 \u7684max pooling\u4e0b\u91c7\u6837\u5f97\u5230 P6 \uff0c\u4f5c\u8005\u6307\u51fa\u4f7f\u7528P6\u662f\u60f3\u5f97\u5230\u66f4\u5927\u7684anchor\u5c3a\u5ea6 512\u00d7512 \u3002 \u4f46 P6 \u662f\u53ea\u7528\u5728 RPN\u4e2d\u7528\u6765\u5f97\u5230region proposal\u7684\uff0c\u5e76\u4e0d\u4f1a\u4f5c\u4e3a\u540e\u7eedFast RCNN\u7684\u8f93\u5165 ResNet-FPN\u4f5c\u4e3aRPN\u8f93\u5165\u7684feature map\u662f [P 2, P 3, P 4, P 5, P 6]\uff0c\u800c\u4f5c\u4e3a\u540e\u7eed Fast RCNN \u7684\u8f93\u5165\u5219\u662f[P 2, P 3, P 4, P 5] Resnet-FPN\u4ea7\u751f\u4e86\u5927\u5c0f\u4e0d\u540c\u7684\u4e94\u4e2a\u7279\u5f81\u56fe[P 2, P 3, P 4, P 5, P 6]\uff0c\u8fd9\u4e9b\u7279\u5f81\u56fe\u5404\u81ea\u7ecf\u8fc7RPN\u5c42\u4ea7\u751f\u5f88\u591a\u5148\u9a8c\u6846\uff0c\u4f46\u662f\u7528\u4e8e\u6620\u5c04\u5230\u7279\u5f81\u56fe\u7684\u53ea\u6709[P 2, P 3, P 4, P 5]\u6ca1\u6709 P6 \uff0c\u4e5f\u5c31\u662f\u8bf4\u8981\u5728[P 2, P 3, P 4, P 5]\u4e2d\u6839\u636e region proposal \u5207\u51fa ROI \u8fdb\u884c\u540e\u7eed\u7684\u5206\u7c7b\u548c\u56de\u5f52\u9884\u6d4b \u3002 \u6211\u4eec\u8981\u9009\u62e9\u54ea\u4e2afeature map\u6765\u5207\u51fa\u8fd9\u4e9bROI\u533a\u57df\u624d\u7b97\u6700\u5408\u9002\u7684feature map\u5462\uff1f \u5927\u5c3a\u5ea6\u7684ROI\u8981\u4ece\u4f4e\u5206\u8fa8\u7387\u7684feature map\u4e0a\u5207\uff0c\u6709\u5229\u4e8e\u68c0\u6d4b\u5927\u76ee\u6807\uff0c\u5c0f\u5c3a\u5ea6\u7684ROI\u8981\u4ece\u9ad8\u5206\u8fa8\u7387\u7684feature map\u4e0a\u5207\uff0c\u6709\u5229\u4e8e\u68c0\u6d4b\u5c0f\u76ee\u6807 RoiAlign(roi\u7279\u5f81\u56fe\u8f93\u9001\u5230roipooling) Faster Rcnn\u7684\u4e24\u6b21\u6574\u6570\u5316 region proposal \u7684(x,y,w,h)\u901a\u5e38\u662f**\u5c0f\u6570**\uff0c\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c\u4f1a\u628a\u5b83\u6574\u6570\u5316\u3002 \u5c06\u6574\u6570\u5316\u540e\u7684\u8fb9\u754c\u533a\u57df\u5e73\u5747\u5206\u5272\u6210 k x k \u4e2a\u5355\u5143\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u5355\u5143\u7684\u8fb9\u754c\u8fdb\u884c\u6574\u6570\u5316\u3002 ROI Align\u65b9\u6cd5\u53d6\u6d88\u6574\u6570\u5316\u64cd\u4f5c\uff0c\u4fdd\u7559\u4e86\u5c0f\u6570\uff0c\u4f7f\u7528\u53cc\u7ebf\u6027\u63d2\u503c\u7684\u65b9\u6cd5\u83b7\u5f97\u5750\u6807\u4e3a\u6d6e\u70b9\u6570\u7684\u50cf\u7d20\u70b9\u4e0a\u7684\u56fe\u50cf\u6570\u503c \u635f\u5931\u51fd\u6570 \u5047\u8bbe\u4e00\u5171\u6709 K \u4e2a\u7c7b\u522b\uff0c\u5219 mask \u5206\u5272\u5206\u652f\u7684\u8f93\u51fa\u7ef4\u5ea6\u662f K * m * m \uff0c\u5bf9\u4e8e m*m \u4e2d\u7684\u6bcf\u4e2a\u70b9\uff0c\u90fd\u4f1a\u8f93\u51fa K \u4e2a\u4e8c\u503cMask\uff08\u6bcf\u4e2a\u7c7b\u522b\u4f7f\u7528sigmoid\u8f93\u51fa\uff09\u3002 \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8ba1\u7b97loss\u7684\u65f6\u5019\uff0c \u5e76\u4e0d\u662f\u6bcf\u4e2a\u7c7b\u522b\u7684sigmoid\u8f93\u51fa\u90fd\u8ba1\u7b97\u4e8c\u503c\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u800c\u662f\u8be5\u50cf\u7d20\u5c5e\u4e8e\u54ea\u4e2a\u7c7b\uff0c\u54ea\u4e2a\u7c7b\u7684sigmoid\u8f93\u51fa\u624d\u8981\u8ba1\u7b97\u635f\u5931(\u5982\u56fe\u7ea2\u8272\u65b9\u5f62\u6240\u793a) \u3002\u5e76\u4e14\u5728\u6d4b\u8bd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u662f\u901a\u8fc7\u5206\u7c7b\u5206\u652f\u9884\u6d4b\u7684\u7c7b\u522b\u6765\u9009\u62e9\u76f8\u5e94\u7684mask\u9884\u6d4b\u3002 \u8fd9\u6837\uff0cmask\u9884\u6d4b\u548c\u5206\u7c7b\u9884\u6d4b\u5c31\u5f7b\u5e95\u89e3\u8026\u4e86 \u3002 \u8fd9\u4e0eFCN\u65b9\u6cd5\u662f\u4e0d\u540c\uff0c FCN\u662f\u5bf9\u6bcf\u4e2a\u50cf\u7d20\u8fdb\u884c\u591a\u7c7b\u522bsoftmax\u5206\u7c7b\uff0c\u7136\u540e\u8ba1\u7b97\u4ea4\u53c9\u71b5\u635f\u5931 \uff0c \u5f88\u660e\u663e\uff0c\u8fd9\u79cd\u505a\u6cd5\u662f\u4f1a\u9020\u6210\u7c7b\u95f4\u7ade\u4e89\u7684 \uff0c \u800c\u6bcf\u4e2a\u7c7b\u522b\u4f7f\u7528sigmoid\u8f93\u51fa\u5e76\u8ba1\u7b97\u4e8c\u503c\u635f\u5931\uff0c\u53ef\u4ee5\u907f\u514d\u7c7b\u95f4\u7ade\u4e89 \u3002\u5b9e\u9a8c\u8868\u660e\uff0c\u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u53ef\u4ee5\u8f83\u597d\u5730\u63d0\u5347\u6027\u80fd\u3002","title":"MaskRCNN(17/03)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ohem1604","text":"\u8bba\u6587\u5730\u5740 OHEM(FastRCNN\u4f5c\u4e3a\u57fa\u7840\u68c0\u6d4b\u7b97\u6cd5)\uff0c\u7528\u6765\u89e3\u51b3\u76ee\u6807\u4e0d\u5747\u8861\u95ee\u9898 \u5bf9RoI\u7684\u635f\u5931\u8fdb\u884c\u6392\u5e8f\uff0c\u8fdb\u884c\u4e00\u6b65NMS\u64cd\u4f5c\uff0c\u4ee5\u53bb\u9664\u6389\u91cd\u53e0\u4e25\u91cd\u7684RoI\uff0c\u5e76\u5728\u7b5b\u9009\u540e\u7684RoI\u4e2d\u9009\u62e9\u51fa\u56fa\u5b9a\u6570\u91cf\u635f\u5931\u8f83\u5927\u7684\u90e8\u5206\uff0c\u4f5c\u4e3a\u96be\u6837\u672c\u3002 \u5c06\u7b5b\u9009\u51fa\u7684\u96be\u6837\u672c\u8f93\u5165\u5230\u53ef\u8bfb\u5199\u7684b\u7f51\u7edc\u4e2d\uff0c\u8fdb\u884c\u524d\u5411\u8ba1\u7b97\uff0c\u5f97\u5230\u635f\u5931\u3002 \u5229\u7528b\u7f51\u7edc\u5f97\u5230\u7684\u53cd\u5411\u4f20\u64ad\u66f4\u65b0\u7f51\u7edc\uff0c\u5e76\u5c06\u66f4\u65b0\u540e\u7684\u53c2\u6570\u4e0e\u4e0a\u534a\u90e8\u7684a\u7f51\u7edc\u540c\u6b65\uff0c\u5b8c\u6210\u4e00\u6b21\u8fed\u4ee3\u3002 OHEM\u662f\u8fd1\u5e74\u5174\u8d77\u7684\u53e6\u4e00\u79cd\u7b5b\u9009example\u7684\u65b9\u6cd5\uff0c\u5b83\u901a\u8fc7\u5bf9loss\u6392\u5e8f\uff0c\u9009\u51faloss\u6700\u5927\u7684example\u6765\u8fdb\u884c\u8bad\u7ec3\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u8bad\u7ec3\u7684\u533a\u57df\u90fd\u662fhard example\u3002\u8fd9\u4e2a\u65b9\u6cd5\u6709\u4e2a\u7f3a\u9677\uff0c\u5b83\u628a\u6240\u6709\u7684easy example\u90fd\u53bb\u9664\u6389\u4e86\uff0c\u9020\u6210easy positive example\u65e0\u6cd5\u8fdb\u4e00\u6b65\u63d0\u5347\u8bad\u7ec3\u7684\u7cbe\u5ea6\u3002 OHEM\u7b97\u6cd5\u867d\u7136\u589e\u52a0\u4e86\u9519\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd\uff0c\u4f46\u662fOHEM\u7b97\u6cd5\u5ffd\u7565\u4e86\u5bb9\u6613\u5206\u7c7b\u7684\u6837\u672c\u3002","title":"OHEM(16/04)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#retinanet1708focal-loss","text":"\u8bba\u6587\u5730\u5740 Focal Loss + OneStage = RetinaNet \uff0c\u76ee\u7684\u662f\u60f3\u63d0\u9ad8\u5355\u9636\u6bb5\u7f51\u7edc\u7cbe\u5ea6\u4e0d\u9ad8\u7684\u95ee\u9898\uff0c\u4e3b\u8981\u539f\u56e0\u662f**\u6b63\u8d1f\u7c7b\u522b\u4e0d\u5747\u8861**\u95ee\u9898(\u4e00\u5f20\u56fe\u7247\u8981\u4ea7\u751f\u6210\u5343\u4e0a\u4e07\u7684\u5019\u9009\u6846\uff0c\u5176\u4e2d\u53ea\u6709\u4e00\u5c0f\u90e8\u5206\u542b\u6709object)\u3002 \u6b63\u8d1f\u7c7b\u522b\u4e0d\u5747\u8861\u4f1a\u5e26\u6765\u4ec0\u4e48\uff1f \u8d1f\u6837\u672c\u6570\u91cf\u592a\u5927\uff0c\u5360\u603b\u7684loss\u7684\u5927\u90e8\u5206\uff0c\u800c\u4e14\u591a\u662f\u5bb9\u6613\u5206\u7c7b\u7684\uff0c\u56e0\u6b64\u4f7f\u5f97\u6a21\u578b\u7684\u4f18\u5316\u65b9\u5411\u5e76\u4e0d\u662f\u6211\u4eec\u6240\u5e0c\u671b\u7684\u90a3\u6837\uff0c\u56e0\u4e3a\u5206\u7c7b\u5668\u65e0\u8111\u5730\u628a\u6240\u6709bbox\u7edf\u4e00\u5f52\u7c7b\u4e3abackground\uff0caccuracy\u4e5f\u53ef\u4ee5\u5237\u5f97\u5f88\u9ad8\u3002 ssd\u3001yolo\u548cfaster-Rcnn\u7684\u89e3\u51b3\u65b9\u6848 : \u5728SSD\u4e2d\u5229\u7528Hard-Negtive-Mining\u7684\u65b9\u5f0f\u5c06\u6b63\u8d1f\u6837\u672c\u7684\u6bd4\u4f8b\u63a7\u5236\u57281:3 YOLO\u901a\u8fc7\u635f\u5931\u51fd\u6570\u4e2d\u6743\u91cd\u60e9\u7f5a\u7684\u65b9\u5f0f\u589e\u5927\u6b63\u6837\u672c\u5bf9\u635f\u5931\u51fd\u6570\u7684\u5f71\u54cd Faster-RCNN\u5728FPN\u9636\u6bb5\u4f1a\u6839\u636e\u524d\u666f\u5206\u6570\u63d0\u51fa\u6700\u53ef\u80fd\u662f\u524d\u666f\u7684example\uff0c\u8fd9\u5c31\u4f1a\u6ee4\u9664\u5927\u91cf\u80cc\u666f\u6982\u7387\u9ad8\u7684easy negtive\u6837\u672c Focal Loss \u5f15\u5165\u4e86Focal Loss\u6765\u89e3\u51b3**\u96be\u6613\u6837\u672c\u6570\u91cf\u4e0d\u5e73\u8861**\uff0c \u901a\u8fc7\u51cf\u5c11\u6613\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd\uff0c\u4f7f\u5f97\u6a21\u578b\u5728\u8bad\u7ec3\u65f6\u66f4\u4e13\u6ce8\u4e8e\u96be\u5206\u7c7b\u7684\u6837\u672c \u3002 \u635f\u5931\u51fd\u6570\u8be6\u89e3 \u56e0\u4e3a\u662f\u4e8c\u5206\u7c7b\uff0c\u6240\u4ee5y\u7684\u503c\u662f\u6b631\u6216\u8d1f1\uff0cp\u7684\u8303\u56f4\u4e3a0\u52301\u3002\u5f53\u771f\u5b9elabel\u662f1\uff0c\u4e5f\u5c31\u662fy=1\u65f6\uff0c\u5047\u5982\u67d0\u4e2a\u6837\u672cx\u9884\u6d4b\u4e3a1\u8fd9\u4e2a\u7c7b\u7684\u6982\u7387p=0.6\uff0c\u90a3\u4e48\u635f\u5931\u5c31\u662f-log(0.6)\uff0c\u6ce8\u610f\u8fd9\u4e2a\u635f\u5931\u662f\u5927\u4e8e\u7b49\u4e8e0\u7684\u3002\u5982\u679cp=0.9\uff0c\u90a3\u4e48\u635f\u5931\u5c31\u662f-log(0.9)\uff0c\u6240\u4ee5p=0.6\u7684\u635f\u5931\u8981\u5927\u4e8ep=0.9\u7684\u635f\u5931\uff0c\u8fd9\u5f88\u5bb9\u6613\u7406\u89e3\u3002 at\u7cfb\u6570\u7c7b\u4f3c\u4e8ept\uff0c\u5f53label=1\u7684\u65f6\u5019\uff0cat=a\uff1b\u5f53label=-1\u7684\u65f6\u5019\uff0cat=1-a\uff0ca\u7684\u8303\u56f4\u4e5f\u662f0\u52301\u3002 \u56e0\u6b64\u53ef\u4ee5\u901a\u8fc7\u8bbe\u5b9aa\u7684\u503c\uff08\u4e00\u822c\u800c\u8a00\u5047\u59821\u8fd9\u4e2a\u7c7b\u7684\u6837\u672c\u6570\u6bd4-1\u8fd9\u4e2a\u7c7b\u7684\u6837\u672c\u6570\u591a\u5f88\u591a\uff0c\u90a3\u4e48a\u4f1a\u53d60\u52300.5\u6765\u589e\u52a0-1\u8fd9\u4e2a\u7c7b\u7684\u6837\u672c\u7684\u6743\u91cd\uff09\u6765\u63a7\u5236\u6b63\u8d1f\u6837\u672c\u5bf9\u603b\u7684loss\u7684\u5171\u4eab\u6743\u91cd\u3002 \u867d\u7136\u53ef\u4ee5\u63a7\u5236\u6b63\u8d1f\u6837\u672c\u7684\u6743\u91cd\uff0c\u4f46\u662f\u6ca1\u6cd5\u63a7\u5236\u5bb9\u6613\u5206\u7c7b\u548c\u96be\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd \uff0c\u4e8e\u662f\u5c31\u6709\u4e86focal loss \u5f53\u4e00\u4e2a\u6837\u672c\u88ab\u5206\u9519\u7684\u65f6\u5019\uff0cpt\u662f\u5f88\u5c0f\u7684\uff08\u8bf7\u7ed3\u5408pt\u516c\u5f0f\u7684\u5b9a\u4e49\uff0c\u6bd4\u5982\u5f53y=1\u65f6\uff0cp\u8981\u5c0f\u4e8e0.5\u624d\u662f\u9519\u5206\u7c7b\uff0c\u6b64\u65f6pt\u5c31\u6bd4\u8f83\u5c0f\uff0c\u53cd\u4e4b\u4ea6\u7136\uff09\uff0c\u56e0\u6b64\u8c03\u5236\u7cfb\u6570\u5c31\u8d8b\u4e8e1\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f8\u6bd4\u539f\u6765\u7684loss\u662f\u6ca1\u6709\u4ec0\u4e48\u5927\u7684\u6539\u53d8\u7684\u3002\u5f53pt\u8d8b\u4e8e1\u7684\u65f6\u5019\uff08\u6b64\u65f6\u5206\u7c7b\u6b63\u786e\u800c\u4e14\u662f\u6613\u5206\u7c7b\u6837\u672c\uff09\uff0c\u8c03\u5236\u7cfb\u6570\u8d8b\u4e8e0\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u603b\u7684loss\u7684\u8d21\u732e\u5f88\u5c0f\u3002 \u5f53\u03b3=0\u7684\u65f6\u5019\uff0cfocal loss\u5c31\u662f\u4f20\u7edf\u7684\u4ea4\u53c9\u71b5\u635f\u5931\uff0c\u5f53\u03b3\u589e\u52a0\u7684\u65f6\u5019\uff0c\u8c03\u5236\u7cfb\u6570\u4e5f\u4f1a\u589e\u52a0\u3002 \u8fd9\u6837\u65e2\u80fd\u8c03\u6574\u6b63\u8d1f\u6837\u672c\u7684\u6743\u91cd\uff0c\u53c8\u80fd\u63a7\u5236\u96be\u6613\u5206\u7c7b\u6837\u672c\u7684\u6743\u91cd \u5728\u5b9e\u9a8c\u4e2da\u7684\u9009\u62e9\u8303\u56f4\u4e5f\u5f88\u5e7f\uff0c\u4e00\u822c\u800c\u8a00\u5f53\u03b3\u589e\u52a0\u7684\u65f6\u5019\uff0ca\u9700\u8981\u51cf\u5c0f\u4e00\u70b9\uff08\u5b9e\u9a8c\u4e2d\u03b3=2\uff0ca=0.25\u7684\u6548\u679c\u6700\u597d\uff09 RetinaNet\u7f51\u7edc\u7ed3\u6784 \u6548\u679c (a)\u662f\u5728\u4ea4\u53c9\u71b5\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u53c2\u6570a\uff0ca=0.5\u5c31\u8868\u793a\u4f20\u7edf\u7684\u4ea4\u53c9\u71b5\uff0c\u53ef\u4ee5\u770b\u51fa\u5f53a=0.75\u7684\u65f6\u5019\u6548\u679c\u6700\u597d\uff0cAP\u503c\u63d0\u5347\u4e860.9\u3002 (b) \u662f\u5bf9\u6bd4\u4e0d\u540c\u7684\u53c2\u6570\u03b3\u548ca\u7684\u5b9e\u9a8c\u7ed3\u679c\uff0c\u53ef\u4ee5\u770b\u51fa\u968f\u7740\u03b3\u7684\u589e\u52a0\uff0cAP\u63d0\u5347\u6bd4\u8f83\u660e\u663e\u3002 (d) \u901a\u8fc7\u548cOHEM\u7684\u5bf9\u6bd4\u53ef\u4ee5\u770b\u51fa\u6700\u597d\u7684Focal Loss\u6bd4\u6700\u597d\u7684OHEM\u63d0\u9ad8\u4e863.2AP\u3002\u8fd9\u91ccOHEM1:3\u8868\u793a\u5728\u901a\u8fc7OHEM\u5f97\u5230\u7684minibatch\u4e0a\u5f3a\u5236positive\u548cnegative\u6837\u672c\u7684\u6bd4\u4f8b\u4e3a1:3\uff0c\u901a\u8fc7\u5bf9\u6bd4\u53ef\u4ee5\u770b\u51fa\u8fd9\u79cd\u5f3a\u5236\u7684\u64cd\u4f5c\u5e76\u6ca1\u6709\u63d0\u5347AP\u3002 (e) \u52a0\u5165\u4e86\u8fd0\u7b97\u65f6\u95f4\u7684\u5bf9\u6bd4\uff0c\u53ef\u4ee5\u548c\u524d\u9762\u7684Figure2\u7ed3\u5408\u8d77\u6765\u770b\uff0c\u901f\u5ea6\u65b9\u9762\u4e5f\u6709\u4f18\u52bf\uff01\u6ce8\u610f\u8fd9\u91ccRetinaNet-101-800\u7684AP\u662f37.8\uff0c\u5f53\u628a\u8bad\u7ec3\u65f6\u95f4\u6269\u59271.5\u500d\u540c\u65f6\u91c7\u7528scale jitter\uff0cAP\u53ef\u4ee5\u63d0\u9ad8\u523039.1\uff0c\u8fd9\u5c31\u662f\u5168\u6587\u548ctable2\u4e2d\u7684\u6700\u9ad8\u768439.1AP\u7684\u7531\u6765\u3002 \u5bf9\u6bd4forground\u548cbackground\u6837\u672c\u5728\u4e0d\u540c\u03b3\u60c5\u51b5\u4e0b\u7684\u7d2f\u79ef\u8bef\u5dee\u3002 \u7eb5\u5750\u6807\u662f\u5f52\u4e00\u5316\u540e\u7684\u635f\u5931 \u6a2a\u5750\u6807\u662f\u603b\u7684foreground\u6216background\u6837\u672c\u6570\u7684\u767e\u5206\u6bd4\u3002 \u53ef\u4ee5\u770b\u51fa\u03b3\u7684\u53d8\u5316\u5bf9\u6b63\uff08forground\uff09\u6837\u672c\u7684\u7d2f\u79ef\u8bef\u5dee\u7684\u5f71\u54cd\u5e76\u4e0d\u5927\uff0c\u4f46\u662f\u5bf9\u4e8e\u8d1f\uff08background\uff09\u6837\u672c\u7684\u7d2f\u79ef\u8bef\u5dee\u7684\u5f71\u54cd\u8fd8\u662f\u5f88\u5927\u7684\uff08\u03b3=2\u65f6\uff0c\u5c06\u8fd199%\u7684background\u6837\u672c\u7684\u635f\u5931\u90fd\u975e\u5e38\u5c0f\uff09","title":"RetinaNet(17/08:Focal Loss)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#repulsion-loss1711","text":"\u8bba\u6587\u5730\u5740 | Code | \u535a\u5ba2 | \u535a\u5ba2\u4ee3\u7801 |[r\u026a'p\u028cl\u0283\u0259n]:\u65a5\u529b \u672c\u6587\u662f\u65f7\u89c6\u7814\u7a76\u9662CVPR2018\u4e0a\u7684\u4e00\u7bc7\u5de5\u4f5c\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u884c\u4eba\u68c0\u6d4b\u7684\u906e\u6321(\u7c7b\u95f4\u6216\u7c7b\u5185)\u95ee\u9898\uff0c\u8fd9\u91cc\u5148\u8bb2\u89e3\u7c7b\u5185\u906e\u6321\u3002 \u906e\u6321\u95ee\u9898 \u95ee\u9898\u4e00:\u6846\u504f\u79fb \u95ee\u9898\u4e8c:\u6846\u6291\u5236\uff0c\u6f0f\u68c0 **NMS**\u64cd\u4f5c\u662f\u4e3a\u4e86\u6291\u5236\u53bb\u9664\u6389\u591a\u4f59\u7684\u6846\u3002\u4f46\u662f\u5728\u906e\u6321\u68c0\u6d4b\u4e2d\uff0c NMS \u64cd\u4f5c\u4f1a\u5e26\u6765\u66f4\u7cdf\u7cd5\u7684\u68c0\u6d4b\u7ed3\u679c\uff0c\u56e0\u4e3a T \u7684\u9884\u6d4b\u6846 P \u4f1a\u88ab B \u7684\u9884\u6d4b\u6846\u7ed9\u6291\u5236\uff0c\u5bfc\u81f4\u6f0f\u68c0\u3002 \u603b\u7ed3: \u5bf9NMS\u9608\u503c\u5f88\u654f\u611f \uff1a\u9608\u503c\u592a\u4f4e\u4e86\u4f1a\u5e26\u6765\u6f0f\u68c0\uff0c\u9608\u503c\u592a\u9ad8\u4e86\u4f1a\u5e26\u6765**\u5047\u6b63\u4f8b**\uff08\u5373\u6807\u51fa\u9519\u8bef\u7684\u76ee\u6807: \u7ea2\u8272\u504f\u79fb\u90e8\u5206 \uff09 \u95ee\u9898\u89e3\u51b3 \u4e0d\u4ec5\u4ec5\u8003\u8651\u76ee\u6807\u6846\uff0c\u8fd8\u8981\u8003\u8651\u5468\u56f4\u6846\u7684\u5f71\u54cd\uff0c\u78c1\u94c1\u6548\u5e94:\u8bbe\u8ba1\u635f\u5931\u51fd\u6570\u5728\u8981\u6c42\u9884\u6d4b\u6846 P \u9760\u8fd1\u76ee\u6807\u6846 T (\u5438\u5f15)\u7684\u540c\u65f6\uff0c\u4e5f\u8981\u6c42\u9884\u6d4b\u6846 P \u8fdc\u79bb\u5176\u4ed6\u4e0d\u5c5e\u4e8e\u76ee\u6807 T \u7684\u771f\u5b9e\u6846(\u6392\u65a5)\uff0c\u8fd9\u6837\u5c31\u5f88\u597d\u7684\u964d\u4f4e NMS \u7684\u5bf9\u9608\u503c\u7684\u654f\u611f\u6027 \u53c2\u6570\u89e3\u91ca:\u8bbe P(lP , tP , wP , hP ) \u4e3a\u5019\u9009\u6846 G(lG, tG, wG, hG) \u4e3a\u771f\u5b9e\u6846\uff0c P+ \u4e3a\u6b63\u5019\u9009\u6846\u96c6\u5408\uff0c\u6b63\u5019\u9009\u6846\u7684\u610f\u601d\u662f\uff0c\u81f3\u5c11\u4e0e\u5176\u4e2d\u4e00\u4e2a\u771f\u5b9e\u6846\u7684 IoU \u5927\u4e8e\u67d0\u4e2a\u9608\u503c\uff0c\u8fd9\u91cc\u662f 0.5 g = {G} \u662f\u771f\u5b9e\u6846\u96c6\u5408 L_attr : smooth L1 \u635f\u5931\uff0c\u76ee\u7684\u662f\u4f7f\u5f97\u9884\u6d4b\u6846\u548c\u5339\u914d\u4e0a\u7684\u76ee\u6807\u6846\u5c3d\u53ef\u80fd\u63a5\u8fd1\u3002 L_RepGT :\u76ee\u6807\u4f7f\u9884\u6d4b\u6846\u8981\u5c3d\u91cf\u8fdc\u79bb\u548c\u5b83\u91cd\u53e0\u7684\u7b2c\u4e8c\u5927\u7684 GT (\u9664\u53bb\u672c\u8eab\u8981\u56de\u5f52\u76ee\u6807\u7684\u771f\u5b9e\u6846\u5916\uff0c\u4e0e\u5176IoU\u6700\u5927\u7684\u771f\u5b9e\u6846) \u4f7f\u7528 IoG \u800c\u4e0d\u4f7f\u7528 IoU \u7684\u539f\u56e0\u662f\uff0c IoG\u7684\u5206\u6bcd\u4e0b\uff0c\u771f\u5b9e\u6846\u5927\u5c0farea(G)\u662f\u56fa\u5b9a\u7684 \uff0c\u56e0\u6b64\u5176\u4f18\u5316\u76ee\u6807\u662f\u53bb\u51cf\u5c11\u4e0e\u76ee\u6807\u6846\u91cd\u53e0\uff0c\u5373**area(B\u2229G)**\u3002\u800c\u5728 IoU \u4e0b\uff0c\u56de\u5f52\u5668\u4e5f\u8bb8\u4f1a\u5c3d\u53ef\u80fd\u8ba9\u9884\u6d4b\u6846\u66f4\u5927\uff08\u5373\u5206\u6bcd\uff09\u6765\u6700\u5c0f\u5316 loss L_RepBox :\u4f7f\u5206\u6d3e\u5230\u4e0d\u540cGT\u7684\u9884\u6d4b\u6846\u4e4b\u95f4\u5c3d\u91cf\u8fdc\u79bb\u3002 \u03b1\u548c\u03b2 \u7528\u4e8e\u5e73\u8861\u4e24\u8005\u7684\u6743\u91cd \u540e\u7eed\u7684NMS\u53ef\u4ee5\u4f7f\u7528soft-nms\u3001DIOU-NMS\u7528\u6765\u51cf\u5c11\u635f\u5931\u3002 \u7ed3\u8bba \u732a\u53ea\u6570\u636e\u96c6\u5408\u63d0\u5347\u4e0d\u5927\uff0c\u6574\u4f53\u4ec5\u63d0\u5347\u4e860.5\u4e2a\u767e\u5206\u70b9\uff1b\u9009\u53d6iou\u91cd\u53e0(\u9608\u503c0.5)\u5360\u6bd4\u8fbe30%,\u7684\u6570\u636e\u96c6\uff0c\u9a8c\u8bc1\u6574\u4f53\u63d0\u5347\u4e862.1\u4e2a\u767e\u5206\u70b9\u3002\u753b\u51fa\u7ed3\u679c\uff0c\u8089\u773c\u89c2\u5bdf\u5f88\u660e\u663e\u6f0f\u68c0\u6d88\u5931\u3002","title":"Repulsion Loss(17/11:\u89e3\u51b3\u906e\u6321)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#panet1803","text":"\u8bba\u6587\u5730\u5740 COCO2017\u5b9e\u4f8b\u5206\u5272\u6bd4\u8d5b\u7684\u51a0\u519b\uff0c\u4e5f\u662f\u76ee\u6807\u68c0\u6d4b\u6bd4\u8d5b\u7684\u7b2c\u4e8c\u540d\u3002 \u53ef\u4ee5\u770b\u505a\u662f Mask RCNN \u7684\u591a\u5904\u6539\u8fdb\uff0c\u5145\u5206\u5229\u7528\u4e86\u7279\u5f81\u878d\u5408\uff0c\u6bd4\u5982\u5f15\u5165 bottom-up path augmentation \u7ed3\u6784\uff0c\u5145\u5206\u5229\u7528\u7f51\u7edc\u6d45\u7279\u5f81\u8fdb\u884c\u5206\u5272 \u5f15\u5165 adaptive feature pooling \u4f7f\u5f97\u63d0\u53d6\u5230\u7684ROI\u7279\u5f81\u66f4\u52a0\u4e30\u5bcc \u5f15\u5165 fully-connected fusion \uff0c\u901a\u8fc7\u878d\u5408\u4e00\u4e2a\u524d\u80cc\u666f\u4e8c\u5206\u7c7b\u652f\u8def\u7684\u8f93\u51fa\u5f97\u5230\u66f4\u52a0\u7cbe\u786e\u7684\u5206\u5272\u7ed3\u679c\u3002 FPN :\u4e3b\u8981\u662f\u901a\u8fc7\u878d\u5408\u9ad8\u4f4e\u5c42\u7279\u5f81\u63d0\u5347\u76ee\u6807\u68c0\u6d4b\u7684\u6548\u679c\uff0c\u5c24\u5176\u53ef\u4ee5\u63d0\u9ad8\u5c0f\u5c3a\u5bf8\u76ee\u6807\u7684\u68c0\u6d4b\u6548\u679c bottom-up path augmentation :\u8fd9\u4e2a\u5f15\u5165\u4e3b\u8981\u662f\u8003\u8651\u6d45\u5c42\u7279\u5f81\u4fe1\u606f(\u8fb9\u7f18\u5f62\u72b6\u7b49\u7279\u5f81)\u5bf9\u5b9e\u4f8b\u5206\u5272(\u56e0\u4e3a\u662f\u50cf\u7d20\u7ea7\u7684\u5206\u7c7b)\u975e\u5e38\u91cd\u8981\u3002 FPN\u7684\u7ea2\u8272\u7bad\u5934\uff0c\u7531\u5e95\u5c42\u4f20\u5230\u9876\u5c42\uff0c\u8981\u7ecf\u8fc7\u51e0\u5341\u4e0a\u767e\u7684\u5c42\uff0c\u6d45\u5c42\u7279\u5f81\u4fe1\u606f\u4e22\u5931\u4e25\u91cd \u7eff\u8272\u7bad\u5934(\u8fd9\u4e2a\u7ed3\u6784\u4e0d\u523010\u5c42)\uff1a\u6d45\u5c42\u7279\u5f81\u2192P2\u2192\u6cbf\u7740 bottom-up path augmentation \u4f20\u9012\u5230\u9876\u5c42\uff0c\u7ecf\u8fc7\u7684\u5c42\u6570\u5c31\u4e0d\u523010\u5c42\uff0c\u80fd\u8f83\u597d\u5730\u4fdd\u7559\u6d45\u5c42\u7279\u5f81\u4fe1\u606f\u3002 adaptive feature pooling :\u4e3b\u8981\u505a\u7684\u8fd8\u662f\u7279\u5f81\u878d\u5408\uff0c\u5c06\u5355\u5c42\u7279\u5f81(\u7c7b\u4f3cFasterRcnn\u7684\u6bcf\u4e2aROI\u5c42\u8981\u7ecf\u8fc7\u4e00\u4e2aROIPooling\u4e00\u6837,(FPN\u4e5f\u662f\u5355\u5c42))\u6362\u6210\u6bcf\u4e2aROI\u9700\u8981\u7ecf\u8fc7**\u591a\u5c42\u7279\u5f81**\uff1a\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e2aROI\u9700\u8981\u548c\u591a\u5c42\u7279\u5f81( N2.N3.N4.N5 )\u505aROI Align\u7684\u64cd\u4f5c\uff0c\u7136\u540e\u5c06\u5f97\u5230\u7684\u4e0d\u540c\u5c42\u7684ROI\u7279\u5f81\u878d\u5408\u5728\u4e00\u8d77\uff0c\u8fd9\u6837\u6bcf\u4e2aROI\u7279\u5f81\u5c31\u878d\u5408\u4e86\u591a\u5c42\u7279\u5f81\u3002 \u591a\u5c42\u7279\u5f81\u878d\u5408\u662f\u56e0\u4e3a\u8bba\u6587\u4e2d\u4f5c\u8005\u505a\u4e86\u4e00\u4e2a\u5b9e\u9a8c\uff0c\u8be6\u60c5\u770bAI\u4e4b\u8def\u535a\u5ba2\u6216\u8bba\u6587\u3002 fully-connected fusion :\u9488\u5bf9\u539f\u6709\u7684\u5206\u5272\u652f\u8def\uff08FCN\uff09\u5f15\u5165\u4e00\u4e2a\u524d\u80cc\u666f\u4e8c\u5206\u7c7b\u7684\u5168\u8fde\u63a5\u652f\u8def\uff0c\u901a\u8fc7\u878d\u5408\u8fd9\u4e24\u6761\u652f\u8def\u7684\u8f93\u51fa\u5f97\u5230\u66f4\u52a0\u7cbe\u786e\u7684\u5206\u5272\u7ed3\u679c\u3002","title":"PANet(18/03)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#efficientnet1905","text":"\u8bba\u6587\u5730\u5740 \u76ee\u524d\u5206\u7c7b\u7f51\u7edc\u5e38\u7528\u4f18\u5316\u65b9\u5411: \u52a0\u5bbd\u7f51\u7edc\u3001\u52a0\u6df1\u7f51\u7edc\u3001\u589e\u52a0\u5206\u8fa8\u7387 \uff0c\u4f5c\u8005\u8ba4\u4e3a\u8fd9\u4e09\u79cd\u65b9\u5f0f\u4e0d\u5e94\u8be5\u76f8\u4e92\u72ec\u7acb\uff0c\u6240\u4ee5\u4f5c\u8005\u901a\u8fc7\u7efc\u5408\u8fd9\u4e9b\u65b9\u5f0f\uff0c\u5927\u5927\u51cf\u5c11\u4e86\u6a21\u578b\u53c2\u6570\u91cf\u548c\u8ba1\u7b97\u91cf\u3002 \u4f5c\u8005\u505a\u4e86\u4e00\u4e2a\u5c0f\u5b9e\u9a8c\u8fdb\u884c\u9a8c\u8bc1: \u5355\u4e2a\u7ef4\u5ea6\u7684\u4f18\u5316:\u80fd\u63d0\u5347\u6a21\u578b\u6548\u679c\uff0c\u4f46\u662f\u4e0a\u9650\u4e5f\u6bd4\u8f83\u660e\u663e\uff0c\u57fa\u672c\u4e0a\u5728Acc\u8fbe\u523080\u540e\u63d0\u5347\u5c31\u5f88\u5c0f\u4e86\u3002 3\u4e2a\u7ef4\u5ea6\u5171\u540c\u4f18\u5316:\u6709\u6548\u63d0\u5347\u6a21\u578b\u7684\u6548\u679c\uff08\u7a81\u783480\uff09\uff0c\u8fd9\u5c31\u8bf4\u660e\u591a\u7ef4\u5ea6\u878d\u5408\u662f\u6709\u6548\u7684\u3002 \u5982\u4f55\u627e\u52303\u4e2a\u7ef4\u5ea6\u5408\u9002\u7684\u7f29\u653e\u7cfb\u6570\u5462\uff1f 1.\u5efa\u7acb\u4f18\u5316\u516c\u5f0f N\u8868\u793a\u5206\u7c7b\u7f51\u7edc\uff0cX\u8868\u793a\u8f93\u5165\uff0cFi\u8868\u793a\u57fa\u7840\u7f51\u7edc\u5c42\uff0ci\u8868\u793astage\uff0cLi\u8868\u793aFi\u7ed3\u6784\u5728\u7b2ci\u4e2astage\u4e2d\u7684\u91cd\u590d\u6570\u91cf\u3002 \u516c\u5f0f1\u8fd9\u6837\u7684\u5b9a\u4e49\u65b9\u5f0f\u5bf9\u5e94\u7684\u6700\u76f4\u89c2\u4f8b\u5b50\u5c31\u662fResNet\u7cfb\u5217\u7f51\u7edc\uff0c\u6211\u4eec\u77e5\u9053ResNet\u7cfb\u5217\u7f51\u7edc\u6709\u591a\u4e2astage\uff0c\u6bcf\u4e2astage\u5305\u542b\u4e0d\u540c\u6570\u91cf\u7684block\u7ed3\u6784\u3002 \u5f85\u4f18\u5316\u7684\u53c2\u6570\u5c31\u662f\u7f51\u7edc\u6df1\u5ea6\uff08d\uff09\u3001\u7f51\u7edc\u5bbd\u5ea6\uff08w\uff09\u548c\u5206\u8fa8\u7387\uff08r\uff09 \u5728\u6a21\u578b\u53c2\u6570\u548c\u8ba1\u7b97\u91cf\u6ee1\u8db3\u9650\u5236\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6700\u5927\u5316\u7f51\u7edc\u7684\u51c6\u786e\u7387 \u5f15\u5165\u03a6\u53c2\u6570\uff0c\u5e76\u5c063\u4e2a\u5f85\u4f18\u5316\u53c2\u6570\u90fd\u7528\u03a6\u6307\u6570\u8868\u793a \u540c\u65f6\u5bf9\u5e95\u505a\u4e86\u6570\u503c\u9650\u5236\uff0c\u505a\u9650\u5236\u53ef\u4ee5\u51cf\u5c11\u7f51\u683c\u641c\u7d22\u65f6\u7684\u8ba1\u7b97\u91cf\uff0c\u800c\u5177\u4f53\u7684\u9650\u5236\u516c\u5f0f\u786e\u5b9a\u662f\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97FLOPS\u3002 \u8fd9\u91cc\u9700\u8981\u8bf4\u660e\u4e00\u4e0bd\u3001w\u548cr\u53c2\u6570\u5bf9FLOPS\u8ba1\u7b97\u7684\u5f71\u54cd\uff0c\u4ee5\u5377\u79ef\u5c42\u4e3a\u4f8b,\u5047\u5982d\u53d8\u6210\u539f\u6765\u76842\u500d\uff0c\u90a3\u4e48FLOPS\u4e5f\u4f1a\u53d8\u6210\u539f\u6765\u76842\u500d\uff1b\u5047\u5982w\u53d8\u6210\u539f\u6765\u76842\u500d\uff0c\u90a3\u4e48FLOPS\u5c31\u53d8\u6210\u539f\u6765\u76844\u500d\uff0c\u56e0\u4e3a\u8f93\u5165\u8f93\u51fa\u901a\u9053\u90fd\u53d8\u6210\u539f\u6765\u76842\u500d\u4e86\uff0c\u6240\u4ee5\u5728\u8ba1\u7b97\u91cf\u65b9\u9762\u76f8\u5f53\u4e8e4\u500d\uff1br\u548cw\u540c\u7406\u3002 2.\u901a\u8fc7\u7f51\u7edc\u7ed3\u6784\u641c\u7d22\u8bbe\u8ba1baseline\u7f51\u7edc 3.\u5982\u4f55\u4f18\u5316 \u7b2c\u4e00\u6b65\u662f\u56fa\u5b9a \u03a6=1 \uff0c\u7136\u540e\u901a\u8fc7\u7f51\u683c\u641c\u7d22\u627e\u5230\u6ee1\u8db3\u516c\u5f0f3\u7684\u6700\u4f18 \u03b1\u3001\u03b2\u3001\u03b3 \uff0c\u6bd4\u5982\u5bf9\u4e8e EfficientNet-B0 \u7f51\u7edc\u800c\u8a00\uff0c\u6700\u4f73\u7684\u53c2\u6570\u5206\u522b\u662f\u03b1=1.2\u3001\u03b2=1.1\u3001\u03b3=1.15\uff08\u6b64\u65f6\u5f97\u5230\u7684\u4e5f\u5c31\u662f EfficientNet-B1 \uff09 \u56fa\u5b9a\u7b2c\u4e00\u6b65\u6c42\u5f97\u7684\u03b1\u3001\u03b2\u3001\u03b3\u53c2\u6570\uff0c\u7136\u540e\u7528\u4e0d\u540c\u7684\u03a6\u53c2\u6570\u5f97\u5230EfficientNet-B1\u5230EfficientNet-B7\u7f51\u7edc \u6a21\u578b\u7ed3\u679c","title":"EfficientNet(19/05)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#efficientdet1911","text":"\u8bba\u6587\u5730\u5740 EfficientDet\u662f\u4e00\u4e2a\u603b\u79f0\uff0c\u53ef\u4ee5\u5206\u4e3a EfficientDet D1 ~ EfficientDet D7\uff0c\u901f\u5ea6\u9010\u6e10\u53d8\u6162\uff0c\u4f46\u662f\u7cbe\u5ea6\u4e5f\u9010\u6e10\u63d0\u9ad8\u3002 \u4e24\u70b9\u4e3b\u8981\u8d21\u732e\uff1a BiFPN \u548c Compound Scaling BiFPN **FPN**\u4e2d\u4e0d\u540c\u7684\u8f93\u5165\u7279\u5f81\u5177\u6709\u4e0d\u540c\u7684\u5206\u8fa8\u7387\uff0c\u6211\u4eec\u89c2\u5bdf\u5230\u5b83\u4eec\u5bf9\u878d\u5408\u8f93\u51fa\u7279\u5f81\u7684\u8d21\u732e\u5f80\u5f80\u662f\u4e0d\u5e73\u7b49\u7684\u3002 BiFPN**\u4f5c\u8005\u63d0\u51fa\u4e86\u4e00\u79cd\u7b80\u5355\u800c\u9ad8\u6548\u7684**\u52a0\u6743\uff08\u7c7b\u4f3c\u4e0eattention\uff09**\u53cc\u5411\u7279\u5f81\u91d1\u5b57\u5854\u7f51\u7edc\uff08**BiFPN \uff09\uff0c\u5b83\u5f15\u5165\u53ef\u5b66\u4e60\u7684\u6743\u503c\u6765\u5b66\u4e60\u4e0d\u540c\u8f93\u5165\u7279\u5f81\u7684\u91cd\u8981\u6027\uff0c\u540c\u65f6\u53cd\u590d\u5e94\u7528\u81ea\u9876\u5411\u4e0b\u548c\u81ea\u4e0b\u800c\u4e0a\u7684\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408\u3002 BiFPN\u52a0\u6743\u7b56\u7565 Wi \u53ef\u4ee5\u662f\u4e00\u4e2a\u7279\u5f81/\u4e00\u4e2a\u901a\u9053/\u4e00\u4e2a\u591a\u7ef4\u5ea6\u7684tensor\uff0c\u4f46\u662f\u5982\u679c\u4e0d\u5bf9\u5176\u9650\u5236\u5bb9\u6613\u5bfc\u81f4\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002 \u6240\u4ee5\u5bf9\u6bcf\u4e00\u4e2a\u6743\u91cd\u7528 softmax \uff0c\u4f46\u662f\u8ba1\u7b97 softmax \u901f\u5ea6\u8f83\u6162 \u4f5c\u8005\u63d0\u51fa\u4e86\u5feb\u901f\u7684\u9650\u5236\u65b9\u6cd5\uff0c\u4e3a\u4e86\u4fdd\u8bc1weight\u5927\u4e8e0\uff0cweight\u524d\u91c7\u7528relu\u51fd\u6570\u3002 \u4e3e\u4f8b\u8bf4\u660e Compound Scaling Backbone network\uff1a\u76f4\u63a5\u4f7f\u7528EfficientNet-b0~b6 BiFPN network Box/class prediction network Input image resolution\uff08\u6587\u4e2d\u8bf4\u5fc5\u987b\u662f2^7\uff1d128\u7684\u500d\u6570\uff09","title":"EfficientDet(19/11)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#hrnet1902","text":"\u8bba\u6587 | \u535a\u5ba2 | Code HRNet \u6253\u901a\u4e86\u5404\u4e2a\u65b9\u5411(\u5206\u7c7b\u3001\u68c0\u6d4b\u3001\u5206\u5272\u3001\u59ff\u6001\u4f30\u8ba1\u3001\u4eba\u8138\u5173\u952e\u70b9\u7b49)\uff0c\u4e3b\u8981\u539f\u7406: \u901a\u8fc7\u5e76\u884c\u591a\u4e2a\u5206\u8fa8\u7387\u7684\u5206\u652f\uff0c\u52a0\u4e0a\u4e0d\u65ad\u8fdb\u884c\u4e0d\u540c\u5206\u652f\u4e4b\u95f4\u7684\u4fe1\u606f\u4ea4\u4e92(\u76ee\u7684\u662f\u8865\u5145\u901a\u9053\u6570\u51cf\u5c11\u5e26\u6765\u7684\u635f\u8017)\uff0c\u540c\u65f6\u8fbe\u5230\u5f3a\u8bed\u4e49\u4fe1\u606f\u548c\u7cbe\u51c6\u4f4d\u7f6e\u4fe1\u606f\u7684\u76ee\u7684 \u3002\u5c31\u68c0\u6d4b\u800c\u8a00\uff0c\u9ad8\u5206\u8fa8\u7387\u5bf9\u4e8e\u4f4d\u7f6e\u4fe1\u606f\u5341\u5206\u654f\u611f\uff0c\u4e4b\u524d\u7684\u8bb8\u591a\u7f51\u7edc\u4e3a\u4e86\u7ef4\u6301\u9ad8\u5206\u8fa8\u7387\uff0c\u5e38\u5e38\u662f\u4e0b\u91c7\u6837\u5f97\u5230\u5f3a\u8bed\u4e49\u4fe1\u606f\u540e\u518d\u4e0a\u91c7\u6837\u6062\u590d\u9ad8\u5206\u8fa8\u7387\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u4f1a\u635f\u5931\u5927\u91cf\u7684\u6709\u6548\u4fe1\u606f\uff0c HRNet \u91cd\u70b9\u5728**\u5e76\u884c** backbone\u89e3\u6790 FuseLayer \u524d\u5411\u8ba1\u7b97\u65f6\u7528\u4e00\u4e2a\u4e8c\u91cd\u5faa\u73af\u5c06\u6784\u5efa\u597d\u7684\u4e8c\u7ef4\u77e9\u9635\u4e00\u4e00\u89e3\u5f00\uff0c\u5c06\u5bf9\u5e94\u540c\u4e00\u4e2apost\u7684pre\u8f6c\u6362\u540e\u8fdb\u884c\u878d\u5408\u76f8\u52a0\u3002\u6bd4\u5982 post1 = f11(pre1) + f12(pre2) + f13(pre3) TransitionLayer \u9759\u6001\u6784\u5efa\u4e00\u4e2a\u4e00\u7ef4\u77e9\u9635\uff0c\u7136\u540e\u5c06pre\u548cpost\u5bf9\u5e94\u8fde\u63a5\u7684\u64cd\u4f5c\u4e00\u4e00\u586b\u5165\u8fd9\u4e2a\u4e00\u7ef4\u77e9\u9635\u4e2d\u3002post4\u6bd4\u8f83\u7279\u6b8a\uff0c \u8fd9\u4e00\u90e8\u5206\u4ee3\u7801\u548c\u56fe\u4f8b\u4e0d\u592a\u4e00\u81f4 \uff0c\u56fe\u4f8b\u662fpre1&pre2&pre3\u90fd\u8fdb\u884c\u4e0b\u91c7\u7136\u540e\u8fdb\u884c\u878d\u5408\u76f8\u52a0\u5f97\u5230post4\uff0c\u800c\u4ee3\u7801\u4e2dpost4\u901a\u8fc7pre3\u4e0b\u91c7\u5f97\u5230\u3002 Neck\u8bbe\u8ba1 : HRNet \u7684 backbone \u8f93\u51fa\u6709\u56db\u4e2a\u5206\u652f\uff0c paper \u4e2d\u7ed9\u51fa\u4e86\u51e0\u79cd\u65b9\u5f0f\u5bf9\u8f93\u51fa\u5206\u652f\u8fdb\u884c\u64cd\u4f5c","title":"HRNet(19/02)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#cascade-r-cnn1712","text":"\u8bba\u6587\u5730\u5740 \u901a\u8fc7\u7ea7\u8054\u51e0\u4e2a\u68c0\u6d4b\u7f51\u7edc(\u8bbe\u7f6e\u4e0d\u540cIOU\u503c\u786e\u5b9a\u6b63\u8d1f\u6837\u672c)\u8fbe\u5230\u4e0d\u65ad\u4f18\u5316\u9884\u6d4b\u7ed3\u679c\u7684\u76ee\u7684\uff0c\u4e3b\u8981\u89e3\u51b3\u4e86\u68c0\u6d4b\u6846\u4e0d\u662f\u7279\u522b\u51c6\uff0c\u5bb9\u6613\u51fa\u73b0\u566a\u58f0\u5e72\u6270\u7684\u95ee\u9898 \u601d\u8def\u89e3\u5256 u=0.5 \u5e38\u7528,\u4f1a\u51fa\u73b0\u8f83\u591a\u8bef\u68c0\u6d4b\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u9608\u503c\u4f1a\u4f7f\u5f97\u6b63\u6837\u672c\u4e2d\u542b\u6709\u6709\u8f83\u591a\u7684\u80cc\u666f\u3002 u=0.7 \u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u8bef\u68c0\u6d4b\u4e86\u5427\uff0c\u4f46\u662f\u8fd9\u6837\u4f1a\u5bfc\u81f4,\u6b63\u6837\u672c\u6570\u91cf\u8f83\u5c11\uff0c\u8fc7\u62df\u5408\u98ce\u9669\u5927\uff0c\u68c0\u6d4b\u6548\u679c\u5c31\u5dee \u4f5c\u8005\u901a\u8fc7\u5b9e\u9a8c\uff0cc\u4e2d\u53ef\u4ee5\u770b\u51fa: \u5f53\u4e00\u4e2a\u68c0\u6d4b\u6a21\u578b\u91c7\u7528\u67d0\u4e2a\u9608\u503c\uff08\u5047\u8bbeu=0.6\uff09\u6765\u754c\u5b9a\u6b63\u8d1f\u6837\u672c\u65f6\uff0c\u90a3\u4e48\u5f53\u8f93\u5165proposal\u7684IOU\u5728\u8fd9\u4e2a\u9608\u503c\uff08u=0.6\uff09\u9644\u8fd1\u65f6\uff0c\u8be5\u68c0\u6d4b\u6a21\u578b\u6bd4\u57fa\u4e8e\u5176\u4ed6\u9608\u503c\u8bad\u7ec3\u7684\u68c0\u6d4b\u6a21\u578b\u7684\u6548\u679c\u8981\u597d \u3002\u65e2\u7136\u8fd9\u6837\uff0c\u90a3IOU\u9608\u503c\u8bbe\u7f6e\u7684\u8d8a\u5927\u4e0d\u5c31\u8d8a\u597d\u5417\uff1f\u601d\u8def\u8d70\u4e0d\u901a\uff0c\u89e3\u7b54\u4e3a\u4e0a\u3002 \u6240\u4ee5\u6211\u4eec\u5e0c\u671b\u7684\u662f: \u540c\u65f6\u8bad\u7ec3\u591a\u4e2a\u68c0\u6d4b\u6a21\u578b\uff0c\u6bcf\u4e2a\u68c0\u6d4b\u6a21\u578b\u7528\u7684IOU\u9608\u503c\u8981\u5c3d\u53ef\u80fd\u548c\u8f93\u5165proposal\u7684IOU\u63a5\u8fd1\uff0c\u8fd9\u6837\u6bcf\u4e2a\u68c0\u6d4b\u6a21\u578b\u5f97\u5230\u7684\u6548\u679c\u90fd\u5f88\u597d\u3002\u8fd9\u51e0\u4e2a\u68c0\u6d4b\u6a21\u578b\u5982\u4f55\u8fde\u63a5\u5462\uff1f**\u4f5c\u8005\u5728\u5b9e\u9a8c\u4e2d\u53d1\u73b0\uff0c**\u8f93\u51fa\u7684IOU\u5927\u4e8e\u8f93\u5165\u7684IOU\uff0c\u5982\u679c\u524d\u4e00\u4e2a\u6a21\u578b\u7684\u8f93\u51fa\u4f5c\u4e3a\u540e\u4e00\u4e2a\u68c0\u6d4b\u6a21\u578b\u7684\u8f93\u5165\uff0c\u8fd9\u6837IOU\u9608\u503c\u4f1a\u4e00\u76f4\u4e0a\u5347\u3002 \u56e0\u6b64\u91c7\u53d6cascade\u7684\u65b9\u5f0f\u80fd\u591f\u8ba9\u6bcf\u4e00\u4e2astage\u7684detector\u90fd\u4e13\u6ce8\u4e8e\u68c0\u6d4bIOU\u5728\u67d0\u4e00\u8303\u56f4\u5185\u7684proposal\uff0c\u56e0\u4e3a\u8f93\u51faIOU\u666e\u904d\u5927\u4e8e\u8f93\u5165IOU\uff0c\u56e0\u6b64\u68c0\u6d4b\u6548\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d \u3002 \u8fd9\u4e5f\u5c31\u89e3\u91ca\u4e86\u53ea\u7528\u56fa\u5b9aIOU=0.5,\u68c0\u6d4b\u6548\u679c\u4e0d\u7cbe\u51c6\u7684\u539f\u56e0:\u5f53\u8f93\u5165proposal\u7684IOU\u4e0d\u5728\u4f60\u8bad\u7ec3\u68c0\u6d4b\u6a21\u578b\u65f6IOU\u503c\u9644\u8fd1\u65f6\uff0c\u6548\u679c\u4e0d\u4f1a\u6709\u592a\u5927\u63d0\u5347\u3002","title":"Cascade R-CNN(17/12)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#mask-scoring-r-cnn1903","text":"\u8bba\u6587\u5730\u5740 \u601d\u60f3 :\u672c\u7b97\u6cd5\u662f\u5728 Mask R-CNN \u7684\u57fa\u7840\u4e0a\u63d0\u51fa\u7684\uff0c\u4f5c\u8005\u53d1\u73b0\u7ecf\u5178\u5206\u5272\u6846\u67b6\u5b58\u5728\u7740\u4e00\u4e2a\u7f3a\u9677:mask score=bounding box\u7684classification confidence\uff0c\u7136\u800cmask score\u548cmask quality\u4e0d\u914d\u51c6(classification confidence\u9ad8\u53ef\u4ee5\u8868\u793a\u68c0\u6d4b\u6846\u7684\u7f6e\u4fe1\u5ea6\u9ad8\uff08\u4e25\u683c\u6765\u8bb2\u4e0d\u80fd\u8868\u793a\u6846\u7684\u5b9a\u4f4d\u7cbe\u51c6\uff09\uff0c\u4f46\u4e5f\u4f1a\u5b58\u5728mask\u5206\u5272\u7684\u8d28\u91cf\u5dee\u7684\u60c5\u51b5)\uff0c\u5982\u4f55\u5f97\u5230\u7cbe\u51c6mask\u8d28\u91cf\u5462\uff1f mask quality = maskIoU(pre_mask+gt_mask) * classification score:mask score\u5c31\u540c\u65f6\u8868\u793a\u5206\u7c7b\u7f6e\u4fe1\u5ea6\u548c\u5206\u5272\u7684\u8d28\u91cf \u505a\u6cd5 : \u5728Mask R-CNN\u7684\u57fa\u7840\u4e0a\u6dfb\u52a0\u4e86\u4e00\u4e2a**MaskIoU\u5206\u652f**\u7528\u4e8e\u5f97\u5230pre mask\u548cgt mask\u7684IoU\uff0c\u8f93\u5165\u7531\u4e24\u90e8\u5206\u7ec4\u6210 \u4e00\u662fROIAlign\u5f97\u5230\u7684RoI feature map = gt_mask \u4e8c\u662fmask\u5206\u652f\u8f93\u51fa\u7684mask = pre_mask \u68c0\u6d4b\u5206\u652f\u8f93\u51fascore\u6700\u9ad8\u7684100\u4e2a\u6846\uff0c\u518d\u9001\u5165mask\u5206\u652f\uff0c\u5f97\u5230mask\u7ed3\u679c \u4e24\u8005concat\u4e4b\u540e\u7ecf\u8fc73\u5c42\u5377\u79ef\u548c2\u5c42\u5168\u8fde\u63a5\u8f93\u51fa MaskIoU RoI feature map\u548cmask\u7ed3\u679c\u9001\u5165MaskIoU\u5206\u652f\u5f97\u5230mask iou\uff0c\u4e0ebox\u7684classification score\u76f8\u4e58\u5c31\u5f97\u5230\u6700\u540e\u7684mask score\u3002","title":"Mask Scoring R-CNN(19/03)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#cornernet1808","text":"\u8bba\u6587\u5730\u5740 \u901a\u8fc7\u68c0\u6d4b\u76ee\u6807\u6846\u7684\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u4e24\u4e2a\u5173\u952e\u70b9\u5f97\u5230\u9884\u6d4b\u6846 \uff0c\u56e0\u6b64CornerNet\u7b97\u6cd5\u4e2d\u6ca1\u6709anchor\u7684\u6982\u5ff5\uff0c\u4e5f\u5c31\u6ca1\u6709\u6837\u672c\u4e0d\u5747\u8861\uff0c\u4e5f\u65e0\u9700NMS\u3002 CornerNet\u7b97\u6cd5\u6574\u4f53\u7ed3\u6784 \u4e3b\u5e72\u7f51\u7edc Hourglass ,\u4e0b\u91c7\u6837\u56e0\u5b50 4 \uff1a 512//4=128 \u540e\u9762\u63a5\u4e86\u4e24\u4e2a\u5206\u652f( \u5de6\u4e0a\u89d2\u70b9\u9884\u6d4b\u5206\u652f\u548c\u53f3\u4e0b\u89d2\u70b9\u9884\u6d4b\u5206\u652f )\uff0c\u6bcf\u4e2a\u5206\u652f\u6a21\u5757\u5305\u542b\u4e00\u4e2a corner pooling \u5c42\u548c 3 \u4e2a\u8f93\u51fa\uff1a heatmaps\u3001embeddings\u548coffsets \u3002 heatmaps \u662f\u8f93\u51fa**\u9884\u6d4b\u89d2\u70b9\u4fe1\u606f**\uff0c\u53ef\u4ee5\u7528\u7ef4\u5ea6\u4e3a C*H*W \u7684\u7279\u5f81\u56fe\u8868\u793a\uff0c\u5176\u4e2dC\u8868\u793a\u76ee\u6807\u7684\u7c7b\u522b\uff08\u6ce8\u610f\uff1a\u6ca1\u6709\u80cc\u666f\u7c7b\uff09\uff0c\u8fd9\u4e2a\u7279\u5f81\u56fe\u7684\u6bcf\u4e2a\u901a\u9053\u90fd\u662f\u4e00\u4e2amask\uff0cmask\u7684\u6bcf\u4e2a\u503c\uff08\u9884\u6d4b\u503c\u8303\u56f4\u4e3a0~1\uff09\u8868\u793a\u8be5\u70b9\u662f**\u89d2\u70b9\u7684\u5206\u6570** p_cij \u8868\u793a\u9884\u6d4b\u7684heatmaps\u5728\u7b2cc\u4e2a\u901a\u9053\uff08\u7c7b\u522bc\uff09\u7684(i,j)\u4f4d\u7f6e\u7684\u503c\uff0c y_cij \u8868\u793a\u5bf9\u5e94\u4f4d\u7f6e\u7684 ground truth \uff0c N \u8868\u793a\u76ee\u6807\u7684\u6570\u91cf\u3002 y_cij=1 \u65f6\u5019\u7684\u635f\u5931\u51fd\u6570\u5bb9\u6613\u7406\u89e3\uff0c\u5c31\u662f focal loss \uff0c \u03b1\u53c2\u6570 \u7528\u6765\u63a7\u5236\u96be\u6613\u5206\u7c7b\u6837\u672c\u7684\u635f\u5931\u6743\u91cd\uff1b y_cij \u7b49\u4e8e\u5176\u4ed6\u503c\u65f6\u8868\u793a(i,j)\u70b9\u4e0d\u662f \u7c7b\u522bc \u7684\u76ee\u6807\u89d2\u70b9\uff0c\u7167\u7406\u8bf4\u6b64\u65f6 y_cij \u5e94\u8be5\u662f0\uff08\u5927\u90e8\u5206\u7b97\u6cd5\u90fd\u662f\u8fd9\u6837\u5904\u7406\u7684\uff09\uff0c\u4f46\u662f\u8fd9\u91ccycij\u4e0d\u662f0\uff0c\u800c\u662f\u7528\u57fa\u4e8e ground truth \u89d2\u70b9\u7684\u9ad8\u65af\u5206\u5e03\u8ba1\u7b97\u5f97\u5230\uff0c\u56e0\u6b64\u8ddd\u79bbground truth\u6bd4\u8f83\u8fd1\u7684(i,j)\u70b9\u7684 y_cij \u503c\u63a5\u8fd11\uff0c\u8fd9\u90e8\u5206\u901a\u8fc7 \u03b2\u53c2\u6570 \u63a7\u5236\u6743\u91cd\uff0c\u8fd9\u662f\u548c focal loss \u7684\u5dee\u522b\u3002\u4e3a\u4ec0\u4e48\u5bf9\u4e0d\u540c\u7684\u8d1f\u6837\u672c\u70b9\u7528\u4e0d\u540c\u6743\u91cd\u7684\u635f\u5931\u51fd\u6570\u5462\uff1f\u8fd9\u662f\u56e0\u4e3a\u9760\u8fd1ground truth\u7684\u8bef\u68c0\u89d2\u70b9\u7ec4\u6210\u7684\u9884\u6d4b\u6846\u4ecd\u4f1a\u548cground truth\u6709\u8f83\u5927\u7684\u91cd\u53e0\u9762\u79ef\u3002 \u5bf9\u4e0d\u540c\u8d1f\u6837\u672c\u70b9\u7684\u635f\u5931\u51fd\u6570\u91c7\u53d6\u4e0d\u540c\u6743\u91cd\u503c\u7684\u539f\u56e0 embeddings \u7528\u6765\u5bf9\u9884\u6d4b\u7684\u89d2\u70b9\u505agroup\uff0c\u4e5f\u5c31\u662f\u627e\u5230\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\u7684\u5de6\u4e0a\u89d2\u89d2\u70b9\u548c\u53f3\u4e0b\u89d2\u89d2\u70b9 \u4e0a\u9762\u4ecb\u7ecd\u7684\u4e24\u4e2a\u89d2\u70b9\u7684\u9884\u6d4b\u662f\u72ec\u7acb\u7684\uff0c\u5982\u4f55\u627e\u5230\u4e00\u4e2a\u76ee\u6807\u7684\u4e24\u4e2a\u89d2\u70b9\u5c31\u662f\u8fd9\u6b65\u5b8c\u6210\u7684\u3002 \u57fa\u4e8e\u4e0d\u540c\u89d2\u70b9\u7684embedding vector\u4e4b\u95f4\u7684\u8ddd\u79bb\u627e\u5230\u6bcf\u4e2a\u76ee\u6807\u7684\u4e00\u5bf9\u89d2\u70b9\uff0c\u5982\u679c\u4e00\u4e2a\u5de6\u4e0a\u89d2\u89d2\u70b9\u548c\u4e00\u4e2a\u53f3\u4e0b\u89d2\u89d2\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\uff0c\u90a3\u4e48\u4e8c\u8005\u7684embedding vector\u4e4b\u95f4\u7684\u8ddd\u79bb\u5e94\u8be5\u5f88\u5c0f \u3002 \u8fd9\u90e8\u5206\u7684\u8bad\u7ec3\u4e3b\u8981\u662f\u901a\u8fc7\u4e24\u4e2a\u635f\u5931\u51fd\u6570\u5b8c\u6210 e_tk \u8868\u793a\u7b2c k \u4e2a\u76ee\u6807\u7684**\u5de6\u4e0a\u89d2\u89d2\u70b9**\u7684embedding vector\uff0c e_bk \u8868\u793a\u7b2ck\u4e2a\u76ee\u6807\u7684**\u53f3\u4e0b\u89d2\u89d2\u70b9**\u7684embedding vector\uff0c e_k \u8868\u793a e_tk\u548ce_bk \u7684\u5747\u503c\u3002 \u516c\u5f0f4\u7528\u6765\u7f29\u5c0f\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\uff08\u7b2ck\u4e2a\u76ee\u6807\uff09\u7684\u4e24\u4e2a\u89d2\u70b9\u7684embedding vector\uff08etk\u548cebk\uff09\u8ddd\u79bb\u3002 \u516c\u5f0f5\u7528\u6765\u6269\u5927\u4e0d\u5c5e\u4e8e\u540c\u4e00\u4e2a\u76ee\u6807\u7684\u4e24\u4e2a\u89d2\u70b9\u7684embedding vector\u8ddd\u79bb\u3002 offsets \u7528\u6765**\u5bf9\u9884\u6d4b\u6846\u505a\u5fae\u8c03**\uff0c\u8fd9\u662f\u56e0\u4e3a\u4ece\u8f93\u5165\u56fe\u50cf\u4e2d\u7684\u70b9\u6620\u5c04\u5230\u7279\u5f81\u56fe\u65f6\u6709\u91cf\u5316\u8bef\u5dee\uff0coffsets\u5c31\u662f\u7528\u6765\u8f93\u51fa\u8fd9\u4e9b\u8bef\u5dee\u4fe1\u606f\u3002 \u4ece\u8f93\u5165\u56fe\u50cf\u5230\u7279\u5f81\u56fe\u4e4b\u95f4\u4f1a\u6709\u5c3a\u5bf8\u7f29\u5c0f\uff0c\u5047\u8bbe\u7f29\u5c0f\u500d\u6570\u662fn\uff0c\u90a3\u4e48\u8f93\u5165\u56fe\u50cf\u4e0a\u7684(x,y)\u70b9\u5bf9\u5e94\u5230\u7279\u5f81\u56fe\u4e0a\u7684\u5f0f\u5b50: ,\u5411\u4e0b\u53d6\u6574\u4f1a\u5e26\u6765\u7cbe\u5ea6\u4e22\u5931(\u7c7b\u4f3cFasterRcnn\u4e2d\u7684\u7cbe\u5ea6\u4e22\u5931: \u5c24\u5176\u5f71\u54cd\u5c0f\u5c3a\u5bf8\u76ee\u6807\u7684\u56de\u5f52 ) \u516c\u5f0f2\u8ba1\u7b97offset\uff0c\u7136\u540e\u901a\u8fc7\u516c\u5f0f3\u7684smooth L1\u635f\u5931\u51fd\u6570\u76d1\u7763\u5b66\u4e60\u8be5\u53c2\u6570\uff0c\u548c\u5e38\u89c1\u7684\u76ee\u6807\u68c0\u6d4b\u7b97\u6cd5\u4e2d\u7684\u56de\u5f52\u652f\u8def\u7c7b\u4f3c\u3002 corner pooling \u4e3a\u4ec0\u4e48\u4f7f\u7528 corner pooling \u800c\u4e0d\u662f\u4f7f\u7528\u666e\u901a\u6c60\u5316 \u56e0\u4e3aCornerNet\u662f\u9884\u6d4b\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u4e24\u4e2a\u89d2\u70b9\uff0c\u4f46\u662f\u8fd9\u4e24\u4e2a\u89d2\u70b9\u5728\u4e0d\u540c\u76ee\u6807\u4e0a\u6ca1\u6709\u76f8\u540c\u89c4\u5f8b\u53ef\u5faa\uff0c\u5982\u679c\u91c7\u7528\u666e\u901a\u6c60\u5316\u64cd\u4f5c\uff0c\u90a3\u4e48\u5728\u8bad\u7ec3\u9884\u6d4b\u89d2\u70b9\u652f\u8def\u65f6\u4f1a\u6bd4\u8f83\u56f0\u96be\u3002\u8003\u8651\u5230\u5de6\u4e0a\u89d2\u89d2\u70b9\u7684\u53f3\u8fb9\u6709\u76ee\u6807\u9876\u7aef\u7684\u7279\u5f81\u4fe1\u606f\uff08\u7b2c\u4e00\u5f20\u56fe\u7684\u5934\u9876\uff09\uff0c\u5de6\u4e0a\u89d2\u89d2\u70b9\u7684\u4e0b\u8fb9\u6709\u76ee\u6807\u5de6\u4fa7\u7684\u7279\u5f81\u4fe1\u606f\uff08\u7b2c\u4e00\u5f20\u56fe\u7684\u624b\uff09\uff0c\u56e0\u6b64\u5982\u679c\u5de6\u4e0a\u89d2\u89d2\u70b9\u7ecf\u8fc7\u6c60\u5316\u64cd\u4f5c\u540e\u80fd\u6709\u8fd9\u4e24\u4e2a\u4fe1\u606f\uff0c\u90a3\u4e48\u5c31\u6709\u5229\u4e8e\u8be5\u70b9\u7684\u9884\u6d4b\uff0c\u8fd9\u5c31\u6709\u4e86corner pooling\u3002 \u5982\u4f55\u9488\u5bf9\u5de6\u4e0a\u89d2\u70b9\u505a corner pooling \uff1f \u4e0a\u5c42\u67092\u4e2a\u8f93\u5165\u7279\u5f81\u56fe\uff0c\u7279\u5f81\u56fe\u7684\u5bbd\u9ad8\u5206\u522b\u7528W\u548cH\u8868\u793a\uff0c\u5047\u8bbe\u63a5\u4e0b\u6765\u8981\u5bf9\u56fe\u4e2d\u7ea2\u8272\u70b9\uff08\u5750\u6807\u5047\u8bbe\u662f(i,j)\uff09\u505acorner pooling\uff0c\u90a3\u4e48\u5c31\u8ba1\u7b97(i,j)\u5230(i,H)\u7684\u6700\u5927\u503c\uff08\u5bf9\u5e94Figure3\u4e0a\u9762\u7b2c\u4e8c\u4e2a\u56fe\uff09\uff0c\u7c7b\u4f3c\u4e8e\u627e\u5230Figure2\u4e2d\u7b2c\u4e00\u5f20\u56fe\u7684\u5de6\u4fa7\u624b\u4fe1\u606f\uff1b\u540c\u65f6\u8ba1\u7b97(i,j)\u5230(W,j)\u7684\u6700\u5927\u503c\uff08\u5bf9\u5e94Figure3\u4e0b\u9762\u7b2c\u4e8c\u4e2a\u56fe\uff09\uff0c\u7c7b\u4f3c\u4e8e\u627e\u5230Figure2\u4e2d\u7b2c\u4e00\u5f20\u56fe\u7684\u5934\u9876\u4fe1\u606f\uff0c\u7136\u540e\u5c06\u8fd9\u4e24\u4e2a\u6700\u5927\u503c\u76f8\u52a0\u5f97\u5230(i,j)\u70b9\u7684\u503c\uff08\u5bf9\u5e94Figure3\u6700\u540e\u4e00\u4e2a\u56fe\u7684\u84dd\u8272\u70b9\uff09\u3002\u53f3\u4e0b\u89d2\u70b9\u7684corner pooling\u64cd\u4f5c\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u8ba1\u7b97\u6700\u5927\u503c\u53d8\u6210\u4ece(0,j)\u5230(i,j)\u548c\u4ece(i,0)\u5230(i,j)\u3002 \u4e3e\u4f8b\u89e3\u91ca\u5982\u4f55\u5bf9\u5de6\u4e0a\u89d2\u505a corner pooling \u8be5\u56fe\u4e00\u5171\u8ba1\u7b97\u4e864\u4e2a\u70b9\u7684corner pooling\u7ed3\u679c\u3002\u7b2c\u4e8c\u5217\u7684\u6570\u503c\u8ba1\u7b97\u548cFigure3\u4ecb\u7ecd\u7684\u4e00\u6837\uff0c\u6bd4\u5982\u7b2c\u4e00\u884c\u7b2c\u4e00\u4e2a\u56fe\u4e2d\u76840\u503c\u70b9\uff0c\u8ba1\u7b97\u8be5\u70b9\u7684\u6700\u5927\u503c\u65f6\u662f\u8ba1\u7b97\u8be5\u70b9\u548c\u5176\u53f3\u4fa7\u7684\u503c\u4e3a2\u7684\u70b9\u7684\u6700\u5927\u503c\uff0c\u56e0\u6b64\u5f97\u5230\u7684\u5c31\u662f2\u3002 \u9884\u6d4b\u6a21\u5757\u8be6\u7ec6\u7ed3\u6784 \u8be5\u7ed3\u6784\u5305\u62eccorner pooling\u6a21\u5757\u548c\u9884\u6d4b\u8f93\u51fa\u6a21\u5757\u4e24\u90e8\u5206\uff0ccorner pooling\u6a21\u5757\u91c7\u7528\u4e86\u7c7b\u4f3cresidual block\u7684\u5f62\u5f0f\uff0c\u6709\u4e00\u4e2askip connection\uff0c\u865a\u7ebf\u6846\u90e8\u5206\u6267\u884c\u7684\u5c31\u662fcorner pooling\u64cd\u4f5c\uff0c\u4e5f\u5c31\u662fFigure6\u7684\u64cd\u4f5c\uff0c\u8fd9\u6837\u6574\u4e2acorner pooling\u64cd\u4f5c\u5c31\u4ecb\u7ecd\u5b8c\u4e86\u3002 \u6a21\u578b\u6d4b\u8bd5\u65f6\u7ec6\u8282 \u5728\u5f97\u5230\u9884\u6d4b\u89d2\u70b9\u540e\uff0c\u4f1a\u5bf9\u8fd9\u4e9b\u89d2\u70b9\u505aNMS\u64cd\u4f5c\uff0c\u9009\u62e9\u524d100\u4e2a\u5de6\u4e0a\u89d2\u89d2\u70b9\u548c100\u4e2a\u53f3\u4e0b\u89d2\u89d2\u70b9\u3002 \u8ba1\u7b97\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u89d2\u70b9\u7684embedding vector\u7684\u8ddd\u79bb\u65f6\u91c7\u7528L1\u8303\u6570\uff0c\u8ddd\u79bb\u5927\u4e8e0.5\u6216\u8005\u4e24\u4e2a\u70b9\u6765\u81ea\u4e0d\u540c\u7c7b\u522b\u7684\u76ee\u6807\u7684\u90fd\u4e0d\u80fd\u6784\u6210\u4e00\u5bf9\u3002 \u6d4b\u8bd5\u56fe\u50cf\u91c7\u75280\u503c\u586b\u5145\u65b9\u5f0f\u5f97\u5230\u6307\u5b9a\u5927\u5c0f\u4f5c\u4e3a\u7f51\u7edc\u7684\u8f93\u5165\uff0c\u800c\u4e0d\u662f\u91c7\u7528resize\uff0c\u53e6\u5916\u540c\u65f6\u6d4b\u8bd5\u56fe\u50cf\u7684\u6c34\u5e73\u7ffb\u8f6c\u56fe\u5e76\u878d\u5408\u4e8c\u8005\u7684\u7ed3\u679c\u3002 \u6700\u540e\u901a\u8fc7soft-nms\u64cd\u4f5c\u53bb\u9664\u5197\u4f59\u6846\uff0c\u53ea\u4fdd\u7559\u524d100\u4e2a\u9884\u6d4b\u6846\u3002","title":"CornerNet(18/08)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#fcos1903","text":"\u8bba\u6587 | \u4ee3\u7801 \u6838\u5fc3\u601d\u60f3(\u4e0d\u592a\u5229\u4e8e\u5c0f\u76ee\u6807\u8bad\u7ec3) one-stage(\u4e0eRetinaNet\u5bf9\u6bd4)+anchorfree(cornerNet\u601d\u60f3) \u501f\u9274 FCN \u7684\u9010\u50cf\u7d20\u76ee\u6807\u68c0\u6d4b\u601d\u60f3:\u9884\u6d4b\u8f93\u5165\u56fe\u50cf\u4e2d\u6bcf\u4e2a\u70b9\u6240\u5c5e\u7684\u76ee\u6807\u7c7b\u522b\u548c\u76ee\u6807\u6846 \u63d0\u51fa\u4e86 \u4e2d\u5fc3\u5ea6\uff08Center\u2014ness\uff09 \u7684\u601d\u60f3 \u7f51\u7edc\u7ed3\u6784 \u7c7b\u4f3c FPN \u7684\u7f51\u7edc\u7ed3\u6784(\u56e0\u4e3a\u548c RetinaNet \u505a\u5bf9\u6bd4,\u6240\u4ee5\u7f51\u7edc\u7ed3\u6784\u7c7b\u4f3c),\u6700\u540e\u57fa\u4e8e5\u4e2a\u7279\u5f81\u56fe\u505a\u9884\u6d4b,\u9884\u6d4b\u5c42\u6709\u4e09\u4e2a\u5206\u652f,\u4e0b\u9762\u89e3\u91ca\u4e09\u4e2a\u9884\u6d4b\u5c42\u3002 \u7b2c\u4e00\u4e2a\u662f**\u5206\u7c7b\u652f\u8def**: H*W \u8868\u793a\u7279\u5f81\u7684\u5927\u5c0f, C \u8868\u793a\u7c7b\u522b\u6570,\u8be5\u9884\u6d4b\u5c42\u7684\u7279\u5f81\u56fe\u4f4d\u7f6e(x,y)\u5bf9\u5e94\u5230\u8f93\u5165\u56fe\u50cf\u4f4d\u7f6e\u6362\u7b97\u516c\u5f0f\u5982\u4e0b(s\u8868\u793a\u7f29\u653e\u6bd4\u4f8b),\u65b9\u4fbf\u8ba1\u7b97\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u7684\u5206\u7c7b\u548c\u56de\u5f52\u76ee\u6807: \u7b2c\u4e09\u4e2a\u662f**\u56de\u5f52\u5206\u652f**:4\u8868\u793a**\u56de\u5f52\u76f8\u5173\u76844\u4e2a\u503c**( (l,t,r,b) \u4e0d\u540c\u4e8e anchor \u7684\u4e3b\u8981\u5dee\u522b) 4\u4e2a\u503c (l,t,r,b) \u8868\u793a\u76ee\u6807\u6846\u5185\u67d0\u4e2a\u70b9\u79bb\u6846\u7684\u5de6\u8fb9\u3001\u4e0a\u8fb9\u3001\u53f3\u8fb9\u3001\u4e0b\u8fb9\u7684\u8ddd\u79bb \u6807\u6ce8\u597d\u7684\u76ee\u6807\u6846(\u5de6\u4e0a\u89d2+\u53f3\u4e0b\u89d2+\u7c7b\u522b)\u8868\u793a: B_i = ({x_0}^{(i)},{y_0}^{(i)},{x_1}^{(i)},{y_1}^{(i)},{c}^{(i)}) B_i = ({x_0}^{(i)},{y_0}^{(i)},{x_1}^{(i)},{y_1}^{(i)},{c}^{(i)}) \u786e\u5b9a\u8f93\u5165\u56fe\u50cf\u7684\u6bcf\u4e2a\u70b9\u7c7b\u522b\u6807\u7b7e(\u6839\u636e\u8fd9\u4e2a\u70b9\u662f\u5426\u5728\u6807\u8bb0\u6846\u4e2d:\u5728->\u6b63\u6837\u672c,\u7c7b\u522b=\u6807\u6ce8\u6846\u7c7b\u522b.\u4e0d\u5728:\u8d1f\u6837\u672c,\u7c7b\u522b=0)\uff0c\u56de\u5f52\u76ee\u6807\u5c31\u662f\u4e0b\u9762\u8fd94\u4e2a\u503c(\u4e3a\u4fdd\u8bc1\u90fd\u662f\u6b63\u503c,\u56db\u503c\u90fd\u9700\u8981\u901a\u8fc7exp()\u51fd\u6570): FCOS\u7684\u6b63\u8d1f\u6837\u672c\u662f\u57fa\u4e8e\u6bcf\u4e2a\u70b9\u7684\uff0c\u4e00\u822c\u4e00\u5f20\u56fe\u50cf\u4e0a\u76ee\u6807\u6846\u7684\u9762\u79ef\u548c\u975e\u76ee\u6807\u6846\u7684\u9762\u79ef\u5dee\u8ddd\u4e0d\u4f1a\u975e\u5e38\u5927\uff0c \u56e0\u6b64\u57fa\u672c\u4e0d\u5b58\u5728\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u7684\u73b0\u8c61(\u5c0f\u76ee\u6807\u5c31\u4e0d\u592a\u597d\u8bad\u7ec3\u4e86) \u3002 \u4e0a\u56fe\u6846\u91cd\u53e0,\u91cd\u5408\u70b9\u7684\u8bad\u7ec3\u76ee\u6807\u5982\u4f55\u7b97\uff1f \u4f5c\u8005\u5f15\u5165 FPN \u7ed3\u6784\u5e76\u57fa\u4e8e\u4e0d\u540c\u7279\u5f81\u5c42\u9884\u6d4b\u4e0d\u540c\u5c3a\u5ea6\u7684\u76ee\u6807\u6846,\u8fd9\u6837\u53ef\u4ee5\u628a**\u5927\u90e8\u5206\u91cd\u5408\u76ee\u6807\u6846\u7ed9\u5265\u79bb**\u3002 \u5982\u4f55\u786e\u5b9a\u67d0\u4e2a\u70b9\u5728\u54ea\u4e2a\u7279\u5f81\u5c42(5\u4e2a)\u5462? \u8be5\u70b9\u7684 (l, t, r, b) \u8fd94\u4e2a\u503c\u7684\u6700\u5927\u503c\u662f\u5426\u5728\u9884\u5148\u8bbe\u5b9a\u597d\u7684\u8303\u56f4\u5185(\u6bcf\u4e2a\u7279\u5f81\u5c42\u90fd\u9884\u5148\u8bbe\u5b9a\u597d\u5c3a\u5ea6\u8303\u56f4\uff0c\u6bd4\u5982P3\u5c42\u53ea\u8d1f\u8d23\u6700\u5927\u503c\u5728[0, 64]\u8303\u56f4\u5185\u7684\u70b9\uff0cP4\u5c42\u53ea\u8d1f\u8d23\u6700\u5927\u503c\u5728[64, 128]\u8303\u56f4\u5185\u7684\u70b9\uff0c\u4f9d\u6b21\u7c7b\u63a8) \u4e3e\u4f8b\u5b50:\u4e0a\u56fe\u4e2d,\u5047\u8bbe\u91cd\u5408\u90e8\u5206\u7684\u90a3\u4e2a\u70b9\u5230\u7403\u62cd\u6846\u76844\u4e2a\u8ddd\u79bb\u4e2d\u6700\u5927\u503c\u4e3a60\uff0c\u5230\u4eba\u6846\u76844\u4e2a\u8ddd\u79bb\u4e2d\u6700\u5927\u503c\u4e3a120\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5728P3\u5c42\u65f6\u7684\u56de\u5f52\u76ee\u6807\u662f\u7403\u62cd\u6846\uff0c\u5728P4\u5c42\u65f6\u7684\u56de\u5f52\u76ee\u6807\u662f\u4eba\u6846\uff0c\u800c\u5728P5\u3001P6\u3001P7\u5c42\u65f6\u662f\u8d1f\u6837\u672c\u70b9\u3002 \u8be5\u7b56\u7565\u9002\u7528\u4e8e\u57fa\u4e8e\u5927\u90e8\u5206\u6709\u91cd\u5408\u800c\u4e14\u76ee\u6807\u6846\u5c3a\u5ea6\u5dee\u522b\u8f83\u5927\u7684 \u5982\u679c\u91cd\u5408\u76ee\u6807\u6846\u5927\u5c0f\u63a5\u8fd1\u4e14\u7c7b\u522b\u4e0d\u540c,\u8fd9\u4e2a\u5c31\u6bd4\u8f83\u68d8\u624b\u4e86,\u5982\u4f55\u505a\uff1f \u5bf9\u4e8e\u90a3\u4e9b\u4ecd\u65e7\u65e0\u6cd5\u5265\u79bb\u7684\u76ee\u6807\u6846\uff0c\u4f7f\u7528**\u5f3a\u5236\u7b56\u7565**\uff1a\u8bad\u7ec3\u76ee\u6807\u57fa\u4e8e\u91cd\u5408\u76ee\u6807\u6846\u4e2d\u9762\u79ef\u6700\u5c0f\u7684\u90a3\u4e2a\u6846\u8fdb\u884c\u8ba1\u7b97(yolov3\u4e2d3\u4e2a\u7279\u5f81\u56fe\u4e0a\u5206\u522b\u52063\u6bb5anchor,\u5927\u7279\u5f81\u56fe\u5c0fanchor,\u4f46\u8fd9\u79cd\u65b9\u5f0f\u5e76\u4e0d\u662f\u5f3a\u5236\u7684: \u6709\u4e00\u4e9b\u5927\u76ee\u6807\u53ef\u80fd\u8fd8\u662f\u901a\u8fc7\u6d45\u5c42\u9884\u6d4b\u5f97\u5230\u7684\uff0c\u53cd\u4e4b\u4ea6\u7136 )\u3002 \u7b2c\u4e8c\u4e2a\u5206\u652f\u8f93\u51fa Center-ness (\u4e2d\u5fc3\u5ea6),\u7528\u4e8e\u8ba1\u7b97\u6bcf\u4e2a\u70b9\u548c\u76ee\u6807\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\uff0c\u7528\u4e8e\u51cf\u5c11\u90a3\u4e9b\u79bb\u76ee\u6807\u4e2d\u5fc3\u70b9\u8f83\u8fdc\u7684\u9884\u6d4b\u70b9\u3002 \u5982\u679c\u4e0d\u52a0\u5165\u8fd9\u4e2a\u5206\u652f, AP \u6700\u597d\u7684\u662f 33.8 < RetinaNet AP=36.1 ,\u539f\u56e0: \u90e8\u5206\u8bef\u68c0\u6846(\u9519\u7684\u79bb\u8c31\u7684\u6846)\u79bb\u771f\u5b9e\u6846\u7684\u4e2d\u5fc3\u70b9\u8ddd\u79bb\u8f83\u5927 ,\u89e3\u51b3: \u5206\u7c7b\u652f\u8def\u7684\u8f93\u51fa\u4e58\u4ee5\u4e00\u4e2a \u6743\u91cd\u56fe(Center-ness\u5206\u652f\u8f93\u51fa) \u5f97\u5230\u6700\u7ec8\u7684\u5206\u7c7b\u7f6e\u4fe1\u5ea6\uff0c\u800c\u8fd9\u4e2a\u6743\u91cd\u56fe\u4ee3\u8868\u7684\u5c31\u662f\u76ee\u6807\u6846\u4e2d\u6bcf\u4e2a\u70b9\u5230\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\uff0c\u8ddd\u79bb\u8d8a\u8fd1\uff0c\u6743\u91cd\u8d8a\u5927 \u3002 \u8be5\u5206\u652f\u65e2\u7136\u8bad\u7ec3\u5f97\u5230\u6743\u91cd\u56fe\uff0c\u5176\u76d1\u7763\u4fe1\u606f\u7528\u4e0b\u5f0f\u8868\u793a\uff0c\u56db\u4e2a\u8f93\u5165\u503c\u662f\u56de\u5f52\u652f\u8def\u7684\u56de\u5f52\u76ee\u6807:","title":"FCOS(19/03)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#nanodet97fpsanchor-free","text":"code | \u77e5\u4e4e\u535a\u5ba2 | \u5fae\u4fe1\u535a\u5ba2 |FCOS\u6539\u8fdb","title":"NanoDet(\u624b\u673a\u7aef97fps:Anchor Free)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#centernet1904","text":"\u8bba\u6587\u5730\u5740 | code | \u535a\u5ba21 | \u535a\u5ba22 | \u901a\u8fc7\u9884\u6d4b\u4e2d\u5fc3\u70b9\u6765\u9884\u6d4b\u7269\u4f53 \u65e0 Anchor \uff0c\u6bcf\u4e00\u4e2a\u76ee\u6807\u5bf9\u5e94\u4e00\u4e2a\u6846\uff0c\u65e0\u9700\u533a\u5206anchor\u662f\u80cc\u666f\u8fd8\u662f\u7269\u4f53\u3002\u8f93\u51fa\u5206\u8fa8\u7387\u7684\u4e0b\u91c7\u6837\u56e0\u5b50 4 \u76f8\u5bf9 maskRcnn(\u6700\u5c0f:16) \u548c ssd(16) \u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u8f93\u51fa\u7684\u5206\u8fa8\u7387\u6bd4\u8f83\u5927( 512//4=128 )\u3002 PS\uff1a \u672c\u7bc7\u8bba\u6587\u662f Objects as Points ,\u548c CenterNet:Keypoint Triplets for Object Detection \u8bba\u6587\u7f51\u7edc\u540d\u51b2\u7a81\u4e86\uff0c\u4e0d\u8981\u6df7\u6dc6\u3002 \u7f51\u7edc\u7ed3\u6784 \u8bba\u6587\u4e2dCenterNet\u63d0\u5230\u4e86\u4e09\u79cd\u7528\u4e8e\u76ee\u6807\u68c0\u6d4b\u7684\u7f51\u7edc\uff0c\u8fd9\u4e09\u79cd\u7f51\u7edc\u90fd\u662f\u7f16\u7801\u89e3\u7801(encoder-decoder)\u7684\u7ed3\u6784\uff0c\u6bcf\u4e2a\u7f51\u7edc\u5185\u90e8\u7684\u7ed3\u6784\u4e0d\u540c\uff0c\u4f46\u662f\u5728\u6a21\u578b\u7684\u6700\u540e\u90fd\u662f\u52a0\u4e86**\u4e09\u4e2a\u7f51\u7edc\u6784\u9020**\u6765\u8f93\u51fa\u9884\u6d4b\u503c\uff0c\u9ed8\u8ba4\u662f 80 \u4e2a\u7c7b\u3001 2\u4e2a \u9884\u6d4b\u7684\u4e2d\u5fc3\u70b9\u5750\u6807\u3001 2\u4e2a \u4e2d\u5fc3\u70b9\u7684\u504f\u7f6e\uff0cpytorch\u8f93\u51fa\u5206\u522b\u662f hm->Conv2d(64,80):heatmap\u70ed\u529b\u56fe,wh->Conv2d(64,2),reg->Conv2d(64,2) \uff1a Resnet-18 with up-convolutional layers : 28.1% coco and 142 FPS DLA-34 : 37.4% COCOAP and 52 FPS Hourglass-104 : 45.1% COCOAP and 1.4 FPS \u70ed\u529b\u56fe\u7406\u89e3 (GT\u6846label\u7684\u751f\u6210) heatmap \u662f\u8868\u793a\u5206\u7c7b\u4fe1\u606f\u3002\u6bcf\u4e00\u4e2a\u7c7b\u522b\u90fd\u6709\u4e00\u5f20 heatmap \uff0c\u6bcf\u4e00\u5f20 heatmap \u4e0a\uff0c\u82e5\u67d0\u4e2a\u5750\u6807\u5904\u6709\u7269\u4f53\u76ee\u6807\u7684\u4e2d\u5fc3\u70b9\uff0c\u5373\u5728\u8be5\u5750\u6807\u5904\u4ea7\u751f\u4e00\u4e2a keypoint (\u7528**\u9ad8\u65af\u5706**\u8868\u793a\uff09 \u539f\u59cb\u6846\u4e2d\u5fc3\u70b9\u5750\u6807( p=((x1+x2)/2,(y1+y2)/2) )\u2192\u7279\u5f81\u56fe\u4e2d\u5fc3\u70b9 p//4->p~ \u8be5\u7c7b\u7684 heatmap (\u5176\u5b9e\u5c31\u662f\u7279\u5f81\u56fe\u7684\u7b2cc\u4e2a\u901a\u9053)\uff0c\u6709\u51e0\u4e2a\u540c\u7c7b\u7269\u4f53\u5c31\u6709\u51e0\u4e2a\u70b9\uff0c\u4f46\u53ea\u6709\u4e00\u4e2a\u70b9\u503c\u4e3a 1 \u5468\u56f4\u5176\u4f59\u70b9\u4e3a 0 \u592a\u4e25\u683c\u4e86\uff0c\u5468\u8fb9\u9700\u8981\u7528\u4e8c\u7ef4\u7684\u9ad8\u65af\u6838\u8fc7\u6e21\u4e00\u4e0b(\u7b80\u5355\u6765\u8bf4\u5c31\u662f\u8be5\u70b9\u4e3a\u5706\u5fc3\uff0c\u534a\u5f84 r \u4e3a GT \u6846 IOU \u5927\u4e8e 0.7 \u7684\u8fd9\u4e9b\u70b9(\u8fd9\u4e9b\u70b9\u751f\u6210\u7684\u6846\u4e5f\u80fd\u5f88\u597d\u7684\u5305\u56f4\u76ee\u6807)\uff0c\u6807\u7b7e\u4e0d\u76f4\u63a5\u8bbe\u7f6e\u4e3a 0 \uff0c\u800c\u662f\u4f7f\u7528\u4e8c\u7ef4\u9ad8\u65af\u7684\u65b9\u5f0f\u9010\u6e10\u51cf\u5c11\u8be5\u503c\uff0c \u5982\u679c\u67d0\u4e00\u4e2a\u7c7b\u7684\u4e24\u4e2a\u9ad8\u65af\u5206\u5e03\u53d1\u751f\u4e86\u91cd\u53e0\uff0c\u76f4\u63a5\u53d6\u5143\u7d20\u95f4\u6700\u5927\u7684\u5c31\u53ef\u4ee5 ) \u9ad8\u65af\u51fd\u6570 \u6700\u7ec8\u7ed3\u679c \u635f\u5931\u51fd\u6570 \u4e2d\u5fc3\u70b9\u9884\u6d4b\u7684\u635f\u5931\u51fd\u6570(\u662f\u4e0d\u662f\u7269\u4f53):\u4fee\u6539\u7248 Focal Loss alpha=2,beta=4 ,\u662f Focal loss \u8d85\u53c2\u6570\uff0c N :\u662f\u56fe\u50cf I \u7684\u5173\u952e\u70b9\u6570\u91cf \u5f53 Y_xyc=1 \u65f6 \u5bf9\u4e8e easy point \u9002\u5f53\u51cf\u5c11\u5176\u8bad\u7ec3\u6bd4\u91cd(Y=1,Y ->1,(1-Y )->0) \u5bf9\u4e8e hard point \u9002\u5f53\u589e\u52a0\u5176\u6743\u91cd\u6bd4\u91cd(Y=1,Y ->0,(1-Y )->1) \u5f53 Y_xyc=otherwise \u65f6 Y^ \u672c\u8be5\u8d8b\u4e8e 0 \uff0c\u5982\u679c\u8d8b\u8fd1 1 \u5219\u4f1a\u52a0\u5927\u8bad\u7ec3\u6743\u91cd\u8fdb\u884c\u60e9\u7f5a\uff0c\u8ba9\u5176\u8d8b\u8fd1\u4e8e 0 1-Y \u5bf9\u8ddd\u79bb\u4e2d\u5fc3\u70b9\u5f88\u8fd1\u7684\u70b9\u8fdb\u884c\u6291\u5236(\u79bb\u4e2d\u5fc3\u70b9\u8d8a\u8fd1\u8d8a\u5bb9\u6613\u5f71\u54cd\u9020\u6210\u8bef\u68c0\u6d4b)(Y->1,1-Y->0) \u5982\u4f55\u8ba9 (1-Y)\u548cY^ \u534f\u540c\u5408\u4f5c\u5462\uff1f \u76ee\u6807\u4e2d\u5fc3\u70b9\u7684\u504f\u7f6e\u635f\u5931:\u4e0b\u91c7\u6837 R=4 \uff0c\u53d6\u6b63\u540e\u4e2d\u5fc3\u70b9\u4f4d\u7f6e\u4f1a\u5e26\u6765\u8bef\u5dee\uff0c\u6240\u6709 C \u7c7b\u516c\u7528\u4e00\u4e2a\u504f\u7f6e\uff0c\u635f\u5931\u7528 L1 Loss \u6765\u8bad\u7ec3\u3002 Q \u4e3a\u9884\u6d4b\u51fa\u6765\u7684\u504f\u7f6e (N,2) \uff0c (p/R - p~) \u662f\u5b9e\u9645\u8ba1\u7b97\u51fa\u7684\u504f\u7f6e [98.97667 2.3566666] - [98 2] = [0.97667, 0.3566666] \u76ee\u6807\u5927\u5c0f\u635f\u5931\uff1a sk = [xmax-xmin,ymax-ymin] ,k\u4e3a\u6240\u5c5e\u7c7b\u522b\uff0c\u662f\u8fdb\u884c\u4e86\u4e0b\u91c7\u6837\u4e4b\u540e h,w S^_pk \uff1a\u9884\u6d4b\u503c\uff0c\u4f7f\u7528 (N,2) \u8868\u793a \u6574\u4f53\u635f\u5931 \u5982\u4f55\u63a8\u7406\uff1f \u5bf9\u4e8e\u67d0\u7c7b\u7684\u4e00\u4e2a heatmap ,\u4f7f\u7528 3x3\u7684MaxPool \u9009\u53d6100\u4e2a\u9884\u6d4b\u7684\u4e2d\u5fc3\u70b9(\u7c7b\u4f3c NMS \uff0c\u5176\u5b9e\u5c31\u662f\u68c0\u6d4b\u5f53\u524d\u70ed\u70b9\u7684\u503c\u662f\u5426\u6bd4\u5468\u56f4\u7684\u516b\u4e2a\u8fd1\u90bb\u70b9(\u516b\u65b9\u4f4d)\u90fd\u5927(\u6216\u8005\u7b49\u4e8e)\uff0c\u9009\u53d6100\u4e2a\uff0c\u5f97\u5206\u6309\u7167 Y~ )\uff0c\u7136\u540e\u9009\u53d6\u9608\u503c\u7ed3\u679c\u5927\u4e8e 0.3 \u7684\u4e2d\u5fc3\u70b9\u4f5c\u4e3a\u6700\u7ec8\u7ed3\u679c\u3002 \u6846\u5982\u4f55\u8868\u793a\uff1f \u7f3a\u70b9 \uff1a\u4e24\u4e2a\u7269\u4f53\u5728GT\u4e2d\u7684\u4e2d\u5fc3\u70b9\u91cd\u53e0\u4e86\uff0cCenterNet\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u4e5f\u662f\u65e0\u80fd\u4e3a\u529b\u7684\uff0c\u4e5f\u5c31\u662f\u5c06\u8fd9\u4e24\u4e2a\u7269\u4f53\u7684\u5f53\u6210\u4e00\u4e2a\u7269\u4f53\u6765\u8bad\u7ec3(\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9)\u3002\u540c\u7406\uff0c\u5728\u9884\u6d4b\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u4e24\u4e2a\u540c\u7c7b\u7684\u7269\u4f53\u5728\u4e0b\u91c7\u6837\u540e\u7684\u4e2d\u5fc3\u70b9\u4e5f\u91cd\u53e0\u4e86\uff0c\u90a3\u4e48CenterNet\u4e5f\u662f\u53ea\u80fd\u68c0\u6d4b\u51fa\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u4e0d\u8fc7CenterNet\u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\u7684\u5904\u7406\u8981\u6bd4faster-rcnn\u5f3a\u4e00\u4e9b\u7684\uff0c\u5177\u4f53\u6307\u6807\u53ef\u4ee5\u67e5\u770b\u8bba\u6587\u76f8\u5173\u90e8\u5206\u3002 \u4f18\u70b9 :\u611f\u53d7\u91ce\u8f83\u5927\uff0c\u5bf9\u5c0f\u76ee\u6807\u68c0\u6d4b\u8f83\u53cb\u597d\u3002\u5bf9\u4e8e\u5927\u76ee\u6807\u800c\u8a00\uff0closs\u76f8\u5bf9\u8f83\u5927\uff0c\u4e0d\u592a\u5bb9\u6613\u8bad\u7ec3\uff0c\u6548\u679c\u4e0d\u592a\u597d\u3002","title":"CenterNet(19/04)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#centripetalnet2003coco-48","text":"\u8bba\u6587 | \u4ee3\u7801 | \u535a\u5ba2 \u6838\u5fc3\u601d\u60f3:\u63d0\u51fa\u4e00\u79cd\u4f7f\u7528\u5411\u5fc3\u504f\u79fb\u6765\u5bf9\u540c\u4e00\u76ee\u6807\u4e2d\u7684\u89d2\u70b9\u8fdb\u884c\u7cbe\u51c6\u914d\u5bf9,\u6539\u5584 Anchore Free \u5173\u952e\u70b9\u5339\u914d\u51fa\u9519\u7684\u95ee\u9898 \uff0c CentripetalNet \u4e0d\u4ec5\u4ee548.0\uff05\u7684AP\u80dc\u8fc7\u6240\u6709\u73b0\u6709\u7684anchor-free\u68c0\u6d4b\u5668\uff0c\u800c\u4e14\u4ee540.2\uff05\u7684MaskAP\u8fbe\u5230\u4e86\u4e0e\u6700\u65b0\u5b9e\u4f8b\u5206\u5272\u65b9\u6cd5\u76f8\u5f53\u7684\u6027\u80fd. \u5411\u5fc3\u504f\u79fb\u89d2\u5339\u914d\u65b9\u6cd5:","title":"CentripetalNet(20/03:coco 48%)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#r-c3d1703","text":"\u8bba\u6587\u5730\u5740 R-C3D=C3D(\u57fa\u7840)+faster-rcnn(\u601d\u8def)\uff0c\u5bf9\u4e8e\u4efb\u610f\u7684\u8f93\u5165\u89c6\u9891L\uff0c\u5148\u8fdb\u884cproposal\uff0c\u7136\u540e3D-pooling,\u6700\u540e\u8fdb\u884c\u5206\u7c7b\u548c\u56de\u5f52\u64cd\u4f5c \u5728\u5355\u4e2atitan x maxwell gpu\u4e0a\u6bcf\u79d2569\u5e27 \u53ef\u4ee5\u9488\u5bf9**\u4efb\u610f\u957f\u5ea6\u89c6\u9891**\u3001\u4efb\u610f\u957f\u5ea6\u884c\u4e3a\u8fdb\u884c**\u7aef\u5230\u7aef\u7684\u68c0\u6d4b** \u901f\u5ea6\u5f88\u5feb(\u662f\u76ee\u524d\u7f51\u7edc\u76845\u500d) \uff0c\u901a\u8fc7\u5171\u4eabProgposal generation \u548cClassification\u7f51\u7edc\u7684C3D\u53c2\u6570 \u4f5c\u8005\u6d4b\u8bd5\u4e863\u4e2a\u4e0d\u540c\u7684\u6570\u636e\u96c6\uff0c\u6548\u679c\u90fd\u5f88\u597d\uff0c\u663e\u793a\u4e86\u901a\u7528\u6027\u3002 \u7279\u5f81\u63d0\u53d6\u7f51\u7edc \u9aa8\u5e72\u7f51\u7edc\u4f5c\u8005\u9009\u62e9\u4e86C3D\u7f51\u7edc\uff0c\u7ecf\u8fc7C3D\u7f51\u7edc\u76845\u5c42\u5377\u79ef\u540e\uff0c\u53ef\u4ee5\u5f97\u5230 512 x L/8 x H/16 x W/16 \u5927\u5c0f\u7684**\u7279\u5f81\u56fe**\u3002\u8fd9\u91cc\u4e0d\u540c\u4e8eC3D\u7f51\u7edc\u7684\u662f\uff0cR-C3D\u5141\u8bb8\u4efb\u610f\u957f\u5ea6\u7684\u89c6\u9891L\u4f5c\u4e3a\u8f93\u5165\u3002 \u65f6\u5e8f\u5019\u9009\u6846\u63d0\u53d6\u7f51\u7edc \u7c7b\u4f3c\u4e8eFaster R-CNN\u4e2d\u7684RPN\uff0c\u8fd9\u91cc\u662f\u63d0\u53d6\u4e00\u7cfb\u5217\u53ef\u80fd\u5b58\u5728\u884c\u4e3a\u7684\u5019\u9009\u65f6\u5e8f \u5019\u9009\u65f6\u5e8f\u751f\u6210 \uff1a\u8f93\u5165\u89c6\u9891\u7ecf\u8fc7\u4e0a\u8ff0C3D\u7f51\u7edc\u540e\u5f97\u5230\u4e86 512 x L/8 x H/16 x W/16 \u5927\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u4f5c\u8005\u5047\u8bbeanchor\u5747\u5300\u5206\u5e03\u5728L/8\u7684\u65f6\u95f4\u57df\u4e0a\uff0c \u4e5f\u5c31\u662f\u6709 L/8 \u4e2aanchors\uff0c\u6bcf\u4e2aanchor\u751f\u6210K\u4e2a\u4e0d\u540cscale\u7684\u5019\u9009\u65f6\u5e8f \u4e3a\u4e86\u83b7\u5f97\u6bcf\u4e2a\u65f6\u5e8f\u70b9\uff08anchor\uff09\u4e0a\u6bcf\u6bb5\u5019\u9009\u65f6\u5e8f\u7684\u4e2d\u5fc3\u4f4d\u7f6e\u504f\u79fb\u548c\u65f6\u5e8f\u7684\u957f\u5ea6 \uff1a\u5f97\u5230\u7684 512xL/8xH/16xW/16 \u7684\u7279\u5f81\u56fe\u540e\uff0c\u4f5c\u8005\u5c06\u7a7a\u95f4\u4e0a H/16 x W/16 \u7684\u7279\u5f81\u56fe\u7ecf\u8fc7\u4e00\u4e2a 3x3x3 \u7684\u5377\u79ef\u6838\u548c\u4e00\u4e2a3D pooling\u5c42\u4e0b\u91c7\u6837\u5230 1x1 \u3002\u6700\u540e\u8f93\u51fa 512xL/8x1x1 . \u884c\u4e3a\u5206\u7c7b\u5b50\u7f51\u7edc \u5bf9\u4e8e\u751f\u6210\u7684\u4e00\u7cfb\u5217\u65f6\u5e8f\u5019\u9009\u6846\uff0c\u5148\u8fdb\u884cNMS(\u9608\u503c0.7) 3D ROI\u6c60\u5316 \uff1a\u5047\u8bbeC3D\u8f93\u51fa\u7684\u662f 512xL/8x7x7 \u5927\u5c0f\u7684\u7279\u5f81\u56fe\uff0c\u5047\u8bbe\u5176\u4e2d\u6709\u4e00\u4e2a proposal \u7684\u957f\u5ea6\uff08\u65f6\u5e8f\u957f\u5ea6\uff09\u4e3a lp \uff0c\u90a3\u4e48\u8fd9\u4e2aproposal\u7684\u5927\u5c0f\u4e3a 512xlpx7x7 \uff0c\u8fd9\u91cc\u501f\u9274SPPnet\u4e2d\u7684\u6c60\u5316\u5c42\uff0c\u5229\u7528\u4e00\u4e2a\u52a8\u6001\u5927\u5c0f\u7684\u6c60\u5316\u6838\uff0c ls x hs x ws \u3002\u6700\u7ec8\u5f97\u5230 512x1x4x4 \u5927\u5c0f\u7684\u7279\u5f81\u56fe\u3002 \u5206\u7c7b\u548c\u56de\u5f52 \uff1a\u7ecf\u8fc7\u6c60\u5316\u540e\uff0c\u518d\u8f93\u51fa\u5230\u5168\u8fde\u63a5\u5c42\u3002\u6700\u540e\u63a5\u4e00\u4e2a\u8fb9\u6846\u56de\u5f52( start-end time )\u548c\u7c7b\u522b\u5206\u7c7b(Activity Scores)\u3002 loss","title":"R-C3D(17/03)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#ghm1811","text":"\u8bba\u6587\u5730\u5740 \u5355\u9636\u6bb5\u6bd4\u4e24\u9636\u6bb5\u66f4\u4f18\u96c5\uff0c\u4f46\u662f\u5b58\u5728\u6b63\u8d1f\u6837\u672c\u95f4\u6570\u91cf\u4e0d\u5747\u8861\uff0c\u5bf9\u4e8e\u5355\u9636\u6bb5\u5206\u7c7b\u5668\u6765\u8bf4\uff0c\u5b58\u5728\u7740\u5927\u91cf\u7684\u8d1f\u6837\u672c\uff0c\u53ef\u4ee5\u5f88\u5bb9\u6613\u5730\u6b63\u786e\u5206\u7c7b\uff0c\u5c11\u91cf\u7684\u6b63\u6837\u672c\u901a\u5e38\u662f\u56f0\u96be\u6837\u672c\u3002\u56e0\u6b64\u6b63\u8d1f\u6837\u672c\u7684\u4e0d\u5747\u8861\u6027\u672c\u8d28\u662f\u7b80\u5355\u56f0\u96be\u6837\u672c\u7684\u4e0d\u5747\u8861\u6027\u3002 \u4f20\u7edf\u89e3\u51b3\u65b9\u5f0f: OHEM\uff1a\u76f4\u63a5\u653e\u5f03\u5927\u91cfexamples(\u5b83\u53ea\u9009\u62e9topN\u800c\u4e22\u5f03\u4e86\u592a\u591a\u6837\u672c)\uff0c\u8bad\u7ec3\u6548\u7387\u8f83\u4f4e\u3002 Focal loss\uff1a\u5b58\u5728\u4e24\u4e2a\u8d85\u53c2\u9700\u8981\u8bbe\u7f6e\uff0c\u4e0d\u80fd\u968f\u8bad\u7ec3\u6570\u636e\u7684\u53d8\u5316\u52a8\u6001\u8c03\u6574\u3002\u540c\u65f6\uff0cFocal loss\u662f\u4e00\u79cd\u9759\u6001\u635f\u5931\uff0c\u5bf9\u6570\u636e\u96c6\u7684\u5206\u5e03\u4e0d\u654f\u611f\uff0c\u800c\u5728\u8bad\u7ec3\u8fc7\u7a0b\u4e2d\uff0c\u6570\u636e\u96c6\u7684\u5206\u5e03\u662f\u4f1a\u53d1\u751f\u53d8\u5316\u7684\u3002 \u672c\u6587\u89e3\u51b3\u65b9\u5f0f: GHM:\u4ece\u68af\u5ea6\u7684\u89d2\u5ea6( \u68af\u5ea6\u5747\u8861\u673a\u5236 )\u89e3\u51b3\u6b63\u8d1f\u6837\u672c\u95f4\u6570\u91cf\u5dee\u5f02\u548ceasy\u3001hard examples\u4e4b\u95f4\u7684\u77db\u76fe\u3002 easy examples:\u6a21\u578b\u5f88\u96be\u4ece\u7b80\u5355\u6837\u672c(\u5f88\u5bb9\u6613\u88ab\u6b63\u786e\u5206\u7c7b)\u4e2d\u5f97\u5230\u66f4\u591a\u4fe1\u606f\uff0c\u4ece\u68af\u5ea6\u7684\u89d2\u5ea6\u6765\u8bf4\uff0c\u8fd9\u4e2a\u6837\u672c\u4ea7\u751f\u7684\u68af\u5ea6\u5e45\u503c\u76f8\u5bf9\u8f83\u5c0f\u3002 Hard examples:\u5bf9\u4e8e\u4e00\u4e2a\u5206\u9519\u7684\u6837\u672c\u6765\u8bf4\uff0c\u5b83\u4ea7\u751f\u7684\u68af\u5ea6\u4fe1\u606f\u5219\u4f1a\u66f4\u4e30\u5bcc\uff0c\u5b83\u66f4\u80fd\u6307\u5bfc\u6a21\u578b\u4f18\u5316\u7684\u65b9\u5411\u3002\u4f5c\u8005\u8ba4\u4e3a\uff0c\u6a21\u578b\u66f4\u5e94\u8be5\u5173\u6ce8\u88ab\u5206\u9519\u7684\u6837\u672c\u3002 gradient norm(\u68af\u5ea6\u6a21\u957f)\u7684\u5b9a\u4e49 p[0~1]:\u6a21\u578b\u9884\u6d4b\u51fa\u7684\u6982\u7387\u3002 P*\u4ee3\u8868\u5bf9\u4e8e\u7279\u5b9a\u7c7b\u522b\u7684ground truth \u6807\u7b7e\u53d6\u503c0\u62161 \u4ee4x\u4f5c\u4e3a\u6a21\u578b\u7684\u8f93\u51fa \u5b9a\u4e49\u4e86g\u7b49\u5f0f\u5982\u4e0a\u6240\u793a\uff0cg\u4e0eLce\u5bf9x\u7684\u504f\u5bfc\u503c\u7684\u6b63\u5219\u76f8\u7b49\uff0cg\u4ee3\u8868\u4e00\u4e2a\u6837\u672c\u7684\u5c5e\u6027\u4ee5\u53ca\u8be5\u6837\u672c\u5bf9\u6574\u4f53\u68af\u5ea6\u7684\u4f5c\u7528\uff0c\u672c\u6587\u5c06g\u79f0\u4e3a gradient norm (\u68af\u5ea6\u6a21\u957f:\u6837\u672c\u7684\u771f\u5b9e\u503c\u4e0e\u5f53\u524d\u9884\u6d4b\u503c\u7684\u8ddd\u79bb)\u3002 \u6587\u4e2d\u7684 very hard examples \u6bd4 medium \u7684\u6837\u672c\u6570\u91cf\u8fd8\u8981\u591a\uff0c\u5b9a\u4e49\u4e3a\u79bb\u7fa4\u70b9outliers\uff0c\u8fd9\u4e9boutliers\u5728\u6a21\u578b\u7684\u4e0d\u65ad\u62df\u5408\u8fc7\u7a0b\u4e2d\u4e00\u76f4\u4e3avery hard examples\uff0c\u56e0\u4e3a\u4ed6\u4eec\u7684\u68af\u5ea6\u6a21\u4e0e\u6574\u4f53\u7684\u68af\u5ea6\u6a21\u7684\u5206\u5e03\u5dee\u5f02\u592a\u5927\uff0c\u5e76\u4e14\u6a21\u578b\u5f88\u96be\u5904\u7406\uff0c\u5982\u679c\u8ba9\u6a21\u578b\u5f3a\u884c\u53bb\u5b66\u4e60\u8fd9\u4e9b\u79bb\u7fa4\u6837\u672c\uff0c\u53cd\u800c\u4f1a\u5bfc\u81f4\u6574\u4f53\u6027\u80fd\u4e0b\u964d\u3002 Gradient Density(\u68af\u5ea6\u5bc6\u5ea6:\u89e3\u51b3g\u5206\u5e03\u4e0d\u5747\u5300\u7684\u95ee\u9898) \u601d\u8def\u662f\u5bf9\u4e8e\u68af\u5ea6\u5206\u5e03\u5207bin\uff0c\u7edf\u8ba1\u6bcf\u4e00\u4e2abin\u5185\u7684\u6837\u672c\u6570\u91cf\uff0c\u5f97\u5230\u6bcf\u4e2abin\u7684\u5206\u5e03\uff0c\u8fdb\u884c\u5206\u5e03\u7684\u5747\u8861\u5316\u3002\u5177\u4f53\u5730\uff0c\u57fa\u4e8e\u8fd9\u4e2abin\u5185\u7684\u6837\u672c\u6570\u91cf\u548c\u8fd9\u4e2abin\u7684\u957f\u5ea6 GD(g):\u68af\u5ea6\u5bc6\u5ea6\uff0c\u8868\u793a\u67d0\u4e2a\u5355\u4f4d\u533a\u95f4\u5185\u6837\u672c\u7684\u6570\u91cf\u3002 \\delta_{\\epsilon}(x, y) \\delta_{\\epsilon}(x, y) :\u8868\u660e\u4e86\u6837\u672c 1\uff5eN \u4e2d\uff0c\u68af\u5ea6\u6a21\u957f\u5206\u5e03\u5728 \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \u8303\u56f4\u5185\u7684\u6837\u672c\u6570 l_{\\varepsilon}(g) l_{\\varepsilon}(g) :\u4ee3\u8868\u4e86 \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \\left(g-\\frac{\\varepsilon}{2}, g+\\frac{\\varepsilon}{2}\\right) \u533a\u95f4\u7684\u957f\u5ea6 \u56e0\u6b64\u68af\u5ea6\u5bc6\u5ea6 gradient density \u7684\u76f4\u89c2\u7406\u89e3\u5c31\u662f\uff1a\u5355\u4f4d\u68af\u5ea6\u6a21\u957fg\u957f\u5ea6\u5185\u6240\u5206\u90e8\u7684\u6837\u672c\u4e2a\u6570\uff0c\u53cagradient norm\u7684\u5bc6\u5ea6\u3002 N:\u662f\u4e3a\u4e86\u4f7f\u5f97\u5f53\u5212\u5206\u7684\u533a\u95f4\u957f\u5ea6 \\varepsilon \\varepsilon \u5f88\u5927\u4e3a1\u7684\u65f6\u5019, \\beta_{i}=1 \\beta_{i}=1 \\beta_{i} \\beta_{i} \u662f\u6291\u5236\u53c2\u6570\uff0cGD\u5c0f\u8be5\u53c2\u6570\u5927\uff0cGD\u5927\u8be5\u53c2\u6570\u5c0f\uff0c\u4ece\u4e0a\u9762\u7684 gradient norm \u56fe\u4e2d\u53ef\u4ee5\u770b\u5230easy example\u548cvery hard example\u7684\u5206\u5e03\u90fd\u975e\u5e38\u7684\u5bc6\u96c6\uff0c\u5373GD\u7684\u503c\u5f88\u5927\uff0c\u56e0\u6b64\u901a\u8fc7\u53c2\u6570\u521a\u597d\u80fd\u591f\u8fbe\u5230\u6291\u5236\u8fd9\u4e24\u90e8\u5206\uff0c\u540c\u65f6\u63d0\u9ad8\u6709\u7528\u6837\u672c\u6743\u91cd\u7684\u76ee\u7684\u3002 GHM-C Loss:\u9488\u5bf9\u5206\u7c7b \u628a \\beta_{i} \\beta_{i} \u6291\u5236\u53c2\u6570\u5f15\u5165\u5230\u4ea4\u53c9\u71b5\u51fd\u6570\uff0c\u53ef\u4ee5\u5f97\u5230GHM-C loss\u7684\u5b9a\u4e49\u5982\u4e0b: \u6548\u679c\u5982\u4e0b GHM-C\u548cFocal Loss\u90fd\u5bf9easy example\u505a\u4e86\u5f88\u597d\u7684\u6291\u5236 \u800cGHM-C\u6bd4Focal Loss\u5728\u5bf9very hard examples\u4e0a\u6709\u66f4\u597d\u7684\u6291\u5236\u6548\u679c\u3002 \u539f\u59cb\u5b9a\u4e49\u7684gadient density\u7684\u8ba1\u7b97\u590d\u6742\u5ea6\u8f83\u9ad8\uff0c\u4f5c\u8005\u7ed9\u51fa\u4e86\u7b80\u5316\u7248\u672c: \u5c06g\u7684\u7a7a\u95f4\u5212\u4ee5\u95f4\u9694 \\varepsilon \\varepsilon \uff0c\u5206\u4e3a\u72ec\u7acb\u7684\u5355\u5143\u533a\u57df\uff0c\u56e0\u6b64\u6709 M=\\frac{1}{\\varepsilon} M=\\frac{1}{\\varepsilon} \u4e2a\u5355\u5143\u533a\u57df\uff0crj\u4ee3\u8868\u7d22\u5f15\u4e3aj\u7684\u533a\u57df r_{j}=[(j-1) \\epsilon, j \\epsilon) r_{j}=[(j-1) \\epsilon, j \\epsilon) ,\u4ee4Rj\u4ee3\u8868\u843d\u5165rj\u533a\u57df\u7684\u6837\u672c\u6570\u91cf\u3002\u5b9a\u4e49ind (g)=t (g)=t s.t. (t-1) \\epsilon<=g<t \\epsilon (t-1) \\epsilon<=g<t \\epsilon \u7528\u4e8e\u83b7\u5f97g\u6240\u5728\u5355\u5143\u533a\u57df\u7684\u7d22\u5f15\u3002 GHM-R Loss:\u9488\u5bf9\u76ee\u6807\u6846\u7684\u56de\u5f52 \u63d0\u5230\u76ee\u6807\u6846\u7684\u56de\u5f52\u635f\u5931,\u5e38\u7528:Smooth L1 loss \u5176\u4e2dd\u6307\u7684\u662f\u5b66\u4e60\u7684\u504f\u79fb\u91cf: d=\\left(t_{i}-t_{i}^{*}\\right) d=\\left(t_{i}-t_{i}^{*}\\right) \u5f53 |d| \\leq \\delta |d| \\leq \\delta \u65f6, d / \\delta d / \\delta \u53ef\u4ee5\u5b9a\u91cf\u7684\u8868\u793a\u6570\u636e\u7ed3\u679c\u548c\u771f\u5b9e\u503c\u4e4b\u95f4\u7684\u8ddd\u79bb\uff1b \u5f53 |d| \\geq \\delta |d| \\geq \\delta \u65f6,\u635f\u5931\u7684\u68af\u5ea6\u5747\u4e3a1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u65e0\u6cd5\u6839\u636e\u68af\u5ea6\u6765\u4f30\u8ba1\u4e00\u4e9bexample\u8f93\u51fa\u8d21\u732e\u5ea6\u3002\u57fa\u4e8e\u6b64\u4f5c\u8005\u5bf9smooth L1\u505a\u4e86\u4fee\u6b63\uff0c\u5f97\u5230ASL1\uff1a \u901a\u8fc7\u4e0a\u56fe\u53ef\u4ee5\u53d1\u73b0\u6709\u76f8\u5f53\u6570\u91cf\u7684outliers\uff0c\u4ee5\u53caoutliers\u6240\u5bf9\u7528\u7684gradient norm\u503c\u5f88\u5927\uff0c\u56e0\u6b64\u4e0eGHM-C\u76f8\u4f3c\u7684\u65b9\u5f0f\uff0c\u5b9a\u4e49GHM-R\uff0c\u8fbe\u5230\u5bf9outlier\u7684loss\u8fbe\u5230\u6291\u5236\u7684\u76ee\u7684\u3002: \u6ce8\u610f:GHM-R\u4e2d\u5e76\u6ca1\u6709\u5bf9easy example\u505a\u6291\u5236\uff0c\u56e0\u4e3a\u4f5c\u8005\u8ba4\u4e3a\uff0c\u5728\u76ee\u6807\u6846\u7684\u56de\u5f52\u9636\u6bb5\uff0ceasy examples\u540c\u6837\u80fd\u591f\u5bf9\u63d0\u5347\u6846\u56de\u5f52\u7684\u51c6\u786e\u6027\u5e26\u6765\u5e2e\u52a9\u3002 \u6548\u679c\u5c55\u793a","title":"GHM(18/11)"},{"location":"%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%AE%BA%E6%96%87%E8%A7%A3%E8%AF%BB/#atss1912","text":"\u8bba\u6587 | \u4ee3\u7801 \u8bba\u6587\u6307\u51fa one-stage anchor-based \u548c center-based anchor-free \u68c0\u6d4b\u7b97\u6cd5\u95f4\u7684\u5dee\u5f02\u4e3b\u8981\u6765\u81ea\u4e8e**\u6b63\u8d1f\u6837\u672c\u7684\u9009\u62e9**\uff0c\u63d0\u51fa\u4e00\u79cd\u80fd\u591f\u81ea\u52a8\u6839\u636e GT \u7684\u76f8\u5173\u7edf\u8ba1\u7279\u5f81**\u9009\u62e9\u5408\u9002\u7684anchor box\u4f5c\u4e3a\u6b63\u6837\u672c**\uff0c\u5728\u4e0d\u5e26\u6765\u989d\u5916\u8ba1\u7b97\u91cf\u548c\u53c2\u6570\u7684\u60c5\u51b5\u4e0b\uff0c\u80fd\u591f\u5927\u5e45\u63d0\u5347\u6a21\u578b\u7684\u6027\u80fd\u7684\u65b9\u6cd5\u3002 anchor base and free \u6b63\u8d1f\u6837\u672c3\u70b9\u5dee\u5f02\u5206\u6790(RetinaNet vs FCOS) \u6570\u91cf\u5dee\u5f02 :RetinaNet\u5728\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u94fa\u8bbe\u591a\u4e2aanchor\uff0c\u800cFCOS\u5728\u7279\u5f81\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u53ea\u94fa\u8bbe\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u8fd9\u662f\u6570\u91cf\u4e0a\u7684\u5dee\u5f02\u3002 \u6b63\u8d1f\u6837\u672c\u9009\u62e9\u4e0d\u540c :RetinaNet\u57fa\u4e8eanchor\u548cGT\u4e4b\u95f4\u7684 IoU \u548c\u8bbe\u5b9a\u7684\u9608\u503c\u6765\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\uff0c\u800cFCOS\u901a\u8fc7GT\u4e2d\u5fc3\u70b9\u548c\u94fa\u8bbe\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u548c\u5c3a\u5bf8\u6765\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\u3002 \u84dd\u8272\u6846:GT\uff0c\u7ea2\u8272\u6846:RetinaNet\u7684anchor\uff0c\u7ea2\u8272\u70b9:FCOS\u94fa\u8bbe\u7684\u70b9\uff0c\u6570\u503c:0\u8d1f\u6837\u672c,1\u6b63\u6837\u672c\u3002 \u504f\u7f6e(offeset)\u9884\u6d4b\u4e0d\u540c:RetinaNet\u901a\u8fc7\u56de\u5f52\u77e9\u5f62\u6846\u76842\u4e2a\u89d2\u70b9\u504f\u7f6e\u8fdb\u884c\u9884\u6d4b\u6846\u4f4d\u7f6e\u548c\u5927\u5c0f\u7684\u9884\u6d4b\uff0c\u800cFCOS\u662f\u57fa\u4e8e\u4e2d\u5fc3\u70b9\u9884\u6d4b\u56db\u6761\u8fb9\u548c\u4e2d\u5fc3\u70b9\u7684\u8ddd\u79bb\u8fdb\u884c\u9884\u6d4b\u6846\u4f4d\u7f6e\u548c\u5927\u5c0f\u7684\u9884\u6d4b\u3002 \u84dd\u8272\u6846+\u84dd\u8272\u70b9:GT\uff0c\u7ea2\u8272\u6846:RetinaNet\u6b63\u6837\u672c\uff0c\u7ea2\u8272\u70b9:FCOS\u6b63\u6837\u672c\u3002 \u505a\u5b9e\u9a8c\uff0c\u6bd4\u8f833\u4e2a\u5dee\u5f02\u7684\u7ed3\u679c\u5f71\u54cd\u5927\u5c0f **\u5dee\u5f021\u6392\u9664:**\u5c06RetinaNet\u5728\u6bcf\u4e2a\u70b9\u94fa\u8bbe\u7684anchor\u6570\u91cf\u51cf\u5c11\u52301(\u548cFCOS\u4fdd\u6301\u4e00\u81f4),AP\u503c\u4ec5\u5dee 0.8 \u7531\u4e8eFCOS\u8bba\u6587\u4e2d\u7528\u4e86\u4e00\u4e9b\u8bad\u7ec3\u7684\u6280\u5de7(\u6bd4\u5982 Group Normalization \u3001 GIoU Loss \u7b49)\uff0c\u6240\u4ee5\u4e3a\u4e86\u516c\u5e73\u5bf9\u6bd42\u4e2a\u7b97\u6cd5\uff0c\u4f5c\u8005\u5728RetinaNet\u4e0a\u4e5f\u52a0\u4e0a\u4e86\u8fd9\u4e9b\u6280\u5de7\u3002 \u5dee\u5f022\u6392\u9664(\u6309\u884c\u770b): Intersection over Union \uff1a\u8868\u793aRetinaNet\u548cFCOS\u90fd\u91c7\u7528\u57fa\u4e8eIoU\u65b9\u5f0f\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\uff0c\u4e8c\u8005\u7684mAP\u57fa\u672c\u6ca1\u6709\u5dee\u522b\u3002 Spatial and Scale Constraint :\u8868\u793aRetinaNet\u548cFCOS\u90fd\u91c7\u7528\u57fa\u4e8e\u8ddd\u79bb\u548c\u5c3a\u5bf8\u65b9\u5f0f\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\uff0c\u4e8c\u8005\u7684mAP\u4e5f\u662f\u4e00\u6837\u3002 \u56de\u5f52\u65b9\u5f0f\u7684\u4e0d\u540c\u5e76\u4e0d\u662f\u9020\u6210FCOS\u548cRetinaNet\u6548\u679c\u5dee\u5f02\u7684\u539f\u56e0 \u786e\u5b9a\u5dee\u5f02\u4e09\u662f\u6839\u672c:(\u6309\u5217\u770b) Box\u8fd9\u4e00\u5217\u7684\u4e24\u4e2a\u6570\u503c\u8868\u793a\u5c06RetinaNet\u7684\u6b63\u8d1f\u6837\u672c\u786e\u5b9a\u65b9\u5f0f\u4eceIoU\u6362\u6210\u548cFCOS\u4e00\u6837\u7684\u57fa\u4e8e\u8ddd\u79bb\u548c\u5c3a\u5bf8\uff0c\u90a3\u4e48mAP\u5c31\u4ece37.0\u4e0a\u5347\u523037.8 Point\u8fd9\u4e00\u5217\u7684\u4e24\u4e2a\u6570\u503c\u8868\u793a\u5c06FCOS\u7684\u6b63\u8d1f\u6837\u672c\u786e\u5b9a\u65b9\u5f0f\u4ece\u57fa\u4e8e\u8ddd\u79bb\u548c\u5c3a\u5bf8\u6362\u6210\u548cRetinaNet\u4e00\u6837\u7684\u57fa\u4e8eIoU\uff0c\u90a3\u4e48mAP\u5c31\u4ece37.8\u964d\u4e3a36.9\u3002 \u5982\u4f55\u786e\u5b9a\u6b63\u8d1f\u6837\u672c\u624d\u662f\u9020\u6210FCOS\u548cRetinaNet\u6548\u679c\u5dee\u5f02\u7684\u539f\u56e0 ATSS\u786e\u5b9a\u6b63\u8d1f\u6837\u672c \u5c0f\u5c0f\u7684\u7f3a\u70b9: ATSS \u7684 A \u8868\u793a adaptive \u8868\u793a\u81ea\u9002\u5e94\uff0c\u4f46\u662f\u4e0a\u56fe\u4e2d\u6709\u5c11\u91cf\u8d85\u53c2\u6570\uff0c\u4f8b\u5982:k \u611f\u89c9 IOU \u7684\u9009\u62e9\u6709\u4e00\u5b9a\u7684\u5148\u9a8c\u77e5\u8bc6\u3002","title":"ATSS(19/12)"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/","text":"AI\u6bd4\u8d5b \u00b6 github.com\u641c\u7d22 kaggle detect detection / tianchi detect detection # \u91cc\u9762\u6709\u5f88\u591a\u68c0\u6d4b\u51a0\u4e9a\u519b\u65b9\u6848 1.\u76ee\u6807\u68c0\u6d4b\u6bd4\u8d5b\u601d\u8def\u3001tricks\u96c6\u9526\u3001\u8d44\u6599\u6c47\u603b 2.Kaggle\u7ade\u8d5b\u4e2d\u4f7f\u7528YoloV5\u5c06\u7269\u4f53\u68c0\u6d4b\u7684\u6027\u80fd\u7ffb\u500d\u7684\u5fc3\u8def\u5386\u7a0b 3.\u76ee\u6807\u68c0\u6d4b\u6bd4\u8d5b\u4e2d\u7684tricks\uff08\u5df2\u66f4\u65b0\u66f4\u591a\u4ee3\u7801\u89e3\u6790\uff09 \u5b9e\u7528\u9879\u76ee \u00b6 \u5934\u90e8\u68c0\u6d4b+\u5934\u90e8\u59ff\u6001 3ddfav1 | 3ddfav2 \u4eba\u8138\u76f8\u5173\u6570\u636e\u96c6 \u00b6 \u66f4\u591a\u8bf7\u79fb\u6b65\u8a00\u6709\u4e09\u300a\u6df1\u5ea6\u5b66\u4e60\u4e4b\u4eba\u8138\u56fe\u50cf\u5904\u7406\u300b \u6570\u636e\u96c6\u535a\u5ba2\u94fe\u63a5 \u6570\u636e\u96c6\u5408\u96c6 \u00b6 \u6587\u6863\u94fe\u63a5 OpenCV\u4e2d\u6587\u5b98\u65b9\u6587\u6863 \u00b6 \u6587\u6863\u94fe\u63a5 PyTorch\u4e2d\u6587\u5b98\u65b9\u6587\u6863 \u00b6 \u6587\u6863\u94fe\u63a5 ImgAug\u56fe\u50cf\u589e\u5f3a \u00b6 \u4e2d\u6587\u7248\u7b80\u6613\u6559\u7a0b \u82f1\u6587\u6587\u6863 Albumentations\u56fe\u50cf\u589e\u5f3a \u00b6 \u82f1\u6587\u6587\u6863 Numpy\u4e2d\u6587\u6559\u7a0b \u00b6 \u4e2d\u6587\u6587\u6863 \u8bed\u4e49\u5206\u5272\u8bad\u7ec3\u5927\u96c6\u5408 \u00b6 github\u94fe\u63a5 \u52a8\u624b\u6df1\u5ea6\u5b66\u4e60(PyTorch) \u00b6 github\u94fe\u63a5 Tensorflow2.0\u6559\u7a0b \u00b6 \u535a\u5ba2\u94fe\u63a5 AI\u7b97\u6cd5\u5de5\u7a0b\u5e08(\u534e\u6821\u4e13) \u00b6 \u7b14\u8bb0\u94fe\u63a5 \u6570\u5b57\u56fe\u50cf\u5904\u7406 \u00b6 \u6587\u6863\u94fe\u63a5 Python3-cookbook \u00b6 \u6587\u6863\u94fe\u63a5 Python\u8fdb\u9636 \u00b6 \u6587\u6863\u94fe\u63a5 Python\u5927\u96c6\u5408(web/\u8fdb\u9636) \u00b6 \u6587\u6863\u94fe\u63a5 Python\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5 \u00b6 github\u94fe\u63a5 Scipy\u4e2d\u6587\u7248\u6559\u7a0b \u00b6 \u6587\u6863\u94fe\u63a5 Docker\u4ece\u5165\u95e8\u5230\u5b9e\u8df5 \u00b6 \u6587\u6863\u94fe\u63a5 Linux\u5de5\u5177\u5feb\u901f\u6559\u7a0b \u00b6 \u6587\u6863\u94fe\u63a5 C++ Primer\u4e2d\u6587\u7248\u7b2c5\u7248 \u00b6 \u6587\u7ae0\u94fe\u63a5 \u6570\u636e\u96c6\u6536\u96c6 \u00b6 \u767e\u4e07\u7ea7\u522b\u4e8c\u6b21\u5143\u6570\u636e\u96c6 seeprettyface \u8c37\u6b4c\u5de5\u7a0b\u5e08\u7684\u9762\u8bd5(102k) \u00b6 github\u94fe\u63a5","title":"\u5b66\u4e60\u7f51\u7ad9\u6536\u96c6"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#ai","text":"github.com\u641c\u7d22 kaggle detect detection / tianchi detect detection # \u91cc\u9762\u6709\u5f88\u591a\u68c0\u6d4b\u51a0\u4e9a\u519b\u65b9\u6848 1.\u76ee\u6807\u68c0\u6d4b\u6bd4\u8d5b\u601d\u8def\u3001tricks\u96c6\u9526\u3001\u8d44\u6599\u6c47\u603b 2.Kaggle\u7ade\u8d5b\u4e2d\u4f7f\u7528YoloV5\u5c06\u7269\u4f53\u68c0\u6d4b\u7684\u6027\u80fd\u7ffb\u500d\u7684\u5fc3\u8def\u5386\u7a0b 3.\u76ee\u6807\u68c0\u6d4b\u6bd4\u8d5b\u4e2d\u7684tricks\uff08\u5df2\u66f4\u65b0\u66f4\u591a\u4ee3\u7801\u89e3\u6790\uff09","title":"AI\u6bd4\u8d5b"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#_1","text":"\u5934\u90e8\u68c0\u6d4b+\u5934\u90e8\u59ff\u6001 3ddfav1 | 3ddfav2","title":"\u5b9e\u7528\u9879\u76ee"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#_2","text":"\u66f4\u591a\u8bf7\u79fb\u6b65\u8a00\u6709\u4e09\u300a\u6df1\u5ea6\u5b66\u4e60\u4e4b\u4eba\u8138\u56fe\u50cf\u5904\u7406\u300b \u6570\u636e\u96c6\u535a\u5ba2\u94fe\u63a5","title":"\u4eba\u8138\u76f8\u5173\u6570\u636e\u96c6"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#_3","text":"\u6587\u6863\u94fe\u63a5","title":"\u6570\u636e\u96c6\u5408\u96c6"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#opencv","text":"\u6587\u6863\u94fe\u63a5","title":"OpenCV\u4e2d\u6587\u5b98\u65b9\u6587\u6863"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#pytorch","text":"\u6587\u6863\u94fe\u63a5","title":"PyTorch\u4e2d\u6587\u5b98\u65b9\u6587\u6863"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#imgaug","text":"\u4e2d\u6587\u7248\u7b80\u6613\u6559\u7a0b \u82f1\u6587\u6587\u6863","title":"ImgAug\u56fe\u50cf\u589e\u5f3a"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#albumentations","text":"\u82f1\u6587\u6587\u6863","title":"Albumentations\u56fe\u50cf\u589e\u5f3a"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#numpy","text":"\u4e2d\u6587\u6587\u6863","title":"Numpy\u4e2d\u6587\u6559\u7a0b"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#_4","text":"github\u94fe\u63a5","title":"\u8bed\u4e49\u5206\u5272\u8bad\u7ec3\u5927\u96c6\u5408"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#pytorch_1","text":"github\u94fe\u63a5","title":"\u52a8\u624b\u6df1\u5ea6\u5b66\u4e60(PyTorch)"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#tensorflow20","text":"\u535a\u5ba2\u94fe\u63a5","title":"Tensorflow2.0\u6559\u7a0b"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#ai_1","text":"\u7b14\u8bb0\u94fe\u63a5","title":"AI\u7b97\u6cd5\u5de5\u7a0b\u5e08(\u534e\u6821\u4e13)"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#_5","text":"\u6587\u6863\u94fe\u63a5","title":"\u6570\u5b57\u56fe\u50cf\u5904\u7406"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#python3-cookbook","text":"\u6587\u6863\u94fe\u63a5","title":"Python3-cookbook"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#python","text":"\u6587\u6863\u94fe\u63a5","title":"Python\u8fdb\u9636"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#pythonweb","text":"\u6587\u6863\u94fe\u63a5","title":"Python\u5927\u96c6\u5408(web/\u8fdb\u9636)"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#python_1","text":"github\u94fe\u63a5","title":"Python\u6570\u636e\u7ed3\u6784\u4e0e\u7b97\u6cd5"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#scipy","text":"\u6587\u6863\u94fe\u63a5","title":"Scipy\u4e2d\u6587\u7248\u6559\u7a0b"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#docker","text":"\u6587\u6863\u94fe\u63a5","title":"Docker\u4ece\u5165\u95e8\u5230\u5b9e\u8df5"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#linux","text":"\u6587\u6863\u94fe\u63a5","title":"Linux\u5de5\u5177\u5feb\u901f\u6559\u7a0b"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#c-primer5","text":"\u6587\u7ae0\u94fe\u63a5","title":"C++ Primer\u4e2d\u6587\u7248\u7b2c5\u7248"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#_6","text":"\u767e\u4e07\u7ea7\u522b\u4e8c\u6b21\u5143\u6570\u636e\u96c6 seeprettyface","title":"\u6570\u636e\u96c6\u6536\u96c6"},{"location":"%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86/#102k","text":"github\u94fe\u63a5","title":"\u8c37\u6b4c\u5de5\u7a0b\u5e08\u7684\u9762\u8bd5(102k)"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/","text":"mmdetection \u00b6 MMCV\u4ecb\u7ecd\u548c\u5b89\u88c5 | \u6587\u6863 | MMDetection\u4ecb\u7ecd convert voc to coco mmcv import mmcv # 1.\u56fe\u7247\u7684\u8bfb\u5b58\uff0c\u663e\u793a,\u540e\u9762\u8c03\u7528\u7684opencv\u7684api img = mmcv . imread ( 'test.jpg' ) # bgr rgb_img = mmcv . bgr2rgb ( img ) gray_img = mmcv . bgr2gray ( img ) gray_img = mmcv . imread ( 'test.jpg' , flag = 'grayscale' ) mmcv . imwrite ( img , 'out.jpg' ) mmcv . imshow ( img , win_name = 'test image' , wait_time = 200 ) # mmcv.imshow(img,win_name='',wait_time=0) # 2. img resize,\u591a\u4e86\u4e2a\u53c2\u6570 return_scale=False,\u5982\u679cTrue\uff0c\u8fd4\u56de(resized_img,(w_scale,h_scale)) mmcv . imresize ( img , ( 1000 , 600 ), return_scale = True ) # (w,h) mmcv . imresize_like ( img , dst_img , return_scale = False ) # the same size of dst_img mmcv . imrescale ( img , 0.5 ) mmcv . imrescale ( img , ( 1000 , 800 )) # resize so that the max edge no longer than 1000, short edge no longer than 800,without changing the aspect ratio,\u540c\u7b49\u6bd4\u4f8b\u7f29\u653e # 3.\u65cb\u8f6c\u56fe\u7247 img_ = mmcv . imrotate ( img , 30 |- 30 ) # \u9ed8\u8ba4\u65cb\u8f6c\uff0c\u6b63\u987a\u65f6\u9488\uff0c\u8d1f\u9006\u65f6\u9488\uff0c\u9ed8\u8ba4\u5e26\u8d85\u51fa\u8fb9\u754c\u7684\u622a\u65ad\u5e76\u4e14\u5c3a\u5bf8\u4e0d\u53d8\uff0c\u7a7a\u767d\u90e8\u5206\u75280\u586b\u5145\uff0c\u65cb\u8f6c\u4e2d\u5fc3\u9ed8\u8ba4\u56fe\u7247\u4e2d\u5fc3 img_ = mmcv . imrotate ( img , 30 , scale = 1.5 ) # \u653e\u59271.5\u500d\u7684\u540c\u65f6\u5e76\u65cb\u8f6c30\u5ea6 img_ = mmcv . imrotate ( img , 30 , center = ( 100 , 100 )) # \u4fee\u6539\u65cb\u8f6c\u4e2d\u5fc3\u4e3a(100,100) img_ = mmcv . imrotate ( img , 30 , auto_bound = True ) # \u8d85\u51fa\u8fb9\u754c\u7684\u4fdd\u7559\u5176\u4f59\u88650\u50cf\u7d20\uff0c\u5c3a\u5bf8\u6539\u53d8 # 4.flip mmcv . imflip ( img ) # horizontally mmcv . imflip ( img , direction = 'vertical' ) # vertically # 5.crop mmcv . imcrop ( img , np . array ([ 0 , 0 , 100 , 100 ])) # (101,101,3) # \u95ed\u533a\u95f4[xmin,xmax] mmcv . imcrop ( img , np . array ([[ 10 , 10 , 100 , 120 ], [ 0 , 0 , 50 , 50 ]])) # \u540c\u65f6\u5207\u591a\u5f20\u56fe mmcv . imcrop ( img , bboxes , scale_ratio = 1.2 ) # \u5207\u56fe\u540e\u5e76\u653e\u7f29 # 6.padding mmcv . impad ( img , shape = ( 1000 , 1200 ), pad_val = 0 ) # (h,w) mmcv . impad ( img , shape = ( 1000 , 1200 ), pad_val = ( 100 , 50 , 200 )) # bgr mmcv . impad ( img , padding = ( 10 , 20 , 30 , 40 ), pad_val = 0 ) #left,right,top,bottom->0 mmcv . impad ( img , padding = ( 10 , 20 , 30 , 40 ), pad_val = ( 100 , 50 , 200 )) mmcv . impad_to_multiple ( img , 32 ) # \u586b\u5145\u56fe\u50cf\uff0c\u4f7f\u6bcf\u4e2a\u8fb9\u7f18\u90fd\u662f\u67d0\u4e2a\u503c\u7684\u500d\u6570\u3002 # video # 1.video\u4fe1\u606f video = mmcv . VideoReader ( 'test.mp4' ) # \u89c6\u9891\u5bbd\uff0c\u89c6\u9891\u9ad8\uff0c\u89c6\u9891\u5206\u8fa8\u7387(w,h),\u89c6\u9891\u5e27\u7387(30),\u89c6\u9891\u5e27\u6570 print ( video . width , video . height , video . resolution , video . fps , len ( video )) # 2.\u8fed\u4ee3\u89c6\u9891 [ print ( frame . shape ) for frame in video ] # 1.\u76f4\u63a5\u8fed\u4ee3 frame = video . read () # 2.read the next frame frame = video [ 50 ] # 3.\u6309\u7167\u7d22\u5f15\u53d6\u5e27 frame = video [ 50 : 100 ] # \u53d6\u591a\u5e27 # 3.video->images,images->video,other util video . cvt2frames ( 'out_dir' ) mmcv . frames2video ( 'out_dir' , 'test.avi' ) mmcv . cut_video ( 'test.mp4' , 'clip1.mp4' , start = 3 , end = 10 , vcodec = 'h264' ) mmcv . concat_video ([ 'clip1.mp4' , 'clip2.mp4' ], 'joined.mp4' , log_level = 'quiet' ) mmcv . resize_video ( 'test.mp4' , 'resized1.mp4' , ( 360 , 240 )) mmcv . resize_video ( 'test.mp4' , 'resized2.mp4' , ratio = 2 ) # 4.show image mmcv . imshow ( 'a.jpg' ) # path mmcv . imshow ( img ) # ndarray # bboxes = np.array([[0, 0, 50, 50], [20, 20, 60, 60]]) mmcv . imshow_bboxes ( img , bboxes ) # show image with bounding boxes detectron2 \u00b6 detectron2 documentation | pytorch>=1.6 pycuda \u00b6 \u6587\u6863-zh | \u6587\u6863-en \u5b89\u88c5 pyCuda\u4e0b\u8f7d\u6e90\u7801 \uff0c\u5e76\u7f16\u8bd1 # 1.\u6e90\u7801\u89e3\u538b tar -zxf pycuda-VERSION.tar.gz # 2 TypeError:attrib() got an unexpected keyword argument 'convert' pip uninstall attrs pip install attrs == 19 .1.0 # 3.\u7f16\u8bd1PyCUDA cd pycuda-VERSION python configure.py --cuda-root = /usr/local/cuda sudo make install # or make install # 4.\u6d4b\u8bd5 cd pycuda-VERSION/test python test_driver.py # \u8f93\u51faOK\u5373\u6210\u529f \u5e38\u89c1\u7528\u6cd5 # \u5728\u4f7f\u7528PycUDA\u4e4b\u524d\uff0c\u5fc5\u987b\u5bfc\u5165\u5e76\u521d\u59cb\u5316;\u53ef\u4ee5 pycuda.autoinit\u81ea\u52a8\u521d\u59cb\u5316\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u6267\u884c\u521d\u59cb\u5316\u3001\u4e0a\u4e0b\u6587\u521b\u5efa\u548c\u6e05\u7406 # 1.\u81ea\u52a8\u521d\u59cb\u5316 import pycuda.autoinit # \u8fd9\u4e2a\u662f\u81ea\u52a8\u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u6267\u884c\u4e86\u5982\u4e0b\u64cd\u4f5c #-------------------------- import pycuda.driver as cuda cuda . init () # Initialize CUDA from pycuda.tools import make_default_context # context\uff1a\u5982\u679c\u73af\u5883\u53d8\u91cf CUDA_DEVICE \u8bbe\u7f6e\u65f6\uff0c\u5176\u6574\u6570\u503c\u7528\u4f5c\u8bbe\u5907\u7f16\u53f7\u3002\u5982\u679c\u6587\u4ef6 .cuda-device \u5b58\u5728\u4e8e\u7528\u6237\u7684\u4e3b\u76ee\u5f55\u4e2d\uff0c\u5176\u5185\u5bb9\u7684\u6574\u6570\u503c\u7528\u4f5c\u8bbe\u5907\u53f7\u3002\u5426\u5219\uff0c\u6240\u6709\u53ef\u7528\u7684CUDA\u8bbe\u5907\u90fd\u5c06\u4ee5\u5faa\u73af\u65b9\u5f0f\u8fdb\u884c\u5c1d\u8bd5\u3002 context = make_default_context () # \u521b\u5efa\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587 device = context . get_device () import atexit atexit . register ( context . pop ) #--------------------------- # 2.\u624b\u52a8\u521d\u59cb\u5316 import pycuda.driver as cuda cuda . init () device = cuda . Device ( 0 ) # \u53ef\u4ee5\u6839\u636e3\u8f93\u51fa\u4e00\u4e9b\u60f3\u8981\u7684\u4fe1\u606f ctx = device . make_context () # \u624b\u52a8\u521b\u5efa\u4e0a\u4e0b\u6587 ....... # \u53ef\u4ee5\u5199\u4e00\u4e9b\u4f7f\u7528\u4ee3\u7801 ctx . pop () # \u624b\u52a8\u6e05\u7a7a\u4e0a\u4e0b\u6587 del ctx # \u5220\u9664\u4e0a\u4e0b\u6587 import numpy as np import pycuda.driver as cuda import pycuda.autoinit from pycuda.compiler import SourceModule # 1.\u6570\u636e\u4f20\u8f93 data = np . random . randn ( 4 , 4 ) . astype ( np . float32 ) # cpu\u4e0a\u7684\u6570\u636e data_memory_gpu = cuda . mem_alloc ( data . nbytes ) # \u5728gpu\u4e0a\u7ed9data\u5206\u914d\u5185\u5b58 cuda . memcpy_htod ( data_memory_gpu , data ) # \u628adata\u4ececpu\u8f6c\u79fb\u5230gpu # 2.gpu\u4e2d\u53d6\u56de\u6570\u636e data_doubled = numpy . empty_like ( data ) cuda . memcpy_dtoh ( data_doubled , data_memory_gpu ) # \u4ecegpu\u5185\u5b58\u4e2d\u53d6\u6570\u636e # 3.\u5e38\u7528\u7684\u6709\u7528\u4fe1\u606f import pycuda.driver as cuda cuda . init () cuda . Device . count () # \u8fd4\u56de\u8bbe\u5907gpus\u7684\u603b\u6570\u91cf cuda . Device ( 0 ) # \u8bbe\u7f6e\u8981\u4f7f\u7528gpu\u7684ID cuda . Device ( device_id ) . name () # \u8fd4\u56degpu\u578b\u53f7 cuda . Device ( device_id ) . get_attributes () # \u83b7\u53d6\u5c5e\u6027 cuda . Device ( device_id ) . total_memory () / 1e9 # \u83b7\u53d6\u8be5\u53f7gpu\u7684\u603b\u5185\u5b58 available , total = cuda . mem_get_info () # \u83b7\u5f97\u6240\u6709\u8bbe\u5907\u7684\u53ef\u7528\u5185\u5b58\u548c\u603b\u5185\u5b58 example \u521d\u59cb\u5316PyCUDA\u6a21\u5757\u3002 \u5bfc\u5165\u4e00\u4e2a\u7528\u4e8e\u7f16\u8bd1\u7684\u7c7b\u3002 \u5b9a\u4e49\u4e00\u4e2a\u5b58\u50a8\u7740CUDA\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u3002 \u6784\u9020\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff08\u7f16\u8bd1CUDA\u4ee3\u7801\uff0c\u4f7f\u4e4b\u6210\u4e3a\u53ef\u4ee5\u88ab\u6267\u884c\u7684GPU\u7a0b\u5e8f\uff09\u3002 \u4ece\u7c7b\u5bf9\u8c61\u4e2d\u83b7\u5f97\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u5165\u53e3\u3002 \u901a\u8fc7\u8fd9\u4e2a\u5165\u53e3\uff0c\u6267\u884cGPU\u7a0b\u5e8f\u3002 import numpy as np import pycuda.autoinit #\u4ee5\u81ea\u52a8\u7684\u65b9\u5f0f\u5bf9pycuda\u8fdb\u884c\u521d\u59cb from pycuda.compiler import SourceModule # \u7f16\u8bd1kernel\u51fd\u6570\u7684\u7c7b import pycuda.gpuarray as gpuarray # \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4e49kernel\u51fd\u6570 kernel_code = r \"\"\" void __global__ add(const float *x, const float *y, float *z) { const int n = threadIdx.y*blockDim.x+threadIdx.x; z[n] = x[n] + y[n]; } \"\"\" # \u7f16\u8bd1kernel\u51fd\u6570 mod = SourceModule ( kernel_code ) # \u83b7\u53d6\u51fd\u6570\u63a5\u53e3 add = mod . get_function ( \"add\" ) # \u5b9a\u4e49\u4e09\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5e76\u8f6c\u6362\u6210pycuda\u4e2d\u7684gpuarray A = np . zeros (( 10 , 10 )) B = np . ones (( 10 , 10 )) C = np . zeros (( 10 , 10 )) A_GPU = gpuarray . to_gpu ( A . astype ( np . float32 )) B_GPU = gpuarray . to_gpu ( B . astype ( np . float32 )) C_GPU = gpuarray . to_gpu ( B . astype ( np . float32 )) # \u6267\u884ckernel\u51fd\u6570\uff0c\u548ccuda c++\u4e00\u6837\u5b9a\u4e49griddim\u548cblockdim; add ( A_GPU , B_GPU , C_GPU , grid = ( 1 , 1 , 1 ), block = ( 10 , 10 , 1 )) C = C_GPU . get () print ( C ) # \u7f16\u8bd1kernel\u4ee3\u7801\u7684\u65f6\u95f4\u6bd4\u8f83\u8017\u65f6\uff0c\u7f16\u8bd1\u4e00\u6b21\u4e4b\u540e\u540e\u9762\u5c31\u5feb\u4e86\u3002 pytorch_to_onnx \u00b6 \u8f6c\u6362\u91c7\u57511 | torch . onnx . export ( model , # net args , # inputs,torch.randn(1,3,h_size,w_size) f , # onnx_name,xxx.onnx export_params = True , # \u662f\u5426\u5bfc\u5165\u53c2\u6570\uff0c\u9ed8\u8ba4True,\u5982\u679c\u53ea\u662f\u60f3\u8981\u7f51\u7edc\u7ed3\u6784\uff0c\u5bfc\u51fa\u4e3aFalse verbose = False , # \u662f\u5426\u6253\u5370debug description of the trace. training =< TrainingMode . EVAL : 0 > , # TrainingMode.EVAL:\u5bfc\u51fa\u63a8\u7406\u6a21\u578b\uff0c\u9ed8\u8ba4\u5373\u53ef input_names = None , # list of strings, default empty list-->['input0'] output_names = None , # list of strings, default empty list-->['output0'] aten = False , export_raw_ir = False , # 1.torch.onnx.OperatorExportTypes.ONNX \u9ed8\u8ba4\uff0c\u7528ONNX\u7684op\u4ee3\u66ffpytorch op # 2.xx.ONNX_ATEN:\u6240\u6709op\u4f7f\u7528aten\u7684op\u4ee3\u66ffpytorch op # 3.xx.ONNX_ATEN_FALLBACK:\u8be5\u65b9\u6cd5\u963b\u6b62ONNX\u66ff\u6362PyTorch\u7684OP\u4f7f\u7528ATen\u7684OP\u66ff\u6362\uff0cPyTorch2ONNX\u80fd\u901a\uff0c\u4f46ONNX2TRT\u5374\u4e0d\u80fd\u901a\uff0c\u539f\u56e0\u662fONNX phaser\u8bc6\u522b\u4e0d\u5230\u975eONNX\u7684OP operator_export_type = None , # \u9ed8\u8ba49\uff0c\u5982\u679connx2trt\u62a5upsample\u76f8\u5173\u9519\uff0c\u6539\u4e3a11,\u4f8b\u5982:RuntimeError: ONNX export failed: Couldn\u2019t export operator aten::upsample_bilinear2d opset_version = None , _retain_param_name = True , do_constant_folding = True , example_outputs = None , strip_doc_string = True , dynamic_axes = None , keep_initializers_as_inputs = None , custom_opsets = None , enable_onnx_checker = True , use_external_data_format = False , ) # example import onnx inputs = torch . randn ( 1 , 3 , h_size , w_size ) output_onnx = \"xxx.onnx\" input_names = [ 'input0' ] output_names = [ 'class' , 'boxes' , 'landmark' ] torch_out = torch . onnx . export ( net , inputs , output_onnx , export_params = True , verbose = False , input_names = input_names , output_names = output_names , opset_version = 11 , operator_export_type = torch . onnx . OperatorExportTypes . ONNX ) onnx . checker . check_model ( onnx . load ( output_onnx )) # \u68c0\u67e5\u4e00\u4e0b\u751f\u6210\u7684onnx\u6a21\u578b TensorRT \u00b6 TensorRT\u662f\u63a8\u7406\u6846\u67b6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u628a\u5176\u4ed6\u6846\u67b6\u6a21\u578b\u8f6c\u4e3aTensorRT\u6a21\u578b\uff0c\u7136\u540e\u5728tensorRT\u4e2d\u53ef\u4ee5\u9488\u5bf9NVIDIA\u81ea\u5bb6GPU\u5b9e\u65bd\u4f18\u5316\u7b56\u7565\uff0c\u5e76\u8fdb\u884c\u90e8\u7f72\u52a0\u901f\u3002 Documentation Archives API | TensorRT7.0.0-->pytorch 1.3.0 or older TensorRTGA for linux \uff0c\u6309\u7167\u81ea\u5df1\u7684 cuda & cudnn \u7248\u672c\u5373\u53ef cat /usr/local/cuda/version.txt cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 tar -zxvf TensorRT-xxx.tar.gz cd TensorRT-xxx cd python && \u3000pip install tensorrt-xx.whl # \u5b89\u88c5TensorRT-python cd uff && pip install uff-xxx.whl # \u5b89\u88c5UFF cd graphsurgeon && pip install graphsurgeon-xx.whl # \u5b89\u88c5graphsurgeon # cd onnx_graphsurgeon && pip install onnx_graphsurgeon-xx.whl # \u5efa\u7acbc++\u73af\u5883\uff0c\u4f1a\u5728TensorRT\u76ee\u5f55\u7684bin\u6587\u4ef6\u5939\u4e0b\u751f\u4ea7\u5bf9\u5e94\u7684\u53ef\u6267\u884c\u6587\u4ef6 cd sample vi Makefile.config # \u4fee\u6539CUDA\u8def\u5f84 make # \u73af\u5883\u914d\u7f6e ~sudo vim ~/.bashrc # \u6dfb\u52a0\u4e0b\u9762\u4e09\u884c export LD_LIBRARY_PATH = $LD_LIBRARY_PATH :/home/chenyuyang/TensorRT-6.0.1.5/lib source ~/.bashrc tensorrt\u4f7f\u7528 \u2460\u521b\u5efa LOG \u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u8bb0\u5f55 tensorrt \u7684 errors, warnings, and informational messages import tensorrt as trt TRT_LOGGER = trt . Logger ( trt . Logger . WARNING ) \u2461\u76f4\u63a5\u4f7f\u7528 TensorRT \u7684 python api \u6784\u5efa\u7f51\u7edc\uff0c\u7136\u540e\u628a pytorch \u6216\u8005\u5176\u4ed6\u6846\u67b6\u7684\u6a21\u578b\u53c2\u6570\u586b\u5145\u8fdb\u53bb\uff0c\u8fdb\u884c\u63a8\u7406( \u5f97\u4e00\u6b65\u4e00\u6b65\u6784\u5efa\u5c42\uff0c\u9ebb\u70e6 )\uff0c\u5b9e\u9645\u6848\u4f8b: TensorRT-version/samples/python/network_api_pytorch_mnist/ Create the builder and network \uff0c\u76ee\u7684\u662f\u521b\u5efa\u4e00\u4e2a\u63a8\u7406\u5f15\u64ce\u548c\u7f51\u7edc(pytorch\u53c2\u6570\u586b\u5145) create execution context \uff0c\u521b\u5efa\u53ef\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u7528\u4e8e\u6a21\u578b\u63a8\u7406\uff0c\u7136\u540e\u6267\u884c\u63a8\u7406\u5373\u53ef \u2462\u4f7f\u7528\u89e3\u6790\u5668\u89e3\u6790\u4e0d\u540c\u6846\u67b6\u6a21\u578b\u8fdb\u884c\u63a8\u7406: samples/python/introductory_parser_samples 1 .Create the TensorRTbuilder and network. # \u6784\u5efa\u63a8\u7406\u5f15\u64ce\u548c\u7f51\u7edc 2 .Create the TensorRT parser for the specific format.# \u6839\u636e\u4f7f\u7528\u6846\u67b6\u6784\u5efa\u5bf9\u5e94\u89e3\u6790\u5668 3 .Use the parser to parse the imported model and populate the network.# \u89e3\u6790\u6a21\u578b\u5bfc\u5165tensorrt\u7684network\uff0c\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u628a\u5f15\u64ce\u5e8f\u5217\u5316 ( \u5f15\u64ce\u4fdd\u7559\u4e86\u7f51\u7edc\u5b9a\u4e49\u548c\u7f51\u7edc\u53c2\u6570 ) 4 .\u6784\u5efa\u4e0a\u4e0b\u6587\u6267\u884c\u63a8\u7406 ( \u521b\u5efa\u4e00\u4e9b\u7a7a\u95f4\u6765\u5b58\u50a8\u4e2d\u95f4\u6fc0\u6d3b\u503c ) \uff0c\u5f15\u64ce\u77e5\u8bc6\u7f51\u7edc\u548c\u53c2\u6570\uff0c\u524d\u5411\u9700\u8981\u989d\u5916\u7a7a\u95f4 caffe # \u8be6\u60c5\u4f8b\u5b50\u8bf7\u770b:samples/python/introductory_parser_samples/caffe_resnet50.py import tensorrt as trt TRT_LOGGER = trt . Logger ( trt . Logger . WARNING ) datatype = trt . float32 # \u4f7f\u7528float32 deploy_file = 'data/mnist/mnist.prototxt' model_file = 'data/mnist/mnist.caffemodel' with trt . Builder ( TRT_LOGGER ) as builder , builder . create_network () as network , trt . CaffeParser () as parser : # model_tensors: tensor -->Itensor(trt object) model_tensors = parser . parse ( deploy = deploy_file , model = model_file , network = network , dtype = datatype ) # It allows users to export models trained using Caffe to TRT. class tensorrt . CaffeParser ( self : tensorrt . tensorrt . CaffeParser ) \u2192 None # \u4e3b\u8981\u662fparse\u65b9\u6cd5 def parse ( self : tensorrt . tensorrt . CaffeParser , deploy : str , model : str , network : tensorrt . tensorrt . INetworkDefinition , dtype : tensorrt . tensorrt . DataType ) \u2192 tensorrt . tensorrt . IBlobNameToTensor # \u8fd9\u4e2a\u7c7b\u88ab\u7528\u4f5c\u5b58\u50a8\u4eceCaffeParser\u89e3\u6790\u51fa\u6765\u7684ITensor class tensorrt . IBlobNameToTensor # \u4e3b\u8981\u662ffind\u65b9\u6cd5 def find ( self : tensorrt . tensorrt . IBlobNameToTensor , name : str ) \u2192 tensorrt . tensorrt . ITensor # Given a blob name, this function returns an ITensor object. Tensorflow .pb->.uff\u6587\u4ef6 \u4f7f\u7528UffParser\u89e3\u6790 ONNX # \u8be6\u60c5\u4f8b\u5b50\u8bf7\u770b:samples/python/introductory_parser_samples/onnx_resnet50.py # \u6216\u8005 samples/python/yolov3_onnx import tensorrt as trt TRT_LOGGER = trt . Logger ( trt . Logger . WARNING ) model_path = \"faceDetect.onnx\" with builder = trt . Builder ( TRT_LOGGER ) as builder , builder . create_network () as network , trt . OnnxParser ( network , TRT_LOGGER ) as parser : with open ( model_path , 'rb' ) as model : parser . parse ( model . read ()) class tensorrt . OnnxParser ( self : tensorrt . tensorrt . OnnxParser , network : tensorrt . tensorrt . INetworkDefinition , logger : tensorrt . tensorrt . ILogger ) \u2192 None # \u4e3b\u65b9\u6cd5,Parse a serialized Onnx model into the TensorRT network. def parse ( self : tensorrt . tensorrt . OnnxParser , model : str ) \u2192 bool \u5e8f\u5217\u5316\u6a21\u578b # \u53ef\u9009\uff0c\u5e8f\u5217\u5316\u5f15\u64ce\u4e0d\u53ef\u8de8\u5e73\u53f0\u6216TensorRT\u7248\u672c\u79fb\u690d\uff0c\u5e8f\u5217\u5316\u6a21\u578b\u540e\u53ef\u4ee5\u5b58\u6210\u6587\u4ef6\uff0c\u65b9\u4fbf\u4e0b\u6b21\u52a0\u8f7d\u548c\u63a8\u7406 serialized_engine = engine . serialize () # \u5e8f\u5217\u5316\u6a21\u578b # 1.\u76f4\u63a5\u7528\u5e8f\u5217\u5316\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u9700\u8981\u521b\u5efa\u8fd0\u884c\u65f6\u5bf9\u8c61 with trt . Runtime ( TRT_LOGGER ) as runtime : engine = runtime . deserialize_cuda_engine ( serialized_engine ) # 2.\u5b58\u50a8\u5e8f\u5217\u5316\u6a21\u578b\uff0c\u4e0b\u6b21\u76f4\u63a5\u52a0\u8f7d\u5c31\u884c\uff0c\u4e0d\u7528\u518d\u8fdb\u884c\u5e8f\u5217\u5316(\u5e8f\u5217\u5316\u6a21\u578b\u633a\u8017\u65f6\u7684) with open ( \u201c sample . engine \u201d , \u201c wb \u201d ) as f : f . write ( engine . serialize ()) with open ( \u201c sample . engine \u201d , \u201c rb \u201d ) as f , trt . Runtime ( TRT_LOGGER ) as runtime : engine = runtime . deserialize_cuda_engine ( f . read ()) onnx-tensorrt \u00b6 onnx-tensorrt | \u975eroot\u7528\u6237\u5b89\u88c5\u66f4\u65b0cmake # \u65b9\u6848\u4e00\uff1a\u6e90\u7801\u7f16\u8bd1 # 1. onnx-tensorrt-7.0:https://github.com/onnx/onnx-tensorrt,\u6ce8\u610fonnx==1.6,\u6240\u4ee5\u5bf9\u5e94\u7684\u7248\u672c\u662ftensorrt7.0,\u5426\u5219\u4f1a\u62a5\u4e0d\u80fd\u627e\u5230Tensorrt lib\u7684\u9519 # 1.1 checkout git checkout 7 .0 # \u9009\u62e9\u5408\u9002\u7684\u7248\u672c\uff0c\u5426\u5219\u4f1a\u62a5\u7248\u672c\u9519 # 2.\u5728\u518donnx-tensorrt\u7684CMakeLists.txt\u4e2d\u52a0\u5165 link_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/lib ) include_directories ( /ssd/chenyuyang/softwares/cuda-10.2/include ) include_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/include ) # 2.add onnx\u4f7f\u7528\u6e90\u7801\u76f4\u63a5\u4e0b\u8f7d\u5b89\u88c5\u4e5f\u884c\uff0c\u53ef\u4ee5\u81ea\u5df1\u9009\u62e9\u7248\u672c # 3.\u6784\u5efa mkdir build && cd build cmake .. -DTENSORRT_ROOT = /ssd/chenyuyang/softwares/TensorRT-7.0.0.11 make -j8 # sudo make install make DESTDIR = /install/directory install # \u7f16\u8bd1\u51fa\u9519 # 1.\u8003\u8651tensorrt\u7248\u672c\u662f\u5426\u6b63\u786e\uff0c\u4f8b\u5982onnx==1.6 \u5bf9\u5e94\u7684\u662ftensorrtv7.0 # 2.\u8003\u8651onnx-tensort\u7248\u672c\u662f\u5426\u6b63\u786e\uff0cgit clone\u7684\u4e00\u822c\u662fmaster\u7248\u672c\uff0c\u9700\u8981git checkout xx pip install onnx == 1 .6.0 # \u53ef\u4ee5\u5b89\u88c5\u6700\u65b0\u7684\uff0c\u6709\u65f6\u5019\u4e0d\u540c\u7248\u672c\u4f1a\u62a5\u4e00\u4e9b\u5947\u602a\u7684\u9519 python3 setup.py install # \u5b89\u88c5onnx-tensorrt onnx2trt my_model.onnx -o my_engine.trt # onnx model --> \u5e8f\u5217\u5316\u7684tensorrt\u5f15\u64ce onnx2trt my_model.onnx -d 16 -o my_engine.trt # onnx model --> \u5e8f\u5217\u5316\u7684tensorrt Fp16\u7684\u5f15\u64ce onnx2trt my_model.onnx -t my_model.onnx.txt # onnx model-->\u53ef\u8bfb\u6587\u672c onnx2trt my_model.onnx -O \"pass_1;pass_2;pass_3\" -m my_model_optimized.onnx # onnx\u4f18\u5316\u8f93\u51fa onnx2trt -h # \u65b9\u6848\u4e8c python\u4ee3\u7801 # common.py\u4ee3\u7801\uff1ahttps://github.com/aditya-dl/RetinaFace-TensorRT-Python/blob/main/common.py\uff0c\u6700\u597d\u4ece\u81ea\u5df1\u5b89\u88c5\u7684tensorrt\u7684sample/python\u4e2d\u83b7\u5f97 # \u5b8c\u6574\u793a\u4f8b:https://github.com/aditya-dl/RetinaFace-TensorRT-Python # \u4ee3\u7801\u5982\u4e0b\uff0c\u793a\u4f8b\u4ee3\u7801\u53ef\u53c2\u8003\uff1asample/python/yolov3_onnx # \u6700\u7ec8\u53c2\u8003\u4ee3\u7801\uff1ahttps://github.com/RizhaoCai/PyTorch_ONNX_TensorRT/blob/master/helpers/trt_helper.py # \u9047\u5230\u7684\u9519\u8bef\u5408\u96c6 # 1. \u542b\u6709F.Interpolate(\u4e0a\u91c7\u6837\u63d2\u503c) \u5fc5\u987b\u4ee5\u663e\u793a\u7684\u65b9\u5f0f\u63d0\u4f9b\u65b0\u7684shape\uff0c\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u6bd4\u4f8b\u56e0\u5b50\uff0c\u8fd9\u6837\u7ed3\u679c\u56fe\u4f1a\u52a8\u6001\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6\uff0c\u8fd9\u6837Tensorrt\u4e0d\u517c\u5bb9(path:interpolate->onnx:resize->trt:error)\uff0c2020.05 y = F . interpolate ( y , size = [ output . size ( 2 ), output . size ( 3 )], mode = 'bilinear' , align_corners = False ) # \u8fd9\u6837\u4e5f\u4e0d\u884c\uff0c\u4f1a\u53d1\u751f Assertion failed: ctx->tensors().count(inputName)\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5e38\u91cf y = F . interpolate ( y , size = [ 1024 , 1024 ], mode = 'bilinear' , align_corners = False ) # \u8bbe\u7f6e\u4e3a\u5e38\u91cf\uff0c\u4f46\u8fd9\u4e5f\u592a\u9ebb\u70e6\u4e86\u5427\uff0c\u6bcf\u6b21\u90fd\u5f97\u6539 # 2. \u4e0a\u9762\u4f1a\u53d1\u751f Assertion failed: ctx->tensors().count(inputName)\uff0c\u5982\u4f55\u89e3\u51b3\uff1f # \u4f7f\u7528opset_version=11\uff0c\u5bfc\u51fa\u7684onnx\u6a21\u578binterpolate\u8f6c\u4e3aResize,\u4f46\u662f\u4f1a\u6709\u4e00\u4e2a\u5355\u72ec\u7684Constant\u5c42\u4f5c\u4e3aResize\u8f93\u5165\uff0c\u4f46\u95ee\u9898\u662f\uff1aConstant\u5c42\u5e76\u672a\u8fde\u63a5\u4efb\u4f55\u8f93\u5165\uff0connx->trt\u65f6\u5e76\u4e0d\u80fd\u627e\u5230Constant\u5c42\u7684\u8f93\u5165\uff0c\u65e0\u6cd5\u521d\u59cb\u5316\uff0c\u89e3\u51b3\u65b9\u6848:tensorrt7.2.2.3 cuda10.2 cudnn8.05 onnx-tensorrt-7.2.2(master) # pytorch->onnx:\u7ecf\u5e38\u4f1a\u51fa\u73b0\uff0cexpand, Gather, reshape\u4e0d\u652f\u6301\u7b49,TensorRT\u5bf9pytorch\u7684\u7ef4\u5ea6\u53d8\u5316\u7279\u522b\u4e0d\u53cb\u597d\uff0c\u6a21\u578b\u8f6c\u5316\u8fc7\u7a0b\u4e2d\u7edd\u5927\u591a\u6570bug\u90fd\u51fa\u5728\u7ef4\u5ea6\u53d8\u5316\u4e0a # 4.tensorrt\u90e8\u7f72\u91c7\u5751\u8bb0\u5f55:https://blog.csdn.net/u011605951/article/details/108441935 \u9644\u5f55 1.torch2trt(\u56fa\u5b9a\u8f93\u5165):\u633a\u6709\u7528\u7684 2.torch2trt_dynamic(\u52a8\u6001\u8f93\u5165):\u66f4\u6709\u7528,\u57fa\u4e8e1 3.mmdetection-to-trt:\u57fa\u4e8e2 | 2,3 int8\u91cf\u5316\u4f7f\u7528\u6559\u7a0b 4.tiny-tensorrt:\u4f7ftensorrt\u90e8\u7f72\u53d8\u7684\u5f88\u5bb9\u6613 # install \u65f6\u5019\u6ce8\u610f CMakeList.txt \u6dfb\u52a0\u4e0b\u9762\u4e09\u884c\uff0c\u56e0\u4e3a\u662f\u975eroot\u7528\u6237\uff0c\u5e76\u6ca1\u6709install\u5230/usr,\u6709\u4e9b\u5e93\u4f1a\u627e\u4e0d\u5230\u62a5\u9519\uff0c\u76f4\u63a5\u6307\u5b9a\u8def\u5f84\u5373\u53ef # include_directories(./plugin) \u6dfb\u52a0\u5230\u8be5\u8def\u5f84\u540e\u9762\u5373\u53ef link_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/lib ) include_directories ( /ssd/chenyuyang/softwares/cuda-10.2/include ) include_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/include ) pytorch->onnx->trt\u4f7f\u7528\u6848\u4f8b \u00b6 backbone include int8 tensorrt_demos_python tensorrt_demos_c++ RetinaFace-TensorRT-Python # trt\u63a8\u7406\u65f6\u78b0\u5230\u9519\u8bef # 1.[TensorRT] ERROR: ../rtSafe/cuda/cudaConvolutionRunner.cpp (303) - Cudnn Error in execute: 8 (CUDNN_STATUS_EXECUTION_FAILED) # solve:I install pytorch with cudatoolkit=10.1 (use conda install) but my tensorrt cuda version is 10.2 so I reinstall cudatoolkit by conda install cudatoolkit=10.2 # 2.[TensorRT] ERROR: safeContext.cpp (184) - Cudnn Error in configure: 7 (CUDNN_STATUS_MAPPING_ERROR) [TensorRT] ERROR: FAILED_EXECUTION: std::exception\uff0c\u5c5e\u4e8e(trt+pytorch\u5171\u7528\u4ea7\u751f\u7684\u9519\u8bef\uff0c\u4e00\u822c\u5206\u5f00\u540e\u9519\u8bef\u4f1a\u6d88\u5931\uff0c\u4f46\u662f\u7531\u4e8e\u9884\u5904\u7406\u7b49\u64cd\u4f5c\u5fc5\u987b\u7ed3\u5408)got CUDNN_STATUS_MAPPING_ERROR when using tensorrt and pytorch together\uff0c\u8fd9\u79cd\u9519\u8bef\u4e00\u822c\u662fgpu\u5185\u5b58\u51b2\u7a81\u5bfc\u81f4 # solve:I finally make this works. By adding cuda context push and pop on the two ends of doing inference \u6216\u8005 torch2trt\u4e5f\u53ef\u4ee5\u89e3\u51b3","title":"\u91cf\u5316\u5de5\u5177\u4f7f\u7528"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#mmdetection","text":"MMCV\u4ecb\u7ecd\u548c\u5b89\u88c5 | \u6587\u6863 | MMDetection\u4ecb\u7ecd convert voc to coco mmcv import mmcv # 1.\u56fe\u7247\u7684\u8bfb\u5b58\uff0c\u663e\u793a,\u540e\u9762\u8c03\u7528\u7684opencv\u7684api img = mmcv . imread ( 'test.jpg' ) # bgr rgb_img = mmcv . bgr2rgb ( img ) gray_img = mmcv . bgr2gray ( img ) gray_img = mmcv . imread ( 'test.jpg' , flag = 'grayscale' ) mmcv . imwrite ( img , 'out.jpg' ) mmcv . imshow ( img , win_name = 'test image' , wait_time = 200 ) # mmcv.imshow(img,win_name='',wait_time=0) # 2. img resize,\u591a\u4e86\u4e2a\u53c2\u6570 return_scale=False,\u5982\u679cTrue\uff0c\u8fd4\u56de(resized_img,(w_scale,h_scale)) mmcv . imresize ( img , ( 1000 , 600 ), return_scale = True ) # (w,h) mmcv . imresize_like ( img , dst_img , return_scale = False ) # the same size of dst_img mmcv . imrescale ( img , 0.5 ) mmcv . imrescale ( img , ( 1000 , 800 )) # resize so that the max edge no longer than 1000, short edge no longer than 800,without changing the aspect ratio,\u540c\u7b49\u6bd4\u4f8b\u7f29\u653e # 3.\u65cb\u8f6c\u56fe\u7247 img_ = mmcv . imrotate ( img , 30 |- 30 ) # \u9ed8\u8ba4\u65cb\u8f6c\uff0c\u6b63\u987a\u65f6\u9488\uff0c\u8d1f\u9006\u65f6\u9488\uff0c\u9ed8\u8ba4\u5e26\u8d85\u51fa\u8fb9\u754c\u7684\u622a\u65ad\u5e76\u4e14\u5c3a\u5bf8\u4e0d\u53d8\uff0c\u7a7a\u767d\u90e8\u5206\u75280\u586b\u5145\uff0c\u65cb\u8f6c\u4e2d\u5fc3\u9ed8\u8ba4\u56fe\u7247\u4e2d\u5fc3 img_ = mmcv . imrotate ( img , 30 , scale = 1.5 ) # \u653e\u59271.5\u500d\u7684\u540c\u65f6\u5e76\u65cb\u8f6c30\u5ea6 img_ = mmcv . imrotate ( img , 30 , center = ( 100 , 100 )) # \u4fee\u6539\u65cb\u8f6c\u4e2d\u5fc3\u4e3a(100,100) img_ = mmcv . imrotate ( img , 30 , auto_bound = True ) # \u8d85\u51fa\u8fb9\u754c\u7684\u4fdd\u7559\u5176\u4f59\u88650\u50cf\u7d20\uff0c\u5c3a\u5bf8\u6539\u53d8 # 4.flip mmcv . imflip ( img ) # horizontally mmcv . imflip ( img , direction = 'vertical' ) # vertically # 5.crop mmcv . imcrop ( img , np . array ([ 0 , 0 , 100 , 100 ])) # (101,101,3) # \u95ed\u533a\u95f4[xmin,xmax] mmcv . imcrop ( img , np . array ([[ 10 , 10 , 100 , 120 ], [ 0 , 0 , 50 , 50 ]])) # \u540c\u65f6\u5207\u591a\u5f20\u56fe mmcv . imcrop ( img , bboxes , scale_ratio = 1.2 ) # \u5207\u56fe\u540e\u5e76\u653e\u7f29 # 6.padding mmcv . impad ( img , shape = ( 1000 , 1200 ), pad_val = 0 ) # (h,w) mmcv . impad ( img , shape = ( 1000 , 1200 ), pad_val = ( 100 , 50 , 200 )) # bgr mmcv . impad ( img , padding = ( 10 , 20 , 30 , 40 ), pad_val = 0 ) #left,right,top,bottom->0 mmcv . impad ( img , padding = ( 10 , 20 , 30 , 40 ), pad_val = ( 100 , 50 , 200 )) mmcv . impad_to_multiple ( img , 32 ) # \u586b\u5145\u56fe\u50cf\uff0c\u4f7f\u6bcf\u4e2a\u8fb9\u7f18\u90fd\u662f\u67d0\u4e2a\u503c\u7684\u500d\u6570\u3002 # video # 1.video\u4fe1\u606f video = mmcv . VideoReader ( 'test.mp4' ) # \u89c6\u9891\u5bbd\uff0c\u89c6\u9891\u9ad8\uff0c\u89c6\u9891\u5206\u8fa8\u7387(w,h),\u89c6\u9891\u5e27\u7387(30),\u89c6\u9891\u5e27\u6570 print ( video . width , video . height , video . resolution , video . fps , len ( video )) # 2.\u8fed\u4ee3\u89c6\u9891 [ print ( frame . shape ) for frame in video ] # 1.\u76f4\u63a5\u8fed\u4ee3 frame = video . read () # 2.read the next frame frame = video [ 50 ] # 3.\u6309\u7167\u7d22\u5f15\u53d6\u5e27 frame = video [ 50 : 100 ] # \u53d6\u591a\u5e27 # 3.video->images,images->video,other util video . cvt2frames ( 'out_dir' ) mmcv . frames2video ( 'out_dir' , 'test.avi' ) mmcv . cut_video ( 'test.mp4' , 'clip1.mp4' , start = 3 , end = 10 , vcodec = 'h264' ) mmcv . concat_video ([ 'clip1.mp4' , 'clip2.mp4' ], 'joined.mp4' , log_level = 'quiet' ) mmcv . resize_video ( 'test.mp4' , 'resized1.mp4' , ( 360 , 240 )) mmcv . resize_video ( 'test.mp4' , 'resized2.mp4' , ratio = 2 ) # 4.show image mmcv . imshow ( 'a.jpg' ) # path mmcv . imshow ( img ) # ndarray # bboxes = np.array([[0, 0, 50, 50], [20, 20, 60, 60]]) mmcv . imshow_bboxes ( img , bboxes ) # show image with bounding boxes","title":"mmdetection"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#detectron2","text":"detectron2 documentation | pytorch>=1.6","title":"detectron2"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#pycuda","text":"\u6587\u6863-zh | \u6587\u6863-en \u5b89\u88c5 pyCuda\u4e0b\u8f7d\u6e90\u7801 \uff0c\u5e76\u7f16\u8bd1 # 1.\u6e90\u7801\u89e3\u538b tar -zxf pycuda-VERSION.tar.gz # 2 TypeError:attrib() got an unexpected keyword argument 'convert' pip uninstall attrs pip install attrs == 19 .1.0 # 3.\u7f16\u8bd1PyCUDA cd pycuda-VERSION python configure.py --cuda-root = /usr/local/cuda sudo make install # or make install # 4.\u6d4b\u8bd5 cd pycuda-VERSION/test python test_driver.py # \u8f93\u51faOK\u5373\u6210\u529f \u5e38\u89c1\u7528\u6cd5 # \u5728\u4f7f\u7528PycUDA\u4e4b\u524d\uff0c\u5fc5\u987b\u5bfc\u5165\u5e76\u521d\u59cb\u5316;\u53ef\u4ee5 pycuda.autoinit\u81ea\u52a8\u521d\u59cb\u5316\uff0c\u4e5f\u53ef\u4ee5\u624b\u52a8\u6267\u884c\u521d\u59cb\u5316\u3001\u4e0a\u4e0b\u6587\u521b\u5efa\u548c\u6e05\u7406 # 1.\u81ea\u52a8\u521d\u59cb\u5316 import pycuda.autoinit # \u8fd9\u4e2a\u662f\u81ea\u52a8\u521d\u59cb\u5316\u4e0a\u4e0b\u6587\u7684\u65b9\u6cd5\uff0c\u5176\u5b9e\u6267\u884c\u4e86\u5982\u4e0b\u64cd\u4f5c #-------------------------- import pycuda.driver as cuda cuda . init () # Initialize CUDA from pycuda.tools import make_default_context # context\uff1a\u5982\u679c\u73af\u5883\u53d8\u91cf CUDA_DEVICE \u8bbe\u7f6e\u65f6\uff0c\u5176\u6574\u6570\u503c\u7528\u4f5c\u8bbe\u5907\u7f16\u53f7\u3002\u5982\u679c\u6587\u4ef6 .cuda-device \u5b58\u5728\u4e8e\u7528\u6237\u7684\u4e3b\u76ee\u5f55\u4e2d\uff0c\u5176\u5185\u5bb9\u7684\u6574\u6570\u503c\u7528\u4f5c\u8bbe\u5907\u53f7\u3002\u5426\u5219\uff0c\u6240\u6709\u53ef\u7528\u7684CUDA\u8bbe\u5907\u90fd\u5c06\u4ee5\u5faa\u73af\u65b9\u5f0f\u8fdb\u884c\u5c1d\u8bd5\u3002 context = make_default_context () # \u521b\u5efa\u9ed8\u8ba4\u7684\u4e0a\u4e0b\u6587 device = context . get_device () import atexit atexit . register ( context . pop ) #--------------------------- # 2.\u624b\u52a8\u521d\u59cb\u5316 import pycuda.driver as cuda cuda . init () device = cuda . Device ( 0 ) # \u53ef\u4ee5\u6839\u636e3\u8f93\u51fa\u4e00\u4e9b\u60f3\u8981\u7684\u4fe1\u606f ctx = device . make_context () # \u624b\u52a8\u521b\u5efa\u4e0a\u4e0b\u6587 ....... # \u53ef\u4ee5\u5199\u4e00\u4e9b\u4f7f\u7528\u4ee3\u7801 ctx . pop () # \u624b\u52a8\u6e05\u7a7a\u4e0a\u4e0b\u6587 del ctx # \u5220\u9664\u4e0a\u4e0b\u6587 import numpy as np import pycuda.driver as cuda import pycuda.autoinit from pycuda.compiler import SourceModule # 1.\u6570\u636e\u4f20\u8f93 data = np . random . randn ( 4 , 4 ) . astype ( np . float32 ) # cpu\u4e0a\u7684\u6570\u636e data_memory_gpu = cuda . mem_alloc ( data . nbytes ) # \u5728gpu\u4e0a\u7ed9data\u5206\u914d\u5185\u5b58 cuda . memcpy_htod ( data_memory_gpu , data ) # \u628adata\u4ececpu\u8f6c\u79fb\u5230gpu # 2.gpu\u4e2d\u53d6\u56de\u6570\u636e data_doubled = numpy . empty_like ( data ) cuda . memcpy_dtoh ( data_doubled , data_memory_gpu ) # \u4ecegpu\u5185\u5b58\u4e2d\u53d6\u6570\u636e # 3.\u5e38\u7528\u7684\u6709\u7528\u4fe1\u606f import pycuda.driver as cuda cuda . init () cuda . Device . count () # \u8fd4\u56de\u8bbe\u5907gpus\u7684\u603b\u6570\u91cf cuda . Device ( 0 ) # \u8bbe\u7f6e\u8981\u4f7f\u7528gpu\u7684ID cuda . Device ( device_id ) . name () # \u8fd4\u56degpu\u578b\u53f7 cuda . Device ( device_id ) . get_attributes () # \u83b7\u53d6\u5c5e\u6027 cuda . Device ( device_id ) . total_memory () / 1e9 # \u83b7\u53d6\u8be5\u53f7gpu\u7684\u603b\u5185\u5b58 available , total = cuda . mem_get_info () # \u83b7\u5f97\u6240\u6709\u8bbe\u5907\u7684\u53ef\u7528\u5185\u5b58\u548c\u603b\u5185\u5b58 example \u521d\u59cb\u5316PyCUDA\u6a21\u5757\u3002 \u5bfc\u5165\u4e00\u4e2a\u7528\u4e8e\u7f16\u8bd1\u7684\u7c7b\u3002 \u5b9a\u4e49\u4e00\u4e2a\u5b58\u50a8\u7740CUDA\u4ee3\u7801\u7684\u5b57\u7b26\u4e32\u3002 \u6784\u9020\u4e00\u4e2a\u7c7b\u5bf9\u8c61\uff08\u7f16\u8bd1CUDA\u4ee3\u7801\uff0c\u4f7f\u4e4b\u6210\u4e3a\u53ef\u4ee5\u88ab\u6267\u884c\u7684GPU\u7a0b\u5e8f\uff09\u3002 \u4ece\u7c7b\u5bf9\u8c61\u4e2d\u83b7\u5f97\u4e00\u4e2a\u51fd\u6570\u7684\u6267\u884c\u5165\u53e3\u3002 \u901a\u8fc7\u8fd9\u4e2a\u5165\u53e3\uff0c\u6267\u884cGPU\u7a0b\u5e8f\u3002 import numpy as np import pycuda.autoinit #\u4ee5\u81ea\u52a8\u7684\u65b9\u5f0f\u5bf9pycuda\u8fdb\u884c\u521d\u59cb from pycuda.compiler import SourceModule # \u7f16\u8bd1kernel\u51fd\u6570\u7684\u7c7b import pycuda.gpuarray as gpuarray # \u901a\u8fc7\u5b57\u7b26\u4e32\u5b9a\u4e49kernel\u51fd\u6570 kernel_code = r \"\"\" void __global__ add(const float *x, const float *y, float *z) { const int n = threadIdx.y*blockDim.x+threadIdx.x; z[n] = x[n] + y[n]; } \"\"\" # \u7f16\u8bd1kernel\u51fd\u6570 mod = SourceModule ( kernel_code ) # \u83b7\u53d6\u51fd\u6570\u63a5\u53e3 add = mod . get_function ( \"add\" ) # \u5b9a\u4e49\u4e09\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u5e76\u8f6c\u6362\u6210pycuda\u4e2d\u7684gpuarray A = np . zeros (( 10 , 10 )) B = np . ones (( 10 , 10 )) C = np . zeros (( 10 , 10 )) A_GPU = gpuarray . to_gpu ( A . astype ( np . float32 )) B_GPU = gpuarray . to_gpu ( B . astype ( np . float32 )) C_GPU = gpuarray . to_gpu ( B . astype ( np . float32 )) # \u6267\u884ckernel\u51fd\u6570\uff0c\u548ccuda c++\u4e00\u6837\u5b9a\u4e49griddim\u548cblockdim; add ( A_GPU , B_GPU , C_GPU , grid = ( 1 , 1 , 1 ), block = ( 10 , 10 , 1 )) C = C_GPU . get () print ( C ) # \u7f16\u8bd1kernel\u4ee3\u7801\u7684\u65f6\u95f4\u6bd4\u8f83\u8017\u65f6\uff0c\u7f16\u8bd1\u4e00\u6b21\u4e4b\u540e\u540e\u9762\u5c31\u5feb\u4e86\u3002","title":"pycuda"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#pytorch_to_onnx","text":"\u8f6c\u6362\u91c7\u57511 | torch . onnx . export ( model , # net args , # inputs,torch.randn(1,3,h_size,w_size) f , # onnx_name,xxx.onnx export_params = True , # \u662f\u5426\u5bfc\u5165\u53c2\u6570\uff0c\u9ed8\u8ba4True,\u5982\u679c\u53ea\u662f\u60f3\u8981\u7f51\u7edc\u7ed3\u6784\uff0c\u5bfc\u51fa\u4e3aFalse verbose = False , # \u662f\u5426\u6253\u5370debug description of the trace. training =< TrainingMode . EVAL : 0 > , # TrainingMode.EVAL:\u5bfc\u51fa\u63a8\u7406\u6a21\u578b\uff0c\u9ed8\u8ba4\u5373\u53ef input_names = None , # list of strings, default empty list-->['input0'] output_names = None , # list of strings, default empty list-->['output0'] aten = False , export_raw_ir = False , # 1.torch.onnx.OperatorExportTypes.ONNX \u9ed8\u8ba4\uff0c\u7528ONNX\u7684op\u4ee3\u66ffpytorch op # 2.xx.ONNX_ATEN:\u6240\u6709op\u4f7f\u7528aten\u7684op\u4ee3\u66ffpytorch op # 3.xx.ONNX_ATEN_FALLBACK:\u8be5\u65b9\u6cd5\u963b\u6b62ONNX\u66ff\u6362PyTorch\u7684OP\u4f7f\u7528ATen\u7684OP\u66ff\u6362\uff0cPyTorch2ONNX\u80fd\u901a\uff0c\u4f46ONNX2TRT\u5374\u4e0d\u80fd\u901a\uff0c\u539f\u56e0\u662fONNX phaser\u8bc6\u522b\u4e0d\u5230\u975eONNX\u7684OP operator_export_type = None , # \u9ed8\u8ba49\uff0c\u5982\u679connx2trt\u62a5upsample\u76f8\u5173\u9519\uff0c\u6539\u4e3a11,\u4f8b\u5982:RuntimeError: ONNX export failed: Couldn\u2019t export operator aten::upsample_bilinear2d opset_version = None , _retain_param_name = True , do_constant_folding = True , example_outputs = None , strip_doc_string = True , dynamic_axes = None , keep_initializers_as_inputs = None , custom_opsets = None , enable_onnx_checker = True , use_external_data_format = False , ) # example import onnx inputs = torch . randn ( 1 , 3 , h_size , w_size ) output_onnx = \"xxx.onnx\" input_names = [ 'input0' ] output_names = [ 'class' , 'boxes' , 'landmark' ] torch_out = torch . onnx . export ( net , inputs , output_onnx , export_params = True , verbose = False , input_names = input_names , output_names = output_names , opset_version = 11 , operator_export_type = torch . onnx . OperatorExportTypes . ONNX ) onnx . checker . check_model ( onnx . load ( output_onnx )) # \u68c0\u67e5\u4e00\u4e0b\u751f\u6210\u7684onnx\u6a21\u578b","title":"pytorch_to_onnx"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#tensorrt","text":"TensorRT\u662f\u63a8\u7406\u6846\u67b6\uff0c\u53ef\u4ee5\u7406\u89e3\u4e3a\u628a\u5176\u4ed6\u6846\u67b6\u6a21\u578b\u8f6c\u4e3aTensorRT\u6a21\u578b\uff0c\u7136\u540e\u5728tensorRT\u4e2d\u53ef\u4ee5\u9488\u5bf9NVIDIA\u81ea\u5bb6GPU\u5b9e\u65bd\u4f18\u5316\u7b56\u7565\uff0c\u5e76\u8fdb\u884c\u90e8\u7f72\u52a0\u901f\u3002 Documentation Archives API | TensorRT7.0.0-->pytorch 1.3.0 or older TensorRTGA for linux \uff0c\u6309\u7167\u81ea\u5df1\u7684 cuda & cudnn \u7248\u672c\u5373\u53ef cat /usr/local/cuda/version.txt cat /usr/local/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 tar -zxvf TensorRT-xxx.tar.gz cd TensorRT-xxx cd python && \u3000pip install tensorrt-xx.whl # \u5b89\u88c5TensorRT-python cd uff && pip install uff-xxx.whl # \u5b89\u88c5UFF cd graphsurgeon && pip install graphsurgeon-xx.whl # \u5b89\u88c5graphsurgeon # cd onnx_graphsurgeon && pip install onnx_graphsurgeon-xx.whl # \u5efa\u7acbc++\u73af\u5883\uff0c\u4f1a\u5728TensorRT\u76ee\u5f55\u7684bin\u6587\u4ef6\u5939\u4e0b\u751f\u4ea7\u5bf9\u5e94\u7684\u53ef\u6267\u884c\u6587\u4ef6 cd sample vi Makefile.config # \u4fee\u6539CUDA\u8def\u5f84 make # \u73af\u5883\u914d\u7f6e ~sudo vim ~/.bashrc # \u6dfb\u52a0\u4e0b\u9762\u4e09\u884c export LD_LIBRARY_PATH = $LD_LIBRARY_PATH :/home/chenyuyang/TensorRT-6.0.1.5/lib source ~/.bashrc tensorrt\u4f7f\u7528 \u2460\u521b\u5efa LOG \u7ba1\u7406\u5668\uff0c\u7528\u4e8e\u8bb0\u5f55 tensorrt \u7684 errors, warnings, and informational messages import tensorrt as trt TRT_LOGGER = trt . Logger ( trt . Logger . WARNING ) \u2461\u76f4\u63a5\u4f7f\u7528 TensorRT \u7684 python api \u6784\u5efa\u7f51\u7edc\uff0c\u7136\u540e\u628a pytorch \u6216\u8005\u5176\u4ed6\u6846\u67b6\u7684\u6a21\u578b\u53c2\u6570\u586b\u5145\u8fdb\u53bb\uff0c\u8fdb\u884c\u63a8\u7406( \u5f97\u4e00\u6b65\u4e00\u6b65\u6784\u5efa\u5c42\uff0c\u9ebb\u70e6 )\uff0c\u5b9e\u9645\u6848\u4f8b: TensorRT-version/samples/python/network_api_pytorch_mnist/ Create the builder and network \uff0c\u76ee\u7684\u662f\u521b\u5efa\u4e00\u4e2a\u63a8\u7406\u5f15\u64ce\u548c\u7f51\u7edc(pytorch\u53c2\u6570\u586b\u5145) create execution context \uff0c\u521b\u5efa\u53ef\u6267\u884c\u7684\u4e0a\u4e0b\u6587\u7528\u4e8e\u6a21\u578b\u63a8\u7406\uff0c\u7136\u540e\u6267\u884c\u63a8\u7406\u5373\u53ef \u2462\u4f7f\u7528\u89e3\u6790\u5668\u89e3\u6790\u4e0d\u540c\u6846\u67b6\u6a21\u578b\u8fdb\u884c\u63a8\u7406: samples/python/introductory_parser_samples 1 .Create the TensorRTbuilder and network. # \u6784\u5efa\u63a8\u7406\u5f15\u64ce\u548c\u7f51\u7edc 2 .Create the TensorRT parser for the specific format.# \u6839\u636e\u4f7f\u7528\u6846\u67b6\u6784\u5efa\u5bf9\u5e94\u89e3\u6790\u5668 3 .Use the parser to parse the imported model and populate the network.# \u89e3\u6790\u6a21\u578b\u5bfc\u5165tensorrt\u7684network\uff0c\u8fd9\u91cc\u53ef\u4ee5\u9009\u62e9\u628a\u5f15\u64ce\u5e8f\u5217\u5316 ( \u5f15\u64ce\u4fdd\u7559\u4e86\u7f51\u7edc\u5b9a\u4e49\u548c\u7f51\u7edc\u53c2\u6570 ) 4 .\u6784\u5efa\u4e0a\u4e0b\u6587\u6267\u884c\u63a8\u7406 ( \u521b\u5efa\u4e00\u4e9b\u7a7a\u95f4\u6765\u5b58\u50a8\u4e2d\u95f4\u6fc0\u6d3b\u503c ) \uff0c\u5f15\u64ce\u77e5\u8bc6\u7f51\u7edc\u548c\u53c2\u6570\uff0c\u524d\u5411\u9700\u8981\u989d\u5916\u7a7a\u95f4 caffe # \u8be6\u60c5\u4f8b\u5b50\u8bf7\u770b:samples/python/introductory_parser_samples/caffe_resnet50.py import tensorrt as trt TRT_LOGGER = trt . Logger ( trt . Logger . WARNING ) datatype = trt . float32 # \u4f7f\u7528float32 deploy_file = 'data/mnist/mnist.prototxt' model_file = 'data/mnist/mnist.caffemodel' with trt . Builder ( TRT_LOGGER ) as builder , builder . create_network () as network , trt . CaffeParser () as parser : # model_tensors: tensor -->Itensor(trt object) model_tensors = parser . parse ( deploy = deploy_file , model = model_file , network = network , dtype = datatype ) # It allows users to export models trained using Caffe to TRT. class tensorrt . CaffeParser ( self : tensorrt . tensorrt . CaffeParser ) \u2192 None # \u4e3b\u8981\u662fparse\u65b9\u6cd5 def parse ( self : tensorrt . tensorrt . CaffeParser , deploy : str , model : str , network : tensorrt . tensorrt . INetworkDefinition , dtype : tensorrt . tensorrt . DataType ) \u2192 tensorrt . tensorrt . IBlobNameToTensor # \u8fd9\u4e2a\u7c7b\u88ab\u7528\u4f5c\u5b58\u50a8\u4eceCaffeParser\u89e3\u6790\u51fa\u6765\u7684ITensor class tensorrt . IBlobNameToTensor # \u4e3b\u8981\u662ffind\u65b9\u6cd5 def find ( self : tensorrt . tensorrt . IBlobNameToTensor , name : str ) \u2192 tensorrt . tensorrt . ITensor # Given a blob name, this function returns an ITensor object. Tensorflow .pb->.uff\u6587\u4ef6 \u4f7f\u7528UffParser\u89e3\u6790 ONNX # \u8be6\u60c5\u4f8b\u5b50\u8bf7\u770b:samples/python/introductory_parser_samples/onnx_resnet50.py # \u6216\u8005 samples/python/yolov3_onnx import tensorrt as trt TRT_LOGGER = trt . Logger ( trt . Logger . WARNING ) model_path = \"faceDetect.onnx\" with builder = trt . Builder ( TRT_LOGGER ) as builder , builder . create_network () as network , trt . OnnxParser ( network , TRT_LOGGER ) as parser : with open ( model_path , 'rb' ) as model : parser . parse ( model . read ()) class tensorrt . OnnxParser ( self : tensorrt . tensorrt . OnnxParser , network : tensorrt . tensorrt . INetworkDefinition , logger : tensorrt . tensorrt . ILogger ) \u2192 None # \u4e3b\u65b9\u6cd5,Parse a serialized Onnx model into the TensorRT network. def parse ( self : tensorrt . tensorrt . OnnxParser , model : str ) \u2192 bool \u5e8f\u5217\u5316\u6a21\u578b # \u53ef\u9009\uff0c\u5e8f\u5217\u5316\u5f15\u64ce\u4e0d\u53ef\u8de8\u5e73\u53f0\u6216TensorRT\u7248\u672c\u79fb\u690d\uff0c\u5e8f\u5217\u5316\u6a21\u578b\u540e\u53ef\u4ee5\u5b58\u6210\u6587\u4ef6\uff0c\u65b9\u4fbf\u4e0b\u6b21\u52a0\u8f7d\u548c\u63a8\u7406 serialized_engine = engine . serialize () # \u5e8f\u5217\u5316\u6a21\u578b # 1.\u76f4\u63a5\u7528\u5e8f\u5217\u5316\u6a21\u578b\u8fdb\u884c\u63a8\u7406\uff0c\u9700\u8981\u521b\u5efa\u8fd0\u884c\u65f6\u5bf9\u8c61 with trt . Runtime ( TRT_LOGGER ) as runtime : engine = runtime . deserialize_cuda_engine ( serialized_engine ) # 2.\u5b58\u50a8\u5e8f\u5217\u5316\u6a21\u578b\uff0c\u4e0b\u6b21\u76f4\u63a5\u52a0\u8f7d\u5c31\u884c\uff0c\u4e0d\u7528\u518d\u8fdb\u884c\u5e8f\u5217\u5316(\u5e8f\u5217\u5316\u6a21\u578b\u633a\u8017\u65f6\u7684) with open ( \u201c sample . engine \u201d , \u201c wb \u201d ) as f : f . write ( engine . serialize ()) with open ( \u201c sample . engine \u201d , \u201c rb \u201d ) as f , trt . Runtime ( TRT_LOGGER ) as runtime : engine = runtime . deserialize_cuda_engine ( f . read ())","title":"TensorRT"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#onnx-tensorrt","text":"onnx-tensorrt | \u975eroot\u7528\u6237\u5b89\u88c5\u66f4\u65b0cmake # \u65b9\u6848\u4e00\uff1a\u6e90\u7801\u7f16\u8bd1 # 1. onnx-tensorrt-7.0:https://github.com/onnx/onnx-tensorrt,\u6ce8\u610fonnx==1.6,\u6240\u4ee5\u5bf9\u5e94\u7684\u7248\u672c\u662ftensorrt7.0,\u5426\u5219\u4f1a\u62a5\u4e0d\u80fd\u627e\u5230Tensorrt lib\u7684\u9519 # 1.1 checkout git checkout 7 .0 # \u9009\u62e9\u5408\u9002\u7684\u7248\u672c\uff0c\u5426\u5219\u4f1a\u62a5\u7248\u672c\u9519 # 2.\u5728\u518donnx-tensorrt\u7684CMakeLists.txt\u4e2d\u52a0\u5165 link_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/lib ) include_directories ( /ssd/chenyuyang/softwares/cuda-10.2/include ) include_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/include ) # 2.add onnx\u4f7f\u7528\u6e90\u7801\u76f4\u63a5\u4e0b\u8f7d\u5b89\u88c5\u4e5f\u884c\uff0c\u53ef\u4ee5\u81ea\u5df1\u9009\u62e9\u7248\u672c # 3.\u6784\u5efa mkdir build && cd build cmake .. -DTENSORRT_ROOT = /ssd/chenyuyang/softwares/TensorRT-7.0.0.11 make -j8 # sudo make install make DESTDIR = /install/directory install # \u7f16\u8bd1\u51fa\u9519 # 1.\u8003\u8651tensorrt\u7248\u672c\u662f\u5426\u6b63\u786e\uff0c\u4f8b\u5982onnx==1.6 \u5bf9\u5e94\u7684\u662ftensorrtv7.0 # 2.\u8003\u8651onnx-tensort\u7248\u672c\u662f\u5426\u6b63\u786e\uff0cgit clone\u7684\u4e00\u822c\u662fmaster\u7248\u672c\uff0c\u9700\u8981git checkout xx pip install onnx == 1 .6.0 # \u53ef\u4ee5\u5b89\u88c5\u6700\u65b0\u7684\uff0c\u6709\u65f6\u5019\u4e0d\u540c\u7248\u672c\u4f1a\u62a5\u4e00\u4e9b\u5947\u602a\u7684\u9519 python3 setup.py install # \u5b89\u88c5onnx-tensorrt onnx2trt my_model.onnx -o my_engine.trt # onnx model --> \u5e8f\u5217\u5316\u7684tensorrt\u5f15\u64ce onnx2trt my_model.onnx -d 16 -o my_engine.trt # onnx model --> \u5e8f\u5217\u5316\u7684tensorrt Fp16\u7684\u5f15\u64ce onnx2trt my_model.onnx -t my_model.onnx.txt # onnx model-->\u53ef\u8bfb\u6587\u672c onnx2trt my_model.onnx -O \"pass_1;pass_2;pass_3\" -m my_model_optimized.onnx # onnx\u4f18\u5316\u8f93\u51fa onnx2trt -h # \u65b9\u6848\u4e8c python\u4ee3\u7801 # common.py\u4ee3\u7801\uff1ahttps://github.com/aditya-dl/RetinaFace-TensorRT-Python/blob/main/common.py\uff0c\u6700\u597d\u4ece\u81ea\u5df1\u5b89\u88c5\u7684tensorrt\u7684sample/python\u4e2d\u83b7\u5f97 # \u5b8c\u6574\u793a\u4f8b:https://github.com/aditya-dl/RetinaFace-TensorRT-Python # \u4ee3\u7801\u5982\u4e0b\uff0c\u793a\u4f8b\u4ee3\u7801\u53ef\u53c2\u8003\uff1asample/python/yolov3_onnx # \u6700\u7ec8\u53c2\u8003\u4ee3\u7801\uff1ahttps://github.com/RizhaoCai/PyTorch_ONNX_TensorRT/blob/master/helpers/trt_helper.py # \u9047\u5230\u7684\u9519\u8bef\u5408\u96c6 # 1. \u542b\u6709F.Interpolate(\u4e0a\u91c7\u6837\u63d2\u503c) \u5fc5\u987b\u4ee5\u663e\u793a\u7684\u65b9\u5f0f\u63d0\u4f9b\u65b0\u7684shape\uff0c\u5c3d\u91cf\u4e0d\u8981\u4f7f\u7528\u6bd4\u4f8b\u56e0\u5b50\uff0c\u8fd9\u6837\u7ed3\u679c\u56fe\u4f1a\u52a8\u6001\u8ba1\u7b97\u8f93\u51fa\u5f62\u72b6\uff0c\u8fd9\u6837Tensorrt\u4e0d\u517c\u5bb9(path:interpolate->onnx:resize->trt:error)\uff0c2020.05 y = F . interpolate ( y , size = [ output . size ( 2 ), output . size ( 3 )], mode = 'bilinear' , align_corners = False ) # \u8fd9\u6837\u4e5f\u4e0d\u884c\uff0c\u4f1a\u53d1\u751f Assertion failed: ctx->tensors().count(inputName)\uff0c\u5fc5\u987b\u8bbe\u7f6e\u4e3a\u5e38\u91cf y = F . interpolate ( y , size = [ 1024 , 1024 ], mode = 'bilinear' , align_corners = False ) # \u8bbe\u7f6e\u4e3a\u5e38\u91cf\uff0c\u4f46\u8fd9\u4e5f\u592a\u9ebb\u70e6\u4e86\u5427\uff0c\u6bcf\u6b21\u90fd\u5f97\u6539 # 2. \u4e0a\u9762\u4f1a\u53d1\u751f Assertion failed: ctx->tensors().count(inputName)\uff0c\u5982\u4f55\u89e3\u51b3\uff1f # \u4f7f\u7528opset_version=11\uff0c\u5bfc\u51fa\u7684onnx\u6a21\u578binterpolate\u8f6c\u4e3aResize,\u4f46\u662f\u4f1a\u6709\u4e00\u4e2a\u5355\u72ec\u7684Constant\u5c42\u4f5c\u4e3aResize\u8f93\u5165\uff0c\u4f46\u95ee\u9898\u662f\uff1aConstant\u5c42\u5e76\u672a\u8fde\u63a5\u4efb\u4f55\u8f93\u5165\uff0connx->trt\u65f6\u5e76\u4e0d\u80fd\u627e\u5230Constant\u5c42\u7684\u8f93\u5165\uff0c\u65e0\u6cd5\u521d\u59cb\u5316\uff0c\u89e3\u51b3\u65b9\u6848:tensorrt7.2.2.3 cuda10.2 cudnn8.05 onnx-tensorrt-7.2.2(master) # pytorch->onnx:\u7ecf\u5e38\u4f1a\u51fa\u73b0\uff0cexpand, Gather, reshape\u4e0d\u652f\u6301\u7b49,TensorRT\u5bf9pytorch\u7684\u7ef4\u5ea6\u53d8\u5316\u7279\u522b\u4e0d\u53cb\u597d\uff0c\u6a21\u578b\u8f6c\u5316\u8fc7\u7a0b\u4e2d\u7edd\u5927\u591a\u6570bug\u90fd\u51fa\u5728\u7ef4\u5ea6\u53d8\u5316\u4e0a # 4.tensorrt\u90e8\u7f72\u91c7\u5751\u8bb0\u5f55:https://blog.csdn.net/u011605951/article/details/108441935 \u9644\u5f55 1.torch2trt(\u56fa\u5b9a\u8f93\u5165):\u633a\u6709\u7528\u7684 2.torch2trt_dynamic(\u52a8\u6001\u8f93\u5165):\u66f4\u6709\u7528,\u57fa\u4e8e1 3.mmdetection-to-trt:\u57fa\u4e8e2 | 2,3 int8\u91cf\u5316\u4f7f\u7528\u6559\u7a0b 4.tiny-tensorrt:\u4f7ftensorrt\u90e8\u7f72\u53d8\u7684\u5f88\u5bb9\u6613 # install \u65f6\u5019\u6ce8\u610f CMakeList.txt \u6dfb\u52a0\u4e0b\u9762\u4e09\u884c\uff0c\u56e0\u4e3a\u662f\u975eroot\u7528\u6237\uff0c\u5e76\u6ca1\u6709install\u5230/usr,\u6709\u4e9b\u5e93\u4f1a\u627e\u4e0d\u5230\u62a5\u9519\uff0c\u76f4\u63a5\u6307\u5b9a\u8def\u5f84\u5373\u53ef # include_directories(./plugin) \u6dfb\u52a0\u5230\u8be5\u8def\u5f84\u540e\u9762\u5373\u53ef link_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/lib ) include_directories ( /ssd/chenyuyang/softwares/cuda-10.2/include ) include_directories ( /ssd/chenyuyang/softwares/TensorRT-7.0.0.11/include )","title":"onnx-tensorrt"},{"location":"%E9%87%8F%E5%8C%96%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/#pytorch-onnx-trt","text":"backbone include int8 tensorrt_demos_python tensorrt_demos_c++ RetinaFace-TensorRT-Python # trt\u63a8\u7406\u65f6\u78b0\u5230\u9519\u8bef # 1.[TensorRT] ERROR: ../rtSafe/cuda/cudaConvolutionRunner.cpp (303) - Cudnn Error in execute: 8 (CUDNN_STATUS_EXECUTION_FAILED) # solve:I install pytorch with cudatoolkit=10.1 (use conda install) but my tensorrt cuda version is 10.2 so I reinstall cudatoolkit by conda install cudatoolkit=10.2 # 2.[TensorRT] ERROR: safeContext.cpp (184) - Cudnn Error in configure: 7 (CUDNN_STATUS_MAPPING_ERROR) [TensorRT] ERROR: FAILED_EXECUTION: std::exception\uff0c\u5c5e\u4e8e(trt+pytorch\u5171\u7528\u4ea7\u751f\u7684\u9519\u8bef\uff0c\u4e00\u822c\u5206\u5f00\u540e\u9519\u8bef\u4f1a\u6d88\u5931\uff0c\u4f46\u662f\u7531\u4e8e\u9884\u5904\u7406\u7b49\u64cd\u4f5c\u5fc5\u987b\u7ed3\u5408)got CUDNN_STATUS_MAPPING_ERROR when using tensorrt and pytorch together\uff0c\u8fd9\u79cd\u9519\u8bef\u4e00\u822c\u662fgpu\u5185\u5b58\u51b2\u7a81\u5bfc\u81f4 # solve:I finally make this works. By adding cuda context push and pop on the two ends of doing inference \u6216\u8005 torch2trt\u4e5f\u53ef\u4ee5\u89e3\u51b3","title":"pytorch-&gt;onnx-&gt;trt\u4f7f\u7528\u6848\u4f8b"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/","text":"\u732a\u53ea\u6807\u6ce8\u6570\u636e\uff0c\u6709\u975e\u732a\u53ea\u906e\u6321\u7269\u7684\u6807\u5168\u8eab\uff0c\u732a\u53ea\u76f8\u4e92\u906e\u6321\u7684\u53ea\u6807\u9732\u51fa\u90e8\u5206\uff0c\u9732\u51fa\u6781\u5c0f\u90e8\u5206\u7684\u4e0d\u6807\u6ce8\uff0c\u76ee\u7684\u662f\u4e3a\u4e86 DB \u7f51\u7edc\u7684\u6536\u655b\u3002 RetinaFace \u00b6 \u672c\u8eab\u5c31\u662f RetinaNet \u7684\u6539\u8fdb\u7248\u672c\uff0c resnet50-cabm\u76843\u4e2a\u7279\u5f81\u56fe-->FPN(\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408:3\u4e2a\u7279\u5f81\u56fe)->SSH(\u6bcf\u4e2a\u7279\u5f81\u56fe\u90fd\u8981\u8fdb\u884cSSH\u5904\u7406:3\u4e2a\u7279\u5f81\u56fe)-->\u6bcf\u4e2a\u7279\u5f81\u56fe\u90fd\u8981\u901a\u8fc7\u901a\u8fc7\u4e24\u4e2a1x1\u5377\u79ef\u5206\u652f\u6765\u8fdb\u884c\u5206\u7c7b(\u662f\u4e0d\u662f\u7269\u4f53)\u548c\u6846\u56de\u5f52(pre\u6846\u4e0egt\u6846\u7684\u76f8\u5bf9\u7f29\u653e\u91cf\u548c\u4f4d\u79fb\u91cf) \uff0c CBAM \u7684\u8bba\u6587\u4e2d\u8bf4\u5728 resnet50 \u4e2d\u6027\u80fd\u660e\u663e\u63d0\u9ad8\u3002 model \u7ed3\u6784 SSH(\u7c7b\u4f3cRPN\u64cd\u4f5c) \uff1a \u901a\u8fc7\u7b80\u5355\u7684\u53e0\u5c42\u5377\u79ef\u5408\u5e76\u4e0a\u4e0b\u6587\u4fe1\u606f(\u4e00\u822c\u5728two-stage \u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u5f53\u4e2d\uff0c\u90fd\u662f\u901a\u8fc7\u589e\u5927\u5019\u9009\u6846\u7684\u5c3a\u5bf8\u5927\u5c0f\u4ee5\u5408\u5e76\u5f97\u5230\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f)\uff0c\u901f\u5ea6\u66f4\u5feb\uff0c\u540c\u65f6\u589e\u52a0\u611f\u53d7\u91ce \u56f0\u96be\u6837\u4f8b\u6316\u6398(hard negative mining) \uff1a iou_thresh>0.5 \u662f\u6b63\u8d1f\u6837\u672c\u7684\u9608\u503c\uff0c\u4f46\u662f negative >> positive \uff0c\u7ed3\u679c\u4f1a\u5411\u8d1f\u6837\u672c\u9760\u62e2\u3002\u4fdd\u8bc1\u6b63\uff1a\u8d1f\u5927\u7ea6\u4e3a 1:3 \uff0c\u6b63\u6837\u672c\u56fa\u5b9a\uff0c\u9996\u6b21\u8d1f\u6837\u672c\u968f\u673a\u9009\u53d6\u8bad\u7ec3\u7f51\u7edc\uff0c\uff0c\u518d\u7528\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u53bb\u9884\u6d4b\u8d1f\u6837\u672c\u96c6\u4e2d\u5269\u4f59\u7684\u8d1f\u6837\u672c\uff0c\u9009\u62e9\u5176\u4e2d\u5f97\u5206\u6700\u9ad8 topk ( hard negative )\u4f5c\u4e3a\u8d1f\u6837\u672c\u96c6\u4e2d\u91cd\u65b0\u8bad\u7ec3\uff0c\u7ed3\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d. \u6ce8\u610f\u529b\u673a\u5236 \u00b6 \u597d\u5904:\u7a0d\u5fae\u589e\u52a0\u4e00\u70b9\u8ba1\u7b97\u91cf\u4f46\u6548\u679c\u8f83\u597d\u3002 SE\u6a21\u5757 :\u4e3b\u8981\u5b66\u4e60\u901a\u9053\u4e4b\u95f4\u7684\u76f8\u5173\u6027;\u901a\u8fc7\u5bf9\u5377\u79ef\u7684\u7279\u5f81\u56fe\u8fdb\u884c**\u538b\u7f29**\u548c**\u6269\u5c55**\u5904\u7406\uff0c\u5f97\u5230\u4e00\u4e2a\u548c\u901a\u9053\u6570\u4e00\u6837\u7684\u4e00\u7ef4\u5411\u91cf\u4f5c\u4e3a\u6bcf\u4e2a\u901a\u9053\u7684\u8bc4\u4ef7\u5206\u6570\uff0c\u7136\u540e\u5c06\u8be5\u5206\u6570\u5206\u522b\u65bd\u52a0\u5230\u5bf9\u5e94\u7684\u901a\u9053\u4e0a\uff0c\u5f97\u5230\u5176\u7ed3\u679c\u3002 \u538b\u7f29: CxHxW-->global average pooling-->1x1xC \u8fd9\u4e2a 1x1xC \u7684\u7279\u5f81\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5168\u5c40\u611f\u53d7\u91ce(\u7ebf\u6027\u7684\uff0c\u5982\u679c\u76f4\u63a5\u4e58\u6ca1\u5565\u610f\u4e49) \u6269\u5c55:\u4f7f\u7528\u4e00\u4e2a\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9 Sequeeze \u4e4b\u540e\u7684\u7ed3\u679c\u505a\u4e00\u4e2a**\u975e\u7ebf\u6027\u53d8\u6362**\uff0c\u5f97\u5230\u5404\u901a\u9053\u7684\u8bc4\u4ef7\u5206\u6570\u3002 class SELayer ( nn . Module ): def __init__ ( self , channel , reduction = 16 ): super ( SELayer , self ) . __init__ () self . avgpool = nn . AdaptiveAvgPool2d ( 1 ) self . fc = nn . Sequential ( nn . Linear ( channel , channel // reduction , bias = False ), nn . ReLU ( inplace = True ), nn . Linear ( channel // reduction , channel , bias = False ), nn . Sigmoid () ) def forward ( self , x ): b , c , h , w = x . size () y = self . avgpool ( x ) . view ( b , c ) y = self . fc ( y ) . view ( b , c , 1 , 1 ) return x * y . expand_as ( x ) CBAM :\u96c6\u6210\u4e86\u901a\u9053\u6ce8\u610f\u529b\u6a21\u5757\u548c\u7a7a\u95f4\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u5e38\u5728 ResNet \u4e2d\u7684\u6bcf\u4e2a block \u4e2d\u6dfb\u52a0\u4e86 CBAM \u6a21\u5757\uff0c\u6253\u6bd4\u8d5b\u5e38\u7528\u3002 \u901a\u9053\u6ce8\u610f\u529b\u6a21\u5757\uff0c shared MLP:1x1conv+relu+1x1conv \uff0c\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0c sigmoid \u538b\u7f29\u5f97\u5206\u5230 [0,1] \u7a7a\u95f4\u6ce8\u610f\u529b\u673a\u5236: def forward ( self , x ): avgout = torch . mean ( x , dim = 1 , keepdim = True ) # \u5bf9\u901a\u9053\u7ef4\u5ea6\u6c42\u5e73\u5747 maxout , _ = torch . max ( x , dim = 1 , keepdim = True ) # \u5bf9\u901a\u9053\u7ef4\u5ea6\u6c42\u6700\u5927 x = torch . cat ([ avgout , maxout ], dim = 1 ) # \u5408\u5e76\u5f97\u5230\u901a\u9053\u4e3a2\u7684\u5377\u79ef\u5c42 x = self . sigmoid ( self . conv ( x )) # \u8fdb\u884c\u5377\u79ef\u548csigmoid\uff0c\u5f97\u5230\u901a\u9053\u4e3a1\u7684\u5f97\u5206\u7279\u5f81\u56fe return x \u901a\u9053+\u7a7a\u95f4\u6ce8\u610f\u529b\u673a\u5236 Kmeans\u805a\u7c7b \u00b6 kmeans\u4e0ekmeans++\u805a\u7c7b: \u535a\u5ba2 kemeans\u805a\u7c7b\u51fak\u7c7b\u957f\u5bbd(\u4e0d\u662f\u957f\u5bbd\u6bd4)\u5373\u53ef,\u7531\u4e8e\u6570\u636e\u96c6\u4e2d\u56fe\u7247\u5927\u5c0f\u53ef\u80fd\u4e0d\u540c\uff0c\u9700\u8981\u5148\u5f52\u4e00\u5316box\u7684\u5bbd\u9ad8:\u00b7= w=w_box/w_img,h=h_box/h_img \uff0ckmeans\u805a\u7c7b\u7684\u8861\u91cf\u6307\u6807\u662f d = 1 - IOU (\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3pre_box\u4e0egt_box\u7684iou\uff0c\u4e14iou\u8d8a\u5927\u8868\u793a\u8ddd\u79bb\u8d8a\u8fd1)\uff0c\u8ba1\u7b97IOU\u65f6\uff0c\u4e0d\u7528\u7ba1box\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5047\u8bbe\u6240\u6709box\u7684\u5de6\u4e0a\u9876\u70b9\u90fd\u5728\u539f\u70b9 Kmeans (\u7f3a\u70b9:\u5bf9\u79cd\u5b50\u70b9\u7684\u521d\u59cb\u5316\u975e\u5e38\u654f\u611f) \u968f\u673a\u9009\u53d6 K \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u5c06\u6bcf\u4e2a box \u5206\u914d\u7ed9\u4e0e\u5176\u8ddd\u79bb\u6700\u8fd1\u7684 anchor \uff1b \u8ba1\u7b97\u6bcf\u4e2a\u7c07\u4e2d\u6240\u6709 box \u5bbd\u548c\u9ad8\u7684\u5747\u503c\uff0c\u66f4\u65b0 anchor \uff1b \u91cd\u590d2\u30013\u6b65\uff0c\u76f4\u5230anchor\u4e0d\u518d\u53d8\u5316\uff0c\u6216\u8005\u8fbe\u5230\u4e86\u6700\u5927\u8fed\u4ee3\u6b21\u6570 kmeans++ \u968f\u673a\u9009\u53d6 1 \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u8ba1\u7b97 box \u4e0e\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3\u7684\u8ddd\u79bbD(x)\uff1b \u9009\u62e9D(x) \u8f83\u5927\u7684\u70b9\u4f5c\u4e3a\u65b0\u589e\u7684\u805a\u7c7b\u4e2d\u5fc3\uff0c\u6ce8\u610f\u4e0d\u8981\u9009\u62e9\u6700\u5927\u503c(\u6392\u5e8f\u6309\u7167\u6982\u7387\u503c\u9009\u62e9)\uff0c\u53ef\u80fd\u662f\u5f02\u5e38\u70b9 \u91cd\u590d2~3\uff0c\u76f4\u5230k\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u88ab\u9009\u51fa\u6765 \u5229\u7528\u8fd9 k \u4e2a\u521d\u59cb\u7684\u805a\u7c7b\u4e2d\u5fc3\u6765\u8fd0\u884c\u6807\u51c6\u7684 k-means \u7b97\u6cd5 Focal Loss \u00b6 Focal Loss \u4e3b\u8981\u662f\u5728\u539f\u6709\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86 gamma \u56e0\u5b50\u548c alpha \u56e0\u5b50\uff0c\u5176\u4e2d gamma \u56e0\u5b50\u4e3b\u8981\u662f\u63a7\u5236\u56f0\u96be\u6837\u672c\u6316\u6398\u7684\uff0c alpha \u56e0\u5b50\u4e3b\u8981\u662f\u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\u7684\u3002 \u56f0\u96be\u6837\u4f8b\u6316\u6398\uff0c\u52a0\u5165 gamma \u56e0\u5b50 \u5bf9\u4e8e\u6b63\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.95 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 1-0.95 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.35 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 1-0.35 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5bf9\u4e8e\u8d1f\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.05 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 0.05 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.75 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 0.75 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\uff0c\u52a0\u5165\u5e73\u8861\u56e0\u5b50 alpha alpha=0.25 \uff0c\u901a\u8fc7\u63a7\u5236\u5e73\u8861\u56e0\u5b50\u5927\u5c0f\u6765\u5e73\u8861 loss Repulsion Loss|[r\u026a'p\u028cl\u0283\u0259n]:\u65a5\u529b \u00b6 \u672c\u6587\u662f\u65f7\u89c6\u7814\u7a76\u9662CVPR2018\u4e0a\u7684\u4e00\u7bc7\u5de5\u4f5c\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u884c\u4eba\u68c0\u6d4b\u7684\u906e\u6321\u3002 \u76ee\u6807\u91cd\u53e0\u5bfc\u81f4\u4e24\u4e2a\u95ee\u9898\uff1a\u6846\u504f\u79fb\u548c\u6f0f\u68c0 \u4e09\u90e8\u5206:loss=P_T_loss+P\u8fdc\u79bbB_loss+P\u8fdc\u79bbP'_loss \uff0c B \u662f\u9664\u53bb\u672c\u8eab\u8981\u56de\u5f52\u76ee\u6807\u7684\u771f\u5b9e\u6846\u5916\uff0c\u4e0e\u5176 IoU \u6700\u5927\u7684\u771f\u5b9e\u6846; P+ \u4e3a\u6b63\u5019\u9009\u6846\u96c6\u5408\uff0c\u8868\u793a\u81f3\u5c11\u4e0e\u5176\u4e2d\u4e00\u4e2a\u771f\u5b9e\u6846\u7684 IoU \u5927\u4e8e\u67d0\u4e2a\u9608\u503c( 0.5 )\uff0c\u5176\u5b9e\u5c31\u662f\u6b63\u6837\u672c\u3002 P,T\u5438\u5f15 : P_T_loss \uff1a\u5c31\u662f\u7b80\u5355\u7684 smoothL1 Loss \uff0c\u7528\u6765\u4f18\u5316\u9884\u6d4b\u6846 P \u548c\u6240\u8d1f\u8d23\u7684\u76ee\u6807\u6846 T \u7684\u8ddd\u79bb\u3002 P,B\u6392\u65a5 : P\u8fdc\u79bbB_loss : Smoothln(IoG(P,B))_loss ,\u4f7f\u9884\u6d4b\u6846 P \u5c3d\u91cf\u8fdc\u79bb\u548c\u5b83\u91cd\u53e0\u7684\u7b2c\u4e8c\u5927\u7684 GT \u6846 B P,P'\u6392\u65a5 : P\u8fdc\u79bbP'_loss \uff0c\u4ece\u4ee3\u7801\u4e0a\u770b\uff0c\u76ee\u7684\u662f\u4fdd\u8bc1\u4f7f\u5206\u6d3e\u5230\u4e0d\u540c GT \u7684\u9884\u6d4b\u6846\u4e4b\u95f4\u5c3d\u91cf\u8fdc\u79bb\u3002 \u03b1\u548c\u03b2 \u7528\u4e8e\u5e73\u8861\u4e24\u8005\u7684\u6743\u91cd\u3002 TTA \u00b6 WBF(\u6bd4\u8d5b\u4e13\u7528:Weighted Boxes Fusion) code \u00b6 \u52a0\u6743\u8fb9\u6846\u878d\u5408 \uff0c\u5e38\u7528\u4e8e\u878d\u5408\u591a\u4e2a\u6a21\u578b\u5bf9\u540c\u4e00\u5f20\u56fe\u7247\u7684\u6846\u9884\u6d4b\uff0c\u6216\u8005\u5355\u4e2a\u6a21\u578b\u4e0d\u540c\u5c3a\u5ea6\u7684\u7ed3\u679c\u878d\u5408\uff0c\u6bd4 NMS \u6162 3 \u500d\u3002 \u6bcf\u4e2a\u6a21\u578b\u7684\u6bcf\u4e2a\u9884\u6d4b\u6846\u90fd\u6dfb\u52a0\u5230 List B \uff0c\u5e76\u5c06\u6b64\u5217\u8868\u6309\u7f6e\u4fe1\u5ea6\u5f97\u5206 C **\u964d\u5e8f**\u6392\u5217 \u5efa\u7acb\u7a7a List L \u548c list F \uff08\u7528\u4e8e\u878d\u5408\u7684\uff09 \u5faa\u73af\u904d\u5386 B \uff0c\u5e76\u5728 F \u4e2d\u627e\u5230\u4e0e\u4e4b\u5339\u914d\u7684 box \uff08\u540c\u4e00\u7c7b\u522b MIOU > 0.55:\u6700\u4f73\u9608\u503c \uff09 \u5982\u679c step3 \u4e2d\u6ca1\u6709\u627e\u5230\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \u548c F \u7684\u5c3e\u90e8\uff0c\u5982\u679c step3 \u4e2d\u627e\u5230\u4e86\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \uff0c\u52a0\u5165\u7684\u4f4d\u7f6e\u662f box \u5728 F \u4e2d\u5339\u914d\u6846\u7684 Index \uff1b L \u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u4e2a\u6846\uff0c\u9700\u8981\u6839\u636e\u8fd9\u591a\u4e2a\u6846\u66f4\u65b0\u5bf9\u5e94 F[index] \u7684\u503c\uff0c\u5176\u5b9e list L \u79f0\u4e3a dict L \u66f4\u597d\u3002\u66f4\u65b0\u65b9\u5f0f\u5982\u4e0b(\u5bf9\u5750\u6807\u503c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6c42\u548c): \u904d\u5386\u5b8c\u6210\u540e\u5bf9 F \u4e2d\u7684\u5143\u7d20\u518d\u8fdb\u884c\u7f6e\u4fe1\u5ea6\u5f97\u5206\u7684\u7f29\u653e\uff0c\u51cf\u5c11\u67d0\u4e9b box \u53ea\u88ab\u5c11\u6570\u6a21\u578b\u9884\u6d4b\u5230\u7684\u7f6e\u4fe1\u503c(\u5982\u679c\u7fa4\u96c6\u4e2d\u7684\u591a\u4e2a\u6846\u5f97\u5206\u8f83\u4f4e\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740 \u53ea\u6709\u5c11\u6570\u6a21\u578b\u53ef\u4ee5\u9884\u6d4b\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u964d\u4f4e\u6b64\u7c7b\u60c5\u51b5\u7684\u7f6e\u4fe1\u5ea6\u5f97\u5206)\u3002 \u6570\u636e\u589e\u5f3a \u00b6 \u591a\u5c3a\u5ea6\u8bad\u7ec3 : mmdetection \uff1a keep_ratio=True : img_scale \u7684\u591a\u5c3a\u5ea6\u6700\u591a\u4e3a\u4e24\u4e2a\u3002\u5047\u8bbe\u591a\u5c3a\u5ea6\u4e3a [(2000, 1200), (1333, 800)] \uff0c\u5219\u4ee3\u8868\u7684\u542b\u4e49\u4e3a\uff1a\u9996\u5148\u5c06\u56fe\u50cf\u7684\u77ed\u8fb9\u56fa\u5b9a\u5230 800\u52301200 \u8303\u56f4\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u503c\u5047\u8bbe\u4e3a 1100 \uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u957f\u8fb9\u5e94\u8be5\u662f\u77ed\u8fb9\u7684 ratio=1.5 \u500d\uff0c\u4e14\u957f\u8fb9\u7684\u53d6\u503c\u5728 1333\u52302000 \u7684\u8303\u56f4\u4e4b\u5185\u3002\u5982\u679c\u5927\u4e8e 2000 \u6309\u7167 2000 \u8ba1\u7b97\uff0c\u5c0f\u4e8e 1300 \u6309\u7167 1300 \u8ba1\u7b97\u3002 keep_ratio=False : img_scale \u7684\u591a\u5c3a\u5ea6\u53ef\u4ee5\u4e3a\u4efb\u610f\u591a\u4e2a\u3002\u5047\u8bbe\u591a\u5c3a\u5ea6\u4e3a [(2000, 1200), (1666, 1000),(1333, 800)] \uff0c\u5219\u4ee3\u8868\u7684\u542b\u4e49\u4e3a\uff1a\u968f\u673a\u4ece\u4e09\u4e2a\u5c3a\u5ea6\u4e2d\u9009\u53d6\u4e00\u4e2a\u4f5c\u4e3a\u56fe\u50cf\u7684\u5c3a\u5bf8\u8fdb\u884c\u8bad\u7ec3\u3002 Mixup Mixup :\u5c06\u968f\u673a\u7684\u4e24\u5f20\u6837\u672c\u6309\u6bd4\u4f8b\u6df7\u5408\uff0c loss \u90e8\u5206\u4e5f\u6839\u636e\u6df7\u5408\u6bd4\u4f8b\u5206\u914d\uff1b \u4e24\u5f20\u6837\u672c\u56fe\u7247: inputs = lam*images + (1-lam)*images_random \uff0c\u76f4\u63a5\u50cf\u7d20\u76f8\u52a0(\u5c3a\u5bf8\u4e0d\u540c\u65f6\u53d6\u6700\u5927\u503c: (600,800),(900,700)->(900,800) ,\u8865 0 )\u3002 loss = lam * criterion(outputs, targets_a) + (1 - lam) * criterion(outputs, targets_b) MinIoURandomCrop \u968f\u673a crop the image & bboxes \uff0c\u7531\u4e8e\u53ef\u80fd\u6b63\u597d\u628a\u6846\u5207\u5f00\u4f46\u662f\u5fc5\u987b\u4fdd\u8bc1\u6709\u6700\u5c0f\u7684 min iou thresh , min_ious=(0.1, 0.3, 0.5, 0.7, 0.9) \u4e2d\u968f\u673a\u9009\u62e9\u3002 \u5176\u4ed6 Noise \uff1a\u6912\u76d0\u566a\u58f0\u3001\u9ad8\u65af\u566a\u58f0\u3001\u6591\u70b9\u566a\u58f0\u7b49\u968f\u673a\u9009\u62e9 Blur \uff1a\u9ad8\u65af\u6a21\u7cca\uff0c\u4e2d\u503c\u6a21\u7cca\u7b49\u968f\u673a\u9009\u62e9(\u63a8\u8350 mmdetection+ablur ) RandomBoxShake :\u968f\u673a\u539f\u59cb\u7684\u6807\u6ce8\u6846\u6296\u52a8\u5e94\u5bf9\u6807\u6ce8 noise PixelDistort[d\u026a'st\u0254\u02d0\u00aet]\u4f7f\u53d8\u5f62 \uff1a\u50cf\u7d20\u7ea7\u53d8\u6362\uff0c\u4e00\u822c\u90fd\u8981\u52a0\uff0c\u5176\u5b9e\u5c31\u662f\u8c03\u6574\u56fe\u50cf\u7684\u989c\u8272\uff0c\u8272\u8c03\uff0c\u9971\u548c\u5ea6 DB(19/11 Differentiable Binarization:\u53ef\u5fae\u5206\u4e8c\u503c\u5316) \u00b6 \u4ee3\u7801\u89e3\u6790 \u76f4\u63a5\u8bed\u4e49\u5206\u5272\uff0c\u4e0d\u7528\u8003\u8651\u906e\u6321\u95ee\u9898\uff1b\u4e00\u822c\u7684\u8bed\u4e49\u5206\u5272\u7f51\u7edc\u90fd\u662f\u76f4\u63a5\u8f93\u51fa\u4e8c\u503c\u8bed\u4e49\u6982\u7387\u56fe\uff0c\u7136\u540e\u901a\u8fc7\u9608\u503c\u4e8c\u503c\u5316\u5f97\u5230\u6700\u7ec8\u7ed3\u679c(\u4e00\u822c\u8f83\u597d\u7684\u7ed3\u679c\u9700\u8981\u590d\u6742\u7684\u540e\u5904\u7406)\uff0c DB \u76f4\u63a5\u628a \u9608\u503c\u4e8c\u503c\u5316 \u8fc7\u7a0b\u53d8\u7684**\u53ef\u5fae\u5206**\uff0c\u76f4\u63a5\u8fdb\u884c\u7f51\u7edc\u4f18\u5316\uff0c\u5f97\u5230\u66f4\u597d\u7684\u8bed\u4e49\u6982\u7387\u56fe\u3002 \u6807\u7b7e\u5236\u4f5c \u6982\u7387\u56fe P \u7684\u751f\u6210\uff1a\u5411\u91cc\u9762\u538b\u7f29 d \uff0c\u84dd\u6846\u8868\u793a\uff0c \u9ed1\u8272\u533a\u57df\u503c\u4e3a0\uff0c\u767d\u8272\u533a\u57df\u503c\u4e3a1 \u9608\u503c\u56fe T \u7684\u751f\u6210\uff1a\u5411\u5916\u9762\u6269\u5c55 d \u6210\u7eff\u6846\uff0c\u5411\u91cc\u9762\u538b\u7f29 d \u6210\u84dd\u6846\uff0c\u7eff\u84dd\u4e4b\u95f4\u7684\u4e3a\u76ee\u6807\u8fb9\u754c\uff0c\u503c\u4e3a\u7eff\u84dd\u4e4b\u95f4\u6240\u6709\u50cf\u7d20\u5230\u7ea2\u7ebf(\u5b9e\u9645\u8fb9\u754c)\u7684\u8ddd\u79bb( \u6536\u7f29\u6846\u548c\u6269\u5f20\u6846\u4e4b\u95f4\u5dee\u96c6\u90e8\u5206\u91cc\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5230\u539f\u59cb\u56fe\u50cf\u8fb9\u754c\u7684\u5f52\u4e00\u5316\u8ddd\u79bb[0,1] )\uff0c \u9ed1\u8272\u533a\u57df\u503c\u4e3a 0+0.3 \u4e3a\u4e86\u8ba1\u7b97\u4e8c\u503c\u56fe\u65f6\u53ef\u4ee5\u66f4\u597d\u7684\u5206\u5f00\u8fb9\u754c\u3002 \u7f51\u7edc\u7ed3\u6784 \u53ef\u5fae\u5206\u4e8c\u503c\u5316 :\u81ea\u9002\u5e94\u9608\u503c\u7684\u53ef\u5fae\u5206\u4e8c\u503c\u5316\u4e0d\u4ec5\u53ef\u4ee5\u4ece\u80cc\u666f\u4e2d\u5b9a\u4f4d\u6587\u672c\u533a\u57df\uff0c\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u533a\u5206\u5f00\u8ddd\u79bb\u5f88\u8fd1\u7684\u6587\u672c\u5b9e\u4f8b\u3002 \u635f\u5931\u51fd\u6570 Ls,Lb \u90fd\u662f binary cross-entropy (BCE:\u4e8c\u5143\u4ea4\u53c9\u71b5) ,\u540c\u65f6\u4e3a\u4e86\u89e3\u51b3\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u4f7f\u7528 hard negative mining ,\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c 1:3 Lt \u662f\u9884\u6d4b\u7ed3\u679c\u548c\u6807\u7b7e\u4e4b\u95f4\u7684 L1 \u8ddd\u79bb\uff0c\u5176\u4e2d Rd(\u7ea2->\u7eff) \u662f\u5728\u81a8\u80c0 Gd \u5185\u50cf\u7d20\u7684\u7d22\u5f15\uff0c y* \u662f\u9608\u503c map \u7684\u6807\u7b7e\uff0c\u4f7f\u7528 10 \u662f\u56e0\u4e3a Lt \u7684\u7ed3\u679c\u4f1a\u5f71\u54cd\u5230 Lb (\u56e0\u4e3a\u662f\u540c\u4e00\u4e2a\u7279\u5f81\u56fe\u7684\u4e24\u4e2a\u5206\u652f)\u3002 \u63a8\u7406\u6d41\u7a0b \u5728\u63a8\u7406\u65f6\u53ef\u4ee5\u91c7\u7528\u6982\u7387\u56fe\u6216\u8fd1\u4f3c\u4e8c\u503c\u56fe\u6765\u751f\u6210\u6587\u672c\u6846\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4f5c\u8005\u9009\u62e9\u4e86\u6982\u7387\u56fe\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b: \u4e8c\u503c\u56fe\u786e\u5b9a: \u4f7f\u7528**\u8fd1\u4f3c\u4e8c\u503c\u56feB**\uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef \u4f7f\u7528**\u6982\u7387\u56feP**\uff1a\u4f7f\u7528\u56fa\u5b9a\u9608\u503c 0.2 \u5c06\u6982\u7387\u56fe\u505a\u4e8c\u503c\u5316\u5f97\u5230\u4e8c\u503c\u5316\u56fe\uff0c\u7531\u4e8c\u503c\u5316\u56fe\u5f97\u5230\u6536\u7f29\u6587\u5b57\u533a\u57df(\u4f5c\u8005\u63a8\u8350) \u5c06\u6536\u7f29\u6587\u5b57\u533a\u57df\u6309 Vatti clipping \u7b97\u6cd5( PSENet )\u7684\u504f\u79fb\u7cfb\u6570 D' \u8fdb\u884c\u6269\u5f20\u5f97\u5230\u6700\u7ec8\u6587\u672c\u6846 MobileNet \u00b6 MobileNetV1 = \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef+ PReLU (\u539f\u59cb\u662f ReLU6 )+\u901a\u9053\u63a7\u5236\u7cfb\u6570 widen_factor =[ 2 , 1 , 0.75 , 0.5 , 0.25 ]\uff0c\u8fd9\u6837\u5c31\u4ea7\u751f\u6a21\u578b __all__ = ['mobilenet_2', 'mobilenet_1', 'mobilenet_075', 'mobilenet_05', 'mobilenet_025'] \u9664\u4e86\u7b2c\u4e00\u5c42\u5377\u79ef\u662f\u666e\u901a\u5377\u79ef\u5916\uff0c\u5176\u4ed6\u6240\u6709\u5c42\u90fd\u662f\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef( group=in_channels conv + 1x1conv )\uff0c\u6fc0\u6d3b\u51fd\u6570\u5168\u90e8\u4f7f\u7528 relu \u6216\u8005prelu \uff0c\u6700\u540e\u4e00\u5c42\u63a5 fc \u4e4b\u524d\u4f7f\u7528 globalAvgPooling \uff0c\u5176\u5b9e\u53ef\u4ee5\u628a fc \u6362\u6210 1x1 conv \u6765\u52a0\u5feb\u901f\u5ea6\u3002 mobilenetv1 \u4e3b\u8981\u662f\u5f15\u5165\u4e86**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef** mobilenetv2 \u4e3b\u8981\u662f\u5f15\u5165\u4e86**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef+\u5012\u6b8b\u5dee\u7ed3\u6784** mobilenetv3 \u4e3b\u8981\u662f MobileNet V1 \u7684**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef**+ MobileNetV2 \u7684**\u7ebf\u6027\u74f6\u9888\u7684\u5012\u6b8b\u5dee\u7ed3\u6784**+ SE\u6ce8\u610f\u529b\u6a21\u5757 \uff0c\u4e14\u7ed3\u5408\u91c7\u7528\u795e\u7ecf\u7f51\u7edc\u641c\u7d22\u7684\u65b9\u6cd5\uff0c\u8bf4\u662f\u7528\u4e86 h-swish=x*ReLU6(x+3)/6 \u51fd\u6570( \u4e00\u822c\u4f7f\u7528\u65f6\u5e38\u7528relu\u4ee3\u66ff )\uff0c\u540c\u65f6\u5bf9 v2 \u6700\u540e\u9636\u6bb5\u505a\u4e86\u66f4\u6539: mobilenetv1 \u6700\u540e\u4f7f\u7528\u7684\u662f avgpool 7x7 +fc mobilenetv2 \u6700\u540e\u4f7f\u7528\u7684\u662f conv 1x1 + avgpool 7x7 + conv 1x1(==fc) \u5148\u4f7f\u7528 conv1x1 \u5377\u79ef\u5347\u7ef4\u5ea6\uff0c\u4f46\u7531\u4e8e\u6b64\u65f6\u7684\u7279\u5f81\u5bbd\u9ad8\u662f 7x7 \u7684\uff0c\u5f15\u5165\u4e86\u989d\u5916\u7684\u8ba1\u7b97\u91cf mobilenetv3 \u6700\u540e\u4f7f\u7528\u7684\u662f conv 1x1 + avgpool 7x7 + conv 1x1 + conv 1x1(==fc) \u5148\u8fdb\u884c avgpool 7x7 \uff0c\u628a\u7279\u5f81\u5bbd\u9ad8\u964d\u4e3a 1x1 \uff0c\u7136\u540e\u518d\u662f\u4f7f\u7528 1x1 \u5377\u79ef\u5347\u7ef4\uff0c\u8ba1\u7b97\u91cf\u51cf\u5c11\u3002 PReLU:\u5e26\u53c2\u6570\u7684ReLU ai=0 \uff0c\u90a3\u4e48 PReLU \u9000\u5316\u4e3a ReLU \uff1b \u5982\u679c ai \u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u56fa\u5b9a\u503c(\u5982 ai=0.01 )\uff0c\u5219 PReLU \u9000\u5316\u4e3a Leaky ReLU(LReLU) BP \u66f4\u65b0 ai \u65f6\uff0c\u91c7\u7528\u7684\u662f\u5e26\u52a8\u91cf\u7684\u66f4\u65b0\u65b9\u5f0f\uff1a\u4e0b\u9762\u4e24\u4e2a\u7cfb\u6570\u5206\u522b\u662f\u52a8\u91cf\u548c\u5b66\u4e60\u7387\u3002 RetinaFace\u68c0\u6d4b\u7684\u5c40\u9650\u6027 \u00b6 \u7531\u4e8e\u732a\u53ea\u5c3a\u5bf8\u76f8\u5dee\u4e0d\u5927\uff0c\u53c8\u662f\u540c\u4e00\u4e2a\u65b9\u5411\u8fd0\u52a8\uff0c\u5b58\u5728\u906e\u6321\u6324\u538b\u72b6\u51b5\uff0c\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u56fe\u4ea7\u751f\u7684\u4e00\u4e2a anchor \u6846\u540c\u65f6\u5206\u914d\u7ed9\u8fd9\u4e2a\u76ee\u6807\uff0c\u4f1a\u4ea7\u751f\u76ee\u6807\u91cd\u5199\u73b0\u8c61\uff0c\u5bfc\u81f4\u6f0f\u68c0(\u5c24\u5176\u662f\u5c0f\u7279\u5f81\u56fe\u4e2d\uff0c\u611f\u53d7\u91ce\u8f83\u5927\uff0c\u91cd\u5199\u73b0\u8c61\u53d1\u751f\u6982\u7387\u5927)\uff0c \u589e\u5927\u56fe\u7247\u5206\u8fa8\u7387\u6216\u8005\u589e\u52a0\u7279\u5f81\u56fe\u5927\u5c0f\uff0c\u901f\u5ea6\u4f1a\u53d8\u6162 kmeans \u4f7f\u5f97\u5dee\u4e0d\u591a\u5c3a\u5bf8\u7684\u732a\u53ea(\u6216\u8005\u6709\u51e0\u79cd\u7279\u5b9a\u5c3a\u5ea6\u7684\u7269\u4f53)\u5f3a\u5236\u88ab\u5206\u5230\u4e0d\u540c\u5c42\u4e2d\u88ab\u9884\u6d4b\uff0c\u8fd9\u662f\u6709\u95ee\u9898\u7684\u3002 \u6a21\u578b\u526a\u679d \u00b6 gamma\u7cfb\u6570\u7edd\u5bf9\u503c\u6392\u5e8f\u88c1\u526a \u7cfb\u6570\u8bad\u7ec3\u65b9\u5f0f \u526a\u679d\u540e\u6bcf\u5c42\u901a\u9053\u5269\u4f59\u8bbe\u7f6e\u4e3a 2^x \u6570\u76ee\uff0c\u8fd9\u6837\u8f83\u7a33\u5b9a\u4f46\u727a\u7272\u4e86\u90e8\u5206\u538b\u7f29\u7387 \u6052\u5b9a s \u526a\u679d:\u4e00\u76f4\u4ee5\u56fa\u5b9a\u7684 L1 \u60e9\u7f5a\u7cfb\u6570 s=0.001 \u5168\u5c40 s \u8870\u51cf\u526a\u679d: s = s if epoch <= opt.epochs * 0.5 else s * 0.01 \uff0c\u8d85\u8fc7 epochs/2 \u540e\u60e9\u7f5a\u7cfb\u6570\u8870\u51cf 100 \u500d\uff0c\u4f7f\u5f97\u7cbe\u5ea6\u7a0d\u5fae\u6062\u590d\u3002 \u5c40\u90e8 s \u8870\u51cf\u526a\u679d:\u8d85\u8fc7 epochs/2 \u540e\u5bf9 85 %\u7684\u901a\u9053(\u6240\u6709 bn \u901a\u9053 s \u6392\u5e8f)\u4fdd\u6301\u539f\u59cb\u6052\u5b9a\u60e9\u7f5a\u7cfb\u6570 s \u538b\u7f29\uff0c 15% \u7684\u901a\u9053\u8fdb\u884c s \u8870\u51cf 100 \u500d\u7684\u538b\u7f29( 85% \u662f\u4e2a\u5148\u9a8c\u77e5\u8bc6\uff0c\u4e00\u822c\u8fd9\u4e2a\u538b\u7f29\u7387\u662f\u6700\u4f73\u7684)\u3002 tensorboard\u8bb0\u5f55\u7a00\u758fBN\u5c42gamma\u6743\u91cd\u53d8\u5316 \u5982\u4f55\u786e\u5b9a\u88c1\u526a\u7387 \u8bbe\u7f6e\u88c1\u526a\u7387: range(0.60,0.90,0.01) \uff0c\u8dd1 mini_testData:100 \u5f20\uff0c\u786e\u5b9a\u6700\u9ad8 AP \u7684\u88c1\u526a\u7387 65.7% \u7cbe\u5ea6\u6062\u590d : \u5fae\u8c03finetune(3~5\u4e2aepochs) \uff0c\u89c2\u5bdf finetune \u524d\u540e BN \u5c42\u7684\u6743\u91cd\u5206\u5e03 \u5fae\u8c03\u6a21\u578b\u524d\u540e Conv \u7b49\u5c42\u6743\u91cd\u53d8\u5316\u5e73\u7f13\uff0c\u4f46\u662f BN \u5c42\u53d8\u5316\u5de8\u5927\uff0c\u6240\u4ee5\u51bb\u7ed3\u5176\u4ed6\u5c42\u53c2\u6570\uff0c\u53ea finetune BN \u5c42\u7684\u53c2\u6570\uff0c\u6548\u679c\u7a0d\u5fae\u6709\u63d0\u5347 \u6a21\u578b\u84b8\u998f(\u63a8\u8350) :\u5bf9\u6a21\u578b\u84b8\u998f\u6765\u8bf4\uff0c\u7f51\u7edc\u5728\u7ed3\u6784\u76f8\u4f3c\u7684\u60c5\u51b5\u4e0b\u63d0\u5347\u6548\u679c\u5c24\u4e3a\u660e\u663e\uff0c\u526a\u679d\u6a21\u578b\u548c\u539f\u59cb\u6a21\u578b\u4e4b\u95f4\u7f51\u7edc\u7ed3\u679c\u9ad8\u5ea6\u76f8\u4f3c\uff0c\u4f7f\u7528\u84b8\u998f\u6548\u679c\u66f4\u597d\u3002 \u77e5\u8bc6\u84b8\u998f(\u5206\u7c7b/\u56de\u5f52\u7528) \u00b6 \u53ea\u84b8\u998f\u4e00\u4e2a\u8f93\u51fa\u5c42 \u8981\u84b8\u998f\u7684\u5c0f\u6a21\u578b\uff0c\u4ee5\u5927\u6a21\u578b\u7684\u8f93\u51fa\u7684\u6982\u7387\u5411\u91cf( soft target : \u8f6f\u6807\u7b7e ->\u62e5\u6709\u4e0d\u540c\u7c7b\u4e4b\u95f4\u5173\u7cfb\u7684\u4fe1\u606f)\u4e3a\u5b66\u4e60\u76ee\u6807\uff0c\u56e0\u4e3a one-hot \u5305\u542b\u7684\u4fe1\u606f\u91cf\u5f88\u4f4e [0,1] \uff08\u7c7b\u4f3c label smooth \uff09\uff0c\u56e0\u4e3a\u8d1f\u6807\u7b7e\u4e5f\u5e26\u6709\u5927\u91cf\u4fe1\u606f\u3002 \u5982\u4f55\u505a\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u5728 softmax \u4e2d\u589e\u52a0\u6e29\u5ea6\u53c2\u6570 T \uff0c\u63a8\u7406\u7684\u65f6\u5019 T=1 \uff0c\u4f18\u5316 L_soft \u7684\u65f6\u5019\u5e38\u7528 KL\u6563\u5ea6 \u8ba1\u7b97 Loss : \u4ea4\u53c9\u71b5= KL \u6563\u5ea6+\u71b5 \uff0c one-hot \u6807\u7b7e\u7684\u771f\u5b9e\u4fe1\u606f\u71b5\u662f\u56fa\u5b9a\u7684\u6240\u4ee5\u7528\u4ea4\u53c9\u71b5\u4ee3\u66ff KL \u6563\u5ea6\uff0c\u4f46\u662f soft label \u7684\u4fe1\u606f\u71b5\u662f teacher \u7f51\u7edc\u751f\u6210\u7684\uff0c\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u7528 KL \u6563\u5ea6\u3002 \u6e29\u5ea6 T :\u8d8a\u5c0f\u8d8a\u653e\u5927\u6b63\u6837\u672c\uff0c\u8d8a\u5927\u8d8a\u653e\u5927\u8d1f\u6837\u672c(\u5373\u653e\u5927\u5c0f\u6982\u7387\u503c\u5206\u91cf\u6240\u643a\u5e26\u7684\u4fe1\u606f)\u3002 # \u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () criterion2 = nn . KLDivLoss () # \u7ecf\u5178\u635f\u5931 outputs = model ( inputs . float ()) loss1 = criterion ( outputs , labels ) # \u84b8\u998f\u635f\u5931 teacher_outputs = teach_model ( inputs . float ()) T = 2 alpha = 0.5 outputs_S = F . log_softmax ( outputs / T , dim = 1 ) outputs_T = F . softmax ( teacher_outputs / T , dim = 1 ) loss2 = criterion2 ( outputs_S , outputs_T ) * T * T #\u7efc\u5408\u635f\u5931\u7ed3\u679c loss = loss1 * ( 1 - alpha ) + loss2 * alpha \u7cbe\u5ea6\u66f4\u9ad8\u7684\u6a21\u578b\u84b8\u998f\u5c0f\u6a21\u578b\u63d0\u5347\u70b9\u66f4\u5c11\uff0c\u539f\u56e0\u5206\u6790 \uff1a Teacher \u66f4\u590d\u6742\uff0c Student \u6ca1\u6709\u8db3\u591f\u7684\u80fd\u529b\u6765\u6a21\u4eff Teacher Teacher \u7684\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u6a21\u578b\u786e\u5b9a\u6027\u66f4\u5f3a\uff0c\u8f93\u51fa logits \uff08 soft label \uff09\u53d8\u5f97 less soft \uff0c\u8d8b\u8fd1\u4e8e one-hot \u89e3\u51b3\u65b9\u6848:\u53ef\u4ee5\u5229\u7528\u8d85\u5927\u6a21\u578b\u4f5c\u4e3a**\u52a9\u6559\u7f51\u7edc**\u8f85\u52a9\u84b8\u998f(\u8d85\u5927\u7f51\u7edc\u4f5c\u4e3a Teacher ,\u5927\u7f51\u7edc\u4f5c\u4e3a Teach-Assistant \uff0c\u5c0f\u7f51\u7edc\u4f5c\u4e3a Student ) \u9996\u5148\u5bf9\u8d85\u5927\u7f51\u7edc\u5bf9\u5927\u7f51\u7edc\u8fdb\u884c\u84b8\u998f(\u5927\u7f51\u7edc\u7684\u9009\u53d6\u548c\u8d85\u5927\u7f51\u7edc\u76f8\u5dee\u4e0d\u8981\u592a\u5927( 7\u500d \u4ee5\u4e0a)\uff0c\u4e0d\u7136\u4e5f\u84b8\u4e0d\u51fa\u6765) \u518d\u7528\u6574\u7406\u597d\u7684\u5927\u7f51\u7edc\u5bf9\u6700\u7ec8\u7684\u5c0f\u7f51\u7edc\u8fdb\u884c\u84b8\u998f \u591a\u4e2aTeacher\u6a21\u578b\u5982\u4f55\u84b8\u998f link \u5c06\u591a\u4e2ateacher\u6a21\u578b\u7684\u9884\u6d4b\u6982\u7387\uff08softmax\u540e\u8f93\u51fa\uff09\u6c42\u5e73\u5747\u503c\u6765\u8fdb\u884c\u84b8\u998f\uff0c\u6548\u679c\u597d\u4e8e\u968f\u673a\u9009\u4e00\u4e2ateacher\u6a21\u578b\u8fdb\u884c\u84b8\u998f\u3002 \u8f93\u51fa\u5c42\u548c\u7279\u5f81\u5c42\u4e00\u8d77\u84b8\u998f \u5bf9\u4e8eT\u548cS\u4e2d\u95f4\u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff0c\u91c7\u7528\u5728 S \u7f51\u7edc\u8f93\u51fa\u63a5\u4e00\u4e2a\u8f6c\u6362\u5668( conv+bn+mish )\uff0c\u5c06\u5176\u5347\u7ef4\u5230 T \u7f51\u7edc\u5339\u914d\uff0cT\u7684\u8bdd\u76f4\u63a5\u63a5\u4e00\u4e2a mish \u4fdd\u8bc1\u6fc0\u6d3b\u51fd\u6570\u76f8\u540c( mish=x*tanh(ln(1+e^x)) )\u3002 loss:nn.MSE-->\u9884\u6d4b\u6570\u636e\u548c\u539f\u59cb\u6570\u636e\u5bf9\u5e94\u70b9\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u7684\u5747\u503c \u76ee\u6807\u68c0\u6d4b\u5b9e\u9645\u84b8\u998f (\u5c1d\u8bd5\u4e09\u79cd) output \u84b8\u998f:\u666e\u901a\u84b8\u998f KL \u6563\u5ea6 # \u5bf9\u4e8e\u5206\u7c7b\u548c\u56de\u5f52\u90fd\u662f\u6309\u7167KL\u6563\u5ea6loss\u76f4\u63a5\u8fdb\u884c\u84b8\u998f def distillation_loss1 ( output_s , output_t , num_classes , batch_size ): T = 3.0 Lambda_ST = 0.001 criterion_st = torch . nn . KLDivLoss ( reduction = 'sum' ) output_s = torch . cat ([ i . view ( - 1 , num_classes + 5 ) for i in output_s ]) output_t = torch . cat ([ i . view ( - 1 , num_classes + 5 ) for i in output_t ]) loss_st = criterion_st ( nn . functional . log_softmax ( output_s / T , dim = 1 ), nn . functional . softmax ( output_t / T , dim = 1 )) * ( T * T ) / batch_size return loss_st * Lambda_ST output \u84b8\u998f:\u5206\u7c7b\u548c\u56de\u5f52\u5206\u5f00\u84b8\u998f \u5206\u7c7b\u8fd8\u662f\u4f7f\u7528\u666e\u901a\u7684\u84b8\u998f\u7b56\u7565( \u4f7f\u7528KL\u6563\u5ea6loss\u6765\u6c42\u5206\u7c7b\u603bloss )\uff0c\u4f46\u5bf9\u4e8e\u56de\u5f52 loss ,\u53d1\u73b0\u5148\u5bf9 student + target \u7684 boxs \u6c42\u5747\u503c\uff0c\u7136\u540e\u4f18\u5316 student \u548c t_tar_mean_box \u7684 CIOU loss (\u4f18\u4e8e 1/2*l2 loss )\uff0c\u6548\u679c\u66f4\u597d\uff0c alpha=0.001 1/2*L2 loss \u8bad\u7ec3\u521d\u671f\uff0c x \u503c\u5f88\u5927\u65f6\uff0c\u5176\u5bfc\u6570\u4e5f\u5f88\u5927\uff0c\u8bad\u7ec3\u521d\u671f\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002\u4f46\u5bf9\u4e8e\u84b8\u998f\u6765\u8bf4\uff0c\u5c5e\u4e8e\u8bad\u7ec3\u540e\u671f\uff0c\u7c7b\u4f3c smooth l1 loss \u7684\u540e\u671f\u3002 \u7279\u5f81\u56fe\u84b8\u998f+ output \u84b8\u998f \u56e0\u4e3a\u7f51\u7edc\u7ed3\u6784\u4e00\u6837\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u4e2d\u95f4\u56db\u5c42\u7279\u5f81\u56fe\u8fdb\u884c\u84b8\u998f\uff0c\u56e0\u4e3a\u901a\u9053\u6570\u7684\u4e0d\u540c\uff0c\u4f7f\u7528 1x1 conv \u4fdd\u6301\u7ef4\u5ea6\u76f8\u540c\uff0c\u7136\u540e\u8ba1\u7b97\u5176 MSE loss \uff0c\u4f7f\u7528\u8f83\u5c0f\u7684\u7cfb\u6570 0.005 \u52a0\u5165\u5230\u603b loss \u91cc\u9762\u3002 Teach-Assistant(\u52a9\u7406) Distillation :\u6ca1\u6709\u5c1d\u8bd5 \u5982\u679c T,S \u4e4b\u95f4\u5dee\u8ddd\u975e\u5e38\u5927( 7 \u500d\u4ee5\u4e0a)\uff0c\u53ef\u4ee5\u501f\u52a9\u4e00\u4e2a\u4e2d\u95f4\u7684\u7f51\u7edc M \uff0c\u5148\u7528 T \u84b8\u998f M \uff0c\u518d\u7528 M \u84b8\u998f S \u5728\u7ebf\u91cf\u5316\u4e4b\u4e8c\u503c\u5316(BWN:Binary Weight Networks) \u00b6 BWN :\u8bba\u6587\u4e2d\u521d\u6b21\u63d0\u51fa\u7684\u6743\u91cd\u4e8c\u503c\u5316\u662f\u628a\u5377\u79ef\u6216\u8005\u5168\u8fde\u63a5\u5c42\u7684\u5377\u79ef\u6838\u53c2\u6570\u53d8\u6210** W_binary{-1,1}*\u03b1(\u5c3a\u5ea6\u53c2\u6570) \u4ee3\u66ff\u6743\u91cdW_float32**\uff0c\u5bf9\u4e8e activation \u4ecd\u7136\u91c7\u7528 float32 \u5168\u7cbe\u5ea6\u3002 W_binary = sign(W_float32) \uff0c\u4f46\u662f sign \u51fd\u6570\u5728 0 \u5904\u4e0d\u53ef\u5bfc\uff0c \u5f00\u5c71\u4e4b\u4f5c:BinaryNet \u4f5c\u8005\u4f7f\u7528** \u76f4\u901a\u4f30\u8ba1\u5668:STE **(\u524d\u5411\u63d0\u53d6\u8f93\u5165\u7684\u6b63\u8d1f,\u5373 {-1,+1} \uff0c\u53cd\u5411\u4f7f\u7528 clip(-1,x,1)\u7684\u5bfc\u6570\u6765\u62df\u5408sign\u7684\u5bfc\u6570 ),\u4e5f\u5c31\u662f\u8bf4 output_grad = abs(input)>1--->grad==0*src_grad \uff0c\u5f53 output_grad = abs(input)<=1--->1*src_grad \u03b1 \u5982\u4f55\u786e\u5b9a\u6700\u4f18\uff1f \u03b1 \u6700\u4f18\u503c= np.sum(abs(w)) / n \uff08\u8be5\u5c42\u76f8\u5e94\u5377\u79ef\u6838\u53c2\u6570\u7684 L1 \u8303\u6570\u7684\u5747\u503c\uff09\uff0c\u8bba\u6587\u4e2d\u6709\u63a8\u7406\u516c\u5f0f\u3002 # \u5982\u679c\u8981\u8fdb\u884c\u6fc0\u6d3b\u4e8c\u503c\u5316\uff0c\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u53c2\u6570\u4e0d\u80fd\u662f\u4e8c\u503c\uff0c\u56e0\u4e3a\u56fe\u7247\u662f8bit\uff0c\u5982\u679c\u76f4\u63a5\u4e8c\u503c\u5316\uff0c\u4e22\u5931\u4fe1\u606f\u8fc7\u591a # STE class BinActive ( torch . autograd . Function ): ''' Binarize the input activations for ***** BNN and XNOR *****. ''' @staticmethod def forward ( ctx , input ): ctx . save_for_backward ( input ) input = input . sign () # \u4f7f\u7528y=x\u51fd\u6570\u62df\u5408\u68af\u5ea6 return input @staticmethod def backward ( ctx , grad_output , ): input , = ctx . saved_tensors grad_input = grad_output . clone () # \u5f00\u5c71\u4e4b\u4f5cBNN\u4e2d\u6fc0\u6d3b\u503c:\u5f53sign\u51fd\u6570\u7684\u8f93\u5165\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u5c06\u68af\u5ea6\u7f6e0\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002 grad_input [ input . ge ( 1 )] = 0 grad_input [ input . le ( - 1 )] = 0 # \u6700\u7ec8\u7684\u68af\u5ea6\u7ed3\u679c\u5c31\u662fsign\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u4f7f\u7528clip(-1,x,1)\u51fd\u6570\u6765\u62df\u5408 return grad_input # \u5f53\u5728[-1,1]\u8303\u56f4\u5185\uff0c\u76f4\u63a5\u8fd4\u56de class BWNConv2d ( nn . Conv2d ): def forward ( self , x ): w = self . weight alpha = torch . mean ( torch . mean ( torch . mean ( abs ( w ), dim = 3 , keepdim = True ), dim = 2 , keepdim = True ), dim = 1 , keepdim = True ) . detach () bw = BinActive () . apply ( w ) # \u5bf9\u6743\u91cd\u8fdb\u884c\u4e8c\u503c\u5316(\u91cf\u5316) bw = bw * alpha # bx = BinActive().apply(x) # \u5bf9\u6fc0\u6d3b\u503c\u8fdb\u884c\u4e8c\u503c\u5316(\u91cf\u5316) output = F . conv2d ( x , bw , self . bias , self . stride , self . padding , self . dilation , self . groups ) return output \u6700\u7ec8\u7ed3\u679c\u663e\u793a:\u6bcf\u4e2a\u5377\u79ef\u6838\u81ea\u8eab\u7684\u53c2\u6570\u7edd\u5bf9\u503c\u76f8\u540c\uff0c\u4f46\u4e0d\u540c\u5377\u79ef\u6838\u7684\u7edd\u5bf9\u503c\u4e0d\u76f8\u540c DoReFa-Net\u5728\u7ebf\u91cf\u5316\u4efb\u610f\u6bd4\u7279(2,8\u7b49) \u76f4\u901a\u4f30\u8ba1\u5668STE from torch.autograd import Function def quantize_k ( r_i , k ): scale = ( 2 ** k - 1 ) r_o = torch . round ( scale * r_i ) / scale return r_o class DoReFaQuant ( Function ): @staticmethod def forward ( ctx , r_i , k ): tanh = torch . tanh ( r_i ) . float () r_o = 2 * quantize_k ( tanh / ( 2 * torch . max ( torch . abs ( tanh )) . detach ()) + 0.5 , k ) - 1 return r_o # \u8fd4\u56de\u7684\u6743\u91cd\u8303\u56f4\u662f[-1~1] @staticmethod def backward ( ctx , dLdr_o ): # due to STE, dr_o / d_r_i = 1 according to formula (5) return dLdr_o , None # \u6539\u5584\u7248\u7684\u5bf9\u6fc0\u6d3b\u4e5f\u505a\u91cf\u5316\u9650\u5b9a class ActivateQuantizer ( Function ): @staticmethod def forward ( ctx , input , nbit ): return quantize_k ( input , nbit ) @staticmethod def backward ( ctx , grad_output ): return grad_output , None class DorafaConv2d ( nn . Conv2d ): def forward ( self , x , bitwidth = 8 ): w = self . weight bw = DoReFaQuant () . apply ( w , bitwidth ) # \u5bf9\u6743\u91cd\u8fdb\u884cDorafa\u91cf\u5316\u9650\u5b9a # \u5bf9x\u8fdb\u884c\u622a\u65ad(x\u622a\u65ad\u524d\u5148\u8fdb\u884c\u7f29\u653e\uff08* 0.1\uff09\uff0c\u76ee\u7684\u662f\u51cf\u5c0f\u622a\u65ad\u8bef\u5dee)\uff0c\u9002\u5e94\u4e8erelu\u6fc0\u6d3b\u7684\u51fd\u6570\uff0c\u5982\u679c\u662f\u4f7f\u7528PACT\u9650\u5b9a\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u7528\u4e86 x = ActivateQuantizer . apply ( torch . clamp ( 0.1 * input , 0 , 1 ), bitwidth ) output = F . conv2d ( x , bw , self . bias , self . stride , self . padding , self . dilation , self . groups ) return output \u4eba\u8138\u68c0\u6d4b(DBFace:\u6df1\u84dd\u79d1\u6280) \u00b6 \u4f18\u52bf:\u53ef\u4ee5\u4f7f\u7528\u591a\u5c3a\u5ea6\u8fd0\u7b97\u4e14\u65e0\u9700\u8ba1\u7b97 anchor (\u8017\u65f6), \u6570\u636e\u8f93\u5165 # 001.jpg #\u56fe\u7247\u540d x y w h lx1 ly1 lt1 lx2 ly2 lt2 ... # box\uff1ax,y,w,h landmark:\u5750\u6807(x1,y1),\u662f\u5426\u6709\u6548:t1 x y w h lx1 ly1 lt1 lx2 ly2 lt2 ... # 002.jpg .... \u9700\u8981\u6ce8\u610f\u7684\u70b9 \u9ad8\u65af\u70ed\u529b\u56fe\u8be6\u89e3:\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u76ee\u6807\u7528\u4e00\u4e2a\u9ad8\u65af\u5706\u8868\u793a\uff0c\u76ee\u6807\u6846\u4e2d\u5fc3\u70b9\u503c\u4e3a 1 \uff0c\u5982\u679c 1 \u5468\u56f4\u8bbe\u7f6e\u4e3a 0 \u5c31\u592a\u4e25\u683c\u4e86\uff0c\u6240\u4ee5\u4ee5\u8be5\u70b9\u4e3a\u5706\u5fc3\uff0c\u4ee5\u548c GT \u6846 IOU \u5927\u4e8e 0.7 \u7684\u8fd9\u4e9b\u70b9(\u8fd9\u4e9b\u70b9\u751f\u6210\u7684\u6846\u4e5f\u80fd\u5f88\u597d\u7684\u5305\u56f4\u76ee\u6807)\u4e3a\u534a\u5f84 r \uff0c\u91c7\u7528\u9ad8\u65af\u51fd\u6570\u751f\u6210\u6700\u7ec8\u7684\u7ed3\u679c\uff0c \u5982\u679c\u6709\u591a\u4e2a\u7c7b\u67d0\u4e00\u4e2a\u7c7b\u7684\u4e24\u4e2a\u9ad8\u65af\u5206\u5e03\u53d1\u751f\u4e86\u91cd\u53e0\uff0c\u76f4\u63a5\u53d6\u5143\u7d20\u95f4\u6700\u5927\u7684\u5c31\u53ef\u4ee5 anchor base \u7684\u7279\u6027\u662f\u76ee\u6807\u8d8a\u5927\u6b63\u7c7bloss\u8d21\u732e\u8d8a\u5927, anchor free \u7684\u7279\u6027\u662f\u6240\u6709\u76ee\u6807\u90fd\u4e00\u4e2a\u70b9\uff0c\u6b63\u7c7b\u8d21\u732e\u65e0\u8bba\u5927\u5c0f\u90fd\u4e00\u6837(\u4e00\u822c\u5bf9\u5c0f\u76ee\u6807\u8f83\u53cb\u597d)\uff0c\u6240\u4ee5\u5728\u591a\u5c3a\u5bf8\u76ee\u6807\u8bad\u7ec3\u4e2d\uff0c\u9700\u8981\u4f7f\u7528 pos_weights \u6765\u5904\u7406\uff0c\u589e\u52a0\u5927\u76ee\u6807\u7684\u6743\u91cd\u3002 \u5177\u4f53\u505a\u6cd5:\u8bbe\u7f6e\u9ad8\u65af\u6743\u91cd\u70ed\u529b\u56fe heatmap_posweight \uff0c\u5728\u6709\u5927\u5c3a\u5bf8\u7684\u76ee\u6807\u56fe\u7684\u70b9\u91c7\u7528\u9ad8\u65af\u5206\u5e03\u5706\uff0c\u5728\u8ba1\u7b97\u635f\u5931\u7684\u65f6\u5019\u76f4\u63a5\u548c loss \u76f8\u4e58\u6765\u589e\u5927\u5927\u76ee\u6807\u5728\u635f\u5931\u4e2d\u7684\u6743\u91cd\u5360\u6bd4\u3002 \u5bf9\u4e8e 12*12 \uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u5206\u8fa8\u7387\u7684\u76f4\u63a5\u505a\u4e86\u8d1f\u6837\u672c\u505a\u6cd5\u662f\u4e0d\u5408\u7406\u7684\uff0c\u5408\u7406\u7684\u505a\u6cd5\u662f\u5ffd\u7565\uff0c\u4e0d\u5e94\u8be5\u5bf9 loss \u4ea7\u751f\u8d21\u732e \u5177\u4f53\u505a\u6cd5\u662f\u91c7\u7528 keep_mask \u56fe\uff0c\u4f4e\u4e8e 12*12 \u50cf\u7d20\u7684\u70b9\u7684\u5750\u6807\u76f4\u63a5\u7f6e\u4e3a 0 \uff0c\u5728\u8ba1\u7b97 loss \u7684\u65f6\u5019\u76f4\u63a5\u4e0e keep_mask \u56fe\u76f8\u4e58\uff0c\u5373\u4e0d\u53c2\u4e0e\u635f\u5931\u8d21\u732e\u4e14\u5bf9\u5e94\u7684\u4eba\u8138\u5173\u952e\u70b9\u4e5f\u4e0d\u4f1a\u53c2\u4e0e\u8ba1\u7b97\u635f\u5931\u503c\u3002 \u9ad8\u65af\u70ed\u529b\u56fe\u4f7f\u7528 Focal Loss \u6539\u7248\u8ba1\u7b97\u635f\u5931\uff0c\u9ed8\u8ba4 alpha=2,beta=4 \uff0c \u56f0\u96be\u6837\u4f8b\u6316\u6398 \u5bf9\u4e8e\u6b63\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y^=0.95 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 1-0.95 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y^=0.35 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 1-0.35 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5bf9\u4e8e\u8d1f\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y^=0.05 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 0.05 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y^=0.75 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 0.75 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u4e0a\u9762\u63d0\u5230\u7684\u56f0\u96be\u6837\u672c\u6307\u4e24\u4e2a\u65b9\u9762: \u771f\u6b63\u56f0\u96be\u6837\u4f8b\uff0c Focal Loss \u4f1a\u589e\u5927\u8fd9\u6837\u6837\u672c\u5bf9\u635f\u5931\u7684\u8d21\u732e \u6837\u672c\u5206\u9519\u60c5\u51b5\uff0c\u5982\u679c\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\uff0c\u4e5f\u4f1a\u51fa\u73b0\u66f4\u591a\u7684\u6837\u672c\u88ab\u5206\u9519\uff0c\u6291\u5236\u8fd9\u79cd\u5206\u9519\u6837\u672c\u3002 class FocalLoss ( nn . Module ): def forward ( self , pred , gt , pos_weights , keep_mask = None ): pos_inds = gt . eq ( 1 ) . float () # \u7b49\u4e8e1 \u4e3a\u6b63\u6837\u672c neg_inds = gt . lt ( 1 ) . float () # \u5c0f\u4e8e1 \u4e3a\u8d1f\u6837\u672c # pos_weights:\u9ad8\u65af\u6743\u91cd\u56fe\uff0c\u8d1f\u6837\u672c\u5730\u65b9\u76f4\u63a5\u4e3a0\uff0c\u6b63\u6837\u672c\u4e2d\u95f4\u4e3a1\uff0c\u534a\u5f84r\u5185\u9ad8\u65af\u9012\u51cf pos_loss = torch . pow ( 1 - pred , 2 ) * torch . log ( pred ) * pos_weights neg_loss = torch . pow ( 1 - gt , 4 ) * torch . pow ( pred , 2 ) * torch . log ( 1 - pred ) * neg_inds if keep_mask is not None : pos_loss = ( pos_loss * keep_mask ) . sum () neg_loss = ( neg_loss * keep_mask ) . sum () # \u4f7f\u7528keep_mask\u56fe\u6765\u5ffd\u7565\u8d85\u5c0f\u6837\u672c\uff0c\u4e0d\u4f5c\u4e3a\u8d1f\u6837\u672closs else : pos_loss = pos_loss . sum () neg_loss = neg_loss . sum () return - ( pos_loss + neg_loss ) \u7f51\u7edc\u7ed3\u6784 def forward ( self , x ): # 1.\u9009\u53d60,2,7 block + \u8fdb\u5165block\u524d\u7684x(x=CBAModule(x)) s4 , s8 , s16 , s32 = self . bb ( x ) s32 = self . conv3 ( s32 ) # 2.\u4e0a\u91c7\u6837\u91c7\u7528\u7684\u662f\u53cc\u7ebf\u6027\u5dee\u503c+conv+bn+relu\uff0c\u6548\u679c\u4f18\u4e8e\u53cd\u5377\u79ef\u548c\u6700\u8fd1\u90bb\u3002 s16 = self . up0 ( s32 ) + self . connect2 ( s16 ) s8 = self . up1 ( s16 ) + self . connect1 ( s8 ) s4 = self . up2 ( s8 ) + self . connect0 ( s4 ) # 3.\u4f7f\u7528SSH\u8fdb\u884c\u5bf9\u878d\u5408\u540e\u7684\u7279\u5f81\u56fe\u8fdb\u884c\u5408\u5e76\u4e0a\u4e0b\u6587\u4fe1\u606f \u4e14 \u6269\u5927\u611f\u53d7\u91ce x = self . detect ( s4 ) # SSH # 4 \u9ad8\u65af\u70ed\u529b\u56fe\uff0c\u4eba\u8138\u6846\uff0clandmark\u6846\u90fd\u662f\u5728(H//4,W//4)\u7684\u7279\u5f81\u56fe\u4e0a\u8fdb\u884c\u7684,\u56de\u5230\u539f\u56fe\u9700\u8981*4 # 4.1 \u8f93\u51fa\u9ad8\u65af\u70ed\u529b\u56fe(N,1,H//4,W//4),sigmoid\u538b\u7f29\u5230[0,1],\u4f7f\u7528FocalLoss\u8ba1\u7b97\u635f\u5931\uff0c\u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\uff0c\u5982\u679c\u662f\u591a\u4e2a\u7c7b(N,class_nums,H//4,W//4) heat_map = self . center ( x ) # conv->out_channels=1, heat_map = heat_map . sigmoid () # hm\u4f7f\u7528sigmoid\u538b\u7f29\u8303\u56f4[0,1] # 4.2 \u8f93\u51fa\u4eba\u8138\u6846(N,4,H//4,W//4)tlrb:\u5206\u522b\u662f\u8ddd\u79bb\u6846\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u8ddd\u79bb\u3002GIoULoss\u4f18\u5316(\u4f18\u4e8eIOU,\u56e0\u4e3aIOU\u65e0\u6cd5\u4f18\u5316\u4e24\u7b50\u4e0d\u91cd\u53e0\u60c5\u51b5)\uff0c\u6743\u91cd\u5360\u6bd4\u4e3a5 box = self . box ( x ) # conv->out_channels=4 box = torch . exp ( box ) # \u8fdb\u4e00\u6b65\u5bf9\u6846\u8fdb\u884c\u589e\u5f3a\uff0c\u76ee\u7684\u662f\u62c9\u5f00\u5176\u5185\u5143\u7d20\u7684\u5dee\u8ddd\u3002 if self . has_landmark : # 4.3 \u8f93\u51fa5\u4e2a\u5173\u952e\u70b9(N,10,H//4,W//4),\u4f7f\u7528WingLoss\u8ba1\u7b97\u635f\u5931\uff0c\u4f7f\u5f97\u5173\u952e\u70b9\u66f4\u51c6\u786e landmark = self . landmark ( x ) return heat_map , box , landmark return heat_map , box \u6d4b\u8bd5 \u9ad8\u65af\u70ed\u529b\u56fe:\u7531\u4e00\u4e2a 3x3 max pool(stride=1) \u5904\u7406 heat_map \u83b7\u5f97**\u9ad8\u65af\u70ed\u70b9**(\u5373\u6700\u6709\u53ef\u80fd\u4e3a\u76ee\u6807\u7684\u4e2d\u5fc3\u5750\u6807)\uff0c\u53d6 top1000 \u8fdb\u884c\u540e\u5904\u7406\u3002\u7136\u540e\u4f7f\u7528 thresh=0.3 \u6765\u8fc7\u6ee4\u6389\u9ad8\u65af\u5206\u503c\u8f83\u4f4e\u7684\u70b9\uff0c\u627e\u5230\u9ad8\u65af\u5206\u503c\u8f83\u9ad8\u7684\u4e2d\u5fc3\u70b9\u5750\u6807( cx,cy )\u5373\u53ef \u4eba\u8138\u6846\u8f93\u51fa\u503c\uff0c\u6839\u636e\u9ad8\u5206\u7684\u9ad8\u65af\u70ed\u70b9\u4e2d\u5fc3\u70b9\u8ba1\u7b97\u5b9e\u9645\u4eba\u8138\u5750\u6807\u6846\uff0c\u7136\u540e\u4f7f\u7528 nms \u5904\u7406\u5373\u53ef( iou_thresh=0.3 )\uff0c\u7f51\u7edc\u8f93\u51fa\u7684\u5c31\u662f\u5b9e\u9645\u504f\u5dee\u503c\u3002 \u5982\u679c\u6709 landmark \uff0c\u548c\u4eba\u8138\u5750\u6807\u6846\u76f8\u4f3c\uff0c\u76f4\u63a5\u7528 (cx,cy)+=xxx \u6765\u83b7\u53d6\u5b9e\u9645\u5750\u6807\u503c\u5373\u53ef\uff0c\u7f51\u7edc\u8f93\u51fa\u7684\u5c31\u662f\u5b9e\u9645\u504f\u5dee\u503c\u3002 \u7f3a\u70b9 \uff1a\u4e24\u4e2a\u7269\u4f53\u5728GT\u4e2d\u7684\u4e2d\u5fc3\u70b9\u91cd\u53e0\u4e86\uff0c\u5c31\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7269\u4f53\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u4f46\u5bf9\u4e8e\u95f8\u673a/\u95e8\u7981/\u95e8\u9501\u7b49\u66f4\u52a0\u5173\u6ce8\u5355\u4eba\u4eba\u8138\uff0c\u5982\u679c\u6392\u961f\u4eba\u80cc\u540e\u6709\u90e8\u5206\u4eba\u8138\u68c0\u6d4b\u4e0d\u5230\u624d\u662f\u6700\u597d\u7684\u3002 BN\u5c42\u878d\u5408 \u00b6 DBFace\u5728\u4f7f\u7528\u91cf\u5316\u5de5\u5177\u91cf\u5316\u65f6\u4f1a\u8fdb\u884cBN+Conv\u7684\u878d\u5408\uff0c\u878d\u5408\u516c\u5f0f\u5982\u4e0b RepVGG(Binary\u65e0\u6cd5\u4f7f\u7528) \u00b6 \u4f7f\u7528\u7f51\u7edc Binary_Resnet18_0.25(channel/4,\u7ed3\u5c3efc),\u5f88\u591a\u5730\u65b9\u6709 3x3 \u5377\u79ef\uff0c\u53ef\u7528 repVGG \u2461\u589e\u5f3a,\u7279\u5f81\u56fe\u7f29\u5c0f2\u500d\u53ef\u7528 repVGG \u2460\u589e\u5f3a \uff1b\u4eba\u8138\u6846\u6269\u5145\u957f\u8fb9\u7684 1.2 \u500d\u4e14\u77ed\u8fb9\u8865\u9f50\u9047\u5230\u8fb9\u7f18\u505c\u6b62\uff0c\u5207\u56fe\u82e5\u4e0d\u662f\u6b63\u65b9\u5f62\u77ed\u8fb9\u5bf9\u79f0\u8865 127 \u5230\u6b63\u65b9\u5f62\u72b6---> resize=(128,128)--center crop-->(112,112) \u5728\u8bad\u7ec3\u65f6\u5019\u4f7f\u7528 B \u7ed3\u6784( \u8fd9\u79cd\u7ed3\u6784\u6709\u4e2a\u5f0a\u7aef:\u7ecf\u8fc7\u5377\u79ef\u540e\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e0d\u80fd\u53d8\u5316,\u6240\u4ee5\u53ef\u4ee5\u7528\u5728\u4e0d\u6539\u53d8\u7279\u5f81\u56fe\u5927\u5c0f\u7684\u5377\u79ef\u4e0a )\uff0c\u5728\u63a8\u7406\u65f6\u628a\u6bcf\u5c42\u7684 3x3+1x1+x \u8fdb\u884c\u878d\u5408\uff0c\u7136\u540e\u518d\u8fdb\u884c\u63a8\u7406 3x3\u5377\u79ef+1x1\u5377\u79ef+Identity\u878d\u5408 :\u628a 1x1,Identity \u90fd\u53d8\u4e3a 3x3 \u5377\u79ef\u540e\u548c 3x3 \u5377\u79ef\u7684\u6743\u91cd\u76f8\u52a0\u8fdb\u884c\u878d\u5408\u5373\u53ef 3x3\u5377\u79ef p=1,s=1 \u8fd9\u6837\u7279\u5f81\u56fe\u5927\u5c0f\u662f\u6ca1\u53d8\u7684\uff0c 1x1\u5377\u79ef p=0,s=1 \u7279\u5f81\u56fe\u5927\u5c0f\u4e5f\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u53ea\u9700\u8981\u628a 1x1\u5377\u79efpadding\u4e00\u57080\u53d8\u62103x3\u5377\u79ef\u6838 \uff0c\u7136\u540e return W_3x3+W_1x1_pad_3x3 \u5373\u53ef x->Identity->x \uff0c\u5982\u4f55\u53d8\u4e3a 3x3 \u5377\u79ef\u5462?\u5982\u679c\u662f\u6df1\u5ea6\u53ef\u5206\u79bb\u7684 1x1 \u5377\u79ef\uff0c\u6bcf\u4e2a\u901a\u9053\u7684\u503c\u90fd\u4e3a 1 \uff0c\u8fd9\u6837\u5c31\u80fd\u5b8c\u6210 Identity \u6548\u679c,( Depthwise\u5377\u79ef \u4e0d\u80fd\u878d\u5408\u666e\u901a\u5377\u79ef\uff0c\u5c31\u628a Depthwise\u5377\u79ef \u6539\u4e3a\u666e\u901a\u5377\u79ef\u5373\u53ef:\u7b2c\u4e00\u4e2a\u5377\u79ef\u6838\u7b2c\u4e00\u901a\u9053\u4e3a 1 \uff0c\u5176\u4ed6\u901a\u9053\u4e3a 0 );\u628a 1x1\u5377\u79efpadding\u4e00\u57080\u53d8\u62103x3\u5377\u79ef\u6838 \u7136\u540e\u518d\u548c\u524d\u4e24\u8005 kernel \u6743\u91cd\u76f8\u52a0\u5c31\u53ef\u4ee5\u4e86 \u8865\u5145:\u5377\u79ef\u8fc7\u7a0b \u5377\u79ef\u8ba1\u7b97\u516c\u5f0f: w = (w + 2p -fw)/s + 1 Rotate-andRender\u4eba\u8138\u65cb\u8f6c\u589e\u5f3a \u00b6 \u901a\u7528\u7684\u4eba\u8138\u65cb\u8f6c\u4e00\u822c\u662f\u57fa\u4e8e\u540c\u4e00\u4eba\u8138\u7684\u591a\u89c6\u89d2\u6570\u636e\u8bad\u7ec3\u76f4\u63a5\u751f\u6210\u65b0\u89c6\u89d2\uff0c\u4f46\u5bf9\u56fe\u50cf\u8d28\u91cf\u8981\u6c42\u9ad8(\u53d7\u5230\u56fe\u7247\u8d28\u91cf\u4ee5\u53ca\u6570\u636e\u5206\u5e03\u7684\u9650\u5236)\uff1b \u8fd9\u4e2a\u4f7f\u7528\u65e0\u76d1\u7763\u8bad\u7ec3:\u6446\u8131\u591a\u89c6\u89d2\u6570\u636e\uff0c\u4ec5\u4ec5\u9700\u8981\u5355\u5f20\u56fe\u7247\uff0c\u5229\u7528\u4e09\u7ef4\u4eba\u8138\u5efa\u6a21\uff0c\u901a\u8fc7\u53cd\u590d\u7684\u65cb\u8f6c\u548c\u6e32\u67d3\u64cd\u4f5c\u6784\u5efa\u81ea\u76d1\u7763(\u6e32\u67d3\u4ece\u4efb\u610f\u89d2\u5ea6\u65cb\u8f6c\u5230\u5f53\u524d\u89d2\u5ea6\u7684\u5e26\u906e\u6321\u4f2a\u5f71\u548c\u7455\u75b5\u7684\u4eba\u8138\uff0c\u4ece\u800c\u548c\u539f\u56fe\u6784\u5efa\u8bad\u7ec3\u6570\u636e\u5bf9)\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u666e\u901a\u7684 pix2pix \u751f\u6210\u6700\u7ec8\u56fe\u50cf \u3002\u6ce8:\u4e09\u7ef4\u7a7a\u95f4\u5230\u4e8c\u7ef4\u56fe\u50cf\u7684\u989d\u6e32\u67d3\u662f\u7eb9\u7406\u6ce8\u518c\u7684\u9006\u5411\u8fc7\u7a0b Gan\u7f51\u7edc\u7684\u751f\u6210 : CycleGAN \u7684 ResBlock \u751f\u6210\u5668\uff0c\u4f7f\u7528 pix2PixHD \u7684 loss \u6765\u8bad\u7ec3\u9274\u522b\u5668\u3002 \u6574\u4f53\u7f51\u7edc\u7ed3\u6784( \u89d2\u5ea6[yaw,pitch]->[-90,90] )\u3002 ROC\u66f2\u7ebf \u00b6 \u6b63\u7c7b\u548c\u8d1f\u7c7b:\u5047\u8bbe\u9608\u503c\u4e3a 0.6 ,\u5f97\u5206\u5927\u4e8e\u7b49\u4e8e 0.6 \u7684\u4e3a\u6b63\u7c7b\uff0c\u5c0f\u4e8e 0.6 \u7684\u4e3a\u8d1f\u7c7b ROC \u66f2\u7ebf\u7684\u6a2a\u7eb5\u5750\u6807 \u7eb5\u5750\u6807 \u771f\u9633\u7387-TPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u6b63\u5360\u6240\u6709\u6b63\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=1/all(gt=1) \u6a2a\u5750\u6807 \u5047\u9633\u7387-FPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u8d1f\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=0/all(gt=0) \u771f\u9634\u7387-TNR=1-FPR :\u9884\u6d4b\u4e3a\u8d1f\u5b9e\u9645\u4e3a\u8d1f\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=0,gt=0/all(gt=0) \u6bcf\u4e2a\u9608\u503c\u4ee3\u8868\u4e00\u5bf9 (FPR,TPR) ,\u9608\u503c\u65e0\u7a77\u5927\u65f6\u9884\u6d4b\u65e0\u6b63\u4f8b FPR=TPR=0 \uff0c\u9608\u503c\u4e3a 0 \u65f6\u9884\u6d4b\u65e0\u8d1f\u4f8b FPR=TPR=1 ,\u4e00\u822c\u968f\u7740\u9608\u503c\u9010\u6e10\u589e\u5927\uff0c\u6b63\u4f8b\u8d8a\u6765\u8d8a\u5c11\uff0c\u6a2a\u5750\u6807\u51cf\u5c11\u7684\u66f4\u5feb \u5982\u4f55\u753b roc \u66f2\u7ebf\uff0c\u4e00\u822c\u9009\u53d6 range(0.1,1,0.001) \u5171\u8ba1 90 \u7ec4\u9608\u503c\uff0c\u8ba1\u7b97 AUC:(Area under Curve) \uff0c\u662f\u4e2a\u6982\u7387\u503c [0,1] ,\u8d8a\u5927\u5206\u7c7b\u6548\u679c\u8d8a\u597d\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528 ROC\u66f2\u7ebf \u800c\u4e0d\u4f7f\u7528 PR \u66f2\u7ebf\uff1f\u539f\u56e0: \u5f53\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6b63\u8d1f\u6837\u672c\u7684\u5206\u5e03\u53d8\u6362\u7684\u65f6\u5019(\u4f8b\u5982\u8d1f\u6837\u672c\u6570\u91cf\u589e\u592710\u500d)\uff0cROC\u66f2\u7ebf\u80fd\u591f\u4fdd\u6301\u4e0d\u53d8,\u4f46\u662fPR\u66f2\u7ebf\u5de8\u53d8 \u4eba\u8138\u5173\u952e\u70b9\u548c\u5934\u90e8\u59ff\u6001 \u00b6 backbone\uff1aMobileNetV1-0.5(avgpool+conv1x1 \u4ee3\u66fffc,fc\u6548\u679c\u7a0d\u5fae\u597d\u70b9\u4f46\u901f\u5ea6\u6162),0.5\u6307\u7684\u662f\u901a\u9053\u63a7\u5236\u7cfb\u6570\uff0c\u6700\u540e\u4e00\u5c42\u4f7f\u7528 1x1 \u5377\u79ef\u4ee3\u66ff fc \uff0c\u56e0\u4e3a\u4e0a\u5c42\u662f\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff0c10(\u5173\u952e\u70b9)+4(\u56db\u5143\u6570)\u4e2a\u503c\u7684\u56de\u5f52\uff0c\u4eba\u8138\u68c0\u6d4b 1.5 \u500d\u7684\u6269\u6846-\u9047\u5230\u8fb9\u7f18\u505c\u6b62-\u5207\u56fe-\u5bf9\u79f0\u88650\u5230\u6b63\u65b9\u5f62- rezie=(120,120) \u641e\u5b9a \u4f7f\u7528\u7684\u6570\u636e\u96c6 :\u89d2\u5ea6\u662f\u5f27\u5ea6\u5236,\u6b27\u62c9\u89d2\u90fd\u9650\u5b9a\u5728 [-100\u5ea6,100\u5ea6] \uff0c\u8f6c\u4e3a\u5f27\u5ea6\u8303\u56f4\u662f [-1.75,1.75] ,\u7531\u4e8e**\u6b27\u62c9\u89d2\u548c\u56db\u5143\u6570(\u8868\u793a\u5728\u4e00\u4e2a\u56db\u7ef4\u7a7a\u95f4\u7684\u8f68\u8ff9\u548c\u65b9\u5411\uff0c\u8303\u56f4[-1,1])\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff0c\u76f4\u63a5\u56de\u5f52\u56db\u5143\u6570\u6548\u679c\u66f4\u597d** 300W-LP(large pose) :\u7531 300W(AFW,LFPW,HELEN,IBUG,XM2VTS\u7b49\u5408\u96c6) \u6570\u636e\u505a\u7684\u5927\u578b\u4eba\u8138\u59ff\u6001\u9884\u6d4b\u7684\u4e00\u4e2a\u7efc\u5408\u6570\u636e\u5e93\uff0c\u91cc\u9762\u5305\u542b 28 \u4e2a 2d \u5173\u952e\u70b9\u548c\u5934\u90e8\u59ff\u6001\u4fe1\u606f [pitch,yaw,roll] \uff0c\u5171\u8ba1 61225 \u5f20\u3002 AFLW2000 :\u7531 AFLW \u6570\u636e\u5e93\u7684\u524d 2000 \u5f20\u56fe\u7247\u53ca\u5176\u4e09\u7ef4\u4fe1\u606f\u7ec4\u6210\uff0c\u91cc\u9762\u5305\u542b 21 \u4e2a 2d \u5173\u952e\u70b9\u548c\u5934\u90e8\u59ff\u6001\u4fe1\u606f [pitch,yaw,roll] \uff0c\u5171\u8ba1 2000 \u5f20\u3002 # xxxx.jpg xxxx.mat # mat\u6587\u4ef6\u5177\u4f53\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a 1 \uff09 pt2d \uff1a 21 \u4e2a\u4e8c\u7ef4\u70b9 2 \uff09 Illum_Para \uff1a 1 \u00d7 10 \u5149\u7167\u53c2\u6570 3 \uff09 Color_Para \uff1a 1 \u00d7 7 \u989c\u8272\u53c2\u6570 4 \uff09 Tex_Para \uff1a 199 \u00d7 1 \u7eb9\u7406\u53c2\u6570 5 \uff09 Shape Para \uff1a 199 \u00d7 1 \u5f62\u72b6\u53c2\u6570 6 \uff09 Exp_Para \uff1a 29 \u00d7 1 \u8868\u60c5\u53c2\u6570 7 \uff09 Pose \uff1a 1 \u00d7 7 \u59ff\u6001\u53c2\u6570 \uff0c \u5206\u522b\u4e3a \uff1a pitch \uff0c yaw \uff0c roll \uff0c translation ( dx \uff0c dy \uff0c dz ) \uff0c scale 8 \uff09 pt3d_68 \uff1a 3 \u00d7 68 \u4e09\u7ef4\u7279\u5f81\u70b9 import scipy.io as sio mat_dict = sio . loadmat ( mat_path ) mat_dict [ 'pt2d' ] # \u83b7\u5f97\u7684\u662f\u539f\u56fe\u768421\u4e2a\u5173\u952e\u70b9 mat_dict [ 'Pose' ][ 0 ,: 3 ] # \u83b7\u53d6pitch,yaw,roll \u4e09\u4e2a\u6b27\u62c9\u89d2\uff0c\u539f\u59cb\u662f\u5f27\u5ea6\u503c Wing Loss \u4e00\u822c\u800c\u8a00\u4eba\u8138\u5173\u952e\u70b9 loss \u5c1d\u5c1d\u662f l2 loss \u6216\u8005 smooth l2 loss ,\u4f46\u662f\u5c1d\u5c1d\u56e0\u4e3a**\u4eba\u8138\u59ff\u6001\u89d2\u5ea6\u591a\u6837**\u800c\u5bfc\u81f4\u7684\u68c0\u6d4b\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u4f7f\u7528 wing loss \u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u79bb\u7fa4\u70b9( large error )\u95ee\u9898\u548c small error \u95ee\u9898\u3002 L2 loss \u6216\u8005 smooth l2 loss \u5728 0 \u9644\u8fd1( small error )\u7684 gradient \u53d8\u5316\u8d8b\u4e8e\u5e73\u7f13\u7684\uff0c\u66f4\u4e0d\u5bb9\u6613\u4f18\u5316\uff1b\u800c\u4e14 L2 loss \u5f88\u5bb9\u6613\u53d7\u79bb\u7fa4\u70b9( large error )\u5f71\u54cd wing loss \u5206\u6bb5\u51fd\u6570\uff0c\u5f53\u4e24\u70b9\u8ddd\u79bb\u8fc7\u8fdc\u65f6\uff0c\u4e3a\u4e86\u907f\u514d loss \u8fc7\u5927( large loss )\u4f7f\u7528 |x| - C \u6765\u9650\u5b9a loss \u4e0d\u8981\u8fc7\u5927\uff1b\u5f53 |x|<w \u65f6\uff0c small error \u65f6\u4f7f gradient \u53d8\u5316\u9661\u5ced\uff0c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u3002 wing :\u7fc5\u8180\uff0c\u8bba\u6587\u4e2d\u6ca1\u6709\u89e3\u91ca\u547d\u540d\u4e3a\u6b64\u7684\u542b\u4e49\uff0c\u4f46\u770b loss \u50cf\u9e1f\u7684\u7fc5\u8180\u4e00\u6837\u3002 \u56de\u5f52\u8bc4\u4ef7\u6307\u6807 \u5e73\u5747\u7edd\u5bf9\u503c\u8bef\u5dee(MAE) \uff0c\u5934\u90e8\u59ff\u6001: 3ddfa_AFLW2000@7.393_best3.83->6.42 \uff1b\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b: 3ddfa_AFLW2000_21pts@8.250_best@4.70->5pts@2.385 \u5747\u65b9\u8bef\u5dee(MSE) \u5747\u65b9\u6839\u8bef\u5dee(RMSE) \u91cf\u5316 \u00b6 fp32\u3001fp16\u3001int8 \u7f16\u7801\u5b58\u50a8\u65b9\u5f0f\u4e0d\u540c \uff1a FP32 \u5360\u7528 4 \u5b57\u8282\u7f16\u7801\uff0c\u5171 32 \u4f4d\uff0c\u5176\u4e2d 1 \u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c 8 \u4e3a\u6307\u6570\u4f4d\uff0c 23 \u4e3a\u5c3e\u6570\u4f4d FP16 \u5360\u7528 2 \u5b57\u8282\u7f16\u7801\uff0c\u5171 16 \u4f4d\uff0c\u5176\u4e2d 1 \u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c 5 \u4e3a\u6307\u6570\u4f4d\uff0c 10 \u4e3a\u5c3e\u6570\u4f4d int8 \uff0c\u516b\u4f4d\u6574\u578b\u5360\u7528 1 \u4e2a\u5b57\u8282\uff0c\u5171 8 \u4f4d \u8bad\u7ec3\u65f6\u4e3a\u4ec0\u4e48\u7528 fp32 \uff1a fp16 \u7684\u503c\u533a\u95f4\u6bd4 fp32 \u7684\u503c\u533a\u95f4\u5c0f\u5f88\u591a\uff0c\u867d\u7136\u8bad\u7ec3\u5f88\u5feb\uff0c\u4f46 fp16 \u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5f88\u5bb9\u6613\u51fa\u73b0**\u6ea2\u51fa\u9519\u8bef:\u4e0a\u6ea2\u51fa(>65504)\u548c\u4e0b\u6ea2\u51fa(<6x10^-8)** TensorRT-int8\u91cf\u5316(\u5bf9\u79f0\u91cf\u5316) \u6a21\u578b\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u9488\u5bf9\u6743\u91cd Weight \u91cf\u5316\uff0c\u4e00\u662f\u9488\u5bf9\u6fc0\u6d3b\u503c Activation \u91cf\u5316\uff0c\u5c06\u6743\u91cd\u548c\u6fc0\u6d3b\u503c\u91cf\u5316\u5230 8bit \u7528\u4e8e\u7b49\u4ef7 32bit \u7684\u6027\u80fd \u4f7f\u7528\u91cf\u5316\u6821\u51c6\u96c6\u8fdb\u884c\u6a21\u578b\u6fc0\u6d3b\u503c\u5206\u5e03\u7684\u7edf\u8ba1 \uff0c\u786e\u5b9a\u6fc0\u6d3b\u5c42\u7684\u91cf\u5316\u53c2\u6570\u7684\u65b9\u5f0f(\u6bcf\u5c42\u90fd\u8981\u7edf\u4e00\u591a\u4e2a\u6837\u672c)\u3002 \u6700\u7b80\u5355\u7684\u91cf\u5316\uff0c\u4e00\u5f20\u5f52\u4e00\u5316\u7684\u56fe\u7247 [0,1]->[0,255] \uff0c\u5176\u5b9e\u5c31\u662f\u7cfb\u6570\u7684\u7f29\u653e\u3002 \u5982\u4f55\u9009\u53d6\u6700\u5408\u9002\u7684scale factor\u503c\uff1f \u6620\u5c04\u53c2\u6570 -|max|->-127,|max|->127 \uff0c\u4e5f\u5c31\u662f\u628a\u53c2\u6570\u7684\u7edd\u5bf9\u503c\u6700\u5927\u503c\u5f53\u505a\u9608\u503c\uff1b\u6709\u4e2a\u95ee\u9898\uff0c\u5f53\u53c2\u6570\u7684\u5206\u5e03\u4e0d\u5747\u5300\u65f6\uff0c\u6709\u4e00\u90e8\u5206\u662f\u7a7a\u7f3a\u7684(\u4f8b\u5982:\u6fc0\u6d3b\u503c\u5168\u4e3a\u6b63)\uff1b\u6240\u4ee5\u5e38**\u9009\u62e9\u5408\u9002\u7684\u9608\u503cT,\u5c06 \u00b1|T| \u6620\u5c04\u4e3a\u00b1127 ,\u8d85\u51fa \u9608\u503c \u00b1|T| \u5916\u7684\u76f4\u63a5\u52a0\u5230\u622a\u65ad\u533a\u5185\u6700\u540e\u4e00\u4e2a\u503c** \u622a\u65ad\u533a( -T~T )\u4e4b\u5916\u7684\u503c\u4e3a\u4ec0\u4e48\u8981\u52a0\u5230\u622a\u65ad\u533a\u5185\u6700\u540e\u4e00\u4e2a\u503c\u5462\uff1f( \u9608\u503c\u8fd8\u662f\u90a3\u4e2a\u9608\u503c\uff0c\u5c31\u662f\u8ba1\u7b97\u7684\u65f6\u5019\u52a0\u5230\u6700\u540e\u4e00\u503c\u4e0a\u5c31\u884c\uff0c\u9608\u503c\u662f\u4e0d\u6539\u53d8\u7684 ) \u4e00\u662f\u6c42 P \u7684\u6982\u7387\u5206\u5e03\u65f6\uff0c\u9700\u8981\u603b\u7684 P \u603b\u503c. \u4e8c\u5c06\u622a\u65ad\u533a\u4e4b\u5916\u7684\u52a0\u5230\u622a\u65adP\u7684\u6700\u540e\uff0c\u8fd9\u6837\u662f\u5c3d\u53ef\u80fd\u5730\u5c06\u622a\u65ad\u540e\u7684\u4fe1\u606f\u7ed9\u52a0\u8fdb\u6765\u3002 \u6700\u4f18\u9608\u503c T \u5982\u4f55\u5bfb\u627e\uff1f \u4fdd\u8bc1\u91cf\u5316\u524d\u540e\u5206\u5e03\u5dee\u5f02\u6700\u5c0f\u5373\u53ef:KL\u6563\u5ea6(\u76f8\u5bf9\u71b5:\u7528\u6765\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02)\uff0c\u6240\u4ee5\u4f7f\u5f97KL\u6563\u5ea6\u6700\u5c0f\u5373\u53ef(\u7528\u6765\u8868\u793aint8,fp32\u503c\u5206\u5e03\u4e4b\u95f4\u7684\u4fe1\u606f\u4e22\u5931\u7a0b\u5ea6) \uff0c\u8fd9\u6837\u5c31\u628a\u95ee\u9898\u8f6c\u4e3a\u6c42 int8 \u6982\u7387\u548c fp32 \u6982\u7387\uff0c\u7136\u540e\u7528 KL\u6563\u5ea6\u4f5c\u4e3a\u6307\u6807 \u9009\u53d6\u6700\u4f18\u9608\u503c |T| \u5373\u53ef\u3002 int8 \u662f\u79bb\u6563\u70b9\uff0c\u4e24\u503c\u4e4b\u95f4\u6700\u5c0f\u503c\u662f 1 \uff0c\u76f4\u63a5\u4f7f\u7528\u76f4\u65b9\u56fe hist \u6765\u7edf\u8ba1\u5404\u4e2a\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u70b9\u51fa\u73b0\u5373\u53ef\u3002\u4f8b\u5982 int8=[1,2,3,4,5] \u5728[1,1,4]\u533a\u95f4\u51fa\u73b01\u6b21\uff0c\u5728[1.4,1.8]\u533a\u95f4\u51fa\u73b00\u6b21,...,\u5728[4.6,5]\u51fa\u73b01\u6b21\uff0c\u533a\u95f4\u8ddd\u79bb\u4e3a0.4 fp32 \uff0c\u4e24\u503c\u4e4b\u95f4\u6700\u5c0f\u503c\u662f\u65e0\u7a77\u5c0f\uff0c\u90a3\u4e48\u5982\u4f55\u9009\u62e9 \u5408\u9002\u7684\u533a\u95f4\u8ddd\u79bb \u5462\uff1f\u7531\u4e8e\u8981\u9009\u62e9\u5408\u9002\u7684\u9608\u503c T \uff0c NVIDAIA \u63a8\u8350\u4f7f\u7528 2048 \u4e2a bins \uff0c\u8fd9\u6837\u533a\u95f4\u8ddd\u79bb= [max(x)-min(x)]/bins \uff0c\u8fd9\u6837\u91c7\u7528\u904d\u5386 128bin-2047bin \u6765\u786e\u5b9a\u5408\u9002\u7684\u9608\u503c T ( bin \u7684\u4e2d\u95f4\u503c\u4f5c\u4e3a\u9608\u503c)\uff0c\u4f7f\u5f97\u901f\u5ea6\u4e0d\u662f\u7279\u522b\u6162\uff0c\u7cbe\u5ea6\u4e5f\u4f1a\u8f83\u9ad8\uff0c \u6ce8\u610f\u5e38\u7528min(abs(x))~max(abs(x))\u5728\u6b64\u533a\u95f4\u5185\u8fdb\u884c2048bins \u3002 \u4e3a\u4ec0\u4e48\u4e0d\u8ba1\u7b97 0bin-127bin \uff1f\u5982\u679c\u6700\u4f73\u9608\u503c T \u5728 [0bin,127bin] \u90a3\u4e48\u8d85\u8fc7 T \u7684\u503c\u5c31\u76f4\u63a5\u622a\u65ad\uff0c\u7136\u540e\u76f4\u63a5\u4e00\u4e00\u6620\u5c04\u5c31\u597d\u4e86\u4f46\u635f\u5931\u4e00\u5b9a\u8fc7\u5927\u3002 \u8fd4\u56de\u4e00\u7cfb\u5217 |T| \u503c\uff0c\u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a |T| \u3002\u521b\u5efa CalibrationTable:[k\u00e6l\u026a'bre\u026a\u0283(\u0259)n]\u6821\u51c6 \uff0c\u7136\u540e\u628a\u8d85\u8fc7\u9608\u503c |T| \u540e\u7684\u76f4\u63a5\u622a\u65ad \u63d2\u503c \u6700\u8fd1\u90bb\u63d2\u503c(\u65b0\u56fe\u5750\u6807\u70b9\u586b\u5145\u9644\u8fd1\u4e34\u8fd1\u70b9),\u5bf9\u5e94\u5750\u6807\u516c\u5f0f(\u539f\u56fe src ,\u65b0\u56fe det ) src_x = det_x/det_w * src_x ; src_y = det_y/det_h * srcy \u53cc\u7ebf\u6027\u63d2\u503c(\u539f\u56fe\u56db\u70b9\u8ba1\u7b97\u65b0\u56fe1\u70b9)\uff0c\u5750\u6807\u70b9\u7684\u5bfb\u627e\u5c31\u6309\u7167\u6700\u8fd1\u90bb\u5373\u53ef\u3002 pytorch\u7684\u94a9\u5b50\u51fd\u6570 # 1.register_forward_hook\uff0c\u83b7\u53d6\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5404\u4e2a\u7f51\u7edc\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u53ef\u5bf9\u8f93\u5165\u548c\u8f93\u51fa\u8fdb\u884c\u4fee\u6539 total_feat_out = [] total_feat_in = [] def hook_fn_forward ( m , input , output ): print ( \"model module:\" , m ) total_feat_out . append ( output ) total_feat_in . append ( input ) for name , module in model . named_children (): module . register_forward_hook ( hook_fn_forward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa # 2.register backward hook,\u83b7\u53d6\u795e\u7ecf\u7f51\u7edc\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u4f5c\u5404\u4e2a\u6a21\u5757\u8f93\u5165\u7aef\u548c\u8f93\u51fa\u7aef\u7684\u68af\u5ea6\u503c total_grad_out = [] total_grad_in = [] def hook_fn_backward ( m , grad_input , grad_output ): print ( \"model module:\" , m ) total_grad_in . append ( grad_input ) total_grad_out . append ( grad_output ) for name , module in model . named_children (): module . register_backward_hook ( hook_fn_backward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u68af\u5ea6\u8f93\u5165\u548c\u8f93\u51fa # 3.pytorch\u81ea\u5b9a\u4e49\u65b0\u5c42 # 3.1 \u7ee7\u627f torch.nn.Module,\u5b9e\u73b0__init__\u548cforward\u51fd\u6570\u5373\u53ef # 3.2 \u7ee7\u627f torch.autograd.Function,\u5b9e\u73b0__init__\u548cforward\u51fd\u6570\u8fd8\u6709backward\uff0c\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u6c42\u5bfc\u89c4\u5219(\u4f8b\u5982\u4e8c\u503c\u5316\u7f51\u7edc\u6709\u4e9b\u4e0d\u53ef\u5bfc\u51fd\u6570)\uff0c\u5c31\u8981\u7528\u7740\u4e2a\u65b9\u6cd5. class BinActive ( torch . autograd . Function ): ''' Binarize the input activations for ***** BNN and XNOR *****. ''' @staticmethod def forward ( ctx , input ): ctx . save_for_backward ( input ) input = input . sign () # \u4f7f\u7528y=x\u51fd\u6570\u62df\u5408\u68af\u5ea6 return input @staticmethod def backward ( ctx , grad_output , ): input , = ctx . saved_tensors grad_input = grad_output . clone () # \u5f00\u5c71\u4e4b\u4f5cBNN\u4e2d\u6fc0\u6d3b\u503c:\u5f53sign\u51fd\u6570\u7684\u8f93\u5165\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u5c06\u68af\u5ea6\u7f6e0\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002 grad_input [ input . ge ( 1 )] = 0 grad_input [ input . le ( - 1 )] = 0 # \u6700\u7ec8\u7684\u68af\u5ea6\u7ed3\u679c\u5c31\u662fsign\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u4f7f\u7528clip(-1,x,1)\u51fd\u6570\u6765\u62df\u5408 return grad_input # 3.1 \u5e94\u7528 class BWNConv2d ( nn . Conv2d ): def __init__ ( self , in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ): super ( BWNConv2d , self ) . __init__ ( in_channels , out_channels , kernel_size , stride , padding , dilation , groups , bias , padding_mode ) nn . init . xavier_uniform_ ( self . weight ) def forward ( self , x ): w = self . weight alpha = torch . mean ( torch . mean ( torch . mean ( abs ( w ), dim = 3 , keepdim = True ), dim = 2 , keepdim = True ), dim = 1 , keepdim = True ) . detach () bw = BinActive () . apply ( w ) # \u76f4\u63a5\u628a\u6743\u91cd\u5f04\u6210[-1,1],\u5f53\u7136torch.nn.Module\u4e5f\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u6c42\u5bfc\u65b9\u5f0f\u5c31\u6309\u7167\u9ed8\u8ba4\u6c42\u5bfc\u65b9\u5f0f\u8d70\u4e86\u3002 bw = bw * alpha output = F . conv2d ( x , bw , self . bias , self . stride , self . padding , self . dilation , self . groups ) return output \u5728\u7ebf\u91cf\u5316(PACT) \u00b6 \u6a21\u578b\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u5bf9\u6743\u91cdWeight\u91cf\u5316\uff0c\u4e00\u662f\u9488\u5bf9\u6fc0\u6d3b\u503cActivation\u91cf\u5316\u3002\u540c\u65f6\u5bf9\u4e24\u90e8\u5206\u8fdb\u884c\u91cf\u5316\uff0c\u624d\u80fd\u83b7\u5f97\u6700\u5927\u7684\u8ba1\u7b97\u6548\u7387\u6536\u76ca\u3002\u6743\u91cd\u53ef\u4ee5\u501f\u52a9\u7f51\u7edc\u6b63\u5219\u5316\u7b49\u624b\u6bb5\uff0c\u8ba9\u6743\u91cd\u5206\u5e03\u5c3d\u91cf\u7d27\u51d1\uff0c\u51cf\u5c11\u79bb\u7fa4\u70b9\u3001\u4e0d\u5747\u5300\u5206\u5e03\u60c5\u51b5\u53d1\u751f\uff0c\u800c\u5bf9\u4e8e\u6fc0\u6d3b\u503c\u8fd8\u7f3a\u4e4f\u6709\u6548\u7684\u624b\u6bb5\uff0c\u800c\u4e14\u79bb\u7ebf\u91cf\u5316\u65f6\uff0c\u65e0\u8bba\u662f\u5bf9\u79f0\u91cf\u5316\u8fd8\u662f\u975e\u5bf9\u79f0\u91cf\u5316\uff0c\u90fd\u4f1a\u53d7\u5230**\u79bb\u7fa4\u70b9\u3001float\u53c2\u6570\u5206\u5e03\u4e0d\u5747\u5300\u7684\u5f71\u54cd**\uff0c\u9020\u6210\u91cf\u5316\u635f\u5931\u589e\u52a0\u3002 PACT:parameterized clipping activation \u8be6\u89e3: \u901a\u8fc7\u5728\u91cf\u5316\u6fc0\u6d3b\u503c\u4e4b\u524d\u53bb\u6389\u4e00\u4e9b\u79bb\u7fa4\u70b9 \uff0c\u5c06\u6a21\u578b\u91cf\u5316\u5e26\u6765\u7684\u7cbe\u5ea6\u635f\u5931\u964d\u5230\u6700\u4f4e\uff0c\u751a\u81f3\u6bd4\u539f\u6a21\u578b\u51c6\u786e\u7387\u66f4\u9ad8\u3002 \u4f5c\u8005\u53d1\u73b0\uff0c\u5728\u91cf\u5316\u65f6\u6fc0\u6d3b\u503c\u7684\u91cf\u5316\u7ed3\u679c\u548c\u5168\u7cbe\u5ea6\u7ed3\u679c\u76f8\u5dee\u8f83\u5927\uff0c\u5206\u6790\u539f\u56e0\u53d1\u73b0\uff1a\u76f8\u8f83\u4e8e weight \u57fa\u672c\u5728 0\u52301 \u8303\u56f4\u5185\uff0c activation \u7684\u503c\u7684\u8303\u56f4\u662f\u65e0\u9650\u5927\u7684\uff0c\u8fd9\u662f RELU \u7684\u7ed3\u679c\uff1b\u6240\u4ee5\u63d0\u51fa**\u622a\u65ad\u5f0fRELU**\u7684\u6fc0\u6d3b\u51fd\u6570\u3002\u8be5\u622a\u65ad\u7684\u4e0a\u754c\uff0c\u5373 \u03b1 \u662f\u53ef\u5b66\u4e60\u7684\u53c2\u6570\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u6bcf\u5c42\u80fd\u591f\u901a\u8fc7\u8bad\u7ec3\u5b66\u4e60\u5230\u4e0d\u4e00\u6837\u7684\u91cf\u5316\u8303\u56f4\uff0c\u6700\u5927\u7a0b\u5ea6\u964d\u4f4e\u91cf\u5316\u5e26\u6765\u7684\u820d\u5165\u8bef\u5dee\uff08\u8fd9\u6837\u4f7f\u5f97\u6a21\u578b\uff0c\u4e0d\u65ad\u88c1\u526a\u6fc0\u6d3b\u503c\u8303\u56f4\uff0c\u4f7f\u5f97\u6fc0\u6d3b\u503c\u5206\u5e03\u6536\u7a84\uff0c\u4ece\u800c\u964d\u4f4e\u91cf\u5316\u6620\u5c04\u635f\u5931\uff09\u3002 \u5176\u5b9e\u5c31\u662f\u7528 PACT \u51fd\u6570\u4ee3\u66ff ReLU \u51fd\u6570\u5373\u53ef\u3002 PaddleSlim \u6539\u8fdb\u7248\u2014\u2014PACT\u91cf\u5316\u5b9e\u73b0:\u4f46\u662f\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5c06\u8981\u8fdb\u884c\u91cf\u5316\u7684\u6fc0\u6d3b\u503c\u4e0d\u4e00\u5b9a\u6765\u81ea ReLU \u6fc0\u6d3b\u51fd\u6570 import paddle class PACT ( paddle . nn . Layer ): def __init__ ( self ): super ( PACT , self ) . __init__ () alpha_attr = paddle . ParamAttr ( name = self . full_name () + \".pact\" , initializer = paddle . nn . initializer . Constant ( value = 20 ), learning_rate = 1000.0 ) self . alpha = self . create_parameter ( shape = [ 1 ], attr = alpha_attr , dtype = 'float32' ) def forward ( self , x ): out_left = paddle . nn . functional . relu ( x - self . alpha ) out_right = paddle . nn . functional . relu ( - self . alpha - x ) x = x - out_left + out_right return x \u4eba\u8138\u68c0\u6d4b-backbone:mobilenetv3\u91cf\u5316\u635f\u5931\u8fc7\u5927 DBFace \u4f7f\u7528\u5728\u7ebf\u91cf\u5316\u7684\u5f62\u5f0f\uff0c\u5377\u79ef\u4f7f\u7528 BWN \u4e8c\u503c\u5316\u91cf\u5316( DorafaNet \u7684\u76ee\u7684\u662f\u628a\u5377\u79ef\u53c2\u6570\u9650\u5b9a\u5728\u9002\u5408 k_bit \u91cf\u5316\u7684 [-1,1] \u4e4b\u95f4\u7684\u6570\uff0c\u548c\u4e8c\u503c\u5316\u53c2\u6570\u7684\u76ee\u6807\u91cd\u53e0\u4e86)\uff0c relu \u6539\u4e3a PACT \u5373\u53ef\uff0c\u8fdb\u884c int8 \u91cf\u5316\u7684\u65f6\u5019\u4e5f\u7b80\u5355(\u7c7b\u4f3c relu6 ): float:conv1->relu6->conv1 ;\u524d\u5411\u7edf\u8ba1\u91cf\u5316\u7cfb\u6570 conv1_int8->s1,conv2_int8->s2 ; conv1_int8*s1=conv1_float--->relu6--->conv2_int8*s2=conv2_float \uff0c\u539f\u7406\u5c31\u662f**\u53cd\u91cf\u5316->relu6->\u91cf\u5316**\uff0c\u5176\u5b9e\u662f\u53ef\u4ee5\u5408\u5e76\u7684 clip(clip(conv1_int8*s1,0,6)/s2,0,255) \uff0c \u6ce8\u610f:\u5377\u79ef\u4e2d\u5e76\u6ca1\u6709 clip \u5c42 \u3002 MobileNetV3 \uff0c\u4f5c\u4e3a MobileNet \u7cfb\u5217\u6a21\u578b\u7684\u96c6\u5927\u6210\u8005,\u7ed3\u5408\u4e86 MobileNet V1 \u7684**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef**+ MobileNetV2 \u7684**\u7ebf\u6027\u74f6\u9888\u7684\u5012\u6b8b\u5dee\u7ed3\u6784**+ SE\u6ce8\u610f\u529b\u6a21\u5757 \uff0c\u4e14\u7ed3\u5408\u91c7\u7528\u795e\u7ecf\u7f51\u7edc\u641c\u7d22\u7684\u65b9\u6cd5\u3002\u4f46\u6b64\u6a21\u578b\u5bf9\u79bb\u7ebf\u91cf\u5316\u6216\u5728\u7ebf\u91cf\u5316\u6781\u4e3a\u654f\u611f\uff0c\u5e26\u6765\u7684\u7cbe\u5ea6\u635f\u5931\u90fd\u5f88\u5927\uff0c\u51e0\u4e4e\u8fbe\u5230\u4e86\u4e0d\u53ef\u7528\u7684\u7a0b\u5ea6\u3002\u4f46\u4f7f\u7528 PACT \u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8be5\u95ee\u9898 MSRCR \u00b6 SSR(Single Scale Retinex) I(x,y) \u4ee3\u8868\u88ab\u89c2\u5bdf\u6216\u7167\u76f8\u673a\u63a5\u6536\u5230\u7684\u56fe\u50cf\u4fe1\u53f7( \u6697\u56fe )\uff1b L(x,y) \u4ee3\u8868\u73af\u5883\u5149\u7684\u7167\u5c04\u5206\u91cf( \u901a\u8fc7\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca/\u5747\u503c\u6a21\u7cca\u5f97\u5230 ) ; R(x,y) \u8868\u793a\u643a\u5e26\u56fe\u50cf\u7ec6\u8282\u4fe1\u606f\u7684\u76ee\u6807\u7269\u4f53\u7684\u53cd\u5c04\u5206\u91cf ( \u589e\u5f3a\u56fe )\u3002 Log[R(x,y)] \u91cf\u5316\u4e3a 0\u5230255 \u8303\u56f4\u7684\u50cf\u7d20\u503c\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u8f93\u51fa R(x,y) = ( Value - Min ) / (Max - Min) * (255-0) MSR(Multi-Scale Retinex) \u8bba\u6587\u4e2d\u8bf4\u4e0a\u9762\u9ad8\u65af\u6a21\u7cca\u65f6\uff0c\u5c3a\u5ea6\u53d6\u503c\u8f83\u5c0f\u65f6\uff0c \u80fd\u591f\u8f83\u597d\u5730\u5b8c\u6210\u52a8\u6001\u8303\u56f4\u7684\u538b\u7f29\uff0c\u6697\u533a\u57df\u7684\u7ec6\u8282\u80fd\u5f97\u5230\u8f83\u597d\u5730\u589e\u5f3a\uff0c\u4f46\u8f93\u51fa\u989c\u8272\u6613\u5931\u771f\uff1b\u53d6\u503c\u8f83\u5927\u65f6\uff0c\u8272\u611f\u4e00\u81f4\u6027\u8f83\u597d\uff0c\u6240\u4ee5\u4e00\u822c\u53d6\u4e09\u4e2a\u5c3a\u5ea6\u6765\u8fdb\u884c\u591a\u5c3a\u5ea6\u3002 \u9700\u8981\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u6bcf\u4e2a\u5c3a\u5ea6\u7684\u9ad8\u65af\u6a21\u7cca\uff0c\u5f97\u5230\u6a21\u7cca\u540e\u7684\u56fe\u50cf Li(x,y) ,\u5176\u4e2d\u5c0f\u6807i\u8868\u793a\u5c3a\u5ea6\u6570. Log[R(x,y)] = Weight(i)* ( Log[Ii(x,y)]-Log[Li(x,y)]); \u5176\u4e2d Weight(i) \u8868\u793a\u6bcf\u4e2a\u5c3a\u5ea6\u5bf9\u5e94\u7684\u6743\u91cd\uff0c\u8981\u6c42\u5404\u5c3a\u5ea6\u6743\u91cd\u4e4b\u548c\u5fc5\u987b\u4e3a 1 \uff0c\u7ecf\u5178\u7684\u53d6\u503c\u4e3a\u7b49\u6743\u91cd\u3002 SSR \u548c MSR \u666e\u904d\u90fd\u5b58\u5728\u7684\u95ee\u9898\uff1a\u5b58\u5728\u660e\u663e\u7684\u504f\u8272\u6548\u679c MSRCR(\u5e26\u8272\u5f69\u6062\u590d\u7684\u591a\u5c3a\u5ea6\u89c6\u7f51\u819c\u589e\u5f3a\u7b97\u6cd5) \u4e3b\u8981\u662f\u5f15\u5165\u4e86\u5747\u503c\u548c\u65b9\u5dee\u7684\u6982\u5ff5\uff0c\u5206\u522b\u8ba1\u7b97\u51fa Log[R(x,y)] \u4e2d R/G/B \u5404\u901a\u9053\u6570\u636e\u7684\u5747\u503c Mean \u548c\u5747\u65b9\u5dee Var \uff08\u6ce8\u610f\u662f\u5747\u65b9\u5dee\uff09 \u5229\u7528\u7c7b\u4f3c\u4e0b\u8ff0\u516c\u5f0f\u8ba1\u7b97\u5404\u901a\u9053\u7684 Min\u548cMax \u503c\uff0c Dynamic=2 \u65f6\u6548\u679c\u8f83\u597d\uff1a Min = Mean - Dynamic * Var; Max = Mean + Dynamic * Var; \u5bf9 Log[R(x,y)] \u7684\u6bcf\u4e00\u4e2a\u503c Value \uff0c\u8fdb\u884c\u7ebf\u6027\u6620\u5c04: R(x,y) = ( Value - Min ) / (Max - Min) * (255-0) \uff0c\u6ce8\u610f\u6ea2\u51fa\u65f6\u8981\u622a\u65ad\u3002 mmdetection \u00b6 \u652f\u6301 Rcnn\u7cfb\u5217\u3001SSD\u7cfb\u5217\u3001YOLOV3/YOLACT/YOLOF\u3001AnchorFree\u7cfb\u5217\u3001transform\u7cfb\u5217 ,\u652f\u6301\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u3001\u5404\u79cd\u5e38\u89c1\u7684 backbone \u3001\u5404\u79cd\u5e38\u89c1\u7ec4\u4ef6 loss:IOU\u7cfb\u5217\u3001\u591a\u79cdBN \u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7684\u8bad\u7ec3\u3001\u6d4b\u8bd5 # 1.\u5c06\u6570\u636e\u96c6\u505a\u6210voc/coco\u7b49\u683c\u5f0f(\u5185\u542b\u6709\u8986\u76d6\u4ee3\u7801to_coco/_voc.py)\uff0c\u6309\u7167\u5176\u8981\u6c42\u653e\u7f6e\u5373\u53ef\uff1b\u6216\u8005\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\uff0c\u653e\u5728mmdet/datasets/my_dataset.py,\u7136\u540e\u518dcfg\u6587\u4ef6\u4e2dtype='MyDataset',ann_file=/path/ \u8fdb\u884c\u6307\u5b9a\u5373\u53ef @DATASETS . register_module () # \u73b0\u5728DATASETS\u4e2d\u8fdb\u884c\u6ce8\u518c MyDataset ( CustomDataset ): # \u5b9e\u73b0 \u4e24\u4e2a\u65b9\u6cd5,load_annotations+get_ann_info # 2.\u9009\u62e9\u5408\u9002\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e(py\u914d\u7f6e:\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\u3001loss\u51fd\u6570\uff0c\u4f18\u5316\u5668\u7b49;\u6570\u636e\u7c7b\u522b(\u540d\u79f0\u3001\u6570\u76ee)\u3001\u6570\u636etype(coco/voc)\u3001\u6570\u636e\u8def\u5f84\u3001\u9884\u8bad\u7ec3\u6743\u91cd\u7b49) # 3.\u8bad\u7ec3\u53ef\u4ee5\u5355/\u591agpu\uff0c\u9ed8\u8ba4\u6bcf\u4e2aepoch\u90fd\u9a8c\u8bc1\u4e00\u6b21(map),\u53ef\u4ee5\u5728cfg\u91cc\u8bbe\u7f6e(\u4f8b:\u6bcf\u96945\u4e2aepoch\u9a8c\u8bc1) # 4.\u6d4b\u8bd5,mmdet\u6709\u9ad8\u5c42API\u8c03\u7528\uff0c\u53ea\u9700\u8981\u52a0\u8f7dcfg+.pth\uff0c\u7136\u540e\u6267\u884c\u524d\u5411\u63a8\u7406\u5e76\u663e\u793a\u7ed3\u679c\uff0c\u53ea\u9700\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\uff1b\u5f53\u7136\u4e5f\u652f\u6301\u5f02\u6b65\u63a8\u7406.\u5982\u679c\u8981\u5728\u6807\u51c6\u6570\u636e\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5(coco/voc)\uff0c\u4e5f\u63d0\u4f9b\u4e86\u6d4b\u8bd5\u4ee3\u7801(single image:\u9ed8\u8ba4 or batched images\uff0c\u5355/\u591agpu\u6d4b\u8bd5)\uff0c\u53ea\u9700\u8981\u4fee\u6539\u53c2\u6570\u5373\u53ef\u3002 \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u91cd\u8981\u9009\u9879 # 1.model:type='faster_rcnn'/'mask_rcnn' # \u9009\u62e9\u5408\u9002\u7684\u68c0\u6d4b\u5668 # 2.backbone:'resnet-50/resnetxt-101' # \u9009\u62e9\u7f51\u7edc\u7ed3\u6784 # 3.neck:`fpn/pafpn/nasfpn/c4` # \u9009\u62e9\u5408\u9002\u7684neck # 4.norm_setting:`bn/gn/syncbn/` # \u9009\u62e9\u5408\u9002\u7684bn # 5.misc:`dconv/attention` # \u4e3a\u6a21\u578b\u9009\u62e9\u5176\u4ed6\u63d2\u4ef6 # 6.loss_cls/loss_bbox:`CrossEntropyLoss\u3001FocalLoss `/`IoU Losses\u3001L1 losses` # dataset_cfg \u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e # 1.\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\uff0c\u653e\u5728mmdet/datasets/my_dataset.py,\u7136\u540e\u518dcfg\u6587\u4ef6\u4e2dtype='MyDataset',ann_file=/path/ \u8fdb\u884c\u6307\u5b9a\u5373\u53ef from .builder import DATASETS from .custom import CustomDataset @DATASETS . register_module () # \u73b0\u5728DATASETS\u4e2d\u8fdb\u884c\u6ce8\u518c MyDataset ( CustomDataset ): # \u5b9e\u73b0 \u4e24\u4e2a\u65b9\u6cd5,load_annotations+get_ann_info # 2.\u81ea\u5b9a\u4e49\u6a21\u578b\u7c7b\uff1a # 2.1 \u66f4\u6362backbone: mmdet/models/backbones/mobilenet.py # \u81ea\u5b9a\u4e49\u6a21\u578b\u7ed3\u6784 from ..builder import BACKBONES @BACKBONES . register_module () # \u6ce8\u518c class MobileNet ( nn . Module ): # \u5728mmdet/models/backbones/__init__.py\u4e2d\u5bfc\u5165 from .mobilenet import MobileNet # 2.1.1 cfg\u4f7f\u7528 model = dict ( ... backbone = dict ( type = 'MobileNet' , arg1 = xxx , arg2 = xxx ), ... # 2.2 \u66f4\u6362neck: mmdet/models/necks/pafpn.py # \u81ea\u5b9a\u4e49neck from ..builder import NECKS @NECKS . register_module () # \u6ce8\u518c class PAFPN ( nn . Module ): #\u81ea\u5b9a\u4e49neck\u7c7b\uff0ccfg\u4e2dtype='\u7c7b\u540d'\u5373\u53ef # \u5728mmdet/models/necks/__init__.py\u5bfc\u5165 from .pafpn import PAFPN # 2.2.1 cfg\u4e2d\u4f7f\u7528 neck = dict ( type = 'PAFPN' , in_channels = [ 256 , 512 , 1024 , 2048 ], out_channels = 256 , num_outs = 5 ) .... # 3.\u81ea\u5b9a\u4e49loss mmdet/models/losses/xxx_loss.py from ..builder import LOSSES @LOSSES . register_module () # \u6ce8\u518c class FocalLoss ( nn . Module ): # \u81ea\u5b9a\u4e49loss\u7c7b\uff0ccfg\u4e2dtype='\u7c7b\u540d'\u5373\u53ef def __init__ ( self , use_sigmoid = True , gamma = 2.0 , alpha = 0.25 , reduction = 'mean' , loss_weight = 1.0 ): # \u5728mmdet/models/losses/__init__.py\u5bfc\u5165 from .focal_loss import FocalLoss # 3.1 \u5728cfg\u4e2d\u4f7f\u7528 loss_cls = dict ( type = 'FocalLoss' , use_sigmoid = True , gamma = 2.0 , alpha = 0.25 , loss_weight = 1.0 ) \u5176\u4ed6\u5de5\u5177 log \u5206\u6790:\u753b\u51fa loss_cls\u3001loss_bbox \u7684 loss/mAP \u56fe\uff0c tools/analysis_tools/analyze_logs.py \u7ed3\u679c\u5206\u6790:\u5b58\u50a8\u9ad8\u5f97\u5206 topk(50) \u6216\u8005\u4f4e\u7684\u5206 score-thr<0.3 \u7684\u56fe\u7247\u5230 result \u8fdb\u884c\u5206\u6790 detectorn2 \u00b6 \u8be5\u6846\u67b6\u76ee\u524d\u5185\u7f6e\u7684\u6a21\u578b\u591a\u662f**\u53cc\u9636\u6bb5\u68c0\u6d4b\u5668**( Faster-Rcnn,,RetinaNet(ssd+focalLoss) ) \u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u8bad\u7ec3 # 1.\u51c6\u5907\u6570\u636e\u96c6\uff0c\u8f6c\u4e3acoco\u683c\u5f0f\u540e\u6309\u7167dataset/readme.md\u8981\u6c42\u6446\u597d\u6570\u636e\uff0c\u7136\u540e\u518ddetectron.data.datasets\u91cc\u6309\u683c\u5f0f\u8fdb\u884c\u6ce8\u518c\u6570\u636e\u96c6\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u51fd\u6570\u6765\u5904\u7406\uff0c\u9ebb\u70e6\u3002 # 2.\u6309\u7167\u8981\u6c42\u5199\u8bad\u7ec3cfg\uff0c\u5f88\u91cd\u8981:\u591a\u5c3a\u5ea6\u8bad\u7ec3\u5c3a\u5bf8\uff0c\u7c7b\u522b\uff0c\u8bbe\u7f6e\u8fed\u4ee3\u6b21\u6570\u3001\u5b66\u4e60\u7387\u8870\u51cf\u7b49\u3002 # 3.\u76f4\u63a5\u4f7f\u7528tool/train_net.py\u8bad\u7ec3\u5373\u53ef\uff0c\u91cc\u9762\u662f\u4f7f\u7528detectron2.engine.DefaultTrainer(cfg).train()\u8fdb\u884c\u8bad\u7ec3\u5373\u53ef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528tensorboard\u5f00\u542f\u53ef\u89c6\u5316 # 4.\u4f7f\u7528detectron2.evaluation.COCOEvaluator \u8bc4\u6d4b\u6570\u636e\u96c6\u7684map\u5373\u53ef(\u542b\u6709tta\u6d4b\u8bd5) \u6570\u636e\u589e\u5f3a from detectron2.data import transforms as T input = T . AugInput ( image , boxes = boxes , sem_seg = sem_seg ) # # \u5b9a\u4e49\u6570\u636e\u589e\u5f3a\u7684\u8f93\u5165\uff08\u5fc5\u987b\u8f93\u5165\u56fe\u7247\uff0c\u5176\u5b83\u8f93\u5165\u53ef\u9009\uff09\u3002 transform = T . AugmentationList ([ T . RandomBrightness ( 0.9 , 1.1 ), T . RandomFlip ( prob = 0.5 ), T . RandomCrop ( \"absolute\" , ( 640 , 640 )) ])( input ) # 2.\u7ee7\u627fT.Augmentation\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u589e\u5f3a class MyColorAugmentation ( T . Augmentation ): def get_transform ( self , image ): r = np . random . rand ( 2 ) return T . ColorTransform ( lambda x : x * r [ 0 ] + r [ 1 ] * 10 ) \u5199\u81ea\u5df1\u7684\u6a21\u578b:\u66f4\u6362 backbone \u6216\u8005 box head \uff0c\u4f7f\u7528\u5176\u6ce8\u518c\u673a\u5236\uff0c\u6ce8\u518c\u540e\u76f4\u63a5\u5728 config \u8c03\u7528\u5373\u53ef # 1. \u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684BackBone from detectron2.modeling import BACKBONE_REGISTRY , Backbone , ShapeSpec @BACKBONE_REGISTRY . register () class ToyBackbone ( Backbone ): def __init__ ( self , cfg , input_shape ): super () . __init__ () # \u521b\u5efa\u4f60\u81ea\u5df1\u7684 backbone: self . conv1 = nn . Conv2d ( ... ) def forward ( self , image ): return { \"conv1\" : self . conv1 ( image )} def output_shape ( self ): return { \"conv1\" : ShapeSpec ( channels = 64 , stride = 16 )} # 2.config\u914d\u7f6e cfg = ... # \u8bfb\u53d6 config cfg . MODEL . BACKBONE . NAME = 'ToyBackbone' # \u6216\u8005\u4f60\u53ef\u4ee5\u5728 config file \u4e2d\u66f4\u6539 model = build_model ( cfg ) \u63a8\u7406 # 1.\u52a0\u8f7d\u63a8\u7406\u914d\u7f6e\u6587\u4ef6\uff0c\u91cc\u9762\u4e3b\u8981\u6709\u6a21\u578b\u8def\u5f84\uff0c\u6d4b\u8bd5\u96c6\u8def\u5f84\uff0c\u6d4b\u8bd5\u7684\u6307\u6807\uff0c\u6d4b\u8bd5\u56fe\u7247size\u7b49\uff0c\u5c06\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u5230 DefaultPredictor\u5bf9\u8c61\u91cc \u5e76 \u8fdb\u884c\u63a8\u7406 predictor = DefaultPredictor ( cfg ) outputs = predictor ( im ) # 2.\u4f7f\u7528Visualizer\u7c7b\u6765\u53ef\u89c6\u5316\u8f93\u51fa\u7ed3\u679c v = Visualizer ( im [:,:,:: - 1 ], MetadataCatalog . get ( cfg . DATASETS . TRAIN [ 0 ]), scale = 1.2 ) out = v . draw_instance_predictions ( outputs [ 'instances' ] . to ( 'cpu' )) cv2_imshow ( out . get_image ()[:,:,:: - 1 ])","title":"\u9762\u8bd5\u6307\u5317"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#retinaface","text":"\u672c\u8eab\u5c31\u662f RetinaNet \u7684\u6539\u8fdb\u7248\u672c\uff0c resnet50-cabm\u76843\u4e2a\u7279\u5f81\u56fe-->FPN(\u591a\u5c3a\u5ea6\u7279\u5f81\u878d\u5408:3\u4e2a\u7279\u5f81\u56fe)->SSH(\u6bcf\u4e2a\u7279\u5f81\u56fe\u90fd\u8981\u8fdb\u884cSSH\u5904\u7406:3\u4e2a\u7279\u5f81\u56fe)-->\u6bcf\u4e2a\u7279\u5f81\u56fe\u90fd\u8981\u901a\u8fc7\u901a\u8fc7\u4e24\u4e2a1x1\u5377\u79ef\u5206\u652f\u6765\u8fdb\u884c\u5206\u7c7b(\u662f\u4e0d\u662f\u7269\u4f53)\u548c\u6846\u56de\u5f52(pre\u6846\u4e0egt\u6846\u7684\u76f8\u5bf9\u7f29\u653e\u91cf\u548c\u4f4d\u79fb\u91cf) \uff0c CBAM \u7684\u8bba\u6587\u4e2d\u8bf4\u5728 resnet50 \u4e2d\u6027\u80fd\u660e\u663e\u63d0\u9ad8\u3002 model \u7ed3\u6784 SSH(\u7c7b\u4f3cRPN\u64cd\u4f5c) \uff1a \u901a\u8fc7\u7b80\u5355\u7684\u53e0\u5c42\u5377\u79ef\u5408\u5e76\u4e0a\u4e0b\u6587\u4fe1\u606f(\u4e00\u822c\u5728two-stage \u7684\u76ee\u6807\u68c0\u6d4b\u6a21\u578b\u5f53\u4e2d\uff0c\u90fd\u662f\u901a\u8fc7\u589e\u5927\u5019\u9009\u6846\u7684\u5c3a\u5bf8\u5927\u5c0f\u4ee5\u5408\u5e76\u5f97\u5230\u66f4\u591a\u7684\u4e0a\u4e0b\u6587\u4fe1\u606f)\uff0c\u901f\u5ea6\u66f4\u5feb\uff0c\u540c\u65f6\u589e\u52a0\u611f\u53d7\u91ce \u56f0\u96be\u6837\u4f8b\u6316\u6398(hard negative mining) \uff1a iou_thresh>0.5 \u662f\u6b63\u8d1f\u6837\u672c\u7684\u9608\u503c\uff0c\u4f46\u662f negative >> positive \uff0c\u7ed3\u679c\u4f1a\u5411\u8d1f\u6837\u672c\u9760\u62e2\u3002\u4fdd\u8bc1\u6b63\uff1a\u8d1f\u5927\u7ea6\u4e3a 1:3 \uff0c\u6b63\u6837\u672c\u56fa\u5b9a\uff0c\u9996\u6b21\u8d1f\u6837\u672c\u968f\u673a\u9009\u53d6\u8bad\u7ec3\u7f51\u7edc\uff0c\uff0c\u518d\u7528\u8bad\u7ec3\u597d\u7684\u7f51\u7edc\u53bb\u9884\u6d4b\u8d1f\u6837\u672c\u96c6\u4e2d\u5269\u4f59\u7684\u8d1f\u6837\u672c\uff0c\u9009\u62e9\u5176\u4e2d\u5f97\u5206\u6700\u9ad8 topk ( hard negative )\u4f5c\u4e3a\u8d1f\u6837\u672c\u96c6\u4e2d\u91cd\u65b0\u8bad\u7ec3\uff0c\u7ed3\u679c\u4f1a\u8d8a\u6765\u8d8a\u597d.","title":"RetinaFace"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#_1","text":"\u597d\u5904:\u7a0d\u5fae\u589e\u52a0\u4e00\u70b9\u8ba1\u7b97\u91cf\u4f46\u6548\u679c\u8f83\u597d\u3002 SE\u6a21\u5757 :\u4e3b\u8981\u5b66\u4e60\u901a\u9053\u4e4b\u95f4\u7684\u76f8\u5173\u6027;\u901a\u8fc7\u5bf9\u5377\u79ef\u7684\u7279\u5f81\u56fe\u8fdb\u884c**\u538b\u7f29**\u548c**\u6269\u5c55**\u5904\u7406\uff0c\u5f97\u5230\u4e00\u4e2a\u548c\u901a\u9053\u6570\u4e00\u6837\u7684\u4e00\u7ef4\u5411\u91cf\u4f5c\u4e3a\u6bcf\u4e2a\u901a\u9053\u7684\u8bc4\u4ef7\u5206\u6570\uff0c\u7136\u540e\u5c06\u8be5\u5206\u6570\u5206\u522b\u65bd\u52a0\u5230\u5bf9\u5e94\u7684\u901a\u9053\u4e0a\uff0c\u5f97\u5230\u5176\u7ed3\u679c\u3002 \u538b\u7f29: CxHxW-->global average pooling-->1x1xC \u8fd9\u4e2a 1x1xC \u7684\u7279\u5f81\u56fe\u53ef\u4ee5\u7406\u89e3\u4e3a\u5168\u5c40\u611f\u53d7\u91ce(\u7ebf\u6027\u7684\uff0c\u5982\u679c\u76f4\u63a5\u4e58\u6ca1\u5565\u610f\u4e49) \u6269\u5c55:\u4f7f\u7528\u4e00\u4e2a\u5168\u8fde\u63a5\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9 Sequeeze \u4e4b\u540e\u7684\u7ed3\u679c\u505a\u4e00\u4e2a**\u975e\u7ebf\u6027\u53d8\u6362**\uff0c\u5f97\u5230\u5404\u901a\u9053\u7684\u8bc4\u4ef7\u5206\u6570\u3002 class SELayer ( nn . Module ): def __init__ ( self , channel , reduction = 16 ): super ( SELayer , self ) . __init__ () self . avgpool = nn . AdaptiveAvgPool2d ( 1 ) self . fc = nn . Sequential ( nn . Linear ( channel , channel // reduction , bias = False ), nn . ReLU ( inplace = True ), nn . Linear ( channel // reduction , channel , bias = False ), nn . Sigmoid () ) def forward ( self , x ): b , c , h , w = x . size () y = self . avgpool ( x ) . view ( b , c ) y = self . fc ( y ) . view ( b , c , 1 , 1 ) return x * y . expand_as ( x ) CBAM :\u96c6\u6210\u4e86\u901a\u9053\u6ce8\u610f\u529b\u6a21\u5757\u548c\u7a7a\u95f4\u6ce8\u610f\u529b\u6a21\u5757\uff0c\u5e38\u5728 ResNet \u4e2d\u7684\u6bcf\u4e2a block \u4e2d\u6dfb\u52a0\u4e86 CBAM \u6a21\u5757\uff0c\u6253\u6bd4\u8d5b\u5e38\u7528\u3002 \u901a\u9053\u6ce8\u610f\u529b\u6a21\u5757\uff0c shared MLP:1x1conv+relu+1x1conv \uff0c\u8fdb\u884c\u7ebf\u6027\u53d8\u6362\uff0c sigmoid \u538b\u7f29\u5f97\u5206\u5230 [0,1] \u7a7a\u95f4\u6ce8\u610f\u529b\u673a\u5236: def forward ( self , x ): avgout = torch . mean ( x , dim = 1 , keepdim = True ) # \u5bf9\u901a\u9053\u7ef4\u5ea6\u6c42\u5e73\u5747 maxout , _ = torch . max ( x , dim = 1 , keepdim = True ) # \u5bf9\u901a\u9053\u7ef4\u5ea6\u6c42\u6700\u5927 x = torch . cat ([ avgout , maxout ], dim = 1 ) # \u5408\u5e76\u5f97\u5230\u901a\u9053\u4e3a2\u7684\u5377\u79ef\u5c42 x = self . sigmoid ( self . conv ( x )) # \u8fdb\u884c\u5377\u79ef\u548csigmoid\uff0c\u5f97\u5230\u901a\u9053\u4e3a1\u7684\u5f97\u5206\u7279\u5f81\u56fe return x \u901a\u9053+\u7a7a\u95f4\u6ce8\u610f\u529b\u673a\u5236","title":"\u6ce8\u610f\u529b\u673a\u5236"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#kmeans","text":"kmeans\u4e0ekmeans++\u805a\u7c7b: \u535a\u5ba2 kemeans\u805a\u7c7b\u51fak\u7c7b\u957f\u5bbd(\u4e0d\u662f\u957f\u5bbd\u6bd4)\u5373\u53ef,\u7531\u4e8e\u6570\u636e\u96c6\u4e2d\u56fe\u7247\u5927\u5c0f\u53ef\u80fd\u4e0d\u540c\uff0c\u9700\u8981\u5148\u5f52\u4e00\u5316box\u7684\u5bbd\u9ad8:\u00b7= w=w_box/w_img,h=h_box/h_img \uff0ckmeans\u805a\u7c7b\u7684\u8861\u91cf\u6307\u6807\u662f d = 1 - IOU (\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u5fc3pre_box\u4e0egt_box\u7684iou\uff0c\u4e14iou\u8d8a\u5927\u8868\u793a\u8ddd\u79bb\u8d8a\u8fd1)\uff0c\u8ba1\u7b97IOU\u65f6\uff0c\u4e0d\u7528\u7ba1box\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u5047\u8bbe\u6240\u6709box\u7684\u5de6\u4e0a\u9876\u70b9\u90fd\u5728\u539f\u70b9 Kmeans (\u7f3a\u70b9:\u5bf9\u79cd\u5b50\u70b9\u7684\u521d\u59cb\u5316\u975e\u5e38\u654f\u611f) \u968f\u673a\u9009\u53d6 K \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u5c06\u6bcf\u4e2a box \u5206\u914d\u7ed9\u4e0e\u5176\u8ddd\u79bb\u6700\u8fd1\u7684 anchor \uff1b \u8ba1\u7b97\u6bcf\u4e2a\u7c07\u4e2d\u6240\u6709 box \u5bbd\u548c\u9ad8\u7684\u5747\u503c\uff0c\u66f4\u65b0 anchor \uff1b \u91cd\u590d2\u30013\u6b65\uff0c\u76f4\u5230anchor\u4e0d\u518d\u53d8\u5316\uff0c\u6216\u8005\u8fbe\u5230\u4e86\u6700\u5927\u8fed\u4ee3\u6b21\u6570 kmeans++ \u968f\u673a\u9009\u53d6 1 \u4e2a box \u4f5c\u4e3a\u521d\u59cb anchor \uff1b \u4f7f\u7528 1 - IOU \u5ea6\u91cf\uff0c\u8ba1\u7b97 box \u4e0e\u6700\u8fd1\u7684\u805a\u7c7b\u4e2d\u5fc3\u7684\u8ddd\u79bbD(x)\uff1b \u9009\u62e9D(x) \u8f83\u5927\u7684\u70b9\u4f5c\u4e3a\u65b0\u589e\u7684\u805a\u7c7b\u4e2d\u5fc3\uff0c\u6ce8\u610f\u4e0d\u8981\u9009\u62e9\u6700\u5927\u503c(\u6392\u5e8f\u6309\u7167\u6982\u7387\u503c\u9009\u62e9)\uff0c\u53ef\u80fd\u662f\u5f02\u5e38\u70b9 \u91cd\u590d2~3\uff0c\u76f4\u5230k\u4e2a\u805a\u7c7b\u4e2d\u5fc3\u88ab\u9009\u51fa\u6765 \u5229\u7528\u8fd9 k \u4e2a\u521d\u59cb\u7684\u805a\u7c7b\u4e2d\u5fc3\u6765\u8fd0\u884c\u6807\u51c6\u7684 k-means \u7b97\u6cd5","title":"Kmeans\u805a\u7c7b"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#focal-loss","text":"Focal Loss \u4e3b\u8981\u662f\u5728\u539f\u6709\u4ea4\u53c9\u71b5\u635f\u5931\u7684\u57fa\u7840\u4e0a\u52a0\u5165\u4e86 gamma \u56e0\u5b50\u548c alpha \u56e0\u5b50\uff0c\u5176\u4e2d gamma \u56e0\u5b50\u4e3b\u8981\u662f\u63a7\u5236\u56f0\u96be\u6837\u672c\u6316\u6398\u7684\uff0c alpha \u56e0\u5b50\u4e3b\u8981\u662f\u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\u7684\u3002 \u56f0\u96be\u6837\u4f8b\u6316\u6398\uff0c\u52a0\u5165 gamma \u56e0\u5b50 \u5bf9\u4e8e\u6b63\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.95 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 1-0.95 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.35 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 1-0.35 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5bf9\u4e8e\u8d1f\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y'=0.05 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 0.05 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y'=0.75 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 0.75 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\uff0c\u52a0\u5165\u5e73\u8861\u56e0\u5b50 alpha alpha=0.25 \uff0c\u901a\u8fc7\u63a7\u5236\u5e73\u8861\u56e0\u5b50\u5927\u5c0f\u6765\u5e73\u8861 loss","title":"Focal Loss"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#repulsion-lossrpln","text":"\u672c\u6587\u662f\u65f7\u89c6\u7814\u7a76\u9662CVPR2018\u4e0a\u7684\u4e00\u7bc7\u5de5\u4f5c\uff0c\u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u89e3\u51b3\u884c\u4eba\u68c0\u6d4b\u7684\u906e\u6321\u3002 \u76ee\u6807\u91cd\u53e0\u5bfc\u81f4\u4e24\u4e2a\u95ee\u9898\uff1a\u6846\u504f\u79fb\u548c\u6f0f\u68c0 \u4e09\u90e8\u5206:loss=P_T_loss+P\u8fdc\u79bbB_loss+P\u8fdc\u79bbP'_loss \uff0c B \u662f\u9664\u53bb\u672c\u8eab\u8981\u56de\u5f52\u76ee\u6807\u7684\u771f\u5b9e\u6846\u5916\uff0c\u4e0e\u5176 IoU \u6700\u5927\u7684\u771f\u5b9e\u6846; P+ \u4e3a\u6b63\u5019\u9009\u6846\u96c6\u5408\uff0c\u8868\u793a\u81f3\u5c11\u4e0e\u5176\u4e2d\u4e00\u4e2a\u771f\u5b9e\u6846\u7684 IoU \u5927\u4e8e\u67d0\u4e2a\u9608\u503c( 0.5 )\uff0c\u5176\u5b9e\u5c31\u662f\u6b63\u6837\u672c\u3002 P,T\u5438\u5f15 : P_T_loss \uff1a\u5c31\u662f\u7b80\u5355\u7684 smoothL1 Loss \uff0c\u7528\u6765\u4f18\u5316\u9884\u6d4b\u6846 P \u548c\u6240\u8d1f\u8d23\u7684\u76ee\u6807\u6846 T \u7684\u8ddd\u79bb\u3002 P,B\u6392\u65a5 : P\u8fdc\u79bbB_loss : Smoothln(IoG(P,B))_loss ,\u4f7f\u9884\u6d4b\u6846 P \u5c3d\u91cf\u8fdc\u79bb\u548c\u5b83\u91cd\u53e0\u7684\u7b2c\u4e8c\u5927\u7684 GT \u6846 B P,P'\u6392\u65a5 : P\u8fdc\u79bbP'_loss \uff0c\u4ece\u4ee3\u7801\u4e0a\u770b\uff0c\u76ee\u7684\u662f\u4fdd\u8bc1\u4f7f\u5206\u6d3e\u5230\u4e0d\u540c GT \u7684\u9884\u6d4b\u6846\u4e4b\u95f4\u5c3d\u91cf\u8fdc\u79bb\u3002 \u03b1\u548c\u03b2 \u7528\u4e8e\u5e73\u8861\u4e24\u8005\u7684\u6743\u91cd\u3002","title":"Repulsion Loss|[r\u026a'p\u028cl\u0283\u0259n]:\u65a5\u529b"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#tta","text":"","title":"TTA"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#wbfweighted-boxes-fusioncode","text":"\u52a0\u6743\u8fb9\u6846\u878d\u5408 \uff0c\u5e38\u7528\u4e8e\u878d\u5408\u591a\u4e2a\u6a21\u578b\u5bf9\u540c\u4e00\u5f20\u56fe\u7247\u7684\u6846\u9884\u6d4b\uff0c\u6216\u8005\u5355\u4e2a\u6a21\u578b\u4e0d\u540c\u5c3a\u5ea6\u7684\u7ed3\u679c\u878d\u5408\uff0c\u6bd4 NMS \u6162 3 \u500d\u3002 \u6bcf\u4e2a\u6a21\u578b\u7684\u6bcf\u4e2a\u9884\u6d4b\u6846\u90fd\u6dfb\u52a0\u5230 List B \uff0c\u5e76\u5c06\u6b64\u5217\u8868\u6309\u7f6e\u4fe1\u5ea6\u5f97\u5206 C **\u964d\u5e8f**\u6392\u5217 \u5efa\u7acb\u7a7a List L \u548c list F \uff08\u7528\u4e8e\u878d\u5408\u7684\uff09 \u5faa\u73af\u904d\u5386 B \uff0c\u5e76\u5728 F \u4e2d\u627e\u5230\u4e0e\u4e4b\u5339\u914d\u7684 box \uff08\u540c\u4e00\u7c7b\u522b MIOU > 0.55:\u6700\u4f73\u9608\u503c \uff09 \u5982\u679c step3 \u4e2d\u6ca1\u6709\u627e\u5230\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \u548c F \u7684\u5c3e\u90e8\uff0c\u5982\u679c step3 \u4e2d\u627e\u5230\u4e86\u5339\u914d\u7684 box \u5c31\u5c06\u8fd9\u4e2a\u6846\u52a0\u5230 L \uff0c\u52a0\u5165\u7684\u4f4d\u7f6e\u662f box \u5728 F \u4e2d\u5339\u914d\u6846\u7684 Index \uff1b L \u4e2d\u6bcf\u4e2a\u4f4d\u7f6e\u53ef\u80fd\u6709\u591a\u4e2a\u6846\uff0c\u9700\u8981\u6839\u636e\u8fd9\u591a\u4e2a\u6846\u66f4\u65b0\u5bf9\u5e94 F[index] \u7684\u503c\uff0c\u5176\u5b9e list L \u79f0\u4e3a dict L \u66f4\u597d\u3002\u66f4\u65b0\u65b9\u5f0f\u5982\u4e0b(\u5bf9\u5750\u6807\u503c\u6839\u636e\u7f6e\u4fe1\u5ea6\u6c42\u548c): \u904d\u5386\u5b8c\u6210\u540e\u5bf9 F \u4e2d\u7684\u5143\u7d20\u518d\u8fdb\u884c\u7f6e\u4fe1\u5ea6\u5f97\u5206\u7684\u7f29\u653e\uff0c\u51cf\u5c11\u67d0\u4e9b box \u53ea\u88ab\u5c11\u6570\u6a21\u578b\u9884\u6d4b\u5230\u7684\u7f6e\u4fe1\u503c(\u5982\u679c\u7fa4\u96c6\u4e2d\u7684\u591a\u4e2a\u6846\u5f97\u5206\u8f83\u4f4e\uff0c\u5219\u53ef\u80fd\u610f\u5473\u7740 \u53ea\u6709\u5c11\u6570\u6a21\u578b\u53ef\u4ee5\u9884\u6d4b\u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u9700\u8981\u964d\u4f4e\u6b64\u7c7b\u60c5\u51b5\u7684\u7f6e\u4fe1\u5ea6\u5f97\u5206)\u3002","title":"WBF(\u6bd4\u8d5b\u4e13\u7528:Weighted Boxes Fusion)code"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#_2","text":"\u591a\u5c3a\u5ea6\u8bad\u7ec3 : mmdetection \uff1a keep_ratio=True : img_scale \u7684\u591a\u5c3a\u5ea6\u6700\u591a\u4e3a\u4e24\u4e2a\u3002\u5047\u8bbe\u591a\u5c3a\u5ea6\u4e3a [(2000, 1200), (1333, 800)] \uff0c\u5219\u4ee3\u8868\u7684\u542b\u4e49\u4e3a\uff1a\u9996\u5148\u5c06\u56fe\u50cf\u7684\u77ed\u8fb9\u56fa\u5b9a\u5230 800\u52301200 \u8303\u56f4\u4e2d\u7684\u67d0\u4e00\u4e2a\u6570\u503c\u5047\u8bbe\u4e3a 1100 \uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u957f\u8fb9\u5e94\u8be5\u662f\u77ed\u8fb9\u7684 ratio=1.5 \u500d\uff0c\u4e14\u957f\u8fb9\u7684\u53d6\u503c\u5728 1333\u52302000 \u7684\u8303\u56f4\u4e4b\u5185\u3002\u5982\u679c\u5927\u4e8e 2000 \u6309\u7167 2000 \u8ba1\u7b97\uff0c\u5c0f\u4e8e 1300 \u6309\u7167 1300 \u8ba1\u7b97\u3002 keep_ratio=False : img_scale \u7684\u591a\u5c3a\u5ea6\u53ef\u4ee5\u4e3a\u4efb\u610f\u591a\u4e2a\u3002\u5047\u8bbe\u591a\u5c3a\u5ea6\u4e3a [(2000, 1200), (1666, 1000),(1333, 800)] \uff0c\u5219\u4ee3\u8868\u7684\u542b\u4e49\u4e3a\uff1a\u968f\u673a\u4ece\u4e09\u4e2a\u5c3a\u5ea6\u4e2d\u9009\u53d6\u4e00\u4e2a\u4f5c\u4e3a\u56fe\u50cf\u7684\u5c3a\u5bf8\u8fdb\u884c\u8bad\u7ec3\u3002 Mixup Mixup :\u5c06\u968f\u673a\u7684\u4e24\u5f20\u6837\u672c\u6309\u6bd4\u4f8b\u6df7\u5408\uff0c loss \u90e8\u5206\u4e5f\u6839\u636e\u6df7\u5408\u6bd4\u4f8b\u5206\u914d\uff1b \u4e24\u5f20\u6837\u672c\u56fe\u7247: inputs = lam*images + (1-lam)*images_random \uff0c\u76f4\u63a5\u50cf\u7d20\u76f8\u52a0(\u5c3a\u5bf8\u4e0d\u540c\u65f6\u53d6\u6700\u5927\u503c: (600,800),(900,700)->(900,800) ,\u8865 0 )\u3002 loss = lam * criterion(outputs, targets_a) + (1 - lam) * criterion(outputs, targets_b) MinIoURandomCrop \u968f\u673a crop the image & bboxes \uff0c\u7531\u4e8e\u53ef\u80fd\u6b63\u597d\u628a\u6846\u5207\u5f00\u4f46\u662f\u5fc5\u987b\u4fdd\u8bc1\u6709\u6700\u5c0f\u7684 min iou thresh , min_ious=(0.1, 0.3, 0.5, 0.7, 0.9) \u4e2d\u968f\u673a\u9009\u62e9\u3002 \u5176\u4ed6 Noise \uff1a\u6912\u76d0\u566a\u58f0\u3001\u9ad8\u65af\u566a\u58f0\u3001\u6591\u70b9\u566a\u58f0\u7b49\u968f\u673a\u9009\u62e9 Blur \uff1a\u9ad8\u65af\u6a21\u7cca\uff0c\u4e2d\u503c\u6a21\u7cca\u7b49\u968f\u673a\u9009\u62e9(\u63a8\u8350 mmdetection+ablur ) RandomBoxShake :\u968f\u673a\u539f\u59cb\u7684\u6807\u6ce8\u6846\u6296\u52a8\u5e94\u5bf9\u6807\u6ce8 noise PixelDistort[d\u026a'st\u0254\u02d0\u00aet]\u4f7f\u53d8\u5f62 \uff1a\u50cf\u7d20\u7ea7\u53d8\u6362\uff0c\u4e00\u822c\u90fd\u8981\u52a0\uff0c\u5176\u5b9e\u5c31\u662f\u8c03\u6574\u56fe\u50cf\u7684\u989c\u8272\uff0c\u8272\u8c03\uff0c\u9971\u548c\u5ea6","title":"\u6570\u636e\u589e\u5f3a"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#db1911-differentiable-binarization","text":"\u4ee3\u7801\u89e3\u6790 \u76f4\u63a5\u8bed\u4e49\u5206\u5272\uff0c\u4e0d\u7528\u8003\u8651\u906e\u6321\u95ee\u9898\uff1b\u4e00\u822c\u7684\u8bed\u4e49\u5206\u5272\u7f51\u7edc\u90fd\u662f\u76f4\u63a5\u8f93\u51fa\u4e8c\u503c\u8bed\u4e49\u6982\u7387\u56fe\uff0c\u7136\u540e\u901a\u8fc7\u9608\u503c\u4e8c\u503c\u5316\u5f97\u5230\u6700\u7ec8\u7ed3\u679c(\u4e00\u822c\u8f83\u597d\u7684\u7ed3\u679c\u9700\u8981\u590d\u6742\u7684\u540e\u5904\u7406)\uff0c DB \u76f4\u63a5\u628a \u9608\u503c\u4e8c\u503c\u5316 \u8fc7\u7a0b\u53d8\u7684**\u53ef\u5fae\u5206**\uff0c\u76f4\u63a5\u8fdb\u884c\u7f51\u7edc\u4f18\u5316\uff0c\u5f97\u5230\u66f4\u597d\u7684\u8bed\u4e49\u6982\u7387\u56fe\u3002 \u6807\u7b7e\u5236\u4f5c \u6982\u7387\u56fe P \u7684\u751f\u6210\uff1a\u5411\u91cc\u9762\u538b\u7f29 d \uff0c\u84dd\u6846\u8868\u793a\uff0c \u9ed1\u8272\u533a\u57df\u503c\u4e3a0\uff0c\u767d\u8272\u533a\u57df\u503c\u4e3a1 \u9608\u503c\u56fe T \u7684\u751f\u6210\uff1a\u5411\u5916\u9762\u6269\u5c55 d \u6210\u7eff\u6846\uff0c\u5411\u91cc\u9762\u538b\u7f29 d \u6210\u84dd\u6846\uff0c\u7eff\u84dd\u4e4b\u95f4\u7684\u4e3a\u76ee\u6807\u8fb9\u754c\uff0c\u503c\u4e3a\u7eff\u84dd\u4e4b\u95f4\u6240\u6709\u50cf\u7d20\u5230\u7ea2\u7ebf(\u5b9e\u9645\u8fb9\u754c)\u7684\u8ddd\u79bb( \u6536\u7f29\u6846\u548c\u6269\u5f20\u6846\u4e4b\u95f4\u5dee\u96c6\u90e8\u5206\u91cc\u6bcf\u4e2a\u50cf\u7d20\u70b9\u5230\u539f\u59cb\u56fe\u50cf\u8fb9\u754c\u7684\u5f52\u4e00\u5316\u8ddd\u79bb[0,1] )\uff0c \u9ed1\u8272\u533a\u57df\u503c\u4e3a 0+0.3 \u4e3a\u4e86\u8ba1\u7b97\u4e8c\u503c\u56fe\u65f6\u53ef\u4ee5\u66f4\u597d\u7684\u5206\u5f00\u8fb9\u754c\u3002 \u7f51\u7edc\u7ed3\u6784 \u53ef\u5fae\u5206\u4e8c\u503c\u5316 :\u81ea\u9002\u5e94\u9608\u503c\u7684\u53ef\u5fae\u5206\u4e8c\u503c\u5316\u4e0d\u4ec5\u53ef\u4ee5\u4ece\u80cc\u666f\u4e2d\u5b9a\u4f4d\u6587\u672c\u533a\u57df\uff0c\u8fd8\u53ef\u4ee5\u5e2e\u52a9\u533a\u5206\u5f00\u8ddd\u79bb\u5f88\u8fd1\u7684\u6587\u672c\u5b9e\u4f8b\u3002 \u635f\u5931\u51fd\u6570 Ls,Lb \u90fd\u662f binary cross-entropy (BCE:\u4e8c\u5143\u4ea4\u53c9\u71b5) ,\u540c\u65f6\u4e3a\u4e86\u89e3\u51b3\u6b63\u8d1f\u6837\u672c\u4e0d\u5747\u8861\u4f7f\u7528 hard negative mining ,\u4f7f\u5f97\u6b63\u8d1f\u6837\u672c 1:3 Lt \u662f\u9884\u6d4b\u7ed3\u679c\u548c\u6807\u7b7e\u4e4b\u95f4\u7684 L1 \u8ddd\u79bb\uff0c\u5176\u4e2d Rd(\u7ea2->\u7eff) \u662f\u5728\u81a8\u80c0 Gd \u5185\u50cf\u7d20\u7684\u7d22\u5f15\uff0c y* \u662f\u9608\u503c map \u7684\u6807\u7b7e\uff0c\u4f7f\u7528 10 \u662f\u56e0\u4e3a Lt \u7684\u7ed3\u679c\u4f1a\u5f71\u54cd\u5230 Lb (\u56e0\u4e3a\u662f\u540c\u4e00\u4e2a\u7279\u5f81\u56fe\u7684\u4e24\u4e2a\u5206\u652f)\u3002 \u63a8\u7406\u6d41\u7a0b \u5728\u63a8\u7406\u65f6\u53ef\u4ee5\u91c7\u7528\u6982\u7387\u56fe\u6216\u8fd1\u4f3c\u4e8c\u503c\u56fe\u6765\u751f\u6210\u6587\u672c\u6846\uff0c\u4e3a\u4e86\u65b9\u4fbf\u4f5c\u8005\u9009\u62e9\u4e86\u6982\u7387\u56fe\uff0c\u5177\u4f53\u6b65\u9aa4\u5982\u4e0b: \u4e8c\u503c\u56fe\u786e\u5b9a: \u4f7f\u7528**\u8fd1\u4f3c\u4e8c\u503c\u56feB**\uff0c\u76f4\u63a5\u4f7f\u7528\u5373\u53ef \u4f7f\u7528**\u6982\u7387\u56feP**\uff1a\u4f7f\u7528\u56fa\u5b9a\u9608\u503c 0.2 \u5c06\u6982\u7387\u56fe\u505a\u4e8c\u503c\u5316\u5f97\u5230\u4e8c\u503c\u5316\u56fe\uff0c\u7531\u4e8c\u503c\u5316\u56fe\u5f97\u5230\u6536\u7f29\u6587\u5b57\u533a\u57df(\u4f5c\u8005\u63a8\u8350) \u5c06\u6536\u7f29\u6587\u5b57\u533a\u57df\u6309 Vatti clipping \u7b97\u6cd5( PSENet )\u7684\u504f\u79fb\u7cfb\u6570 D' \u8fdb\u884c\u6269\u5f20\u5f97\u5230\u6700\u7ec8\u6587\u672c\u6846","title":"DB(19/11 Differentiable Binarization:\u53ef\u5fae\u5206\u4e8c\u503c\u5316)"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#mobilenet","text":"MobileNetV1 = \u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef+ PReLU (\u539f\u59cb\u662f ReLU6 )+\u901a\u9053\u63a7\u5236\u7cfb\u6570 widen_factor =[ 2 , 1 , 0.75 , 0.5 , 0.25 ]\uff0c\u8fd9\u6837\u5c31\u4ea7\u751f\u6a21\u578b __all__ = ['mobilenet_2', 'mobilenet_1', 'mobilenet_075', 'mobilenet_05', 'mobilenet_025'] \u9664\u4e86\u7b2c\u4e00\u5c42\u5377\u79ef\u662f\u666e\u901a\u5377\u79ef\u5916\uff0c\u5176\u4ed6\u6240\u6709\u5c42\u90fd\u662f\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef( group=in_channels conv + 1x1conv )\uff0c\u6fc0\u6d3b\u51fd\u6570\u5168\u90e8\u4f7f\u7528 relu \u6216\u8005prelu \uff0c\u6700\u540e\u4e00\u5c42\u63a5 fc \u4e4b\u524d\u4f7f\u7528 globalAvgPooling \uff0c\u5176\u5b9e\u53ef\u4ee5\u628a fc \u6362\u6210 1x1 conv \u6765\u52a0\u5feb\u901f\u5ea6\u3002 mobilenetv1 \u4e3b\u8981\u662f\u5f15\u5165\u4e86**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef** mobilenetv2 \u4e3b\u8981\u662f\u5f15\u5165\u4e86**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef+\u5012\u6b8b\u5dee\u7ed3\u6784** mobilenetv3 \u4e3b\u8981\u662f MobileNet V1 \u7684**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef**+ MobileNetV2 \u7684**\u7ebf\u6027\u74f6\u9888\u7684\u5012\u6b8b\u5dee\u7ed3\u6784**+ SE\u6ce8\u610f\u529b\u6a21\u5757 \uff0c\u4e14\u7ed3\u5408\u91c7\u7528\u795e\u7ecf\u7f51\u7edc\u641c\u7d22\u7684\u65b9\u6cd5\uff0c\u8bf4\u662f\u7528\u4e86 h-swish=x*ReLU6(x+3)/6 \u51fd\u6570( \u4e00\u822c\u4f7f\u7528\u65f6\u5e38\u7528relu\u4ee3\u66ff )\uff0c\u540c\u65f6\u5bf9 v2 \u6700\u540e\u9636\u6bb5\u505a\u4e86\u66f4\u6539: mobilenetv1 \u6700\u540e\u4f7f\u7528\u7684\u662f avgpool 7x7 +fc mobilenetv2 \u6700\u540e\u4f7f\u7528\u7684\u662f conv 1x1 + avgpool 7x7 + conv 1x1(==fc) \u5148\u4f7f\u7528 conv1x1 \u5377\u79ef\u5347\u7ef4\u5ea6\uff0c\u4f46\u7531\u4e8e\u6b64\u65f6\u7684\u7279\u5f81\u5bbd\u9ad8\u662f 7x7 \u7684\uff0c\u5f15\u5165\u4e86\u989d\u5916\u7684\u8ba1\u7b97\u91cf mobilenetv3 \u6700\u540e\u4f7f\u7528\u7684\u662f conv 1x1 + avgpool 7x7 + conv 1x1 + conv 1x1(==fc) \u5148\u8fdb\u884c avgpool 7x7 \uff0c\u628a\u7279\u5f81\u5bbd\u9ad8\u964d\u4e3a 1x1 \uff0c\u7136\u540e\u518d\u662f\u4f7f\u7528 1x1 \u5377\u79ef\u5347\u7ef4\uff0c\u8ba1\u7b97\u91cf\u51cf\u5c11\u3002 PReLU:\u5e26\u53c2\u6570\u7684ReLU ai=0 \uff0c\u90a3\u4e48 PReLU \u9000\u5316\u4e3a ReLU \uff1b \u5982\u679c ai \u662f\u4e00\u4e2a\u5f88\u5c0f\u7684\u56fa\u5b9a\u503c(\u5982 ai=0.01 )\uff0c\u5219 PReLU \u9000\u5316\u4e3a Leaky ReLU(LReLU) BP \u66f4\u65b0 ai \u65f6\uff0c\u91c7\u7528\u7684\u662f\u5e26\u52a8\u91cf\u7684\u66f4\u65b0\u65b9\u5f0f\uff1a\u4e0b\u9762\u4e24\u4e2a\u7cfb\u6570\u5206\u522b\u662f\u52a8\u91cf\u548c\u5b66\u4e60\u7387\u3002","title":"MobileNet"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#retinaface_1","text":"\u7531\u4e8e\u732a\u53ea\u5c3a\u5bf8\u76f8\u5dee\u4e0d\u5927\uff0c\u53c8\u662f\u540c\u4e00\u4e2a\u65b9\u5411\u8fd0\u52a8\uff0c\u5b58\u5728\u906e\u6321\u6324\u538b\u72b6\u51b5\uff0c\u5982\u679c\u67d0\u4e2a\u7279\u5f81\u56fe\u4ea7\u751f\u7684\u4e00\u4e2a anchor \u6846\u540c\u65f6\u5206\u914d\u7ed9\u8fd9\u4e2a\u76ee\u6807\uff0c\u4f1a\u4ea7\u751f\u76ee\u6807\u91cd\u5199\u73b0\u8c61\uff0c\u5bfc\u81f4\u6f0f\u68c0(\u5c24\u5176\u662f\u5c0f\u7279\u5f81\u56fe\u4e2d\uff0c\u611f\u53d7\u91ce\u8f83\u5927\uff0c\u91cd\u5199\u73b0\u8c61\u53d1\u751f\u6982\u7387\u5927)\uff0c \u589e\u5927\u56fe\u7247\u5206\u8fa8\u7387\u6216\u8005\u589e\u52a0\u7279\u5f81\u56fe\u5927\u5c0f\uff0c\u901f\u5ea6\u4f1a\u53d8\u6162 kmeans \u4f7f\u5f97\u5dee\u4e0d\u591a\u5c3a\u5bf8\u7684\u732a\u53ea(\u6216\u8005\u6709\u51e0\u79cd\u7279\u5b9a\u5c3a\u5ea6\u7684\u7269\u4f53)\u5f3a\u5236\u88ab\u5206\u5230\u4e0d\u540c\u5c42\u4e2d\u88ab\u9884\u6d4b\uff0c\u8fd9\u662f\u6709\u95ee\u9898\u7684\u3002","title":"RetinaFace\u68c0\u6d4b\u7684\u5c40\u9650\u6027"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#_3","text":"gamma\u7cfb\u6570\u7edd\u5bf9\u503c\u6392\u5e8f\u88c1\u526a \u7cfb\u6570\u8bad\u7ec3\u65b9\u5f0f \u526a\u679d\u540e\u6bcf\u5c42\u901a\u9053\u5269\u4f59\u8bbe\u7f6e\u4e3a 2^x \u6570\u76ee\uff0c\u8fd9\u6837\u8f83\u7a33\u5b9a\u4f46\u727a\u7272\u4e86\u90e8\u5206\u538b\u7f29\u7387 \u6052\u5b9a s \u526a\u679d:\u4e00\u76f4\u4ee5\u56fa\u5b9a\u7684 L1 \u60e9\u7f5a\u7cfb\u6570 s=0.001 \u5168\u5c40 s \u8870\u51cf\u526a\u679d: s = s if epoch <= opt.epochs * 0.5 else s * 0.01 \uff0c\u8d85\u8fc7 epochs/2 \u540e\u60e9\u7f5a\u7cfb\u6570\u8870\u51cf 100 \u500d\uff0c\u4f7f\u5f97\u7cbe\u5ea6\u7a0d\u5fae\u6062\u590d\u3002 \u5c40\u90e8 s \u8870\u51cf\u526a\u679d:\u8d85\u8fc7 epochs/2 \u540e\u5bf9 85 %\u7684\u901a\u9053(\u6240\u6709 bn \u901a\u9053 s \u6392\u5e8f)\u4fdd\u6301\u539f\u59cb\u6052\u5b9a\u60e9\u7f5a\u7cfb\u6570 s \u538b\u7f29\uff0c 15% \u7684\u901a\u9053\u8fdb\u884c s \u8870\u51cf 100 \u500d\u7684\u538b\u7f29( 85% \u662f\u4e2a\u5148\u9a8c\u77e5\u8bc6\uff0c\u4e00\u822c\u8fd9\u4e2a\u538b\u7f29\u7387\u662f\u6700\u4f73\u7684)\u3002 tensorboard\u8bb0\u5f55\u7a00\u758fBN\u5c42gamma\u6743\u91cd\u53d8\u5316 \u5982\u4f55\u786e\u5b9a\u88c1\u526a\u7387 \u8bbe\u7f6e\u88c1\u526a\u7387: range(0.60,0.90,0.01) \uff0c\u8dd1 mini_testData:100 \u5f20\uff0c\u786e\u5b9a\u6700\u9ad8 AP \u7684\u88c1\u526a\u7387 65.7% \u7cbe\u5ea6\u6062\u590d : \u5fae\u8c03finetune(3~5\u4e2aepochs) \uff0c\u89c2\u5bdf finetune \u524d\u540e BN \u5c42\u7684\u6743\u91cd\u5206\u5e03 \u5fae\u8c03\u6a21\u578b\u524d\u540e Conv \u7b49\u5c42\u6743\u91cd\u53d8\u5316\u5e73\u7f13\uff0c\u4f46\u662f BN \u5c42\u53d8\u5316\u5de8\u5927\uff0c\u6240\u4ee5\u51bb\u7ed3\u5176\u4ed6\u5c42\u53c2\u6570\uff0c\u53ea finetune BN \u5c42\u7684\u53c2\u6570\uff0c\u6548\u679c\u7a0d\u5fae\u6709\u63d0\u5347 \u6a21\u578b\u84b8\u998f(\u63a8\u8350) :\u5bf9\u6a21\u578b\u84b8\u998f\u6765\u8bf4\uff0c\u7f51\u7edc\u5728\u7ed3\u6784\u76f8\u4f3c\u7684\u60c5\u51b5\u4e0b\u63d0\u5347\u6548\u679c\u5c24\u4e3a\u660e\u663e\uff0c\u526a\u679d\u6a21\u578b\u548c\u539f\u59cb\u6a21\u578b\u4e4b\u95f4\u7f51\u7edc\u7ed3\u679c\u9ad8\u5ea6\u76f8\u4f3c\uff0c\u4f7f\u7528\u84b8\u998f\u6548\u679c\u66f4\u597d\u3002","title":"\u6a21\u578b\u526a\u679d"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#_4","text":"\u53ea\u84b8\u998f\u4e00\u4e2a\u8f93\u51fa\u5c42 \u8981\u84b8\u998f\u7684\u5c0f\u6a21\u578b\uff0c\u4ee5\u5927\u6a21\u578b\u7684\u8f93\u51fa\u7684\u6982\u7387\u5411\u91cf( soft target : \u8f6f\u6807\u7b7e ->\u62e5\u6709\u4e0d\u540c\u7c7b\u4e4b\u95f4\u5173\u7cfb\u7684\u4fe1\u606f)\u4e3a\u5b66\u4e60\u76ee\u6807\uff0c\u56e0\u4e3a one-hot \u5305\u542b\u7684\u4fe1\u606f\u91cf\u5f88\u4f4e [0,1] \uff08\u7c7b\u4f3c label smooth \uff09\uff0c\u56e0\u4e3a\u8d1f\u6807\u7b7e\u4e5f\u5e26\u6709\u5927\u91cf\u4fe1\u606f\u3002 \u5982\u4f55\u505a\uff0c\u5728\u8bad\u7ec3\u7684\u65f6\u5019\u5728 softmax \u4e2d\u589e\u52a0\u6e29\u5ea6\u53c2\u6570 T \uff0c\u63a8\u7406\u7684\u65f6\u5019 T=1 \uff0c\u4f18\u5316 L_soft \u7684\u65f6\u5019\u5e38\u7528 KL\u6563\u5ea6 \u8ba1\u7b97 Loss : \u4ea4\u53c9\u71b5= KL \u6563\u5ea6+\u71b5 \uff0c one-hot \u6807\u7b7e\u7684\u771f\u5b9e\u4fe1\u606f\u71b5\u662f\u56fa\u5b9a\u7684\u6240\u4ee5\u7528\u4ea4\u53c9\u71b5\u4ee3\u66ff KL \u6563\u5ea6\uff0c\u4f46\u662f soft label \u7684\u4fe1\u606f\u71b5\u662f teacher \u7f51\u7edc\u751f\u6210\u7684\uff0c\u4e0d\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u5fc5\u987b\u7528 KL \u6563\u5ea6\u3002 \u6e29\u5ea6 T :\u8d8a\u5c0f\u8d8a\u653e\u5927\u6b63\u6837\u672c\uff0c\u8d8a\u5927\u8d8a\u653e\u5927\u8d1f\u6837\u672c(\u5373\u653e\u5927\u5c0f\u6982\u7387\u503c\u5206\u91cf\u6240\u643a\u5e26\u7684\u4fe1\u606f)\u3002 # \u635f\u5931\u51fd\u6570 criterion = nn . CrossEntropyLoss () criterion2 = nn . KLDivLoss () # \u7ecf\u5178\u635f\u5931 outputs = model ( inputs . float ()) loss1 = criterion ( outputs , labels ) # \u84b8\u998f\u635f\u5931 teacher_outputs = teach_model ( inputs . float ()) T = 2 alpha = 0.5 outputs_S = F . log_softmax ( outputs / T , dim = 1 ) outputs_T = F . softmax ( teacher_outputs / T , dim = 1 ) loss2 = criterion2 ( outputs_S , outputs_T ) * T * T #\u7efc\u5408\u635f\u5931\u7ed3\u679c loss = loss1 * ( 1 - alpha ) + loss2 * alpha \u7cbe\u5ea6\u66f4\u9ad8\u7684\u6a21\u578b\u84b8\u998f\u5c0f\u6a21\u578b\u63d0\u5347\u70b9\u66f4\u5c11\uff0c\u539f\u56e0\u5206\u6790 \uff1a Teacher \u66f4\u590d\u6742\uff0c Student \u6ca1\u6709\u8db3\u591f\u7684\u80fd\u529b\u6765\u6a21\u4eff Teacher Teacher \u7684\u7cbe\u5ea6\u66f4\u9ad8\uff0c\u6a21\u578b\u786e\u5b9a\u6027\u66f4\u5f3a\uff0c\u8f93\u51fa logits \uff08 soft label \uff09\u53d8\u5f97 less soft \uff0c\u8d8b\u8fd1\u4e8e one-hot \u89e3\u51b3\u65b9\u6848:\u53ef\u4ee5\u5229\u7528\u8d85\u5927\u6a21\u578b\u4f5c\u4e3a**\u52a9\u6559\u7f51\u7edc**\u8f85\u52a9\u84b8\u998f(\u8d85\u5927\u7f51\u7edc\u4f5c\u4e3a Teacher ,\u5927\u7f51\u7edc\u4f5c\u4e3a Teach-Assistant \uff0c\u5c0f\u7f51\u7edc\u4f5c\u4e3a Student ) \u9996\u5148\u5bf9\u8d85\u5927\u7f51\u7edc\u5bf9\u5927\u7f51\u7edc\u8fdb\u884c\u84b8\u998f(\u5927\u7f51\u7edc\u7684\u9009\u53d6\u548c\u8d85\u5927\u7f51\u7edc\u76f8\u5dee\u4e0d\u8981\u592a\u5927( 7\u500d \u4ee5\u4e0a)\uff0c\u4e0d\u7136\u4e5f\u84b8\u4e0d\u51fa\u6765) \u518d\u7528\u6574\u7406\u597d\u7684\u5927\u7f51\u7edc\u5bf9\u6700\u7ec8\u7684\u5c0f\u7f51\u7edc\u8fdb\u884c\u84b8\u998f \u591a\u4e2aTeacher\u6a21\u578b\u5982\u4f55\u84b8\u998f link \u5c06\u591a\u4e2ateacher\u6a21\u578b\u7684\u9884\u6d4b\u6982\u7387\uff08softmax\u540e\u8f93\u51fa\uff09\u6c42\u5e73\u5747\u503c\u6765\u8fdb\u884c\u84b8\u998f\uff0c\u6548\u679c\u597d\u4e8e\u968f\u673a\u9009\u4e00\u4e2ateacher\u6a21\u578b\u8fdb\u884c\u84b8\u998f\u3002 \u8f93\u51fa\u5c42\u548c\u7279\u5f81\u5c42\u4e00\u8d77\u84b8\u998f \u5bf9\u4e8eT\u548cS\u4e2d\u95f4\u7279\u5f81\u56fe\u8f93\u51fa\u7ef4\u5ea6\u4e0d\u5339\u914d\u7684\u95ee\u9898\uff0c\u91c7\u7528\u5728 S \u7f51\u7edc\u8f93\u51fa\u63a5\u4e00\u4e2a\u8f6c\u6362\u5668( conv+bn+mish )\uff0c\u5c06\u5176\u5347\u7ef4\u5230 T \u7f51\u7edc\u5339\u914d\uff0cT\u7684\u8bdd\u76f4\u63a5\u63a5\u4e00\u4e2a mish \u4fdd\u8bc1\u6fc0\u6d3b\u51fd\u6570\u76f8\u540c( mish=x*tanh(ln(1+e^x)) )\u3002 loss:nn.MSE-->\u9884\u6d4b\u6570\u636e\u548c\u539f\u59cb\u6570\u636e\u5bf9\u5e94\u70b9\u8bef\u5dee\u7684\u5e73\u65b9\u548c\u7684\u5747\u503c \u76ee\u6807\u68c0\u6d4b\u5b9e\u9645\u84b8\u998f (\u5c1d\u8bd5\u4e09\u79cd) output \u84b8\u998f:\u666e\u901a\u84b8\u998f KL \u6563\u5ea6 # \u5bf9\u4e8e\u5206\u7c7b\u548c\u56de\u5f52\u90fd\u662f\u6309\u7167KL\u6563\u5ea6loss\u76f4\u63a5\u8fdb\u884c\u84b8\u998f def distillation_loss1 ( output_s , output_t , num_classes , batch_size ): T = 3.0 Lambda_ST = 0.001 criterion_st = torch . nn . KLDivLoss ( reduction = 'sum' ) output_s = torch . cat ([ i . view ( - 1 , num_classes + 5 ) for i in output_s ]) output_t = torch . cat ([ i . view ( - 1 , num_classes + 5 ) for i in output_t ]) loss_st = criterion_st ( nn . functional . log_softmax ( output_s / T , dim = 1 ), nn . functional . softmax ( output_t / T , dim = 1 )) * ( T * T ) / batch_size return loss_st * Lambda_ST output \u84b8\u998f:\u5206\u7c7b\u548c\u56de\u5f52\u5206\u5f00\u84b8\u998f \u5206\u7c7b\u8fd8\u662f\u4f7f\u7528\u666e\u901a\u7684\u84b8\u998f\u7b56\u7565( \u4f7f\u7528KL\u6563\u5ea6loss\u6765\u6c42\u5206\u7c7b\u603bloss )\uff0c\u4f46\u5bf9\u4e8e\u56de\u5f52 loss ,\u53d1\u73b0\u5148\u5bf9 student + target \u7684 boxs \u6c42\u5747\u503c\uff0c\u7136\u540e\u4f18\u5316 student \u548c t_tar_mean_box \u7684 CIOU loss (\u4f18\u4e8e 1/2*l2 loss )\uff0c\u6548\u679c\u66f4\u597d\uff0c alpha=0.001 1/2*L2 loss \u8bad\u7ec3\u521d\u671f\uff0c x \u503c\u5f88\u5927\u65f6\uff0c\u5176\u5bfc\u6570\u4e5f\u5f88\u5927\uff0c\u8bad\u7ec3\u521d\u671f\u8bad\u7ec3\u4e0d\u7a33\u5b9a\u3002\u4f46\u5bf9\u4e8e\u84b8\u998f\u6765\u8bf4\uff0c\u5c5e\u4e8e\u8bad\u7ec3\u540e\u671f\uff0c\u7c7b\u4f3c smooth l1 loss \u7684\u540e\u671f\u3002 \u7279\u5f81\u56fe\u84b8\u998f+ output \u84b8\u998f \u56e0\u4e3a\u7f51\u7edc\u7ed3\u6784\u4e00\u6837\uff0c\u8f93\u51fa\u5bf9\u5e94\u7684\u4e2d\u95f4\u56db\u5c42\u7279\u5f81\u56fe\u8fdb\u884c\u84b8\u998f\uff0c\u56e0\u4e3a\u901a\u9053\u6570\u7684\u4e0d\u540c\uff0c\u4f7f\u7528 1x1 conv \u4fdd\u6301\u7ef4\u5ea6\u76f8\u540c\uff0c\u7136\u540e\u8ba1\u7b97\u5176 MSE loss \uff0c\u4f7f\u7528\u8f83\u5c0f\u7684\u7cfb\u6570 0.005 \u52a0\u5165\u5230\u603b loss \u91cc\u9762\u3002 Teach-Assistant(\u52a9\u7406) Distillation :\u6ca1\u6709\u5c1d\u8bd5 \u5982\u679c T,S \u4e4b\u95f4\u5dee\u8ddd\u975e\u5e38\u5927( 7 \u500d\u4ee5\u4e0a)\uff0c\u53ef\u4ee5\u501f\u52a9\u4e00\u4e2a\u4e2d\u95f4\u7684\u7f51\u7edc M \uff0c\u5148\u7528 T \u84b8\u998f M \uff0c\u518d\u7528 M \u84b8\u998f S","title":"\u77e5\u8bc6\u84b8\u998f(\u5206\u7c7b/\u56de\u5f52\u7528)"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#bwnbinary-weight-networks","text":"BWN :\u8bba\u6587\u4e2d\u521d\u6b21\u63d0\u51fa\u7684\u6743\u91cd\u4e8c\u503c\u5316\u662f\u628a\u5377\u79ef\u6216\u8005\u5168\u8fde\u63a5\u5c42\u7684\u5377\u79ef\u6838\u53c2\u6570\u53d8\u6210** W_binary{-1,1}*\u03b1(\u5c3a\u5ea6\u53c2\u6570) \u4ee3\u66ff\u6743\u91cdW_float32**\uff0c\u5bf9\u4e8e activation \u4ecd\u7136\u91c7\u7528 float32 \u5168\u7cbe\u5ea6\u3002 W_binary = sign(W_float32) \uff0c\u4f46\u662f sign \u51fd\u6570\u5728 0 \u5904\u4e0d\u53ef\u5bfc\uff0c \u5f00\u5c71\u4e4b\u4f5c:BinaryNet \u4f5c\u8005\u4f7f\u7528** \u76f4\u901a\u4f30\u8ba1\u5668:STE **(\u524d\u5411\u63d0\u53d6\u8f93\u5165\u7684\u6b63\u8d1f,\u5373 {-1,+1} \uff0c\u53cd\u5411\u4f7f\u7528 clip(-1,x,1)\u7684\u5bfc\u6570\u6765\u62df\u5408sign\u7684\u5bfc\u6570 ),\u4e5f\u5c31\u662f\u8bf4 output_grad = abs(input)>1--->grad==0*src_grad \uff0c\u5f53 output_grad = abs(input)<=1--->1*src_grad \u03b1 \u5982\u4f55\u786e\u5b9a\u6700\u4f18\uff1f \u03b1 \u6700\u4f18\u503c= np.sum(abs(w)) / n \uff08\u8be5\u5c42\u76f8\u5e94\u5377\u79ef\u6838\u53c2\u6570\u7684 L1 \u8303\u6570\u7684\u5747\u503c\uff09\uff0c\u8bba\u6587\u4e2d\u6709\u63a8\u7406\u516c\u5f0f\u3002 # \u5982\u679c\u8981\u8fdb\u884c\u6fc0\u6d3b\u4e8c\u503c\u5316\uff0c\u7b2c\u4e00\u4e2a\u5377\u79ef\u5c42\u53c2\u6570\u4e0d\u80fd\u662f\u4e8c\u503c\uff0c\u56e0\u4e3a\u56fe\u7247\u662f8bit\uff0c\u5982\u679c\u76f4\u63a5\u4e8c\u503c\u5316\uff0c\u4e22\u5931\u4fe1\u606f\u8fc7\u591a # STE class BinActive ( torch . autograd . Function ): ''' Binarize the input activations for ***** BNN and XNOR *****. ''' @staticmethod def forward ( ctx , input ): ctx . save_for_backward ( input ) input = input . sign () # \u4f7f\u7528y=x\u51fd\u6570\u62df\u5408\u68af\u5ea6 return input @staticmethod def backward ( ctx , grad_output , ): input , = ctx . saved_tensors grad_input = grad_output . clone () # \u5f00\u5c71\u4e4b\u4f5cBNN\u4e2d\u6fc0\u6d3b\u503c:\u5f53sign\u51fd\u6570\u7684\u8f93\u5165\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u5c06\u68af\u5ea6\u7f6e0\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002 grad_input [ input . ge ( 1 )] = 0 grad_input [ input . le ( - 1 )] = 0 # \u6700\u7ec8\u7684\u68af\u5ea6\u7ed3\u679c\u5c31\u662fsign\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u4f7f\u7528clip(-1,x,1)\u51fd\u6570\u6765\u62df\u5408 return grad_input # \u5f53\u5728[-1,1]\u8303\u56f4\u5185\uff0c\u76f4\u63a5\u8fd4\u56de class BWNConv2d ( nn . Conv2d ): def forward ( self , x ): w = self . weight alpha = torch . mean ( torch . mean ( torch . mean ( abs ( w ), dim = 3 , keepdim = True ), dim = 2 , keepdim = True ), dim = 1 , keepdim = True ) . detach () bw = BinActive () . apply ( w ) # \u5bf9\u6743\u91cd\u8fdb\u884c\u4e8c\u503c\u5316(\u91cf\u5316) bw = bw * alpha # bx = BinActive().apply(x) # \u5bf9\u6fc0\u6d3b\u503c\u8fdb\u884c\u4e8c\u503c\u5316(\u91cf\u5316) output = F . conv2d ( x , bw , self . bias , self . stride , self . padding , self . dilation , self . groups ) return output \u6700\u7ec8\u7ed3\u679c\u663e\u793a:\u6bcf\u4e2a\u5377\u79ef\u6838\u81ea\u8eab\u7684\u53c2\u6570\u7edd\u5bf9\u503c\u76f8\u540c\uff0c\u4f46\u4e0d\u540c\u5377\u79ef\u6838\u7684\u7edd\u5bf9\u503c\u4e0d\u76f8\u540c DoReFa-Net\u5728\u7ebf\u91cf\u5316\u4efb\u610f\u6bd4\u7279(2,8\u7b49) \u76f4\u901a\u4f30\u8ba1\u5668STE from torch.autograd import Function def quantize_k ( r_i , k ): scale = ( 2 ** k - 1 ) r_o = torch . round ( scale * r_i ) / scale return r_o class DoReFaQuant ( Function ): @staticmethod def forward ( ctx , r_i , k ): tanh = torch . tanh ( r_i ) . float () r_o = 2 * quantize_k ( tanh / ( 2 * torch . max ( torch . abs ( tanh )) . detach ()) + 0.5 , k ) - 1 return r_o # \u8fd4\u56de\u7684\u6743\u91cd\u8303\u56f4\u662f[-1~1] @staticmethod def backward ( ctx , dLdr_o ): # due to STE, dr_o / d_r_i = 1 according to formula (5) return dLdr_o , None # \u6539\u5584\u7248\u7684\u5bf9\u6fc0\u6d3b\u4e5f\u505a\u91cf\u5316\u9650\u5b9a class ActivateQuantizer ( Function ): @staticmethod def forward ( ctx , input , nbit ): return quantize_k ( input , nbit ) @staticmethod def backward ( ctx , grad_output ): return grad_output , None class DorafaConv2d ( nn . Conv2d ): def forward ( self , x , bitwidth = 8 ): w = self . weight bw = DoReFaQuant () . apply ( w , bitwidth ) # \u5bf9\u6743\u91cd\u8fdb\u884cDorafa\u91cf\u5316\u9650\u5b9a # \u5bf9x\u8fdb\u884c\u622a\u65ad(x\u622a\u65ad\u524d\u5148\u8fdb\u884c\u7f29\u653e\uff08* 0.1\uff09\uff0c\u76ee\u7684\u662f\u51cf\u5c0f\u622a\u65ad\u8bef\u5dee)\uff0c\u9002\u5e94\u4e8erelu\u6fc0\u6d3b\u7684\u51fd\u6570\uff0c\u5982\u679c\u662f\u4f7f\u7528PACT\u9650\u5b9a\u7684\u8bdd\uff0c\u5c31\u4e0d\u80fd\u7528\u4e86 x = ActivateQuantizer . apply ( torch . clamp ( 0.1 * input , 0 , 1 ), bitwidth ) output = F . conv2d ( x , bw , self . bias , self . stride , self . padding , self . dilation , self . groups ) return output","title":"\u5728\u7ebf\u91cf\u5316\u4e4b\u4e8c\u503c\u5316(BWN:Binary Weight Networks)"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#dbface","text":"\u4f18\u52bf:\u53ef\u4ee5\u4f7f\u7528\u591a\u5c3a\u5ea6\u8fd0\u7b97\u4e14\u65e0\u9700\u8ba1\u7b97 anchor (\u8017\u65f6), \u6570\u636e\u8f93\u5165 # 001.jpg #\u56fe\u7247\u540d x y w h lx1 ly1 lt1 lx2 ly2 lt2 ... # box\uff1ax,y,w,h landmark:\u5750\u6807(x1,y1),\u662f\u5426\u6709\u6548:t1 x y w h lx1 ly1 lt1 lx2 ly2 lt2 ... # 002.jpg .... \u9700\u8981\u6ce8\u610f\u7684\u70b9 \u9ad8\u65af\u70ed\u529b\u56fe\u8be6\u89e3:\u53ef\u4ee5\u7406\u89e3\u4e3a\u4e00\u4e2a\u76ee\u6807\u7528\u4e00\u4e2a\u9ad8\u65af\u5706\u8868\u793a\uff0c\u76ee\u6807\u6846\u4e2d\u5fc3\u70b9\u503c\u4e3a 1 \uff0c\u5982\u679c 1 \u5468\u56f4\u8bbe\u7f6e\u4e3a 0 \u5c31\u592a\u4e25\u683c\u4e86\uff0c\u6240\u4ee5\u4ee5\u8be5\u70b9\u4e3a\u5706\u5fc3\uff0c\u4ee5\u548c GT \u6846 IOU \u5927\u4e8e 0.7 \u7684\u8fd9\u4e9b\u70b9(\u8fd9\u4e9b\u70b9\u751f\u6210\u7684\u6846\u4e5f\u80fd\u5f88\u597d\u7684\u5305\u56f4\u76ee\u6807)\u4e3a\u534a\u5f84 r \uff0c\u91c7\u7528\u9ad8\u65af\u51fd\u6570\u751f\u6210\u6700\u7ec8\u7684\u7ed3\u679c\uff0c \u5982\u679c\u6709\u591a\u4e2a\u7c7b\u67d0\u4e00\u4e2a\u7c7b\u7684\u4e24\u4e2a\u9ad8\u65af\u5206\u5e03\u53d1\u751f\u4e86\u91cd\u53e0\uff0c\u76f4\u63a5\u53d6\u5143\u7d20\u95f4\u6700\u5927\u7684\u5c31\u53ef\u4ee5 anchor base \u7684\u7279\u6027\u662f\u76ee\u6807\u8d8a\u5927\u6b63\u7c7bloss\u8d21\u732e\u8d8a\u5927, anchor free \u7684\u7279\u6027\u662f\u6240\u6709\u76ee\u6807\u90fd\u4e00\u4e2a\u70b9\uff0c\u6b63\u7c7b\u8d21\u732e\u65e0\u8bba\u5927\u5c0f\u90fd\u4e00\u6837(\u4e00\u822c\u5bf9\u5c0f\u76ee\u6807\u8f83\u53cb\u597d)\uff0c\u6240\u4ee5\u5728\u591a\u5c3a\u5bf8\u76ee\u6807\u8bad\u7ec3\u4e2d\uff0c\u9700\u8981\u4f7f\u7528 pos_weights \u6765\u5904\u7406\uff0c\u589e\u52a0\u5927\u76ee\u6807\u7684\u6743\u91cd\u3002 \u5177\u4f53\u505a\u6cd5:\u8bbe\u7f6e\u9ad8\u65af\u6743\u91cd\u70ed\u529b\u56fe heatmap_posweight \uff0c\u5728\u6709\u5927\u5c3a\u5bf8\u7684\u76ee\u6807\u56fe\u7684\u70b9\u91c7\u7528\u9ad8\u65af\u5206\u5e03\u5706\uff0c\u5728\u8ba1\u7b97\u635f\u5931\u7684\u65f6\u5019\u76f4\u63a5\u548c loss \u76f8\u4e58\u6765\u589e\u5927\u5927\u76ee\u6807\u5728\u635f\u5931\u4e2d\u7684\u6743\u91cd\u5360\u6bd4\u3002 \u5bf9\u4e8e 12*12 \uff0c\u4f4e\u4e8e\u8fd9\u4e2a\u5206\u8fa8\u7387\u7684\u76f4\u63a5\u505a\u4e86\u8d1f\u6837\u672c\u505a\u6cd5\u662f\u4e0d\u5408\u7406\u7684\uff0c\u5408\u7406\u7684\u505a\u6cd5\u662f\u5ffd\u7565\uff0c\u4e0d\u5e94\u8be5\u5bf9 loss \u4ea7\u751f\u8d21\u732e \u5177\u4f53\u505a\u6cd5\u662f\u91c7\u7528 keep_mask \u56fe\uff0c\u4f4e\u4e8e 12*12 \u50cf\u7d20\u7684\u70b9\u7684\u5750\u6807\u76f4\u63a5\u7f6e\u4e3a 0 \uff0c\u5728\u8ba1\u7b97 loss \u7684\u65f6\u5019\u76f4\u63a5\u4e0e keep_mask \u56fe\u76f8\u4e58\uff0c\u5373\u4e0d\u53c2\u4e0e\u635f\u5931\u8d21\u732e\u4e14\u5bf9\u5e94\u7684\u4eba\u8138\u5173\u952e\u70b9\u4e5f\u4e0d\u4f1a\u53c2\u4e0e\u8ba1\u7b97\u635f\u5931\u503c\u3002 \u9ad8\u65af\u70ed\u529b\u56fe\u4f7f\u7528 Focal Loss \u6539\u7248\u8ba1\u7b97\u635f\u5931\uff0c\u9ed8\u8ba4 alpha=2,beta=4 \uff0c \u56f0\u96be\u6837\u4f8b\u6316\u6398 \u5bf9\u4e8e\u6b63\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y^=0.95 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 1-0.95 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y^=0.35 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 1-0.35 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u5bf9\u4e8e\u8d1f\u6837\u672c\u800c\u8a00\uff0c\u9884\u6d4b\u7ed3\u679c y^=0.05 \u80af\u5b9a\u662f\u7b80\u5355\u6837\u672c\uff0c 0.05 \u7684 alpha \u6b21\u65b9\u5c31\u5f88\u5c0f\uff0c\u635f\u5931\u51fd\u6570\u5c31\u5f88\u5c0f;\u5982\u679c y^=0.75 \u80af\u5b9a\u662f\u56f0\u96be\u6837\u672c\uff0c 0.75 \u7684 alpha \u6b21\u65b9\u76f8\u5bf9\u7b80\u5355\u6837\u672c\u4f1a\u8f83\u5927\uff0c\u635f\u5931\u4e5f\u4f1a\u76f8\u5bf9\u8f83\u5927\uff0c\u8fd9\u6837\u5c31\u4f1a\u66f4\u52a0\u5173\u6ce8\u56f0\u96be\u6837\u672c\u3002 \u4e0a\u9762\u63d0\u5230\u7684\u56f0\u96be\u6837\u672c\u6307\u4e24\u4e2a\u65b9\u9762: \u771f\u6b63\u56f0\u96be\u6837\u4f8b\uff0c Focal Loss \u4f1a\u589e\u5927\u8fd9\u6837\u6837\u672c\u5bf9\u635f\u5931\u7684\u8d21\u732e \u6837\u672c\u5206\u9519\u60c5\u51b5\uff0c\u5982\u679c\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\u4e0d\u5747\u8861\uff0c\u4e5f\u4f1a\u51fa\u73b0\u66f4\u591a\u7684\u6837\u672c\u88ab\u5206\u9519\uff0c\u6291\u5236\u8fd9\u79cd\u5206\u9519\u6837\u672c\u3002 class FocalLoss ( nn . Module ): def forward ( self , pred , gt , pos_weights , keep_mask = None ): pos_inds = gt . eq ( 1 ) . float () # \u7b49\u4e8e1 \u4e3a\u6b63\u6837\u672c neg_inds = gt . lt ( 1 ) . float () # \u5c0f\u4e8e1 \u4e3a\u8d1f\u6837\u672c # pos_weights:\u9ad8\u65af\u6743\u91cd\u56fe\uff0c\u8d1f\u6837\u672c\u5730\u65b9\u76f4\u63a5\u4e3a0\uff0c\u6b63\u6837\u672c\u4e2d\u95f4\u4e3a1\uff0c\u534a\u5f84r\u5185\u9ad8\u65af\u9012\u51cf pos_loss = torch . pow ( 1 - pred , 2 ) * torch . log ( pred ) * pos_weights neg_loss = torch . pow ( 1 - gt , 4 ) * torch . pow ( pred , 2 ) * torch . log ( 1 - pred ) * neg_inds if keep_mask is not None : pos_loss = ( pos_loss * keep_mask ) . sum () neg_loss = ( neg_loss * keep_mask ) . sum () # \u4f7f\u7528keep_mask\u56fe\u6765\u5ffd\u7565\u8d85\u5c0f\u6837\u672c\uff0c\u4e0d\u4f5c\u4e3a\u8d1f\u6837\u672closs else : pos_loss = pos_loss . sum () neg_loss = neg_loss . sum () return - ( pos_loss + neg_loss ) \u7f51\u7edc\u7ed3\u6784 def forward ( self , x ): # 1.\u9009\u53d60,2,7 block + \u8fdb\u5165block\u524d\u7684x(x=CBAModule(x)) s4 , s8 , s16 , s32 = self . bb ( x ) s32 = self . conv3 ( s32 ) # 2.\u4e0a\u91c7\u6837\u91c7\u7528\u7684\u662f\u53cc\u7ebf\u6027\u5dee\u503c+conv+bn+relu\uff0c\u6548\u679c\u4f18\u4e8e\u53cd\u5377\u79ef\u548c\u6700\u8fd1\u90bb\u3002 s16 = self . up0 ( s32 ) + self . connect2 ( s16 ) s8 = self . up1 ( s16 ) + self . connect1 ( s8 ) s4 = self . up2 ( s8 ) + self . connect0 ( s4 ) # 3.\u4f7f\u7528SSH\u8fdb\u884c\u5bf9\u878d\u5408\u540e\u7684\u7279\u5f81\u56fe\u8fdb\u884c\u5408\u5e76\u4e0a\u4e0b\u6587\u4fe1\u606f \u4e14 \u6269\u5927\u611f\u53d7\u91ce x = self . detect ( s4 ) # SSH # 4 \u9ad8\u65af\u70ed\u529b\u56fe\uff0c\u4eba\u8138\u6846\uff0clandmark\u6846\u90fd\u662f\u5728(H//4,W//4)\u7684\u7279\u5f81\u56fe\u4e0a\u8fdb\u884c\u7684,\u56de\u5230\u539f\u56fe\u9700\u8981*4 # 4.1 \u8f93\u51fa\u9ad8\u65af\u70ed\u529b\u56fe(N,1,H//4,W//4),sigmoid\u538b\u7f29\u5230[0,1],\u4f7f\u7528FocalLoss\u8ba1\u7b97\u635f\u5931\uff0c\u5e73\u8861\u6b63\u8d1f\u6837\u672c\u6bd4\u4f8b\uff0c\u5982\u679c\u662f\u591a\u4e2a\u7c7b(N,class_nums,H//4,W//4) heat_map = self . center ( x ) # conv->out_channels=1, heat_map = heat_map . sigmoid () # hm\u4f7f\u7528sigmoid\u538b\u7f29\u8303\u56f4[0,1] # 4.2 \u8f93\u51fa\u4eba\u8138\u6846(N,4,H//4,W//4)tlrb:\u5206\u522b\u662f\u8ddd\u79bb\u6846\u5de6\u4e0a\u89d2\u548c\u53f3\u4e0b\u89d2\u7684\u8ddd\u79bb\u3002GIoULoss\u4f18\u5316(\u4f18\u4e8eIOU,\u56e0\u4e3aIOU\u65e0\u6cd5\u4f18\u5316\u4e24\u7b50\u4e0d\u91cd\u53e0\u60c5\u51b5)\uff0c\u6743\u91cd\u5360\u6bd4\u4e3a5 box = self . box ( x ) # conv->out_channels=4 box = torch . exp ( box ) # \u8fdb\u4e00\u6b65\u5bf9\u6846\u8fdb\u884c\u589e\u5f3a\uff0c\u76ee\u7684\u662f\u62c9\u5f00\u5176\u5185\u5143\u7d20\u7684\u5dee\u8ddd\u3002 if self . has_landmark : # 4.3 \u8f93\u51fa5\u4e2a\u5173\u952e\u70b9(N,10,H//4,W//4),\u4f7f\u7528WingLoss\u8ba1\u7b97\u635f\u5931\uff0c\u4f7f\u5f97\u5173\u952e\u70b9\u66f4\u51c6\u786e landmark = self . landmark ( x ) return heat_map , box , landmark return heat_map , box \u6d4b\u8bd5 \u9ad8\u65af\u70ed\u529b\u56fe:\u7531\u4e00\u4e2a 3x3 max pool(stride=1) \u5904\u7406 heat_map \u83b7\u5f97**\u9ad8\u65af\u70ed\u70b9**(\u5373\u6700\u6709\u53ef\u80fd\u4e3a\u76ee\u6807\u7684\u4e2d\u5fc3\u5750\u6807)\uff0c\u53d6 top1000 \u8fdb\u884c\u540e\u5904\u7406\u3002\u7136\u540e\u4f7f\u7528 thresh=0.3 \u6765\u8fc7\u6ee4\u6389\u9ad8\u65af\u5206\u503c\u8f83\u4f4e\u7684\u70b9\uff0c\u627e\u5230\u9ad8\u65af\u5206\u503c\u8f83\u9ad8\u7684\u4e2d\u5fc3\u70b9\u5750\u6807( cx,cy )\u5373\u53ef \u4eba\u8138\u6846\u8f93\u51fa\u503c\uff0c\u6839\u636e\u9ad8\u5206\u7684\u9ad8\u65af\u70ed\u70b9\u4e2d\u5fc3\u70b9\u8ba1\u7b97\u5b9e\u9645\u4eba\u8138\u5750\u6807\u6846\uff0c\u7136\u540e\u4f7f\u7528 nms \u5904\u7406\u5373\u53ef( iou_thresh=0.3 )\uff0c\u7f51\u7edc\u8f93\u51fa\u7684\u5c31\u662f\u5b9e\u9645\u504f\u5dee\u503c\u3002 \u5982\u679c\u6709 landmark \uff0c\u548c\u4eba\u8138\u5750\u6807\u6846\u76f8\u4f3c\uff0c\u76f4\u63a5\u7528 (cx,cy)+=xxx \u6765\u83b7\u53d6\u5b9e\u9645\u5750\u6807\u503c\u5373\u53ef\uff0c\u7f51\u7edc\u8f93\u51fa\u7684\u5c31\u662f\u5b9e\u9645\u504f\u5dee\u503c\u3002 \u7f3a\u70b9 \uff1a\u4e24\u4e2a\u7269\u4f53\u5728GT\u4e2d\u7684\u4e2d\u5fc3\u70b9\u91cd\u53e0\u4e86\uff0c\u5c31\u53ea\u80fd\u9884\u6d4b\u4e00\u4e2a\u7269\u4f53\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u4e2d\u5fc3\u70b9\uff0c\u4f46\u5bf9\u4e8e\u95f8\u673a/\u95e8\u7981/\u95e8\u9501\u7b49\u66f4\u52a0\u5173\u6ce8\u5355\u4eba\u4eba\u8138\uff0c\u5982\u679c\u6392\u961f\u4eba\u80cc\u540e\u6709\u90e8\u5206\u4eba\u8138\u68c0\u6d4b\u4e0d\u5230\u624d\u662f\u6700\u597d\u7684\u3002","title":"\u4eba\u8138\u68c0\u6d4b(DBFace:\u6df1\u84dd\u79d1\u6280)"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#bn","text":"DBFace\u5728\u4f7f\u7528\u91cf\u5316\u5de5\u5177\u91cf\u5316\u65f6\u4f1a\u8fdb\u884cBN+Conv\u7684\u878d\u5408\uff0c\u878d\u5408\u516c\u5f0f\u5982\u4e0b","title":"BN\u5c42\u878d\u5408"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#repvggbinary","text":"\u4f7f\u7528\u7f51\u7edc Binary_Resnet18_0.25(channel/4,\u7ed3\u5c3efc),\u5f88\u591a\u5730\u65b9\u6709 3x3 \u5377\u79ef\uff0c\u53ef\u7528 repVGG \u2461\u589e\u5f3a,\u7279\u5f81\u56fe\u7f29\u5c0f2\u500d\u53ef\u7528 repVGG \u2460\u589e\u5f3a \uff1b\u4eba\u8138\u6846\u6269\u5145\u957f\u8fb9\u7684 1.2 \u500d\u4e14\u77ed\u8fb9\u8865\u9f50\u9047\u5230\u8fb9\u7f18\u505c\u6b62\uff0c\u5207\u56fe\u82e5\u4e0d\u662f\u6b63\u65b9\u5f62\u77ed\u8fb9\u5bf9\u79f0\u8865 127 \u5230\u6b63\u65b9\u5f62\u72b6---> resize=(128,128)--center crop-->(112,112) \u5728\u8bad\u7ec3\u65f6\u5019\u4f7f\u7528 B \u7ed3\u6784( \u8fd9\u79cd\u7ed3\u6784\u6709\u4e2a\u5f0a\u7aef:\u7ecf\u8fc7\u5377\u79ef\u540e\u7279\u5f81\u56fe\u5c3a\u5bf8\u4e0d\u80fd\u53d8\u5316,\u6240\u4ee5\u53ef\u4ee5\u7528\u5728\u4e0d\u6539\u53d8\u7279\u5f81\u56fe\u5927\u5c0f\u7684\u5377\u79ef\u4e0a )\uff0c\u5728\u63a8\u7406\u65f6\u628a\u6bcf\u5c42\u7684 3x3+1x1+x \u8fdb\u884c\u878d\u5408\uff0c\u7136\u540e\u518d\u8fdb\u884c\u63a8\u7406 3x3\u5377\u79ef+1x1\u5377\u79ef+Identity\u878d\u5408 :\u628a 1x1,Identity \u90fd\u53d8\u4e3a 3x3 \u5377\u79ef\u540e\u548c 3x3 \u5377\u79ef\u7684\u6743\u91cd\u76f8\u52a0\u8fdb\u884c\u878d\u5408\u5373\u53ef 3x3\u5377\u79ef p=1,s=1 \u8fd9\u6837\u7279\u5f81\u56fe\u5927\u5c0f\u662f\u6ca1\u53d8\u7684\uff0c 1x1\u5377\u79ef p=0,s=1 \u7279\u5f81\u56fe\u5927\u5c0f\u4e5f\u662f\u6ca1\u6709\u6539\u53d8\u7684\uff0c\u53ea\u9700\u8981\u628a 1x1\u5377\u79efpadding\u4e00\u57080\u53d8\u62103x3\u5377\u79ef\u6838 \uff0c\u7136\u540e return W_3x3+W_1x1_pad_3x3 \u5373\u53ef x->Identity->x \uff0c\u5982\u4f55\u53d8\u4e3a 3x3 \u5377\u79ef\u5462?\u5982\u679c\u662f\u6df1\u5ea6\u53ef\u5206\u79bb\u7684 1x1 \u5377\u79ef\uff0c\u6bcf\u4e2a\u901a\u9053\u7684\u503c\u90fd\u4e3a 1 \uff0c\u8fd9\u6837\u5c31\u80fd\u5b8c\u6210 Identity \u6548\u679c,( Depthwise\u5377\u79ef \u4e0d\u80fd\u878d\u5408\u666e\u901a\u5377\u79ef\uff0c\u5c31\u628a Depthwise\u5377\u79ef \u6539\u4e3a\u666e\u901a\u5377\u79ef\u5373\u53ef:\u7b2c\u4e00\u4e2a\u5377\u79ef\u6838\u7b2c\u4e00\u901a\u9053\u4e3a 1 \uff0c\u5176\u4ed6\u901a\u9053\u4e3a 0 );\u628a 1x1\u5377\u79efpadding\u4e00\u57080\u53d8\u62103x3\u5377\u79ef\u6838 \u7136\u540e\u518d\u548c\u524d\u4e24\u8005 kernel \u6743\u91cd\u76f8\u52a0\u5c31\u53ef\u4ee5\u4e86 \u8865\u5145:\u5377\u79ef\u8fc7\u7a0b \u5377\u79ef\u8ba1\u7b97\u516c\u5f0f: w = (w + 2p -fw)/s + 1","title":"RepVGG(Binary\u65e0\u6cd5\u4f7f\u7528)"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#rotate-andrender","text":"\u901a\u7528\u7684\u4eba\u8138\u65cb\u8f6c\u4e00\u822c\u662f\u57fa\u4e8e\u540c\u4e00\u4eba\u8138\u7684\u591a\u89c6\u89d2\u6570\u636e\u8bad\u7ec3\u76f4\u63a5\u751f\u6210\u65b0\u89c6\u89d2\uff0c\u4f46\u5bf9\u56fe\u50cf\u8d28\u91cf\u8981\u6c42\u9ad8(\u53d7\u5230\u56fe\u7247\u8d28\u91cf\u4ee5\u53ca\u6570\u636e\u5206\u5e03\u7684\u9650\u5236)\uff1b \u8fd9\u4e2a\u4f7f\u7528\u65e0\u76d1\u7763\u8bad\u7ec3:\u6446\u8131\u591a\u89c6\u89d2\u6570\u636e\uff0c\u4ec5\u4ec5\u9700\u8981\u5355\u5f20\u56fe\u7247\uff0c\u5229\u7528\u4e09\u7ef4\u4eba\u8138\u5efa\u6a21\uff0c\u901a\u8fc7\u53cd\u590d\u7684\u65cb\u8f6c\u548c\u6e32\u67d3\u64cd\u4f5c\u6784\u5efa\u81ea\u76d1\u7763(\u6e32\u67d3\u4ece\u4efb\u610f\u89d2\u5ea6\u65cb\u8f6c\u5230\u5f53\u524d\u89d2\u5ea6\u7684\u5e26\u906e\u6321\u4f2a\u5f71\u548c\u7455\u75b5\u7684\u4eba\u8138\uff0c\u4ece\u800c\u548c\u539f\u56fe\u6784\u5efa\u8bad\u7ec3\u6570\u636e\u5bf9)\uff0c\u7136\u540e\u7528\u4e00\u4e2a\u666e\u901a\u7684 pix2pix \u751f\u6210\u6700\u7ec8\u56fe\u50cf \u3002\u6ce8:\u4e09\u7ef4\u7a7a\u95f4\u5230\u4e8c\u7ef4\u56fe\u50cf\u7684\u989d\u6e32\u67d3\u662f\u7eb9\u7406\u6ce8\u518c\u7684\u9006\u5411\u8fc7\u7a0b Gan\u7f51\u7edc\u7684\u751f\u6210 : CycleGAN \u7684 ResBlock \u751f\u6210\u5668\uff0c\u4f7f\u7528 pix2PixHD \u7684 loss \u6765\u8bad\u7ec3\u9274\u522b\u5668\u3002 \u6574\u4f53\u7f51\u7edc\u7ed3\u6784( \u89d2\u5ea6[yaw,pitch]->[-90,90] )\u3002","title":"Rotate-andRender\u4eba\u8138\u65cb\u8f6c\u589e\u5f3a"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#roc","text":"\u6b63\u7c7b\u548c\u8d1f\u7c7b:\u5047\u8bbe\u9608\u503c\u4e3a 0.6 ,\u5f97\u5206\u5927\u4e8e\u7b49\u4e8e 0.6 \u7684\u4e3a\u6b63\u7c7b\uff0c\u5c0f\u4e8e 0.6 \u7684\u4e3a\u8d1f\u7c7b ROC \u66f2\u7ebf\u7684\u6a2a\u7eb5\u5750\u6807 \u7eb5\u5750\u6807 \u771f\u9633\u7387-TPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u6b63\u5360\u6240\u6709\u6b63\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=1/all(gt=1) \u6a2a\u5750\u6807 \u5047\u9633\u7387-FPR :\u9884\u6d4b\u4e3a\u6b63\u5b9e\u9645\u4e3a\u8d1f\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=1,gt=0/all(gt=0) \u771f\u9634\u7387-TNR=1-FPR :\u9884\u6d4b\u4e3a\u8d1f\u5b9e\u9645\u4e3a\u8d1f\u5360\u6240\u6709\u8d1f\u5b9e\u4f8b\u7684\u6bd4\u4f8b: p=0,gt=0/all(gt=0) \u6bcf\u4e2a\u9608\u503c\u4ee3\u8868\u4e00\u5bf9 (FPR,TPR) ,\u9608\u503c\u65e0\u7a77\u5927\u65f6\u9884\u6d4b\u65e0\u6b63\u4f8b FPR=TPR=0 \uff0c\u9608\u503c\u4e3a 0 \u65f6\u9884\u6d4b\u65e0\u8d1f\u4f8b FPR=TPR=1 ,\u4e00\u822c\u968f\u7740\u9608\u503c\u9010\u6e10\u589e\u5927\uff0c\u6b63\u4f8b\u8d8a\u6765\u8d8a\u5c11\uff0c\u6a2a\u5750\u6807\u51cf\u5c11\u7684\u66f4\u5feb \u5982\u4f55\u753b roc \u66f2\u7ebf\uff0c\u4e00\u822c\u9009\u53d6 range(0.1,1,0.001) \u5171\u8ba1 90 \u7ec4\u9608\u503c\uff0c\u8ba1\u7b97 AUC:(Area under Curve) \uff0c\u662f\u4e2a\u6982\u7387\u503c [0,1] ,\u8d8a\u5927\u5206\u7c7b\u6548\u679c\u8d8a\u597d\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528 ROC\u66f2\u7ebf \u800c\u4e0d\u4f7f\u7528 PR \u66f2\u7ebf\uff1f\u539f\u56e0: \u5f53\u6d4b\u8bd5\u96c6\u4e2d\u7684\u6b63\u8d1f\u6837\u672c\u7684\u5206\u5e03\u53d8\u6362\u7684\u65f6\u5019(\u4f8b\u5982\u8d1f\u6837\u672c\u6570\u91cf\u589e\u592710\u500d)\uff0cROC\u66f2\u7ebf\u80fd\u591f\u4fdd\u6301\u4e0d\u53d8,\u4f46\u662fPR\u66f2\u7ebf\u5de8\u53d8","title":"ROC\u66f2\u7ebf"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#_5","text":"backbone\uff1aMobileNetV1-0.5(avgpool+conv1x1 \u4ee3\u66fffc,fc\u6548\u679c\u7a0d\u5fae\u597d\u70b9\u4f46\u901f\u5ea6\u6162),0.5\u6307\u7684\u662f\u901a\u9053\u63a7\u5236\u7cfb\u6570\uff0c\u6700\u540e\u4e00\u5c42\u4f7f\u7528 1x1 \u5377\u79ef\u4ee3\u66ff fc \uff0c\u56e0\u4e3a\u4e0a\u5c42\u662f\u5168\u5c40\u5e73\u5747\u6c60\u5316\u5c42\uff0c10(\u5173\u952e\u70b9)+4(\u56db\u5143\u6570)\u4e2a\u503c\u7684\u56de\u5f52\uff0c\u4eba\u8138\u68c0\u6d4b 1.5 \u500d\u7684\u6269\u6846-\u9047\u5230\u8fb9\u7f18\u505c\u6b62-\u5207\u56fe-\u5bf9\u79f0\u88650\u5230\u6b63\u65b9\u5f62- rezie=(120,120) \u641e\u5b9a \u4f7f\u7528\u7684\u6570\u636e\u96c6 :\u89d2\u5ea6\u662f\u5f27\u5ea6\u5236,\u6b27\u62c9\u89d2\u90fd\u9650\u5b9a\u5728 [-100\u5ea6,100\u5ea6] \uff0c\u8f6c\u4e3a\u5f27\u5ea6\u8303\u56f4\u662f [-1.75,1.75] ,\u7531\u4e8e**\u6b27\u62c9\u89d2\u548c\u56db\u5143\u6570(\u8868\u793a\u5728\u4e00\u4e2a\u56db\u7ef4\u7a7a\u95f4\u7684\u8f68\u8ff9\u548c\u65b9\u5411\uff0c\u8303\u56f4[-1,1])\u53ef\u4ee5\u76f8\u4e92\u8f6c\u6362\uff0c\u76f4\u63a5\u56de\u5f52\u56db\u5143\u6570\u6548\u679c\u66f4\u597d** 300W-LP(large pose) :\u7531 300W(AFW,LFPW,HELEN,IBUG,XM2VTS\u7b49\u5408\u96c6) \u6570\u636e\u505a\u7684\u5927\u578b\u4eba\u8138\u59ff\u6001\u9884\u6d4b\u7684\u4e00\u4e2a\u7efc\u5408\u6570\u636e\u5e93\uff0c\u91cc\u9762\u5305\u542b 28 \u4e2a 2d \u5173\u952e\u70b9\u548c\u5934\u90e8\u59ff\u6001\u4fe1\u606f [pitch,yaw,roll] \uff0c\u5171\u8ba1 61225 \u5f20\u3002 AFLW2000 :\u7531 AFLW \u6570\u636e\u5e93\u7684\u524d 2000 \u5f20\u56fe\u7247\u53ca\u5176\u4e09\u7ef4\u4fe1\u606f\u7ec4\u6210\uff0c\u91cc\u9762\u5305\u542b 21 \u4e2a 2d \u5173\u952e\u70b9\u548c\u5934\u90e8\u59ff\u6001\u4fe1\u606f [pitch,yaw,roll] \uff0c\u5171\u8ba1 2000 \u5f20\u3002 # xxxx.jpg xxxx.mat # mat\u6587\u4ef6\u5177\u4f53\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a 1 \uff09 pt2d \uff1a 21 \u4e2a\u4e8c\u7ef4\u70b9 2 \uff09 Illum_Para \uff1a 1 \u00d7 10 \u5149\u7167\u53c2\u6570 3 \uff09 Color_Para \uff1a 1 \u00d7 7 \u989c\u8272\u53c2\u6570 4 \uff09 Tex_Para \uff1a 199 \u00d7 1 \u7eb9\u7406\u53c2\u6570 5 \uff09 Shape Para \uff1a 199 \u00d7 1 \u5f62\u72b6\u53c2\u6570 6 \uff09 Exp_Para \uff1a 29 \u00d7 1 \u8868\u60c5\u53c2\u6570 7 \uff09 Pose \uff1a 1 \u00d7 7 \u59ff\u6001\u53c2\u6570 \uff0c \u5206\u522b\u4e3a \uff1a pitch \uff0c yaw \uff0c roll \uff0c translation ( dx \uff0c dy \uff0c dz ) \uff0c scale 8 \uff09 pt3d_68 \uff1a 3 \u00d7 68 \u4e09\u7ef4\u7279\u5f81\u70b9 import scipy.io as sio mat_dict = sio . loadmat ( mat_path ) mat_dict [ 'pt2d' ] # \u83b7\u5f97\u7684\u662f\u539f\u56fe\u768421\u4e2a\u5173\u952e\u70b9 mat_dict [ 'Pose' ][ 0 ,: 3 ] # \u83b7\u53d6pitch,yaw,roll \u4e09\u4e2a\u6b27\u62c9\u89d2\uff0c\u539f\u59cb\u662f\u5f27\u5ea6\u503c Wing Loss \u4e00\u822c\u800c\u8a00\u4eba\u8138\u5173\u952e\u70b9 loss \u5c1d\u5c1d\u662f l2 loss \u6216\u8005 smooth l2 loss ,\u4f46\u662f\u5c1d\u5c1d\u56e0\u4e3a**\u4eba\u8138\u59ff\u6001\u89d2\u5ea6\u591a\u6837**\u800c\u5bfc\u81f4\u7684\u68c0\u6d4b\u7cbe\u5ea6\u4e0d\u9ad8\uff0c\u4f7f\u7528 wing loss \u53ef\u4ee5\u5f88\u597d\u89e3\u51b3\u79bb\u7fa4\u70b9( large error )\u95ee\u9898\u548c small error \u95ee\u9898\u3002 L2 loss \u6216\u8005 smooth l2 loss \u5728 0 \u9644\u8fd1( small error )\u7684 gradient \u53d8\u5316\u8d8b\u4e8e\u5e73\u7f13\u7684\uff0c\u66f4\u4e0d\u5bb9\u6613\u4f18\u5316\uff1b\u800c\u4e14 L2 loss \u5f88\u5bb9\u6613\u53d7\u79bb\u7fa4\u70b9( large error )\u5f71\u54cd wing loss \u5206\u6bb5\u51fd\u6570\uff0c\u5f53\u4e24\u70b9\u8ddd\u79bb\u8fc7\u8fdc\u65f6\uff0c\u4e3a\u4e86\u907f\u514d loss \u8fc7\u5927( large loss )\u4f7f\u7528 |x| - C \u6765\u9650\u5b9a loss \u4e0d\u8981\u8fc7\u5927\uff1b\u5f53 |x|<w \u65f6\uff0c small error \u65f6\u4f7f gradient \u53d8\u5316\u9661\u5ced\uff0c\u4f7f\u5f97\u6a21\u578b\u53ef\u4ee5\u7ee7\u7eed\u4f18\u5316\u3002 wing :\u7fc5\u8180\uff0c\u8bba\u6587\u4e2d\u6ca1\u6709\u89e3\u91ca\u547d\u540d\u4e3a\u6b64\u7684\u542b\u4e49\uff0c\u4f46\u770b loss \u50cf\u9e1f\u7684\u7fc5\u8180\u4e00\u6837\u3002 \u56de\u5f52\u8bc4\u4ef7\u6307\u6807 \u5e73\u5747\u7edd\u5bf9\u503c\u8bef\u5dee(MAE) \uff0c\u5934\u90e8\u59ff\u6001: 3ddfa_AFLW2000@7.393_best3.83->6.42 \uff1b\u4eba\u8138\u5173\u952e\u70b9\u68c0\u6d4b: 3ddfa_AFLW2000_21pts@8.250_best@4.70->5pts@2.385 \u5747\u65b9\u8bef\u5dee(MSE) \u5747\u65b9\u6839\u8bef\u5dee(RMSE)","title":"\u4eba\u8138\u5173\u952e\u70b9\u548c\u5934\u90e8\u59ff\u6001"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#_6","text":"fp32\u3001fp16\u3001int8 \u7f16\u7801\u5b58\u50a8\u65b9\u5f0f\u4e0d\u540c \uff1a FP32 \u5360\u7528 4 \u5b57\u8282\u7f16\u7801\uff0c\u5171 32 \u4f4d\uff0c\u5176\u4e2d 1 \u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c 8 \u4e3a\u6307\u6570\u4f4d\uff0c 23 \u4e3a\u5c3e\u6570\u4f4d FP16 \u5360\u7528 2 \u5b57\u8282\u7f16\u7801\uff0c\u5171 16 \u4f4d\uff0c\u5176\u4e2d 1 \u4f4d\u4e3a\u7b26\u53f7\u4f4d\uff0c 5 \u4e3a\u6307\u6570\u4f4d\uff0c 10 \u4e3a\u5c3e\u6570\u4f4d int8 \uff0c\u516b\u4f4d\u6574\u578b\u5360\u7528 1 \u4e2a\u5b57\u8282\uff0c\u5171 8 \u4f4d \u8bad\u7ec3\u65f6\u4e3a\u4ec0\u4e48\u7528 fp32 \uff1a fp16 \u7684\u503c\u533a\u95f4\u6bd4 fp32 \u7684\u503c\u533a\u95f4\u5c0f\u5f88\u591a\uff0c\u867d\u7136\u8bad\u7ec3\u5f88\u5feb\uff0c\u4f46 fp16 \u5728\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u5f88\u5bb9\u6613\u51fa\u73b0**\u6ea2\u51fa\u9519\u8bef:\u4e0a\u6ea2\u51fa(>65504)\u548c\u4e0b\u6ea2\u51fa(<6x10^-8)** TensorRT-int8\u91cf\u5316(\u5bf9\u79f0\u91cf\u5316) \u6a21\u578b\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u9488\u5bf9\u6743\u91cd Weight \u91cf\u5316\uff0c\u4e00\u662f\u9488\u5bf9\u6fc0\u6d3b\u503c Activation \u91cf\u5316\uff0c\u5c06\u6743\u91cd\u548c\u6fc0\u6d3b\u503c\u91cf\u5316\u5230 8bit \u7528\u4e8e\u7b49\u4ef7 32bit \u7684\u6027\u80fd \u4f7f\u7528\u91cf\u5316\u6821\u51c6\u96c6\u8fdb\u884c\u6a21\u578b\u6fc0\u6d3b\u503c\u5206\u5e03\u7684\u7edf\u8ba1 \uff0c\u786e\u5b9a\u6fc0\u6d3b\u5c42\u7684\u91cf\u5316\u53c2\u6570\u7684\u65b9\u5f0f(\u6bcf\u5c42\u90fd\u8981\u7edf\u4e00\u591a\u4e2a\u6837\u672c)\u3002 \u6700\u7b80\u5355\u7684\u91cf\u5316\uff0c\u4e00\u5f20\u5f52\u4e00\u5316\u7684\u56fe\u7247 [0,1]->[0,255] \uff0c\u5176\u5b9e\u5c31\u662f\u7cfb\u6570\u7684\u7f29\u653e\u3002 \u5982\u4f55\u9009\u53d6\u6700\u5408\u9002\u7684scale factor\u503c\uff1f \u6620\u5c04\u53c2\u6570 -|max|->-127,|max|->127 \uff0c\u4e5f\u5c31\u662f\u628a\u53c2\u6570\u7684\u7edd\u5bf9\u503c\u6700\u5927\u503c\u5f53\u505a\u9608\u503c\uff1b\u6709\u4e2a\u95ee\u9898\uff0c\u5f53\u53c2\u6570\u7684\u5206\u5e03\u4e0d\u5747\u5300\u65f6\uff0c\u6709\u4e00\u90e8\u5206\u662f\u7a7a\u7f3a\u7684(\u4f8b\u5982:\u6fc0\u6d3b\u503c\u5168\u4e3a\u6b63)\uff1b\u6240\u4ee5\u5e38**\u9009\u62e9\u5408\u9002\u7684\u9608\u503cT,\u5c06 \u00b1|T| \u6620\u5c04\u4e3a\u00b1127 ,\u8d85\u51fa \u9608\u503c \u00b1|T| \u5916\u7684\u76f4\u63a5\u52a0\u5230\u622a\u65ad\u533a\u5185\u6700\u540e\u4e00\u4e2a\u503c** \u622a\u65ad\u533a( -T~T )\u4e4b\u5916\u7684\u503c\u4e3a\u4ec0\u4e48\u8981\u52a0\u5230\u622a\u65ad\u533a\u5185\u6700\u540e\u4e00\u4e2a\u503c\u5462\uff1f( \u9608\u503c\u8fd8\u662f\u90a3\u4e2a\u9608\u503c\uff0c\u5c31\u662f\u8ba1\u7b97\u7684\u65f6\u5019\u52a0\u5230\u6700\u540e\u4e00\u503c\u4e0a\u5c31\u884c\uff0c\u9608\u503c\u662f\u4e0d\u6539\u53d8\u7684 ) \u4e00\u662f\u6c42 P \u7684\u6982\u7387\u5206\u5e03\u65f6\uff0c\u9700\u8981\u603b\u7684 P \u603b\u503c. \u4e8c\u5c06\u622a\u65ad\u533a\u4e4b\u5916\u7684\u52a0\u5230\u622a\u65adP\u7684\u6700\u540e\uff0c\u8fd9\u6837\u662f\u5c3d\u53ef\u80fd\u5730\u5c06\u622a\u65ad\u540e\u7684\u4fe1\u606f\u7ed9\u52a0\u8fdb\u6765\u3002 \u6700\u4f18\u9608\u503c T \u5982\u4f55\u5bfb\u627e\uff1f \u4fdd\u8bc1\u91cf\u5316\u524d\u540e\u5206\u5e03\u5dee\u5f02\u6700\u5c0f\u5373\u53ef:KL\u6563\u5ea6(\u76f8\u5bf9\u71b5:\u7528\u6765\u8861\u91cf\u4e24\u4e2a\u6982\u7387\u5206\u5e03\u4e4b\u95f4\u7684\u5dee\u5f02)\uff0c\u6240\u4ee5\u4f7f\u5f97KL\u6563\u5ea6\u6700\u5c0f\u5373\u53ef(\u7528\u6765\u8868\u793aint8,fp32\u503c\u5206\u5e03\u4e4b\u95f4\u7684\u4fe1\u606f\u4e22\u5931\u7a0b\u5ea6) \uff0c\u8fd9\u6837\u5c31\u628a\u95ee\u9898\u8f6c\u4e3a\u6c42 int8 \u6982\u7387\u548c fp32 \u6982\u7387\uff0c\u7136\u540e\u7528 KL\u6563\u5ea6\u4f5c\u4e3a\u6307\u6807 \u9009\u53d6\u6700\u4f18\u9608\u503c |T| \u5373\u53ef\u3002 int8 \u662f\u79bb\u6563\u70b9\uff0c\u4e24\u503c\u4e4b\u95f4\u6700\u5c0f\u503c\u662f 1 \uff0c\u76f4\u63a5\u4f7f\u7528\u76f4\u65b9\u56fe hist \u6765\u7edf\u8ba1\u5404\u4e2a\u533a\u95f4\u5185\u6709\u591a\u5c11\u4e2a\u70b9\u51fa\u73b0\u5373\u53ef\u3002\u4f8b\u5982 int8=[1,2,3,4,5] \u5728[1,1,4]\u533a\u95f4\u51fa\u73b01\u6b21\uff0c\u5728[1.4,1.8]\u533a\u95f4\u51fa\u73b00\u6b21,...,\u5728[4.6,5]\u51fa\u73b01\u6b21\uff0c\u533a\u95f4\u8ddd\u79bb\u4e3a0.4 fp32 \uff0c\u4e24\u503c\u4e4b\u95f4\u6700\u5c0f\u503c\u662f\u65e0\u7a77\u5c0f\uff0c\u90a3\u4e48\u5982\u4f55\u9009\u62e9 \u5408\u9002\u7684\u533a\u95f4\u8ddd\u79bb \u5462\uff1f\u7531\u4e8e\u8981\u9009\u62e9\u5408\u9002\u7684\u9608\u503c T \uff0c NVIDAIA \u63a8\u8350\u4f7f\u7528 2048 \u4e2a bins \uff0c\u8fd9\u6837\u533a\u95f4\u8ddd\u79bb= [max(x)-min(x)]/bins \uff0c\u8fd9\u6837\u91c7\u7528\u904d\u5386 128bin-2047bin \u6765\u786e\u5b9a\u5408\u9002\u7684\u9608\u503c T ( bin \u7684\u4e2d\u95f4\u503c\u4f5c\u4e3a\u9608\u503c)\uff0c\u4f7f\u5f97\u901f\u5ea6\u4e0d\u662f\u7279\u522b\u6162\uff0c\u7cbe\u5ea6\u4e5f\u4f1a\u8f83\u9ad8\uff0c \u6ce8\u610f\u5e38\u7528min(abs(x))~max(abs(x))\u5728\u6b64\u533a\u95f4\u5185\u8fdb\u884c2048bins \u3002 \u4e3a\u4ec0\u4e48\u4e0d\u8ba1\u7b97 0bin-127bin \uff1f\u5982\u679c\u6700\u4f73\u9608\u503c T \u5728 [0bin,127bin] \u90a3\u4e48\u8d85\u8fc7 T \u7684\u503c\u5c31\u76f4\u63a5\u622a\u65ad\uff0c\u7136\u540e\u76f4\u63a5\u4e00\u4e00\u6620\u5c04\u5c31\u597d\u4e86\u4f46\u635f\u5931\u4e00\u5b9a\u8fc7\u5927\u3002 \u8fd4\u56de\u4e00\u7cfb\u5217 |T| \u503c\uff0c\u6bcf\u4e00\u5c42\u90fd\u6709\u4e00\u4e2a |T| \u3002\u521b\u5efa CalibrationTable:[k\u00e6l\u026a'bre\u026a\u0283(\u0259)n]\u6821\u51c6 \uff0c\u7136\u540e\u628a\u8d85\u8fc7\u9608\u503c |T| \u540e\u7684\u76f4\u63a5\u622a\u65ad \u63d2\u503c \u6700\u8fd1\u90bb\u63d2\u503c(\u65b0\u56fe\u5750\u6807\u70b9\u586b\u5145\u9644\u8fd1\u4e34\u8fd1\u70b9),\u5bf9\u5e94\u5750\u6807\u516c\u5f0f(\u539f\u56fe src ,\u65b0\u56fe det ) src_x = det_x/det_w * src_x ; src_y = det_y/det_h * srcy \u53cc\u7ebf\u6027\u63d2\u503c(\u539f\u56fe\u56db\u70b9\u8ba1\u7b97\u65b0\u56fe1\u70b9)\uff0c\u5750\u6807\u70b9\u7684\u5bfb\u627e\u5c31\u6309\u7167\u6700\u8fd1\u90bb\u5373\u53ef\u3002 pytorch\u7684\u94a9\u5b50\u51fd\u6570 # 1.register_forward_hook\uff0c\u83b7\u53d6\u524d\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u5404\u4e2a\u7f51\u7edc\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa\uff0c\u53ef\u5bf9\u8f93\u5165\u548c\u8f93\u51fa\u8fdb\u884c\u4fee\u6539 total_feat_out = [] total_feat_in = [] def hook_fn_forward ( m , input , output ): print ( \"model module:\" , m ) total_feat_out . append ( output ) total_feat_in . append ( input ) for name , module in model . named_children (): module . register_forward_hook ( hook_fn_forward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u8f93\u5165\u548c\u8f93\u51fa # 2.register backward hook,\u83b7\u53d6\u795e\u7ecf\u7f51\u7edc\u53cd\u5411\u4f20\u64ad\u8fc7\u7a0b\u4e2d\uff0c\u64cd\u4f5c\u5404\u4e2a\u6a21\u5757\u8f93\u5165\u7aef\u548c\u8f93\u51fa\u7aef\u7684\u68af\u5ea6\u503c total_grad_out = [] total_grad_in = [] def hook_fn_backward ( m , grad_input , grad_output ): print ( \"model module:\" , m ) total_grad_in . append ( grad_input ) total_grad_out . append ( grad_output ) for name , module in model . named_children (): module . register_backward_hook ( hook_fn_backward ) # \u8fd9\u6837\u4f1a\u6536\u96c6\u6bcf\u4e2a\u6a21\u5757\u7684\u68af\u5ea6\u8f93\u5165\u548c\u8f93\u51fa # 3.pytorch\u81ea\u5b9a\u4e49\u65b0\u5c42 # 3.1 \u7ee7\u627f torch.nn.Module,\u5b9e\u73b0__init__\u548cforward\u51fd\u6570\u5373\u53ef # 3.2 \u7ee7\u627f torch.autograd.Function,\u5b9e\u73b0__init__\u548cforward\u51fd\u6570\u8fd8\u6709backward\uff0c\u5982\u679c\u8981\u81ea\u5b9a\u4e49\u6c42\u5bfc\u89c4\u5219(\u4f8b\u5982\u4e8c\u503c\u5316\u7f51\u7edc\u6709\u4e9b\u4e0d\u53ef\u5bfc\u51fd\u6570)\uff0c\u5c31\u8981\u7528\u7740\u4e2a\u65b9\u6cd5. class BinActive ( torch . autograd . Function ): ''' Binarize the input activations for ***** BNN and XNOR *****. ''' @staticmethod def forward ( ctx , input ): ctx . save_for_backward ( input ) input = input . sign () # \u4f7f\u7528y=x\u51fd\u6570\u62df\u5408\u68af\u5ea6 return input @staticmethod def backward ( ctx , grad_output , ): input , = ctx . saved_tensors grad_input = grad_output . clone () # \u5f00\u5c71\u4e4b\u4f5cBNN\u4e2d\u6fc0\u6d3b\u503c:\u5f53sign\u51fd\u6570\u7684\u8f93\u5165\u7684\u7edd\u5bf9\u503c\u5927\u4e8e1\u7684\u65f6\u5019\uff0c\u5c06\u68af\u5ea6\u7f6e0\u53ef\u4ee5\u5f97\u5230\u66f4\u597d\u7684\u5b9e\u9a8c\u7ed3\u679c\u3002 grad_input [ input . ge ( 1 )] = 0 grad_input [ input . le ( - 1 )] = 0 # \u6700\u7ec8\u7684\u68af\u5ea6\u7ed3\u679c\u5c31\u662fsign\u51fd\u6570\u7684\u68af\u5ea6\u8ba1\u7b97\u4f7f\u7528clip(-1,x,1)\u51fd\u6570\u6765\u62df\u5408 return grad_input # 3.1 \u5e94\u7528 class BWNConv2d ( nn . Conv2d ): def __init__ ( self , in_channels , out_channels , kernel_size , stride = 1 , padding = 0 , dilation = 1 , groups = 1 , bias = True , padding_mode = 'zeros' ): super ( BWNConv2d , self ) . __init__ ( in_channels , out_channels , kernel_size , stride , padding , dilation , groups , bias , padding_mode ) nn . init . xavier_uniform_ ( self . weight ) def forward ( self , x ): w = self . weight alpha = torch . mean ( torch . mean ( torch . mean ( abs ( w ), dim = 3 , keepdim = True ), dim = 2 , keepdim = True ), dim = 1 , keepdim = True ) . detach () bw = BinActive () . apply ( w ) # \u76f4\u63a5\u628a\u6743\u91cd\u5f04\u6210[-1,1],\u5f53\u7136torch.nn.Module\u4e5f\u53ef\u4ee5\u5b9e\u73b0\uff0c\u4f46\u662f\u6c42\u5bfc\u65b9\u5f0f\u5c31\u6309\u7167\u9ed8\u8ba4\u6c42\u5bfc\u65b9\u5f0f\u8d70\u4e86\u3002 bw = bw * alpha output = F . conv2d ( x , bw , self . bias , self . stride , self . padding , self . dilation , self . groups ) return output","title":"\u91cf\u5316"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#pact","text":"\u6a21\u578b\u91cf\u5316\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u4e00\u662f\u5bf9\u6743\u91cdWeight\u91cf\u5316\uff0c\u4e00\u662f\u9488\u5bf9\u6fc0\u6d3b\u503cActivation\u91cf\u5316\u3002\u540c\u65f6\u5bf9\u4e24\u90e8\u5206\u8fdb\u884c\u91cf\u5316\uff0c\u624d\u80fd\u83b7\u5f97\u6700\u5927\u7684\u8ba1\u7b97\u6548\u7387\u6536\u76ca\u3002\u6743\u91cd\u53ef\u4ee5\u501f\u52a9\u7f51\u7edc\u6b63\u5219\u5316\u7b49\u624b\u6bb5\uff0c\u8ba9\u6743\u91cd\u5206\u5e03\u5c3d\u91cf\u7d27\u51d1\uff0c\u51cf\u5c11\u79bb\u7fa4\u70b9\u3001\u4e0d\u5747\u5300\u5206\u5e03\u60c5\u51b5\u53d1\u751f\uff0c\u800c\u5bf9\u4e8e\u6fc0\u6d3b\u503c\u8fd8\u7f3a\u4e4f\u6709\u6548\u7684\u624b\u6bb5\uff0c\u800c\u4e14\u79bb\u7ebf\u91cf\u5316\u65f6\uff0c\u65e0\u8bba\u662f\u5bf9\u79f0\u91cf\u5316\u8fd8\u662f\u975e\u5bf9\u79f0\u91cf\u5316\uff0c\u90fd\u4f1a\u53d7\u5230**\u79bb\u7fa4\u70b9\u3001float\u53c2\u6570\u5206\u5e03\u4e0d\u5747\u5300\u7684\u5f71\u54cd**\uff0c\u9020\u6210\u91cf\u5316\u635f\u5931\u589e\u52a0\u3002 PACT:parameterized clipping activation \u8be6\u89e3: \u901a\u8fc7\u5728\u91cf\u5316\u6fc0\u6d3b\u503c\u4e4b\u524d\u53bb\u6389\u4e00\u4e9b\u79bb\u7fa4\u70b9 \uff0c\u5c06\u6a21\u578b\u91cf\u5316\u5e26\u6765\u7684\u7cbe\u5ea6\u635f\u5931\u964d\u5230\u6700\u4f4e\uff0c\u751a\u81f3\u6bd4\u539f\u6a21\u578b\u51c6\u786e\u7387\u66f4\u9ad8\u3002 \u4f5c\u8005\u53d1\u73b0\uff0c\u5728\u91cf\u5316\u65f6\u6fc0\u6d3b\u503c\u7684\u91cf\u5316\u7ed3\u679c\u548c\u5168\u7cbe\u5ea6\u7ed3\u679c\u76f8\u5dee\u8f83\u5927\uff0c\u5206\u6790\u539f\u56e0\u53d1\u73b0\uff1a\u76f8\u8f83\u4e8e weight \u57fa\u672c\u5728 0\u52301 \u8303\u56f4\u5185\uff0c activation \u7684\u503c\u7684\u8303\u56f4\u662f\u65e0\u9650\u5927\u7684\uff0c\u8fd9\u662f RELU \u7684\u7ed3\u679c\uff1b\u6240\u4ee5\u63d0\u51fa**\u622a\u65ad\u5f0fRELU**\u7684\u6fc0\u6d3b\u51fd\u6570\u3002\u8be5\u622a\u65ad\u7684\u4e0a\u754c\uff0c\u5373 \u03b1 \u662f\u53ef\u5b66\u4e60\u7684\u53c2\u6570\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u6bcf\u5c42\u80fd\u591f\u901a\u8fc7\u8bad\u7ec3\u5b66\u4e60\u5230\u4e0d\u4e00\u6837\u7684\u91cf\u5316\u8303\u56f4\uff0c\u6700\u5927\u7a0b\u5ea6\u964d\u4f4e\u91cf\u5316\u5e26\u6765\u7684\u820d\u5165\u8bef\u5dee\uff08\u8fd9\u6837\u4f7f\u5f97\u6a21\u578b\uff0c\u4e0d\u65ad\u88c1\u526a\u6fc0\u6d3b\u503c\u8303\u56f4\uff0c\u4f7f\u5f97\u6fc0\u6d3b\u503c\u5206\u5e03\u6536\u7a84\uff0c\u4ece\u800c\u964d\u4f4e\u91cf\u5316\u6620\u5c04\u635f\u5931\uff09\u3002 \u5176\u5b9e\u5c31\u662f\u7528 PACT \u51fd\u6570\u4ee3\u66ff ReLU \u51fd\u6570\u5373\u53ef\u3002 PaddleSlim \u6539\u8fdb\u7248\u2014\u2014PACT\u91cf\u5316\u5b9e\u73b0:\u4f46\u662f\u5728\u5b9e\u9645\u4f7f\u7528\u4e2d\uff0c\u5c06\u8981\u8fdb\u884c\u91cf\u5316\u7684\u6fc0\u6d3b\u503c\u4e0d\u4e00\u5b9a\u6765\u81ea ReLU \u6fc0\u6d3b\u51fd\u6570 import paddle class PACT ( paddle . nn . Layer ): def __init__ ( self ): super ( PACT , self ) . __init__ () alpha_attr = paddle . ParamAttr ( name = self . full_name () + \".pact\" , initializer = paddle . nn . initializer . Constant ( value = 20 ), learning_rate = 1000.0 ) self . alpha = self . create_parameter ( shape = [ 1 ], attr = alpha_attr , dtype = 'float32' ) def forward ( self , x ): out_left = paddle . nn . functional . relu ( x - self . alpha ) out_right = paddle . nn . functional . relu ( - self . alpha - x ) x = x - out_left + out_right return x \u4eba\u8138\u68c0\u6d4b-backbone:mobilenetv3\u91cf\u5316\u635f\u5931\u8fc7\u5927 DBFace \u4f7f\u7528\u5728\u7ebf\u91cf\u5316\u7684\u5f62\u5f0f\uff0c\u5377\u79ef\u4f7f\u7528 BWN \u4e8c\u503c\u5316\u91cf\u5316( DorafaNet \u7684\u76ee\u7684\u662f\u628a\u5377\u79ef\u53c2\u6570\u9650\u5b9a\u5728\u9002\u5408 k_bit \u91cf\u5316\u7684 [-1,1] \u4e4b\u95f4\u7684\u6570\uff0c\u548c\u4e8c\u503c\u5316\u53c2\u6570\u7684\u76ee\u6807\u91cd\u53e0\u4e86)\uff0c relu \u6539\u4e3a PACT \u5373\u53ef\uff0c\u8fdb\u884c int8 \u91cf\u5316\u7684\u65f6\u5019\u4e5f\u7b80\u5355(\u7c7b\u4f3c relu6 ): float:conv1->relu6->conv1 ;\u524d\u5411\u7edf\u8ba1\u91cf\u5316\u7cfb\u6570 conv1_int8->s1,conv2_int8->s2 ; conv1_int8*s1=conv1_float--->relu6--->conv2_int8*s2=conv2_float \uff0c\u539f\u7406\u5c31\u662f**\u53cd\u91cf\u5316->relu6->\u91cf\u5316**\uff0c\u5176\u5b9e\u662f\u53ef\u4ee5\u5408\u5e76\u7684 clip(clip(conv1_int8*s1,0,6)/s2,0,255) \uff0c \u6ce8\u610f:\u5377\u79ef\u4e2d\u5e76\u6ca1\u6709 clip \u5c42 \u3002 MobileNetV3 \uff0c\u4f5c\u4e3a MobileNet \u7cfb\u5217\u6a21\u578b\u7684\u96c6\u5927\u6210\u8005,\u7ed3\u5408\u4e86 MobileNet V1 \u7684**\u6df1\u5ea6\u53ef\u5206\u79bb\u5377\u79ef**+ MobileNetV2 \u7684**\u7ebf\u6027\u74f6\u9888\u7684\u5012\u6b8b\u5dee\u7ed3\u6784**+ SE\u6ce8\u610f\u529b\u6a21\u5757 \uff0c\u4e14\u7ed3\u5408\u91c7\u7528\u795e\u7ecf\u7f51\u7edc\u641c\u7d22\u7684\u65b9\u6cd5\u3002\u4f46\u6b64\u6a21\u578b\u5bf9\u79bb\u7ebf\u91cf\u5316\u6216\u5728\u7ebf\u91cf\u5316\u6781\u4e3a\u654f\u611f\uff0c\u5e26\u6765\u7684\u7cbe\u5ea6\u635f\u5931\u90fd\u5f88\u5927\uff0c\u51e0\u4e4e\u8fbe\u5230\u4e86\u4e0d\u53ef\u7528\u7684\u7a0b\u5ea6\u3002\u4f46\u4f7f\u7528 PACT \u53ef\u4ee5\u5f88\u597d\u7684\u89e3\u51b3\u8be5\u95ee\u9898","title":"\u5728\u7ebf\u91cf\u5316(PACT)"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#msrcr","text":"SSR(Single Scale Retinex) I(x,y) \u4ee3\u8868\u88ab\u89c2\u5bdf\u6216\u7167\u76f8\u673a\u63a5\u6536\u5230\u7684\u56fe\u50cf\u4fe1\u53f7( \u6697\u56fe )\uff1b L(x,y) \u4ee3\u8868\u73af\u5883\u5149\u7684\u7167\u5c04\u5206\u91cf( \u901a\u8fc7\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u9ad8\u65af\u6a21\u7cca/\u5747\u503c\u6a21\u7cca\u5f97\u5230 ) ; R(x,y) \u8868\u793a\u643a\u5e26\u56fe\u50cf\u7ec6\u8282\u4fe1\u606f\u7684\u76ee\u6807\u7269\u4f53\u7684\u53cd\u5c04\u5206\u91cf ( \u589e\u5f3a\u56fe )\u3002 Log[R(x,y)] \u91cf\u5316\u4e3a 0\u5230255 \u8303\u56f4\u7684\u50cf\u7d20\u503c\uff0c\u4f5c\u4e3a\u6700\u7ec8\u7684\u8f93\u51fa R(x,y) = ( Value - Min ) / (Max - Min) * (255-0) MSR(Multi-Scale Retinex) \u8bba\u6587\u4e2d\u8bf4\u4e0a\u9762\u9ad8\u65af\u6a21\u7cca\u65f6\uff0c\u5c3a\u5ea6\u53d6\u503c\u8f83\u5c0f\u65f6\uff0c \u80fd\u591f\u8f83\u597d\u5730\u5b8c\u6210\u52a8\u6001\u8303\u56f4\u7684\u538b\u7f29\uff0c\u6697\u533a\u57df\u7684\u7ec6\u8282\u80fd\u5f97\u5230\u8f83\u597d\u5730\u589e\u5f3a\uff0c\u4f46\u8f93\u51fa\u989c\u8272\u6613\u5931\u771f\uff1b\u53d6\u503c\u8f83\u5927\u65f6\uff0c\u8272\u611f\u4e00\u81f4\u6027\u8f83\u597d\uff0c\u6240\u4ee5\u4e00\u822c\u53d6\u4e09\u4e2a\u5c3a\u5ea6\u6765\u8fdb\u884c\u591a\u5c3a\u5ea6\u3002 \u9700\u8981\u5bf9\u539f\u59cb\u56fe\u50cf\u8fdb\u884c\u6bcf\u4e2a\u5c3a\u5ea6\u7684\u9ad8\u65af\u6a21\u7cca\uff0c\u5f97\u5230\u6a21\u7cca\u540e\u7684\u56fe\u50cf Li(x,y) ,\u5176\u4e2d\u5c0f\u6807i\u8868\u793a\u5c3a\u5ea6\u6570. Log[R(x,y)] = Weight(i)* ( Log[Ii(x,y)]-Log[Li(x,y)]); \u5176\u4e2d Weight(i) \u8868\u793a\u6bcf\u4e2a\u5c3a\u5ea6\u5bf9\u5e94\u7684\u6743\u91cd\uff0c\u8981\u6c42\u5404\u5c3a\u5ea6\u6743\u91cd\u4e4b\u548c\u5fc5\u987b\u4e3a 1 \uff0c\u7ecf\u5178\u7684\u53d6\u503c\u4e3a\u7b49\u6743\u91cd\u3002 SSR \u548c MSR \u666e\u904d\u90fd\u5b58\u5728\u7684\u95ee\u9898\uff1a\u5b58\u5728\u660e\u663e\u7684\u504f\u8272\u6548\u679c MSRCR(\u5e26\u8272\u5f69\u6062\u590d\u7684\u591a\u5c3a\u5ea6\u89c6\u7f51\u819c\u589e\u5f3a\u7b97\u6cd5) \u4e3b\u8981\u662f\u5f15\u5165\u4e86\u5747\u503c\u548c\u65b9\u5dee\u7684\u6982\u5ff5\uff0c\u5206\u522b\u8ba1\u7b97\u51fa Log[R(x,y)] \u4e2d R/G/B \u5404\u901a\u9053\u6570\u636e\u7684\u5747\u503c Mean \u548c\u5747\u65b9\u5dee Var \uff08\u6ce8\u610f\u662f\u5747\u65b9\u5dee\uff09 \u5229\u7528\u7c7b\u4f3c\u4e0b\u8ff0\u516c\u5f0f\u8ba1\u7b97\u5404\u901a\u9053\u7684 Min\u548cMax \u503c\uff0c Dynamic=2 \u65f6\u6548\u679c\u8f83\u597d\uff1a Min = Mean - Dynamic * Var; Max = Mean + Dynamic * Var; \u5bf9 Log[R(x,y)] \u7684\u6bcf\u4e00\u4e2a\u503c Value \uff0c\u8fdb\u884c\u7ebf\u6027\u6620\u5c04: R(x,y) = ( Value - Min ) / (Max - Min) * (255-0) \uff0c\u6ce8\u610f\u6ea2\u51fa\u65f6\u8981\u622a\u65ad\u3002","title":"MSRCR"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#mmdetection","text":"\u652f\u6301 Rcnn\u7cfb\u5217\u3001SSD\u7cfb\u5217\u3001YOLOV3/YOLACT/YOLOF\u3001AnchorFree\u7cfb\u5217\u3001transform\u7cfb\u5217 ,\u652f\u6301\u6df7\u5408\u7cbe\u5ea6\u8bad\u7ec3\u3001\u5404\u79cd\u5e38\u89c1\u7684 backbone \u3001\u5404\u79cd\u5e38\u89c1\u7ec4\u4ef6 loss:IOU\u7cfb\u5217\u3001\u591a\u79cdBN \u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u7684\u8bad\u7ec3\u3001\u6d4b\u8bd5 # 1.\u5c06\u6570\u636e\u96c6\u505a\u6210voc/coco\u7b49\u683c\u5f0f(\u5185\u542b\u6709\u8986\u76d6\u4ee3\u7801to_coco/_voc.py)\uff0c\u6309\u7167\u5176\u8981\u6c42\u653e\u7f6e\u5373\u53ef\uff1b\u6216\u8005\u53ef\u4ee5\u81ea\u5b9a\u4e49\u7c7b\uff0c\u653e\u5728mmdet/datasets/my_dataset.py,\u7136\u540e\u518dcfg\u6587\u4ef6\u4e2dtype='MyDataset',ann_file=/path/ \u8fdb\u884c\u6307\u5b9a\u5373\u53ef @DATASETS . register_module () # \u73b0\u5728DATASETS\u4e2d\u8fdb\u884c\u6ce8\u518c MyDataset ( CustomDataset ): # \u5b9e\u73b0 \u4e24\u4e2a\u65b9\u6cd5,load_annotations+get_ann_info # 2.\u9009\u62e9\u5408\u9002\u7684\u914d\u7f6e\u6587\u4ef6\u8fdb\u884c\u914d\u7f6e(py\u914d\u7f6e:\u6570\u636e\u589e\u5f3a\u65b9\u5f0f\u3001loss\u51fd\u6570\uff0c\u4f18\u5316\u5668\u7b49;\u6570\u636e\u7c7b\u522b(\u540d\u79f0\u3001\u6570\u76ee)\u3001\u6570\u636etype(coco/voc)\u3001\u6570\u636e\u8def\u5f84\u3001\u9884\u8bad\u7ec3\u6743\u91cd\u7b49) # 3.\u8bad\u7ec3\u53ef\u4ee5\u5355/\u591agpu\uff0c\u9ed8\u8ba4\u6bcf\u4e2aepoch\u90fd\u9a8c\u8bc1\u4e00\u6b21(map),\u53ef\u4ee5\u5728cfg\u91cc\u8bbe\u7f6e(\u4f8b:\u6bcf\u96945\u4e2aepoch\u9a8c\u8bc1) # 4.\u6d4b\u8bd5,mmdet\u6709\u9ad8\u5c42API\u8c03\u7528\uff0c\u53ea\u9700\u8981\u52a0\u8f7dcfg+.pth\uff0c\u7136\u540e\u6267\u884c\u524d\u5411\u63a8\u7406\u5e76\u663e\u793a\u7ed3\u679c\uff0c\u53ea\u9700\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u5b8c\u6210\uff1b\u5f53\u7136\u4e5f\u652f\u6301\u5f02\u6b65\u63a8\u7406.\u5982\u679c\u8981\u5728\u6807\u51c6\u6570\u636e\u6570\u636e\u96c6\u4e0a\u6d4b\u8bd5(coco/voc)\uff0c\u4e5f\u63d0\u4f9b\u4e86\u6d4b\u8bd5\u4ee3\u7801(single image:\u9ed8\u8ba4 or batched images\uff0c\u5355/\u591agpu\u6d4b\u8bd5)\uff0c\u53ea\u9700\u8981\u4fee\u6539\u53c2\u6570\u5373\u53ef\u3002 \u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u91cd\u8981\u9009\u9879 # 1.model:type='faster_rcnn'/'mask_rcnn' # \u9009\u62e9\u5408\u9002\u7684\u68c0\u6d4b\u5668 # 2.backbone:'resnet-50/resnetxt-101' # \u9009\u62e9\u7f51\u7edc\u7ed3\u6784 # 3.neck:`fpn/pafpn/nasfpn/c4` # \u9009\u62e9\u5408\u9002\u7684neck # 4.norm_setting:`bn/gn/syncbn/` # \u9009\u62e9\u5408\u9002\u7684bn # 5.misc:`dconv/attention` # \u4e3a\u6a21\u578b\u9009\u62e9\u5176\u4ed6\u63d2\u4ef6 # 6.loss_cls/loss_bbox:`CrossEntropyLoss\u3001FocalLoss `/`IoU Losses\u3001L1 losses` # dataset_cfg \u4e00\u4e9b\u81ea\u5b9a\u4e49\u914d\u7f6e # 1.\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\uff0c\u653e\u5728mmdet/datasets/my_dataset.py,\u7136\u540e\u518dcfg\u6587\u4ef6\u4e2dtype='MyDataset',ann_file=/path/ \u8fdb\u884c\u6307\u5b9a\u5373\u53ef from .builder import DATASETS from .custom import CustomDataset @DATASETS . register_module () # \u73b0\u5728DATASETS\u4e2d\u8fdb\u884c\u6ce8\u518c MyDataset ( CustomDataset ): # \u5b9e\u73b0 \u4e24\u4e2a\u65b9\u6cd5,load_annotations+get_ann_info # 2.\u81ea\u5b9a\u4e49\u6a21\u578b\u7c7b\uff1a # 2.1 \u66f4\u6362backbone: mmdet/models/backbones/mobilenet.py # \u81ea\u5b9a\u4e49\u6a21\u578b\u7ed3\u6784 from ..builder import BACKBONES @BACKBONES . register_module () # \u6ce8\u518c class MobileNet ( nn . Module ): # \u5728mmdet/models/backbones/__init__.py\u4e2d\u5bfc\u5165 from .mobilenet import MobileNet # 2.1.1 cfg\u4f7f\u7528 model = dict ( ... backbone = dict ( type = 'MobileNet' , arg1 = xxx , arg2 = xxx ), ... # 2.2 \u66f4\u6362neck: mmdet/models/necks/pafpn.py # \u81ea\u5b9a\u4e49neck from ..builder import NECKS @NECKS . register_module () # \u6ce8\u518c class PAFPN ( nn . Module ): #\u81ea\u5b9a\u4e49neck\u7c7b\uff0ccfg\u4e2dtype='\u7c7b\u540d'\u5373\u53ef # \u5728mmdet/models/necks/__init__.py\u5bfc\u5165 from .pafpn import PAFPN # 2.2.1 cfg\u4e2d\u4f7f\u7528 neck = dict ( type = 'PAFPN' , in_channels = [ 256 , 512 , 1024 , 2048 ], out_channels = 256 , num_outs = 5 ) .... # 3.\u81ea\u5b9a\u4e49loss mmdet/models/losses/xxx_loss.py from ..builder import LOSSES @LOSSES . register_module () # \u6ce8\u518c class FocalLoss ( nn . Module ): # \u81ea\u5b9a\u4e49loss\u7c7b\uff0ccfg\u4e2dtype='\u7c7b\u540d'\u5373\u53ef def __init__ ( self , use_sigmoid = True , gamma = 2.0 , alpha = 0.25 , reduction = 'mean' , loss_weight = 1.0 ): # \u5728mmdet/models/losses/__init__.py\u5bfc\u5165 from .focal_loss import FocalLoss # 3.1 \u5728cfg\u4e2d\u4f7f\u7528 loss_cls = dict ( type = 'FocalLoss' , use_sigmoid = True , gamma = 2.0 , alpha = 0.25 , loss_weight = 1.0 ) \u5176\u4ed6\u5de5\u5177 log \u5206\u6790:\u753b\u51fa loss_cls\u3001loss_bbox \u7684 loss/mAP \u56fe\uff0c tools/analysis_tools/analyze_logs.py \u7ed3\u679c\u5206\u6790:\u5b58\u50a8\u9ad8\u5f97\u5206 topk(50) \u6216\u8005\u4f4e\u7684\u5206 score-thr<0.3 \u7684\u56fe\u7247\u5230 result \u8fdb\u884c\u5206\u6790","title":"mmdetection"},{"location":"%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8C%97/#detectorn2","text":"\u8be5\u6846\u67b6\u76ee\u524d\u5185\u7f6e\u7684\u6a21\u578b\u591a\u662f**\u53cc\u9636\u6bb5\u68c0\u6d4b\u5668**( Faster-Rcnn,,RetinaNet(ssd+focalLoss) ) \u81ea\u5b9a\u4e49\u6570\u636e\u96c6\u8bad\u7ec3 # 1.\u51c6\u5907\u6570\u636e\u96c6\uff0c\u8f6c\u4e3acoco\u683c\u5f0f\u540e\u6309\u7167dataset/readme.md\u8981\u6c42\u6446\u597d\u6570\u636e\uff0c\u7136\u540e\u518ddetectron.data.datasets\u91cc\u6309\u683c\u5f0f\u8fdb\u884c\u6ce8\u518c\u6570\u636e\u96c6\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u51fd\u6570\u6765\u5904\u7406\uff0c\u9ebb\u70e6\u3002 # 2.\u6309\u7167\u8981\u6c42\u5199\u8bad\u7ec3cfg\uff0c\u5f88\u91cd\u8981:\u591a\u5c3a\u5ea6\u8bad\u7ec3\u5c3a\u5bf8\uff0c\u7c7b\u522b\uff0c\u8bbe\u7f6e\u8fed\u4ee3\u6b21\u6570\u3001\u5b66\u4e60\u7387\u8870\u51cf\u7b49\u3002 # 3.\u76f4\u63a5\u4f7f\u7528tool/train_net.py\u8bad\u7ec3\u5373\u53ef\uff0c\u91cc\u9762\u662f\u4f7f\u7528detectron2.engine.DefaultTrainer(cfg).train()\u8fdb\u884c\u8bad\u7ec3\u5373\u53ef\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528tensorboard\u5f00\u542f\u53ef\u89c6\u5316 # 4.\u4f7f\u7528detectron2.evaluation.COCOEvaluator \u8bc4\u6d4b\u6570\u636e\u96c6\u7684map\u5373\u53ef(\u542b\u6709tta\u6d4b\u8bd5) \u6570\u636e\u589e\u5f3a from detectron2.data import transforms as T input = T . AugInput ( image , boxes = boxes , sem_seg = sem_seg ) # # \u5b9a\u4e49\u6570\u636e\u589e\u5f3a\u7684\u8f93\u5165\uff08\u5fc5\u987b\u8f93\u5165\u56fe\u7247\uff0c\u5176\u5b83\u8f93\u5165\u53ef\u9009\uff09\u3002 transform = T . AugmentationList ([ T . RandomBrightness ( 0.9 , 1.1 ), T . RandomFlip ( prob = 0.5 ), T . RandomCrop ( \"absolute\" , ( 640 , 640 )) ])( input ) # 2.\u7ee7\u627fT.Augmentation\u5b9a\u4e49\u65b0\u7684\u6570\u636e\u589e\u5f3a class MyColorAugmentation ( T . Augmentation ): def get_transform ( self , image ): r = np . random . rand ( 2 ) return T . ColorTransform ( lambda x : x * r [ 0 ] + r [ 1 ] * 10 ) \u5199\u81ea\u5df1\u7684\u6a21\u578b:\u66f4\u6362 backbone \u6216\u8005 box head \uff0c\u4f7f\u7528\u5176\u6ce8\u518c\u673a\u5236\uff0c\u6ce8\u518c\u540e\u76f4\u63a5\u5728 config \u8c03\u7528\u5373\u53ef # 1. \u4f7f\u7528\u81ea\u5df1\u5b9a\u4e49\u7684BackBone from detectron2.modeling import BACKBONE_REGISTRY , Backbone , ShapeSpec @BACKBONE_REGISTRY . register () class ToyBackbone ( Backbone ): def __init__ ( self , cfg , input_shape ): super () . __init__ () # \u521b\u5efa\u4f60\u81ea\u5df1\u7684 backbone: self . conv1 = nn . Conv2d ( ... ) def forward ( self , image ): return { \"conv1\" : self . conv1 ( image )} def output_shape ( self ): return { \"conv1\" : ShapeSpec ( channels = 64 , stride = 16 )} # 2.config\u914d\u7f6e cfg = ... # \u8bfb\u53d6 config cfg . MODEL . BACKBONE . NAME = 'ToyBackbone' # \u6216\u8005\u4f60\u53ef\u4ee5\u5728 config file \u4e2d\u66f4\u6539 model = build_model ( cfg ) \u63a8\u7406 # 1.\u52a0\u8f7d\u63a8\u7406\u914d\u7f6e\u6587\u4ef6\uff0c\u91cc\u9762\u4e3b\u8981\u6709\u6a21\u578b\u8def\u5f84\uff0c\u6d4b\u8bd5\u96c6\u8def\u5f84\uff0c\u6d4b\u8bd5\u7684\u6307\u6807\uff0c\u6d4b\u8bd5\u56fe\u7247size\u7b49\uff0c\u5c06\u914d\u7f6e\u6587\u4ef6\u52a0\u8f7d\u5230 DefaultPredictor\u5bf9\u8c61\u91cc \u5e76 \u8fdb\u884c\u63a8\u7406 predictor = DefaultPredictor ( cfg ) outputs = predictor ( im ) # 2.\u4f7f\u7528Visualizer\u7c7b\u6765\u53ef\u89c6\u5316\u8f93\u51fa\u7ed3\u679c v = Visualizer ( im [:,:,:: - 1 ], MetadataCatalog . get ( cfg . DATASETS . TRAIN [ 0 ]), scale = 1.2 ) out = v . draw_instance_predictions ( outputs [ 'instances' ] . to ( 'cpu' )) cv2_imshow ( out . get_image ()[:,:,:: - 1 ])","title":"detectorn2"}]}